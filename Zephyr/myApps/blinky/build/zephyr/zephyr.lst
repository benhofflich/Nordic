
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001360 	.word	0x20001360
}
   4:	00001881 	.word	0x00001881
   8:	00004213 	.word	0x00004213
   c:	000018d5 	.word	0x000018d5
  10:	000018d5 	.word	0x000018d5
  14:	000018d5 	.word	0x000018d5
  18:	000018d5 	.word	0x000018d5
	...
  2c:	000016a1 	.word	0x000016a1
  30:	000018d5 	.word	0x000018d5
  34:	00000000 	.word	0x00000000
  38:	0000164d 	.word	0x0000164d
  3c:	000041f3 	.word	0x000041f3

00000040 <_irq_vector_table>:
  40:	00001841 00001841 00001841 00001841     A...A...A...A...
  50:	00001841 00001841 00001841 00001841     A...A...A...A...
  60:	00001841 00001841 00001841 00001841     A...A...A...A...
  70:	00001841 00001841 00001841 00001841     A...A...A...A...
  80:	00001841 00001841 00001841 00001841     A...A...A...A...
  90:	00001841 00001841 00001841 00001841     A...A...A...A...
  a0:	00001841 00001841 00001841 00001841     A...A...A...A...
  b0:	00001841 00001841 00001841 00001841     A...A...A...A...
  c0:	00001841 00001841 00001841 00001841     A...A...A...A...
  d0:	00001841 00001841 00001841 00001841     A...A...A...A...
  e0:	00001841 00001841 00001841 00001841     A...A...A...A...
  f0:	00001841 00001841 00001841 00001841     A...A...A...A...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <main>:
#define PIN	0
#define FLAGS	0
#endif

void main(void)
{
     3f4:	b570      	push	{r4, r5, r6, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3f6:	4816      	ldr	r0, [pc, #88]	; (450 <CONFIG_FLASH_SIZE+0x50>)
     3f8:	f002 fb80 	bl	2afc <z_impl_device_get_binding>
	const struct device *dev;
	bool led_is_on = true;
	int ret;

	dev = device_get_binding(LED0);
	if (dev == NULL) {
     3fc:	4604      	mov	r4, r0
     3fe:	b330      	cbz	r0, 44e <CONFIG_FLASH_SIZE+0x4e>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     400:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     402:	6881      	ldr	r1, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     404:	6813      	ldr	r3, [r2, #0]
     406:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     40a:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     40c:	680b      	ldr	r3, [r1, #0]
     40e:	f240 6201 	movw	r2, #1537	; 0x601
     412:	210d      	movs	r1, #13
     414:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
     416:	2800      	cmp	r0, #0
     418:	db19      	blt.n	44e <CONFIG_FLASH_SIZE+0x4e>
	bool led_is_on = true;
     41a:	2501      	movs	r5, #1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     41c:	6923      	ldr	r3, [r4, #16]
     41e:	681b      	ldr	r3, [r3, #0]
     420:	f085 0601 	eor.w	r6, r5, #1
     424:	f413 5f00 	tst.w	r3, #8192	; 0x2000
		value = (value != 0) ? 0 : 1;
     428:	bf18      	it	ne
     42a:	b2f5      	uxtbne	r5, r6
	if (value != 0)	{
     42c:	b165      	cbz	r5, 448 <CONFIG_FLASH_SIZE+0x48>
	return api->port_set_bits_raw(port, pins);
     42e:	68a3      	ldr	r3, [r4, #8]
     430:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     436:	4620      	mov	r0, r4
     438:	4798      	blx	r3
		return;
	}

	while (1) {
		gpio_pin_set(dev, PIN, (int)led_is_on);
		led_is_on = !led_is_on;
     43a:	b2f5      	uxtb	r5, r6
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     43c:	2100      	movs	r1, #0
     43e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     442:	f003 f923 	bl	368c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     446:	e7e9      	b.n	41c <CONFIG_FLASH_SIZE+0x1c>
     448:	68a3      	ldr	r3, [r4, #8]
     44a:	691b      	ldr	r3, [r3, #16]
     44c:	e7f1      	b.n	432 <CONFIG_FLASH_SIZE+0x32>
		k_msleep(SLEEP_TIME_MS);
	}
}
     44e:	bd70      	pop	{r4, r5, r6, pc}
     450:	00004c60 	.word	0x00004c60

00000454 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     454:	680b      	ldr	r3, [r1, #0]
     456:	3301      	adds	r3, #1
     458:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     45a:	4b01      	ldr	r3, [pc, #4]	; (460 <char_out+0xc>)
     45c:	681b      	ldr	r3, [r3, #0]
     45e:	4718      	bx	r3
     460:	20000000 	.word	0x20000000

00000464 <__printk_hook_install>:
	_char_out = fn;
     464:	4b01      	ldr	r3, [pc, #4]	; (46c <__printk_hook_install+0x8>)
     466:	6018      	str	r0, [r3, #0]
}
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	20000000 	.word	0x20000000

00000470 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     470:	b507      	push	{r0, r1, r2, lr}
     472:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     474:	2100      	movs	r1, #0
{
     476:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     478:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     47a:	4803      	ldr	r0, [pc, #12]	; (488 <vprintk+0x18>)
     47c:	a901      	add	r1, sp, #4
     47e:	f000 f8eb 	bl	658 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     482:	b003      	add	sp, #12
     484:	f85d fb04 	ldr.w	pc, [sp], #4
     488:	00000455 	.word	0x00000455

0000048c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     48c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     490:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     494:	f019 0808 	ands.w	r8, r9, #8
{
     498:	4604      	mov	r4, r0
     49a:	4693      	mov	fp, r2
	if (processing) {
     49c:	d00d      	beq.n	4ba <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     49e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4a0:	bf0c      	ite	eq
     4a2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4a6:	f049 0920 	orrne.w	r9, r9, #32
     4aa:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4ae:	f38b 8811 	msr	BASEPRI, fp
     4b2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4ba:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     4be:	2902      	cmp	r1, #2
     4c0:	d107      	bne.n	4d2 <process_event+0x46>
			evt = process_recheck(mgr);
     4c2:	4620      	mov	r0, r4
     4c4:	f003 fce5 	bl	3e92 <process_recheck>
		if (evt == EVT_NOP) {
     4c8:	2800      	cmp	r0, #0
     4ca:	d0f0      	beq.n	4ae <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     4cc:	2801      	cmp	r0, #1
     4ce:	8b23      	ldrh	r3, [r4, #24]
     4d0:	d150      	bne.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
			res = mgr->last_res;
     4d2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4d4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     4d6:	2f00      	cmp	r7, #0
     4d8:	da15      	bge.n	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
		*clients = mgr->clients;
     4da:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4dc:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     4e0:	e9c4 8800 	strd	r8, r8, [r4]
     4e4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     4e8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     4ea:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4ec:	8b21      	ldrh	r1, [r4, #24]
     4ee:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     4f2:	45ca      	cmp	sl, r9
     4f4:	d002      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
		if (do_monitors
     4f6:	68a3      	ldr	r3, [r4, #8]
     4f8:	2b00      	cmp	r3, #0
     4fa:	d15c      	bne.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
		    || !sys_slist_is_empty(&clients)
     4fc:	b90d      	cbnz	r5, 502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
		    || (transit != NULL)) {
     4fe:	2e00      	cmp	r6, #0
     500:	d074      	beq.n	5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>
     502:	2300      	movs	r3, #0
     504:	e058      	b.n	5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     506:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     50a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     50c:	2a01      	cmp	r2, #1
     50e:	d820      	bhi.n	552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
		*clients = mgr->clients;
     510:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     514:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     516:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     518:	b289      	uxth	r1, r1
	list->tail = NULL;
     51a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     51e:	d10c      	bne.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     520:	2d00      	cmp	r5, #0
     522:	462b      	mov	r3, r5
     524:	bf38      	it	cc
     526:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     528:	b12b      	cbz	r3, 536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
				mgr->refs += 1U;
     52a:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	3201      	adds	r2, #1
     530:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     532:	2b00      	cmp	r3, #0
     534:	d1f8      	bne.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     536:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     53a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     53c:	4620      	mov	r0, r4
     53e:	f003 fca8 	bl	3e92 <process_recheck>
     542:	4606      	mov	r6, r0
     544:	2800      	cmp	r0, #0
     546:	d0d1      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     548:	8b23      	ldrh	r3, [r4, #24]
     54a:	f043 0320 	orr.w	r3, r3, #32
     54e:	8323      	strh	r3, [r4, #24]
     550:	e7cb      	b.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
	} else if (state == ONOFF_STATE_TO_OFF) {
     552:	2b04      	cmp	r3, #4
     554:	d10c      	bne.n	570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     556:	f021 0107 	bic.w	r1, r1, #7
     55a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     55c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     55e:	4620      	mov	r0, r4
     560:	f003 fc97 	bl	3e92 <process_recheck>
     564:	4605      	mov	r5, r0
     566:	2800      	cmp	r0, #0
     568:	d0bf      	beq.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     56a:	f041 0120 	orr.w	r1, r1, #32
     56e:	8321      	strh	r1, [r4, #24]
     570:	2500      	movs	r5, #0
     572:	e7ba      	b.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
		} else if (evt == EVT_START) {
     574:	2803      	cmp	r0, #3
     576:	d109      	bne.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
			transit = mgr->transitions->start;
     578:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     57a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     57e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     580:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     584:	8323      	strh	r3, [r4, #24]
}
     586:	2500      	movs	r5, #0
		res = 0;
     588:	462f      	mov	r7, r5
     58a:	e7af      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
		} else if (evt == EVT_STOP) {
     58c:	2804      	cmp	r0, #4
     58e:	d106      	bne.n	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
			transit = mgr->transitions->stop;
     590:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     592:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     596:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     598:	f043 0304 	orr.w	r3, r3, #4
     59c:	e7f2      	b.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
		} else if (evt == EVT_RESET) {
     59e:	2805      	cmp	r0, #5
     5a0:	d106      	bne.n	5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>
			transit = mgr->transitions->reset;
     5a2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5a4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     5a8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5aa:	f043 0305 	orr.w	r3, r3, #5
     5ae:	e7e9      	b.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     5b0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     5b2:	462e      	mov	r6, r5
     5b4:	e7e8      	b.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
				   && !sys_slist_is_empty(&mgr->monitors);
     5b6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5b8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5bc:	8321      	strh	r1, [r4, #24]
     5be:	f38b 8811 	msr	BASEPRI, fp
     5c2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     5c6:	bb03      	cbnz	r3, 60a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x122>
	while (!sys_slist_is_empty(list)) {
     5c8:	2d00      	cmp	r5, #0
     5ca:	d133      	bne.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
			if (transit != NULL) {
     5cc:	b116      	cbz	r6, 5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>
				transit(mgr, transition_complete);
     5ce:	4921      	ldr	r1, [pc, #132]	; (654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>)
     5d0:	4620      	mov	r0, r4
     5d2:	47b0      	blx	r6
	__asm__ volatile(
     5d4:	f04f 0320 	mov.w	r3, #32
     5d8:	f3ef 8b11 	mrs	fp, BASEPRI
     5dc:	f383 8811 	msr	BASEPRI, r3
     5e0:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     5e4:	8b23      	ldrh	r3, [r4, #24]
     5e6:	f023 0308 	bic.w	r3, r3, #8
     5ea:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     5ec:	8b23      	ldrh	r3, [r4, #24]
     5ee:	06da      	lsls	r2, r3, #27
     5f0:	d528      	bpl.n	644 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     5f2:	f023 0310 	bic.w	r3, r3, #16
     5f6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     5f8:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     5fa:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     5fe:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     602:	2900      	cmp	r1, #0
     604:	f47f af5b 	bne.w	4be <process_event+0x32>
out:
     608:	e751      	b.n	4ae <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     60a:	68a1      	ldr	r1, [r4, #8]
     60c:	2900      	cmp	r1, #0
     60e:	d0db      	beq.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
	return node->next;
     610:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     612:	f8d1 b004 	ldr.w	fp, [r1, #4]
     616:	2b00      	cmp	r3, #0
     618:	bf38      	it	cc
     61a:	2300      	movcc	r3, #0
     61c:	4699      	mov	r9, r3
     61e:	4652      	mov	r2, sl
     620:	463b      	mov	r3, r7
     622:	4620      	mov	r0, r4
     624:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     626:	f1b9 0f00 	cmp.w	r9, #0
     62a:	d0cd      	beq.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
     62c:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     630:	4649      	mov	r1, r9
     632:	e7ee      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     634:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     636:	463b      	mov	r3, r7
     638:	4652      	mov	r2, sl
     63a:	4620      	mov	r0, r4
     63c:	682d      	ldr	r5, [r5, #0]
     63e:	f003 fc44 	bl	3eca <notify_one>
     642:	e7c1      	b.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     644:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     648:	bf1e      	ittt	ne
     64a:	f023 0320 	bicne.w	r3, r3, #32
     64e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     650:	2102      	movne	r1, #2
     652:	e7d2      	b.n	5fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x112>
     654:	00003ef7 	.word	0x00003ef7

00000658 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     65c:	b091      	sub	sp, #68	; 0x44
     65e:	468b      	mov	fp, r1
     660:	9002      	str	r0, [sp, #8]
     662:	4692      	mov	sl, r2
     664:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     666:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     668:	f89a 0000 	ldrb.w	r0, [sl]
     66c:	b908      	cbnz	r0, 672 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     66e:	4628      	mov	r0, r5
     670:	e35e      	b.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
		if (*fp != '%') {
     672:	2825      	cmp	r0, #37	; 0x25
     674:	f10a 0701 	add.w	r7, sl, #1
     678:	d007      	beq.n	68a <cbvprintf+0x32>
			OUTC('%');
     67a:	9b02      	ldr	r3, [sp, #8]
     67c:	4659      	mov	r1, fp
     67e:	4798      	blx	r3
     680:	2800      	cmp	r0, #0
     682:	f2c0 8355 	blt.w	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     686:	3501      	adds	r5, #1
			break;
     688:	e210      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
		} state = {
     68a:	2218      	movs	r2, #24
     68c:	2100      	movs	r1, #0
     68e:	a80a      	add	r0, sp, #40	; 0x28
     690:	f003 fdf7 	bl	4282 <memset>
	if (*sp == '%') {
     694:	f89a 3001 	ldrb.w	r3, [sl, #1]
     698:	2b25      	cmp	r3, #37	; 0x25
     69a:	d078      	beq.n	78e <cbvprintf+0x136>
     69c:	2200      	movs	r2, #0
     69e:	4694      	mov	ip, r2
     6a0:	4616      	mov	r6, r2
     6a2:	4696      	mov	lr, r2
     6a4:	4610      	mov	r0, r2
     6a6:	4639      	mov	r1, r7
		switch (*sp) {
     6a8:	f817 3b01 	ldrb.w	r3, [r7], #1
     6ac:	2b2b      	cmp	r3, #43	; 0x2b
     6ae:	f000 809d 	beq.w	7ec <cbvprintf+0x194>
     6b2:	f200 8094 	bhi.w	7de <cbvprintf+0x186>
     6b6:	2b20      	cmp	r3, #32
     6b8:	f000 809b 	beq.w	7f2 <cbvprintf+0x19a>
     6bc:	2b23      	cmp	r3, #35	; 0x23
     6be:	f000 809a 	beq.w	7f6 <cbvprintf+0x19e>
     6c2:	b128      	cbz	r0, 6d0 <cbvprintf+0x78>
     6c4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6c8:	f040 0004 	orr.w	r0, r0, #4
     6cc:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6d0:	f1be 0f00 	cmp.w	lr, #0
     6d4:	d005      	beq.n	6e2 <cbvprintf+0x8a>
     6d6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6da:	f040 0008 	orr.w	r0, r0, #8
     6de:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6e2:	b12e      	cbz	r6, 6f0 <cbvprintf+0x98>
     6e4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6e8:	f040 0010 	orr.w	r0, r0, #16
     6ec:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6f0:	f1bc 0f00 	cmp.w	ip, #0
     6f4:	d005      	beq.n	702 <cbvprintf+0xaa>
     6f6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6fa:	f040 0020 	orr.w	r0, r0, #32
     6fe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     702:	b12a      	cbz	r2, 710 <cbvprintf+0xb8>
     704:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     70c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     710:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     714:	f002 0044 	and.w	r0, r2, #68	; 0x44
     718:	2844      	cmp	r0, #68	; 0x44
     71a:	d103      	bne.n	724 <cbvprintf+0xcc>
		conv->flag_zero = false;
     71c:	f36f 1286 	bfc	r2, #6, #1
     720:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     724:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     728:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     72a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     72e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     732:	d17b      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		conv->width_star = true;
     734:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     738:	f042 0201 	orr.w	r2, r2, #1
     73c:	1c4b      	adds	r3, r1, #1
     73e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     742:	781a      	ldrb	r2, [r3, #0]
     744:	2a2e      	cmp	r2, #46	; 0x2e
     746:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     74a:	bf0c      	ite	eq
     74c:	2101      	moveq	r1, #1
     74e:	2100      	movne	r1, #0
     750:	f361 0241 	bfi	r2, r1, #1, #1
     754:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     758:	d174      	bne.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
	if (*sp == '*') {
     75a:	785a      	ldrb	r2, [r3, #1]
     75c:	2a2a      	cmp	r2, #42	; 0x2a
     75e:	d06a      	beq.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     760:	3301      	adds	r3, #1
	size_t val = 0;
     762:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     764:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     766:	4618      	mov	r0, r3
     768:	f810 2b01 	ldrb.w	r2, [r0], #1
     76c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     770:	2f09      	cmp	r7, #9
     772:	f240 808e 	bls.w	892 <CONFIG_ISR_STACK_SIZE+0x92>
	conv->unsupported |= ((conv->prec_value < 0)
     776:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     77a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     77c:	f3c2 0040 	ubfx	r0, r2, #1, #1
     780:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     784:	f361 0241 	bfi	r2, r1, #1, #1
     788:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     78c:	e05a      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
		conv->specifier = *sp++;
     78e:	f10a 0702 	add.w	r7, sl, #2
     792:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     796:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     79a:	07d9      	lsls	r1, r3, #31
     79c:	f140 8149 	bpl.w	a32 <CONFIG_ISR_STACK_SIZE+0x232>
			width = va_arg(ap, int);
     7a0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     7a4:	f1b9 0f00 	cmp.w	r9, #0
     7a8:	da07      	bge.n	7ba <cbvprintf+0x162>
				conv->flag_dash = true;
     7aa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     7ae:	f042 0204 	orr.w	r2, r2, #4
     7b2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     7b6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     7ba:	075a      	lsls	r2, r3, #29
     7bc:	f140 8142 	bpl.w	a44 <CONFIG_ISR_STACK_SIZE+0x244>
			int arg = va_arg(ap, int);
     7c0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     7c4:	f1b8 0f00 	cmp.w	r8, #0
     7c8:	f280 8141 	bge.w	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				conv->prec_present = false;
     7cc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7d0:	f36f 0341 	bfc	r3, #1, #1
     7d4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     7d8:	f04f 38ff 	mov.w	r8, #4294967295
     7dc:	e137      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		switch (*sp) {
     7de:	2b2d      	cmp	r3, #45	; 0x2d
     7e0:	d00c      	beq.n	7fc <cbvprintf+0x1a4>
     7e2:	2b30      	cmp	r3, #48	; 0x30
     7e4:	f47f af6d 	bne.w	6c2 <cbvprintf+0x6a>
			conv->flag_zero = true;
     7e8:	2201      	movs	r2, #1
	} while (loop);
     7ea:	e75c      	b.n	6a6 <cbvprintf+0x4e>
			conv->flag_plus = true;
     7ec:	f04f 0e01 	mov.w	lr, #1
     7f0:	e759      	b.n	6a6 <cbvprintf+0x4e>
			conv->flag_space = true;
     7f2:	2601      	movs	r6, #1
     7f4:	e757      	b.n	6a6 <cbvprintf+0x4e>
			conv->flag_hash = true;
     7f6:	f04f 0c01 	mov.w	ip, #1
     7fa:	e754      	b.n	6a6 <cbvprintf+0x4e>
		switch (*sp) {
     7fc:	2001      	movs	r0, #1
     7fe:	e752      	b.n	6a6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     800:	fb0c 0202 	mla	r2, ip, r2, r0
     804:	3a30      	subs	r2, #48	; 0x30
     806:	4633      	mov	r3, r6
     808:	461e      	mov	r6, r3
     80a:	f816 0b01 	ldrb.w	r0, [r6], #1
     80e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     812:	2f09      	cmp	r7, #9
     814:	d9f4      	bls.n	800 <CONFIG_ISR_STACK_SIZE>
	if (sp != wp) {
     816:	4299      	cmp	r1, r3
     818:	d093      	beq.n	742 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     81a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     81e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     820:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     822:	f362 0141 	bfi	r1, r2, #1, #1
     826:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     82a:	e78a      	b.n	742 <cbvprintf+0xea>
     82c:	460b      	mov	r3, r1
	size_t val = 0;
     82e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     830:	f04f 0c0a 	mov.w	ip, #10
     834:	e7e8      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		conv->prec_star = true;
     836:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     83a:	f042 0204 	orr.w	r2, r2, #4
     83e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     842:	3302      	adds	r3, #2
	switch (*sp) {
     844:	461f      	mov	r7, r3
     846:	f817 2b01 	ldrb.w	r2, [r7], #1
     84a:	2a6c      	cmp	r2, #108	; 0x6c
     84c:	d041      	beq.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
     84e:	d825      	bhi.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     850:	2a68      	cmp	r2, #104	; 0x68
     852:	d02b      	beq.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
     854:	2a6a      	cmp	r2, #106	; 0x6a
     856:	d046      	beq.n	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
     858:	2a4c      	cmp	r2, #76	; 0x4c
     85a:	d04c      	beq.n	8f6 <CONFIG_ISR_STACK_SIZE+0xf6>
     85c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     85e:	f817 2b01 	ldrb.w	r2, [r7], #1
     862:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     866:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     86a:	2a78      	cmp	r2, #120	; 0x78
     86c:	f200 80d9 	bhi.w	a22 <CONFIG_ISR_STACK_SIZE+0x222>
     870:	2a57      	cmp	r2, #87	; 0x57
     872:	d84d      	bhi.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
     874:	2a41      	cmp	r2, #65	; 0x41
     876:	d003      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     878:	3a45      	subs	r2, #69	; 0x45
     87a:	2a02      	cmp	r2, #2
     87c:	f200 80d1 	bhi.w	a22 <CONFIG_ISR_STACK_SIZE+0x222>
		conv->specifier_cat = SPECIFIER_FP;
     880:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     884:	2204      	movs	r2, #4
     886:	f362 0302 	bfi	r3, r2, #0, #3
     88a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     88e:	2301      	movs	r3, #1
			break;
     890:	e09e      	b.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
		val = 10U * val + *sp++ - '0';
     892:	fb06 2101 	mla	r1, r6, r1, r2
     896:	3930      	subs	r1, #48	; 0x30
     898:	4603      	mov	r3, r0
     89a:	e764      	b.n	766 <cbvprintf+0x10e>
	switch (*sp) {
     89c:	2a74      	cmp	r2, #116	; 0x74
     89e:	d026      	beq.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
     8a0:	2a7a      	cmp	r2, #122	; 0x7a
     8a2:	d1db      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
		conv->length_mod = LENGTH_Z;
     8a4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8a8:	2206      	movs	r2, #6
     8aa:	e00d      	b.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
		if (*++sp == 'h') {
     8ac:	785a      	ldrb	r2, [r3, #1]
     8ae:	2a68      	cmp	r2, #104	; 0x68
     8b0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8b4:	d106      	bne.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
			conv->length_mod = LENGTH_HH;
     8b6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     8b8:	f361 02c6 	bfi	r2, r1, #3, #4
     8bc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     8c0:	1c9f      	adds	r7, r3, #2
     8c2:	e7cc      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
			conv->length_mod = LENGTH_H;
     8c4:	4613      	mov	r3, r2
     8c6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     8c8:	f362 03c6 	bfi	r3, r2, #3, #4
     8cc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     8d0:	e7c5      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		if (*++sp == 'l') {
     8d2:	785a      	ldrb	r2, [r3, #1]
     8d4:	2a6c      	cmp	r2, #108	; 0x6c
     8d6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8da:	d101      	bne.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
			conv->length_mod = LENGTH_LL;
     8dc:	2104      	movs	r1, #4
     8de:	e7eb      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
			conv->length_mod = LENGTH_L;
     8e0:	4613      	mov	r3, r2
     8e2:	2203      	movs	r2, #3
     8e4:	e7f0      	b.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
		conv->length_mod = LENGTH_J;
     8e6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8ea:	2205      	movs	r2, #5
     8ec:	e7ec      	b.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
		conv->length_mod = LENGTH_T;
     8ee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8f2:	2207      	movs	r2, #7
     8f4:	e7e8      	b.n	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
		conv->unsupported = true;
     8f6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     8fa:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     8fe:	f023 0302 	bic.w	r3, r3, #2
     902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     906:	f043 0302 	orr.w	r3, r3, #2
     90a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     90e:	e7a6      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
     910:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     914:	2920      	cmp	r1, #32
     916:	f200 8084 	bhi.w	a22 <CONFIG_ISR_STACK_SIZE+0x222>
     91a:	a001      	add	r0, pc, #4	; (adr r0, 920 <CONFIG_ISR_STACK_SIZE+0x120>)
     91c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     920:	000009e5 	.word	0x000009e5
     924:	00000a23 	.word	0x00000a23
     928:	00000a23 	.word	0x00000a23
     92c:	00000a23 	.word	0x00000a23
     930:	00000a23 	.word	0x00000a23
     934:	00000a23 	.word	0x00000a23
     938:	00000a23 	.word	0x00000a23
     93c:	00000a23 	.word	0x00000a23
     940:	00000a23 	.word	0x00000a23
     944:	00000881 	.word	0x00000881
     948:	00000a23 	.word	0x00000a23
     94c:	000009e5 	.word	0x000009e5
     950:	000009a5 	.word	0x000009a5
     954:	00000881 	.word	0x00000881
     958:	00000881 	.word	0x00000881
     95c:	00000881 	.word	0x00000881
     960:	00000a23 	.word	0x00000a23
     964:	000009a5 	.word	0x000009a5
     968:	00000a23 	.word	0x00000a23
     96c:	00000a23 	.word	0x00000a23
     970:	00000a23 	.word	0x00000a23
     974:	00000a23 	.word	0x00000a23
     978:	000009ed 	.word	0x000009ed
     97c:	000009e5 	.word	0x000009e5
     980:	00000a09 	.word	0x00000a09
     984:	00000a23 	.word	0x00000a23
     988:	00000a23 	.word	0x00000a23
     98c:	00000a09 	.word	0x00000a09
     990:	00000a23 	.word	0x00000a23
     994:	000009e5 	.word	0x000009e5
     998:	00000a23 	.word	0x00000a23
     99c:	00000a23 	.word	0x00000a23
     9a0:	000009e5 	.word	0x000009e5
		conv->specifier_cat = SPECIFIER_SINT;
     9a4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     9a8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     9aa:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9ae:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9b2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9b4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     9b8:	bf02      	ittt	eq
     9ba:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     9be:	f041 0101 	orreq.w	r1, r1, #1
     9c2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     9c6:	2a63      	cmp	r2, #99	; 0x63
     9c8:	d131      	bne.n	a2e <CONFIG_ISR_STACK_SIZE+0x22e>
			unsupported = (conv->length_mod != LENGTH_NONE);
     9ca:	3b00      	subs	r3, #0
     9cc:	bf18      	it	ne
     9ce:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     9d0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     9d4:	f3c2 0140 	ubfx	r1, r2, #1, #1
     9d8:	430b      	orrs	r3, r1
     9da:	f363 0241 	bfi	r2, r3, #1, #1
     9de:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     9e2:	e6d8      	b.n	796 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     9e4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     9e8:	2002      	movs	r0, #2
     9ea:	e7de      	b.n	9aa <CONFIG_ISR_STACK_SIZE+0x1aa>
		conv->specifier_cat = SPECIFIER_PTR;
     9ec:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f0:	f003 0378 	and.w	r3, r3, #120	; 0x78
     9f4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     9f8:	2103      	movs	r1, #3
     9fa:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9fe:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     a00:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a04:	4143      	adcs	r3, r0
     a06:	e7e3      	b.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
		conv->specifier_cat = SPECIFIER_PTR;
     a08:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     a0c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     a0e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a12:	f361 0202 	bfi	r2, r1, #0, #3
     a16:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a1a:	bf14      	ite	ne
     a1c:	2301      	movne	r3, #1
     a1e:	2300      	moveq	r3, #0
     a20:	e7d6      	b.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
		conv->invalid = true;
     a22:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a26:	f043 0301 	orr.w	r3, r3, #1
     a2a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     a2e:	2300      	movs	r3, #0
     a30:	e7ce      	b.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
		} else if (conv->width_present) {
     a32:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     a36:	2a00      	cmp	r2, #0
			width = conv->width_value;
     a38:	bfb4      	ite	lt
     a3a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     a3e:	f04f 39ff 	movge.w	r9, #4294967295
     a42:	e6ba      	b.n	7ba <cbvprintf+0x162>
		} else if (conv->prec_present) {
     a44:	079b      	lsls	r3, r3, #30
     a46:	f57f aec7 	bpl.w	7d8 <cbvprintf+0x180>
			precision = conv->prec_value;
     a4a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     a4e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     a52:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a54:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a58:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     a5c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a60:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a62:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a66:	d136      	bne.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
			switch (length_mod) {
     a68:	1ed3      	subs	r3, r2, #3
     a6a:	2b04      	cmp	r3, #4
     a6c:	d820      	bhi.n	ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
     a6e:	e8df f003 	tbb	[pc, r3]
     a72:	0703      	.short	0x0703
     a74:	1f07      	.short	0x1f07
     a76:	1f          	.byte	0x1f
     a77:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     a78:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     a7c:	17c1      	asrs	r1, r0, #31
     a7e:	e004      	b.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
					(sint_value_type)va_arg(ap, intmax_t);
     a80:	3407      	adds	r4, #7
     a82:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     a86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     a8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     a8e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a92:	f013 0603 	ands.w	r6, r3, #3
     a96:	d054      	beq.n	b42 <CONFIG_ISR_STACK_SIZE+0x342>
			OUTS(sp, fp);
     a98:	9802      	ldr	r0, [sp, #8]
     a9a:	463b      	mov	r3, r7
     a9c:	4652      	mov	r2, sl
     a9e:	4659      	mov	r1, fp
     aa0:	f003 faf7 	bl	4092 <outs>
     aa4:	2800      	cmp	r0, #0
     aa6:	f2c0 8143 	blt.w	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     aaa:	4405      	add	r5, r0
			continue;
     aac:	46ba      	mov	sl, r7
     aae:	e5db      	b.n	668 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ab0:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     ab4:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ab6:	ea4f 71e0 	mov.w	r1, r0, asr #31
     aba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     abe:	d105      	bne.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
				value->uint = (unsigned char)value->uint;
     ac0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     ac4:	930a      	str	r3, [sp, #40]	; 0x28
     ac6:	2300      	movs	r3, #0
     ac8:	930b      	str	r3, [sp, #44]	; 0x2c
     aca:	e7e0      	b.n	a8e <CONFIG_ISR_STACK_SIZE+0x28e>
			} else if (length_mod == LENGTH_H) {
     acc:	2a02      	cmp	r2, #2
     ace:	d1de      	bne.n	a8e <CONFIG_ISR_STACK_SIZE+0x28e>
				value->sint = (short)value->sint;
     ad0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     ad4:	e7d2      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
		} else if (specifier_cat == SPECIFIER_UINT) {
     ad6:	2b02      	cmp	r3, #2
     ad8:	d123      	bne.n	b22 <CONFIG_ISR_STACK_SIZE+0x322>
			switch (length_mod) {
     ada:	1ed3      	subs	r3, r2, #3
     adc:	2b04      	cmp	r3, #4
     ade:	d813      	bhi.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
     ae0:	e8df f003 	tbb	[pc, r3]
     ae4:	120a0a03 	.word	0x120a0a03
     ae8:	12          	.byte	0x12
     ae9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     aea:	6820      	ldr	r0, [r4, #0]
     aec:	900a      	str	r0, [sp, #40]	; 0x28
     aee:	2100      	movs	r1, #0
     af0:	1d23      	adds	r3, r4, #4
     af2:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     af4:	461c      	mov	r4, r3
     af6:	e7ca      	b.n	a8e <CONFIG_ISR_STACK_SIZE+0x28e>
					(uint_value_type)va_arg(ap,
     af8:	3407      	adds	r4, #7
     afa:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     afe:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     b02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     b06:	e7f5      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
					(uint_value_type)va_arg(ap, size_t);
     b08:	f854 3b04 	ldr.w	r3, [r4], #4
     b0c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     b0e:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     b10:	f04f 0300 	mov.w	r3, #0
     b14:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     b16:	d0d3      	beq.n	ac0 <CONFIG_ISR_STACK_SIZE+0x2c0>
			} else if (length_mod == LENGTH_H) {
     b18:	2a02      	cmp	r2, #2
     b1a:	d1b8      	bne.n	a8e <CONFIG_ISR_STACK_SIZE+0x28e>
				value->uint = (unsigned short)value->uint;
     b1c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     b20:	e7d0      	b.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
		} else if (specifier_cat == SPECIFIER_FP) {
     b22:	2b04      	cmp	r3, #4
     b24:	d107      	bne.n	b36 <CONFIG_ISR_STACK_SIZE+0x336>
			if (length_mod == LENGTH_UPPER_L) {
     b26:	3407      	adds	r4, #7
     b28:	f024 0407 	bic.w	r4, r4, #7
     b2c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     b30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     b34:	e7ab      	b.n	a8e <CONFIG_ISR_STACK_SIZE+0x28e>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b36:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     b38:	bf04      	itt	eq
     b3a:	f854 3b04 	ldreq.w	r3, [r4], #4
     b3e:	930a      	streq	r3, [sp, #40]	; 0x28
     b40:	e7a5      	b.n	a8e <CONFIG_ISR_STACK_SIZE+0x28e>
		switch (conv->specifier) {
     b42:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b46:	2878      	cmp	r0, #120	; 0x78
     b48:	d8b0      	bhi.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
     b4a:	2862      	cmp	r0, #98	; 0x62
     b4c:	d822      	bhi.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
     b4e:	2825      	cmp	r0, #37	; 0x25
     b50:	f43f ad93 	beq.w	67a <cbvprintf+0x22>
     b54:	2858      	cmp	r0, #88	; 0x58
     b56:	d1a9      	bne.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b58:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     b5c:	9300      	str	r3, [sp, #0]
     b5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     b62:	ab04      	add	r3, sp, #16
     b64:	aa0c      	add	r2, sp, #48	; 0x30
     b66:	f003 fa49 	bl	3ffc <encode_uint>
     b6a:	4682      	mov	sl, r0
			if (precision >= 0) {
     b6c:	f1b8 0f00 	cmp.w	r8, #0
     b70:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     b74:	db0c      	blt.n	b90 <CONFIG_ISR_STACK_SIZE+0x390>
				conv->flag_zero = false;
     b76:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     b7a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     b7e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b82:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     b84:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     b88:	d902      	bls.n	b90 <CONFIG_ISR_STACK_SIZE+0x390>
					conv->pad0_value = precision - (int)len;
     b8a:	eba8 0303 	sub.w	r3, r8, r3
     b8e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     b90:	4680      	mov	r8, r0
     b92:	e03d      	b.n	c10 <CONFIG_ISR_STACK_SIZE+0x410>
     b94:	3863      	subs	r0, #99	; 0x63
     b96:	2815      	cmp	r0, #21
     b98:	d888      	bhi.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
     b9a:	a101      	add	r1, pc, #4	; (adr r1, ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>)
     b9c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     ba0:	00000c21 	.word	0x00000c21
     ba4:	00000c85 	.word	0x00000c85
     ba8:	00000aad 	.word	0x00000aad
     bac:	00000aad 	.word	0x00000aad
     bb0:	00000aad 	.word	0x00000aad
     bb4:	00000aad 	.word	0x00000aad
     bb8:	00000c85 	.word	0x00000c85
     bbc:	00000aad 	.word	0x00000aad
     bc0:	00000aad 	.word	0x00000aad
     bc4:	00000aad 	.word	0x00000aad
     bc8:	00000aad 	.word	0x00000aad
     bcc:	00000ce3 	.word	0x00000ce3
     bd0:	00000cb1 	.word	0x00000cb1
     bd4:	00000cb5 	.word	0x00000cb5
     bd8:	00000aad 	.word	0x00000aad
     bdc:	00000aad 	.word	0x00000aad
     be0:	00000bf9 	.word	0x00000bf9
     be4:	00000aad 	.word	0x00000aad
     be8:	00000cb1 	.word	0x00000cb1
     bec:	00000aad 	.word	0x00000aad
     bf0:	00000aad 	.word	0x00000aad
     bf4:	00000cb1 	.word	0x00000cb1
			if (precision >= 0) {
     bf8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     bfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     c00:	db0a      	blt.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
				len = strnlen(bps, precision);
     c02:	4641      	mov	r1, r8
     c04:	4650      	mov	r0, sl
     c06:	f003 fb1c 	bl	4242 <strnlen>
			bpe = bps + len;
     c0a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     c0e:	2600      	movs	r6, #0
		if (bps == NULL) {
     c10:	f1ba 0f00 	cmp.w	sl, #0
     c14:	d10c      	bne.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
     c16:	e749      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
				len = strlen(bps);
     c18:	4650      	mov	r0, sl
     c1a:	f003 fb0b 	bl	4234 <strlen>
     c1e:	e7f4      	b.n	c0a <CONFIG_ISR_STACK_SIZE+0x40a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c22:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     c26:	2600      	movs	r6, #0
			bpe = buf + 1;
     c28:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     c2c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     c30:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     c34:	b106      	cbz	r6, c38 <CONFIG_ISR_STACK_SIZE+0x438>
			nj_len += 1U;
     c36:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     c38:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     c3c:	06d0      	lsls	r0, r2, #27
     c3e:	d56b      	bpl.n	d18 <CONFIG_ISR_STACK_SIZE+0x518>
			nj_len += 2U;
     c40:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c42:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c44:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c46:	bf48      	it	mi
     c48:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c4a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c4c:	bf48      	it	mi
     c4e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c50:	f1b9 0f00 	cmp.w	r9, #0
     c54:	dd79      	ble.n	d4a <CONFIG_ISR_STACK_SIZE+0x54a>
			if (!conv->flag_dash) {
     c56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     c5a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     c5e:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c62:	9303      	str	r3, [sp, #12]
     c64:	0753      	lsls	r3, r2, #29
     c66:	d470      	bmi.n	d4a <CONFIG_ISR_STACK_SIZE+0x54a>
				if (conv->flag_zero) {
     c68:	0650      	lsls	r0, r2, #25
     c6a:	d564      	bpl.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
					if (sign != 0) {
     c6c:	b146      	cbz	r6, c80 <CONFIG_ISR_STACK_SIZE+0x480>
						OUTC(sign);
     c6e:	9b02      	ldr	r3, [sp, #8]
     c70:	4659      	mov	r1, fp
     c72:	4630      	mov	r0, r6
     c74:	4798      	blx	r3
     c76:	2800      	cmp	r0, #0
     c78:	db5a      	blt.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
						sign = 0;
     c7a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     c7c:	3501      	adds	r5, #1
						sign = 0;
     c7e:	461e      	mov	r6, r3
					pad = '0';
     c80:	2330      	movs	r3, #48	; 0x30
     c82:	e059      	b.n	d38 <CONFIG_ISR_STACK_SIZE+0x538>
			if (conv->flag_plus) {
     c84:	071e      	lsls	r6, r3, #28
     c86:	d411      	bmi.n	cac <CONFIG_ISR_STACK_SIZE+0x4ac>
				sign = ' ';
     c88:	f013 0610 	ands.w	r6, r3, #16
     c8c:	bf18      	it	ne
     c8e:	2620      	movne	r6, #32
			sint = value->sint;
     c90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     c94:	2a00      	cmp	r2, #0
     c96:	f173 0100 	sbcs.w	r1, r3, #0
     c9a:	f6bf af5d 	bge.w	b58 <CONFIG_ISR_STACK_SIZE+0x358>
				value->uint = (uint_value_type)-sint;
     c9e:	4252      	negs	r2, r2
     ca0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ca4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     ca8:	262d      	movs	r6, #45	; 0x2d
     caa:	e755      	b.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
				sign = '+';
     cac:	262b      	movs	r6, #43	; 0x2b
     cae:	e7ef      	b.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
		switch (conv->specifier) {
     cb0:	2600      	movs	r6, #0
     cb2:	e751      	b.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
			if (value->ptr != NULL) {
     cb4:	980a      	ldr	r0, [sp, #40]	; 0x28
     cb6:	b348      	cbz	r0, d0c <CONFIG_ISR_STACK_SIZE+0x50c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cb8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     cbc:	9300      	str	r3, [sp, #0]
     cbe:	aa0c      	add	r2, sp, #48	; 0x30
     cc0:	ab04      	add	r3, sp, #16
     cc2:	2100      	movs	r1, #0
     cc4:	f003 f99a 	bl	3ffc <encode_uint>
				conv->altform_0c = true;
     cc8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     ccc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     cd0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     cd4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cd8:	4682      	mov	sl, r0
				conv->altform_0c = true;
     cda:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     cde:	2600      	movs	r6, #0
				goto prec_int_pad0;
     ce0:	e744      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
				store_count(conv, value->ptr, count);
     ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     ce4:	2a07      	cmp	r2, #7
     ce6:	f63f aee1 	bhi.w	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
     cea:	e8df f002 	tbb	[pc, r2]
     cee:	040d      	.short	0x040d
     cf0:	08080d06 	.word	0x08080d06
     cf4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     cf6:	701d      	strb	r5, [r3, #0]
		break;
     cf8:	e6d8      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
		*(short *)dp = (short)count;
     cfa:	801d      	strh	r5, [r3, #0]
		break;
     cfc:	e6d6      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
		*(intmax_t *)dp = (intmax_t)count;
     cfe:	4628      	mov	r0, r5
     d00:	17e9      	asrs	r1, r5, #31
     d02:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     d06:	e6d1      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d08:	601d      	str	r5, [r3, #0]
		break;
     d0a:	e6cf      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
			bpe = bps + 5;
     d0c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
     d10:	4606      	mov	r6, r0
			bps = "(nil)";
     d12:	f1a8 0a05 	sub.w	sl, r8, #5
     d16:	e78b      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
		} else if (conv->altform_0) {
     d18:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     d1a:	bf48      	it	mi
     d1c:	3301      	addmi	r3, #1
     d1e:	e790      	b.n	c42 <CONFIG_ISR_STACK_SIZE+0x442>
					OUTC(pad);
     d20:	4618      	mov	r0, r3
     d22:	9303      	str	r3, [sp, #12]
     d24:	4659      	mov	r1, fp
     d26:	9b02      	ldr	r3, [sp, #8]
     d28:	4798      	blx	r3
     d2a:	2800      	cmp	r0, #0
     d2c:	9b03      	ldr	r3, [sp, #12]
     d2e:	da04      	bge.n	d3a <CONFIG_ISR_STACK_SIZE+0x53a>
#undef OUTS
#undef OUTC
}
     d30:	b011      	add	sp, #68	; 0x44
     d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d36:	2320      	movs	r3, #32
     d38:	444d      	add	r5, r9
     d3a:	464a      	mov	r2, r9
				while (width-- > 0) {
     d3c:	2a00      	cmp	r2, #0
     d3e:	eba5 0109 	sub.w	r1, r5, r9
     d42:	f109 39ff 	add.w	r9, r9, #4294967295
     d46:	dceb      	bgt.n	d20 <CONFIG_ISR_STACK_SIZE+0x520>
     d48:	460d      	mov	r5, r1
		if (sign != 0) {
     d4a:	b136      	cbz	r6, d5a <CONFIG_ISR_STACK_SIZE+0x55a>
			OUTC(sign);
     d4c:	9b02      	ldr	r3, [sp, #8]
     d4e:	4659      	mov	r1, fp
     d50:	4630      	mov	r0, r6
     d52:	4798      	blx	r3
     d54:	2800      	cmp	r0, #0
     d56:	dbeb      	blt.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     d58:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d5a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d5e:	06d9      	lsls	r1, r3, #27
     d60:	d401      	bmi.n	d66 <CONFIG_ISR_STACK_SIZE+0x566>
     d62:	071a      	lsls	r2, r3, #28
     d64:	d506      	bpl.n	d74 <CONFIG_ISR_STACK_SIZE+0x574>
				OUTC('0');
     d66:	9b02      	ldr	r3, [sp, #8]
     d68:	4659      	mov	r1, fp
     d6a:	2030      	movs	r0, #48	; 0x30
     d6c:	4798      	blx	r3
     d6e:	2800      	cmp	r0, #0
     d70:	dbde      	blt.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     d72:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d74:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d78:	06db      	lsls	r3, r3, #27
     d7a:	d507      	bpl.n	d8c <CONFIG_ISR_STACK_SIZE+0x58c>
				OUTC(conv->specifier);
     d7c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     d80:	9b02      	ldr	r3, [sp, #8]
     d82:	4659      	mov	r1, fp
     d84:	4798      	blx	r3
     d86:	2800      	cmp	r0, #0
     d88:	dbd2      	blt.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     d8a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     d8e:	442e      	add	r6, r5
     d90:	1b73      	subs	r3, r6, r5
     d92:	2b00      	cmp	r3, #0
     d94:	dc16      	bgt.n	dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>
			OUTS(bps, bpe);
     d96:	9802      	ldr	r0, [sp, #8]
     d98:	4643      	mov	r3, r8
     d9a:	4652      	mov	r2, sl
     d9c:	4659      	mov	r1, fp
     d9e:	f003 f978 	bl	4092 <outs>
     da2:	2800      	cmp	r0, #0
     da4:	dbc4      	blt.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     da6:	4405      	add	r5, r0
		while (width > 0) {
     da8:	44a9      	add	r9, r5
     daa:	eba9 0305 	sub.w	r3, r9, r5
     dae:	2b00      	cmp	r3, #0
     db0:	f77f ae7c 	ble.w	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
			OUTC(' ');
     db4:	9b02      	ldr	r3, [sp, #8]
     db6:	4659      	mov	r1, fp
     db8:	2020      	movs	r0, #32
     dba:	4798      	blx	r3
     dbc:	2800      	cmp	r0, #0
     dbe:	dbb7      	blt.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     dc0:	3501      	adds	r5, #1
			--width;
     dc2:	e7f2      	b.n	daa <CONFIG_ISR_STACK_SIZE+0x5aa>
				OUTC('0');
     dc4:	9b02      	ldr	r3, [sp, #8]
     dc6:	4659      	mov	r1, fp
     dc8:	2030      	movs	r0, #48	; 0x30
     dca:	4798      	blx	r3
     dcc:	2800      	cmp	r0, #0
     dce:	dbaf      	blt.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     dd0:	3501      	adds	r5, #1
     dd2:	e7dd      	b.n	d90 <CONFIG_ISR_STACK_SIZE+0x590>
     dd4:	00004c6c 	.word	0x00004c6c

00000dd8 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
     dd8:	b508      	push	{r3, lr}
     dda:	4604      	mov	r4, r0
     ddc:	f04f 0220 	mov.w	r2, #32
     de0:	f3ef 8311 	mrs	r3, BASEPRI
     de4:	f382 8811 	msr	BASEPRI, r2
     de8:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
     dec:	f003 fa03 	bl	41f6 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
     df0:	4620      	mov	r0, r4
     df2:	f000 ffa5 	bl	1d40 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     df6:	4803      	ldr	r0, [pc, #12]	; (e04 <sys_reboot+0x2c>)
     df8:	f003 f83e 	bl	3e78 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     dfc:	f000 fce8 	bl	17d0 <arch_cpu_idle>
     e00:	e7fc      	b.n	dfc <sys_reboot+0x24>
     e02:	bf00      	nop
     e04:	00004c6d 	.word	0x00004c6d

00000e08 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e0a:	4605      	mov	r5, r0
     e0c:	f04f 0320 	mov.w	r3, #32
     e10:	f3ef 8611 	mrs	r6, BASEPRI
     e14:	f383 8811 	msr	BASEPRI, r3
     e18:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e1c:	4b0b      	ldr	r3, [pc, #44]	; (e4c <pm_state_notify+0x44>)
     e1e:	681c      	ldr	r4, [r3, #0]
     e20:	2c00      	cmp	r4, #0
     e22:	bf38      	it	cc
     e24:	2400      	movcc	r4, #0
     e26:	b15c      	cbz	r4, e40 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
     e28:	4f09      	ldr	r7, [pc, #36]	; (e50 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
     e2a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     e2e:	2d00      	cmp	r5, #0
     e30:	bf08      	it	eq
     e32:	4613      	moveq	r3, r2
		if (callback) {
     e34:	b10b      	cbz	r3, e3a <pm_state_notify+0x32>
			callback(z_power_state.state);
     e36:	7838      	ldrb	r0, [r7, #0]
     e38:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     e3a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e3c:	2c00      	cmp	r4, #0
     e3e:	d1f4      	bne.n	e2a <pm_state_notify+0x22>
	__asm__ volatile(
     e40:	f386 8811 	msr	BASEPRI, r6
     e44:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4a:	bf00      	nop
     e4c:	20000218 	.word	0x20000218
     e50:	20000220 	.word	0x20000220

00000e54 <pm_system_resume>:

void pm_system_resume(void)
{
     e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
     e56:	4b0f      	ldr	r3, [pc, #60]	; (e94 <pm_system_resume+0x40>)
     e58:	681a      	ldr	r2, [r3, #0]
     e5a:	b9ba      	cbnz	r2, e8c <pm_system_resume+0x38>
		post_ops_done = 1;
     e5c:	2201      	movs	r2, #1
     e5e:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
     e60:	4a0d      	ldr	r2, [pc, #52]	; (e98 <pm_system_resume+0x44>)
     e62:	ca07      	ldmia	r2, {r0, r1, r2}
     e64:	ab01      	add	r3, sp, #4
     e66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     e6a:	4a0c      	ldr	r2, [pc, #48]	; (e9c <pm_system_resume+0x48>)
     e6c:	b14a      	cbz	r2, e82 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
     e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     e72:	f003 fa25 	bl	42c0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     e76:	2000      	movs	r0, #0
	}
}
     e78:	b005      	add	sp, #20
     e7a:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
     e7e:	f7ff bfc3 	b.w	e08 <pm_state_notify>
     e82:	f382 8811 	msr	BASEPRI, r2
     e86:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     e8a:	e7f4      	b.n	e76 <pm_system_resume+0x22>
}
     e8c:	b005      	add	sp, #20
     e8e:	f85d fb04 	ldr.w	pc, [sp], #4
     e92:	bf00      	nop
     e94:	20000004 	.word	0x20000004
     e98:	20000220 	.word	0x20000220
     e9c:	000042c1 	.word	0x000042c1

00000ea0 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
     ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea2:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
     ea4:	466e      	mov	r6, sp
     ea6:	4601      	mov	r1, r0
{
     ea8:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
     eaa:	4630      	mov	r0, r6
     eac:	f003 f908 	bl	40c0 <pm_policy_next_state>
     eb0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     eb4:	4c17      	ldr	r4, [pc, #92]	; (f14 <pm_system_suspend+0x74>)
     eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
     eba:	7820      	ldrb	r0, [r4, #0]
     ebc:	b340      	cbz	r0, f10 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
     ebe:	4b16      	ldr	r3, [pc, #88]	; (f18 <pm_system_suspend+0x78>)
     ec0:	2100      	movs	r1, #0
     ec2:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
     ec4:	1c6b      	adds	r3, r5, #1
     ec6:	d00e      	beq.n	ee6 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     ec8:	4814      	ldr	r0, [pc, #80]	; (f1c <pm_system_suspend+0x7c>)
     eca:	4617      	mov	r7, r2
     ecc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
     ed0:	2100      	movs	r1, #0
     ed2:	4a13      	ldr	r2, [pc, #76]	; (f20 <pm_system_suspend+0x80>)
     ed4:	2300      	movs	r3, #0
     ed6:	fbe6 0107 	umlal	r0, r1, r6, r7
     eda:	f7ff f911 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     ede:	2101      	movs	r1, #1
     ee0:	1a28      	subs	r0, r5, r0
     ee2:	f003 fc64 	bl	47ae <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     ee6:	f002 f941 	bl	316c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
     eea:	2001      	movs	r0, #1
     eec:	f7ff ff8c 	bl	e08 <pm_state_notify>
	pm_state_set(z_power_state);
     ef0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     ef4:	ab05      	add	r3, sp, #20
     ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
     efa:	4a0a      	ldr	r2, [pc, #40]	; (f24 <pm_system_suspend+0x84>)
     efc:	b11a      	cbz	r2, f06 <pm_system_suspend+0x66>
		pm_power_state_set(info);
     efe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     f02:	f003 f9ca 	bl	429a <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
     f06:	f7ff ffa5 	bl	e54 <pm_system_resume>
	k_sched_unlock();
     f0a:	f002 f9e7 	bl	32dc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
     f0e:	7820      	ldrb	r0, [r4, #0]
}
     f10:	b009      	add	sp, #36	; 0x24
     f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f14:	20000220 	.word	0x20000220
     f18:	20000004 	.word	0x20000004
     f1c:	000f423f 	.word	0x000f423f
     f20:	000f4240 	.word	0x000f4240
     f24:	0000429b 	.word	0x0000429b

00000f28 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
     f28:	b510      	push	{r4, lr}
     f2a:	4807      	ldr	r0, [pc, #28]	; (f48 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
     f2c:	4c07      	ldr	r4, [pc, #28]	; (f4c <uart_console_init+0x24>)
     f2e:	f001 fde5 	bl	2afc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     f32:	4b07      	ldr	r3, [pc, #28]	; (f50 <uart_console_init+0x28>)
     f34:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     f36:	4620      	mov	r0, r4
     f38:	f000 fee4 	bl	1d04 <__stdout_hook_install>
	__printk_hook_install(console_out);
     f3c:	4620      	mov	r0, r4
     f3e:	f7ff fa91 	bl	464 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     f42:	2000      	movs	r0, #0
     f44:	bd10      	pop	{r4, pc}
     f46:	bf00      	nop
     f48:	00004c96 	.word	0x00004c96
     f4c:	00000f55 	.word	0x00000f55
     f50:	2000022c 	.word	0x2000022c

00000f54 <console_out>:
	if ('\n' == c) {
     f54:	280a      	cmp	r0, #10
{
     f56:	b538      	push	{r3, r4, r5, lr}
     f58:	4d07      	ldr	r5, [pc, #28]	; (f78 <console_out+0x24>)
     f5a:	4604      	mov	r4, r0
	if ('\n' == c) {
     f5c:	d104      	bne.n	f68 <console_out+0x14>
     f5e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     f60:	6883      	ldr	r3, [r0, #8]
     f62:	210d      	movs	r1, #13
     f64:	685b      	ldr	r3, [r3, #4]
     f66:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     f68:	6828      	ldr	r0, [r5, #0]
     f6a:	6883      	ldr	r3, [r0, #8]
     f6c:	b2e1      	uxtb	r1, r4
     f6e:	685b      	ldr	r3, [r3, #4]
     f70:	4798      	blx	r3
}
     f72:	4620      	mov	r0, r4
     f74:	bd38      	pop	{r3, r4, r5, pc}
     f76:	bf00      	nop
     f78:	2000022c 	.word	0x2000022c

00000f7c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
     f7c:	4a0e      	ldr	r2, [pc, #56]	; (fb8 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     f7e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     f80:	1a84      	subs	r4, r0, r2
     f82:	10a3      	asrs	r3, r4, #2
     f84:	4c0d      	ldr	r4, [pc, #52]	; (fbc <onoff_stop+0x40>)
     f86:	435c      	muls	r4, r3
{
     f88:	4605      	mov	r5, r0
     f8a:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     f8c:	200c      	movs	r0, #12
     f8e:	fb00 2004 	mla	r0, r0, r4, r2
{
     f92:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     f94:	2140      	movs	r1, #64	; 0x40
     f96:	4408      	add	r0, r1
     f98:	f003 f8a0 	bl	40dc <set_off_state>
	if (err < 0) {
     f9c:	1e01      	subs	r1, r0, #0
     f9e:	db05      	blt.n	fac <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
     fa0:	4b07      	ldr	r3, [pc, #28]	; (fc0 <onoff_stop+0x44>)
     fa2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     fa6:	6863      	ldr	r3, [r4, #4]
     fa8:	4798      	blx	r3
	return 0;
     faa:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     fac:	4628      	mov	r0, r5
     fae:	4633      	mov	r3, r6
}
     fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     fb4:	4718      	bx	r3
     fb6:	bf00      	nop
     fb8:	20000244 	.word	0x20000244
     fbc:	b6db6db7 	.word	0xb6db6db7
     fc0:	00004aec 	.word	0x00004aec

00000fc4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     fc8:	4e10      	ldr	r6, [pc, #64]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fca:	1b84      	subs	r4, r0, r6
     fcc:	10a3      	asrs	r3, r4, #2
     fce:	4c10      	ldr	r4, [pc, #64]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     fd0:	435c      	muls	r4, r3
     fd2:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     fd4:	250c      	movs	r5, #12
     fd6:	4365      	muls	r5, r4
{
     fd8:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
     fda:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
     fde:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
     fe0:	4430      	add	r0, r6
     fe2:	2140      	movs	r1, #64	; 0x40
     fe4:	f003 f893 	bl	410e <set_starting_state>
	if (err < 0) {
     fe8:	1e01      	subs	r1, r0, #0
     fea:	db09      	blt.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
	subdata->cb = cb;
     fec:	4a09      	ldr	r2, [pc, #36]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     fee:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
     ff0:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     ff4:	4b08      	ldr	r3, [pc, #32]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     ff6:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
     ffe:	4718      	bx	r3
		notify(mgr, err);
    1000:	4640      	mov	r0, r8
    1002:	463b      	mov	r3, r7
}
    1004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1008:	4718      	bx	r3
    100a:	bf00      	nop
    100c:	20000244 	.word	0x20000244
    1010:	b6db6db7 	.word	0xb6db6db7
    1014:	00004171 	.word	0x00004171
    1018:	00004aec 	.word	0x00004aec

0000101c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    101c:	2200      	movs	r2, #0
{
    101e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1020:	2101      	movs	r1, #1
{
    1022:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1024:	4610      	mov	r0, r2
    1026:	f000 fb69 	bl	16fc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    102a:	2000      	movs	r0, #0
    102c:	f000 fb48 	bl	16c0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1030:	480f      	ldr	r0, [pc, #60]	; (1070 <clk_init+0x54>)
    1032:	f001 fbc3 	bl	27bc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1036:	4b0f      	ldr	r3, [pc, #60]	; (1074 <clk_init+0x58>)
    1038:	4298      	cmp	r0, r3
    103a:	d115      	bne.n	1068 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    103c:	f003 fa59 	bl	44f2 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1040:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1042:	490d      	ldr	r1, [pc, #52]	; (1078 <clk_init+0x5c>)
    1044:	4630      	mov	r0, r6
    1046:	f002 ff73 	bl	3f30 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    104a:	2800      	cmp	r0, #0
    104c:	db0b      	blt.n	1066 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    104e:	2501      	movs	r5, #1
    1050:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    1052:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1054:	4908      	ldr	r1, [pc, #32]	; (1078 <clk_init+0x5c>)
    1056:	f104 001c 	add.w	r0, r4, #28
    105a:	f002 ff69 	bl	3f30 <onoff_manager_init>
		if (err < 0) {
    105e:	2800      	cmp	r0, #0
    1060:	db01      	blt.n	1066 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1062:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1064:	2000      	movs	r0, #0
}
    1066:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1068:	f06f 0004 	mvn.w	r0, #4
    106c:	e7fb      	b.n	1066 <clk_init+0x4a>
    106e:	bf00      	nop
    1070:	000010b1 	.word	0x000010b1
    1074:	0bad0000 	.word	0x0bad0000
    1078:	00004afc 	.word	0x00004afc

0000107c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    107c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    107e:	230c      	movs	r3, #12
    1080:	4809      	ldr	r0, [pc, #36]	; (10a8 <clkstarted_handle.constprop.0+0x2c>)
    1082:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1084:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1086:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1088:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    108c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    108e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1090:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1092:	4418      	add	r0, r3
    1094:	f003 f859 	bl	414a <set_on_state>
	if (callback) {
    1098:	b12d      	cbz	r5, 10a6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    109a:	4632      	mov	r2, r6
    109c:	462b      	mov	r3, r5
    109e:	4803      	ldr	r0, [pc, #12]	; (10ac <clkstarted_handle.constprop.0+0x30>)
}
    10a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    10a4:	4718      	bx	r3
}
    10a6:	bd70      	pop	{r4, r5, r6, pc}
    10a8:	20000244 	.word	0x20000244
    10ac:	00004860 	.word	0x00004860

000010b0 <clock_event_handler>:
	switch (event) {
    10b0:	b110      	cbz	r0, 10b8 <clock_event_handler+0x8>
    10b2:	2801      	cmp	r0, #1
    10b4:	d004      	beq.n	10c0 <clock_event_handler+0x10>
    10b6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    10b8:	4b03      	ldr	r3, [pc, #12]	; (10c8 <clock_event_handler+0x18>)
    10ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    10bc:	075b      	lsls	r3, r3, #29
    10be:	d101      	bne.n	10c4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    10c0:	f7ff bfdc 	b.w	107c <clkstarted_handle.constprop.0>
}
    10c4:	4770      	bx	lr
    10c6:	bf00      	nop
    10c8:	20000244 	.word	0x20000244

000010cc <generic_hfclk_start>:
{
    10cc:	b508      	push	{r3, lr}
	__asm__ volatile(
    10ce:	f04f 0320 	mov.w	r3, #32
    10d2:	f3ef 8111 	mrs	r1, BASEPRI
    10d6:	f383 8811 	msr	BASEPRI, r3
    10da:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    10de:	4a12      	ldr	r2, [pc, #72]	; (1128 <generic_hfclk_start+0x5c>)
    10e0:	6813      	ldr	r3, [r2, #0]
    10e2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    10e6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    10ea:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    10ec:	d00c      	beq.n	1108 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    10ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10f2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    10f6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    10fa:	f013 0301 	ands.w	r3, r3, #1
    10fe:	d003      	beq.n	1108 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1100:	480a      	ldr	r0, [pc, #40]	; (112c <generic_hfclk_start+0x60>)
    1102:	f003 f822 	bl	414a <set_on_state>
			already_started = true;
    1106:	2301      	movs	r3, #1
	__asm__ volatile(
    1108:	f381 8811 	msr	BASEPRI, r1
    110c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1110:	b123      	cbz	r3, 111c <generic_hfclk_start+0x50>
}
    1112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1116:	2000      	movs	r0, #0
    1118:	f7ff bfb0 	b.w	107c <clkstarted_handle.constprop.0>
}
    111c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1120:	2001      	movs	r0, #1
    1122:	f001 bb5b 	b.w	27dc <nrfx_clock_start>
    1126:	bf00      	nop
    1128:	20000294 	.word	0x20000294
    112c:	20000284 	.word	0x20000284

00001130 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1130:	4b09      	ldr	r3, [pc, #36]	; (1158 <generic_hfclk_stop+0x28>)
    1132:	f3bf 8f5b 	dmb	ish
    1136:	e853 2f00 	ldrex	r2, [r3]
    113a:	f022 0102 	bic.w	r1, r2, #2
    113e:	e843 1000 	strex	r0, r1, [r3]
    1142:	2800      	cmp	r0, #0
    1144:	d1f7      	bne.n	1136 <generic_hfclk_stop+0x6>
    1146:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    114a:	07d3      	lsls	r3, r2, #31
    114c:	d402      	bmi.n	1154 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    114e:	2001      	movs	r0, #1
    1150:	f001 bb76 	b.w	2840 <nrfx_clock_stop>
}
    1154:	4770      	bx	lr
    1156:	bf00      	nop
    1158:	20000294 	.word	0x20000294

0000115c <api_blocking_start>:
{
    115c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    115e:	2200      	movs	r2, #0
    1160:	2301      	movs	r3, #1
    1162:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1166:	4a09      	ldr	r2, [pc, #36]	; (118c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1168:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    116c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    116e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1172:	f003 f823 	bl	41bc <api_start>
	if (err < 0) {
    1176:	2800      	cmp	r0, #0
    1178:	db05      	blt.n	1186 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    117e:	2300      	movs	r3, #0
    1180:	4668      	mov	r0, sp
    1182:	f001 ff6f 	bl	3064 <z_impl_k_sem_take>
}
    1186:	b005      	add	sp, #20
    1188:	f85d fb04 	ldr.w	pc, [sp], #4
    118c:	0000418f 	.word	0x0000418f

00001190 <z_nrf_clock_control_lf_on>:
{
    1190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1194:	493a      	ldr	r1, [pc, #232]	; (1280 <z_nrf_clock_control_lf_on+0xf0>)
    1196:	f3bf 8f5b 	dmb	ish
    119a:	4606      	mov	r6, r0
    119c:	2201      	movs	r2, #1
    119e:	e851 3f00 	ldrex	r3, [r1]
    11a2:	e841 2000 	strex	r0, r2, [r1]
    11a6:	2800      	cmp	r0, #0
    11a8:	d1f9      	bne.n	119e <z_nrf_clock_control_lf_on+0xe>
    11aa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    11ae:	b933      	cbnz	r3, 11be <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    11b0:	4934      	ldr	r1, [pc, #208]	; (1284 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    11b2:	4835      	ldr	r0, [pc, #212]	; (1288 <z_nrf_clock_control_lf_on+0xf8>)
    11b4:	604b      	str	r3, [r1, #4]
    11b6:	60cb      	str	r3, [r1, #12]
    11b8:	608a      	str	r2, [r1, #8]
    11ba:	f002 fecc 	bl	3f56 <onoff_request>
	switch (start_mode) {
    11be:	1e73      	subs	r3, r6, #1
    11c0:	2b01      	cmp	r3, #1
    11c2:	d832      	bhi.n	122a <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    11c4:	2e01      	cmp	r6, #1
    11c6:	d107      	bne.n	11d8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    11c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11cc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    11d0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    11d4:	2b01      	cmp	r3, #1
    11d6:	d028      	beq.n	122a <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    11d8:	f003 fa06 	bl	45e8 <k_is_in_isr>
    11dc:	4604      	mov	r4, r0
    11de:	b918      	cbnz	r0, 11e8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    11e0:	4b2a      	ldr	r3, [pc, #168]	; (128c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    11e2:	781b      	ldrb	r3, [r3, #0]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d144      	bne.n	1272 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    11e8:	f04f 0320 	mov.w	r3, #32
    11ec:	f3ef 8511 	mrs	r5, BASEPRI
    11f0:	f383 8811 	msr	BASEPRI, r3
    11f4:	f3bf 8f6f 	isb	sy
    11f8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    11fa:	4f25      	ldr	r7, [pc, #148]	; (1290 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11fc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1294 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1200:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1298 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1208:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    120c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1210:	03d2      	lsls	r2, r2, #15
    1212:	d50c      	bpl.n	122e <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1214:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1218:	2b01      	cmp	r3, #1
    121a:	d001      	beq.n	1220 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    121c:	2e01      	cmp	r6, #1
    121e:	d106      	bne.n	122e <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    1220:	b30c      	cbz	r4, 1266 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    1222:	f385 8811 	msr	BASEPRI, r5
    1226:	f3bf 8f6f 	isb	sy
}
    122a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    122e:	b1ac      	cbz	r4, 125c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1230:	4628      	mov	r0, r5
    1232:	f000 fadb 	bl	17ec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    123a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    123e:	2b00      	cmp	r3, #0
    1240:	d1e0      	bne.n	1204 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1242:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1244:	2900      	cmp	r1, #0
    1246:	d0dd      	beq.n	1204 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1248:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    124a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    124c:	2301      	movs	r3, #1
    124e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    1252:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1256:	f8c9 3000 	str.w	r3, [r9]
}
    125a:	e7d3      	b.n	1204 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    125c:	2100      	movs	r1, #0
    125e:	2021      	movs	r0, #33	; 0x21
    1260:	f002 fa14 	bl	368c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1264:	e7e7      	b.n	1236 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    1266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    126a:	2202      	movs	r2, #2
    126c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1270:	e7db      	b.n	122a <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    1272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1276:	2202      	movs	r2, #2
    1278:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    127c:	4605      	mov	r5, r0
}
    127e:	e7bc      	b.n	11fa <z_nrf_clock_control_lf_on+0x6a>
    1280:	20000298 	.word	0x20000298
    1284:	20000234 	.word	0x20000234
    1288:	20000260 	.word	0x20000260
    128c:	20000d9e 	.word	0x20000d9e
    1290:	40000104 	.word	0x40000104
    1294:	e000e100 	.word	0xe000e100
    1298:	40000008 	.word	0x40000008

0000129c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    129c:	4a04      	ldr	r2, [pc, #16]	; (12b0 <sys_clock_timeout_handler+0x14>)
    129e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    12a0:	1ac8      	subs	r0, r1, r3
    12a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    12a6:	4403      	add	r3, r0
    12a8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    12aa:	f002 bb53 	b.w	3954 <sys_clock_announce>
    12ae:	bf00      	nop
    12b0:	200002ac 	.word	0x200002ac

000012b4 <set_absolute_alarm>:
{
    12b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12b8:	0086      	lsls	r6, r0, #2
    12ba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    12be:	f100 0450 	add.w	r4, r0, #80	; 0x50
    12c2:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    12c6:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    12c8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1348 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    12cc:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    12d0:	b2a4      	uxth	r4, r4
    12d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    12d6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    12da:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    12de:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    12e2:	4087      	lsls	r7, r0
    12e4:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    12e6:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    12ea:	eba3 030a 	sub.w	r3, r3, sl
    12ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    12f2:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    12f6:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    12f8:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    12fc:	d102      	bne.n	1304 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    12fe:	2013      	movs	r0, #19
    1300:	f003 fa73 	bl	47ea <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1304:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1308:	1aab      	subs	r3, r5, r2
    130a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    130e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1312:	bf88      	it	hi
    1314:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1316:	2300      	movs	r3, #0
    1318:	6023      	str	r3, [r4, #0]
    131a:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    131c:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1320:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1324:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1328:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    132c:	459a      	cmp	sl, r3
    132e:	d006      	beq.n	133e <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    1330:	1aeb      	subs	r3, r5, r3
    1332:	3b02      	subs	r3, #2
    1334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    133c:	d801      	bhi.n	1342 <set_absolute_alarm+0x8e>
}
    133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1342:	462b      	mov	r3, r5
    1344:	e7cf      	b.n	12e6 <set_absolute_alarm+0x32>
    1346:	bf00      	nop
    1348:	40011000 	.word	0x40011000

0000134c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    134e:	4c15      	ldr	r4, [pc, #84]	; (13a4 <rtc_nrf_isr+0x58>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1350:	4f15      	ldr	r7, [pc, #84]	; (13a8 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1352:	2600      	movs	r6, #0
    1354:	4b15      	ldr	r3, [pc, #84]	; (13ac <rtc_nrf_isr+0x60>)
    1356:	2000      	movs	r0, #0
    1358:	681d      	ldr	r5, [r3, #0]
    135a:	469c      	mov	ip, r3
    135c:	b106      	cbz	r6, 1360 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    1360:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1364:	03d2      	lsls	r2, r2, #15
    1366:	d5fa      	bpl.n	135e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1368:	683a      	ldr	r2, [r7, #0]
    136a:	2a00      	cmp	r2, #0
    136c:	d0f7      	beq.n	135e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    136e:	603e      	str	r6, [r7, #0]
    1370:	683a      	ldr	r2, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1376:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    137a:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    137e:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1382:	1a72      	subs	r2, r6, r1
    1384:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    1388:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    138c:	bf88      	it	hi
    138e:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1390:	2601      	movs	r6, #1
			if (handler) {
    1392:	b11d      	cbz	r5, 139c <rtc_nrf_isr+0x50>
				handler(chan, cc_val,
    1394:	685a      	ldr	r2, [r3, #4]
    1396:	6018      	str	r0, [r3, #0]
    1398:	47a8      	blx	r5
    139a:	e7db      	b.n	1354 <rtc_nrf_isr+0x8>
    139c:	f8cc 5000 	str.w	r5, [ip]
}
    13a0:	e7dd      	b.n	135e <rtc_nrf_isr+0x12>
    13a2:	bf00      	nop
    13a4:	40011000 	.word	0x40011000
    13a8:	40011140 	.word	0x40011140
    13ac:	200002a0 	.word	0x200002a0

000013b0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    13b0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    13b2:	4d10      	ldr	r5, [pc, #64]	; (13f4 <sys_clock_driver_init+0x44>)
    13b4:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    13b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    13ba:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    13be:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    13c2:	4b0d      	ldr	r3, [pc, #52]	; (13f8 <sys_clock_driver_init+0x48>)
    13c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    13cc:	2101      	movs	r1, #1
    13ce:	4622      	mov	r2, r4
    13d0:	2011      	movs	r0, #17
    13d2:	f000 f993 	bl	16fc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    13d6:	2011      	movs	r0, #17
    13d8:	f000 f972 	bl	16c0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13dc:	4a07      	ldr	r2, [pc, #28]	; (13fc <sys_clock_driver_init+0x4c>)
    13de:	2301      	movs	r3, #1
    13e0:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    13e2:	4a07      	ldr	r2, [pc, #28]	; (1400 <sys_clock_driver_init+0x50>)
    13e4:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    13e6:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    13e8:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    13ea:	f7ff fed1 	bl	1190 <z_nrf_clock_control_lf_on>

	return 0;
}
    13ee:	4620      	mov	r0, r4
    13f0:	bd38      	pop	{r3, r4, r5, pc}
    13f2:	bf00      	nop
    13f4:	40011000 	.word	0x40011000
    13f8:	e000e100 	.word	0xe000e100
    13fc:	40011008 	.word	0x40011008
    1400:	200002a8 	.word	0x200002a8

00001404 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1404:	4b13      	ldr	r3, [pc, #76]	; (1454 <sys_clock_set_timeout+0x50>)
    1406:	f1b0 3fff 	cmp.w	r0, #4294967295
    140a:	bf08      	it	eq
    140c:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    140e:	3801      	subs	r0, #1
    1410:	2800      	cmp	r0, #0
    1412:	dd1c      	ble.n	144e <sys_clock_set_timeout+0x4a>
    1414:	4298      	cmp	r0, r3
    1416:	bfa8      	it	ge
    1418:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    141a:	4b0f      	ldr	r3, [pc, #60]	; (1458 <sys_clock_set_timeout+0x54>)
    141c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1420:	4b0e      	ldr	r3, [pc, #56]	; (145c <sys_clock_set_timeout+0x58>)
    1422:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1424:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1426:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    142a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    142e:	bf18      	it	ne
    1430:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    1432:	4a0b      	ldr	r2, [pc, #44]	; (1460 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1434:	3301      	adds	r3, #1
    1436:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1438:	480a      	ldr	r0, [pc, #40]	; (1464 <sys_clock_set_timeout+0x60>)
    143a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    143c:	2000      	movs	r0, #0
    143e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1440:	4a04      	ldr	r2, [pc, #16]	; (1454 <sys_clock_set_timeout+0x50>)
    1442:	4293      	cmp	r3, r2
    1444:	bf94      	ite	ls
    1446:	18c9      	addls	r1, r1, r3
    1448:	1889      	addhi	r1, r1, r2
    144a:	f7ff bf33 	b.w	12b4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    144e:	2000      	movs	r0, #0
    1450:	e7e3      	b.n	141a <sys_clock_set_timeout+0x16>
    1452:	bf00      	nop
    1454:	007fffff 	.word	0x007fffff
    1458:	40011000 	.word	0x40011000
    145c:	200002ac 	.word	0x200002ac
    1460:	200002a0 	.word	0x200002a0
    1464:	0000129d 	.word	0x0000129d

00001468 <sys_clock_elapsed>:
    1468:	4b04      	ldr	r3, [pc, #16]	; (147c <sys_clock_elapsed+0x14>)
    146a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    146e:	4b04      	ldr	r3, [pc, #16]	; (1480 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	1ac0      	subs	r0, r0, r3
}
    1474:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1478:	4770      	bx	lr
    147a:	bf00      	nop
    147c:	40011000 	.word	0x40011000
    1480:	200002ac 	.word	0x200002ac

00001484 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1484:	4801      	ldr	r0, [pc, #4]	; (148c <nrf_cc3xx_platform_abort_init+0x8>)
    1486:	f002 bb45 	b.w	3b14 <nrf_cc3xx_platform_set_abort>
    148a:	bf00      	nop
    148c:	00004b08 	.word	0x00004b08

00001490 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1490:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1492:	b1d0      	cbz	r0, 14ca <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1494:	6843      	ldr	r3, [r0, #4]
    1496:	2b04      	cmp	r3, #4
    1498:	d111      	bne.n	14be <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    149a:	2200      	movs	r2, #0
    149c:	6803      	ldr	r3, [r0, #0]
    149e:	f3bf 8f5b 	dmb	ish
    14a2:	e853 1f00 	ldrex	r1, [r3]
    14a6:	2901      	cmp	r1, #1
    14a8:	d103      	bne.n	14b2 <mutex_unlock_platform+0x22>
    14aa:	e843 2000 	strex	r0, r2, [r3]
    14ae:	2800      	cmp	r0, #0
    14b0:	d1f7      	bne.n	14a2 <mutex_unlock_platform+0x12>
    14b2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    14b6:	4807      	ldr	r0, [pc, #28]	; (14d4 <mutex_unlock_platform+0x44>)
    14b8:	bf08      	it	eq
    14ba:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    14bc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    14be:	b13b      	cbz	r3, 14d0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    14c0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    14c2:	f001 fd69 	bl	2f98 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    14c6:	2000      	movs	r0, #0
    14c8:	e7f8      	b.n	14bc <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    14ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    14ce:	e7f5      	b.n	14bc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    14d0:	4801      	ldr	r0, [pc, #4]	; (14d8 <mutex_unlock_platform+0x48>)
    14d2:	e7f3      	b.n	14bc <mutex_unlock_platform+0x2c>
    14d4:	ffff8fe9 	.word	0xffff8fe9
    14d8:	ffff8fea 	.word	0xffff8fea

000014dc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    14dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    14de:	4604      	mov	r4, r0
    14e0:	b918      	cbnz	r0, 14ea <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    14e2:	4b0d      	ldr	r3, [pc, #52]	; (1518 <mutex_free_platform+0x3c>)
    14e4:	480d      	ldr	r0, [pc, #52]	; (151c <mutex_free_platform+0x40>)
    14e6:	685b      	ldr	r3, [r3, #4]
    14e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    14ea:	6861      	ldr	r1, [r4, #4]
    14ec:	2908      	cmp	r1, #8
    14ee:	d00d      	beq.n	150c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    14f0:	f031 0304 	bics.w	r3, r1, #4
    14f4:	d00a      	beq.n	150c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    14f6:	f011 0102 	ands.w	r1, r1, #2
    14fa:	d008      	beq.n	150e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    14fc:	4808      	ldr	r0, [pc, #32]	; (1520 <mutex_free_platform+0x44>)
    14fe:	4621      	mov	r1, r4
    1500:	f003 f849 	bl	4596 <k_mem_slab_free>
        mutex->mutex = NULL;
    1504:	2300      	movs	r3, #0
    1506:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1508:	2300      	movs	r3, #0
    150a:	6063      	str	r3, [r4, #4]
}
    150c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    150e:	6820      	ldr	r0, [r4, #0]
    1510:	2214      	movs	r2, #20
    1512:	f002 feb6 	bl	4282 <memset>
    1516:	e7f7      	b.n	1508 <mutex_free_platform+0x2c>
    1518:	20000060 	.word	0x20000060
    151c:	00004cad 	.word	0x00004cad
    1520:	200002b0 	.word	0x200002b0

00001524 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1524:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1526:	4604      	mov	r4, r0
    1528:	b918      	cbnz	r0, 1532 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    152a:	4b16      	ldr	r3, [pc, #88]	; (1584 <mutex_init_platform+0x60>)
    152c:	4816      	ldr	r0, [pc, #88]	; (1588 <mutex_init_platform+0x64>)
    152e:	685b      	ldr	r3, [r3, #4]
    1530:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1532:	6863      	ldr	r3, [r4, #4]
    1534:	2b04      	cmp	r3, #4
    1536:	d023      	beq.n	1580 <mutex_init_platform+0x5c>
    1538:	2b08      	cmp	r3, #8
    153a:	d021      	beq.n	1580 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    153c:	b9cb      	cbnz	r3, 1572 <mutex_init_platform+0x4e>
    153e:	6823      	ldr	r3, [r4, #0]
    1540:	b9bb      	cbnz	r3, 1572 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1542:	4812      	ldr	r0, [pc, #72]	; (158c <mutex_init_platform+0x68>)
    1544:	f04f 32ff 	mov.w	r2, #4294967295
    1548:	f04f 33ff 	mov.w	r3, #4294967295
    154c:	4621      	mov	r1, r4
    154e:	f001 fbcf 	bl	2cf0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1552:	b908      	cbnz	r0, 1558 <mutex_init_platform+0x34>
    1554:	6823      	ldr	r3, [r4, #0]
    1556:	b91b      	cbnz	r3, 1560 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1558:	4b0a      	ldr	r3, [pc, #40]	; (1584 <mutex_init_platform+0x60>)
    155a:	480d      	ldr	r0, [pc, #52]	; (1590 <mutex_init_platform+0x6c>)
    155c:	685b      	ldr	r3, [r3, #4]
    155e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1560:	6820      	ldr	r0, [r4, #0]
    1562:	2214      	movs	r2, #20
    1564:	2100      	movs	r1, #0
    1566:	f002 fe8c 	bl	4282 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    156a:	6863      	ldr	r3, [r4, #4]
    156c:	f043 0302 	orr.w	r3, r3, #2
    1570:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1572:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1574:	f003 f845 	bl	4602 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1578:	6863      	ldr	r3, [r4, #4]
    157a:	f043 0301 	orr.w	r3, r3, #1
    157e:	6063      	str	r3, [r4, #4]
}
    1580:	bd10      	pop	{r4, pc}
    1582:	bf00      	nop
    1584:	20000060 	.word	0x20000060
    1588:	00004cad 	.word	0x00004cad
    158c:	200002b0 	.word	0x200002b0
    1590:	00004cd3 	.word	0x00004cd3

00001594 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1594:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1596:	b308      	cbz	r0, 15dc <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1598:	6843      	ldr	r3, [r0, #4]
    159a:	2b04      	cmp	r3, #4
    159c:	d110      	bne.n	15c0 <mutex_lock_platform+0x2c>
    159e:	2201      	movs	r2, #1
    15a0:	6803      	ldr	r3, [r0, #0]
    15a2:	f3bf 8f5b 	dmb	ish
    15a6:	e853 1f00 	ldrex	r1, [r3]
    15aa:	2900      	cmp	r1, #0
    15ac:	d103      	bne.n	15b6 <mutex_lock_platform+0x22>
    15ae:	e843 2000 	strex	r0, r2, [r3]
    15b2:	2800      	cmp	r0, #0
    15b4:	d1f7      	bne.n	15a6 <mutex_lock_platform+0x12>
    15b6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    15ba:	d10b      	bne.n	15d4 <mutex_lock_platform+0x40>
    15bc:	2000      	movs	r0, #0
}
    15be:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    15c0:	b153      	cbz	r3, 15d8 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    15c2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    15c4:	f04f 32ff 	mov.w	r2, #4294967295
    15c8:	f04f 33ff 	mov.w	r3, #4294967295
    15cc:	f001 fc66 	bl	2e9c <z_impl_k_mutex_lock>
        if (ret == 0) {
    15d0:	2800      	cmp	r0, #0
    15d2:	d0f3      	beq.n	15bc <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    15d4:	4803      	ldr	r0, [pc, #12]	; (15e4 <mutex_lock_platform+0x50>)
    15d6:	e7f2      	b.n	15be <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    15d8:	4803      	ldr	r0, [pc, #12]	; (15e8 <mutex_lock_platform+0x54>)
    15da:	e7f0      	b.n	15be <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    15dc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    15e0:	e7ed      	b.n	15be <mutex_lock_platform+0x2a>
    15e2:	bf00      	nop
    15e4:	ffff8fe9 	.word	0xffff8fe9
    15e8:	ffff8fea 	.word	0xffff8fea

000015ec <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    15ec:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    15ee:	4906      	ldr	r1, [pc, #24]	; (1608 <nrf_cc3xx_platform_mutex_init+0x1c>)
    15f0:	4806      	ldr	r0, [pc, #24]	; (160c <nrf_cc3xx_platform_mutex_init+0x20>)
    15f2:	2340      	movs	r3, #64	; 0x40
    15f4:	2214      	movs	r2, #20
    15f6:	f002 ffb3 	bl	4560 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    15fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    15fe:	4904      	ldr	r1, [pc, #16]	; (1610 <nrf_cc3xx_platform_mutex_init+0x24>)
    1600:	4804      	ldr	r0, [pc, #16]	; (1614 <nrf_cc3xx_platform_mutex_init+0x28>)
    1602:	f002 bae9 	b.w	3bd8 <nrf_cc3xx_platform_set_mutexes>
    1606:	bf00      	nop
    1608:	200002cc 	.word	0x200002cc
    160c:	200002b0 	.word	0x200002b0
    1610:	00004b20 	.word	0x00004b20
    1614:	00004b10 	.word	0x00004b10

00001618 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1618:	4a09      	ldr	r2, [pc, #36]	; (1640 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    161a:	490a      	ldr	r1, [pc, #40]	; (1644 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    161c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    161e:	6809      	ldr	r1, [r1, #0]
    1620:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1622:	4909      	ldr	r1, [pc, #36]	; (1648 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1624:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1626:	684b      	ldr	r3, [r1, #4]
    1628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    162c:	604b      	str	r3, [r1, #4]
    162e:	2300      	movs	r3, #0
    1630:	f383 8811 	msr	BASEPRI, r3
    1634:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1638:	6893      	ldr	r3, [r2, #8]
}
    163a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    163c:	4770      	bx	lr
    163e:	bf00      	nop
    1640:	20000934 	.word	0x20000934
    1644:	00004bd4 	.word	0x00004bd4
    1648:	e000ed00 	.word	0xe000ed00

0000164c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    164c:	4912      	ldr	r1, [pc, #72]	; (1698 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    164e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1650:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1654:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1656:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    165a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    165e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1660:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1664:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1668:	4f0c      	ldr	r7, [pc, #48]	; (169c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    166a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    166e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1670:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1672:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1674:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1676:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1678:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    167a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    167e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1680:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1682:	f000 fa8f 	bl	1ba4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1686:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    168a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    168e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1692:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1696:	4770      	bx	lr
    ldr r1, =_kernel
    1698:	20000934 	.word	0x20000934
    ldr v4, =_SCS_ICSR
    169c:	e000ed04 	.word	0xe000ed04

000016a0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    16a0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    16a4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    16a6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    16aa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    16ae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    16b0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    16b4:	2902      	cmp	r1, #2
    beq _oops
    16b6:	d0ff      	beq.n	16b8 <_oops>

000016b8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    16b8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    16ba:	f002 fda6 	bl	420a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    16be:	bd01      	pop	{r0, pc}

000016c0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    16c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    16c2:	2b00      	cmp	r3, #0
    16c4:	db08      	blt.n	16d8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16c6:	2201      	movs	r2, #1
    16c8:	f000 001f 	and.w	r0, r0, #31
    16cc:	fa02 f000 	lsl.w	r0, r2, r0
    16d0:	095b      	lsrs	r3, r3, #5
    16d2:	4a02      	ldr	r2, [pc, #8]	; (16dc <arch_irq_enable+0x1c>)
    16d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    16d8:	4770      	bx	lr
    16da:	bf00      	nop
    16dc:	e000e100 	.word	0xe000e100

000016e0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    16e0:	4b05      	ldr	r3, [pc, #20]	; (16f8 <arch_irq_is_enabled+0x18>)
    16e2:	0942      	lsrs	r2, r0, #5
    16e4:	f000 001f 	and.w	r0, r0, #31
    16e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    16ec:	2301      	movs	r3, #1
    16ee:	fa03 f000 	lsl.w	r0, r3, r0
}
    16f2:	4010      	ands	r0, r2
    16f4:	4770      	bx	lr
    16f6:	bf00      	nop
    16f8:	e000e100 	.word	0xe000e100

000016fc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    16fc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    16fe:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1700:	bfa8      	it	ge
    1702:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1706:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    170a:	bfb8      	it	lt
    170c:	4b06      	ldrlt	r3, [pc, #24]	; (1728 <z_arm_irq_priority_set+0x2c>)
    170e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1712:	bfac      	ite	ge
    1714:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1718:	f000 000f 	andlt.w	r0, r0, #15
    171c:	b2c9      	uxtb	r1, r1
    171e:	bfb4      	ite	lt
    1720:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1722:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1726:	4770      	bx	lr
    1728:	e000ed14 	.word	0xe000ed14

0000172c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    172c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1730:	9b00      	ldr	r3, [sp, #0]
    1732:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1736:	490a      	ldr	r1, [pc, #40]	; (1760 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1738:	9b01      	ldr	r3, [sp, #4]
    173a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    173e:	9b02      	ldr	r3, [sp, #8]
    1740:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1744:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    174c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1750:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1754:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1756:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1758:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    175a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    175c:	4770      	bx	lr
    175e:	bf00      	nop
    1760:	00003fe9 	.word	0x00003fe9

00001764 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1764:	4a0b      	ldr	r2, [pc, #44]	; (1794 <z_check_thread_stack_fail+0x30>)
{
    1766:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1768:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    176a:	b190      	cbz	r0, 1792 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    176c:	f113 0f16 	cmn.w	r3, #22
    1770:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1772:	d005      	beq.n	1780 <z_check_thread_stack_fail+0x1c>
    1774:	f1a0 0220 	sub.w	r2, r0, #32
    1778:	429a      	cmp	r2, r3
    177a:	d806      	bhi.n	178a <z_check_thread_stack_fail+0x26>
    177c:	4283      	cmp	r3, r0
    177e:	d204      	bcs.n	178a <z_check_thread_stack_fail+0x26>
    1780:	4281      	cmp	r1, r0
    1782:	bf2c      	ite	cs
    1784:	2100      	movcs	r1, #0
    1786:	2101      	movcc	r1, #1
    1788:	e000      	b.n	178c <z_check_thread_stack_fail+0x28>
    178a:	2100      	movs	r1, #0
    178c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    178e:	bf08      	it	eq
    1790:	2000      	moveq	r0, #0
}
    1792:	4770      	bx	lr
    1794:	20000934 	.word	0x20000934

00001798 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1798:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    179a:	4b09      	ldr	r3, [pc, #36]	; (17c0 <arch_switch_to_main_thread+0x28>)
    179c:	6098      	str	r0, [r3, #8]
{
    179e:	460d      	mov	r5, r1
    17a0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    17a2:	f000 f9ff 	bl	1ba4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    17a6:	4620      	mov	r0, r4
    17a8:	f385 8809 	msr	PSP, r5
    17ac:	2100      	movs	r1, #0
    17ae:	b663      	cpsie	if
    17b0:	f381 8811 	msr	BASEPRI, r1
    17b4:	f3bf 8f6f 	isb	sy
    17b8:	2200      	movs	r2, #0
    17ba:	2300      	movs	r3, #0
    17bc:	f002 fc14 	bl	3fe8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    17c0:	20000934 	.word	0x20000934

000017c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    17c4:	4901      	ldr	r1, [pc, #4]	; (17cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    17c6:	2210      	movs	r2, #16
	str	r2, [r1]
    17c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    17ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    17cc:	e000ed10 	.word	0xe000ed10

000017d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    17d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    17d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    17d4:	f380 8811 	msr	BASEPRI, r0
	isb
    17d8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    17dc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    17e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    17e2:	b662      	cpsie	i
	isb
    17e4:	f3bf 8f6f 	isb	sy

	bx	lr
    17e8:	4770      	bx	lr
    17ea:	bf00      	nop

000017ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    17ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    17ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    17f0:	f381 8811 	msr	BASEPRI, r1

	wfe
    17f4:	bf20      	wfe

	msr	BASEPRI, r0
    17f6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    17fa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    17fc:	4770      	bx	lr
    17fe:	bf00      	nop

00001800 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1800:	bf30      	wfi
    b z_SysNmiOnReset
    1802:	f7ff bffd 	b.w	1800 <z_SysNmiOnReset>
    1806:	bf00      	nop

00001808 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1808:	4a0b      	ldr	r2, [pc, #44]	; (1838 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    180a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    180c:	4b0b      	ldr	r3, [pc, #44]	; (183c <z_arm_prep_c+0x34>)
    180e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1812:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1814:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1818:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    181c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1820:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1828:	f001 f994 	bl	2b54 <z_bss_zero>
	z_data_copy();
    182c:	f001 ffa0 	bl	3770 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1830:	f000 f98e 	bl	1b50 <z_arm_interrupt_init>
	z_cstart();
    1834:	f001 f9b2 	bl	2b9c <z_cstart>
    1838:	00000000 	.word	0x00000000
    183c:	e000ed00 	.word	0xe000ed00

00001840 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1840:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1842:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1844:	4a0b      	ldr	r2, [pc, #44]	; (1874 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1846:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1848:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    184a:	bf1e      	ittt	ne
	movne	r1, #0
    184c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    184e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    1850:	f002 fed0 	blne	45f4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1854:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1856:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    185a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    185e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1862:	4905      	ldr	r1, [pc, #20]	; (1878 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1864:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1866:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1868:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    186a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    186e:	4903      	ldr	r1, [pc, #12]	; (187c <_isr_wrapper+0x3c>)
	bx r1
    1870:	4708      	bx	r1
    1872:	0000      	.short	0x0000
	ldr r2, =_kernel
    1874:	20000934 	.word	0x20000934
	ldr r1, =_sw_isr_table
    1878:	000048f0 	.word	0x000048f0
	ldr r1, =z_arm_int_exit
    187c:	00001ab1 	.word	0x00001ab1

00001880 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1880:	2000      	movs	r0, #0
    msr CONTROL, r0
    1882:	f380 8814 	msr	CONTROL, r0
    isb
    1886:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    188a:	f002 ffb3 	bl	47f4 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    188e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1890:	490d      	ldr	r1, [pc, #52]	; (18c8 <__start+0x48>)
    str r0, [r1]
    1892:	6008      	str	r0, [r1, #0]
    dsb
    1894:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1898:	480c      	ldr	r0, [pc, #48]	; (18cc <__start+0x4c>)
    msr msp, r0
    189a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    189e:	f000 f925 	bl	1aec <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    18a2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    18a4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    18a8:	4809      	ldr	r0, [pc, #36]	; (18d0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    18aa:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    18ae:	1840      	adds	r0, r0, r1
    msr PSP, r0
    18b0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    18b4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    18b8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    18ba:	4308      	orrs	r0, r1
    msr CONTROL, r0
    18bc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    18c0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    18c4:	f7ff ffa0 	bl	1808 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    18c8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    18cc:	20001360 	.word	0x20001360
    ldr r0, =z_interrupt_stacks
    18d0:	200014e0 	.word	0x200014e0

000018d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    18d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    18d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    18dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    18de:	4672      	mov	r2, lr
	bl z_arm_fault
    18e0:	f000 f868 	bl	19b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    18e4:	bd01      	pop	{r0, pc}
    18e6:	bf00      	nop

000018e8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    18e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18ea:	4b19      	ldr	r3, [pc, #100]	; (1950 <mem_manage_fault+0x68>)
{
    18ec:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    18f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    18f4:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18f6:	0790      	lsls	r0, r2, #30
    18f8:	d519      	bpl.n	192e <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    18fa:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    18fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18fe:	0612      	lsls	r2, r2, #24
    1900:	d515      	bpl.n	192e <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1902:	b119      	cbz	r1, 190c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    190a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    190c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    190e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1912:	06d1      	lsls	r1, r2, #27
    1914:	d40e      	bmi.n	1934 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1918:	079a      	lsls	r2, r3, #30
    191a:	d40b      	bmi.n	1934 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    191c:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    191e:	4a0c      	ldr	r2, [pc, #48]	; (1950 <mem_manage_fault+0x68>)
    1920:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1922:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1926:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1928:	2300      	movs	r3, #0
    192a:	7023      	strb	r3, [r4, #0]

	return reason;
}
    192c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    192e:	f06f 0015 	mvn.w	r0, #21
    1932:	e7eb      	b.n	190c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1934:	4b06      	ldr	r3, [pc, #24]	; (1950 <mem_manage_fault+0x68>)
    1936:	685b      	ldr	r3, [r3, #4]
    1938:	051b      	lsls	r3, r3, #20
    193a:	d5ef      	bpl.n	191c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    193c:	4629      	mov	r1, r5
    193e:	f7ff ff11 	bl	1764 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1942:	2800      	cmp	r0, #0
    1944:	d0ea      	beq.n	191c <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1946:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    194a:	2002      	movs	r0, #2
    194c:	e7e7      	b.n	191e <mem_manage_fault+0x36>
    194e:	bf00      	nop
    1950:	e000ed00 	.word	0xe000ed00

00001954 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1954:	4b0d      	ldr	r3, [pc, #52]	; (198c <bus_fault.isra.0+0x38>)
    1956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    195a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    195c:	0592      	lsls	r2, r2, #22
    195e:	d508      	bpl.n	1972 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1960:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1964:	0412      	lsls	r2, r2, #16
    1966:	d504      	bpl.n	1972 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1968:	b118      	cbz	r0, 1972 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    196a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    196c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1970:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1972:	4b06      	ldr	r3, [pc, #24]	; (198c <bus_fault.isra.0+0x38>)
    1974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1978:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    197a:	bf58      	it	pl
    197c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    197e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1980:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1982:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1986:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1988:	7008      	strb	r0, [r1, #0]

	return reason;
}
    198a:	4770      	bx	lr
    198c:	e000ed00 	.word	0xe000ed00

00001990 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1990:	4b07      	ldr	r3, [pc, #28]	; (19b0 <usage_fault.isra.0+0x20>)
    1992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    199a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    199c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    199e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19a0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    19a4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    19a8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    19aa:	2000      	movs	r0, #0
    19ac:	4770      	bx	lr
    19ae:	bf00      	nop
    19b0:	e000ed00 	.word	0xe000ed00

000019b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    19b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    19b6:	4b37      	ldr	r3, [pc, #220]	; (1a94 <z_arm_fault+0xe0>)
    19b8:	685b      	ldr	r3, [r3, #4]
{
    19ba:	b08a      	sub	sp, #40	; 0x28
    19bc:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    19be:	f3c3 0308 	ubfx	r3, r3, #0, #9
    19c2:	2500      	movs	r5, #0
    19c4:	f385 8811 	msr	BASEPRI, r5
    19c8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    19cc:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    19d0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    19d4:	d111      	bne.n	19fa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    19d6:	f002 010c 	and.w	r1, r2, #12
    19da:	2908      	cmp	r1, #8
    19dc:	d00d      	beq.n	19fa <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    19de:	0711      	lsls	r1, r2, #28
    19e0:	d401      	bmi.n	19e6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    19e2:	4606      	mov	r6, r0
			*nested_exc = true;
    19e4:	2501      	movs	r5, #1
	*recoverable = false;
    19e6:	2200      	movs	r2, #0
    19e8:	3b03      	subs	r3, #3
    19ea:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    19ee:	2b03      	cmp	r3, #3
    19f0:	d848      	bhi.n	1a84 <z_arm_fault+0xd0>
    19f2:	e8df f003 	tbb	[pc, r3]
    19f6:	3f04      	.short	0x3f04
    19f8:	3c43      	.short	0x3c43
		return NULL;
    19fa:	462e      	mov	r6, r5
    19fc:	e7f3      	b.n	19e6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    19fe:	4b25      	ldr	r3, [pc, #148]	; (1a94 <z_arm_fault+0xe0>)
    1a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a02:	0792      	lsls	r2, r2, #30
    1a04:	d43e      	bmi.n	1a84 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1a06:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1a08:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1a0c:	d009      	beq.n	1a22 <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
    1a0e:	3328      	adds	r3, #40	; 0x28
    1a10:	781b      	ldrb	r3, [r3, #0]
    1a12:	b1f3      	cbz	r3, 1a52 <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
    1a14:	f10d 0207 	add.w	r2, sp, #7
    1a18:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1a1a:	4630      	mov	r0, r6
    1a1c:	f7ff ff64 	bl	18e8 <mem_manage_fault>
		reason = usage_fault(esf);
    1a20:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1a26:	b993      	cbnz	r3, 1a4e <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1a28:	2220      	movs	r2, #32
    1a2a:	4631      	mov	r1, r6
    1a2c:	a802      	add	r0, sp, #8
    1a2e:	f002 fc1d 	bl	426c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a34:	b345      	cbz	r5, 1a88 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1a3a:	b922      	cbnz	r2, 1a46 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1a3c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1a40:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a44:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1a46:	a902      	add	r1, sp, #8
    1a48:	4620      	mov	r0, r4
    1a4a:	f002 fbdc 	bl	4206 <z_arm_fatal_error>
}
    1a4e:	b00a      	add	sp, #40	; 0x28
    1a50:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1a52:	4b11      	ldr	r3, [pc, #68]	; (1a98 <z_arm_fault+0xe4>)
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	b12b      	cbz	r3, 1a64 <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
    1a58:	f10d 0107 	add.w	r1, sp, #7
    1a5c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1a5e:	f7ff ff79 	bl	1954 <bus_fault.isra.0>
    1a62:	e7dd      	b.n	1a20 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
    1a64:	4b0d      	ldr	r3, [pc, #52]	; (1a9c <z_arm_fault+0xe8>)
    1a66:	8818      	ldrh	r0, [r3, #0]
    1a68:	b284      	uxth	r4, r0
    1a6a:	2c00      	cmp	r4, #0
    1a6c:	d0d9      	beq.n	1a22 <z_arm_fault+0x6e>
		reason = usage_fault(esf);
    1a6e:	f7ff ff8f 	bl	1990 <usage_fault.isra.0>
    1a72:	e7d5      	b.n	1a20 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
    1a74:	f10d 0207 	add.w	r2, sp, #7
    1a78:	2100      	movs	r1, #0
    1a7a:	e7ce      	b.n	1a1a <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    1a7c:	f10d 0107 	add.w	r1, sp, #7
    1a80:	2000      	movs	r0, #0
    1a82:	e7ec      	b.n	1a5e <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1a84:	2400      	movs	r4, #0
    1a86:	e7cc      	b.n	1a22 <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1a8c:	f023 0301 	bic.w	r3, r3, #1
    1a90:	e7d8      	b.n	1a44 <z_arm_fault+0x90>
    1a92:	bf00      	nop
    1a94:	e000ed00 	.word	0xe000ed00
    1a98:	e000ed29 	.word	0xe000ed29
    1a9c:	e000ed2a 	.word	0xe000ed2a

00001aa0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1aa0:	4a02      	ldr	r2, [pc, #8]	; (1aac <z_arm_fault_init+0xc>)
    1aa2:	6953      	ldr	r3, [r2, #20]
    1aa4:	f043 0310 	orr.w	r3, r3, #16
    1aa8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1aaa:	4770      	bx	lr
    1aac:	e000ed00 	.word	0xe000ed00

00001ab0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1ab2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1ab4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1ab6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1ab8:	d003      	beq.n	1ac2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1aba:	4903      	ldr	r1, [pc, #12]	; (1ac8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ac0:	600a      	str	r2, [r1, #0]

00001ac2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1ac2:	4770      	bx	lr
	ldr r3, =_kernel
    1ac4:	20000934 	.word	0x20000934
	ldr r1, =_SCS_ICSR
    1ac8:	e000ed04 	.word	0xe000ed04

00001acc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1acc:	4a06      	ldr	r2, [pc, #24]	; (1ae8 <z_arm_clear_arm_mpu_config+0x1c>)
    1ace:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    1ad0:	2300      	movs	r3, #0
	int num_regions =
    1ad2:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1ad6:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1ad8:	428b      	cmp	r3, r1
    1ada:	d100      	bne.n	1ade <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1adc:	4770      	bx	lr
  MPU->RNR = rnr;
    1ade:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1ae0:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1ae2:	3301      	adds	r3, #1
    1ae4:	e7f8      	b.n	1ad8 <z_arm_clear_arm_mpu_config+0xc>
    1ae6:	bf00      	nop
    1ae8:	e000ed90 	.word	0xe000ed90

00001aec <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1aec:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1aee:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1af0:	2300      	movs	r3, #0
    1af2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1af6:	f7ff ffe9 	bl	1acc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1afa:	4b14      	ldr	r3, [pc, #80]	; (1b4c <z_arm_init_arch_hw_at_boot+0x60>)
    1afc:	f04f 32ff 	mov.w	r2, #4294967295
    1b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1b14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1b18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1b1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1b20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1b24:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1b28:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1b2c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1b30:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1b34:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1b38:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1b3c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1b40:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1b42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b46:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1b4a:	bd08      	pop	{r3, pc}
    1b4c:	e000e100 	.word	0xe000e100

00001b50 <z_arm_interrupt_init>:
    1b50:	4804      	ldr	r0, [pc, #16]	; (1b64 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1b52:	2300      	movs	r3, #0
    1b54:	2120      	movs	r1, #32
    1b56:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1b58:	3301      	adds	r3, #1
    1b5a:	2b30      	cmp	r3, #48	; 0x30
    1b5c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1b60:	d1f9      	bne.n	1b56 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1b62:	4770      	bx	lr
    1b64:	e000e100 	.word	0xe000e100

00001b68 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1b68:	4b06      	ldr	r3, [pc, #24]	; (1b84 <z_impl_k_thread_abort+0x1c>)
    1b6a:	689b      	ldr	r3, [r3, #8]
    1b6c:	4283      	cmp	r3, r0
    1b6e:	d107      	bne.n	1b80 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1b70:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1b74:	b123      	cbz	r3, 1b80 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b76:	4a04      	ldr	r2, [pc, #16]	; (1b88 <z_impl_k_thread_abort+0x20>)
    1b78:	6853      	ldr	r3, [r2, #4]
    1b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1b7e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1b80:	f001 bda4 	b.w	36cc <z_thread_abort>
    1b84:	20000934 	.word	0x20000934
    1b88:	e000ed00 	.word	0xe000ed00

00001b8c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1b8c:	4b02      	ldr	r3, [pc, #8]	; (1b98 <z_arm_configure_static_mpu_regions+0xc>)
    1b8e:	4a03      	ldr	r2, [pc, #12]	; (1b9c <z_arm_configure_static_mpu_regions+0x10>)
    1b90:	4803      	ldr	r0, [pc, #12]	; (1ba0 <z_arm_configure_static_mpu_regions+0x14>)
    1b92:	2101      	movs	r1, #1
    1b94:	f000 b868 	b.w	1c68 <arm_core_mpu_configure_static_mpu_regions>
    1b98:	20040000 	.word	0x20040000
    1b9c:	20000000 	.word	0x20000000
    1ba0:	00004b34 	.word	0x00004b34

00001ba4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1ba4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1ba8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1baa:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1bac:	4a04      	ldr	r2, [pc, #16]	; (1bc0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1bae:	2120      	movs	r1, #32
    1bb0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1bb4:	4618      	mov	r0, r3
    1bb6:	2101      	movs	r1, #1
    1bb8:	f000 b860 	b.w	1c7c <arm_core_mpu_configure_dynamic_mpu_regions>
    1bbc:	200007cc 	.word	0x200007cc
    1bc0:	150b0000 	.word	0x150b0000

00001bc4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1bc6:	4f1e      	ldr	r7, [pc, #120]	; (1c40 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1bc8:	2600      	movs	r6, #0
    1bca:	428e      	cmp	r6, r1
    1bcc:	db01      	blt.n	1bd2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1bce:	4610      	mov	r0, r2
    1bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1bd2:	6844      	ldr	r4, [r0, #4]
    1bd4:	b384      	cbz	r4, 1c38 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    1bd6:	b153      	cbz	r3, 1bee <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1bd8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1bdc:	ea14 0f0c 	tst.w	r4, ip
    1be0:	d118      	bne.n	1c14 <mpu_configure_regions+0x50>
		&&
    1be2:	2c1f      	cmp	r4, #31
    1be4:	d916      	bls.n	1c14 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1be6:	6805      	ldr	r5, [r0, #0]
		&&
    1be8:	ea1c 0f05 	tst.w	ip, r5
    1bec:	d112      	bne.n	1c14 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1bee:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1bf0:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    1bf2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1bf6:	b2d2      	uxtb	r2, r2
    1bf8:	d90f      	bls.n	1c1a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1bfa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1bfe:	d80e      	bhi.n	1c1e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1c00:	3c01      	subs	r4, #1
    1c02:	fab4 f484 	clz	r4, r4
    1c06:	f1c4 041f 	rsb	r4, r4, #31
    1c0a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1c0c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1c0e:	ea4c 0404 	orr.w	r4, ip, r4
    1c12:	d906      	bls.n	1c22 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1c14:	f06f 0215 	mvn.w	r2, #21
    1c18:	e7d9      	b.n	1bce <mpu_configure_regions+0xa>
		return REGION_32B;
    1c1a:	2408      	movs	r4, #8
    1c1c:	e7f6      	b.n	1c0c <mpu_configure_regions+0x48>
		return REGION_4G;
    1c1e:	243e      	movs	r4, #62	; 0x3e
    1c20:	e7f4      	b.n	1c0c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1c22:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1c26:	4315      	orrs	r5, r2
    1c28:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1c2c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1c30:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1c32:	60fd      	str	r5, [r7, #12]
		reg_index++;
    1c34:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1c36:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    1c38:	3601      	adds	r6, #1
    1c3a:	300c      	adds	r0, #12
    1c3c:	e7c5      	b.n	1bca <mpu_configure_regions+0x6>
    1c3e:	bf00      	nop
    1c40:	e000ed90 	.word	0xe000ed90

00001c44 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1c44:	4b03      	ldr	r3, [pc, #12]	; (1c54 <arm_core_mpu_enable+0x10>)
    1c46:	2205      	movs	r2, #5
    1c48:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c4e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1c52:	4770      	bx	lr
    1c54:	e000ed90 	.word	0xe000ed90

00001c58 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1c58:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1c5c:	4b01      	ldr	r3, [pc, #4]	; (1c64 <arm_core_mpu_disable+0xc>)
    1c5e:	2200      	movs	r2, #0
    1c60:	605a      	str	r2, [r3, #4]
}
    1c62:	4770      	bx	lr
    1c64:	e000ed90 	.word	0xe000ed90

00001c68 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1c68:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c6a:	4c03      	ldr	r4, [pc, #12]	; (1c78 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1c6c:	2301      	movs	r3, #1
    1c6e:	7822      	ldrb	r2, [r4, #0]
    1c70:	f7ff ffa8 	bl	1bc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c74:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1c76:	bd10      	pop	{r4, pc}
    1c78:	2000098c 	.word	0x2000098c

00001c7c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1c7c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1c7e:	4a08      	ldr	r2, [pc, #32]	; (1ca0 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    1c80:	2300      	movs	r3, #0
    1c82:	7812      	ldrb	r2, [r2, #0]
    1c84:	f7ff ff9e 	bl	1bc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1c88:	f110 0f16 	cmn.w	r0, #22
    1c8c:	d003      	beq.n	1c96 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    1c8e:	4b05      	ldr	r3, [pc, #20]	; (1ca4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    1c90:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1c92:	2807      	cmp	r0, #7
    1c94:	dd00      	ble.n	1c98 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1c96:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    1c98:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1c9a:	611a      	str	r2, [r3, #16]
    1c9c:	3001      	adds	r0, #1
    1c9e:	e7f8      	b.n	1c92 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    1ca0:	2000098c 	.word	0x2000098c
    1ca4:	e000ed90 	.word	0xe000ed90

00001ca8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1ca8:	4913      	ldr	r1, [pc, #76]	; (1cf8 <z_arm_mpu_init+0x50>)
    1caa:	6808      	ldr	r0, [r1, #0]
    1cac:	2808      	cmp	r0, #8
{
    1cae:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1cb0:	d81e      	bhi.n	1cf0 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1cb2:	f7ff ffd1 	bl	1c58 <arm_core_mpu_disable>
	MPU->RNR = index;
    1cb6:	4c11      	ldr	r4, [pc, #68]	; (1cfc <z_arm_mpu_init+0x54>)
    1cb8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1cba:	2200      	movs	r2, #0
    1cbc:	4290      	cmp	r0, r2
    1cbe:	f101 010c 	add.w	r1, r1, #12
    1cc2:	d105      	bne.n	1cd0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1cc4:	4b0e      	ldr	r3, [pc, #56]	; (1d00 <z_arm_mpu_init+0x58>)
    1cc6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1cc8:	f7ff ffbc 	bl	1c44 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1ccc:	2000      	movs	r0, #0
}
    1cce:	bd10      	pop	{r4, pc}
    1cd0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1cd2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1cd6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1cda:	4313      	orrs	r3, r2
    1cdc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1ce0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1ce6:	f043 0301 	orr.w	r3, r3, #1
    1cea:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1cec:	3201      	adds	r2, #1
    1cee:	e7e5      	b.n	1cbc <z_arm_mpu_init+0x14>
		return -1;
    1cf0:	f04f 30ff 	mov.w	r0, #4294967295
    1cf4:	e7eb      	b.n	1cce <z_arm_mpu_init+0x26>
    1cf6:	bf00      	nop
    1cf8:	00004b40 	.word	0x00004b40
    1cfc:	e000ed90 	.word	0xe000ed90
    1d00:	2000098c 	.word	0x2000098c

00001d04 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1d04:	4b01      	ldr	r3, [pc, #4]	; (1d0c <__stdout_hook_install+0x8>)
    1d06:	6018      	str	r0, [r3, #0]
}
    1d08:	4770      	bx	lr
    1d0a:	bf00      	nop
    1d0c:	20000028 	.word	0x20000028

00001d10 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1d10:	f04f 0320 	mov.w	r3, #32
    1d14:	f3ef 8211 	mrs	r2, BASEPRI
    1d18:	f383 8811 	msr	BASEPRI, r3
    1d1c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1d20:	4906      	ldr	r1, [pc, #24]	; (1d3c <nordicsemi_nrf52_init+0x2c>)
    1d22:	2301      	movs	r3, #1
    1d24:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1d28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1d2c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1d30:	f382 8811 	msr	BASEPRI, r2
    1d34:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1d38:	2000      	movs	r0, #0
    1d3a:	4770      	bx	lr
    1d3c:	4001e000 	.word	0x4001e000

00001d40 <sys_arch_reboot>:
    *p_gpregret = val;
    1d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d44:	b2c0      	uxtb	r0, r0
    1d46:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1d4a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1d4e:	4905      	ldr	r1, [pc, #20]	; (1d64 <sys_arch_reboot+0x24>)
    1d50:	4b05      	ldr	r3, [pc, #20]	; (1d68 <sys_arch_reboot+0x28>)
    1d52:	68ca      	ldr	r2, [r1, #12]
    1d54:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1d58:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1d5a:	60cb      	str	r3, [r1, #12]
    1d5c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1d60:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1d62:	e7fd      	b.n	1d60 <sys_arch_reboot+0x20>
    1d64:	e000ed00 	.word	0xe000ed00
    1d68:	05fa0004 	.word	0x05fa0004

00001d6c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1d6c:	b120      	cbz	r0, 1d78 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1d6e:	4b03      	ldr	r3, [pc, #12]	; (1d7c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1d70:	0180      	lsls	r0, r0, #6
    1d72:	f043 0301 	orr.w	r3, r3, #1
    1d76:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1d78:	4770      	bx	lr
    1d7a:	bf00      	nop
    1d7c:	00004ad0 	.word	0x00004ad0

00001d80 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1d80:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1d82:	4b09      	ldr	r3, [pc, #36]	; (1da8 <gpio_nrfx_init+0x28>)
    1d84:	781a      	ldrb	r2, [r3, #0]
    1d86:	b96a      	cbnz	r2, 1da4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1d88:	2101      	movs	r1, #1
    1d8a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1d8c:	2006      	movs	r0, #6
    1d8e:	2105      	movs	r1, #5
    1d90:	f7ff fcb4 	bl	16fc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1d94:	2006      	movs	r0, #6
    1d96:	f7ff fc93 	bl	16c0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    1d9a:	4b04      	ldr	r3, [pc, #16]	; (1dac <gpio_nrfx_init+0x2c>)
    1d9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1da0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1da4:	2000      	movs	r0, #0
    1da6:	bd08      	pop	{r3, pc}
    1da8:	2000098d 	.word	0x2000098d
    1dac:	40006000 	.word	0x40006000

00001db0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1db0:	4b2b      	ldr	r3, [pc, #172]	; (1e60 <gpio_nrfx_config+0xb0>)
{
    1db2:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1db4:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1db6:	482b      	ldr	r0, [pc, #172]	; (1e64 <gpio_nrfx_config+0xb4>)
    1db8:	4013      	ands	r3, r2
    1dba:	4283      	cmp	r3, r0
    1dbc:	d041      	beq.n	1e42 <gpio_nrfx_config+0x92>
    1dbe:	d80d      	bhi.n	1ddc <gpio_nrfx_config+0x2c>
    1dc0:	2b06      	cmp	r3, #6
    1dc2:	d015      	beq.n	1df0 <gpio_nrfx_config+0x40>
    1dc4:	d805      	bhi.n	1dd2 <gpio_nrfx_config+0x22>
    1dc6:	b19b      	cbz	r3, 1df0 <gpio_nrfx_config+0x40>
    1dc8:	2b02      	cmp	r3, #2
    1dca:	d03c      	beq.n	1e46 <gpio_nrfx_config+0x96>
    1dcc:	f06f 0015 	mvn.w	r0, #21
    1dd0:	e036      	b.n	1e40 <gpio_nrfx_config+0x90>
    1dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1dd6:	d1f9      	bne.n	1dcc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1dd8:	2301      	movs	r3, #1
    1dda:	e009      	b.n	1df0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1ddc:	4822      	ldr	r0, [pc, #136]	; (1e68 <gpio_nrfx_config+0xb8>)
    1dde:	4283      	cmp	r3, r0
    1de0:	d033      	beq.n	1e4a <gpio_nrfx_config+0x9a>
    1de2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1de6:	d032      	beq.n	1e4e <gpio_nrfx_config+0x9e>
    1de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1dec:	d1ee      	bne.n	1dcc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    1dee:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1df0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    1df2:	bf54      	ite	pl
    1df4:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    1df8:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1dfa:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1dfe:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    1e00:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1e04:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1e08:	d507      	bpl.n	1e1a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1e0a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1e0e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1e10:	d01f      	beq.n	1e52 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1e12:	2201      	movs	r2, #1
    1e14:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1e16:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1e1a:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    1e1c:	4c13      	ldr	r4, [pc, #76]	; (1e6c <gpio_nrfx_config+0xbc>)
    1e1e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1e20:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1e24:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    1e28:	bf18      	it	ne
    1e2a:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1e2e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    1e32:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1e36:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    1e3a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    1e3e:	2000      	movs	r0, #0
}
    1e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1e42:	2307      	movs	r3, #7
    1e44:	e7d4      	b.n	1df0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1e46:	2304      	movs	r3, #4
    1e48:	e7d2      	b.n	1df0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1e4a:	2305      	movs	r3, #5
    1e4c:	e7d0      	b.n	1df0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1e4e:	2303      	movs	r3, #3
    1e50:	e7ce      	b.n	1df0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1e52:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1e54:	bf42      	ittt	mi
    1e56:	2201      	movmi	r2, #1
    1e58:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1e5a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    1e5e:	e7dc      	b.n	1e1a <gpio_nrfx_config+0x6a>
    1e60:	00f00006 	.word	0x00f00006
    1e64:	00100006 	.word	0x00100006
    1e68:	00400002 	.word	0x00400002
    1e6c:	50000300 	.word	0x50000300

00001e70 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    1e70:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    1e74:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    1e76:	4b08      	ldr	r3, [pc, #32]	; (1e98 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1e78:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    1e7a:	bf18      	it	ne
    1e7c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1e80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1e84:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    1e88:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    1e90:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    1e94:	4770      	bx	lr
    1e96:	bf00      	nop
    1e98:	50000300 	.word	0x50000300

00001e9c <check_level_trigger_pins>:
{
    1e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    1ea0:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    1ea2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    1ea6:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    1ea8:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1f28 <check_level_trigger_pins+0x8c>
{
    1eac:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    1eae:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    1eb2:	430a      	orrs	r2, r1
    1eb4:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1eb8:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1ebc:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    1ebe:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    1ec2:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    1ec4:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    1ec8:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    1eca:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    1ecc:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    1ed0:	b917      	cbnz	r7, 1ed8 <check_level_trigger_pins+0x3c>
}
    1ed2:	4628      	mov	r0, r5
    1ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    1ed8:	423c      	tst	r4, r7
    1eda:	d021      	beq.n	1f20 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1edc:	f89a 3008 	ldrb.w	r3, [sl, #8]
    1ee0:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    1ee4:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1ee6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    1eea:	d114      	bne.n	1f16 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    1eec:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    1eee:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1ef0:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    1ef4:	bf14      	ite	ne
    1ef6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    1efa:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    1efc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    1f04:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    1f08:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    1f0a:	bf02      	ittt	eq
    1f0c:	f8d8 3000 	ldreq.w	r3, [r8]
    1f10:	4323      	orreq	r3, r4
    1f12:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1f16:	2100      	movs	r1, #0
    1f18:	f7ff ffaa 	bl	1e70 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    1f1c:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    1f20:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    1f24:	0064      	lsls	r4, r4, #1
    1f26:	e7d3      	b.n	1ed0 <check_level_trigger_pins+0x34>
    1f28:	50000300 	.word	0x50000300

00001f2c <gpio_nrfx_pin_interrupt_configure>:
{
    1f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f2e:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f30:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    1f32:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f34:	7a09      	ldrb	r1, [r1, #8]
    1f36:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    1f3a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1f3e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    1f42:	d110      	bne.n	1f66 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    1f44:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    1f46:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    1f48:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    1f4c:	485d      	ldr	r0, [pc, #372]	; (20c4 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f4e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    1f52:	bf18      	it	ne
    1f54:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f58:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1f5c:	07c8      	lsls	r0, r1, #31
    1f5e:	d507      	bpl.n	1f70 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    1f60:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1f64:	e093      	b.n	208e <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1f66:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1f6a:	68f9      	ldr	r1, [r7, #12]
    1f6c:	f000 8091 	beq.w	2092 <gpio_nrfx_pin_interrupt_configure+0x166>
    1f70:	68f8      	ldr	r0, [r7, #12]
    1f72:	2101      	movs	r1, #1
    1f74:	40b1      	lsls	r1, r6
    1f76:	4301      	orrs	r1, r0
    1f78:	6978      	ldr	r0, [r7, #20]
    1f7a:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1f7c:	2101      	movs	r1, #1
    1f7e:	40b1      	lsls	r1, r6
    1f80:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1f84:	69ba      	ldr	r2, [r7, #24]
    1f86:	bf0c      	ite	eq
    1f88:	4308      	orreq	r0, r1
    1f8a:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1f8c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1f90:	bf0c      	ite	eq
    1f92:	430a      	orreq	r2, r1
    1f94:	438a      	bicne	r2, r1
    1f96:	61ba      	str	r2, [r7, #24]
    1f98:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1f9a:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1fa0:	bf0c      	ite	eq
    1fa2:	4311      	orreq	r1, r2
    1fa4:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1fa8:	4a47      	ldr	r2, [pc, #284]	; (20c8 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    1faa:	6139      	str	r1, [r7, #16]
    1fac:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1fb0:	2000      	movs	r0, #0
    1fb2:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1fb4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    1fb8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1fbc:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1fc0:	428d      	cmp	r5, r1
    1fc2:	d16b      	bne.n	209c <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
    1fc4:	fa23 f100 	lsr.w	r1, r3, r0
    1fc8:	07c9      	lsls	r1, r1, #31
    1fca:	d567      	bpl.n	209c <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1fcc:	0083      	lsls	r3, r0, #2
    1fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1fd2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1fd6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1fda:	f021 0101 	bic.w	r1, r1, #1
    1fde:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    1fe2:	2301      	movs	r3, #1
    1fe4:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    1fe6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    1fea:	b2c0      	uxtb	r0, r0
    1fec:	f000 fca2 	bl	2934 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1ff0:	4628      	mov	r0, r5
    1ff2:	2100      	movs	r1, #0
    1ff4:	f7ff ff3c 	bl	1e70 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    1ff8:	68f8      	ldr	r0, [r7, #12]
    1ffa:	40f0      	lsrs	r0, r6
    1ffc:	f010 0001 	ands.w	r0, r0, #1
    2000:	d045      	beq.n	208e <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
    2002:	6978      	ldr	r0, [r7, #20]
    2004:	40f0      	lsrs	r0, r6
    2006:	f010 0401 	ands.w	r4, r0, #1
    200a:	d04e      	beq.n	20aa <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
    200c:	69bb      	ldr	r3, [r7, #24]
    200e:	40f3      	lsrs	r3, r6
    2010:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2012:	bf5f      	itttt	pl
    2014:	6939      	ldrpl	r1, [r7, #16]
    2016:	fa21 f606 	lsrpl.w	r6, r1, r6
    201a:	f006 0601 	andpl.w	r6, r6, #1
    201e:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2022:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2026:	bf54      	ite	pl
    2028:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    202a:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    202c:	f000 fca4 	bl	2978 <nrfx_gpiote_channel_alloc>
    2030:	4b26      	ldr	r3, [pc, #152]	; (20cc <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    2032:	4298      	cmp	r0, r3
    2034:	d136      	bne.n	20a4 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    2036:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    203a:	008b      	lsls	r3, r1, #2
    203c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2040:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2044:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2046:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    204a:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    204e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2052:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2056:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    205a:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    205e:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    2060:	008a      	lsls	r2, r1, #2
    2062:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2066:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    206a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    206e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2070:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2074:	6010      	str	r0, [r2, #0]
    2076:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2078:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    207c:	f042 0201 	orr.w	r2, r2, #1
    2080:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    2084:	4a10      	ldr	r2, [pc, #64]	; (20c8 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2086:	2301      	movs	r3, #1
    2088:	408b      	lsls	r3, r1
    208a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    208e:	b003      	add	sp, #12
    2090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2092:	2001      	movs	r0, #1
    2094:	40b0      	lsls	r0, r6
    2096:	ea21 0100 	bic.w	r1, r1, r0
    209a:	e76d      	b.n	1f78 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    209c:	3001      	adds	r0, #1
    209e:	2808      	cmp	r0, #8
    20a0:	d188      	bne.n	1fb4 <gpio_nrfx_pin_interrupt_configure+0x88>
    20a2:	e7a5      	b.n	1ff0 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    20a4:	f06f 0012 	mvn.w	r0, #18
    20a8:	e7f1      	b.n	208e <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    20aa:	6939      	ldr	r1, [r7, #16]
    20ac:	40f1      	lsrs	r1, r6
    20ae:	f001 0101 	and.w	r1, r1, #1
    20b2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    20b6:	4628      	mov	r0, r5
    20b8:	b2c9      	uxtb	r1, r1
    20ba:	f7ff fed9 	bl	1e70 <nrf_gpio_cfg_sense_set>
	int res = 0;
    20be:	4620      	mov	r0, r4
    20c0:	e7e5      	b.n	208e <gpio_nrfx_pin_interrupt_configure+0x162>
    20c2:	bf00      	nop
    20c4:	50000300 	.word	0x50000300
    20c8:	40006000 	.word	0x40006000
    20cc:	0bad0000 	.word	0x0bad0000

000020d0 <gpiote_event_handler>:
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    20d2:	2400      	movs	r4, #0
{
    20d4:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    20d6:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    20da:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    20de:	4e26      	ldr	r6, [pc, #152]	; (2178 <gpiote_event_handler+0xa8>)
    20e0:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    20e2:	b15d      	cbz	r5, 20fc <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    20e4:	a902      	add	r1, sp, #8
    20e6:	4825      	ldr	r0, [pc, #148]	; (217c <gpiote_event_handler+0xac>)
    20e8:	f7ff fed8 	bl	1e9c <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    20ec:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    20ee:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    20f0:	4823      	ldr	r0, [pc, #140]	; (2180 <gpiote_event_handler+0xb0>)
    20f2:	f7ff fed3 	bl	1e9c <check_level_trigger_pins>
		fired_triggers[1] =
    20f6:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    20f8:	6034      	str	r4, [r6, #0]
    20fa:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    20fc:	4c21      	ldr	r4, [pc, #132]	; (2184 <gpiote_event_handler+0xb4>)
{
    20fe:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2100:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2102:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    2104:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    2108:	fa06 f102 	lsl.w	r1, r6, r2
    210c:	4219      	tst	r1, r3
    210e:	d01b      	beq.n	2148 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2110:	0091      	lsls	r1, r2, #2
    2112:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2116:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    211a:	680b      	ldr	r3, [r1, #0]
    211c:	b1a3      	cbz	r3, 2148 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    211e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2122:	af04      	add	r7, sp, #16
    2124:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2128:	f8c1 c000 	str.w	ip, [r1]
    212c:	f3c3 3040 	ubfx	r0, r3, #13, #1
    2130:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2134:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2138:	f850 7c10 	ldr.w	r7, [r0, #-16]
    213c:	fa06 f303 	lsl.w	r3, r6, r3
    2140:	433b      	orrs	r3, r7
    2142:	f840 3c10 	str.w	r3, [r0, #-16]
    2146:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2148:	3201      	adds	r2, #1
    214a:	2a08      	cmp	r2, #8
    214c:	d1da      	bne.n	2104 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    214e:	9a00      	ldr	r2, [sp, #0]
    2150:	b11a      	cbz	r2, 215a <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    2152:	490a      	ldr	r1, [pc, #40]	; (217c <gpiote_event_handler+0xac>)
    2154:	480c      	ldr	r0, [pc, #48]	; (2188 <gpiote_event_handler+0xb8>)
    2156:	f002 f8be 	bl	42d6 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    215a:	9a01      	ldr	r2, [sp, #4]
    215c:	b11a      	cbz	r2, 2166 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    215e:	4908      	ldr	r1, [pc, #32]	; (2180 <gpiote_event_handler+0xb0>)
    2160:	480a      	ldr	r0, [pc, #40]	; (218c <gpiote_event_handler+0xbc>)
    2162:	f002 f8b8 	bl	42d6 <gpio_fire_callbacks>
	if (port_event) {
    2166:	b12d      	cbz	r5, 2174 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    2168:	4804      	ldr	r0, [pc, #16]	; (217c <gpiote_event_handler+0xac>)
    216a:	f002 f91e 	bl	43aa <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    216e:	4804      	ldr	r0, [pc, #16]	; (2180 <gpiote_event_handler+0xb0>)
    2170:	f002 f91b 	bl	43aa <cfg_level_pins>
}
    2174:	b005      	add	sp, #20
    2176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2178:	4000617c 	.word	0x4000617c
    217c:	000048c0 	.word	0x000048c0
    2180:	000048d8 	.word	0x000048d8
    2184:	40006000 	.word	0x40006000
    2188:	200007e4 	.word	0x200007e4
    218c:	20000800 	.word	0x20000800

00002190 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2190:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2192:	794b      	ldrb	r3, [r1, #5]
    2194:	2b01      	cmp	r3, #1
    2196:	d02a      	beq.n	21ee <uarte_nrfx_configure+0x5e>
    2198:	2b03      	cmp	r3, #3
    219a:	d125      	bne.n	21e8 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    219c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    219e:	798b      	ldrb	r3, [r1, #6]
    21a0:	2b03      	cmp	r3, #3
    21a2:	d121      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    21a4:	79cc      	ldrb	r4, [r1, #7]
    21a6:	b12c      	cbz	r4, 21b4 <uarte_nrfx_configure+0x24>
    21a8:	2c01      	cmp	r4, #1
    21aa:	d11d      	bne.n	21e8 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    21ac:	6843      	ldr	r3, [r0, #4]
    21ae:	685b      	ldr	r3, [r3, #4]
    21b0:	079b      	lsls	r3, r3, #30
    21b2:	d019      	beq.n	21e8 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    21b4:	790a      	ldrb	r2, [r1, #4]
    21b6:	b112      	cbz	r2, 21be <uarte_nrfx_configure+0x2e>
    21b8:	2a02      	cmp	r2, #2
    21ba:	d115      	bne.n	21e8 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    21bc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    21be:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    21c0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    21c2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    21c6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    21c8:	d065      	beq.n	2296 <uarte_nrfx_configure+0x106>
    21ca:	d82d      	bhi.n	2228 <uarte_nrfx_configure+0x98>
    21cc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    21d0:	d064      	beq.n	229c <uarte_nrfx_configure+0x10c>
    21d2:	d816      	bhi.n	2202 <uarte_nrfx_configure+0x72>
    21d4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    21d8:	d062      	beq.n	22a0 <uarte_nrfx_configure+0x110>
    21da:	d80a      	bhi.n	21f2 <uarte_nrfx_configure+0x62>
    21dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    21e0:	d061      	beq.n	22a6 <uarte_nrfx_configure+0x116>
    21e2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    21e6:	d061      	beq.n	22ac <uarte_nrfx_configure+0x11c>
    21e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    21ec:	e052      	b.n	2294 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    21ee:	2600      	movs	r6, #0
    21f0:	e7d5      	b.n	219e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    21f2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    21f6:	d05c      	beq.n	22b2 <uarte_nrfx_configure+0x122>
    21f8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    21fc:	d1f4      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    21fe:	4b37      	ldr	r3, [pc, #220]	; (22dc <uarte_nrfx_configure+0x14c>)
    2200:	e03c      	b.n	227c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2202:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2206:	d057      	beq.n	22b8 <uarte_nrfx_configure+0x128>
    2208:	d807      	bhi.n	221a <uarte_nrfx_configure+0x8a>
    220a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    220e:	d055      	beq.n	22bc <uarte_nrfx_configure+0x12c>
    2210:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2214:	d1e8      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2216:	4b32      	ldr	r3, [pc, #200]	; (22e0 <uarte_nrfx_configure+0x150>)
    2218:	e030      	b.n	227c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    221a:	f647 2712 	movw	r7, #31250	; 0x7a12
    221e:	42bb      	cmp	r3, r7
    2220:	d1e2      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2222:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2226:	e029      	b.n	227c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2228:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    222c:	d048      	beq.n	22c0 <uarte_nrfx_configure+0x130>
    222e:	d813      	bhi.n	2258 <uarte_nrfx_configure+0xc8>
    2230:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2234:	d047      	beq.n	22c6 <uarte_nrfx_configure+0x136>
    2236:	d809      	bhi.n	224c <uarte_nrfx_configure+0xbc>
    2238:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    223c:	42bb      	cmp	r3, r7
    223e:	d044      	beq.n	22ca <uarte_nrfx_configure+0x13a>
    2240:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2244:	d1d0      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2246:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    224a:	e017      	b.n	227c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    224c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2250:	d1ca      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2252:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2256:	e011      	b.n	227c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2258:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    225c:	d038      	beq.n	22d0 <uarte_nrfx_configure+0x140>
    225e:	d808      	bhi.n	2272 <uarte_nrfx_configure+0xe2>
    2260:	4f20      	ldr	r7, [pc, #128]	; (22e4 <uarte_nrfx_configure+0x154>)
    2262:	42bb      	cmp	r3, r7
    2264:	d037      	beq.n	22d6 <uarte_nrfx_configure+0x146>
    2266:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    226a:	d1bd      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    226c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2270:	e004      	b.n	227c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2272:	4f1d      	ldr	r7, [pc, #116]	; (22e8 <uarte_nrfx_configure+0x158>)
    2274:	42bb      	cmp	r3, r7
    2276:	d1b7      	bne.n	21e8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2278:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    227c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2280:	6903      	ldr	r3, [r0, #16]
    2282:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2284:	4334      	orrs	r4, r6
    2286:	4322      	orrs	r2, r4
    2288:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    228a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    228e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2292:	2000      	movs	r0, #0
}
    2294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2296:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    229a:	e7ef      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    229c:	4b13      	ldr	r3, [pc, #76]	; (22ec <uarte_nrfx_configure+0x15c>)
    229e:	e7ed      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    22a0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    22a4:	e7ea      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    22a6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    22aa:	e7e7      	b.n	227c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    22ac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    22b0:	e7e4      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    22b2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    22b6:	e7e1      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    22b8:	4b0d      	ldr	r3, [pc, #52]	; (22f0 <uarte_nrfx_configure+0x160>)
    22ba:	e7df      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    22bc:	4b0d      	ldr	r3, [pc, #52]	; (22f4 <uarte_nrfx_configure+0x164>)
    22be:	e7dd      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    22c0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    22c4:	e7da      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    22c6:	4b0c      	ldr	r3, [pc, #48]	; (22f8 <uarte_nrfx_configure+0x168>)
    22c8:	e7d8      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    22ca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    22ce:	e7d5      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    22d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    22d4:	e7d2      	b.n	227c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    22d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    22da:	e7cf      	b.n	227c <uarte_nrfx_configure+0xec>
    22dc:	0013b000 	.word	0x0013b000
    22e0:	004ea000 	.word	0x004ea000
    22e4:	0003d090 	.word	0x0003d090
    22e8:	000f4240 	.word	0x000f4240
    22ec:	00275000 	.word	0x00275000
    22f0:	0075c000 	.word	0x0075c000
    22f4:	003af000 	.word	0x003af000
    22f8:	013a9000 	.word	0x013a9000

000022fc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    22fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    22fe:	6906      	ldr	r6, [r0, #16]
{
    2300:	4605      	mov	r5, r0
    2302:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2304:	f002 f970 	bl	45e8 <k_is_in_isr>
    2308:	b910      	cbnz	r0, 2310 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    230a:	4b2c      	ldr	r3, [pc, #176]	; (23bc <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    230c:	781b      	ldrb	r3, [r3, #0]
    230e:	b983      	cbnz	r3, 2332 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2310:	f04f 0320 	mov.w	r3, #32
    2314:	f3ef 8411 	mrs	r4, BASEPRI
    2318:	f383 8811 	msr	BASEPRI, r3
    231c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2320:	4628      	mov	r0, r5
    2322:	f002 f8b1 	bl	4488 <is_tx_ready>
    2326:	bb28      	cbnz	r0, 2374 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2328:	f384 8811 	msr	BASEPRI, r4
    232c:	f3bf 8f6f 	isb	sy
}
    2330:	e7ee      	b.n	2310 <uarte_nrfx_poll_out+0x14>
{
    2332:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2334:	4628      	mov	r0, r5
    2336:	f002 f8a7 	bl	4488 <is_tx_ready>
    233a:	b970      	cbnz	r0, 235a <uarte_nrfx_poll_out+0x5e>
    233c:	2001      	movs	r0, #1
    233e:	f002 f8d6 	bl	44ee <nrfx_busy_wait>
    2342:	3c01      	subs	r4, #1
    2344:	d1f6      	bne.n	2334 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    2346:	2100      	movs	r1, #0
    2348:	2021      	movs	r0, #33	; 0x21
    234a:	f001 f99f 	bl	368c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    234e:	e7f0      	b.n	2332 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2350:	f384 8811 	msr	BASEPRI, r4
    2354:	f3bf 8f6f 	isb	sy
}
    2358:	e7f5      	b.n	2346 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    235a:	f04f 0320 	mov.w	r3, #32
    235e:	f3ef 8411 	mrs	r4, BASEPRI
    2362:	f383 8811 	msr	BASEPRI, r3
    2366:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    236a:	4628      	mov	r0, r5
    236c:	f002 f88c 	bl	4488 <is_tx_ready>
    2370:	2800      	cmp	r0, #0
    2372:	d0ed      	beq.n	2350 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2374:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2378:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    237a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    237c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    237e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2382:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2386:	2200      	movs	r2, #0
    2388:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    238c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2390:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2394:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2398:	684a      	ldr	r2, [r1, #4]
    239a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    239c:	bf41      	itttt	mi
    239e:	2208      	movmi	r2, #8
    23a0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    23a4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    23a8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23ac:	2201      	movs	r2, #1
    23ae:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    23b0:	f384 8811 	msr	BASEPRI, r4
    23b4:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    23b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ba:	bf00      	nop
    23bc:	20000d9e 	.word	0x20000d9e

000023c0 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    23c0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    23c4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    23c6:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    23c8:	4b04      	ldr	r3, [pc, #16]	; (23dc <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    23ca:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    23ce:	bf18      	it	ne
    23d0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    23d4:	2103      	movs	r1, #3
    23d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    23da:	4770      	bx	lr
    23dc:	50000300 	.word	0x50000300

000023e0 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    23e0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    23e4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    23e6:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    23e8:	4b04      	ldr	r3, [pc, #16]	; (23fc <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    23ea:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    23ee:	bf18      	it	ne
    23f0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    23f4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    23f6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    23fa:	4770      	bx	lr
    23fc:	50000300 	.word	0x50000300

00002400 <uarte_instance_init.isra.0>:
	return config->uarte_regs;
    2400:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    2406:	681c      	ldr	r4, [r3, #0]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2408:	6907      	ldr	r7, [r0, #16]
static int uarte_instance_init(const struct device *dev,
    240a:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    240c:	2300      	movs	r3, #0
    240e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    2412:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    2414:	6038      	str	r0, [r7, #0]
        nrf_gpio_pin_set(pin_number);
    2416:	6808      	ldr	r0, [r1, #0]
    2418:	f7ff ffe2 	bl	23e0 <nrf_gpio_pin_set>

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);
    241c:	6828      	ldr	r0, [r5, #0]
    241e:	f7ff ffcf 	bl	23c0 <nrf_gpio_cfg_output>

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    2422:	686a      	ldr	r2, [r5, #4]
    2424:	1c51      	adds	r1, r2, #1
    2426:	d00c      	beq.n	2442 <uarte_instance_init.isra.0+0x42>
    return pin_number >> 5;
    2428:	0951      	lsrs	r1, r2, #5
        case 1: return NRF_P1;
    242a:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
    242c:	f002 031f 	and.w	r3, r2, #31
        case 1: return NRF_P1;
    2430:	4940      	ldr	r1, [pc, #256]	; (2534 <uarte_instance_init.isra.0+0x134>)
    reg->PIN_CNF[pin_number] = cnf;
    2432:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2436:	bf18      	it	ne
    2438:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    243c:	200c      	movs	r0, #12
    243e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    2442:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    2444:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    2448:	68ab      	ldr	r3, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    244a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    244e:	1c5a      	adds	r2, r3, #1
    2450:	d00c      	beq.n	246c <uarte_instance_init.isra.0+0x6c>
    *p_pin = pin_number & 0x1F;
    2452:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    2456:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    2458:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    245a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    245e:	4b35      	ldr	r3, [pc, #212]	; (2534 <uarte_instance_init.isra.0+0x134>)
    2460:	bf18      	it	ne
    2462:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2466:	210c      	movs	r1, #12
    2468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    246c:	68e8      	ldr	r0, [r5, #12]
    246e:	1c43      	adds	r3, r0, #1
    2470:	d004      	beq.n	247c <uarte_instance_init.isra.0+0x7c>
        nrf_gpio_pin_set(pin_number);
    2472:	f7ff ffb5 	bl	23e0 <nrf_gpio_pin_set>
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    2476:	68e8      	ldr	r0, [r5, #12]
    2478:	f7ff ffa2 	bl	23c0 <nrf_gpio_cfg_output>
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    247c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2480:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.RTS = pselrts;
    2482:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    2486:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    2488:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    248c:	4630      	mov	r0, r6
    248e:	f7ff fe7f 	bl	2190 <uarte_nrfx_configure>
	if (err) {
    2492:	4680      	mov	r8, r0
    2494:	2800      	cmp	r0, #0
    2496:	d147      	bne.n	2528 <uarte_instance_init.isra.0+0x128>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2498:	6873      	ldr	r3, [r6, #4]
    249a:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    249c:	0719      	lsls	r1, r3, #28
    249e:	d519      	bpl.n	24d4 <uarte_instance_init.isra.0+0xd4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    24a0:	f107 0012 	add.w	r0, r7, #18
    24a4:	f000 faa0 	bl	29e8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    24a8:	4b23      	ldr	r3, [pc, #140]	; (2538 <uarte_instance_init.isra.0+0x138>)
    24aa:	4298      	cmp	r0, r3
    24ac:	d13f      	bne.n	252e <uarte_instance_init.isra.0+0x12e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    24ae:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    24b0:	00c3      	lsls	r3, r0, #3
    24b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    24b6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    24ba:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    24be:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    24c2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    24c6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    24ca:	4a1c      	ldr	r2, [pc, #112]	; (253c <uarte_instance_init.isra.0+0x13c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    24cc:	2301      	movs	r3, #1
    24ce:	4083      	lsls	r3, r0
    24d0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    24d4:	2308      	movs	r3, #8
    24d6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    24da:	686b      	ldr	r3, [r5, #4]
    24dc:	3301      	adds	r3, #1
    24de:	d00c      	beq.n	24fa <uarte_instance_init.isra.0+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24e0:	2300      	movs	r3, #0
    24e2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    24e6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    24ea:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    24ee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    24f2:	2301      	movs	r3, #1
    24f4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    24f8:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    24fa:	6873      	ldr	r3, [r6, #4]
    24fc:	685b      	ldr	r3, [r3, #4]
    24fe:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    2500:	bf5c      	itt	pl
    2502:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2506:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    250a:	06db      	lsls	r3, r3, #27
    250c:	bf44      	itt	mi
    250e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2512:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2516:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    2518:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    251a:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    251e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2522:	2301      	movs	r3, #1
    2524:	60a3      	str	r3, [r4, #8]
    2526:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2528:	4640      	mov	r0, r8
    252a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    252e:	f06f 0804 	mvn.w	r8, #4
    2532:	e7f9      	b.n	2528 <uarte_instance_init.isra.0+0x128>
    2534:	50000300 	.word	0x50000300
    2538:	0bad0000 	.word	0x0bad0000
    253c:	4001f000 	.word	0x4001f000

00002540 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2540:	b530      	push	{r4, r5, lr}
    2542:	4b0a      	ldr	r3, [pc, #40]	; (256c <uarte_0_init+0x2c>)
    2544:	4605      	mov	r5, r0
    2546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2548:	b085      	sub	sp, #20
    254a:	466c      	mov	r4, sp
    254c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2550:	2200      	movs	r2, #0
    2552:	2101      	movs	r1, #1
    2554:	2002      	movs	r0, #2
    2556:	f7ff f8d1 	bl	16fc <z_arm_irq_priority_set>
    255a:	2002      	movs	r0, #2
    255c:	f7ff f8b0 	bl	16c0 <arch_irq_enable>
    2560:	4621      	mov	r1, r4
    2562:	4628      	mov	r0, r5
    2564:	f7ff ff4c 	bl	2400 <uarte_instance_init.isra.0>
    2568:	b005      	add	sp, #20
    256a:	bd30      	pop	{r4, r5, pc}
    256c:	00004ab0 	.word	0x00004ab0

00002570 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    2570:	b530      	push	{r4, r5, lr}
    2572:	4b0a      	ldr	r3, [pc, #40]	; (259c <uarte_1_init+0x2c>)
    2574:	4605      	mov	r5, r0
    2576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2578:	b085      	sub	sp, #20
    257a:	466c      	mov	r4, sp
    257c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2580:	2200      	movs	r2, #0
    2582:	2101      	movs	r1, #1
    2584:	2028      	movs	r0, #40	; 0x28
    2586:	f7ff f8b9 	bl	16fc <z_arm_irq_priority_set>
    258a:	2028      	movs	r0, #40	; 0x28
    258c:	f7ff f898 	bl	16c0 <arch_irq_enable>
    2590:	4621      	mov	r1, r4
    2592:	4628      	mov	r0, r5
    2594:	f7ff ff34 	bl	2400 <uarte_instance_init.isra.0>
    2598:	b005      	add	sp, #20
    259a:	bd30      	pop	{r4, r5, pc}
    259c:	00004ac0 	.word	0x00004ac0

000025a0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    25a0:	4b03      	ldr	r3, [pc, #12]	; (25b0 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    25a2:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    25a4:	f1a0 0308 	sub.w	r3, r0, #8
    25a8:	4258      	negs	r0, r3
    25aa:	4158      	adcs	r0, r3
    25ac:	4770      	bx	lr
    25ae:	bf00      	nop
    25b0:	10000130 	.word	0x10000130

000025b4 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    25b4:	4b06      	ldr	r3, [pc, #24]	; (25d0 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	2b08      	cmp	r3, #8
    25ba:	d106      	bne.n	25ca <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    25bc:	4b05      	ldr	r3, [pc, #20]	; (25d4 <nrf52_errata_103+0x20>)
    25be:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    25c0:	2b05      	cmp	r3, #5
    25c2:	d802      	bhi.n	25ca <nrf52_errata_103+0x16>
    25c4:	4a04      	ldr	r2, [pc, #16]	; (25d8 <nrf52_errata_103+0x24>)
    25c6:	5cd0      	ldrb	r0, [r2, r3]
    25c8:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    25ca:	2000      	movs	r0, #0
    #endif
}
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop
    25d0:	10000130 	.word	0x10000130
    25d4:	10000134 	.word	0x10000134
    25d8:	00004d23 	.word	0x00004d23

000025dc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    25dc:	4a02      	ldr	r2, [pc, #8]	; (25e8 <nvmc_wait+0xc>)
    25de:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    25e2:	2b00      	cmp	r3, #0
    25e4:	d0fb      	beq.n	25de <nvmc_wait+0x2>
}
    25e6:	4770      	bx	lr
    25e8:	4001e000 	.word	0x4001e000

000025ec <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    25ec:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    25ee:	f7ff ffd7 	bl	25a0 <nrf52_errata_136>
    25f2:	b140      	cbz	r0, 2606 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    25f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25f8:	2200      	movs	r2, #0
    25fa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    25fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2602:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2606:	f7ff ffcb 	bl	25a0 <nrf52_errata_136>
    260a:	2800      	cmp	r0, #0
    260c:	d046      	beq.n	269c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2612:	4b5b      	ldr	r3, [pc, #364]	; (2780 <SystemInit+0x194>)
    2614:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2618:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    261c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2620:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2624:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2628:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    262c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2630:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2634:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2638:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    263c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2640:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2644:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2648:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    264c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2650:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2654:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2658:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    265c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2660:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2664:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2668:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    266c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2670:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2674:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2678:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    267c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2680:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2684:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2688:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    268c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2690:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2694:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2698:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    269c:	f7ff ff8a 	bl	25b4 <nrf52_errata_103>
    26a0:	b110      	cbz	r0, 26a8 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    26a2:	4b38      	ldr	r3, [pc, #224]	; (2784 <SystemInit+0x198>)
    26a4:	4a38      	ldr	r2, [pc, #224]	; (2788 <SystemInit+0x19c>)
    26a6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    26a8:	f7ff ff84 	bl	25b4 <nrf52_errata_103>
    26ac:	b118      	cbz	r0, 26b6 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    26ae:	4b37      	ldr	r3, [pc, #220]	; (278c <SystemInit+0x1a0>)
    26b0:	22fb      	movs	r2, #251	; 0xfb
    26b2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    26b6:	f7ff ff7d 	bl	25b4 <nrf52_errata_103>
    26ba:	b148      	cbz	r0, 26d0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    26bc:	4934      	ldr	r1, [pc, #208]	; (2790 <SystemInit+0x1a4>)
    26be:	4b35      	ldr	r3, [pc, #212]	; (2794 <SystemInit+0x1a8>)
    26c0:	680a      	ldr	r2, [r1, #0]
    26c2:	681b      	ldr	r3, [r3, #0]
    26c4:	f022 020f 	bic.w	r2, r2, #15
    26c8:	f003 030f 	and.w	r3, r3, #15
    26cc:	4313      	orrs	r3, r2
    26ce:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    26d0:	f7ff ff70 	bl	25b4 <nrf52_errata_103>
    26d4:	b118      	cbz	r0, 26de <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    26d6:	4b30      	ldr	r3, [pc, #192]	; (2798 <SystemInit+0x1ac>)
    26d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    26dc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    26de:	f7ff ff5f 	bl	25a0 <nrf52_errata_136>
    26e2:	b148      	cbz	r0, 26f8 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    26e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    26ec:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    26ee:	bf44      	itt	mi
    26f0:	f06f 0201 	mvnmi.w	r2, #1
    26f4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    26f8:	4b28      	ldr	r3, [pc, #160]	; (279c <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    26fa:	681b      	ldr	r3, [r3, #0]
    26fc:	2b08      	cmp	r3, #8
    26fe:	d10e      	bne.n	271e <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2700:	4b27      	ldr	r3, [pc, #156]	; (27a0 <SystemInit+0x1b4>)
    2702:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    2704:	2b05      	cmp	r3, #5
    2706:	d802      	bhi.n	270e <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    2708:	4a26      	ldr	r2, [pc, #152]	; (27a4 <SystemInit+0x1b8>)
    270a:	5cd3      	ldrb	r3, [r2, r3]
    270c:	b13b      	cbz	r3, 271e <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    270e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2712:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    271a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    271e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2722:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2726:	2a00      	cmp	r2, #0
    2728:	db03      	blt.n	2732 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    272a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    272e:	2b00      	cmp	r3, #0
    2730:	da22      	bge.n	2778 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2732:	491d      	ldr	r1, [pc, #116]	; (27a8 <SystemInit+0x1bc>)
    2734:	2301      	movs	r3, #1
    2736:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    273a:	f7ff ff4f 	bl	25dc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    273e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    2742:	2412      	movs	r4, #18
    2744:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2748:	f7ff ff48 	bl	25dc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    274c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2750:	f7ff ff44 	bl	25dc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2754:	2300      	movs	r3, #0
    2756:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    275a:	f7ff ff3f 	bl	25dc <nvmc_wait>
    275e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2762:	4912      	ldr	r1, [pc, #72]	; (27ac <SystemInit+0x1c0>)
    2764:	4b12      	ldr	r3, [pc, #72]	; (27b0 <SystemInit+0x1c4>)
    2766:	68ca      	ldr	r2, [r1, #12]
    2768:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    276c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    276e:	60cb      	str	r3, [r1, #12]
    2770:	f3bf 8f4f 	dsb	sy
    __NOP();
    2774:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2776:	e7fd      	b.n	2774 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2778:	4b0e      	ldr	r3, [pc, #56]	; (27b4 <SystemInit+0x1c8>)
    277a:	4a0f      	ldr	r2, [pc, #60]	; (27b8 <SystemInit+0x1cc>)
    277c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    277e:	bd10      	pop	{r4, pc}
    2780:	4000c000 	.word	0x4000c000
    2784:	4000568c 	.word	0x4000568c
    2788:	00038148 	.word	0x00038148
    278c:	4000f000 	.word	0x4000f000
    2790:	40000ee4 	.word	0x40000ee4
    2794:	10000258 	.word	0x10000258
    2798:	40029640 	.word	0x40029640
    279c:	10000130 	.word	0x10000130
    27a0:	10000134 	.word	0x10000134
    27a4:	00004d1d 	.word	0x00004d1d
    27a8:	4001e000 	.word	0x4001e000
    27ac:	e000ed00 	.word	0xe000ed00
    27b0:	05fa0004 	.word	0x05fa0004
    27b4:	20000054 	.word	0x20000054
    27b8:	03d09000 	.word	0x03d09000

000027bc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    27bc:	4b04      	ldr	r3, [pc, #16]	; (27d0 <nrfx_clock_init+0x14>)
    27be:	791a      	ldrb	r2, [r3, #4]
    27c0:	b922      	cbnz	r2, 27cc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    27c2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    27c4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    27c6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    27c8:	4802      	ldr	r0, [pc, #8]	; (27d4 <nrfx_clock_init+0x18>)
    27ca:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    27cc:	4802      	ldr	r0, [pc, #8]	; (27d8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    27ce:	4770      	bx	lr
    27d0:	20000820 	.word	0x20000820
    27d4:	0bad0000 	.word	0x0bad0000
    27d8:	0bad000c 	.word	0x0bad000c

000027dc <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    27dc:	b110      	cbz	r0, 27e4 <nrfx_clock_start+0x8>
    27de:	2801      	cmp	r0, #1
    27e0:	d020      	beq.n	2824 <nrfx_clock_start+0x48>
    27e2:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    27e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    27ec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    27f0:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    27f4:	4619      	mov	r1, r3
    27f6:	d011      	beq.n	281c <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    27f8:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    27fc:	2a01      	cmp	r2, #1
    27fe:	d10d      	bne.n	281c <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2800:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2804:	4b0c      	ldr	r3, [pc, #48]	; (2838 <nrfx_clock_start+0x5c>)
    2806:	2200      	movs	r2, #0
    2808:	601a      	str	r2, [r3, #0]
    280a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    280c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2810:	2202      	movs	r2, #2
    2812:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2816:	2201      	movs	r2, #1
    2818:	609a      	str	r2, [r3, #8]
}
    281a:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    281c:	2300      	movs	r3, #0
    281e:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    2822:	e7ef      	b.n	2804 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2824:	4b05      	ldr	r3, [pc, #20]	; (283c <nrfx_clock_start+0x60>)
    2826:	2200      	movs	r2, #0
    2828:	601a      	str	r2, [r3, #0]
    282a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    282c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2830:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2834:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    2836:	4770      	bx	lr
    2838:	40000104 	.word	0x40000104
    283c:	40000100 	.word	0x40000100

00002840 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2840:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2842:	b110      	cbz	r0, 284a <nrfx_clock_stop+0xa>
    2844:	2801      	cmp	r0, #1
    2846:	d018      	beq.n	287a <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2848:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    284a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    284e:	2202      	movs	r2, #2
    2850:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2854:	4a18      	ldr	r2, [pc, #96]	; (28b8 <nrfx_clock_stop+0x78>)
    2856:	6010      	str	r0, [r2, #0]
    2858:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    285a:	4a18      	ldr	r2, [pc, #96]	; (28bc <nrfx_clock_stop+0x7c>)
    285c:	2101      	movs	r1, #1
    285e:	6011      	str	r1, [r2, #0]
    2860:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2864:	461c      	mov	r4, r3
    2866:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    286a:	03db      	lsls	r3, r3, #15
    286c:	d5ec      	bpl.n	2848 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    286e:	2001      	movs	r0, #1
    2870:	f001 fe3d 	bl	44ee <nrfx_busy_wait>
    2874:	3d01      	subs	r5, #1
    2876:	d1f6      	bne.n	2866 <nrfx_clock_stop+0x26>
    2878:	e7e6      	b.n	2848 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    287a:	4b11      	ldr	r3, [pc, #68]	; (28c0 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    287c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2880:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2882:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2886:	601a      	str	r2, [r3, #0]
    2888:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    288a:	4b0e      	ldr	r3, [pc, #56]	; (28c4 <nrfx_clock_stop+0x84>)
    288c:	f242 7510 	movw	r5, #10000	; 0x2710
    2890:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2892:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2896:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    289a:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    289c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    28a0:	d505      	bpl.n	28ae <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    28a2:	b123      	cbz	r3, 28ae <nrfx_clock_stop+0x6e>
    28a4:	2001      	movs	r0, #1
    28a6:	f001 fe22 	bl	44ee <nrfx_busy_wait>
    28aa:	3d01      	subs	r5, #1
    28ac:	d1f1      	bne.n	2892 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    28ae:	4b06      	ldr	r3, [pc, #24]	; (28c8 <nrfx_clock_stop+0x88>)
    28b0:	2200      	movs	r2, #0
    28b2:	715a      	strb	r2, [r3, #5]
    28b4:	e7c8      	b.n	2848 <nrfx_clock_stop+0x8>
    28b6:	bf00      	nop
    28b8:	40000104 	.word	0x40000104
    28bc:	4000000c 	.word	0x4000000c
    28c0:	40000100 	.word	0x40000100
    28c4:	40000004 	.word	0x40000004
    28c8:	20000820 	.word	0x20000820

000028cc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    28cc:	4b16      	ldr	r3, [pc, #88]	; (2928 <nrfx_power_clock_irq_handler+0x5c>)
    28ce:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    28d0:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    28d2:	b16a      	cbz	r2, 28f0 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    28d4:	2200      	movs	r2, #0
    28d6:	601a      	str	r2, [r3, #0]
    28d8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    28da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28de:	2201      	movs	r2, #1
    28e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    28e4:	4b11      	ldr	r3, [pc, #68]	; (292c <nrfx_power_clock_irq_handler+0x60>)
    28e6:	7958      	ldrb	r0, [r3, #5]
    28e8:	b910      	cbnz	r0, 28f0 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    28ea:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    28f0:	4b0f      	ldr	r3, [pc, #60]	; (2930 <nrfx_power_clock_irq_handler+0x64>)
    28f2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    28f4:	b172      	cbz	r2, 2914 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    28f6:	2200      	movs	r2, #0
    28f8:	601a      	str	r2, [r3, #0]
    28fa:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    28fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2900:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2904:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2908:	0792      	lsls	r2, r2, #30
    290a:	d104      	bne.n	2916 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    290c:	2201      	movs	r2, #1
    290e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2912:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2914:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2916:	2202      	movs	r2, #2
    2918:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    291c:	4b03      	ldr	r3, [pc, #12]	; (292c <nrfx_power_clock_irq_handler+0x60>)
}
    291e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2922:	681b      	ldr	r3, [r3, #0]
    2924:	2001      	movs	r0, #1
    2926:	4718      	bx	r3
    2928:	40000100 	.word	0x40000100
    292c:	20000820 	.word	0x20000820
    2930:	40000104 	.word	0x40000104

00002934 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    2934:	2301      	movs	r3, #1
    2936:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    293a:	f010 0fff 	tst.w	r0, #255	; 0xff
    293e:	d012      	beq.n	2966 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    2940:	f04f 0320 	mov.w	r3, #32
    2944:	f3ef 8111 	mrs	r1, BASEPRI
    2948:	f383 8811 	msr	BASEPRI, r3
    294c:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    2950:	4a06      	ldr	r2, [pc, #24]	; (296c <nrfx_gpiote_channel_free+0x38>)
    2952:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    2954:	ea23 0000 	bic.w	r0, r3, r0
    2958:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    295a:	f381 8811 	msr	BASEPRI, r1
    295e:	f3bf 8f6f 	isb	sy
    2962:	4803      	ldr	r0, [pc, #12]	; (2970 <nrfx_gpiote_channel_free+0x3c>)
    2964:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    2966:	4803      	ldr	r0, [pc, #12]	; (2974 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2968:	4770      	bx	lr
    296a:	bf00      	nop
    296c:	20000828 	.word	0x20000828
    2970:	0bad0000 	.word	0x0bad0000
    2974:	0bad0004 	.word	0x0bad0004

00002978 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    2978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    297c:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    297e:	f8df e060 	ldr.w	lr, [pc, #96]	; 29e0 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    2982:	4816      	ldr	r0, [pc, #88]	; (29dc <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    2984:	f8df 805c 	ldr.w	r8, [pc, #92]	; 29e4 <nrfx_gpiote_channel_alloc+0x6c>
{
    2988:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    298a:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    298c:	2601      	movs	r6, #1
    298e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    2990:	f04f 0120 	mov.w	r1, #32
    2994:	f3ef 8c11 	mrs	ip, BASEPRI
    2998:	f381 8811 	msr	BASEPRI, r1
    299c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    29a0:	fa22 f103 	lsr.w	r1, r2, r3
    29a4:	07c9      	lsls	r1, r1, #31
    29a6:	d50a      	bpl.n	29be <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    29a8:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    29ac:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    29b0:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    29b2:	bf01      	itttt	eq
    29b4:	4339      	orreq	r1, r7
    29b6:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    29ba:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    29bc:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    29be:	f38c 8811 	msr	BASEPRI, ip
    29c2:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    29c6:	4540      	cmp	r0, r8
    29c8:	d005      	beq.n	29d6 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    29ca:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    29ce:	439a      	bics	r2, r3
    29d0:	f104 0401 	add.w	r4, r4, #1
    29d4:	d1db      	bne.n	298e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    29d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29da:	bf00      	nop
    29dc:	0bad0002 	.word	0x0bad0002
    29e0:	20000828 	.word	0x20000828
    29e4:	0bad0000 	.word	0x0bad0000

000029e8 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    29e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    29ec:	4a14      	ldr	r2, [pc, #80]	; (2a40 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    29ee:	4e15      	ldr	r6, [pc, #84]	; (2a44 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    29f0:	4f15      	ldr	r7, [pc, #84]	; (2a48 <nrfx_ppi_channel_alloc+0x60>)
{
    29f2:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    29f4:	4815      	ldr	r0, [pc, #84]	; (2a4c <nrfx_ppi_channel_alloc+0x64>)
{
    29f6:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    29f8:	f04f 0e01 	mov.w	lr, #1
    29fc:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    2a00:	f04f 0320 	mov.w	r3, #32
    2a04:	f3ef 8811 	mrs	r8, BASEPRI
    2a08:	f383 8811 	msr	BASEPRI, r3
    2a0c:	f3bf 8f6f 	isb	sy
    2a10:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2a14:	4213      	tst	r3, r2
    2a16:	d007      	beq.n	2a28 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    2a18:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2a1a:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    2a1c:	bf01      	itttt	eq
    2a1e:	4319      	orreq	r1, r3
    2a20:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    2a22:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    2a26:	4638      	moveq	r0, r7
	__asm__ volatile(
    2a28:	f388 8811 	msr	BASEPRI, r8
    2a2c:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    2a30:	42b8      	cmp	r0, r7
    2a32:	d003      	beq.n	2a3c <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    2a34:	439a      	bics	r2, r3
    2a36:	f104 0401 	add.w	r4, r4, #1
    2a3a:	d1df      	bne.n	29fc <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a40:	000fffff 	.word	0x000fffff
    2a44:	20000888 	.word	0x20000888
    2a48:	0bad0000 	.word	0x0bad0000
    2a4c:	0bad0002 	.word	0x0bad0002

00002a50 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    2a50:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2a52:	4c14      	ldr	r4, [pc, #80]	; (2aa4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2a54:	4a14      	ldr	r2, [pc, #80]	; (2aa8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    2a56:	4915      	ldr	r1, [pc, #84]	; (2aac <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2a58:	2303      	movs	r3, #3
    2a5a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2a5c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2a5e:	4b14      	ldr	r3, [pc, #80]	; (2ab0 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    2a60:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2a62:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    2a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2a68:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    2a6a:	2300      	movs	r3, #0
    2a6c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2a6e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2a70:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    2a72:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    2a74:	4a0f      	ldr	r2, [pc, #60]	; (2ab4 <_DoInit+0x64>)
    2a76:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    2a78:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    2a7a:	2210      	movs	r2, #16
    2a7c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    2a7e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2a80:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2a82:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    2a84:	f001 fbcc 	bl	4220 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2a88:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    2a8c:	490a      	ldr	r1, [pc, #40]	; (2ab8 <_DoInit+0x68>)
    2a8e:	4620      	mov	r0, r4
    2a90:	f001 fbc6 	bl	4220 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2a94:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    2a98:	2320      	movs	r3, #32
    2a9a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2a9c:	f3bf 8f5f 	dmb	sy
}
    2aa0:	bd10      	pop	{r4, pc}
    2aa2:	bf00      	nop
    2aa4:	2000088c 	.word	0x2000088c
    2aa8:	00004d29 	.word	0x00004d29
    2aac:	00004d32 	.word	0x00004d32
    2ab0:	2000099e 	.word	0x2000099e
    2ab4:	2000098e 	.word	0x2000098e
    2ab8:	00004d36 	.word	0x00004d36

00002abc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2abc:	4b0e      	ldr	r3, [pc, #56]	; (2af8 <z_sys_init_run_level+0x3c>)
{
    2abe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2ac0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2ac4:	3001      	adds	r0, #1
    2ac6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2aca:	42a6      	cmp	r6, r4
    2acc:	d800      	bhi.n	2ad0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2ace:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2ad0:	e9d4 3500 	ldrd	r3, r5, [r4]
    2ad4:	4628      	mov	r0, r5
    2ad6:	4798      	blx	r3
		if (dev != NULL) {
    2ad8:	b165      	cbz	r5, 2af4 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    2ada:	68eb      	ldr	r3, [r5, #12]
    2adc:	b130      	cbz	r0, 2aec <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2ade:	2800      	cmp	r0, #0
    2ae0:	bfb8      	it	lt
    2ae2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    2ae4:	28ff      	cmp	r0, #255	; 0xff
    2ae6:	bfa8      	it	ge
    2ae8:	20ff      	movge	r0, #255	; 0xff
    2aea:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2aec:	785a      	ldrb	r2, [r3, #1]
    2aee:	f042 0201 	orr.w	r2, r2, #1
    2af2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2af4:	3408      	adds	r4, #8
    2af6:	e7e8      	b.n	2aca <z_sys_init_run_level+0xe>
    2af8:	00004bc0 	.word	0x00004bc0

00002afc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    2afc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    2afe:	4605      	mov	r5, r0
    2b00:	b910      	cbnz	r0, 2b08 <z_impl_device_get_binding+0xc>
		return NULL;
    2b02:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    2b04:	4620      	mov	r0, r4
    2b06:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    2b08:	7803      	ldrb	r3, [r0, #0]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d0f9      	beq.n	2b02 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    2b0e:	4a0f      	ldr	r2, [pc, #60]	; (2b4c <z_impl_device_get_binding+0x50>)
    2b10:	4c0f      	ldr	r4, [pc, #60]	; (2b50 <z_impl_device_get_binding+0x54>)
    2b12:	4616      	mov	r6, r2
    2b14:	4294      	cmp	r4, r2
    2b16:	d108      	bne.n	2b2a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    2b18:	4c0d      	ldr	r4, [pc, #52]	; (2b50 <z_impl_device_get_binding+0x54>)
    2b1a:	42b4      	cmp	r4, r6
    2b1c:	d0f1      	beq.n	2b02 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2b1e:	4620      	mov	r0, r4
    2b20:	f001 fcf9 	bl	4516 <z_device_ready>
    2b24:	b950      	cbnz	r0, 2b3c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    2b26:	3418      	adds	r4, #24
    2b28:	e7f7      	b.n	2b1a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    2b2a:	4620      	mov	r0, r4
    2b2c:	f001 fcf3 	bl	4516 <z_device_ready>
    2b30:	b110      	cbz	r0, 2b38 <z_impl_device_get_binding+0x3c>
    2b32:	6823      	ldr	r3, [r4, #0]
    2b34:	42ab      	cmp	r3, r5
    2b36:	d0e5      	beq.n	2b04 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    2b38:	3418      	adds	r4, #24
    2b3a:	e7eb      	b.n	2b14 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2b3c:	6821      	ldr	r1, [r4, #0]
    2b3e:	4628      	mov	r0, r5
    2b40:	f001 fb88 	bl	4254 <strcmp>
    2b44:	2800      	cmp	r0, #0
    2b46:	d1ee      	bne.n	2b26 <z_impl_device_get_binding+0x2a>
    2b48:	e7dc      	b.n	2b04 <z_impl_device_get_binding+0x8>
    2b4a:	bf00      	nop
    2b4c:	000048f0 	.word	0x000048f0
    2b50:	00004860 	.word	0x00004860

00002b54 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2b54:	4802      	ldr	r0, [pc, #8]	; (2b60 <z_bss_zero+0xc>)
    2b56:	4a03      	ldr	r2, [pc, #12]	; (2b64 <z_bss_zero+0x10>)
    2b58:	2100      	movs	r1, #0
    2b5a:	1a12      	subs	r2, r2, r0
    2b5c:	f001 bb91 	b.w	4282 <memset>
    2b60:	20000110 	.word	0x20000110
    2b64:	20000f5c 	.word	0x20000f5c

00002b68 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2b68:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2b6a:	4b0a      	ldr	r3, [pc, #40]	; (2b94 <bg_thread_main+0x2c>)
    2b6c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2b6e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2b70:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2b72:	f7ff ffa3 	bl	2abc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    2b76:	f000 ff73 	bl	3a60 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2b7a:	2003      	movs	r0, #3
    2b7c:	f7ff ff9e 	bl	2abc <z_sys_init_run_level>

	z_init_static_threads();
    2b80:	f000 f918 	bl	2db4 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    2b84:	f7fd fc36 	bl	3f4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2b88:	4a03      	ldr	r2, [pc, #12]	; (2b98 <bg_thread_main+0x30>)
    2b8a:	7b13      	ldrb	r3, [r2, #12]
    2b8c:	f023 0301 	bic.w	r3, r3, #1
    2b90:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2b92:	bd08      	pop	{r3, pc}
    2b94:	20000d9e 	.word	0x20000d9e
    2b98:	20000190 	.word	0x20000190

00002b9c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    2b9c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    2ba0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 2ca4 <z_cstart+0x108>
    2ba4:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2ba6:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    2baa:	4d36      	ldr	r5, [pc, #216]	; (2c84 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    2bac:	4e36      	ldr	r6, [pc, #216]	; (2c88 <z_cstart+0xec>)
    2bae:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2bb0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2ca8 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
    2bb4:	4f35      	ldr	r7, [pc, #212]	; (2c8c <z_cstart+0xf0>)
    2bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bba:	2400      	movs	r4, #0
    2bbc:	616b      	str	r3, [r5, #20]
    2bbe:	23e0      	movs	r3, #224	; 0xe0
    2bc0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2bc4:	77ec      	strb	r4, [r5, #31]
    2bc6:	762c      	strb	r4, [r5, #24]
    2bc8:	766c      	strb	r4, [r5, #25]
    2bca:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2bcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2bce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2bd2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2bd4:	f7fe ff64 	bl	1aa0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2bd8:	f7fe fdf4 	bl	17c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2bdc:	f04f 33ff 	mov.w	r3, #4294967295
    2be0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2be2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    2be4:	f7ff f860 	bl	1ca8 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    2be8:	4d29      	ldr	r5, [pc, #164]	; (2c90 <z_cstart+0xf4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2bea:	f7fe ffcf 	bl	1b8c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    2bee:	f240 1301 	movw	r3, #257	; 0x101
    2bf2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2bf6:	ab06      	add	r3, sp, #24
    2bf8:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    2bfa:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2bfe:	f001 fc89 	bl	4514 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2c02:	4620      	mov	r0, r4
    2c04:	f7ff ff5a 	bl	2abc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2c08:	2001      	movs	r0, #1
    2c0a:	f7ff ff57 	bl	2abc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c0e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    2c12:	f000 fca1 	bl	3558 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c16:	4b1f      	ldr	r3, [pc, #124]	; (2c94 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
    2c18:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c1a:	491f      	ldr	r1, [pc, #124]	; (2c98 <z_cstart+0xfc>)
    2c1c:	9305      	str	r3, [sp, #20]
    2c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c22:	4653      	mov	r3, sl
    2c24:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2c28:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2c2c:	9400      	str	r4, [sp, #0]
    2c2e:	4630      	mov	r0, r6
    2c30:	f000 f88e 	bl	2d50 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2c34:	7b73      	ldrb	r3, [r6, #13]
    2c36:	4680      	mov	r8, r0
    2c38:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    2c3c:	4630      	mov	r0, r6
    2c3e:	7373      	strb	r3, [r6, #13]
    2c40:	f001 fd45 	bl	46ce <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2c44:	230f      	movs	r3, #15
    2c46:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2c4a:	4914      	ldr	r1, [pc, #80]	; (2c9c <z_cstart+0x100>)
    2c4c:	4b14      	ldr	r3, [pc, #80]	; (2ca0 <z_cstart+0x104>)
    2c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2c52:	e9cd b404 	strd	fp, r4, [sp, #16]
    2c56:	e9cd 5400 	strd	r5, r4, [sp]
    2c5a:	4638      	mov	r0, r7
    2c5c:	f000 f878 	bl	2d50 <z_setup_new_thread>
    2c60:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2c62:	60ef      	str	r7, [r5, #12]
    2c64:	f023 0304 	bic.w	r3, r3, #4
    2c68:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2c6a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    2c6e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    2c72:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    2c74:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2c78:	4652      	mov	r2, sl
    2c7a:	4641      	mov	r1, r8
    2c7c:	4630      	mov	r0, r6
    2c7e:	f7fe fd8b 	bl	1798 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2c82:	bf00      	nop
    2c84:	e000ed00 	.word	0xe000ed00
    2c88:	20000190 	.word	0x20000190
    2c8c:	20000110 	.word	0x20000110
    2c90:	20000934 	.word	0x20000934
    2c94:	00004d3d 	.word	0x00004d3d
    2c98:	20000f60 	.word	0x20000f60
    2c9c:	20001380 	.word	0x20001380
    2ca0:	00002e71 	.word	0x00002e71
    2ca4:	20001d00 	.word	0x20001d00
    2ca8:	00002b69 	.word	0x00002b69

00002cac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    2cac:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2cae:	4b0e      	ldr	r3, [pc, #56]	; (2ce8 <init_mem_slab_module+0x3c>)
    2cb0:	4c0e      	ldr	r4, [pc, #56]	; (2cec <init_mem_slab_module+0x40>)
    2cb2:	42a3      	cmp	r3, r4
    2cb4:	d301      	bcc.n	2cba <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    2cb6:	2000      	movs	r0, #0
	return rc;
}
    2cb8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    2cba:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    2cbe:	ea41 0200 	orr.w	r2, r1, r0
    2cc2:	f012 0203 	ands.w	r2, r2, #3
    2cc6:	d10b      	bne.n	2ce0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    2cc8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    2cca:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2ccc:	42aa      	cmp	r2, r5
    2cce:	d101      	bne.n	2cd4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2cd0:	331c      	adds	r3, #28
    2cd2:	e7ee      	b.n	2cb2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    2cd4:	695e      	ldr	r6, [r3, #20]
    2cd6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    2cd8:	3201      	adds	r2, #1
		slab->free_list = p;
    2cda:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    2cdc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    2cde:	e7f5      	b.n	2ccc <init_mem_slab_module+0x20>
		return -EINVAL;
    2ce0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2ce4:	e7e8      	b.n	2cb8 <init_mem_slab_module+0xc>
    2ce6:	bf00      	nop
    2ce8:	200000c0 	.word	0x200000c0
    2cec:	200000c0 	.word	0x200000c0

00002cf0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    2cf0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    2cf2:	460c      	mov	r4, r1
    2cf4:	4616      	mov	r6, r2
    2cf6:	461f      	mov	r7, r3
	__asm__ volatile(
    2cf8:	f04f 0320 	mov.w	r3, #32
    2cfc:	f3ef 8111 	mrs	r1, BASEPRI
    2d00:	f383 8811 	msr	BASEPRI, r3
    2d04:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    2d08:	6943      	ldr	r3, [r0, #20]
    2d0a:	b15b      	cbz	r3, 2d24 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    2d0c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    2d0e:	681b      	ldr	r3, [r3, #0]
    2d10:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    2d12:	6983      	ldr	r3, [r0, #24]
    2d14:	3301      	adds	r3, #1
    2d16:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    2d18:	2000      	movs	r0, #0
	__asm__ volatile(
    2d1a:	f381 8811 	msr	BASEPRI, r1
    2d1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    2d22:	e011      	b.n	2d48 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    2d24:	ea56 0207 	orrs.w	r2, r6, r7
    2d28:	d103      	bne.n	2d32 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    2d2a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    2d2c:	f06f 000b 	mvn.w	r0, #11
    2d30:	e7f3      	b.n	2d1a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    2d32:	4602      	mov	r2, r0
    2d34:	e9cd 6700 	strd	r6, r7, [sp]
    2d38:	3008      	adds	r0, #8
    2d3a:	f000 fa89 	bl	3250 <z_pend_curr>
		if (result == 0) {
    2d3e:	b918      	cbnz	r0, 2d48 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    2d40:	4b02      	ldr	r3, [pc, #8]	; (2d4c <k_mem_slab_alloc+0x5c>)
    2d42:	689b      	ldr	r3, [r3, #8]
    2d44:	695b      	ldr	r3, [r3, #20]
    2d46:	6023      	str	r3, [r4, #0]
}
    2d48:	b002      	add	sp, #8
    2d4a:	bdd0      	pop	{r4, r6, r7, pc}
    2d4c:	20000934 	.word	0x20000934

00002d50 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2d50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    2d54:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    2d56:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    2d58:	2604      	movs	r6, #4
    2d5a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    2d5c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2d5e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    2d60:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    2d64:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2d66:	1dd6      	adds	r6, r2, #7
    2d68:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    2d6e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2d70:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    2d74:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    2d76:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    2d7a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    2d7e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    2d80:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    2d82:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2d84:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d88:	9202      	str	r2, [sp, #8]
    2d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2d8c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    2d8e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d92:	9200      	str	r2, [sp, #0]
    2d94:	4642      	mov	r2, r8
{
    2d96:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d98:	f7fe fcc8 	bl	172c <arch_new_thread>
	if (!_current) {
    2d9c:	4b04      	ldr	r3, [pc, #16]	; (2db0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    2d9e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    2da0:	689b      	ldr	r3, [r3, #8]
    2da2:	b103      	cbz	r3, 2da6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    2da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    2da6:	6723      	str	r3, [r4, #112]	; 0x70
}
    2da8:	4640      	mov	r0, r8
    2daa:	b004      	add	sp, #16
    2dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2db0:	20000934 	.word	0x20000934

00002db4 <z_init_static_threads>:
{
    2db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2db8:	4e2a      	ldr	r6, [pc, #168]	; (2e64 <z_init_static_threads+0xb0>)
    2dba:	4d2b      	ldr	r5, [pc, #172]	; (2e68 <z_init_static_threads+0xb4>)
{
    2dbc:	b086      	sub	sp, #24
    2dbe:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    2dc0:	42b5      	cmp	r5, r6
    2dc2:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2dc6:	d310      	bcc.n	2dea <z_init_static_threads+0x36>
	k_sched_lock();
    2dc8:	f000 f9d0 	bl	316c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2dcc:	4c26      	ldr	r4, [pc, #152]	; (2e68 <z_init_static_threads+0xb4>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    2dce:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2e6c <z_init_static_threads+0xb8>
		} else {
			return (t * to_hz + off) / from_hz;
    2dd2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2dd6:	f240 36e7 	movw	r6, #999	; 0x3e7
    2dda:	2700      	movs	r7, #0
    2ddc:	4544      	cmp	r4, r8
    2dde:	d321      	bcc.n	2e24 <z_init_static_threads+0x70>
}
    2de0:	b006      	add	sp, #24
    2de2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    2de6:	f000 ba79 	b.w	32dc <k_sched_unlock>
		z_setup_new_thread(
    2dea:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2dee:	9305      	str	r3, [sp, #20]
    2df0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2df4:	9304      	str	r3, [sp, #16]
    2df6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2dfa:	9303      	str	r3, [sp, #12]
    2dfc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2e00:	9302      	str	r3, [sp, #8]
    2e02:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2e06:	9301      	str	r3, [sp, #4]
    2e08:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2e0c:	9300      	str	r3, [sp, #0]
    2e0e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2e12:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2e16:	f7ff ff9b 	bl	2d50 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2e1a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2e1e:	655d      	str	r5, [r3, #84]	; 0x54
    2e20:	4625      	mov	r5, r4
    2e22:	e7cd      	b.n	2dc0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2e26:	1c5a      	adds	r2, r3, #1
    2e28:	d00d      	beq.n	2e46 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    2e2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2e2e:	4630      	mov	r0, r6
    2e30:	4639      	mov	r1, r7
    2e32:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2e36:	42b9      	cmp	r1, r7
    2e38:	bf08      	it	eq
    2e3a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    2e3c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2e3e:	d104      	bne.n	2e4a <z_init_static_threads+0x96>
	z_sched_start(thread);
    2e40:	4628      	mov	r0, r5
    2e42:	f000 fb1f 	bl	3484 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2e46:	3430      	adds	r4, #48	; 0x30
    2e48:	e7c8      	b.n	2ddc <z_init_static_threads+0x28>
    2e4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e4e:	2300      	movs	r3, #0
    2e50:	f7fd f956 	bl	100 <__aeabi_uldivmod>
    2e54:	4602      	mov	r2, r0
    2e56:	460b      	mov	r3, r1
    2e58:	f105 0018 	add.w	r0, r5, #24
    2e5c:	4651      	mov	r1, sl
    2e5e:	f000 fcf1 	bl	3844 <z_add_timeout>
    2e62:	e7f0      	b.n	2e46 <z_init_static_threads+0x92>
    2e64:	200000c0 	.word	0x200000c0
    2e68:	200000c0 	.word	0x200000c0
    2e6c:	000046ef 	.word	0x000046ef

00002e70 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    2e70:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2e72:	4c09      	ldr	r4, [pc, #36]	; (2e98 <idle+0x28>)
	__asm__ volatile(
    2e74:	f04f 0220 	mov.w	r2, #32
    2e78:	f3ef 8311 	mrs	r3, BASEPRI
    2e7c:	f382 8811 	msr	BASEPRI, r2
    2e80:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    2e84:	f001 fc83 	bl	478e <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    2e88:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    2e8a:	f7fe f809 	bl	ea0 <pm_system_suspend>
    2e8e:	2800      	cmp	r0, #0
    2e90:	d1f0      	bne.n	2e74 <idle+0x4>
	arch_cpu_idle();
    2e92:	f7fe fc9d 	bl	17d0 <arch_cpu_idle>
}
    2e96:	e7ed      	b.n	2e74 <idle+0x4>
    2e98:	20000934 	.word	0x20000934

00002e9c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    2e9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2ea0:	4604      	mov	r4, r0
    2ea2:	4616      	mov	r6, r2
    2ea4:	461f      	mov	r7, r3
    2ea6:	f04f 0320 	mov.w	r3, #32
    2eaa:	f3ef 8811 	mrs	r8, BASEPRI
    2eae:	f383 8811 	msr	BASEPRI, r3
    2eb2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2eb6:	68c3      	ldr	r3, [r0, #12]
    2eb8:	4a35      	ldr	r2, [pc, #212]	; (2f90 <z_impl_k_mutex_lock+0xf4>)
    2eba:	b16b      	cbz	r3, 2ed8 <z_impl_k_mutex_lock+0x3c>
    2ebc:	6880      	ldr	r0, [r0, #8]
    2ebe:	6891      	ldr	r1, [r2, #8]
    2ec0:	4288      	cmp	r0, r1
    2ec2:	d019      	beq.n	2ef8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2ec4:	ea56 0307 	orrs.w	r3, r6, r7
    2ec8:	d118      	bne.n	2efc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    2eca:	f388 8811 	msr	BASEPRI, r8
    2ece:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    2ed2:	f06f 000f 	mvn.w	r0, #15
    2ed6:	e00c      	b.n	2ef2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2ed8:	6891      	ldr	r1, [r2, #8]
    2eda:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2ede:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    2ee0:	3301      	adds	r3, #1
    2ee2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    2ee4:	6893      	ldr	r3, [r2, #8]
    2ee6:	60a3      	str	r3, [r4, #8]
    2ee8:	f388 8811 	msr	BASEPRI, r8
    2eec:	f3bf 8f6f 	isb	sy
		return 0;
    2ef0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    2ef2:	b002      	add	sp, #8
    2ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2ef8:	6921      	ldr	r1, [r4, #16]
    2efa:	e7f0      	b.n	2ede <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2efc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2f00:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    2f04:	4299      	cmp	r1, r3
    2f06:	bfa8      	it	ge
    2f08:	4619      	movge	r1, r3
    2f0a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    2f0e:	4291      	cmp	r1, r2
    2f10:	bfb8      	it	lt
    2f12:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    2f14:	428b      	cmp	r3, r1
    2f16:	dd2f      	ble.n	2f78 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    2f18:	f000 fad2 	bl	34c0 <z_set_prio>
    2f1c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2f1e:	e9cd 6700 	strd	r6, r7, [sp]
    2f22:	481c      	ldr	r0, [pc, #112]	; (2f94 <z_impl_k_mutex_lock+0xf8>)
    2f24:	4622      	mov	r2, r4
    2f26:	4641      	mov	r1, r8
    2f28:	f000 f992 	bl	3250 <z_pend_curr>
	if (got_mutex == 0) {
    2f2c:	2800      	cmp	r0, #0
    2f2e:	d0e0      	beq.n	2ef2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    2f30:	f04f 0320 	mov.w	r3, #32
    2f34:	f3ef 8611 	mrs	r6, BASEPRI
    2f38:	f383 8811 	msr	BASEPRI, r3
    2f3c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2f40:	6823      	ldr	r3, [r4, #0]
    2f42:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2f44:	429c      	cmp	r4, r3
    2f46:	d00a      	beq.n	2f5e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    2f48:	b14b      	cbz	r3, 2f5e <z_impl_k_mutex_lock+0xc2>
    2f4a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    2f4e:	4299      	cmp	r1, r3
    2f50:	bfa8      	it	ge
    2f52:	4619      	movge	r1, r3
    2f54:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    2f58:	4299      	cmp	r1, r3
    2f5a:	bfb8      	it	lt
    2f5c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2f5e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    2f60:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2f64:	4299      	cmp	r1, r3
    2f66:	d109      	bne.n	2f7c <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    2f68:	b16d      	cbz	r5, 2f86 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    2f6a:	480a      	ldr	r0, [pc, #40]	; (2f94 <z_impl_k_mutex_lock+0xf8>)
    2f6c:	4631      	mov	r1, r6
    2f6e:	f000 f8eb 	bl	3148 <z_reschedule>
	return -EAGAIN;
    2f72:	f06f 000a 	mvn.w	r0, #10
    2f76:	e7bc      	b.n	2ef2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    2f78:	2500      	movs	r5, #0
    2f7a:	e7d0      	b.n	2f1e <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    2f7c:	f000 faa0 	bl	34c0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2f80:	2800      	cmp	r0, #0
    2f82:	d1f2      	bne.n	2f6a <z_impl_k_mutex_lock+0xce>
    2f84:	e7f0      	b.n	2f68 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    2f86:	f386 8811 	msr	BASEPRI, r6
    2f8a:	f3bf 8f6f 	isb	sy
    2f8e:	e7f0      	b.n	2f72 <z_impl_k_mutex_lock+0xd6>
    2f90:	20000934 	.word	0x20000934
    2f94:	20000d9f 	.word	0x20000d9f

00002f98 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    2f98:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    2f9a:	6883      	ldr	r3, [r0, #8]
{
    2f9c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d036      	beq.n	3010 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    2fa2:	4a1e      	ldr	r2, [pc, #120]	; (301c <z_impl_k_mutex_unlock+0x84>)
    2fa4:	6892      	ldr	r2, [r2, #8]
    2fa6:	4293      	cmp	r3, r2
    2fa8:	d135      	bne.n	3016 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    2faa:	7bda      	ldrb	r2, [r3, #15]
    2fac:	3a01      	subs	r2, #1
    2fae:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    2fb0:	68c3      	ldr	r3, [r0, #12]
    2fb2:	2b01      	cmp	r3, #1
    2fb4:	d905      	bls.n	2fc2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    2fb6:	3b01      	subs	r3, #1
    2fb8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    2fba:	f000 f98f 	bl	32dc <k_sched_unlock>

	return 0;
    2fbe:	2000      	movs	r0, #0
}
    2fc0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2fc2:	f04f 0320 	mov.w	r3, #32
    2fc6:	f3ef 8511 	mrs	r5, BASEPRI
    2fca:	f383 8811 	msr	BASEPRI, r3
    2fce:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2fd2:	6901      	ldr	r1, [r0, #16]
    2fd4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2fd6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2fda:	4299      	cmp	r1, r3
    2fdc:	d001      	beq.n	2fe2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    2fde:	f000 fa6f 	bl	34c0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2fe2:	4620      	mov	r0, r4
    2fe4:	f001 fba5 	bl	4732 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2fe8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2fea:	b158      	cbz	r0, 3004 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    2fec:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2ff0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2ff2:	2200      	movs	r2, #0
    2ff4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    2ff6:	f001 fb6a 	bl	46ce <z_ready_thread>
		z_reschedule(&lock, key);
    2ffa:	4809      	ldr	r0, [pc, #36]	; (3020 <z_impl_k_mutex_unlock+0x88>)
    2ffc:	4629      	mov	r1, r5
    2ffe:	f000 f8a3 	bl	3148 <z_reschedule>
    3002:	e7da      	b.n	2fba <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    3004:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3006:	f385 8811 	msr	BASEPRI, r5
    300a:	f3bf 8f6f 	isb	sy
    300e:	e7d4      	b.n	2fba <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    3010:	f06f 0015 	mvn.w	r0, #21
    3014:	e7d4      	b.n	2fc0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    3016:	f04f 30ff 	mov.w	r0, #4294967295
    301a:	e7d1      	b.n	2fc0 <z_impl_k_mutex_unlock+0x28>
    301c:	20000934 	.word	0x20000934
    3020:	20000d9f 	.word	0x20000d9f

00003024 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3024:	b538      	push	{r3, r4, r5, lr}
    3026:	4604      	mov	r4, r0
	__asm__ volatile(
    3028:	f04f 0320 	mov.w	r3, #32
    302c:	f3ef 8511 	mrs	r5, BASEPRI
    3030:	f383 8811 	msr	BASEPRI, r3
    3034:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3038:	f001 fb7b 	bl	4732 <z_unpend_first_thread>

	if (thread != NULL) {
    303c:	b148      	cbz	r0, 3052 <z_impl_k_sem_give+0x2e>
    303e:	2200      	movs	r2, #0
    3040:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3042:	f001 fb44 	bl	46ce <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3046:	4629      	mov	r1, r5
    3048:	4805      	ldr	r0, [pc, #20]	; (3060 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    304a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    304e:	f000 b87b 	b.w	3148 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3052:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3056:	429a      	cmp	r2, r3
    3058:	bf18      	it	ne
    305a:	3301      	addne	r3, #1
    305c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    305e:	e7f2      	b.n	3046 <z_impl_k_sem_give+0x22>
    3060:	20000d9f 	.word	0x20000d9f

00003064 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3064:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3066:	4614      	mov	r4, r2
    3068:	461d      	mov	r5, r3
    306a:	f04f 0320 	mov.w	r3, #32
    306e:	f3ef 8111 	mrs	r1, BASEPRI
    3072:	f383 8811 	msr	BASEPRI, r3
    3076:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    307a:	6883      	ldr	r3, [r0, #8]
    307c:	b143      	cbz	r3, 3090 <z_impl_k_sem_take+0x2c>
		sem->count--;
    307e:	3b01      	subs	r3, #1
    3080:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    3082:	f381 8811 	msr	BASEPRI, r1
    3086:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    308a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    308c:	b003      	add	sp, #12
    308e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3090:	ea54 0305 	orrs.w	r3, r4, r5
    3094:	d106      	bne.n	30a4 <z_impl_k_sem_take+0x40>
    3096:	f381 8811 	msr	BASEPRI, r1
    309a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    309e:	f06f 000f 	mvn.w	r0, #15
    30a2:	e7f3      	b.n	308c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    30a4:	4602      	mov	r2, r0
    30a6:	e9cd 4500 	strd	r4, r5, [sp]
    30aa:	4802      	ldr	r0, [pc, #8]	; (30b4 <z_impl_k_sem_take+0x50>)
    30ac:	f000 f8d0 	bl	3250 <z_pend_curr>
	return ret;
    30b0:	e7ec      	b.n	308c <z_impl_k_sem_take+0x28>
    30b2:	bf00      	nop
    30b4:	20000d9f 	.word	0x20000d9f

000030b8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    30b8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    30ba:	4c08      	ldr	r4, [pc, #32]	; (30dc <z_reset_time_slice+0x24>)
    30bc:	6823      	ldr	r3, [r4, #0]
    30be:	b15b      	cbz	r3, 30d8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    30c0:	f7fe f9d2 	bl	1468 <sys_clock_elapsed>
    30c4:	4603      	mov	r3, r0
    30c6:	6820      	ldr	r0, [r4, #0]
    30c8:	4a05      	ldr	r2, [pc, #20]	; (30e0 <z_reset_time_slice+0x28>)
    30ca:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    30cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    30d0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    30d2:	2100      	movs	r1, #0
    30d4:	f001 bb6b 	b.w	47ae <z_set_timeout_expiry>
}
    30d8:	bd10      	pop	{r4, pc}
    30da:	bf00      	nop
    30dc:	2000096c 	.word	0x2000096c
    30e0:	20000934 	.word	0x20000934

000030e4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    30e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30e6:	4604      	mov	r4, r0
    30e8:	460d      	mov	r5, r1
	__asm__ volatile(
    30ea:	f04f 0320 	mov.w	r3, #32
    30ee:	f3ef 8611 	mrs	r6, BASEPRI
    30f2:	f383 8811 	msr	BASEPRI, r3
    30f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    30fa:	4b10      	ldr	r3, [pc, #64]	; (313c <k_sched_time_slice_set+0x58>)
    30fc:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    30fe:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3102:	f240 30e7 	movw	r0, #999	; 0x3e7
    3106:	2100      	movs	r1, #0
    3108:	611a      	str	r2, [r3, #16]
    310a:	fbe7 0104 	umlal	r0, r1, r7, r4
    310e:	2300      	movs	r3, #0
    3110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3114:	f7fc fff4 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3118:	2c00      	cmp	r4, #0
    311a:	4b09      	ldr	r3, [pc, #36]	; (3140 <k_sched_time_slice_set+0x5c>)
    311c:	dc09      	bgt.n	3132 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    311e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    3120:	4b08      	ldr	r3, [pc, #32]	; (3144 <k_sched_time_slice_set+0x60>)
    3122:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3124:	f7ff ffc8 	bl	30b8 <z_reset_time_slice>
	__asm__ volatile(
    3128:	f386 8811 	msr	BASEPRI, r6
    312c:	f3bf 8f6f 	isb	sy
	}
}
    3130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    3132:	2802      	cmp	r0, #2
    3134:	bfb8      	it	lt
    3136:	2002      	movlt	r0, #2
    3138:	e7f1      	b.n	311e <k_sched_time_slice_set+0x3a>
    313a:	bf00      	nop
    313c:	20000934 	.word	0x20000934
    3140:	2000096c 	.word	0x2000096c
    3144:	20000968 	.word	0x20000968

00003148 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3148:	b949      	cbnz	r1, 315e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    314a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    314e:	b930      	cbnz	r0, 315e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3150:	4b05      	ldr	r3, [pc, #20]	; (3168 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3154:	689b      	ldr	r3, [r3, #8]
    3156:	429a      	cmp	r2, r3
    3158:	d001      	beq.n	315e <z_reschedule+0x16>
	ret = arch_swap(key);
    315a:	f7fe ba5d 	b.w	1618 <arch_swap>
    315e:	f381 8811 	msr	BASEPRI, r1
    3162:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3166:	4770      	bx	lr
    3168:	20000934 	.word	0x20000934

0000316c <k_sched_lock>:
	__asm__ volatile(
    316c:	f04f 0320 	mov.w	r3, #32
    3170:	f3ef 8111 	mrs	r1, BASEPRI
    3174:	f383 8811 	msr	BASEPRI, r3
    3178:	f3bf 8f6f 	isb	sy
    317c:	4b04      	ldr	r3, [pc, #16]	; (3190 <k_sched_lock+0x24>)
    317e:	689a      	ldr	r2, [r3, #8]
    3180:	7bd3      	ldrb	r3, [r2, #15]
    3182:	3b01      	subs	r3, #1
    3184:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3186:	f381 8811 	msr	BASEPRI, r1
    318a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    318e:	4770      	bx	lr
    3190:	20000934 	.word	0x20000934

00003194 <update_cache>:
{
    3194:	b538      	push	{r3, r4, r5, lr}
    3196:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3198:	480c      	ldr	r0, [pc, #48]	; (31cc <update_cache+0x38>)
    319a:	4d0d      	ldr	r5, [pc, #52]	; (31d0 <update_cache+0x3c>)
    319c:	f001 fa60 	bl	4660 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    31a0:	4604      	mov	r4, r0
    31a2:	b900      	cbnz	r0, 31a6 <update_cache+0x12>
    31a4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    31a6:	68ab      	ldr	r3, [r5, #8]
    31a8:	b94a      	cbnz	r2, 31be <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    31aa:	7b5a      	ldrb	r2, [r3, #13]
    31ac:	06d2      	lsls	r2, r2, #27
    31ae:	d106      	bne.n	31be <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    31b0:	69a2      	ldr	r2, [r4, #24]
    31b2:	b922      	cbnz	r2, 31be <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    31b4:	89da      	ldrh	r2, [r3, #14]
    31b6:	2a7f      	cmp	r2, #127	; 0x7f
    31b8:	d901      	bls.n	31be <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    31ba:	626b      	str	r3, [r5, #36]	; 0x24
}
    31bc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    31be:	429c      	cmp	r4, r3
    31c0:	d001      	beq.n	31c6 <update_cache+0x32>
			z_reset_time_slice();
    31c2:	f7ff ff79 	bl	30b8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    31c6:	626c      	str	r4, [r5, #36]	; 0x24
}
    31c8:	e7f8      	b.n	31bc <update_cache+0x28>
    31ca:	bf00      	nop
    31cc:	2000095c 	.word	0x2000095c
    31d0:	20000934 	.word	0x20000934

000031d4 <unready_thread>:
{
    31d4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    31d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    31da:	7b43      	ldrb	r3, [r0, #13]
    31dc:	2a00      	cmp	r2, #0
{
    31de:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    31e0:	da04      	bge.n	31ec <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    31e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    31e6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    31e8:	f001 fa12 	bl	4610 <sys_dlist_remove>
	update_cache(thread == _current);
    31ec:	4b04      	ldr	r3, [pc, #16]	; (3200 <unready_thread+0x2c>)
    31ee:	6898      	ldr	r0, [r3, #8]
    31f0:	1a43      	subs	r3, r0, r1
    31f2:	4258      	negs	r0, r3
    31f4:	4158      	adcs	r0, r3
}
    31f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    31fa:	f7ff bfcb 	b.w	3194 <update_cache>
    31fe:	bf00      	nop
    3200:	20000934 	.word	0x20000934

00003204 <pend>:
{
    3204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3208:	4606      	mov	r6, r0
    320a:	4614      	mov	r4, r2
    320c:	461d      	mov	r5, r3
	__asm__ volatile(
    320e:	f04f 0320 	mov.w	r3, #32
    3212:	f3ef 8711 	mrs	r7, BASEPRI
    3216:	f383 8811 	msr	BASEPRI, r3
    321a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    321e:	f001 fa29 	bl	4674 <add_to_waitq_locked>
	__asm__ volatile(
    3222:	f387 8811 	msr	BASEPRI, r7
    3226:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    322a:	1c6b      	adds	r3, r5, #1
    322c:	bf08      	it	eq
    322e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    3232:	d008      	beq.n	3246 <pend+0x42>
    3234:	4622      	mov	r2, r4
    3236:	462b      	mov	r3, r5
    3238:	f106 0018 	add.w	r0, r6, #24
    323c:	4903      	ldr	r1, [pc, #12]	; (324c <pend+0x48>)
}
    323e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3242:	f000 baff 	b.w	3844 <z_add_timeout>
    3246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    324a:	bf00      	nop
    324c:	000046ef 	.word	0x000046ef

00003250 <z_pend_curr>:
{
    3250:	b510      	push	{r4, lr}
	pending_current = _current;
    3252:	4b07      	ldr	r3, [pc, #28]	; (3270 <z_pend_curr+0x20>)
    3254:	6898      	ldr	r0, [r3, #8]
    3256:	4b07      	ldr	r3, [pc, #28]	; (3274 <z_pend_curr+0x24>)
{
    3258:	460c      	mov	r4, r1
	pending_current = _current;
    325a:	6018      	str	r0, [r3, #0]
{
    325c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    325e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3262:	f7ff ffcf 	bl	3204 <pend>
    3266:	4620      	mov	r0, r4
}
    3268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    326c:	f7fe b9d4 	b.w	1618 <arch_swap>
    3270:	20000934 	.word	0x20000934
    3274:	20000964 	.word	0x20000964

00003278 <z_impl_k_thread_suspend>:
{
    3278:	b570      	push	{r4, r5, r6, lr}
    327a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    327c:	3018      	adds	r0, #24
    327e:	f001 fa70 	bl	4762 <z_abort_timeout>
	__asm__ volatile(
    3282:	f04f 0320 	mov.w	r3, #32
    3286:	f3ef 8611 	mrs	r6, BASEPRI
    328a:	f383 8811 	msr	BASEPRI, r3
    328e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3292:	f994 200d 	ldrsb.w	r2, [r4, #13]
    3296:	7b63      	ldrb	r3, [r4, #13]
    3298:	2a00      	cmp	r2, #0
    329a:	da05      	bge.n	32a8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    329c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    32a0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    32a2:	4620      	mov	r0, r4
    32a4:	f001 f9b4 	bl	4610 <sys_dlist_remove>
		update_cache(thread == _current);
    32a8:	4d0b      	ldr	r5, [pc, #44]	; (32d8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    32aa:	7b63      	ldrb	r3, [r4, #13]
    32ac:	68a8      	ldr	r0, [r5, #8]
    32ae:	f043 0310 	orr.w	r3, r3, #16
    32b2:	7363      	strb	r3, [r4, #13]
    32b4:	1b03      	subs	r3, r0, r4
    32b6:	4258      	negs	r0, r3
    32b8:	4158      	adcs	r0, r3
    32ba:	f7ff ff6b 	bl	3194 <update_cache>
	__asm__ volatile(
    32be:	f386 8811 	msr	BASEPRI, r6
    32c2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    32c6:	68ab      	ldr	r3, [r5, #8]
    32c8:	42a3      	cmp	r3, r4
    32ca:	d103      	bne.n	32d4 <z_impl_k_thread_suspend+0x5c>
}
    32cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    32d0:	f001 b9bc 	b.w	464c <z_reschedule_unlocked>
}
    32d4:	bd70      	pop	{r4, r5, r6, pc}
    32d6:	bf00      	nop
    32d8:	20000934 	.word	0x20000934

000032dc <k_sched_unlock>:
{
    32dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    32de:	f04f 0320 	mov.w	r3, #32
    32e2:	f3ef 8411 	mrs	r4, BASEPRI
    32e6:	f383 8811 	msr	BASEPRI, r3
    32ea:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    32ee:	4b08      	ldr	r3, [pc, #32]	; (3310 <k_sched_unlock+0x34>)
    32f0:	689a      	ldr	r2, [r3, #8]
    32f2:	7bd3      	ldrb	r3, [r2, #15]
    32f4:	3301      	adds	r3, #1
    32f6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    32f8:	2000      	movs	r0, #0
    32fa:	f7ff ff4b 	bl	3194 <update_cache>
	__asm__ volatile(
    32fe:	f384 8811 	msr	BASEPRI, r4
    3302:	f3bf 8f6f 	isb	sy
}
    3306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    330a:	f001 b99f 	b.w	464c <z_reschedule_unlocked>
    330e:	bf00      	nop
    3310:	20000934 	.word	0x20000934

00003314 <move_thread_to_end_of_prio_q>:
{
    3314:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3316:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    331a:	7b43      	ldrb	r3, [r0, #13]
    331c:	2a00      	cmp	r2, #0
{
    331e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3320:	da04      	bge.n	332c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3326:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3328:	f001 f972 	bl	4610 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    332c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    332e:	4a17      	ldr	r2, [pc, #92]	; (338c <move_thread_to_end_of_prio_q+0x78>)
    3330:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3334:	4610      	mov	r0, r2
    3336:	734b      	strb	r3, [r1, #13]
    3338:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    333c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    333e:	4283      	cmp	r3, r0
    3340:	bf08      	it	eq
    3342:	2300      	moveq	r3, #0
    3344:	2b00      	cmp	r3, #0
    3346:	bf38      	it	cc
    3348:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    334a:	b1cb      	cbz	r3, 3380 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    334c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3350:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    3354:	42a6      	cmp	r6, r4
    3356:	d00f      	beq.n	3378 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    3358:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    335a:	2c00      	cmp	r4, #0
    335c:	dd0c      	ble.n	3378 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    335e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3360:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3364:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3366:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3368:	6890      	ldr	r0, [r2, #8]
    336a:	1a43      	subs	r3, r0, r1
    336c:	4258      	negs	r0, r3
}
    336e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3372:	4158      	adcs	r0, r3
    3374:	f7ff bf0e 	b.w	3194 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3378:	42ab      	cmp	r3, r5
    337a:	d001      	beq.n	3380 <move_thread_to_end_of_prio_q+0x6c>
    337c:	681b      	ldr	r3, [r3, #0]
    337e:	e7e4      	b.n	334a <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    3380:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    3384:	6029      	str	r1, [r5, #0]
	list->tail = node;
    3386:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    3388:	e7ee      	b.n	3368 <move_thread_to_end_of_prio_q+0x54>
    338a:	bf00      	nop
    338c:	20000934 	.word	0x20000934

00003390 <z_time_slice>:
{
    3390:	b570      	push	{r4, r5, r6, lr}
    3392:	4601      	mov	r1, r0
	__asm__ volatile(
    3394:	f04f 0320 	mov.w	r3, #32
    3398:	f3ef 8411 	mrs	r4, BASEPRI
    339c:	f383 8811 	msr	BASEPRI, r3
    33a0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    33a4:	4b16      	ldr	r3, [pc, #88]	; (3400 <z_time_slice+0x70>)
    33a6:	4a17      	ldr	r2, [pc, #92]	; (3404 <z_time_slice+0x74>)
    33a8:	6898      	ldr	r0, [r3, #8]
    33aa:	6815      	ldr	r5, [r2, #0]
    33ac:	42a8      	cmp	r0, r5
    33ae:	461d      	mov	r5, r3
    33b0:	d106      	bne.n	33c0 <z_time_slice+0x30>
			z_reset_time_slice();
    33b2:	f7ff fe81 	bl	30b8 <z_reset_time_slice>
	__asm__ volatile(
    33b6:	f384 8811 	msr	BASEPRI, r4
    33ba:	f3bf 8f6f 	isb	sy
}
    33be:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    33c0:	2600      	movs	r6, #0
    33c2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    33c4:	4a10      	ldr	r2, [pc, #64]	; (3408 <z_time_slice+0x78>)
    33c6:	6812      	ldr	r2, [r2, #0]
    33c8:	b1ba      	cbz	r2, 33fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    33ca:	89c2      	ldrh	r2, [r0, #14]
    33cc:	2a7f      	cmp	r2, #127	; 0x7f
    33ce:	d814      	bhi.n	33fa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    33d0:	7b42      	ldrb	r2, [r0, #13]
    33d2:	06d2      	lsls	r2, r2, #27
    33d4:	d111      	bne.n	33fa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    33d6:	4a0d      	ldr	r2, [pc, #52]	; (340c <z_time_slice+0x7c>)
    33d8:	f990 600e 	ldrsb.w	r6, [r0, #14]
    33dc:	6812      	ldr	r2, [r2, #0]
    33de:	4296      	cmp	r6, r2
    33e0:	db0b      	blt.n	33fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    33e2:	4a0b      	ldr	r2, [pc, #44]	; (3410 <z_time_slice+0x80>)
    33e4:	4290      	cmp	r0, r2
    33e6:	d008      	beq.n	33fa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    33e8:	691a      	ldr	r2, [r3, #16]
    33ea:	428a      	cmp	r2, r1
    33ec:	dc02      	bgt.n	33f4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    33ee:	f7ff ff91 	bl	3314 <move_thread_to_end_of_prio_q>
    33f2:	e7de      	b.n	33b2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    33f4:	1a52      	subs	r2, r2, r1
    33f6:	611a      	str	r2, [r3, #16]
    33f8:	e7dd      	b.n	33b6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    33fa:	2300      	movs	r3, #0
    33fc:	612b      	str	r3, [r5, #16]
    33fe:	e7da      	b.n	33b6 <z_time_slice+0x26>
    3400:	20000934 	.word	0x20000934
    3404:	20000964 	.word	0x20000964
    3408:	2000096c 	.word	0x2000096c
    340c:	20000968 	.word	0x20000968
    3410:	20000110 	.word	0x20000110

00003414 <ready_thread>:
{
    3414:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3416:	f990 300d 	ldrsb.w	r3, [r0, #13]
    341a:	7b42      	ldrb	r2, [r0, #13]
    341c:	2b00      	cmp	r3, #0
    341e:	db2d      	blt.n	347c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3420:	06d3      	lsls	r3, r2, #27
    3422:	d12b      	bne.n	347c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    3424:	6983      	ldr	r3, [r0, #24]
    3426:	bb4b      	cbnz	r3, 347c <ready_thread+0x68>
	return list->head == list;
    3428:	4915      	ldr	r1, [pc, #84]	; (3480 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    342a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    342e:	7342      	strb	r2, [r0, #13]
    3430:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3432:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
    3434:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3438:	4294      	cmp	r4, r2
    343a:	bf18      	it	ne
    343c:	4623      	movne	r3, r4
    343e:	2b00      	cmp	r3, #0
    3440:	bf38      	it	cc
    3442:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3444:	b1ab      	cbz	r3, 3472 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    3446:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    344a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    344e:	42a6      	cmp	r6, r4
    3450:	d00b      	beq.n	346a <ready_thread+0x56>
		return b2 - b1;
    3452:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3454:	2c00      	cmp	r4, #0
    3456:	dd08      	ble.n	346a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    3458:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    345a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    345e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3460:	6058      	str	r0, [r3, #4]
}
    3462:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3464:	2000      	movs	r0, #0
    3466:	f7ff be95 	b.w	3194 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    346a:	42ab      	cmp	r3, r5
    346c:	d001      	beq.n	3472 <ready_thread+0x5e>
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	e7e8      	b.n	3444 <ready_thread+0x30>
	node->prev = tail;
    3472:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    3476:	6028      	str	r0, [r5, #0]
	list->tail = node;
    3478:	62c8      	str	r0, [r1, #44]	; 0x2c
}
    347a:	e7f2      	b.n	3462 <ready_thread+0x4e>
}
    347c:	bc70      	pop	{r4, r5, r6}
    347e:	4770      	bx	lr
    3480:	20000934 	.word	0x20000934

00003484 <z_sched_start>:
{
    3484:	b510      	push	{r4, lr}
	__asm__ volatile(
    3486:	f04f 0220 	mov.w	r2, #32
    348a:	f3ef 8411 	mrs	r4, BASEPRI
    348e:	f382 8811 	msr	BASEPRI, r2
    3492:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    3496:	7b42      	ldrb	r2, [r0, #13]
    3498:	0751      	lsls	r1, r2, #29
    349a:	d404      	bmi.n	34a6 <z_sched_start+0x22>
	__asm__ volatile(
    349c:	f384 8811 	msr	BASEPRI, r4
    34a0:	f3bf 8f6f 	isb	sy
}
    34a4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    34a6:	f022 0204 	bic.w	r2, r2, #4
    34aa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    34ac:	f7ff ffb2 	bl	3414 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    34b0:	4621      	mov	r1, r4
    34b2:	4802      	ldr	r0, [pc, #8]	; (34bc <z_sched_start+0x38>)
}
    34b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    34b8:	f7ff be46 	b.w	3148 <z_reschedule>
    34bc:	20000d9f 	.word	0x20000d9f

000034c0 <z_set_prio>:
{
    34c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34c2:	4604      	mov	r4, r0
	__asm__ volatile(
    34c4:	f04f 0320 	mov.w	r3, #32
    34c8:	f3ef 8611 	mrs	r6, BASEPRI
    34cc:	f383 8811 	msr	BASEPRI, r3
    34d0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    34d4:	7b43      	ldrb	r3, [r0, #13]
    34d6:	06da      	lsls	r2, r3, #27
    34d8:	b249      	sxtb	r1, r1
    34da:	d138      	bne.n	354e <z_set_prio+0x8e>
    34dc:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    34de:	2d00      	cmp	r5, #0
    34e0:	d135      	bne.n	354e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    34e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    34e6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    34e8:	f001 f892 	bl	4610 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    34ec:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    34ee:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    34f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34f4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    34f6:	4817      	ldr	r0, [pc, #92]	; (3554 <z_set_prio+0x94>)
    34f8:	4603      	mov	r3, r0
    34fa:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34fe:	429f      	cmp	r7, r3
    3500:	bf18      	it	ne
    3502:	463d      	movne	r5, r7
    3504:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3506:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    3508:	461a      	mov	r2, r3
    350a:	462b      	mov	r3, r5
    350c:	bf38      	it	cc
    350e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3510:	b1c3      	cbz	r3, 3544 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    3512:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    3516:	42a9      	cmp	r1, r5
    3518:	d010      	beq.n	353c <z_set_prio+0x7c>
		return b2 - b1;
    351a:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    351c:	2d00      	cmp	r5, #0
    351e:	dd0d      	ble.n	353c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    3520:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3522:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3526:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3528:	605c      	str	r4, [r3, #4]
			update_cache(1);
    352a:	2001      	movs	r0, #1
    352c:	f7ff fe32 	bl	3194 <update_cache>
    3530:	2001      	movs	r0, #1
	__asm__ volatile(
    3532:	f386 8811 	msr	BASEPRI, r6
    3536:	f3bf 8f6f 	isb	sy
}
    353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    353c:	42bb      	cmp	r3, r7
    353e:	d001      	beq.n	3544 <z_set_prio+0x84>
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	e7e5      	b.n	3510 <z_set_prio+0x50>
	node->prev = tail;
    3544:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    3548:	603c      	str	r4, [r7, #0]
	list->tail = node;
    354a:	62c4      	str	r4, [r0, #44]	; 0x2c
}
    354c:	e7ed      	b.n	352a <z_set_prio+0x6a>
			thread->base.prio = prio;
    354e:	73a1      	strb	r1, [r4, #14]
    3550:	2000      	movs	r0, #0
    3552:	e7ee      	b.n	3532 <z_set_prio+0x72>
    3554:	20000934 	.word	0x20000934

00003558 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3558:	4b04      	ldr	r3, [pc, #16]	; (356c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    355a:	2100      	movs	r1, #0
    355c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    3560:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    3564:	4608      	mov	r0, r1
    3566:	f7ff bdbd 	b.w	30e4 <k_sched_time_slice_set>
    356a:	bf00      	nop
    356c:	20000934 	.word	0x20000934

00003570 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    3570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3572:	f04f 0320 	mov.w	r3, #32
    3576:	f3ef 8411 	mrs	r4, BASEPRI
    357a:	f383 8811 	msr	BASEPRI, r3
    357e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    3582:	491b      	ldr	r1, [pc, #108]	; (35f0 <z_impl_k_yield+0x80>)
    3584:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3586:	7b43      	ldrb	r3, [r0, #13]
    3588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    358c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    358e:	f001 f83f 	bl	4610 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    3592:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3594:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    3596:	4608      	mov	r0, r1
    3598:	f063 037f 	orn	r3, r3, #127	; 0x7f
    359c:	7353      	strb	r3, [r2, #13]
    359e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    35a2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    35a4:	4283      	cmp	r3, r0
    35a6:	bf08      	it	eq
    35a8:	2300      	moveq	r3, #0
    35aa:	2b00      	cmp	r3, #0
    35ac:	bf38      	it	cc
    35ae:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    35b0:	b1cb      	cbz	r3, 35e6 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    35b2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    35b6:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    35ba:	42af      	cmp	r7, r5
    35bc:	d00f      	beq.n	35de <z_impl_k_yield+0x6e>
		return b2 - b1;
    35be:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    35c0:	2d00      	cmp	r5, #0
    35c2:	dd0c      	ble.n	35de <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    35c4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    35c6:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    35ca:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    35cc:	605a      	str	r2, [r3, #4]
	update_cache(1);
    35ce:	2001      	movs	r0, #1
    35d0:	f7ff fde0 	bl	3194 <update_cache>
    35d4:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    35d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    35da:	f7fe b81d 	b.w	1618 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    35de:	42b3      	cmp	r3, r6
    35e0:	d001      	beq.n	35e6 <z_impl_k_yield+0x76>
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	e7e4      	b.n	35b0 <z_impl_k_yield+0x40>
	node->prev = tail;
    35e6:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    35ea:	6032      	str	r2, [r6, #0]
	list->tail = node;
    35ec:	62ca      	str	r2, [r1, #44]	; 0x2c
}
    35ee:	e7ee      	b.n	35ce <z_impl_k_yield+0x5e>
    35f0:	20000934 	.word	0x20000934

000035f4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    35f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35f8:	4604      	mov	r4, r0
    35fa:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    35fc:	ea54 0105 	orrs.w	r1, r4, r5
    3600:	d104      	bne.n	360c <z_tick_sleep+0x18>
	z_impl_k_yield();
    3602:	f7ff ffb5 	bl	3570 <z_impl_k_yield>
		k_yield();
		return 0;
    3606:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    3608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    360c:	f06f 0101 	mvn.w	r1, #1
    3610:	1a0a      	subs	r2, r1, r0
    3612:	f04f 31ff 	mov.w	r1, #4294967295
    3616:	eb61 0305 	sbc.w	r3, r1, r5
    361a:	2a01      	cmp	r2, #1
    361c:	f173 0300 	sbcs.w	r3, r3, #0
    3620:	da2a      	bge.n	3678 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3622:	f001 f8de 	bl	47e2 <sys_clock_tick_get_32>
    3626:	1906      	adds	r6, r0, r4
    3628:	f04f 0320 	mov.w	r3, #32
    362c:	f3ef 8811 	mrs	r8, BASEPRI
    3630:	f383 8811 	msr	BASEPRI, r3
    3634:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3638:	4f11      	ldr	r7, [pc, #68]	; (3680 <z_tick_sleep+0x8c>)
    363a:	4b12      	ldr	r3, [pc, #72]	; (3684 <z_tick_sleep+0x90>)
    363c:	68b8      	ldr	r0, [r7, #8]
    363e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    3640:	f7ff fdc8 	bl	31d4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3644:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3646:	4910      	ldr	r1, [pc, #64]	; (3688 <z_tick_sleep+0x94>)
    3648:	4622      	mov	r2, r4
    364a:	462b      	mov	r3, r5
    364c:	3018      	adds	r0, #24
    364e:	f000 f8f9 	bl	3844 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3652:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3654:	7b53      	ldrb	r3, [r2, #13]
    3656:	f043 0310 	orr.w	r3, r3, #16
    365a:	7353      	strb	r3, [r2, #13]
    365c:	4640      	mov	r0, r8
    365e:	f7fd ffdb 	bl	1618 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3662:	f001 f8be 	bl	47e2 <sys_clock_tick_get_32>
    3666:	1a30      	subs	r0, r6, r0
    3668:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    366c:	2801      	cmp	r0, #1
    366e:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    3672:	bfb8      	it	lt
    3674:	2000      	movlt	r0, #0
    3676:	e7c7      	b.n	3608 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3678:	f06f 0601 	mvn.w	r6, #1
    367c:	1a36      	subs	r6, r6, r0
    367e:	e7d3      	b.n	3628 <z_tick_sleep+0x34>
    3680:	20000934 	.word	0x20000934
    3684:	20000964 	.word	0x20000964
    3688:	000046ef 	.word	0x000046ef

0000368c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    368c:	b508      	push	{r3, lr}
    368e:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3690:	3301      	adds	r3, #1
    3692:	bf08      	it	eq
    3694:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    3698:	d106      	bne.n	36a8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    369a:	4b08      	ldr	r3, [pc, #32]	; (36bc <z_impl_k_sleep+0x30>)
    369c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    369e:	f7ff fdeb 	bl	3278 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    36a2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    36a6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    36a8:	f7ff ffa4 	bl	35f4 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    36ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    36b0:	fb80 2303 	smull	r2, r3, r0, r3
    36b4:	0bd0      	lsrs	r0, r2, #15
    36b6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    36ba:	e7f4      	b.n	36a6 <z_impl_k_sleep+0x1a>
    36bc:	20000934 	.word	0x20000934

000036c0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    36c0:	4b01      	ldr	r3, [pc, #4]	; (36c8 <z_impl_k_current_get+0x8>)
    36c2:	6898      	ldr	r0, [r3, #8]
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop
    36c8:	20000934 	.word	0x20000934

000036cc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    36cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36d0:	4604      	mov	r4, r0
    36d2:	f04f 0320 	mov.w	r3, #32
    36d6:	f3ef 8611 	mrs	r6, BASEPRI
    36da:	f383 8811 	msr	BASEPRI, r3
    36de:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    36e2:	7b43      	ldrb	r3, [r0, #13]
    36e4:	071a      	lsls	r2, r3, #28
    36e6:	d505      	bpl.n	36f4 <z_thread_abort+0x28>
	__asm__ volatile(
    36e8:	f386 8811 	msr	BASEPRI, r6
    36ec:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    36f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    36f4:	f023 0220 	bic.w	r2, r3, #32
    36f8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    36fc:	09d2      	lsrs	r2, r2, #7
    36fe:	d120      	bne.n	3742 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3700:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3702:	68a3      	ldr	r3, [r4, #8]
    3704:	b113      	cbz	r3, 370c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    3706:	4620      	mov	r0, r4
    3708:	f000 ff8a 	bl	4620 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    370c:	f104 0018 	add.w	r0, r4, #24
    3710:	f001 f827 	bl	4762 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3714:	f104 0758 	add.w	r7, r4, #88	; 0x58
    3718:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    371c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    371e:	42bd      	cmp	r5, r7
    3720:	d000      	beq.n	3724 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3722:	b9b5      	cbnz	r5, 3752 <z_thread_abort+0x86>
		update_cache(1);
    3724:	2001      	movs	r0, #1
    3726:	f7ff fd35 	bl	3194 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    372a:	4b10      	ldr	r3, [pc, #64]	; (376c <z_thread_abort+0xa0>)
    372c:	689b      	ldr	r3, [r3, #8]
    372e:	42a3      	cmp	r3, r4
    3730:	d1da      	bne.n	36e8 <z_thread_abort+0x1c>
    3732:	f3ef 8305 	mrs	r3, IPSR
    3736:	2b00      	cmp	r3, #0
    3738:	d1d6      	bne.n	36e8 <z_thread_abort+0x1c>
    373a:	4630      	mov	r0, r6
    373c:	f7fd ff6c 	bl	1618 <arch_swap>
	return ret;
    3740:	e7d2      	b.n	36e8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3742:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3746:	f043 0308 	orr.w	r3, r3, #8
    374a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    374c:	f000 ff60 	bl	4610 <sys_dlist_remove>
}
    3750:	e7d7      	b.n	3702 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    3752:	4628      	mov	r0, r5
    3754:	f000 ff64 	bl	4620 <unpend_thread_no_timeout>
    3758:	f105 0018 	add.w	r0, r5, #24
    375c:	f001 f801 	bl	4762 <z_abort_timeout>
    3760:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3764:	4628      	mov	r0, r5
    3766:	f7ff fe55 	bl	3414 <ready_thread>
    376a:	e7d7      	b.n	371c <z_thread_abort+0x50>
    376c:	20000934 	.word	0x20000934

00003770 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3770:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3772:	4806      	ldr	r0, [pc, #24]	; (378c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3774:	4a06      	ldr	r2, [pc, #24]	; (3790 <z_data_copy+0x20>)
    3776:	4907      	ldr	r1, [pc, #28]	; (3794 <z_data_copy+0x24>)
    3778:	1a12      	subs	r2, r2, r0
    377a:	f000 fd77 	bl	426c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    377e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3782:	4a05      	ldr	r2, [pc, #20]	; (3798 <z_data_copy+0x28>)
    3784:	4905      	ldr	r1, [pc, #20]	; (379c <z_data_copy+0x2c>)
    3786:	4806      	ldr	r0, [pc, #24]	; (37a0 <z_data_copy+0x30>)
    3788:	f000 bd70 	b.w	426c <memcpy>
    378c:	20000000 	.word	0x20000000
    3790:	20000110 	.word	0x20000110
    3794:	00004d78 	.word	0x00004d78
    3798:	00000000 	.word	0x00000000
    379c:	00004d78 	.word	0x00004d78
    37a0:	20000000 	.word	0x20000000

000037a4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    37a4:	4b03      	ldr	r3, [pc, #12]	; (37b4 <elapsed+0x10>)
    37a6:	681b      	ldr	r3, [r3, #0]
    37a8:	b90b      	cbnz	r3, 37ae <elapsed+0xa>
    37aa:	f7fd be5d 	b.w	1468 <sys_clock_elapsed>
}
    37ae:	2000      	movs	r0, #0
    37b0:	4770      	bx	lr
    37b2:	bf00      	nop
    37b4:	20000970 	.word	0x20000970

000037b8 <remove_timeout>:
{
    37b8:	b530      	push	{r4, r5, lr}
    37ba:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    37bc:	b168      	cbz	r0, 37da <remove_timeout+0x22>
    37be:	4a0a      	ldr	r2, [pc, #40]	; (37e8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    37c0:	6852      	ldr	r2, [r2, #4]
    37c2:	4290      	cmp	r0, r2
    37c4:	d009      	beq.n	37da <remove_timeout+0x22>
	if (next(t) != NULL) {
    37c6:	b143      	cbz	r3, 37da <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    37c8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    37cc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    37d0:	1912      	adds	r2, r2, r4
    37d2:	eb45 0101 	adc.w	r1, r5, r1
    37d6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    37da:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    37dc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    37de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    37e0:	2300      	movs	r3, #0
	node->prev = NULL;
    37e2:	e9c0 3300 	strd	r3, r3, [r0]
}
    37e6:	bd30      	pop	{r4, r5, pc}
    37e8:	20000058 	.word	0x20000058

000037ec <next_timeout>:

static int32_t next_timeout(void)
{
    37ec:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    37ee:	4b13      	ldr	r3, [pc, #76]	; (383c <next_timeout+0x50>)
    37f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37f2:	429c      	cmp	r4, r3
    37f4:	bf08      	it	eq
    37f6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    37f8:	f7ff ffd4 	bl	37a4 <elapsed>
    37fc:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    37fe:	b1bc      	cbz	r4, 3830 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3800:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    3804:	1b40      	subs	r0, r0, r5
    3806:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    380a:	2801      	cmp	r0, #1
    380c:	f171 0300 	sbcs.w	r3, r1, #0
    3810:	db11      	blt.n	3836 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3812:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3816:	2300      	movs	r3, #0
    3818:	4282      	cmp	r2, r0
    381a:	eb73 0401 	sbcs.w	r4, r3, r1
    381e:	da00      	bge.n	3822 <next_timeout+0x36>
    3820:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3822:	4b07      	ldr	r3, [pc, #28]	; (3840 <next_timeout+0x54>)
    3824:	691b      	ldr	r3, [r3, #16]
    3826:	b113      	cbz	r3, 382e <next_timeout+0x42>
    3828:	4298      	cmp	r0, r3
    382a:	bfa8      	it	ge
    382c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    382e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3830:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3834:	e7f5      	b.n	3822 <next_timeout+0x36>
    3836:	2000      	movs	r0, #0
    3838:	e7f3      	b.n	3822 <next_timeout+0x36>
    383a:	bf00      	nop
    383c:	20000058 	.word	0x20000058
    3840:	20000934 	.word	0x20000934

00003844 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3844:	f1b3 3fff 	cmp.w	r3, #4294967295
    3848:	bf08      	it	eq
    384a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    384e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3852:	4604      	mov	r4, r0
    3854:	4692      	mov	sl, r2
    3856:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3858:	d073      	beq.n	3942 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    385a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    385c:	f04f 0320 	mov.w	r3, #32
    3860:	f3ef 8511 	mrs	r5, BASEPRI
    3864:	f383 8811 	msr	BASEPRI, r3
    3868:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    386c:	f06f 0301 	mvn.w	r3, #1
    3870:	ebb3 080a 	subs.w	r8, r3, sl
    3874:	f04f 32ff 	mov.w	r2, #4294967295
    3878:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    387c:	f1b8 0f00 	cmp.w	r8, #0
    3880:	f179 0100 	sbcs.w	r1, r9, #0
    3884:	db1c      	blt.n	38c0 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3886:	4830      	ldr	r0, [pc, #192]	; (3948 <z_add_timeout+0x104>)
    3888:	e9d0 1000 	ldrd	r1, r0, [r0]
    388c:	1a5b      	subs	r3, r3, r1
    388e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    3892:	ebb3 060a 	subs.w	r6, r3, sl
    3896:	eb62 070b 	sbc.w	r7, r2, fp
    389a:	2e01      	cmp	r6, #1
    389c:	f177 0300 	sbcs.w	r3, r7, #0
    38a0:	bfbc      	itt	lt
    38a2:	2601      	movlt	r6, #1
    38a4:	2700      	movlt	r7, #0
    38a6:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    38aa:	4a28      	ldr	r2, [pc, #160]	; (394c <z_add_timeout+0x108>)
    38ac:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    38b0:	4293      	cmp	r3, r2
    38b2:	d11e      	bne.n	38f2 <z_add_timeout+0xae>
	node->prev = tail;
    38b4:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    38b8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    38bc:	6054      	str	r4, [r2, #4]
}
    38be:	e02d      	b.n	391c <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    38c0:	f7ff ff70 	bl	37a4 <elapsed>
    38c4:	f11a 0301 	adds.w	r3, sl, #1
    38c8:	9300      	str	r3, [sp, #0]
    38ca:	f14b 0300 	adc.w	r3, fp, #0
    38ce:	9301      	str	r3, [sp, #4]
    38d0:	e9dd 2300 	ldrd	r2, r3, [sp]
    38d4:	1812      	adds	r2, r2, r0
    38d6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    38da:	e9c4 2304 	strd	r2, r3, [r4, #16]
    38de:	e7e4      	b.n	38aa <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    38e0:	ebb6 0008 	subs.w	r0, r6, r8
    38e4:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    38e8:	4563      	cmp	r3, ip
    38ea:	e9c4 0104 	strd	r0, r1, [r4, #16]
    38ee:	d0e1      	beq.n	38b4 <z_add_timeout+0x70>
    38f0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    38f2:	2b00      	cmp	r3, #0
    38f4:	d0de      	beq.n	38b4 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    38f6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    38fa:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    38fe:	4546      	cmp	r6, r8
    3900:	eb77 0109 	sbcs.w	r1, r7, r9
    3904:	daec      	bge.n	38e0 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    3906:	ebb8 0006 	subs.w	r0, r8, r6
    390a:	eb69 0107 	sbc.w	r1, r9, r7
    390e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    3912:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    3914:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    3918:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    391a:	605c      	str	r4, [r3, #4]
	return list->head == list;
    391c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    391e:	4293      	cmp	r3, r2
    3920:	d00b      	beq.n	393a <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3922:	429c      	cmp	r4, r3
    3924:	d109      	bne.n	393a <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3926:	f7ff ff61 	bl	37ec <next_timeout>

			if (next_time == 0 ||
    392a:	b118      	cbz	r0, 3934 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    392c:	4b08      	ldr	r3, [pc, #32]	; (3950 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    392e:	691b      	ldr	r3, [r3, #16]
    3930:	4283      	cmp	r3, r0
    3932:	d002      	beq.n	393a <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    3934:	2100      	movs	r1, #0
    3936:	f7fd fd65 	bl	1404 <sys_clock_set_timeout>
	__asm__ volatile(
    393a:	f385 8811 	msr	BASEPRI, r5
    393e:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3942:	b003      	add	sp, #12
    3944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3948:	20000210 	.word	0x20000210
    394c:	20000058 	.word	0x20000058
    3950:	20000934 	.word	0x20000934

00003954 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3958:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    395a:	f7ff fd19 	bl	3390 <z_time_slice>
	__asm__ volatile(
    395e:	f04f 0320 	mov.w	r3, #32
    3962:	f3ef 8411 	mrs	r4, BASEPRI
    3966:	f383 8811 	msr	BASEPRI, r3
    396a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    396e:	4d2c      	ldr	r5, [pc, #176]	; (3a20 <sys_clock_announce+0xcc>)
    3970:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3a24 <sys_clock_announce+0xd0>
	return list->head == list;
    3974:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 3a28 <sys_clock_announce+0xd4>
    3978:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    397a:	4651      	mov	r1, sl
    397c:	f8d5 c000 	ldr.w	ip, [r5]
    3980:	f8db 0000 	ldr.w	r0, [fp]
    3984:	4662      	mov	r2, ip
    3986:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3988:	4558      	cmp	r0, fp
    398a:	e9da 8900 	ldrd	r8, r9, [sl]
    398e:	e9cd 2300 	strd	r2, r3, [sp]
    3992:	d00d      	beq.n	39b0 <sys_clock_announce+0x5c>
    3994:	b160      	cbz	r0, 39b0 <sys_clock_announce+0x5c>
    3996:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    399a:	45b4      	cmp	ip, r6
    399c:	41bb      	sbcs	r3, r7
    399e:	da1e      	bge.n	39de <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    39a0:	9b00      	ldr	r3, [sp, #0]
    39a2:	ebb6 0c03 	subs.w	ip, r6, r3
    39a6:	9b01      	ldr	r3, [sp, #4]
    39a8:	eb67 0603 	sbc.w	r6, r7, r3
    39ac:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    39b0:	9b00      	ldr	r3, [sp, #0]
    39b2:	eb13 0208 	adds.w	r2, r3, r8
    39b6:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    39b8:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    39bc:	eb43 0309 	adc.w	r3, r3, r9
    39c0:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    39c4:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    39c6:	f7ff ff11 	bl	37ec <next_timeout>
    39ca:	4631      	mov	r1, r6
    39cc:	f7fd fd1a 	bl	1404 <sys_clock_set_timeout>
	__asm__ volatile(
    39d0:	f384 8811 	msr	BASEPRI, r4
    39d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    39d8:	b003      	add	sp, #12
    39da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    39de:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    39e2:	f04f 0200 	mov.w	r2, #0
    39e6:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    39ea:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    39ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    39f2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    39f6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    39fa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    39fc:	f7ff fedc 	bl	37b8 <remove_timeout>
    3a00:	f384 8811 	msr	BASEPRI, r4
    3a04:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3a08:	6883      	ldr	r3, [r0, #8]
    3a0a:	4798      	blx	r3
	__asm__ volatile(
    3a0c:	f04f 0320 	mov.w	r3, #32
    3a10:	f3ef 8411 	mrs	r4, BASEPRI
    3a14:	f383 8811 	msr	BASEPRI, r3
    3a18:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    3a1c:	4901      	ldr	r1, [pc, #4]	; (3a24 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3a1e:	e7ad      	b.n	397c <sys_clock_announce+0x28>
    3a20:	20000970 	.word	0x20000970
    3a24:	20000210 	.word	0x20000210
    3a28:	20000058 	.word	0x20000058

00003a2c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3a2c:	b510      	push	{r4, lr}
    3a2e:	f04f 0320 	mov.w	r3, #32
    3a32:	f3ef 8411 	mrs	r4, BASEPRI
    3a36:	f383 8811 	msr	BASEPRI, r3
    3a3a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    3a3e:	f7fd fd13 	bl	1468 <sys_clock_elapsed>
    3a42:	4b06      	ldr	r3, [pc, #24]	; (3a5c <sys_clock_tick_get+0x30>)
    3a44:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a48:	1812      	adds	r2, r2, r0
    3a4a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    3a4e:	f384 8811 	msr	BASEPRI, r4
    3a52:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3a56:	4610      	mov	r0, r2
    3a58:	4619      	mov	r1, r3
    3a5a:	bd10      	pop	{r4, pc}
    3a5c:	20000210 	.word	0x20000210

00003a60 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3a60:	4a02      	ldr	r2, [pc, #8]	; (3a6c <boot_banner+0xc>)
    3a62:	4903      	ldr	r1, [pc, #12]	; (3a70 <boot_banner+0x10>)
    3a64:	4803      	ldr	r0, [pc, #12]	; (3a74 <boot_banner+0x14>)
    3a66:	f000 ba07 	b.w	3e78 <printk>
    3a6a:	bf00      	nop
    3a6c:	00004d75 	.word	0x00004d75
    3a70:	00004d42 	.word	0x00004d42
    3a74:	00004d4f 	.word	0x00004d4f

00003a78 <nrf_cc3xx_platform_init_no_rng>:
    3a78:	b510      	push	{r4, lr}
    3a7a:	4c0a      	ldr	r4, [pc, #40]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a7c:	6823      	ldr	r3, [r4, #0]
    3a7e:	b11b      	cbz	r3, 3a88 <nrf_cc3xx_platform_init_no_rng+0x10>
    3a80:	2301      	movs	r3, #1
    3a82:	6023      	str	r3, [r4, #0]
    3a84:	2000      	movs	r0, #0
    3a86:	bd10      	pop	{r4, pc}
    3a88:	f000 f8d6 	bl	3c38 <CC_LibInitNoRng>
    3a8c:	2800      	cmp	r0, #0
    3a8e:	d0f7      	beq.n	3a80 <nrf_cc3xx_platform_init_no_rng+0x8>
    3a90:	3801      	subs	r0, #1
    3a92:	2806      	cmp	r0, #6
    3a94:	d803      	bhi.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3a96:	4b04      	ldr	r3, [pc, #16]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a98:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3a9c:	bd10      	pop	{r4, pc}
    3a9e:	4803      	ldr	r0, [pc, #12]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3aa0:	bd10      	pop	{r4, pc}
    3aa2:	bf00      	nop
    3aa4:	20000974 	.word	0x20000974
    3aa8:	00004bd8 	.word	0x00004bd8
    3aac:	ffff8ffe 	.word	0xffff8ffe

00003ab0 <nrf_cc3xx_platform_abort>:
    3ab0:	f3bf 8f4f 	dsb	sy
    3ab4:	4905      	ldr	r1, [pc, #20]	; (3acc <nrf_cc3xx_platform_abort+0x1c>)
    3ab6:	4b06      	ldr	r3, [pc, #24]	; (3ad0 <nrf_cc3xx_platform_abort+0x20>)
    3ab8:	68ca      	ldr	r2, [r1, #12]
    3aba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3abe:	4313      	orrs	r3, r2
    3ac0:	60cb      	str	r3, [r1, #12]
    3ac2:	f3bf 8f4f 	dsb	sy
    3ac6:	bf00      	nop
    3ac8:	e7fd      	b.n	3ac6 <nrf_cc3xx_platform_abort+0x16>
    3aca:	bf00      	nop
    3acc:	e000ed00 	.word	0xe000ed00
    3ad0:	05fa0004 	.word	0x05fa0004

00003ad4 <CC_PalAbort>:
    3ad4:	b4f0      	push	{r4, r5, r6, r7}
    3ad6:	4f09      	ldr	r7, [pc, #36]	; (3afc <CC_PalAbort+0x28>)
    3ad8:	4e09      	ldr	r6, [pc, #36]	; (3b00 <CC_PalAbort+0x2c>)
    3ada:	4c0a      	ldr	r4, [pc, #40]	; (3b04 <CC_PalAbort+0x30>)
    3adc:	4a0a      	ldr	r2, [pc, #40]	; (3b08 <CC_PalAbort+0x34>)
    3ade:	4d0b      	ldr	r5, [pc, #44]	; (3b0c <CC_PalAbort+0x38>)
    3ae0:	490b      	ldr	r1, [pc, #44]	; (3b10 <CC_PalAbort+0x3c>)
    3ae2:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    3ae6:	603b      	str	r3, [r7, #0]
    3ae8:	6852      	ldr	r2, [r2, #4]
    3aea:	6033      	str	r3, [r6, #0]
    3aec:	6023      	str	r3, [r4, #0]
    3aee:	2400      	movs	r4, #0
    3af0:	602b      	str	r3, [r5, #0]
    3af2:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    3af6:	bcf0      	pop	{r4, r5, r6, r7}
    3af8:	4710      	bx	r2
    3afa:	bf00      	nop
    3afc:	5002b400 	.word	0x5002b400
    3b00:	5002b404 	.word	0x5002b404
    3b04:	5002b408 	.word	0x5002b408
    3b08:	20000060 	.word	0x20000060
    3b0c:	5002b40c 	.word	0x5002b40c
    3b10:	5002a000 	.word	0x5002a000

00003b14 <nrf_cc3xx_platform_set_abort>:
    3b14:	e9d0 1200 	ldrd	r1, r2, [r0]
    3b18:	4b01      	ldr	r3, [pc, #4]	; (3b20 <nrf_cc3xx_platform_set_abort+0xc>)
    3b1a:	e9c3 1200 	strd	r1, r2, [r3]
    3b1e:	4770      	bx	lr
    3b20:	20000060 	.word	0x20000060

00003b24 <mutex_free>:
    3b24:	b510      	push	{r4, lr}
    3b26:	4604      	mov	r4, r0
    3b28:	b130      	cbz	r0, 3b38 <mutex_free+0x14>
    3b2a:	6863      	ldr	r3, [r4, #4]
    3b2c:	06db      	lsls	r3, r3, #27
    3b2e:	d502      	bpl.n	3b36 <mutex_free+0x12>
    3b30:	2300      	movs	r3, #0
    3b32:	6023      	str	r3, [r4, #0]
    3b34:	6063      	str	r3, [r4, #4]
    3b36:	bd10      	pop	{r4, pc}
    3b38:	4b02      	ldr	r3, [pc, #8]	; (3b44 <mutex_free+0x20>)
    3b3a:	4803      	ldr	r0, [pc, #12]	; (3b48 <mutex_free+0x24>)
    3b3c:	685b      	ldr	r3, [r3, #4]
    3b3e:	4798      	blx	r3
    3b40:	e7f3      	b.n	3b2a <mutex_free+0x6>
    3b42:	bf00      	nop
    3b44:	20000060 	.word	0x20000060
    3b48:	00004bf4 	.word	0x00004bf4

00003b4c <mutex_unlock>:
    3b4c:	b168      	cbz	r0, 3b6a <mutex_unlock+0x1e>
    3b4e:	6843      	ldr	r3, [r0, #4]
    3b50:	b13b      	cbz	r3, 3b62 <mutex_unlock+0x16>
    3b52:	06db      	lsls	r3, r3, #27
    3b54:	d507      	bpl.n	3b66 <mutex_unlock+0x1a>
    3b56:	f3bf 8f5f 	dmb	sy
    3b5a:	2300      	movs	r3, #0
    3b5c:	6003      	str	r3, [r0, #0]
    3b5e:	4618      	mov	r0, r3
    3b60:	4770      	bx	lr
    3b62:	4803      	ldr	r0, [pc, #12]	; (3b70 <mutex_unlock+0x24>)
    3b64:	4770      	bx	lr
    3b66:	4803      	ldr	r0, [pc, #12]	; (3b74 <mutex_unlock+0x28>)
    3b68:	4770      	bx	lr
    3b6a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3b6e:	4770      	bx	lr
    3b70:	ffff8fea 	.word	0xffff8fea
    3b74:	ffff8fe9 	.word	0xffff8fe9

00003b78 <mutex_init>:
    3b78:	b510      	push	{r4, lr}
    3b7a:	4604      	mov	r4, r0
    3b7c:	b120      	cbz	r0, 3b88 <mutex_init+0x10>
    3b7e:	2200      	movs	r2, #0
    3b80:	2311      	movs	r3, #17
    3b82:	6022      	str	r2, [r4, #0]
    3b84:	6063      	str	r3, [r4, #4]
    3b86:	bd10      	pop	{r4, pc}
    3b88:	4801      	ldr	r0, [pc, #4]	; (3b90 <mutex_init+0x18>)
    3b8a:	f7ff ffa3 	bl	3ad4 <CC_PalAbort>
    3b8e:	e7f6      	b.n	3b7e <mutex_init+0x6>
    3b90:	00004c1c 	.word	0x00004c1c

00003b94 <mutex_lock>:
    3b94:	b1c0      	cbz	r0, 3bc8 <mutex_lock+0x34>
    3b96:	6843      	ldr	r3, [r0, #4]
    3b98:	b1a3      	cbz	r3, 3bc4 <mutex_lock+0x30>
    3b9a:	06db      	lsls	r3, r3, #27
    3b9c:	d510      	bpl.n	3bc0 <mutex_lock+0x2c>
    3b9e:	2201      	movs	r2, #1
    3ba0:	f3bf 8f5b 	dmb	ish
    3ba4:	e850 3f00 	ldrex	r3, [r0]
    3ba8:	e840 2100 	strex	r1, r2, [r0]
    3bac:	2900      	cmp	r1, #0
    3bae:	d1f9      	bne.n	3ba4 <mutex_lock+0x10>
    3bb0:	f3bf 8f5b 	dmb	ish
    3bb4:	2b01      	cmp	r3, #1
    3bb6:	d0f3      	beq.n	3ba0 <mutex_lock+0xc>
    3bb8:	f3bf 8f5f 	dmb	sy
    3bbc:	2000      	movs	r0, #0
    3bbe:	4770      	bx	lr
    3bc0:	4803      	ldr	r0, [pc, #12]	; (3bd0 <mutex_lock+0x3c>)
    3bc2:	4770      	bx	lr
    3bc4:	4803      	ldr	r0, [pc, #12]	; (3bd4 <mutex_lock+0x40>)
    3bc6:	4770      	bx	lr
    3bc8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3bcc:	4770      	bx	lr
    3bce:	bf00      	nop
    3bd0:	ffff8fe9 	.word	0xffff8fe9
    3bd4:	ffff8fea 	.word	0xffff8fea

00003bd8 <nrf_cc3xx_platform_set_mutexes>:
    3bd8:	b570      	push	{r4, r5, r6, lr}
    3bda:	e9d0 2300 	ldrd	r2, r3, [r0]
    3bde:	4c13      	ldr	r4, [pc, #76]	; (3c2c <nrf_cc3xx_platform_set_mutexes+0x54>)
    3be0:	4d13      	ldr	r5, [pc, #76]	; (3c30 <nrf_cc3xx_platform_set_mutexes+0x58>)
    3be2:	e9c4 2300 	strd	r2, r3, [r4]
    3be6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    3bea:	e9c4 6302 	strd	r6, r3, [r4, #8]
    3bee:	4b11      	ldr	r3, [pc, #68]	; (3c34 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    3bf0:	6808      	ldr	r0, [r1, #0]
    3bf2:	6018      	str	r0, [r3, #0]
    3bf4:	6848      	ldr	r0, [r1, #4]
    3bf6:	6058      	str	r0, [r3, #4]
    3bf8:	6888      	ldr	r0, [r1, #8]
    3bfa:	6098      	str	r0, [r3, #8]
    3bfc:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    3c00:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    3c04:	60de      	str	r6, [r3, #12]
    3c06:	6118      	str	r0, [r3, #16]
    3c08:	06cb      	lsls	r3, r1, #27
    3c0a:	d50d      	bpl.n	3c28 <nrf_cc3xx_platform_set_mutexes+0x50>
    3c0c:	2300      	movs	r3, #0
    3c0e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    3c12:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    3c16:	f505 7088 	add.w	r0, r5, #272	; 0x110
    3c1a:	4790      	blx	r2
    3c1c:	6823      	ldr	r3, [r4, #0]
    3c1e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    3c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3c26:	4718      	bx	r3
    3c28:	bd70      	pop	{r4, r5, r6, pc}
    3c2a:	bf00      	nop
    3c2c:	20000070 	.word	0x20000070
    3c30:	20000da0 	.word	0x20000da0
    3c34:	20000080 	.word	0x20000080

00003c38 <CC_LibInitNoRng>:
    3c38:	b510      	push	{r4, lr}
    3c3a:	f000 f833 	bl	3ca4 <CC_HalInit>
    3c3e:	b120      	cbz	r0, 3c4a <CC_LibInitNoRng+0x12>
    3c40:	2403      	movs	r4, #3
    3c42:	f000 f867 	bl	3d14 <CC_PalTerminate>
    3c46:	4620      	mov	r0, r4
    3c48:	bd10      	pop	{r4, pc}
    3c4a:	f000 f835 	bl	3cb8 <CC_PalInit>
    3c4e:	b990      	cbnz	r0, 3c76 <CC_LibInitNoRng+0x3e>
    3c50:	f000 f8b0 	bl	3db4 <CC_PalPowerSaveModeSelect>
    3c54:	b990      	cbnz	r0, 3c7c <CC_LibInitNoRng+0x44>
    3c56:	4b0f      	ldr	r3, [pc, #60]	; (3c94 <CC_LibInitNoRng+0x5c>)
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	0e1b      	lsrs	r3, r3, #24
    3c5c:	2bf0      	cmp	r3, #240	; 0xf0
    3c5e:	d108      	bne.n	3c72 <CC_LibInitNoRng+0x3a>
    3c60:	4a0d      	ldr	r2, [pc, #52]	; (3c98 <CC_LibInitNoRng+0x60>)
    3c62:	4b0e      	ldr	r3, [pc, #56]	; (3c9c <CC_LibInitNoRng+0x64>)
    3c64:	6812      	ldr	r2, [r2, #0]
    3c66:	429a      	cmp	r2, r3
    3c68:	d00a      	beq.n	3c80 <CC_LibInitNoRng+0x48>
    3c6a:	2407      	movs	r4, #7
    3c6c:	f000 f81c 	bl	3ca8 <CC_HalTerminate>
    3c70:	e7e7      	b.n	3c42 <CC_LibInitNoRng+0xa>
    3c72:	2406      	movs	r4, #6
    3c74:	e7fa      	b.n	3c6c <CC_LibInitNoRng+0x34>
    3c76:	2404      	movs	r4, #4
    3c78:	4620      	mov	r0, r4
    3c7a:	bd10      	pop	{r4, pc}
    3c7c:	2400      	movs	r4, #0
    3c7e:	e7f5      	b.n	3c6c <CC_LibInitNoRng+0x34>
    3c80:	2001      	movs	r0, #1
    3c82:	f000 f897 	bl	3db4 <CC_PalPowerSaveModeSelect>
    3c86:	4604      	mov	r4, r0
    3c88:	2800      	cmp	r0, #0
    3c8a:	d1f7      	bne.n	3c7c <CC_LibInitNoRng+0x44>
    3c8c:	4b04      	ldr	r3, [pc, #16]	; (3ca0 <CC_LibInitNoRng+0x68>)
    3c8e:	6018      	str	r0, [r3, #0]
    3c90:	e7d9      	b.n	3c46 <CC_LibInitNoRng+0xe>
    3c92:	bf00      	nop
    3c94:	5002b928 	.word	0x5002b928
    3c98:	5002ba24 	.word	0x5002ba24
    3c9c:	20e00000 	.word	0x20e00000
    3ca0:	5002ba0c 	.word	0x5002ba0c

00003ca4 <CC_HalInit>:
    3ca4:	2000      	movs	r0, #0
    3ca6:	4770      	bx	lr

00003ca8 <CC_HalTerminate>:
    3ca8:	2000      	movs	r0, #0
    3caa:	4770      	bx	lr

00003cac <CC_HalMaskInterrupt>:
    3cac:	4b01      	ldr	r3, [pc, #4]	; (3cb4 <CC_HalMaskInterrupt+0x8>)
    3cae:	6018      	str	r0, [r3, #0]
    3cb0:	4770      	bx	lr
    3cb2:	bf00      	nop
    3cb4:	5002ba04 	.word	0x5002ba04

00003cb8 <CC_PalInit>:
    3cb8:	b510      	push	{r4, lr}
    3cba:	4811      	ldr	r0, [pc, #68]	; (3d00 <CC_PalInit+0x48>)
    3cbc:	f000 f848 	bl	3d50 <CC_PalMutexCreate>
    3cc0:	b100      	cbz	r0, 3cc4 <CC_PalInit+0xc>
    3cc2:	bd10      	pop	{r4, pc}
    3cc4:	480f      	ldr	r0, [pc, #60]	; (3d04 <CC_PalInit+0x4c>)
    3cc6:	f000 f843 	bl	3d50 <CC_PalMutexCreate>
    3cca:	2800      	cmp	r0, #0
    3ccc:	d1f9      	bne.n	3cc2 <CC_PalInit+0xa>
    3cce:	4c0e      	ldr	r4, [pc, #56]	; (3d08 <CC_PalInit+0x50>)
    3cd0:	4620      	mov	r0, r4
    3cd2:	f000 f83d 	bl	3d50 <CC_PalMutexCreate>
    3cd6:	2800      	cmp	r0, #0
    3cd8:	d1f3      	bne.n	3cc2 <CC_PalInit+0xa>
    3cda:	4b0c      	ldr	r3, [pc, #48]	; (3d0c <CC_PalInit+0x54>)
    3cdc:	480c      	ldr	r0, [pc, #48]	; (3d10 <CC_PalInit+0x58>)
    3cde:	601c      	str	r4, [r3, #0]
    3ce0:	f000 f836 	bl	3d50 <CC_PalMutexCreate>
    3ce4:	4601      	mov	r1, r0
    3ce6:	2800      	cmp	r0, #0
    3ce8:	d1eb      	bne.n	3cc2 <CC_PalInit+0xa>
    3cea:	f000 f82d 	bl	3d48 <CC_PalDmaInit>
    3cee:	4604      	mov	r4, r0
    3cf0:	b108      	cbz	r0, 3cf6 <CC_PalInit+0x3e>
    3cf2:	4620      	mov	r0, r4
    3cf4:	bd10      	pop	{r4, pc}
    3cf6:	f000 f83f 	bl	3d78 <CC_PalPowerSaveModeInit>
    3cfa:	4620      	mov	r0, r4
    3cfc:	e7fa      	b.n	3cf4 <CC_PalInit+0x3c>
    3cfe:	bf00      	nop
    3d00:	200000b8 	.word	0x200000b8
    3d04:	200000ac 	.word	0x200000ac
    3d08:	200000b4 	.word	0x200000b4
    3d0c:	200000bc 	.word	0x200000bc
    3d10:	200000b0 	.word	0x200000b0

00003d14 <CC_PalTerminate>:
    3d14:	b508      	push	{r3, lr}
    3d16:	4808      	ldr	r0, [pc, #32]	; (3d38 <CC_PalTerminate+0x24>)
    3d18:	f000 f824 	bl	3d64 <CC_PalMutexDestroy>
    3d1c:	4807      	ldr	r0, [pc, #28]	; (3d3c <CC_PalTerminate+0x28>)
    3d1e:	f000 f821 	bl	3d64 <CC_PalMutexDestroy>
    3d22:	4807      	ldr	r0, [pc, #28]	; (3d40 <CC_PalTerminate+0x2c>)
    3d24:	f000 f81e 	bl	3d64 <CC_PalMutexDestroy>
    3d28:	4806      	ldr	r0, [pc, #24]	; (3d44 <CC_PalTerminate+0x30>)
    3d2a:	f000 f81b 	bl	3d64 <CC_PalMutexDestroy>
    3d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3d32:	f000 b80b 	b.w	3d4c <CC_PalDmaTerminate>
    3d36:	bf00      	nop
    3d38:	200000b8 	.word	0x200000b8
    3d3c:	200000ac 	.word	0x200000ac
    3d40:	200000b4 	.word	0x200000b4
    3d44:	200000b0 	.word	0x200000b0

00003d48 <CC_PalDmaInit>:
    3d48:	2000      	movs	r0, #0
    3d4a:	4770      	bx	lr

00003d4c <CC_PalDmaTerminate>:
    3d4c:	4770      	bx	lr
    3d4e:	bf00      	nop

00003d50 <CC_PalMutexCreate>:
    3d50:	b508      	push	{r3, lr}
    3d52:	4b03      	ldr	r3, [pc, #12]	; (3d60 <CC_PalMutexCreate+0x10>)
    3d54:	6802      	ldr	r2, [r0, #0]
    3d56:	681b      	ldr	r3, [r3, #0]
    3d58:	6810      	ldr	r0, [r2, #0]
    3d5a:	4798      	blx	r3
    3d5c:	2000      	movs	r0, #0
    3d5e:	bd08      	pop	{r3, pc}
    3d60:	20000070 	.word	0x20000070

00003d64 <CC_PalMutexDestroy>:
    3d64:	b508      	push	{r3, lr}
    3d66:	4b03      	ldr	r3, [pc, #12]	; (3d74 <CC_PalMutexDestroy+0x10>)
    3d68:	6802      	ldr	r2, [r0, #0]
    3d6a:	685b      	ldr	r3, [r3, #4]
    3d6c:	6810      	ldr	r0, [r2, #0]
    3d6e:	4798      	blx	r3
    3d70:	2000      	movs	r0, #0
    3d72:	bd08      	pop	{r3, pc}
    3d74:	20000070 	.word	0x20000070

00003d78 <CC_PalPowerSaveModeInit>:
    3d78:	b570      	push	{r4, r5, r6, lr}
    3d7a:	4c09      	ldr	r4, [pc, #36]	; (3da0 <CC_PalPowerSaveModeInit+0x28>)
    3d7c:	4d09      	ldr	r5, [pc, #36]	; (3da4 <CC_PalPowerSaveModeInit+0x2c>)
    3d7e:	6920      	ldr	r0, [r4, #16]
    3d80:	68ab      	ldr	r3, [r5, #8]
    3d82:	4798      	blx	r3
    3d84:	b118      	cbz	r0, 3d8e <CC_PalPowerSaveModeInit+0x16>
    3d86:	4b08      	ldr	r3, [pc, #32]	; (3da8 <CC_PalPowerSaveModeInit+0x30>)
    3d88:	4808      	ldr	r0, [pc, #32]	; (3dac <CC_PalPowerSaveModeInit+0x34>)
    3d8a:	685b      	ldr	r3, [r3, #4]
    3d8c:	4798      	blx	r3
    3d8e:	4a08      	ldr	r2, [pc, #32]	; (3db0 <CC_PalPowerSaveModeInit+0x38>)
    3d90:	68eb      	ldr	r3, [r5, #12]
    3d92:	6920      	ldr	r0, [r4, #16]
    3d94:	2100      	movs	r1, #0
    3d96:	6011      	str	r1, [r2, #0]
    3d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d9c:	4718      	bx	r3
    3d9e:	bf00      	nop
    3da0:	20000080 	.word	0x20000080
    3da4:	20000070 	.word	0x20000070
    3da8:	20000060 	.word	0x20000060
    3dac:	00004c40 	.word	0x00004c40
    3db0:	20000988 	.word	0x20000988

00003db4 <CC_PalPowerSaveModeSelect>:
    3db4:	b570      	push	{r4, r5, r6, lr}
    3db6:	4d1a      	ldr	r5, [pc, #104]	; (3e20 <CC_PalPowerSaveModeSelect+0x6c>)
    3db8:	4e1a      	ldr	r6, [pc, #104]	; (3e24 <CC_PalPowerSaveModeSelect+0x70>)
    3dba:	4604      	mov	r4, r0
    3dbc:	68b2      	ldr	r2, [r6, #8]
    3dbe:	6928      	ldr	r0, [r5, #16]
    3dc0:	4790      	blx	r2
    3dc2:	b9f0      	cbnz	r0, 3e02 <CC_PalPowerSaveModeSelect+0x4e>
    3dc4:	b15c      	cbz	r4, 3dde <CC_PalPowerSaveModeSelect+0x2a>
    3dc6:	4c18      	ldr	r4, [pc, #96]	; (3e28 <CC_PalPowerSaveModeSelect+0x74>)
    3dc8:	6823      	ldr	r3, [r4, #0]
    3dca:	b1ab      	cbz	r3, 3df8 <CC_PalPowerSaveModeSelect+0x44>
    3dcc:	2b01      	cmp	r3, #1
    3dce:	d01a      	beq.n	3e06 <CC_PalPowerSaveModeSelect+0x52>
    3dd0:	3b01      	subs	r3, #1
    3dd2:	6023      	str	r3, [r4, #0]
    3dd4:	6928      	ldr	r0, [r5, #16]
    3dd6:	68f3      	ldr	r3, [r6, #12]
    3dd8:	4798      	blx	r3
    3dda:	2000      	movs	r0, #0
    3ddc:	bd70      	pop	{r4, r5, r6, pc}
    3dde:	4c12      	ldr	r4, [pc, #72]	; (3e28 <CC_PalPowerSaveModeSelect+0x74>)
    3de0:	6821      	ldr	r1, [r4, #0]
    3de2:	b939      	cbnz	r1, 3df4 <CC_PalPowerSaveModeSelect+0x40>
    3de4:	4b11      	ldr	r3, [pc, #68]	; (3e2c <CC_PalPowerSaveModeSelect+0x78>)
    3de6:	4a12      	ldr	r2, [pc, #72]	; (3e30 <CC_PalPowerSaveModeSelect+0x7c>)
    3de8:	2001      	movs	r0, #1
    3dea:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    3dee:	6813      	ldr	r3, [r2, #0]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d1fc      	bne.n	3dee <CC_PalPowerSaveModeSelect+0x3a>
    3df4:	3101      	adds	r1, #1
    3df6:	6021      	str	r1, [r4, #0]
    3df8:	68f3      	ldr	r3, [r6, #12]
    3dfa:	6928      	ldr	r0, [r5, #16]
    3dfc:	4798      	blx	r3
    3dfe:	2000      	movs	r0, #0
    3e00:	bd70      	pop	{r4, r5, r6, pc}
    3e02:	480c      	ldr	r0, [pc, #48]	; (3e34 <CC_PalPowerSaveModeSelect+0x80>)
    3e04:	bd70      	pop	{r4, r5, r6, pc}
    3e06:	4a0a      	ldr	r2, [pc, #40]	; (3e30 <CC_PalPowerSaveModeSelect+0x7c>)
    3e08:	6813      	ldr	r3, [r2, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d1fc      	bne.n	3e08 <CC_PalPowerSaveModeSelect+0x54>
    3e0e:	4a07      	ldr	r2, [pc, #28]	; (3e2c <CC_PalPowerSaveModeSelect+0x78>)
    3e10:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    3e14:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    3e18:	f7ff ff48 	bl	3cac <CC_HalMaskInterrupt>
    3e1c:	6823      	ldr	r3, [r4, #0]
    3e1e:	e7d7      	b.n	3dd0 <CC_PalPowerSaveModeSelect+0x1c>
    3e20:	20000080 	.word	0x20000080
    3e24:	20000070 	.word	0x20000070
    3e28:	20000988 	.word	0x20000988
    3e2c:	5002a000 	.word	0x5002a000
    3e30:	5002b910 	.word	0x5002b910
    3e34:	ffff8fe9 	.word	0xffff8fe9

00003e38 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3e38:	4603      	mov	r3, r0
    3e3a:	b158      	cbz	r0, 3e54 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3e3c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3e3e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3e42:	2a01      	cmp	r2, #1
    3e44:	d003      	beq.n	3e4e <sys_notify_validate+0x16>
    3e46:	2a03      	cmp	r2, #3
    3e48:	d104      	bne.n	3e54 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3e4a:	6802      	ldr	r2, [r0, #0]
    3e4c:	b112      	cbz	r2, 3e54 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3e4e:	2000      	movs	r0, #0
    3e50:	6098      	str	r0, [r3, #8]
    3e52:	4770      	bx	lr
		return -EINVAL;
    3e54:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3e58:	4770      	bx	lr

00003e5a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3e5a:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3e5c:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    3e5e:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    3e62:	2a03      	cmp	r2, #3
    3e64:	f04f 0200 	mov.w	r2, #0
{
    3e68:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3e6a:	bf0c      	ite	eq
    3e6c:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    3e6e:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3e70:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3e72:	4770      	bx	lr

00003e74 <arch_printk_char_out>:
}
    3e74:	2000      	movs	r0, #0
    3e76:	4770      	bx	lr

00003e78 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    3e78:	b40f      	push	{r0, r1, r2, r3}
    3e7a:	b507      	push	{r0, r1, r2, lr}
    3e7c:	a904      	add	r1, sp, #16
    3e7e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3e82:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    3e84:	f7fc faf4 	bl	470 <vprintk>
	}
	va_end(ap);
}
    3e88:	b003      	add	sp, #12
    3e8a:	f85d eb04 	ldr.w	lr, [sp], #4
    3e8e:	b004      	add	sp, #16
    3e90:	4770      	bx	lr

00003e92 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e92:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3e94:	f013 0307 	ands.w	r3, r3, #7
    3e98:	d105      	bne.n	3ea6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3e9a:	6803      	ldr	r3, [r0, #0]
    3e9c:	2b00      	cmp	r3, #0
		evt = EVT_START;
    3e9e:	bf0c      	ite	eq
    3ea0:	2000      	moveq	r0, #0
    3ea2:	2003      	movne	r0, #3
    3ea4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3ea6:	2b02      	cmp	r3, #2
    3ea8:	d105      	bne.n	3eb6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3eaa:	8b43      	ldrh	r3, [r0, #26]
    3eac:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    3eae:	bf14      	ite	ne
    3eb0:	2000      	movne	r0, #0
    3eb2:	2004      	moveq	r0, #4
    3eb4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3eb6:	2b01      	cmp	r3, #1
    3eb8:	d105      	bne.n	3ec6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3eba:	6803      	ldr	r3, [r0, #0]
    3ebc:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    3ebe:	bf0c      	ite	eq
    3ec0:	2000      	moveq	r0, #0
    3ec2:	2005      	movne	r0, #5
    3ec4:	4770      	bx	lr
	int evt = EVT_NOP;
    3ec6:	2000      	movs	r0, #0
}
    3ec8:	4770      	bx	lr

00003eca <notify_one>:
{
    3eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ece:	460d      	mov	r5, r1
    3ed0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3ed2:	4619      	mov	r1, r3
    3ed4:	1d28      	adds	r0, r5, #4
{
    3ed6:	4690      	mov	r8, r2
    3ed8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3eda:	f7ff ffbe 	bl	3e5a <sys_notify_finalize>
	if (cb) {
    3ede:	4604      	mov	r4, r0
    3ee0:	b138      	cbz	r0, 3ef2 <notify_one+0x28>
		cb(mgr, cli, state, res);
    3ee2:	4633      	mov	r3, r6
    3ee4:	4642      	mov	r2, r8
    3ee6:	4629      	mov	r1, r5
    3ee8:	4638      	mov	r0, r7
    3eea:	46a4      	mov	ip, r4
}
    3eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    3ef0:	4760      	bx	ip
}
    3ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003ef6 <transition_complete>:
{
    3ef6:	b410      	push	{r4}
	__asm__ volatile(
    3ef8:	f04f 0420 	mov.w	r4, #32
    3efc:	f3ef 8211 	mrs	r2, BASEPRI
    3f00:	f384 8811 	msr	BASEPRI, r4
    3f04:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3f08:	6141      	str	r1, [r0, #20]
}
    3f0a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3f0c:	2101      	movs	r1, #1
    3f0e:	f7fc babd 	b.w	48c <process_event>

00003f12 <validate_args>:
{
    3f12:	b510      	push	{r4, lr}
    3f14:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3f16:	b140      	cbz	r0, 3f2a <validate_args+0x18>
    3f18:	b139      	cbz	r1, 3f2a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    3f1a:	1d08      	adds	r0, r1, #4
    3f1c:	f7ff ff8c 	bl	3e38 <sys_notify_validate>
	if ((rv == 0)
    3f20:	b928      	cbnz	r0, 3f2e <validate_args+0x1c>
	    && ((cli->notify.flags
    3f22:	68a3      	ldr	r3, [r4, #8]
    3f24:	f033 0303 	bics.w	r3, r3, #3
    3f28:	d001      	beq.n	3f2e <validate_args+0x1c>
		rv = -EINVAL;
    3f2a:	f06f 0015 	mvn.w	r0, #21
}
    3f2e:	bd10      	pop	{r4, pc}

00003f30 <onoff_manager_init>:
{
    3f30:	b538      	push	{r3, r4, r5, lr}
    3f32:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3f34:	4605      	mov	r5, r0
    3f36:	b158      	cbz	r0, 3f50 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3f38:	b151      	cbz	r1, 3f50 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3f3a:	680b      	ldr	r3, [r1, #0]
    3f3c:	b143      	cbz	r3, 3f50 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3f3e:	684b      	ldr	r3, [r1, #4]
    3f40:	b133      	cbz	r3, 3f50 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3f42:	221c      	movs	r2, #28
    3f44:	2100      	movs	r1, #0
    3f46:	f000 f99c 	bl	4282 <memset>
    3f4a:	612c      	str	r4, [r5, #16]
	return 0;
    3f4c:	2000      	movs	r0, #0
}
    3f4e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3f50:	f06f 0015 	mvn.w	r0, #21
    3f54:	e7fb      	b.n	3f4e <onoff_manager_init+0x1e>

00003f56 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3f56:	b570      	push	{r4, r5, r6, lr}
    3f58:	4604      	mov	r4, r0
    3f5a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3f5c:	f7ff ffd9 	bl	3f12 <validate_args>

	if (rv < 0) {
    3f60:	1e05      	subs	r5, r0, #0
    3f62:	db31      	blt.n	3fc8 <onoff_request+0x72>
    3f64:	f04f 0320 	mov.w	r3, #32
    3f68:	f3ef 8111 	mrs	r1, BASEPRI
    3f6c:	f383 8811 	msr	BASEPRI, r3
    3f70:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3f74:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3f76:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3f78:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3f7c:	42ab      	cmp	r3, r5
    3f7e:	f000 0207 	and.w	r2, r0, #7
    3f82:	d02e      	beq.n	3fe2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3f84:	2a02      	cmp	r2, #2
    3f86:	d10e      	bne.n	3fa6 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3f88:	3301      	adds	r3, #1
    3f8a:	8363      	strh	r3, [r4, #26]
	rv = state;
    3f8c:	4615      	mov	r5, r2
		notify = true;
    3f8e:	2301      	movs	r3, #1
	__asm__ volatile(
    3f90:	f381 8811 	msr	BASEPRI, r1
    3f94:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3f98:	b1b3      	cbz	r3, 3fc8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    3f9a:	2300      	movs	r3, #0
    3f9c:	4631      	mov	r1, r6
    3f9e:	4620      	mov	r0, r4
    3fa0:	f7ff ff93 	bl	3eca <notify_one>
    3fa4:	e010      	b.n	3fc8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    3fa6:	0783      	lsls	r3, r0, #30
    3fa8:	d001      	beq.n	3fae <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    3faa:	2a06      	cmp	r2, #6
    3fac:	d10e      	bne.n	3fcc <onoff_request+0x76>
	parent->next = child;
    3fae:	2300      	movs	r3, #0
    3fb0:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    3fb2:	6863      	ldr	r3, [r4, #4]
    3fb4:	b993      	cbnz	r3, 3fdc <onoff_request+0x86>
	list->head = node;
    3fb6:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3fba:	4615      	mov	r5, r2
    3fbc:	b962      	cbnz	r2, 3fd8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3fbe:	460a      	mov	r2, r1
    3fc0:	4620      	mov	r0, r4
    3fc2:	2102      	movs	r1, #2
    3fc4:	f7fc fa62 	bl	48c <process_event>
		}
	}

	return rv;
}
    3fc8:	4628      	mov	r0, r5
    3fca:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    3fcc:	2a05      	cmp	r2, #5
    3fce:	bf0c      	ite	eq
    3fd0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    3fd4:	f06f 0504 	mvnne.w	r5, #4
    3fd8:	2300      	movs	r3, #0
    3fda:	e7d9      	b.n	3f90 <onoff_request+0x3a>
	parent->next = child;
    3fdc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    3fde:	6066      	str	r6, [r4, #4]
}
    3fe0:	e7eb      	b.n	3fba <onoff_request+0x64>
		rv = -EAGAIN;
    3fe2:	f06f 050a 	mvn.w	r5, #10
    3fe6:	e7f7      	b.n	3fd8 <onoff_request+0x82>

00003fe8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3fe8:	4604      	mov	r4, r0
    3fea:	b508      	push	{r3, lr}
    3fec:	4608      	mov	r0, r1
    3fee:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3ff0:	461a      	mov	r2, r3
    3ff2:	47a0      	blx	r4
	return z_impl_k_current_get();
    3ff4:	f7ff fb64 	bl	36c0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3ff8:	f7fd fdb6 	bl	1b68 <z_impl_k_thread_abort>

00003ffc <encode_uint>:
{
    3ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4000:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    4002:	78d3      	ldrb	r3, [r2, #3]
{
    4004:	4614      	mov	r4, r2
	switch (specifier) {
    4006:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4008:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    400c:	4606      	mov	r6, r0
    400e:	460f      	mov	r7, r1
    4010:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    4012:	d02d      	beq.n	4070 <encode_uint+0x74>
    4014:	d828      	bhi.n	4068 <encode_uint+0x6c>
		return 16;
    4016:	2b58      	cmp	r3, #88	; 0x58
    4018:	bf14      	ite	ne
    401a:	250a      	movne	r5, #10
    401c:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    401e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    4022:	46aa      	mov	sl, r5
    4024:	f04f 0b00 	mov.w	fp, #0
    4028:	4652      	mov	r2, sl
    402a:	465b      	mov	r3, fp
    402c:	4630      	mov	r0, r6
    402e:	4639      	mov	r1, r7
    4030:	f7fc f866 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4034:	2a09      	cmp	r2, #9
    4036:	b2d3      	uxtb	r3, r2
    4038:	d81f      	bhi.n	407a <encode_uint+0x7e>
    403a:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    403c:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    403e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    4040:	bf08      	it	eq
    4042:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4044:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    4048:	d301      	bcc.n	404e <encode_uint+0x52>
    404a:	45c8      	cmp	r8, r9
    404c:	d812      	bhi.n	4074 <encode_uint+0x78>
	if (conv->flag_hash) {
    404e:	7823      	ldrb	r3, [r4, #0]
    4050:	069b      	lsls	r3, r3, #26
    4052:	d505      	bpl.n	4060 <encode_uint+0x64>
		if (radix == 8) {
    4054:	2d08      	cmp	r5, #8
    4056:	d116      	bne.n	4086 <encode_uint+0x8a>
			conv->altform_0 = true;
    4058:	78a3      	ldrb	r3, [r4, #2]
    405a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    405e:	70a3      	strb	r3, [r4, #2]
}
    4060:	4640      	mov	r0, r8
    4062:	b003      	add	sp, #12
    4064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4068:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    406c:	2b70      	cmp	r3, #112	; 0x70
    406e:	e7d3      	b.n	4018 <encode_uint+0x1c>
	switch (specifier) {
    4070:	2508      	movs	r5, #8
    4072:	e7d4      	b.n	401e <encode_uint+0x22>
		value /= radix;
    4074:	4606      	mov	r6, r0
    4076:	460f      	mov	r7, r1
    4078:	e7d6      	b.n	4028 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    407a:	9a01      	ldr	r2, [sp, #4]
    407c:	2a19      	cmp	r2, #25
    407e:	bf94      	ite	ls
    4080:	3337      	addls	r3, #55	; 0x37
    4082:	3357      	addhi	r3, #87	; 0x57
    4084:	e7da      	b.n	403c <encode_uint+0x40>
		} else if (radix == 16) {
    4086:	2d10      	cmp	r5, #16
    4088:	d1ea      	bne.n	4060 <encode_uint+0x64>
			conv->altform_0c = true;
    408a:	78a3      	ldrb	r3, [r4, #2]
    408c:	f043 0310 	orr.w	r3, r3, #16
    4090:	e7e5      	b.n	405e <encode_uint+0x62>

00004092 <outs>:
{
    4092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4096:	4607      	mov	r7, r0
    4098:	4688      	mov	r8, r1
    409a:	4615      	mov	r5, r2
    409c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    409e:	4614      	mov	r4, r2
    40a0:	42b4      	cmp	r4, r6
    40a2:	eba4 0005 	sub.w	r0, r4, r5
    40a6:	d302      	bcc.n	40ae <outs+0x1c>
    40a8:	b93e      	cbnz	r6, 40ba <outs+0x28>
    40aa:	7823      	ldrb	r3, [r4, #0]
    40ac:	b12b      	cbz	r3, 40ba <outs+0x28>
		int rc = out((int)*sp++, ctx);
    40ae:	f814 0b01 	ldrb.w	r0, [r4], #1
    40b2:	4641      	mov	r1, r8
    40b4:	47b8      	blx	r7
		if (rc < 0) {
    40b6:	2800      	cmp	r0, #0
    40b8:	daf2      	bge.n	40a0 <outs+0xe>
}
    40ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000040be <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    40be:	4770      	bx	lr

000040c0 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    40c0:	2200      	movs	r2, #0
    40c2:	e9c0 2200 	strd	r2, r2, [r0]
    40c6:	6082      	str	r2, [r0, #8]
}
    40c8:	4770      	bx	lr

000040ca <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    40ca:	6902      	ldr	r2, [r0, #16]
    40cc:	b2cb      	uxtb	r3, r1
    40ce:	210c      	movs	r1, #12
    40d0:	fb03 2101 	mla	r1, r3, r1, r2
    40d4:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    40d6:	f000 0007 	and.w	r0, r0, #7
    40da:	4770      	bx	lr

000040dc <set_off_state>:
	__asm__ volatile(
    40dc:	f04f 0320 	mov.w	r3, #32
    40e0:	f3ef 8211 	mrs	r2, BASEPRI
    40e4:	f383 8811 	msr	BASEPRI, r3
    40e8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    40ec:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    40ee:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    40f2:	d001      	beq.n	40f8 <set_off_state+0x1c>
    40f4:	428b      	cmp	r3, r1
    40f6:	d107      	bne.n	4108 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    40f8:	2301      	movs	r3, #1
    40fa:	6003      	str	r3, [r0, #0]
	int err = 0;
    40fc:	2000      	movs	r0, #0
	__asm__ volatile(
    40fe:	f382 8811 	msr	BASEPRI, r2
    4102:	f3bf 8f6f 	isb	sy
}
    4106:	4770      	bx	lr
		err = -EPERM;
    4108:	f04f 30ff 	mov.w	r0, #4294967295
    410c:	e7f7      	b.n	40fe <set_off_state+0x22>

0000410e <set_starting_state>:
{
    410e:	b510      	push	{r4, lr}
	__asm__ volatile(
    4110:	f04f 0320 	mov.w	r3, #32
    4114:	f3ef 8211 	mrs	r2, BASEPRI
    4118:	f383 8811 	msr	BASEPRI, r3
    411c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4120:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4122:	f003 0407 	and.w	r4, r3, #7
    4126:	2c01      	cmp	r4, #1
    4128:	d106      	bne.n	4138 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    412a:	6001      	str	r1, [r0, #0]
	int err = 0;
    412c:	2000      	movs	r0, #0
	__asm__ volatile(
    412e:	f382 8811 	msr	BASEPRI, r2
    4132:	f3bf 8f6f 	isb	sy
}
    4136:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4138:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    413c:	428b      	cmp	r3, r1
		err = -EALREADY;
    413e:	bf14      	ite	ne
    4140:	f04f 30ff 	movne.w	r0, #4294967295
    4144:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    4148:	e7f1      	b.n	412e <set_starting_state+0x20>

0000414a <set_on_state>:
	__asm__ volatile(
    414a:	f04f 0320 	mov.w	r3, #32
    414e:	f3ef 8211 	mrs	r2, BASEPRI
    4152:	f383 8811 	msr	BASEPRI, r3
    4156:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    415a:	6803      	ldr	r3, [r0, #0]
    415c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4160:	f043 0302 	orr.w	r3, r3, #2
    4164:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4166:	f382 8811 	msr	BASEPRI, r2
    416a:	f3bf 8f6f 	isb	sy
}
    416e:	4770      	bx	lr

00004170 <onoff_started_callback>:
	return &data->mgr[type];
    4170:	6900      	ldr	r0, [r0, #16]
{
    4172:	b410      	push	{r4}
	return &data->mgr[type];
    4174:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4176:	241c      	movs	r4, #28
    4178:	fb03 0004 	mla	r0, r3, r4, r0
    417c:	2100      	movs	r1, #0
}
    417e:	bc10      	pop	{r4}
	notify(mgr, 0);
    4180:	4710      	bx	r2

00004182 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4182:	2000      	movs	r0, #0
    4184:	f7fe bb2a 	b.w	27dc <nrfx_clock_start>

00004188 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4188:	2000      	movs	r0, #0
    418a:	f7fe bb59 	b.w	2840 <nrfx_clock_stop>

0000418e <blocking_start_callback>:
{
    418e:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4190:	f7fe bf48 	b.w	3024 <z_impl_k_sem_give>

00004194 <api_stop>:
{
    4194:	b538      	push	{r3, r4, r5, lr}
    4196:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    4198:	230c      	movs	r3, #12
{
    419a:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    419c:	4363      	muls	r3, r4
    419e:	6900      	ldr	r0, [r0, #16]
    41a0:	3340      	adds	r3, #64	; 0x40
    41a2:	2180      	movs	r1, #128	; 0x80
    41a4:	4418      	add	r0, r3
    41a6:	f7ff ff99 	bl	40dc <set_off_state>
	if (err < 0) {
    41aa:	2800      	cmp	r0, #0
    41ac:	db05      	blt.n	41ba <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    41ae:	6869      	ldr	r1, [r5, #4]
    41b0:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    41b4:	6863      	ldr	r3, [r4, #4]
    41b6:	4798      	blx	r3
	return 0;
    41b8:	2000      	movs	r0, #0
}
    41ba:	bd38      	pop	{r3, r4, r5, pc}

000041bc <api_start>:
{
    41bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41c0:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    41c2:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    41c4:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    41c6:	436f      	muls	r7, r5
{
    41c8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    41ca:	f107 0040 	add.w	r0, r7, #64	; 0x40
    41ce:	2180      	movs	r1, #128	; 0x80
    41d0:	4420      	add	r0, r4
{
    41d2:	4690      	mov	r8, r2
    41d4:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    41d6:	f7ff ff9a 	bl	410e <set_starting_state>
	if (err < 0) {
    41da:	2800      	cmp	r0, #0
    41dc:	db07      	blt.n	41ee <api_start+0x32>
	subdata->cb = cb;
    41de:	443c      	add	r4, r7
	subdata->user_data = user_data;
    41e0:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    41e4:	6873      	ldr	r3, [r6, #4]
    41e6:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    41ea:	4798      	blx	r3
	return 0;
    41ec:	2000      	movs	r0, #0
}
    41ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000041f2 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    41f2:	4770      	bx	lr

000041f4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    41f4:	4770      	bx	lr

000041f6 <sys_clock_disable>:
    41f6:	4770      	bx	lr

000041f8 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    41f8:	2000      	movs	r0, #0
    41fa:	f7fc bded 	b.w	dd8 <sys_reboot>

000041fe <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    41fe:	2100      	movs	r1, #0
    4200:	2001      	movs	r0, #1
    4202:	f000 b800 	b.w	4206 <z_arm_fatal_error>

00004206 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4206:	f000 b990 	b.w	452a <z_fatal_error>

0000420a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    420a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    420c:	6800      	ldr	r0, [r0, #0]
    420e:	f000 b98c 	b.w	452a <z_fatal_error>

00004212 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4212:	b508      	push	{r3, lr}
	handler();
    4214:	f7fd faf4 	bl	1800 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    421c:	f7fd bc48 	b.w	1ab0 <z_arm_exc_exit>

00004220 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4220:	3901      	subs	r1, #1
    4222:	4603      	mov	r3, r0
    4224:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4228:	b90a      	cbnz	r2, 422e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    422a:	701a      	strb	r2, [r3, #0]

	return dest;
}
    422c:	4770      	bx	lr
		*d = *s;
    422e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4232:	e7f7      	b.n	4224 <strcpy+0x4>

00004234 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4234:	4603      	mov	r3, r0
	size_t n = 0;
    4236:	2000      	movs	r0, #0

	while (*s != '\0') {
    4238:	5c1a      	ldrb	r2, [r3, r0]
    423a:	b902      	cbnz	r2, 423e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    423c:	4770      	bx	lr
		n++;
    423e:	3001      	adds	r0, #1
    4240:	e7fa      	b.n	4238 <strlen+0x4>

00004242 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4242:	4603      	mov	r3, r0
	size_t n = 0;
    4244:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4246:	5c1a      	ldrb	r2, [r3, r0]
    4248:	b10a      	cbz	r2, 424e <strnlen+0xc>
    424a:	4288      	cmp	r0, r1
    424c:	d100      	bne.n	4250 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    424e:	4770      	bx	lr
		n++;
    4250:	3001      	adds	r0, #1
    4252:	e7f8      	b.n	4246 <strnlen+0x4>

00004254 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4254:	1e43      	subs	r3, r0, #1
    4256:	3901      	subs	r1, #1
    4258:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    425c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    4260:	4282      	cmp	r2, r0
    4262:	d101      	bne.n	4268 <strcmp+0x14>
    4264:	2a00      	cmp	r2, #0
    4266:	d1f7      	bne.n	4258 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4268:	1a10      	subs	r0, r2, r0
    426a:	4770      	bx	lr

0000426c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    426c:	b510      	push	{r4, lr}
    426e:	1e43      	subs	r3, r0, #1
    4270:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4272:	4291      	cmp	r1, r2
    4274:	d100      	bne.n	4278 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4276:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4278:	f811 4b01 	ldrb.w	r4, [r1], #1
    427c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4280:	e7f7      	b.n	4272 <memcpy+0x6>

00004282 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4282:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4284:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    4286:	4603      	mov	r3, r0
	while (n > 0) {
    4288:	4293      	cmp	r3, r2
    428a:	d100      	bne.n	428e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    428c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    428e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4292:	e7f9      	b.n	4288 <memset+0x6>

00004294 <_stdout_hook_default>:
}
    4294:	f04f 30ff 	mov.w	r0, #4294967295
    4298:	4770      	bx	lr

0000429a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    429a:	b084      	sub	sp, #16
    429c:	ab04      	add	r3, sp, #16
    429e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    42a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    42a6:	2b06      	cmp	r3, #6
    42a8:	d108      	bne.n	42bc <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    42aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42ae:	2201      	movs	r2, #1
    42b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    42b4:	f3bf 8f4f 	dsb	sy
        __WFE();
    42b8:	bf20      	wfe
    while (true)
    42ba:	e7fd      	b.n	42b8 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    42bc:	b004      	add	sp, #16
    42be:	4770      	bx	lr

000042c0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    42c0:	b084      	sub	sp, #16
    42c2:	ab04      	add	r3, sp, #16
    42c4:	e903 0007 	stmdb	r3, {r0, r1, r2}
    42c8:	2300      	movs	r3, #0
    42ca:	f383 8811 	msr	BASEPRI, r3
    42ce:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    42d2:	b004      	add	sp, #16
    42d4:	4770      	bx	lr

000042d6 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    42d6:	b570      	push	{r4, r5, r6, lr}
    42d8:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    42da:	6801      	ldr	r1, [r0, #0]
{
    42dc:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    42de:	b189      	cbz	r1, 4304 <gpio_fire_callbacks+0x2e>
	return node->next;
    42e0:	680c      	ldr	r4, [r1, #0]
    42e2:	2c00      	cmp	r4, #0
    42e4:	bf38      	it	cc
    42e6:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    42e8:	688a      	ldr	r2, [r1, #8]
    42ea:	402a      	ands	r2, r5
    42ec:	d002      	beq.n	42f4 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    42ee:	684b      	ldr	r3, [r1, #4]
    42f0:	4630      	mov	r0, r6
    42f2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    42f4:	b134      	cbz	r4, 4304 <gpio_fire_callbacks+0x2e>
    42f6:	6823      	ldr	r3, [r4, #0]
    42f8:	2b00      	cmp	r3, #0
    42fa:	bf38      	it	cc
    42fc:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    42fe:	4621      	mov	r1, r4
    4300:	461c      	mov	r4, r3
    4302:	e7f1      	b.n	42e8 <gpio_fire_callbacks+0x12>
		}
	}
}
    4304:	bd70      	pop	{r4, r5, r6, pc}

00004306 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4306:	6843      	ldr	r3, [r0, #4]
    4308:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    430a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    430e:	600b      	str	r3, [r1, #0]
}
    4310:	2000      	movs	r0, #0
    4312:	4770      	bx	lr

00004314 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4314:	6843      	ldr	r3, [r0, #4]
    4316:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    4318:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    431c:	4042      	eors	r2, r0
    431e:	400a      	ands	r2, r1
    4320:	4042      	eors	r2, r0
    p_reg->OUT = value;
    4322:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    4326:	2000      	movs	r0, #0
    4328:	4770      	bx	lr

0000432a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    432a:	6843      	ldr	r3, [r0, #4]
    432c:	685b      	ldr	r3, [r3, #4]
}
    432e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    4330:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4334:	4770      	bx	lr

00004336 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4336:	6843      	ldr	r3, [r0, #4]
    4338:	685b      	ldr	r3, [r3, #4]
}
    433a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    433c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4340:	4770      	bx	lr

00004342 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4342:	6843      	ldr	r3, [r0, #4]
    4344:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4346:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    434a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    434c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    4350:	2000      	movs	r0, #0
    4352:	4770      	bx	lr

00004354 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4354:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    4356:	6858      	ldr	r0, [r3, #4]
{
    4358:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    435a:	b158      	cbz	r0, 4374 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    435c:	2400      	movs	r4, #0
    435e:	4281      	cmp	r1, r0
    4360:	d113      	bne.n	438a <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    4362:	6808      	ldr	r0, [r1, #0]
    4364:	b95c      	cbnz	r4, 437e <gpio_nrfx_manage_callback+0x2a>
    4366:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    4368:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    436a:	42a1      	cmp	r1, r4
    436c:	d100      	bne.n	4370 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    436e:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4370:	2000      	movs	r0, #0
    4372:	6008      	str	r0, [r1, #0]
	if (set) {
    4374:	b972      	cbnz	r2, 4394 <gpio_nrfx_manage_callback+0x40>
	return 0;
    4376:	2000      	movs	r0, #0
}
    4378:	bd30      	pop	{r4, r5, pc}
    437a:	4628      	mov	r0, r5
    437c:	e7ef      	b.n	435e <gpio_nrfx_manage_callback+0xa>
    437e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4380:	6898      	ldr	r0, [r3, #8]
    4382:	4281      	cmp	r1, r0
	list->tail = node;
    4384:	bf08      	it	eq
    4386:	609c      	streq	r4, [r3, #8]
}
    4388:	e7f2      	b.n	4370 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    438a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    438c:	4604      	mov	r4, r0
    438e:	2d00      	cmp	r5, #0
    4390:	d1f3      	bne.n	437a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4392:	b13a      	cbz	r2, 43a4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    4394:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4396:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4398:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    439a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    439c:	2800      	cmp	r0, #0
    439e:	d1ea      	bne.n	4376 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    43a0:	6099      	str	r1, [r3, #8]
}
    43a2:	e7e9      	b.n	4378 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    43a4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    43a8:	e7e6      	b.n	4378 <gpio_nrfx_manage_callback+0x24>

000043aa <cfg_level_pins>:
{
    43aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    43ae:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    43b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    43b4:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    43b6:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    43ba:	4313      	orrs	r3, r2
    43bc:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    43c0:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    43c2:	2500      	movs	r5, #0
	while (level_pins) {
    43c4:	b90c      	cbnz	r4, 43ca <cfg_level_pins+0x20>
}
    43c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    43ca:	4226      	tst	r6, r4
    43cc:	d010      	beq.n	43f0 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    43ce:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    43d0:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    43d4:	40e9      	lsrs	r1, r5
    43d6:	f001 0101 	and.w	r1, r1, #1
    43da:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    43de:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    43e2:	b2c9      	uxtb	r1, r1
    43e4:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    43e8:	f7fd fd42 	bl	1e70 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    43ec:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    43f0:	3501      	adds	r5, #1
		bit <<= 1;
    43f2:	0076      	lsls	r6, r6, #1
    43f4:	e7e6      	b.n	43c4 <cfg_level_pins+0x1a>

000043f6 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    43f6:	6843      	ldr	r3, [r0, #4]
    43f8:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    43fa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    43fe:	05d1      	lsls	r1, r2, #23
    4400:	d518      	bpl.n	4434 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4402:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    4406:	b1aa      	cbz	r2, 4434 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4408:	f04f 0120 	mov.w	r1, #32
    440c:	f3ef 8211 	mrs	r2, BASEPRI
    4410:	f381 8811 	msr	BASEPRI, r1
    4414:	f3bf 8f6f 	isb	sy
    4418:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    441c:	b131      	cbz	r1, 442c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    441e:	2100      	movs	r1, #0
    4420:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    4424:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4428:	2101      	movs	r1, #1
    442a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    442c:	f382 8811 	msr	BASEPRI, r2
    4430:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4434:	6842      	ldr	r2, [r0, #4]
    4436:	6852      	ldr	r2, [r2, #4]
    4438:	06d2      	lsls	r2, r2, #27
    443a:	d515      	bpl.n	4468 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    443c:	f04f 0120 	mov.w	r1, #32
    4440:	f3ef 8211 	mrs	r2, BASEPRI
    4444:	f381 8811 	msr	BASEPRI, r1
    4448:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    444c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4450:	b111      	cbz	r1, 4458 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4452:	2100      	movs	r1, #0
    4454:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4458:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    445c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4460:	f382 8811 	msr	BASEPRI, r2
    4464:	f3bf 8f6f 	isb	sy
}
    4468:	4770      	bx	lr

0000446a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    446a:	6902      	ldr	r2, [r0, #16]
{
    446c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    446e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4472:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4476:	2000      	movs	r0, #0
    4478:	4770      	bx	lr

0000447a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    447a:	6843      	ldr	r3, [r0, #4]
    447c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    447e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4482:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4486:	4770      	bx	lr

00004488 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    4488:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    448a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    448c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4490:	b940      	cbnz	r0, 44a4 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4492:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4494:	0712      	lsls	r2, r2, #28
    4496:	d406      	bmi.n	44a6 <is_tx_ready+0x1e>
    4498:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    449c:	3800      	subs	r0, #0
    449e:	bf18      	it	ne
    44a0:	2001      	movne	r0, #1
    44a2:	4770      	bx	lr
    44a4:	2001      	movs	r0, #1
}
    44a6:	4770      	bx	lr

000044a8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    44a8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    44aa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    44b2:	b148      	cbz	r0, 44c8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    44b4:	7c52      	ldrb	r2, [r2, #17]
    44b6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44b8:	2000      	movs	r0, #0
    44ba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    44be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44c2:	2201      	movs	r2, #1
    44c4:	601a      	str	r2, [r3, #0]
	return 0;
    44c6:	4770      	bx	lr
		return -1;
    44c8:	f04f 30ff 	mov.w	r0, #4294967295
}
    44cc:	4770      	bx	lr

000044ce <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    44ce:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    44d0:	2000      	movs	r0, #0
    44d2:	f7fd fc35 	bl	1d40 <sys_arch_reboot>

000044d6 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    44d6:	f7ff bacf 	b.w	3a78 <nrf_cc3xx_platform_init_no_rng>

000044da <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    44da:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    44dc:	f7fc ffd2 	bl	1484 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    44e0:	f7fd f884 	bl	15ec <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    44e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    44e8:	f7ff bac6 	b.w	3a78 <nrf_cc3xx_platform_init_no_rng>

000044ec <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    44ec:	4700      	bx	r0

000044ee <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    44ee:	f000 b97c 	b.w	47ea <z_impl_k_busy_wait>

000044f2 <nrfx_clock_enable>:
{
    44f2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    44f4:	2000      	movs	r0, #0
    44f6:	f7fd f8f3 	bl	16e0 <arch_irq_is_enabled>
    44fa:	b918      	cbnz	r0, 4504 <nrfx_clock_enable+0x12>
}
    44fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4500:	f7fd b8de 	b.w	16c0 <arch_irq_enable>
    4504:	bd08      	pop	{r3, pc}

00004506 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4506:	f7fe baa3 	b.w	2a50 <_DoInit>

0000450a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    450a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    450c:	f7ff fffb 	bl	4506 <SEGGER_RTT_Init>

	return 0;
}
    4510:	2000      	movs	r0, #0
    4512:	bd08      	pop	{r3, pc}

00004514 <z_device_state_init>:
}
    4514:	4770      	bx	lr

00004516 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4516:	b138      	cbz	r0, 4528 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4518:	68c3      	ldr	r3, [r0, #12]
    451a:	8818      	ldrh	r0, [r3, #0]
    451c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    4520:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    4524:	4258      	negs	r0, r3
    4526:	4158      	adcs	r0, r3
}
    4528:	4770      	bx	lr

0000452a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    452a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452c:	4605      	mov	r5, r0
    452e:	460e      	mov	r6, r1
	__asm__ volatile(
    4530:	f04f 0320 	mov.w	r3, #32
    4534:	f3ef 8711 	mrs	r7, BASEPRI
    4538:	f383 8811 	msr	BASEPRI, r3
    453c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4540:	f7ff f8be 	bl	36c0 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4544:	4631      	mov	r1, r6
    4546:	4604      	mov	r4, r0
    4548:	4628      	mov	r0, r5
    454a:	f7ff ffc0 	bl	44ce <k_sys_fatal_error_handler>
	__asm__ volatile(
    454e:	f387 8811 	msr	BASEPRI, r7
    4552:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4556:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    455c:	f7fd bb04 	b.w	1b68 <z_impl_k_thread_abort>

00004560 <k_mem_slab_init>:
{
    4560:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4562:	2400      	movs	r4, #0
    4564:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4566:	ea41 0402 	orr.w	r4, r1, r2
    456a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    456e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    4572:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4574:	d10c      	bne.n	4590 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4576:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4578:	42a3      	cmp	r3, r4
    457a:	d103      	bne.n	4584 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    457c:	e9c0 0000 	strd	r0, r0, [r0]
}
    4580:	2000      	movs	r0, #0
}
    4582:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4584:	6945      	ldr	r5, [r0, #20]
    4586:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4588:	3401      	adds	r4, #1
		slab->free_list = p;
    458a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    458c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    458e:	e7f3      	b.n	4578 <k_mem_slab_init+0x18>
		return -EINVAL;
    4590:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4594:	e7f5      	b.n	4582 <k_mem_slab_init+0x22>

00004596 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4598:	4604      	mov	r4, r0
    459a:	460d      	mov	r5, r1
	__asm__ volatile(
    459c:	f04f 0320 	mov.w	r3, #32
    45a0:	f3ef 8611 	mrs	r6, BASEPRI
    45a4:	f383 8811 	msr	BASEPRI, r3
    45a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    45ac:	6947      	ldr	r7, [r0, #20]
    45ae:	b977      	cbnz	r7, 45ce <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    45b0:	f000 f8bf 	bl	4732 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    45b4:	b158      	cbz	r0, 45ce <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    45b6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    45b8:	6142      	str	r2, [r0, #20]
    45ba:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    45bc:	f000 f887 	bl	46ce <z_ready_thread>
			z_reschedule(&slab->lock, key);
    45c0:	4631      	mov	r1, r6
    45c2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    45c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    45ca:	f7fe bdbd 	b.w	3148 <z_reschedule>
	**(char ***) mem = slab->free_list;
    45ce:	682b      	ldr	r3, [r5, #0]
    45d0:	6962      	ldr	r2, [r4, #20]
    45d2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    45d4:	682b      	ldr	r3, [r5, #0]
    45d6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    45d8:	69a3      	ldr	r3, [r4, #24]
    45da:	3b01      	subs	r3, #1
    45dc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    45de:	f386 8811 	msr	BASEPRI, r6
    45e2:	f3bf 8f6f 	isb	sy
}
    45e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000045e8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    45e8:	f3ef 8005 	mrs	r0, IPSR
}
    45ec:	3800      	subs	r0, #0
    45ee:	bf18      	it	ne
    45f0:	2001      	movne	r0, #1
    45f2:	4770      	bx	lr

000045f4 <z_pm_save_idle_exit>:
{
    45f4:	b508      	push	{r3, lr}
	pm_system_resume();
    45f6:	f7fc fc2d 	bl	e54 <pm_system_resume>
}
    45fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    45fe:	f7ff bdf9 	b.w	41f4 <sys_clock_idle_exit>

00004602 <z_impl_k_mutex_init>:
{
    4602:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4604:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    4606:	e9c3 0002 	strd	r0, r0, [r3, #8]
    460a:	e9c3 3300 	strd	r3, r3, [r3]
}
    460e:	4770      	bx	lr

00004610 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4610:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4614:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4616:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4618:	2300      	movs	r3, #0
	node->prev = NULL;
    461a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    461e:	4770      	bx	lr

00004620 <unpend_thread_no_timeout>:
{
    4620:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4622:	f7ff fff5 	bl	4610 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4626:	7b43      	ldrb	r3, [r0, #13]
    4628:	f023 0302 	bic.w	r3, r3, #2
    462c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    462e:	2300      	movs	r3, #0
    4630:	6083      	str	r3, [r0, #8]
}
    4632:	bd08      	pop	{r3, pc}

00004634 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4634:	4603      	mov	r3, r0
    4636:	b920      	cbnz	r0, 4642 <z_reschedule_irqlock+0xe>
    4638:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    463c:	b90a      	cbnz	r2, 4642 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    463e:	f7fc bfeb 	b.w	1618 <arch_swap>
    4642:	f383 8811 	msr	BASEPRI, r3
    4646:	f3bf 8f6f 	isb	sy
}
    464a:	4770      	bx	lr

0000464c <z_reschedule_unlocked>:
	__asm__ volatile(
    464c:	f04f 0320 	mov.w	r3, #32
    4650:	f3ef 8011 	mrs	r0, BASEPRI
    4654:	f383 8811 	msr	BASEPRI, r3
    4658:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    465c:	f7ff bfea 	b.w	4634 <z_reschedule_irqlock>

00004660 <z_priq_dumb_best>:
{
    4660:	4603      	mov	r3, r0
	return list->head == list;
    4662:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4664:	4283      	cmp	r3, r0
    4666:	d003      	beq.n	4670 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    4668:	2800      	cmp	r0, #0
    466a:	bf38      	it	cc
    466c:	2000      	movcc	r0, #0
    466e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    4670:	2000      	movs	r0, #0
}
    4672:	4770      	bx	lr

00004674 <add_to_waitq_locked>:
{
    4674:	b538      	push	{r3, r4, r5, lr}
    4676:	4604      	mov	r4, r0
    4678:	460d      	mov	r5, r1
	unready_thread(thread);
    467a:	f7fe fdab 	bl	31d4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    467e:	7b63      	ldrb	r3, [r4, #13]
    4680:	f043 0302 	orr.w	r3, r3, #2
    4684:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4686:	b1b5      	cbz	r5, 46b6 <add_to_waitq_locked+0x42>
	return list->head == list;
    4688:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    468a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    468c:	429d      	cmp	r5, r3
    468e:	bf08      	it	eq
    4690:	2300      	moveq	r3, #0
    4692:	2b00      	cmp	r3, #0
    4694:	bf38      	it	cc
    4696:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4698:	b19b      	cbz	r3, 46c2 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    469a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    469e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    46a2:	4291      	cmp	r1, r2
    46a4:	d008      	beq.n	46b8 <add_to_waitq_locked+0x44>
		return b2 - b1;
    46a6:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    46a8:	2a00      	cmp	r2, #0
    46aa:	dd05      	ble.n	46b8 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    46ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    46ae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    46b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    46b4:	605c      	str	r4, [r3, #4]
}
    46b6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    46b8:	686a      	ldr	r2, [r5, #4]
    46ba:	4293      	cmp	r3, r2
    46bc:	d001      	beq.n	46c2 <add_to_waitq_locked+0x4e>
    46be:	681b      	ldr	r3, [r3, #0]
    46c0:	e7ea      	b.n	4698 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    46c2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    46c4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    46c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    46ca:	606c      	str	r4, [r5, #4]
    46cc:	e7f3      	b.n	46b6 <add_to_waitq_locked+0x42>

000046ce <z_ready_thread>:
{
    46ce:	b510      	push	{r4, lr}
    46d0:	f04f 0320 	mov.w	r3, #32
    46d4:	f3ef 8411 	mrs	r4, BASEPRI
    46d8:	f383 8811 	msr	BASEPRI, r3
    46dc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    46e0:	f7fe fe98 	bl	3414 <ready_thread>
	__asm__ volatile(
    46e4:	f384 8811 	msr	BASEPRI, r4
    46e8:	f3bf 8f6f 	isb	sy
}
    46ec:	bd10      	pop	{r4, pc}

000046ee <z_thread_timeout>:
{
    46ee:	b510      	push	{r4, lr}
    46f0:	4601      	mov	r1, r0
	__asm__ volatile(
    46f2:	f04f 0320 	mov.w	r3, #32
    46f6:	f3ef 8411 	mrs	r4, BASEPRI
    46fa:	f383 8811 	msr	BASEPRI, r3
    46fe:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4702:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    4706:	f013 0f28 	tst.w	r3, #40	; 0x28
    470a:	d10d      	bne.n	4728 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    470c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4710:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    4712:	b10b      	cbz	r3, 4718 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    4714:	f7ff ff84 	bl	4620 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4718:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    471c:	f023 0314 	bic.w	r3, r3, #20
    4720:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    4724:	f7fe fe76 	bl	3414 <ready_thread>
	__asm__ volatile(
    4728:	f384 8811 	msr	BASEPRI, r4
    472c:	f3bf 8f6f 	isb	sy
}
    4730:	bd10      	pop	{r4, pc}

00004732 <z_unpend_first_thread>:
{
    4732:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4734:	f04f 0320 	mov.w	r3, #32
    4738:	f3ef 8511 	mrs	r5, BASEPRI
    473c:	f383 8811 	msr	BASEPRI, r3
    4740:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    4744:	f7ff ff8c 	bl	4660 <z_priq_dumb_best>
		if (thread != NULL) {
    4748:	4604      	mov	r4, r0
    474a:	b120      	cbz	r0, 4756 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    474c:	f7ff ff68 	bl	4620 <unpend_thread_no_timeout>
    4750:	3018      	adds	r0, #24
    4752:	f000 f806 	bl	4762 <z_abort_timeout>
	__asm__ volatile(
    4756:	f385 8811 	msr	BASEPRI, r5
    475a:	f3bf 8f6f 	isb	sy
}
    475e:	4620      	mov	r0, r4
    4760:	bd38      	pop	{r3, r4, r5, pc}

00004762 <z_abort_timeout>:
{
    4762:	b510      	push	{r4, lr}
	__asm__ volatile(
    4764:	f04f 0220 	mov.w	r2, #32
    4768:	f3ef 8411 	mrs	r4, BASEPRI
    476c:	f382 8811 	msr	BASEPRI, r2
    4770:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4774:	6803      	ldr	r3, [r0, #0]
    4776:	b13b      	cbz	r3, 4788 <z_abort_timeout+0x26>
			remove_timeout(to);
    4778:	f7ff f81e 	bl	37b8 <remove_timeout>
			ret = 0;
    477c:	2000      	movs	r0, #0
	__asm__ volatile(
    477e:	f384 8811 	msr	BASEPRI, r4
    4782:	f3bf 8f6f 	isb	sy
}
    4786:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4788:	f06f 0015 	mvn.w	r0, #21
    478c:	e7f7      	b.n	477e <z_abort_timeout+0x1c>

0000478e <z_get_next_timeout_expiry>:
{
    478e:	b510      	push	{r4, lr}
	__asm__ volatile(
    4790:	f04f 0320 	mov.w	r3, #32
    4794:	f3ef 8411 	mrs	r4, BASEPRI
    4798:	f383 8811 	msr	BASEPRI, r3
    479c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    47a0:	f7ff f824 	bl	37ec <next_timeout>
	__asm__ volatile(
    47a4:	f384 8811 	msr	BASEPRI, r4
    47a8:	f3bf 8f6f 	isb	sy
}
    47ac:	bd10      	pop	{r4, pc}

000047ae <z_set_timeout_expiry>:
{
    47ae:	b570      	push	{r4, r5, r6, lr}
    47b0:	4604      	mov	r4, r0
    47b2:	460d      	mov	r5, r1
	__asm__ volatile(
    47b4:	f04f 0320 	mov.w	r3, #32
    47b8:	f3ef 8611 	mrs	r6, BASEPRI
    47bc:	f383 8811 	msr	BASEPRI, r3
    47c0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    47c4:	f7ff f812 	bl	37ec <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    47c8:	2801      	cmp	r0, #1
    47ca:	dd05      	ble.n	47d8 <z_set_timeout_expiry+0x2a>
    47cc:	42a0      	cmp	r0, r4
    47ce:	db03      	blt.n	47d8 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    47d0:	4629      	mov	r1, r5
    47d2:	4620      	mov	r0, r4
    47d4:	f7fc fe16 	bl	1404 <sys_clock_set_timeout>
	__asm__ volatile(
    47d8:	f386 8811 	msr	BASEPRI, r6
    47dc:	f3bf 8f6f 	isb	sy
}
    47e0:	bd70      	pop	{r4, r5, r6, pc}

000047e2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    47e2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    47e4:	f7ff f922 	bl	3a2c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    47e8:	bd08      	pop	{r3, pc}

000047ea <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    47ea:	b108      	cbz	r0, 47f0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    47ec:	f7fd babe 	b.w	1d6c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    47f0:	4770      	bx	lr

000047f2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    47f2:	4770      	bx	lr

000047f4 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    47f4:	f7fd befa 	b.w	25ec <SystemInit>
