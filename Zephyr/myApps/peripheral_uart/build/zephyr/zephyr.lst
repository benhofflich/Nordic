
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20007700 	.word	0x20007700
   4:	000144e5 	.word	0x000144e5
   8:	00029883 	.word	0x00029883
   c:	00014539 	.word	0x00014539
  10:	00014539 	.word	0x00014539
  14:	00014539 	.word	0x00014539
  18:	00014539 	.word	0x00014539
	...
  2c:	00014211 	.word	0x00014211
  30:	00014539 	.word	0x00014539
  34:	00000000 	.word	0x00000000
  38:	000141bd 	.word	0x000141bd
  3c:	0001397d 	.word	0x0001397d

00000040 <_irq_vector_table>:
  40:	000144a5 0002c44b 000144a5 000144a5     .D..K....D...D..
  50:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  60:	0002c413 000144a5 000144a5 0002c431     .....D...D..1...
  70:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  80:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  90:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  a0:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  b0:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  c0:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  d0:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  e0:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..
  f0:	000144a5 000144a5 000144a5 000144a5     .D...D...D...D..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_BT_DEVICE_APPEARANCE+0x9f>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_BT_DEVICE_APPEARANCE+0x6d>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_BT_DEVICE_APPEARANCE+0x9b>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x97>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x97>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0x8f>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0x8f>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x93>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x93>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_BT_DEVICE_APPEARANCE+0x7f>
     38c:	d016      	beq.n	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_BT_DEVICE_APPEARANCE+0x67>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_NUS_THREAD_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b f8fa 	bl	b60c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000
     428:	2800      	cmp	r0, #0
     42a:	d019      	beq.n	460 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x60>
     42c:	7803      	ldrb	r3, [r0, #0]
     42e:	4913      	ldr	r1, [pc, #76]	; (47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>)
     430:	4a13      	ldr	r2, [pc, #76]	; (480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>)
     432:	b113      	cbz	r3, 43a <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x3a>
     434:	2b01      	cmp	r3, #1
     436:	d00e      	beq.n	456 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x56>
     438:	e011      	b.n	45e <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x5e>
     43a:	7903      	ldrb	r3, [r0, #4]
     43c:	2b01      	cmp	r3, #1
     43e:	d000      	beq.n	442 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x42>
     440:	b96b      	cbnz	r3, 45e <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x5e>
     442:	7943      	ldrb	r3, [r0, #5]
     444:	b10b      	cbz	r3, 44a <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x4a>
     446:	2b01      	cmp	r3, #1
     448:	d109      	bne.n	45e <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x5e>
     44a:	6883      	ldr	r3, [r0, #8]
     44c:	3b64      	subs	r3, #100	; 0x64
     44e:	428b      	cmp	r3, r1
     450:	d205      	bcs.n	45e <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x5e>
     452:	68c0      	ldr	r0, [r0, #12]
     454:	e00e      	b.n	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
     456:	7903      	ldrb	r3, [r0, #4]
     458:	2b01      	cmp	r3, #1
     45a:	d002      	beq.n	462 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x62>
     45c:	b10b      	cbz	r3, 462 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x62>
     45e:	2000      	movs	r0, #0
     460:	4770      	bx	lr
     462:	7943      	ldrb	r3, [r0, #5]
     464:	b10b      	cbz	r3, 46a <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x6a>
     466:	2b01      	cmp	r3, #1
     468:	d1f9      	bne.n	45e <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x5e>
     46a:	68c3      	ldr	r3, [r0, #12]
     46c:	3b64      	subs	r3, #100	; 0x64
     46e:	428b      	cmp	r3, r1
     470:	d2f5      	bcs.n	45e <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x5e>
     472:	6880      	ldr	r0, [r0, #8]
     474:	4290      	cmp	r0, r2
     476:	d8f2      	bhi.n	45e <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x5e>
     478:	2001      	movs	r0, #1
     47a:	4770      	bx	lr
     47c:	0001863d 	.word	0x0001863d
     480:	07a11fff 	.word	0x07a11fff
     484:	b510      	push	{r4, lr}
     486:	4c05      	ldr	r4, [pc, #20]	; (49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>)
     488:	6820      	ldr	r0, [r4, #0]
     48a:	b110      	cbz	r0, 492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     48c:	4780      	blx	r0
     48e:	2000      	movs	r0, #0
     490:	6020      	str	r0, [r4, #0]
     492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     496:	f001 bf91 	b.w	23bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     49a:	0000      	.short	0x0000
     49c:	20000008 	.word	0x20000008

000004a0 <mpsl_timeslot_session_open>:
     4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4a4:	460e      	mov	r6, r1
     4a6:	0005      	movs	r5, r0
     4a8:	d004      	beq.n	4b4 <mpsl_timeslot_session_open+0x14>
     4aa:	f000 f845 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     4ae:	4607      	mov	r7, r0
     4b0:	2400      	movs	r4, #0
     4b2:	e00a      	b.n	4ca <mpsl_timeslot_session_open+0x2a>
     4b4:	f06f 0015 	mvn.w	r0, #21
     4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4bc:	4620      	mov	r0, r4
     4be:	f000 f841 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4c2:	7880      	ldrb	r0, [r0, #2]
     4c4:	b138      	cbz	r0, 4d6 <mpsl_timeslot_session_open+0x36>
     4c6:	1c64      	adds	r4, r4, #1
     4c8:	b2e4      	uxtb	r4, r4
     4ca:	42bc      	cmp	r4, r7
     4cc:	d3f6      	bcc.n	4bc <mpsl_timeslot_session_open+0x1c>
     4ce:	bf00      	nop
     4d0:	f06f 000b 	mvn.w	r0, #11
     4d4:	e7f0      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     4d6:	4627      	mov	r7, r4
     4d8:	2cff      	cmp	r4, #255	; 0xff
     4da:	d0f9      	beq.n	4d0 <mpsl_timeslot_session_open+0x30>
     4dc:	4620      	mov	r0, r4
     4de:	f000 f831 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4e2:	4604      	mov	r4, r0
     4e4:	f00b fa35 	bl	b952 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
     4e8:	7127      	strb	r7, [r4, #4]
     4ea:	4621      	mov	r1, r4
     4ec:	4807      	ldr	r0, [pc, #28]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4ee:	f001 ff3d 	bl	236c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     4f2:	70e0      	strb	r0, [r4, #3]
     4f4:	2820      	cmp	r0, #32
     4f6:	d005      	beq.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4f8:	2001      	movs	r0, #1
     4fa:	60a5      	str	r5, [r4, #8]
     4fc:	70a0      	strb	r0, [r4, #2]
     4fe:	7037      	strb	r7, [r6, #0]
     500:	2000      	movs	r0, #0
     502:	e7d9      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     504:	f06f 0022 	mvn.w	r0, #34	; 0x22
     508:	e7d6      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     50a:	0000      	.short	0x0000
     50c:	0000b6b3 	.word	0x0000b6b3

00000510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     510:	b510      	push	{r4, lr}
     512:	0782      	lsls	r2, r0, #30
     514:	d002      	beq.n	51c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     516:	f06f 000d 	mvn.w	r0, #13
     51a:	bd10      	pop	{r4, pc}
     51c:	4a05      	ldr	r2, [pc, #20]	; (534 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     51e:	7011      	strb	r1, [r2, #0]
     520:	6050      	str	r0, [r2, #4]
     522:	b128      	cbz	r0, 530 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     524:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     528:	008a      	lsls	r2, r1, #2
     52a:	2100      	movs	r1, #0
     52c:	f00b fca2 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     530:	2000      	movs	r0, #0
     532:	bd10      	pop	{r4, pc}
     534:	2000000c 	.word	0x2000000c

00000538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     538:	4801      	ldr	r0, [pc, #4]	; (540 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     53a:	7800      	ldrb	r0, [r0, #0]
     53c:	4770      	bx	lr
     53e:	0000      	.short	0x0000
     540:	2000000c 	.word	0x2000000c

00000544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     544:	4905      	ldr	r1, [pc, #20]	; (55c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     546:	780a      	ldrb	r2, [r1, #0]
     548:	4290      	cmp	r0, r2
     54a:	d301      	bcc.n	550 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     54c:	2000      	movs	r0, #0
     54e:	4770      	bx	lr
     550:	6849      	ldr	r1, [r1, #4]
     552:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     556:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     55a:	4770      	bx	lr
     55c:	2000000c 	.word	0x2000000c
     560:	b570      	push	{r4, r5, r6, lr}
     562:	4605      	mov	r5, r0
     564:	2a20      	cmp	r2, #32
     566:	d027      	beq.n	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     568:	4819      	ldr	r0, [pc, #100]	; (5d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     56a:	4c1a      	ldr	r4, [pc, #104]	; (5d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     56c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     570:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     578:	2920      	cmp	r1, #32
     57a:	d022      	beq.n	5c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     57c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     580:	7840      	ldrb	r0, [r0, #1]
     582:	784c      	ldrb	r4, [r1, #1]
     584:	7048      	strb	r0, [r1, #1]
     586:	4620      	mov	r0, r4
     588:	4601      	mov	r1, r0
     58a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     58e:	4291      	cmp	r1, r2
     590:	7005      	strb	r5, [r0, #0]
     592:	7840      	ldrb	r0, [r0, #1]
     594:	d1f8      	bne.n	588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     596:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     59a:	2a20      	cmp	r2, #32
     59c:	bf1a      	itte	ne
     59e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     5a2:	7054      	strbne	r4, [r2, #1]
     5a4:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     5a8:	2220      	movs	r2, #32
     5aa:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     5ae:	f88c 2001 	strb.w	r2, [ip, #1]
     5b2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	f240 2191 	movw	r1, #657	; 0x291
     5bc:	2070      	movs	r0, #112	; 0x70
     5be:	f003 f913 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5c2:	f893 4020 	ldrb.w	r4, [r3, #32]
     5c6:	7840      	ldrb	r0, [r0, #1]
     5c8:	f883 0020 	strb.w	r0, [r3, #32]
     5cc:	e7db      	b.n	586 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     5ce:	0000      	.short	0x0000
     5d0:	20000e94 	.word	0x20000e94
     5d4:	20000f14 	.word	0x20000f14
     5d8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5dc:	460c      	mov	r4, r1
     5de:	8949      	ldrh	r1, [r1, #10]
     5e0:	b087      	sub	sp, #28
     5e2:	f501 61e1 	add.w	r1, r1, #1800	; 0x708
     5e6:	4615      	mov	r5, r2
     5e8:	4281      	cmp	r1, r0
     5ea:	f200 80da 	bhi.w	7a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a2>
     5ee:	aa05      	add	r2, sp, #20
     5f0:	a902      	add	r1, sp, #8
     5f2:	f002 f8b3 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     5f6:	9802      	ldr	r0, [sp, #8]
     5f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     5fa:	4428      	add	r0, r5
     5fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     600:	9004      	str	r0, [sp, #16]
     602:	48a9      	ldr	r0, [pc, #676]	; (8a8 <CONFIG_BT_RX_STACK_SIZE+0x10>)
     604:	4ea9      	ldr	r6, [pc, #676]	; (8ac <CONFIG_BT_RX_STACK_SIZE+0x14>)
     606:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     60a:	9003      	str	r0, [sp, #12]
     60c:	f890 5020 	ldrb.w	r5, [r0, #32]
     610:	2020      	movs	r0, #32
     612:	46e9      	mov	r9, sp
     614:	f10d 0804 	add.w	r8, sp, #4
     618:	f88d 0000 	strb.w	r0, [sp]
     61c:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     620:	2d20      	cmp	r5, #32
     622:	bf18      	it	ne
     624:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     628:	d026      	beq.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     62a:	bf00      	nop
     62c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     630:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     634:	6821      	ldr	r1, [r4, #0]
     636:	68c2      	ldr	r2, [r0, #12]
     638:	1a89      	subs	r1, r1, r2
     63a:	0209      	lsls	r1, r1, #8
     63c:	17ca      	asrs	r2, r1, #31
     63e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     642:	3008      	adds	r0, #8
     644:	1209      	asrs	r1, r1, #8
     646:	d417      	bmi.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     648:	8961      	ldrh	r1, [r4, #10]
     64a:	b171      	cbz	r1, 66a <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     64c:	8941      	ldrh	r1, [r0, #10]
     64e:	b961      	cbnz	r1, 66a <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     650:	f000 fdb4 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     654:	f002 f866 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     658:	6821      	ldr	r1, [r4, #0]
     65a:	1a08      	subs	r0, r1, r0
     65c:	0200      	lsls	r0, r0, #8
     65e:	17c1      	asrs	r1, r0, #31
     660:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     664:	1200      	asrs	r0, r0, #8
     666:	2833      	cmp	r0, #51	; 0x33
     668:	db06      	blt.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     66a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     66e:	f889 5000 	strb.w	r5, [r9]
     672:	7845      	ldrb	r5, [r0, #1]
     674:	2d20      	cmp	r5, #32
     676:	d1d9      	bne.n	62c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     678:	f899 0000 	ldrb.w	r0, [r9]
     67c:	f888 0000 	strb.w	r0, [r8]
     680:	46a1      	mov	r9, r4
     682:	2d20      	cmp	r5, #32
     684:	bf1c      	itt	ne
     686:	488a      	ldrne	r0, [pc, #552]	; (8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>)
     688:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     68c:	f000 8108 	beq.w	8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     690:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     694:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     698:	f8d9 1004 	ldr.w	r1, [r9, #4]
     69c:	f8da 2008 	ldr.w	r2, [sl, #8]
     6a0:	4648      	mov	r0, r9
     6a2:	1a51      	subs	r1, r2, r1
     6a4:	0209      	lsls	r1, r1, #8
     6a6:	17ca      	asrs	r2, r1, #31
     6a8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6ac:	f10a 0708 	add.w	r7, sl, #8
     6b0:	1209      	asrs	r1, r1, #8
     6b2:	d415      	bmi.n	6e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe0>
     6b4:	8979      	ldrh	r1, [r7, #10]
     6b6:	2900      	cmp	r1, #0
     6b8:	f000 80f2 	beq.w	8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     6bc:	8941      	ldrh	r1, [r0, #10]
     6be:	2900      	cmp	r1, #0
     6c0:	f040 80ee 	bne.w	8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     6c4:	f000 fd7a 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     6c8:	f002 f82c 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6cc:	6839      	ldr	r1, [r7, #0]
     6ce:	1a08      	subs	r0, r1, r0
     6d0:	0200      	lsls	r0, r0, #8
     6d2:	17c1      	asrs	r1, r0, #31
     6d4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6d8:	1200      	asrs	r0, r0, #8
     6da:	2833      	cmp	r0, #51	; 0x33
     6dc:	f280 80e0 	bge.w	8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     6e0:	f888 5000 	strb.w	r5, [r8]
     6e4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     6e8:	f899 000c 	ldrb.w	r0, [r9, #12]
     6ec:	4281      	cmp	r1, r0
     6ee:	d906      	bls.n	6fe <CONFIG_BT_HCI_TX_STACK_SIZE+0xfe>
     6f0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6f4:	7845      	ldrb	r5, [r0, #1]
     6f6:	2d20      	cmp	r5, #32
     6f8:	d1ca      	bne.n	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     6fa:	f000 b8d1 	b.w	8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     6fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
     702:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     706:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     70a:	8a68      	ldrh	r0, [r5, #18]
     70c:	68ef      	ldr	r7, [r5, #12]
     70e:	2800      	cmp	r0, #0
     710:	d13f      	bne.n	792 <CONFIG_BT_HCI_TX_STACK_SIZE+0x192>
     712:	8960      	ldrh	r0, [r4, #10]
     714:	b3e8      	cbz	r0, 792 <CONFIG_BT_HCI_TX_STACK_SIZE+0x192>
     716:	68a8      	ldr	r0, [r5, #8]
     718:	f00b f9c4 	bl	baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     71c:	8a69      	ldrh	r1, [r5, #18]
     71e:	7c2a      	ldrb	r2, [r5, #16]
     720:	4411      	add	r1, r2
     722:	1c49      	adds	r1, r1, #1
     724:	4a63      	ldr	r2, [pc, #396]	; (8b4 <CONFIG_BT_RX_STACK_SIZE+0x1c>)
     726:	1843      	adds	r3, r0, r1
     728:	4290      	cmp	r0, r2
     72a:	d904      	bls.n	736 <CONFIG_BT_HCI_TX_STACK_SIZE+0x136>
     72c:	f240 6116 	movw	r1, #1558	; 0x616
     730:	2070      	movs	r0, #112	; 0x70
     732:	f003 f859 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     736:	4860      	ldr	r0, [pc, #384]	; (8b8 <CONFIG_BT_RX_STACK_SIZE+0x20>)
     738:	4281      	cmp	r1, r0
     73a:	dd04      	ble.n	746 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     73c:	f240 6117 	movw	r1, #1559	; 0x617
     740:	2070      	movs	r0, #112	; 0x70
     742:	f003 f851 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     746:	485d      	ldr	r0, [pc, #372]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     748:	4281      	cmp	r1, r0
     74a:	da04      	bge.n	756 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     74c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     750:	2070      	movs	r0, #112	; 0x70
     752:	f003 f849 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     756:	485a      	ldr	r0, [pc, #360]	; (8c0 <CONFIG_BT_RX_STACK_SIZE+0x28>)
     758:	4298      	cmp	r0, r3
     75a:	bfdc      	itt	le
     75c:	f503 03f7 	addle.w	r3, r3, #8093696	; 0x7b8000
     760:	f1a3 53f8 	suble.w	r3, r3, #520093696	; 0x1f000000
     764:	dd05      	ble.n	772 <CONFIG_BT_HCI_TX_STACK_SIZE+0x172>
     766:	2b00      	cmp	r3, #0
     768:	bfbc      	itt	lt
     76a:	f5a3 03f7 	sublt.w	r3, r3, #8093696	; 0x7b8000
     76e:	f103 53f8 	addlt.w	r3, r3, #520093696	; 0x1f000000
     772:	4618      	mov	r0, r3
     774:	f001 ffd6 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     778:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     77c:	1a39      	subs	r1, r7, r0
     77e:	0209      	lsls	r1, r1, #8
     780:	17ca      	asrs	r2, r1, #31
     782:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     786:	1209      	asrs	r1, r1, #8
     788:	2933      	cmp	r1, #51	; 0x33
     78a:	bfbc      	itt	lt
     78c:	3033      	addlt	r0, #51	; 0x33
     78e:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     792:	9804      	ldr	r0, [sp, #16]
     794:	1a38      	subs	r0, r7, r0
     796:	0200      	lsls	r0, r0, #8
     798:	17c1      	asrs	r1, r0, #31
     79a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     79e:	1200      	asrs	r0, r0, #8
     7a0:	d403      	bmi.n	7aa <CONFIG_BT_HCI_TX_STACK_SIZE+0x1aa>
     7a2:	b00b      	add	sp, #44	; 0x2c
     7a4:	2000      	movs	r0, #0
     7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7aa:	e9d4 1000 	ldrd	r1, r0, [r4]
     7ae:	1a40      	subs	r0, r0, r1
     7b0:	4438      	add	r0, r7
     7b2:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     7b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7ba:	e9c4 1000 	strd	r1, r0, [r4]
     7be:	9803      	ldr	r0, [sp, #12]
     7c0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
     7c4:	466f      	mov	r7, sp
     7c6:	f890 5020 	ldrb.w	r5, [r0, #32]
     7ca:	2020      	movs	r0, #32
     7cc:	f10d 0a04 	add.w	sl, sp, #4
     7d0:	f88d 0000 	strb.w	r0, [sp]
     7d4:	2d20      	cmp	r5, #32
     7d6:	bf1c      	itt	ne
     7d8:	4835      	ldrne	r0, [pc, #212]	; (8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>)
     7da:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7de:	d024      	beq.n	82a <CONFIG_HEAP_MEM_POOL_SIZE+0x2a>
     7e0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7e4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     7e8:	6822      	ldr	r2, [r4, #0]
     7ea:	68c1      	ldr	r1, [r0, #12]
     7ec:	1a51      	subs	r1, r2, r1
     7ee:	0209      	lsls	r1, r1, #8
     7f0:	17ca      	asrs	r2, r1, #31
     7f2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     7f6:	3008      	adds	r0, #8
     7f8:	1209      	asrs	r1, r1, #8
     7fa:	d416      	bmi.n	82a <CONFIG_HEAP_MEM_POOL_SIZE+0x2a>
     7fc:	8961      	ldrh	r1, [r4, #10]
     7fe:	b171      	cbz	r1, 81e <CONFIG_HEAP_MEM_POOL_SIZE+0x1e>
     800:	8941      	ldrh	r1, [r0, #10]
     802:	b961      	cbnz	r1, 81e <CONFIG_HEAP_MEM_POOL_SIZE+0x1e>
     804:	f000 fcda 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     808:	f001 ff8c 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     80c:	6821      	ldr	r1, [r4, #0]
     80e:	1a08      	subs	r0, r1, r0
     810:	0200      	lsls	r0, r0, #8
     812:	17c1      	asrs	r1, r0, #31
     814:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     818:	1200      	asrs	r0, r0, #8
     81a:	2833      	cmp	r0, #51	; 0x33
     81c:	db05      	blt.n	82a <CONFIG_HEAP_MEM_POOL_SIZE+0x2a>
     81e:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     822:	703d      	strb	r5, [r7, #0]
     824:	7845      	ldrb	r5, [r0, #1]
     826:	2d20      	cmp	r5, #32
     828:	d1da      	bne.n	7e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e0>
     82a:	7838      	ldrb	r0, [r7, #0]
     82c:	f88a 0000 	strb.w	r0, [sl]
     830:	4627      	mov	r7, r4
     832:	2d20      	cmp	r5, #32
     834:	bf1c      	itt	ne
     836:	481e      	ldrne	r0, [pc, #120]	; (8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>)
     838:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     83c:	d030      	beq.n	8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     83e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     842:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     846:	6879      	ldr	r1, [r7, #4]
     848:	f8d9 2008 	ldr.w	r2, [r9, #8]
     84c:	4638      	mov	r0, r7
     84e:	1a51      	subs	r1, r2, r1
     850:	0209      	lsls	r1, r1, #8
     852:	17ca      	asrs	r2, r1, #31
     854:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     858:	f109 0808 	add.w	r8, r9, #8
     85c:	1209      	asrs	r1, r1, #8
     85e:	d412      	bmi.n	886 <CONFIG_HEAP_MEM_POOL_SIZE+0x86>
     860:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     864:	b1e1      	cbz	r1, 8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     866:	8941      	ldrh	r1, [r0, #10]
     868:	b9d1      	cbnz	r1, 8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     86a:	f000 fca7 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     86e:	f001 ff59 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     872:	f8d8 1000 	ldr.w	r1, [r8]
     876:	1a08      	subs	r0, r1, r0
     878:	0200      	lsls	r0, r0, #8
     87a:	17c1      	asrs	r1, r0, #31
     87c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     880:	1200      	asrs	r0, r0, #8
     882:	2833      	cmp	r0, #51	; 0x33
     884:	da0c      	bge.n	8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>
     886:	f88a 5000 	strb.w	r5, [sl]
     88a:	f899 0014 	ldrb.w	r0, [r9, #20]
     88e:	7b39      	ldrb	r1, [r7, #12]
     890:	4288      	cmp	r0, r1
     892:	f67f af34 	bls.w	6fe <CONFIG_BT_HCI_TX_STACK_SIZE+0xfe>
     896:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     89a:	7845      	ldrb	r5, [r0, #1]
     89c:	2d20      	cmp	r5, #32
     89e:	d1ce      	bne.n	83e <CONFIG_HEAP_MEM_POOL_SIZE+0x3e>
     8a0:	b00b      	add	sp, #44	; 0x2c
     8a2:	2001      	movs	r0, #1
     8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8a8:	20000f14 	.word	0x20000f14
     8ac:	20000b94 	.word	0x20000b94
     8b0:	20000e94 	.word	0x20000e94
     8b4:	1e847fff 	.word	0x1e847fff
     8b8:	07a12000 	.word	0x07a12000
     8bc:	f85ee000 	.word	0xf85ee000
     8c0:	1e848000 	.word	0x1e848000
     8c4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     8c8:	4604      	mov	r4, r0
     8ca:	483c      	ldr	r0, [pc, #240]	; (9bc <CONFIG_BT_RX_STACK_SIZE+0x124>)
     8cc:	460e      	mov	r6, r1
     8ce:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     8d2:	4f3b      	ldr	r7, [pc, #236]	; (9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>)
     8d4:	f890 5020 	ldrb.w	r5, [r0, #32]
     8d8:	2020      	movs	r0, #32
     8da:	4698      	mov	r8, r3
     8dc:	4692      	mov	sl, r2
     8de:	7010      	strb	r0, [r2, #0]
     8e0:	f507 7940 	add.w	r9, r7, #768	; 0x300
     8e4:	2d20      	cmp	r5, #32
     8e6:	bf18      	it	ne
     8e8:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     8ec:	d028      	beq.n	940 <CONFIG_BT_RX_STACK_SIZE+0xa8>
     8ee:	bf00      	nop
     8f0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     8f4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     8f8:	f100 0108 	add.w	r1, r0, #8
     8fc:	68c0      	ldr	r0, [r0, #12]
     8fe:	6822      	ldr	r2, [r4, #0]
     900:	1a10      	subs	r0, r2, r0
     902:	0200      	lsls	r0, r0, #8
     904:	17c2      	asrs	r2, r0, #31
     906:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     90a:	1200      	asrs	r0, r0, #8
     90c:	d418      	bmi.n	940 <CONFIG_BT_RX_STACK_SIZE+0xa8>
     90e:	8960      	ldrh	r0, [r4, #10]
     910:	b178      	cbz	r0, 932 <CONFIG_BT_RX_STACK_SIZE+0x9a>
     912:	8948      	ldrh	r0, [r1, #10]
     914:	b968      	cbnz	r0, 932 <CONFIG_BT_RX_STACK_SIZE+0x9a>
     916:	4608      	mov	r0, r1
     918:	f000 fc50 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     91c:	f001 ff02 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     920:	6821      	ldr	r1, [r4, #0]
     922:	1a08      	subs	r0, r1, r0
     924:	0200      	lsls	r0, r0, #8
     926:	17c1      	asrs	r1, r0, #31
     928:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     92c:	1200      	asrs	r0, r0, #8
     92e:	2833      	cmp	r0, #51	; 0x33
     930:	db06      	blt.n	940 <CONFIG_BT_RX_STACK_SIZE+0xa8>
     932:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     936:	f88a 5000 	strb.w	r5, [sl]
     93a:	7845      	ldrb	r5, [r0, #1]
     93c:	2d20      	cmp	r5, #32
     93e:	d1d7      	bne.n	8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>
     940:	f89a 0000 	ldrb.w	r0, [sl]
     944:	f888 0000 	strb.w	r0, [r8]
     948:	2d20      	cmp	r5, #32
     94a:	bf18      	it	ne
     94c:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     950:	d030      	beq.n	9b4 <CONFIG_BT_RX_STACK_SIZE+0x11c>
     952:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     956:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     95a:	6861      	ldr	r1, [r4, #4]
     95c:	f8d9 2008 	ldr.w	r2, [r9, #8]
     960:	4620      	mov	r0, r4
     962:	1a51      	subs	r1, r2, r1
     964:	0209      	lsls	r1, r1, #8
     966:	17ca      	asrs	r2, r1, #31
     968:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     96c:	f109 0608 	add.w	r6, r9, #8
     970:	1209      	asrs	r1, r1, #8
     972:	d410      	bmi.n	996 <CONFIG_BT_RX_STACK_SIZE+0xfe>
     974:	8971      	ldrh	r1, [r6, #10]
     976:	b1e9      	cbz	r1, 9b4 <CONFIG_BT_RX_STACK_SIZE+0x11c>
     978:	8941      	ldrh	r1, [r0, #10]
     97a:	b9d9      	cbnz	r1, 9b4 <CONFIG_BT_RX_STACK_SIZE+0x11c>
     97c:	f000 fc1e 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     980:	f001 fed0 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     984:	6831      	ldr	r1, [r6, #0]
     986:	1a08      	subs	r0, r1, r0
     988:	0200      	lsls	r0, r0, #8
     98a:	17c1      	asrs	r1, r0, #31
     98c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     990:	1200      	asrs	r0, r0, #8
     992:	2833      	cmp	r0, #51	; 0x33
     994:	da0e      	bge.n	9b4 <CONFIG_BT_RX_STACK_SIZE+0x11c>
     996:	f888 5000 	strb.w	r5, [r8]
     99a:	f899 0014 	ldrb.w	r0, [r9, #20]
     99e:	7b21      	ldrb	r1, [r4, #12]
     9a0:	4288      	cmp	r0, r1
     9a2:	d802      	bhi.n	9aa <CONFIG_BT_RX_STACK_SIZE+0x112>
     9a4:	2000      	movs	r0, #0
     9a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9aa:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     9ae:	7845      	ldrb	r5, [r0, #1]
     9b0:	2d20      	cmp	r5, #32
     9b2:	d1ce      	bne.n	952 <CONFIG_BT_RX_STACK_SIZE+0xba>
     9b4:	2001      	movs	r0, #1
     9b6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9ba:	0000      	.short	0x0000
     9bc:	20000f14 	.word	0x20000f14
     9c0:	20000b94 	.word	0x20000b94
     9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9c8:	f04f 0800 	mov.w	r8, #0
     9cc:	b098      	sub	sp, #96	; 0x60
     9ce:	4616      	mov	r6, r2
     9d0:	460d      	mov	r5, r1
     9d2:	46c3      	mov	fp, r8
     9d4:	f002 f91e 	bl	2c14 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     9d8:	4604      	mov	r4, r0
     9da:	2d01      	cmp	r5, #1
     9dc:	bf18      	it	ne
     9de:	2d02      	cmpne	r5, #2
     9e0:	d005      	beq.n	9ee <CONFIG_BT_RX_STACK_SIZE+0x156>
     9e2:	f640 1193 	movw	r1, #2451	; 0x993
     9e6:	f04f 0070 	mov.w	r0, #112	; 0x70
     9ea:	f002 fefd 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9ee:	49fd      	ldr	r1, [pc, #1012]	; (de4 <CONFIG_BT_RX_STACK_SIZE+0x54c>)
     9f0:	2001      	movs	r0, #1
     9f2:	6008      	str	r0, [r1, #0]
     9f4:	49fc      	ldr	r1, [pc, #1008]	; (de8 <CONFIG_BT_RX_STACK_SIZE+0x550>)
     9f6:	6889      	ldr	r1, [r1, #8]
     9f8:	6008      	str	r0, [r1, #0]
     9fa:	2000      	movs	r0, #0
     9fc:	900c      	str	r0, [sp, #48]	; 0x30
     9fe:	1e40      	subs	r0, r0, #1
     a00:	900e      	str	r0, [sp, #56]	; 0x38
     a02:	49fa      	ldr	r1, [pc, #1000]	; (dec <CONFIG_BT_RX_STACK_SIZE+0x554>)
     a04:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     a08:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     a0c:	3308      	adds	r3, #8
     a0e:	af0f      	add	r7, sp, #60	; 0x3c
     a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a12:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a16:	a80f      	add	r0, sp, #60	; 0x3c
     a18:	f000 fbd0 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     a1c:	900d      	str	r0, [sp, #52]	; 0x34
     a1e:	48f3      	ldr	r0, [pc, #972]	; (dec <CONFIG_BT_RX_STACK_SIZE+0x554>)
     a20:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     a24:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     a28:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     a2c:	f1b9 0f00 	cmp.w	r9, #0
     a30:	bf14      	ite	ne
     a32:	f04f 0a01 	movne.w	sl, #1
     a36:	f04f 0a00 	moveq.w	sl, #0
     a3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a3c:	9014      	str	r0, [sp, #80]	; 0x50
     a3e:	f1ba 0f00 	cmp.w	sl, #0
     a42:	d009      	beq.n	a58 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
     a44:	48ea      	ldr	r0, [pc, #936]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     a46:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     a4a:	b928      	cbnz	r0, a58 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
     a4c:	f002 fe68 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     a50:	2800      	cmp	r0, #0
     a52:	bf08      	it	eq
     a54:	2701      	moveq	r7, #1
     a56:	d000      	beq.n	a5a <CONFIG_BT_RX_STACK_SIZE+0x1c2>
     a58:	2700      	movs	r7, #0
     a5a:	48e6      	ldr	r0, [pc, #920]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     a5c:	2200      	movs	r2, #0
     a5e:	9215      	str	r2, [sp, #84]	; 0x54
     a60:	7800      	ldrb	r0, [r0, #0]
     a62:	4616      	mov	r6, r2
     a64:	2801      	cmp	r0, #1
     a66:	bf18      	it	ne
     a68:	2803      	cmpne	r0, #3
     a6a:	d140      	bne.n	aee <CONFIG_BT_RX_STACK_SIZE+0x256>
     a6c:	48e1      	ldr	r0, [pc, #900]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     a6e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     a72:	eba8 0009 	sub.w	r0, r8, r9
     a76:	9015      	str	r0, [sp, #84]	; 0x54
     a78:	45c8      	cmp	r8, r9
     a7a:	d938      	bls.n	aee <CONFIG_BT_RX_STACK_SIZE+0x256>
     a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     a7e:	ea6f 0108 	mvn.w	r1, r8
     a82:	f8df e374 	ldr.w	lr, [pc, #884]	; df8 <CONFIG_BT_RX_STACK_SIZE+0x560>
     a86:	1858      	adds	r0, r3, r1
     a88:	f10d 0c0c 	add.w	ip, sp, #12
     a8c:	aa17      	add	r2, sp, #92	; 0x5c
     a8e:	4573      	cmp	r3, lr
     a90:	d904      	bls.n	a9c <CONFIG_BT_RX_STACK_SIZE+0x204>
     a92:	f240 6116 	movw	r1, #1558	; 0x616
     a96:	2070      	movs	r0, #112	; 0x70
     a98:	f002 fea6 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a9c:	4bd7      	ldr	r3, [pc, #860]	; (dfc <CONFIG_BT_RX_STACK_SIZE+0x564>)
     a9e:	4299      	cmp	r1, r3
     aa0:	dd04      	ble.n	aac <CONFIG_BT_RX_STACK_SIZE+0x214>
     aa2:	f240 6117 	movw	r1, #1559	; 0x617
     aa6:	2070      	movs	r0, #112	; 0x70
     aa8:	f002 fe9e 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aac:	4bd4      	ldr	r3, [pc, #848]	; (e00 <CONFIG_BT_RX_STACK_SIZE+0x568>)
     aae:	4299      	cmp	r1, r3
     ab0:	da04      	bge.n	abc <CONFIG_BT_RX_STACK_SIZE+0x224>
     ab2:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     ab6:	2070      	movs	r0, #112	; 0x70
     ab8:	f002 fe96 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     abc:	49d1      	ldr	r1, [pc, #836]	; (e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>)
     abe:	4281      	cmp	r1, r0
     ac0:	bfdc      	itt	le
     ac2:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ac6:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     aca:	dd05      	ble.n	ad8 <CONFIG_BT_RX_STACK_SIZE+0x240>
     acc:	2800      	cmp	r0, #0
     ace:	bfbc      	itt	lt
     ad0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     ad4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     ad8:	4661      	mov	r1, ip
     ada:	f001 fe3f 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ade:	9803      	ldr	r0, [sp, #12]
     ae0:	990f      	ldr	r1, [sp, #60]	; 0x3c
     ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ae6:	9003      	str	r0, [sp, #12]
     ae8:	1a08      	subs	r0, r1, r0
     aea:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     aee:	2f00      	cmp	r7, #0
     af0:	bf18      	it	ne
     af2:	2632      	movne	r6, #50	; 0x32
     af4:	d104      	bne.n	b00 <CONFIG_BT_RX_STACK_SIZE+0x268>
     af6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     afa:	2800      	cmp	r0, #0
     afc:	bf18      	it	ne
     afe:	2602      	movne	r6, #2
     b00:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b04:	d008      	beq.n	b18 <CONFIG_BT_RX_STACK_SIZE+0x280>
     b06:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b08:	1b00      	subs	r0, r0, r4
     b0a:	0200      	lsls	r0, r0, #8
     b0c:	17c1      	asrs	r1, r0, #31
     b0e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b12:	1200      	asrs	r0, r0, #8
     b14:	2801      	cmp	r0, #1
     b16:	da02      	bge.n	b1e <CONFIG_BT_RX_STACK_SIZE+0x286>
     b18:	2104      	movs	r1, #4
     b1a:	9818      	ldr	r0, [sp, #96]	; 0x60
     b1c:	e00b      	b.n	b36 <CONFIG_BT_RX_STACK_SIZE+0x29e>
     b1e:	b147      	cbz	r7, b32 <CONFIG_BT_RX_STACK_SIZE+0x29a>
     b20:	48b3      	ldr	r0, [pc, #716]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     b22:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b26:	b120      	cbz	r0, b32 <CONFIG_BT_RX_STACK_SIZE+0x29a>
     b28:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b2c:	1c06      	adds	r6, r0, #0
     b2e:	bf18      	it	ne
     b30:	2602      	movne	r6, #2
     b32:	4620      	mov	r0, r4
     b34:	2101      	movs	r1, #1
     b36:	f1b9 0f00 	cmp.w	r9, #0
     b3a:	d002      	beq.n	b42 <CONFIG_BT_RX_STACK_SIZE+0x2aa>
     b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b3e:	2b1e      	cmp	r3, #30
     b40:	da02      	bge.n	b48 <CONFIG_BT_RX_STACK_SIZE+0x2b0>
     b42:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     b46:	b113      	cbz	r3, b4e <CONFIG_BT_RX_STACK_SIZE+0x2b6>
     b48:	f04f 0b01 	mov.w	fp, #1
     b4c:	1e49      	subs	r1, r1, #1
     b4e:	198b      	adds	r3, r1, r6
     b50:	49a8      	ldr	r1, [pc, #672]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     b52:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     b56:	7809      	ldrb	r1, [r1, #0]
     b58:	9115      	str	r1, [sp, #84]	; 0x54
     b5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
     b5c:	1a89      	subs	r1, r1, r2
     b5e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     b62:	ebac 0100 	sub.w	r1, ip, r0
     b66:	0209      	lsls	r1, r1, #8
     b68:	17ce      	asrs	r6, r1, #31
     b6a:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     b6e:	1209      	asrs	r1, r1, #8
     b70:	4299      	cmp	r1, r3
     b72:	db18      	blt.n	ba6 <CONFIG_BT_RX_STACK_SIZE+0x30e>
     b74:	2a00      	cmp	r2, #0
     b76:	bf18      	it	ne
     b78:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     b7c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     b7e:	9705      	str	r7, [sp, #20]
     b80:	2700      	movs	r7, #0
     b82:	f001 ff41 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b86:	1a30      	subs	r0, r6, r0
     b88:	0200      	lsls	r0, r0, #8
     b8a:	17c1      	asrs	r1, r0, #31
     b8c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b90:	1200      	asrs	r0, r0, #8
     b92:	283e      	cmp	r0, #62	; 0x3e
     b94:	da3f      	bge.n	c16 <CONFIG_BT_RX_STACK_SIZE+0x37e>
     b96:	2d01      	cmp	r5, #1
     b98:	d020      	beq.n	bdc <CONFIG_BT_RX_STACK_SIZE+0x344>
     b9a:	1e70      	subs	r0, r6, #1
     b9c:	9905      	ldr	r1, [sp, #20]
     b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ba2:	b319      	cbz	r1, bec <CONFIG_BT_RX_STACK_SIZE+0x354>
     ba4:	e02d      	b.n	c02 <CONFIG_BT_RX_STACK_SIZE+0x36a>
     ba6:	b182      	cbz	r2, bca <CONFIG_BT_RX_STACK_SIZE+0x332>
     ba8:	f1be 0f00 	cmp.w	lr, #0
     bac:	bf04      	itt	eq
     bae:	9915      	ldreq	r1, [sp, #84]	; 0x54
     bb0:	2903      	cmpeq	r1, #3
     bb2:	d00a      	beq.n	bca <CONFIG_BT_RX_STACK_SIZE+0x332>
     bb4:	b927      	cbnz	r7, bc0 <CONFIG_BT_RX_STACK_SIZE+0x328>
     bb6:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     bba:	2900      	cmp	r1, #0
     bbc:	bf18      	it	ne
     bbe:	1e9b      	subne	r3, r3, #2
     bc0:	2200      	movs	r2, #0
     bc2:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     bc6:	4690      	mov	r8, r2
     bc8:	e7c7      	b.n	b5a <CONFIG_BT_RX_STACK_SIZE+0x2c2>
     bca:	bb07      	cbnz	r7, c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     bcc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     bd0:	b1e9      	cbz	r1, c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     bd2:	2100      	movs	r1, #0
     bd4:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     bd8:	1e9b      	subs	r3, r3, #2
     bda:	e7be      	b.n	b5a <CONFIG_BT_RX_STACK_SIZE+0x2c2>
     bdc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     be0:	d120      	bne.n	c24 <CONFIG_BT_RX_STACK_SIZE+0x38c>
     be2:	f640 110c 	movw	r1, #2316	; 0x90c
     be6:	2070      	movs	r0, #112	; 0x70
     be8:	f002 fdfe 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bec:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bf0:	d007      	beq.n	c02 <CONFIG_BT_RX_STACK_SIZE+0x36a>
     bf2:	1a21      	subs	r1, r4, r0
     bf4:	0209      	lsls	r1, r1, #8
     bf6:	17ca      	asrs	r2, r1, #31
     bf8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     bfc:	1209      	asrs	r1, r1, #8
     bfe:	2904      	cmp	r1, #4
     c00:	dd03      	ble.n	c0a <CONFIG_BT_RX_STACK_SIZE+0x372>
     c02:	4604      	mov	r4, r0
     c04:	f001 ff06 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c08:	e00c      	b.n	c24 <CONFIG_BT_RX_STACK_SIZE+0x38c>
     c0a:	2900      	cmp	r1, #0
     c0c:	dd0a      	ble.n	c24 <CONFIG_BT_RX_STACK_SIZE+0x38c>
     c0e:	b01b      	add	sp, #108	; 0x6c
     c10:	2000      	movs	r0, #0
     c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c16:	1e70      	subs	r0, r6, #1
     c18:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c1c:	4620      	mov	r0, r4
     c1e:	f001 fef9 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c22:	4657      	mov	r7, sl
     c24:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c28:	d028      	beq.n	c7c <CONFIG_BT_RX_STACK_SIZE+0x3e4>
     c2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c2c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     c30:	1b00      	subs	r0, r0, r4
     c32:	f08b 0301 	eor.w	r3, fp, #1
     c36:	4a74      	ldr	r2, [pc, #464]	; (e08 <CONFIG_BT_RX_STACK_SIZE+0x570>)
     c38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c3c:	ebac 0c04 	sub.w	ip, ip, r4
     c40:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     c44:	4283      	cmp	r3, r0
     c46:	bf98      	it	ls
     c48:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     c4c:	d2df      	bcs.n	c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     c4e:	4562      	cmp	r2, ip
     c50:	d3dd      	bcc.n	c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     c52:	4620      	mov	r0, r4
     c54:	f00a ff26 	bl	baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c58:	4967      	ldr	r1, [pc, #412]	; (df8 <CONFIG_BT_RX_STACK_SIZE+0x560>)
     c5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     c5c:	1c4b      	adds	r3, r1, #1
     c5e:	1a16      	subs	r6, r2, r0
     c60:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     c64:	bf24      	itt	cs
     c66:	eba0 0c02 	subcs.w	ip, r0, r2
     c6a:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c6e:	d310      	bcc.n	c92 <CONFIG_BT_RX_STACK_SIZE+0x3fa>
     c70:	42b1      	cmp	r1, r6
     c72:	d208      	bcs.n	c86 <CONFIG_BT_RX_STACK_SIZE+0x3ee>
     c74:	1a08      	subs	r0, r1, r0
     c76:	4410      	add	r0, r2
     c78:	1c46      	adds	r6, r0, #1
     c7a:	e00a      	b.n	c92 <CONFIG_BT_RX_STACK_SIZE+0x3fa>
     c7c:	f640 212b 	movw	r1, #2603	; 0xa2b
     c80:	2070      	movs	r0, #112	; 0x70
     c82:	f002 fdb1 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c86:	4561      	cmp	r1, ip
     c88:	d22c      	bcs.n	ce4 <CONFIG_BT_RX_STACK_SIZE+0x44c>
     c8a:	1a89      	subs	r1, r1, r2
     c8c:	4408      	add	r0, r1
     c8e:	1c40      	adds	r0, r0, #1
     c90:	4246      	negs	r6, r0
     c92:	4857      	ldr	r0, [pc, #348]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     c94:	7f80      	ldrb	r0, [r0, #30]
     c96:	b350      	cbz	r0, cee <CONFIG_BT_RX_STACK_SIZE+0x456>
     c98:	4628      	mov	r0, r5
     c9a:	4645      	mov	r5, r8
     c9c:	f04f 0b00 	mov.w	fp, #0
     ca0:	46d8      	mov	r8, fp
     ca2:	2801      	cmp	r0, #1
     ca4:	d005      	beq.n	cb2 <CONFIG_BT_RX_STACK_SIZE+0x41a>
     ca6:	2002      	movs	r0, #2
     ca8:	f002 f8fc 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cac:	2001      	movs	r0, #1
     cae:	f002 f8f9 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cb2:	45a9      	cmp	r9, r5
     cb4:	d22c      	bcs.n	d10 <CONFIG_BT_RX_STACK_SIZE+0x478>
     cb6:	eba6 0105 	sub.w	r1, r6, r5
     cba:	f04f 0301 	mov.w	r3, #1
     cbe:	f04f 0203 	mov.w	r2, #3
     cc2:	f04f 0002 	mov.w	r0, #2
     cc6:	f002 f825 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cca:	2800      	cmp	r0, #0
     ccc:	bf08      	it	eq
     cce:	f04f 0801 	moveq.w	r8, #1
     cd2:	f1b9 0f00 	cmp.w	r9, #0
     cd6:	d035      	beq.n	d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     cd8:	2301      	movs	r3, #1
     cda:	eba6 0109 	sub.w	r1, r6, r9
     cde:	2203      	movs	r2, #3
     ce0:	4618      	mov	r0, r3
     ce2:	e023      	b.n	d2c <CONFIG_BT_RX_STACK_SIZE+0x494>
     ce4:	f640 310b 	movw	r1, #2827	; 0xb0b
     ce8:	2070      	movs	r0, #112	; 0x70
     cea:	f002 fd7d 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cee:	45c1      	cmp	r9, r8
     cf0:	bf34      	ite	cc
     cf2:	4640      	movcc	r0, r8
     cf4:	4648      	movcs	r0, r9
     cf6:	f1bb 0f00 	cmp.w	fp, #0
     cfa:	bf14      	ite	ne
     cfc:	2100      	movne	r1, #0
     cfe:	211e      	moveq	r1, #30
     d00:	4408      	add	r0, r1
     d02:	42b0      	cmp	r0, r6
     d04:	dbc8      	blt.n	c98 <CONFIG_BT_RX_STACK_SIZE+0x400>
     d06:	f640 213e 	movw	r1, #2622	; 0xa3e
     d0a:	2070      	movs	r0, #112	; 0x70
     d0c:	f002 fd6c 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d10:	d910      	bls.n	d34 <CONFIG_BT_RX_STACK_SIZE+0x49c>
     d12:	2301      	movs	r3, #1
     d14:	eba6 0109 	sub.w	r1, r6, r9
     d18:	2203      	movs	r2, #3
     d1a:	4618      	mov	r0, r3
     d1c:	f001 fffa 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d20:	b328      	cbz	r0, d6e <CONFIG_BT_RX_STACK_SIZE+0x4d6>
     d22:	b17d      	cbz	r5, d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     d24:	1b71      	subs	r1, r6, r5
     d26:	2301      	movs	r3, #1
     d28:	2203      	movs	r2, #3
     d2a:	2002      	movs	r0, #2
     d2c:	f001 fff2 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d30:	b1e8      	cbz	r0, d6e <CONFIG_BT_RX_STACK_SIZE+0x4d6>
     d32:	e007      	b.n	d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     d34:	ea55 0009 	orrs.w	r0, r5, r9
     d38:	d004      	beq.n	d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     d3a:	f640 1176 	movw	r1, #2422	; 0x976
     d3e:	2070      	movs	r0, #112	; 0x70
     d40:	f002 fd52 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d44:	2301      	movs	r3, #1
     d46:	2203      	movs	r2, #3
     d48:	4631      	mov	r1, r6
     d4a:	2000      	movs	r0, #0
     d4c:	f001 ffe2 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d50:	b168      	cbz	r0, d6e <CONFIG_BT_RX_STACK_SIZE+0x4d6>
     d52:	2501      	movs	r5, #1
     d54:	f1b8 0f00 	cmp.w	r8, #0
     d58:	d003      	beq.n	d62 <CONFIG_BT_RX_STACK_SIZE+0x4ca>
     d5a:	9814      	ldr	r0, [sp, #80]	; 0x50
     d5c:	900f      	str	r0, [sp, #60]	; 0x3c
     d5e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     d62:	f8df 80a8 	ldr.w	r8, [pc, #168]	; e0c <CONFIG_BT_RX_STACK_SIZE+0x574>
     d66:	f1ba 0f00 	cmp.w	sl, #0
     d6a:	d10e      	bne.n	d8a <CONFIG_BT_RX_STACK_SIZE+0x4f2>
     d6c:	e009      	b.n	d82 <CONFIG_BT_RX_STACK_SIZE+0x4ea>
     d6e:	2002      	movs	r0, #2
     d70:	f002 f898 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d74:	2001      	movs	r0, #1
     d76:	f002 f895 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d7a:	b01b      	add	sp, #108	; 0x6c
     d7c:	2000      	movs	r0, #0
     d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d82:	481b      	ldr	r0, [pc, #108]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     d84:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     d88:	b100      	cbz	r0, d8c <CONFIG_BT_RX_STACK_SIZE+0x4f4>
     d8a:	b34f      	cbz	r7, de0 <CONFIG_BT_RX_STACK_SIZE+0x548>
     d8c:	f8df a060 	ldr.w	sl, [pc, #96]	; df0 <CONFIG_BT_RX_STACK_SIZE+0x558>
     d90:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d94:	b118      	cbz	r0, d9e <CONFIG_BT_RX_STACK_SIZE+0x506>
     d96:	f002 fb6d 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d9a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     d9e:	b307      	cbz	r7, de2 <CONFIG_BT_RX_STACK_SIZE+0x54a>
     da0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     da4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     da8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     dac:	f8c8 0000 	str.w	r0, [r8]
     db0:	2300      	movs	r3, #0
     db2:	2203      	movs	r2, #3
     db4:	2005      	movs	r0, #5
     db6:	f001 ffad 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     dba:	b368      	cbz	r0, e18 <CONFIG_BT_RX_STACK_SIZE+0x580>
     dbc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     dc0:	2005      	movs	r0, #5
     dc2:	f002 f94f 	bl	3064 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     dc6:	4912      	ldr	r1, [pc, #72]	; (e10 <CONFIG_BT_RX_STACK_SIZE+0x578>)
     dc8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     dcc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     dd0:	4910      	ldr	r1, [pc, #64]	; (e14 <CONFIG_BT_RX_STACK_SIZE+0x57c>)
     dd2:	12e0      	asrs	r0, r4, #11
     dd4:	6008      	str	r0, [r1, #0]
     dd6:	4c06      	ldr	r4, [pc, #24]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     dd8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ddc:	b3f0      	cbz	r0, e5c <CONFIG_BT_RX_STACK_SIZE+0x5c4>
     dde:	e05b      	b.n	e98 <CONFIG_BT_RX_STACK_SIZE+0x600>
     de0:	e01b      	b.n	e1a <CONFIG_BT_RX_STACK_SIZE+0x582>
     de2:	e01f      	b.n	e24 <CONFIG_BT_RX_STACK_SIZE+0x58c>
     de4:	40000508 	.word	0x40000508
     de8:	20000014 	.word	0x20000014
     dec:	20000b94 	.word	0x20000b94
     df0:	20000f14 	.word	0x20000f14
     df4:	20000016 	.word	0x20000016
     df8:	1e847fff 	.word	0x1e847fff
     dfc:	07a12000 	.word	0x07a12000
     e00:	f85ee000 	.word	0xf85ee000
     e04:	1e848000 	.word	0x1e848000
     e08:	003fffff 	.word	0x003fffff
     e0c:	4001f508 	.word	0x4001f508
     e10:	4001f098 	.word	0x4001f098
     e14:	4001f504 	.word	0x4001f504
     e18:	e035      	b.n	e86 <CONFIG_BT_RX_STACK_SIZE+0x5ee>
     e1a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ed4 <CONFIG_BT_RX_STACK_SIZE+0x63c>
     e1e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e22:	b358      	cbz	r0, e7c <CONFIG_BT_RX_STACK_SIZE+0x5e4>
     e24:	4c2b      	ldr	r4, [pc, #172]	; (ed4 <CONFIG_BT_RX_STACK_SIZE+0x63c>)
     e26:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e2a:	b150      	cbz	r0, e42 <CONFIG_BT_RX_STACK_SIZE+0x5aa>
     e2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e30:	f8c8 0000 	str.w	r0, [r8]
     e34:	2005      	movs	r0, #5
     e36:	f002 f835 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     e3a:	f002 fb83 	bl	3544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     e3e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     e42:	ac0c      	add	r4, sp, #48	; 0x30
     e44:	4824      	ldr	r0, [pc, #144]	; (ed8 <CONFIG_BT_RX_STACK_SIZE+0x640>)
     e46:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e4a:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     e4e:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     e52:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     e56:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     e5a:	e000      	b.n	e5e <CONFIG_BT_RX_STACK_SIZE+0x5c6>
     e5c:	e018      	b.n	e90 <CONFIG_BT_RX_STACK_SIZE+0x5f8>
     e5e:	ac10      	add	r4, sp, #64	; 0x40
     e60:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e64:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     e68:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     e6c:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     e70:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     e74:	b01b      	add	sp, #108	; 0x6c
     e76:	2001      	movs	r0, #1
     e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e7c:	f002 fb16 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e80:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e84:	e78b      	b.n	d9e <CONFIG_BT_RX_STACK_SIZE+0x506>
     e86:	f240 3151 	movw	r1, #849	; 0x351
     e8a:	2070      	movs	r0, #112	; 0x70
     e8c:	f002 fcac 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e90:	f002 fb4a 	bl	3528 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e94:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     e98:	eba6 0009 	sub.w	r0, r6, r9
     e9c:	f1a0 0119 	sub.w	r1, r0, #25
     ea0:	2900      	cmp	r1, #0
     ea2:	dc04      	bgt.n	eae <CONFIG_BT_RX_STACK_SIZE+0x616>
     ea4:	f640 2168 	movw	r1, #2664	; 0xa68
     ea8:	2070      	movs	r0, #112	; 0x70
     eaa:	f002 fc9d 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eae:	2203      	movs	r2, #3
     eb0:	2301      	movs	r3, #1
     eb2:	4610      	mov	r0, r2
     eb4:	f001 ff2e 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     eb8:	b138      	cbz	r0, eca <CONFIG_BT_RX_STACK_SIZE+0x632>
     eba:	4808      	ldr	r0, [pc, #32]	; (edc <CONFIG_BT_RX_STACK_SIZE+0x644>)
     ebc:	6880      	ldr	r0, [r0, #8]
     ebe:	f8c0 b000 	str.w	fp, [r0]
     ec2:	4807      	ldr	r0, [pc, #28]	; (ee0 <CONFIG_BT_RX_STACK_SIZE+0x648>)
     ec4:	f8c0 b000 	str.w	fp, [r0]
     ec8:	e7bb      	b.n	e42 <CONFIG_BT_RX_STACK_SIZE+0x5aa>
     eca:	f640 2173 	movw	r1, #2675	; 0xa73
     ece:	2070      	movs	r0, #112	; 0x70
     ed0:	f002 fc8a 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ed4:	20000f14 	.word	0x20000f14
     ed8:	20000b94 	.word	0x20000b94
     edc:	20000014 	.word	0x20000014
     ee0:	40000508 	.word	0x40000508
     ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ee8:	4606      	mov	r6, r0
     eea:	b083      	sub	sp, #12
     eec:	7808      	ldrb	r0, [r1, #0]
     eee:	7390      	strb	r0, [r2, #14]
     ef0:	7acf      	ldrb	r7, [r1, #11]
     ef2:	7357      	strb	r7, [r2, #13]
     ef4:	7a88      	ldrb	r0, [r1, #10]
     ef6:	7310      	strb	r0, [r2, #12]
     ef8:	8908      	ldrh	r0, [r1, #8]
     efa:	4614      	mov	r4, r2
     efc:	8150      	strh	r0, [r2, #10]
     efe:	460d      	mov	r5, r1
     f00:	780a      	ldrb	r2, [r1, #0]
     f02:	495f      	ldr	r1, [pc, #380]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     f04:	4699      	mov	r9, r3
     f06:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     f0a:	424b      	negs	r3, r1
     f0c:	f1ac 0801 	sub.w	r8, ip, #1
     f10:	b15a      	cbz	r2, f2a <CONFIG_BT_RX_STACK_SIZE+0x692>
     f12:	43c0      	mvns	r0, r0
     f14:	f8d5 8004 	ldr.w	r8, [r5, #4]
     f18:	f104 0208 	add.w	r2, r4, #8
     f1c:	4288      	cmp	r0, r1
     f1e:	dd3d      	ble.n	f9c <CONFIG_BT_RX_STACK_SIZE+0x704>
     f20:	f240 6117 	movw	r1, #1559	; 0x617
     f24:	2070      	movs	r0, #112	; 0x70
     f26:	f002 fc5f 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f2a:	68ee      	ldr	r6, [r5, #12]
     f2c:	686d      	ldr	r5, [r5, #4]
     f2e:	ea6f 0900 	mvn.w	r9, r0
     f32:	f104 0208 	add.w	r2, r4, #8
     f36:	eb06 0009 	add.w	r0, r6, r9
     f3a:	4546      	cmp	r6, r8
     f3c:	d904      	bls.n	f48 <CONFIG_BT_RX_STACK_SIZE+0x6b0>
     f3e:	f240 6116 	movw	r1, #1558	; 0x616
     f42:	2070      	movs	r0, #112	; 0x70
     f44:	f002 fc50 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f48:	4589      	cmp	r9, r1
     f4a:	dce9      	bgt.n	f20 <CONFIG_BT_RX_STACK_SIZE+0x688>
     f4c:	4599      	cmp	r9, r3
     f4e:	db28      	blt.n	fa2 <CONFIG_BT_RX_STACK_SIZE+0x70a>
     f50:	4584      	cmp	ip, r0
     f52:	bfdc      	itt	le
     f54:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f58:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f5c:	dd05      	ble.n	f6a <CONFIG_BT_RX_STACK_SIZE+0x6d2>
     f5e:	2800      	cmp	r0, #0
     f60:	bfbc      	itt	lt
     f62:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f66:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f6a:	4621      	mov	r1, r4
     f6c:	f001 fbf6 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f70:	6820      	ldr	r0, [r4, #0]
     f72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f76:	1970      	adds	r0, r6, r5
     f78:	1c40      	adds	r0, r0, #1
     f7a:	6021      	str	r1, [r4, #0]
     f7c:	2f00      	cmp	r7, #0
     f7e:	bf08      	it	eq
     f80:	307a      	addeq	r0, #122	; 0x7a
     f82:	d003      	beq.n	f8c <CONFIG_BT_RX_STACK_SIZE+0x6f4>
     f84:	2f01      	cmp	r7, #1
     f86:	bf08      	it	eq
     f88:	3044      	addeq	r0, #68	; 0x44
     f8a:	d12d      	bne.n	fe8 <CONFIG_BT_RX_STACK_SIZE+0x750>
     f8c:	f001 fbca 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f94:	6060      	str	r0, [r4, #4]
     f96:	b003      	add	sp, #12
     f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f9c:	4601      	mov	r1, r0
     f9e:	4298      	cmp	r0, r3
     fa0:	da04      	bge.n	fac <CONFIG_BT_RX_STACK_SIZE+0x714>
     fa2:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     fa6:	2070      	movs	r0, #112	; 0x70
     fa8:	f002 fc1e 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fac:	4584      	cmp	ip, r0
     fae:	bfdc      	itt	le
     fb0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     fb4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     fb8:	dd05      	ble.n	fc6 <CONFIG_BT_RX_STACK_SIZE+0x72e>
     fba:	2800      	cmp	r0, #0
     fbc:	bfbc      	itt	lt
     fbe:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     fc2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     fc6:	4621      	mov	r1, r4
     fc8:	f001 fbc8 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fcc:	6820      	ldr	r0, [r4, #0]
     fce:	2f00      	cmp	r7, #0
     fd0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fd4:	f108 0001 	add.w	r0, r8, #1
     fd8:	6021      	str	r1, [r4, #0]
     fda:	bf08      	it	eq
     fdc:	307a      	addeq	r0, #122	; 0x7a
     fde:	d008      	beq.n	ff2 <CONFIG_BT_RX_STACK_SIZE+0x75a>
     fe0:	2f01      	cmp	r7, #1
     fe2:	bf08      	it	eq
     fe4:	3044      	addeq	r0, #68	; 0x44
     fe6:	d004      	beq.n	ff2 <CONFIG_BT_RX_STACK_SIZE+0x75a>
     fe8:	f240 61be 	movw	r1, #1726	; 0x6be
     fec:	2070      	movs	r0, #112	; 0x70
     fee:	f002 fbfb 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ff2:	f001 fb97 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ff6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ffa:	6061      	str	r1, [r4, #4]
     ffc:	8960      	ldrh	r0, [r4, #10]
     ffe:	aa01      	add	r2, sp, #4
    1000:	4669      	mov	r1, sp
    1002:	f001 fbab 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1006:	481f      	ldr	r0, [pc, #124]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
    1008:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    100c:	2920      	cmp	r1, #32
    100e:	d023      	beq.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    1010:	6900      	ldr	r0, [r0, #16]
    1012:	1d40      	adds	r0, r0, #5
    1014:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1018:	e9d4 2100 	ldrd	r2, r1, [r4]
    101c:	1a89      	subs	r1, r1, r2
    101e:	6020      	str	r0, [r4, #0]
    1020:	4408      	add	r0, r1
    1022:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1026:	6060      	str	r0, [r4, #4]
    1028:	464b      	mov	r3, r9
    102a:	4632      	mov	r2, r6
    102c:	4621      	mov	r1, r4
    102e:	68e8      	ldr	r0, [r5, #12]
    1030:	f7ff fad2 	bl	5d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1034:	2800      	cmp	r0, #0
    1036:	bf1c      	itt	ne
    1038:	b003      	addne	sp, #12
    103a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    103e:	e9d4 1000 	ldrd	r1, r0, [r4]
    1042:	1a40      	subs	r0, r0, r1
    1044:	4430      	add	r0, r6
    1046:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    104a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    104e:	e9c4 1000 	strd	r1, r0, [r4]
    1052:	b003      	add	sp, #12
    1054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1058:	8960      	ldrh	r0, [r4, #10]
    105a:	f106 0709 	add.w	r7, r6, #9
    105e:	b120      	cbz	r0, 106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    1060:	f002 fb5e 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1064:	2800      	cmp	r0, #0
    1066:	bf08      	it	eq
    1068:	3732      	addeq	r7, #50	; 0x32
    106a:	4807      	ldr	r0, [pc, #28]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    106c:	7841      	ldrb	r1, [r0, #1]
    106e:	9800      	ldr	r0, [sp, #0]
    1070:	4281      	cmp	r1, r0
    1072:	bf84      	itt	hi
    1074:	1a08      	subhi	r0, r1, r0
    1076:	4407      	addhi	r7, r0
    1078:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    107c:	e7cc      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    107e:	0000      	.short	0x0000
    1080:	07a12000 	.word	0x07a12000
    1084:	20000f14 	.word	0x20000f14
    1088:	20000016 	.word	0x20000016
    108c:	b510      	push	{r4, lr}
    108e:	4c15      	ldr	r4, [pc, #84]	; (10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
    1090:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1094:	2820      	cmp	r0, #32
    1096:	bf18      	it	ne
    1098:	bd10      	popne	{r4, pc}
    109a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    109e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    10a2:	f890 1020 	ldrb.w	r1, [r0, #32]
    10a6:	2920      	cmp	r1, #32
    10a8:	d017      	beq.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
    10aa:	f8df c03c 	ldr.w	ip, [pc, #60]	; 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10ae:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    10b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    10b6:	785b      	ldrb	r3, [r3, #1]
    10b8:	f880 3020 	strb.w	r3, [r0, #32]
    10bc:	2301      	movs	r3, #1
    10be:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    10c2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    10c6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    10ca:	2002      	movs	r0, #2
    10cc:	f000 f8b0 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    10d0:	2000      	movs	r0, #0
    10d2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    10d6:	77a0      	strb	r0, [r4, #30]
    10d8:	bd10      	pop	{r4, pc}
    10da:	f240 319e 	movw	r1, #926	; 0x39e
    10de:	2070      	movs	r0, #112	; 0x70
    10e0:	f002 fb82 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10e4:	20000f14 	.word	0x20000f14
    10e8:	20000e94 	.word	0x20000e94
    10ec:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    10f4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    10f8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    10fc:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1100:	2c20      	cmp	r4, #32
    1102:	bf08      	it	eq
    1104:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1108:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    110c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
    1110:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1114:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1118:	2607      	movs	r6, #7
    111a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    111e:	2801      	cmp	r0, #1
    1120:	d00e      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    1122:	2804      	cmp	r0, #4
    1124:	bf08      	it	eq
    1126:	2602      	moveq	r6, #2
    1128:	d00a      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    112a:	2805      	cmp	r0, #5
    112c:	bf0c      	ite	eq
    112e:	2603      	moveq	r6, #3
    1130:	2806      	cmpne	r0, #6
    1132:	d005      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    1134:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1138:	f04f 0070 	mov.w	r0, #112	; 0x70
    113c:	f002 fb54 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1140:	f1bb 0f00 	cmp.w	fp, #0
    1144:	bf18      	it	ne
    1146:	f3af 8000 	nopne.w
    114a:	f3ef 8010 	mrs	r0, PRIMASK
    114e:	b672      	cpsid	i
    1150:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1154:	784a      	ldrb	r2, [r1, #1]
    1156:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    115a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    115e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1162:	42a2      	cmp	r2, r4
    1164:	bf04      	itt	eq
    1166:	2220      	moveq	r2, #32
    1168:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    116c:	b1b8      	cbz	r0, 119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
    116e:	462a      	mov	r2, r5
    1170:	4621      	mov	r1, r4
    1172:	2001      	movs	r0, #1
    1174:	f000 f85c 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1178:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    117c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1180:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1184:	6840      	ldr	r0, [r0, #4]
    1186:	4631      	mov	r1, r6
    1188:	4790      	blx	r2
    118a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    118e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1192:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1196:	2c20      	cmp	r4, #32
    1198:	d1bc      	bne.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    119a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    119e:	4806      	ldr	r0, [pc, #24]	; (11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>)
    11a0:	2800      	cmp	r0, #0
    11a2:	bf18      	it	ne
    11a4:	f3af 8000 	nopne.w
    11a8:	b662      	cpsie	i
    11aa:	e7e0      	b.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    11ac:	20000f14 	.word	0x20000f14
    11b0:	00000000 	.word	0x00000000
    11b4:	20000e94 	.word	0x20000e94
    11b8:	00000000 	.word	0x00000000
    11bc:	b510      	push	{r4, lr}
    11be:	4604      	mov	r4, r0
    11c0:	6800      	ldr	r0, [r0, #0]
    11c2:	f00a fc6f 	bl	baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    11c6:	4602      	mov	r2, r0
    11c8:	8960      	ldrh	r0, [r4, #10]
    11ca:	7a21      	ldrb	r1, [r4, #8]
    11cc:	4b14      	ldr	r3, [pc, #80]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    11ce:	4408      	add	r0, r1
    11d0:	1c41      	adds	r1, r0, #1
    11d2:	1850      	adds	r0, r2, r1
    11d4:	429a      	cmp	r2, r3
    11d6:	d904      	bls.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    11d8:	f240 6116 	movw	r1, #1558	; 0x616
    11dc:	2070      	movs	r0, #112	; 0x70
    11de:	f002 fb03 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11e2:	4a10      	ldr	r2, [pc, #64]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
    11e4:	4291      	cmp	r1, r2
    11e6:	dd04      	ble.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    11e8:	f240 6117 	movw	r1, #1559	; 0x617
    11ec:	2070      	movs	r0, #112	; 0x70
    11ee:	f002 fafb 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11f2:	4a0d      	ldr	r2, [pc, #52]	; (1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
    11f4:	4291      	cmp	r1, r2
    11f6:	da04      	bge.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
    11f8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    11fc:	2070      	movs	r0, #112	; 0x70
    11fe:	f002 faf3 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1202:	490a      	ldr	r1, [pc, #40]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    1204:	4281      	cmp	r1, r0
    1206:	bfde      	ittt	le
    1208:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    120c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1210:	bd10      	pople	{r4, pc}
    1212:	2800      	cmp	r0, #0
    1214:	bfbc      	itt	lt
    1216:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    121a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    121e:	bd10      	pop	{r4, pc}
    1220:	1e847fff 	.word	0x1e847fff
    1224:	07a12000 	.word	0x07a12000
    1228:	f85ee000 	.word	0xf85ee000
    122c:	1e848000 	.word	0x1e848000
    1230:	f8df c054 	ldr.w	ip, [pc, #84]	; 1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    1234:	b510      	push	{r4, lr}
    1236:	2300      	movs	r3, #0
    1238:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    123c:	2807      	cmp	r0, #7
    123e:	d21e      	bcs.n	127e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
    1240:	e8df f000 	tbb	[pc, r0]
    1244:	05050505 	.word	0x05050505
    1248:	00040404 	.word	0x00040404
    124c:	2301      	movs	r3, #1
    124e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1252:	2b00      	cmp	r3, #0
    1254:	bf08      	it	eq
    1256:	bd10      	popeq	{r4, pc}
    1258:	480c      	ldr	r0, [pc, #48]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
    125a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    125e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1262:	2820      	cmp	r0, #32
    1264:	bf0e      	itee	eq
    1266:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    126a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    126e:	7041      	strbne	r1, [r0, #1]
    1270:	2020      	movs	r0, #32
    1272:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1276:	7058      	strb	r0, [r3, #1]
    1278:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    127c:	bd10      	pop	{r4, pc}
    127e:	f240 2167 	movw	r1, #615	; 0x267
    1282:	2070      	movs	r0, #112	; 0x70
    1284:	f002 fab0 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1288:	20000e94 	.word	0x20000e94
    128c:	20000f14 	.word	0x20000f14
    1290:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1294:	b083      	sub	sp, #12
    1296:	485c      	ldr	r0, [pc, #368]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    1298:	9904      	ldr	r1, [sp, #16]
    129a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    129e:	9001      	str	r0, [sp, #4]
    12a0:	f890 4020 	ldrb.w	r4, [r0, #32]
    12a4:	9803      	ldr	r0, [sp, #12]
    12a6:	4625      	mov	r5, r4
    12a8:	2801      	cmp	r0, #1
    12aa:	bf18      	it	ne
    12ac:	2802      	cmpne	r0, #2
    12ae:	d005      	beq.n	12bc <CONFIG_FPROTECT_BLOCK_SIZE+0x2bc>
    12b0:	f640 21af 	movw	r1, #2735	; 0xaaf
    12b4:	f04f 0070 	mov.w	r0, #112	; 0x70
    12b8:	f002 fa96 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12bc:	2700      	movs	r7, #0
    12be:	2d20      	cmp	r5, #32
    12c0:	d04a      	beq.n	1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    12c2:	4851      	ldr	r0, [pc, #324]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    12c4:	9100      	str	r1, [sp, #0]
    12c6:	2600      	movs	r6, #0
    12c8:	7f80      	ldrb	r0, [r0, #30]
    12ca:	2800      	cmp	r0, #0
    12cc:	bf08      	it	eq
    12ce:	2602      	moveq	r6, #2
    12d0:	f001 fb9a 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12d4:	f8df a138 	ldr.w	sl, [pc, #312]	; 1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>
    12d8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12dc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    12e0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>
    12e4:	688a      	ldr	r2, [r1, #8]
    12e6:	68c9      	ldr	r1, [r1, #12]
    12e8:	1a12      	subs	r2, r2, r0
    12ea:	1a09      	subs	r1, r1, r0
    12ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    12f4:	4296      	cmp	r6, r2
    12f6:	bf98      	it	ls
    12f8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    12fc:	d201      	bcs.n	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
    12fe:	4589      	cmp	r9, r1
    1300:	d228      	bcs.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    1302:	4a44      	ldr	r2, [pc, #272]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    1304:	9900      	ldr	r1, [sp, #0]
    1306:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    130a:	4622      	mov	r2, r4
    130c:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1310:	784c      	ldrb	r4, [r1, #1]
    1312:	2c20      	cmp	r4, #32
    1314:	d016      	beq.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    1316:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    131a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    131e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1322:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1326:	eba8 0800 	sub.w	r8, r8, r0
    132a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    132e:	ebac 0100 	sub.w	r1, ip, r0
    1332:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1336:	4546      	cmp	r6, r8
    1338:	bf98      	it	ls
    133a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    133e:	d2e4      	bcs.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
    1340:	4589      	cmp	r9, r1
    1342:	d3e2      	bcc.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
    1344:	2a20      	cmp	r2, #32
    1346:	d005      	beq.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    1348:	2120      	movs	r1, #32
    134a:	2004      	movs	r0, #4
    134c:	9b00      	ldr	r3, [sp, #0]
    134e:	f7ff f907 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1352:	4604      	mov	r4, r0
    1354:	42ac      	cmp	r4, r5
    1356:	d115      	bne.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1358:	482f      	ldr	r0, [pc, #188]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    135a:	2800      	cmp	r0, #0
    135c:	bf18      	it	ne
    135e:	f3af 8000 	nopne.w
    1362:	f001 fb51 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1366:	4c28      	ldr	r4, [pc, #160]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    1368:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    136c:	2920      	cmp	r1, #32
    136e:	d00d      	beq.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1370:	68e1      	ldr	r1, [r4, #12]
    1372:	1c82      	adds	r2, r0, #2
    1374:	1a51      	subs	r1, r2, r1
    1376:	0209      	lsls	r1, r1, #8
    1378:	17ca      	asrs	r2, r1, #31
    137a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    137e:	1209      	asrs	r1, r1, #8
    1380:	2900      	cmp	r1, #0
    1382:	dd03      	ble.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1384:	b005      	add	sp, #20
    1386:	2000      	movs	r0, #0
    1388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    138c:	2d20      	cmp	r5, #32
    138e:	d00d      	beq.n	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1390:	462a      	mov	r2, r5
    1392:	9903      	ldr	r1, [sp, #12]
    1394:	f7ff fb16 	bl	9c4 <CONFIG_BT_RX_STACK_SIZE+0x12c>
    1398:	b358      	cbz	r0, 13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    139a:	9801      	ldr	r0, [sp, #4]
    139c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    13a0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    13a4:	b005      	add	sp, #20
    13a6:	2001      	movs	r0, #1
    13a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    13b0:	b118      	cbz	r0, 13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    13b2:	f002 f85f 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    13b6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    13ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    13be:	b150      	cbz	r0, 13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
    13c0:	4916      	ldr	r1, [pc, #88]	; (141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>)
    13c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    13c6:	6008      	str	r0, [r1, #0]
    13c8:	2005      	movs	r0, #5
    13ca:	f001 fd6b 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13ce:	f002 f8b9 	bl	3544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    13d2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    13d6:	2004      	movs	r0, #4
    13d8:	f001 fd64 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13dc:	f001 fdca 	bl	2f74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    13e0:	2020      	movs	r0, #32
    13e2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    13e6:	480e      	ldr	r0, [pc, #56]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    13e8:	6880      	ldr	r0, [r0, #8]
    13ea:	6007      	str	r7, [r0, #0]
    13ec:	480d      	ldr	r0, [pc, #52]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    13ee:	6007      	str	r7, [r0, #0]
    13f0:	e7d8      	b.n	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
    13f2:	462a      	mov	r2, r5
    13f4:	2120      	movs	r1, #32
    13f6:	2004      	movs	r0, #4
    13f8:	9b04      	ldr	r3, [sp, #16]
    13fa:	f7ff f8b1 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    13fe:	b005      	add	sp, #20
    1400:	2000      	movs	r0, #0
    1402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1406:	0000      	.short	0x0000
    1408:	20000f14 	.word	0x20000f14
    140c:	003fffff 	.word	0x003fffff
    1410:	20000b94 	.word	0x20000b94
    1414:	20000e94 	.word	0x20000e94
    1418:	00000000 	.word	0x00000000
    141c:	4001f508 	.word	0x4001f508
    1420:	20000014 	.word	0x20000014
    1424:	40000508 	.word	0x40000508

00001428 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1428:	4906      	ldr	r1, [pc, #24]	; (1444 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    142a:	b510      	push	{r4, lr}
    142c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1430:	2a20      	cmp	r2, #32
    1432:	bf1c      	itt	ne
    1434:	7788      	strbne	r0, [r1, #30]
    1436:	bd10      	popne	{r4, pc}
    1438:	f240 31fd 	movw	r1, #1021	; 0x3fd
    143c:	2070      	movs	r0, #112	; 0x70
    143e:	f002 f9d3 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1442:	0000      	.short	0x0000
    1444:	20000f14 	.word	0x20000f14

00001448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    144c:	4e5b      	ldr	r6, [pc, #364]	; (15bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    144e:	4681      	mov	r9, r0
    1450:	b085      	sub	sp, #20
    1452:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1456:	468a      	mov	sl, r1
    1458:	2820      	cmp	r0, #32
    145a:	d04d      	beq.n	14f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    145c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1460:	f106 040c 	add.w	r4, r6, #12
    1464:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1468:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    146c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1470:	2020      	movs	r0, #32
    1472:	f88d 0000 	strb.w	r0, [sp]
    1476:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    147a:	aa03      	add	r2, sp, #12
    147c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1480:	a901      	add	r1, sp, #4
    1482:	f890 5020 	ldrb.w	r5, [r0, #32]
    1486:	6930      	ldr	r0, [r6, #16]
    1488:	9002      	str	r0, [sp, #8]
    148a:	6830      	ldr	r0, [r6, #0]
    148c:	4448      	add	r0, r9
    148e:	f001 f965 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1492:	68f8      	ldr	r0, [r7, #12]
    1494:	9901      	ldr	r1, [sp, #4]
    1496:	4a4a      	ldr	r2, [pc, #296]	; (15c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1498:	4408      	add	r0, r1
    149a:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    149e:	4291      	cmp	r1, r2
    14a0:	d82f      	bhi.n	1502 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14a2:	68b9      	ldr	r1, [r7, #8]
    14a4:	1a41      	subs	r1, r0, r1
    14a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    14aa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    14ae:	d228      	bcs.n	1502 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14b4:	6060      	str	r0, [r4, #4]
    14b6:	4630      	mov	r0, r6
    14b8:	f884 a00c 	strb.w	sl, [r4, #12]
    14bc:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    14c0:	46ea      	mov	sl, sp
    14c2:	2d20      	cmp	r5, #32
    14c4:	bf1c      	itt	ne
    14c6:	493f      	ldrne	r1, [pc, #252]	; (15c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14c8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    14cc:	d03c      	beq.n	1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14ce:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    14d2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    14d6:	6860      	ldr	r0, [r4, #4]
    14d8:	68ba      	ldr	r2, [r7, #8]
    14da:	4621      	mov	r1, r4
    14dc:	1a10      	subs	r0, r2, r0
    14de:	0200      	lsls	r0, r0, #8
    14e0:	17c2      	asrs	r2, r0, #31
    14e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14e6:	f107 0608 	add.w	r6, r7, #8
    14ea:	1200      	asrs	r0, r0, #8
    14ec:	d41b      	bmi.n	1526 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    14ee:	8970      	ldrh	r0, [r6, #10]
    14f0:	b350      	cbz	r0, 1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14f2:	8948      	ldrh	r0, [r1, #10]
    14f4:	b148      	cbz	r0, 150a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    14f6:	e027      	b.n	1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14f8:	f640 3173 	movw	r1, #2931	; 0xb73
    14fc:	2070      	movs	r0, #112	; 0x70
    14fe:	f002 f973 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1502:	b005      	add	sp, #20
    1504:	2001      	movs	r0, #1
    1506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    150a:	4620      	mov	r0, r4
    150c:	f7ff fe56 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    1510:	f001 f908 	bl	2724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1514:	6831      	ldr	r1, [r6, #0]
    1516:	1a08      	subs	r0, r1, r0
    1518:	0200      	lsls	r0, r0, #8
    151a:	17c1      	asrs	r1, r0, #31
    151c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1520:	1200      	asrs	r0, r0, #8
    1522:	2833      	cmp	r0, #51	; 0x33
    1524:	da10      	bge.n	1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1526:	f88a 5000 	strb.w	r5, [sl]
    152a:	7d39      	ldrb	r1, [r7, #20]
    152c:	7b20      	ldrb	r0, [r4, #12]
    152e:	4281      	cmp	r1, r0
    1530:	d805      	bhi.n	153e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1532:	9802      	ldr	r0, [sp, #8]
    1534:	6060      	str	r0, [r4, #4]
    1536:	b005      	add	sp, #20
    1538:	2002      	movs	r0, #2
    153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    153e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1542:	7845      	ldrb	r5, [r0, #1]
    1544:	2d20      	cmp	r5, #32
    1546:	d1c2      	bne.n	14ce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1548:	2005      	movs	r0, #5
    154a:	f001 fcab 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    154e:	4c1b      	ldr	r4, [pc, #108]	; (15bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1550:	f04f 30ff 	mov.w	r0, #4294967295
    1554:	60a0      	str	r0, [r4, #8]
    1556:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    155a:	f89d 2000 	ldrb.w	r2, [sp]
    155e:	2120      	movs	r1, #32
    1560:	2a20      	cmp	r2, #32
    1562:	bf13      	iteet	ne
    1564:	2005      	movne	r0, #5
    1566:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    156a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    156e:	f7fe fff7 	blne	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1572:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1576:	4913      	ldr	r1, [pc, #76]	; (15c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1578:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    157c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1580:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1584:	7048      	strb	r0, [r1, #1]
    1586:	6820      	ldr	r0, [r4, #0]
    1588:	4448      	add	r0, r9
    158a:	6020      	str	r0, [r4, #0]
    158c:	2001      	movs	r0, #1
    158e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1592:	7e60      	ldrb	r0, [r4, #25]
    1594:	2801      	cmp	r0, #1
    1596:	d105      	bne.n	15a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1598:	6920      	ldr	r0, [r4, #16]
    159a:	1e40      	subs	r0, r0, #1
    159c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15a0:	f001 fad2 	bl	2b48 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    15a4:	f89d 0000 	ldrb.w	r0, [sp]
    15a8:	2820      	cmp	r0, #32
    15aa:	d003      	beq.n	15b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    15ac:	4806      	ldr	r0, [pc, #24]	; (15c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    15ae:	7840      	ldrb	r0, [r0, #1]
    15b0:	f002 f9ea 	bl	3988 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    15b4:	b005      	add	sp, #20
    15b6:	2000      	movs	r0, #0
    15b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15bc:	20000f14 	.word	0x20000f14
    15c0:	07a11f9c 	.word	0x07a11f9c
    15c4:	20000e94 	.word	0x20000e94
    15c8:	20000014 	.word	0x20000014

000015cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    15cc:	4602      	mov	r2, r0
    15ce:	4b14      	ldr	r3, [pc, #80]	; (1620 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    15d0:	b510      	push	{r4, lr}
    15d2:	4408      	add	r0, r1
    15d4:	429a      	cmp	r2, r3
    15d6:	d904      	bls.n	15e2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    15d8:	f240 6116 	movw	r1, #1558	; 0x616
    15dc:	2070      	movs	r0, #112	; 0x70
    15de:	f002 f903 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e2:	4a10      	ldr	r2, [pc, #64]	; (1624 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    15e4:	4291      	cmp	r1, r2
    15e6:	dd04      	ble.n	15f2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    15e8:	f240 6117 	movw	r1, #1559	; 0x617
    15ec:	2070      	movs	r0, #112	; 0x70
    15ee:	f002 f8fb 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f2:	4a0d      	ldr	r2, [pc, #52]	; (1628 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    15f4:	4291      	cmp	r1, r2
    15f6:	da04      	bge.n	1602 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    15f8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    15fc:	2070      	movs	r0, #112	; 0x70
    15fe:	f002 f8f3 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1602:	490a      	ldr	r1, [pc, #40]	; (162c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1604:	4281      	cmp	r1, r0
    1606:	bfde      	ittt	le
    1608:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    160c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1610:	bd10      	pople	{r4, pc}
    1612:	2800      	cmp	r0, #0
    1614:	bfbc      	itt	lt
    1616:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    161a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    161e:	bd10      	pop	{r4, pc}
    1620:	1e847fff 	.word	0x1e847fff
    1624:	07a12000 	.word	0x07a12000
    1628:	f85ee000 	.word	0xf85ee000
    162c:	1e848000 	.word	0x1e848000

00001630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1630:	4a10      	ldr	r2, [pc, #64]	; (1674 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1632:	1a0b      	subs	r3, r1, r0
    1634:	f102 0c01 	add.w	ip, r2, #1
    1638:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    163c:	bf3c      	itt	cc
    163e:	4618      	movcc	r0, r3
    1640:	4770      	bxcc	lr
    1642:	b510      	push	{r4, lr}
    1644:	1a44      	subs	r4, r0, r1
    1646:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    164a:	bf3c      	itt	cc
    164c:	4618      	movcc	r0, r3
    164e:	bd10      	popcc	{r4, pc}
    1650:	429a      	cmp	r2, r3
    1652:	d203      	bcs.n	165c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1654:	1a10      	subs	r0, r2, r0
    1656:	4408      	add	r0, r1
    1658:	1c40      	adds	r0, r0, #1
    165a:	bd10      	pop	{r4, pc}
    165c:	42a2      	cmp	r2, r4
    165e:	d204      	bcs.n	166a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1660:	1a51      	subs	r1, r2, r1
    1662:	4408      	add	r0, r1
    1664:	1c40      	adds	r0, r0, #1
    1666:	4240      	negs	r0, r0
    1668:	bd10      	pop	{r4, pc}
    166a:	f640 310b 	movw	r1, #2827	; 0xb0b
    166e:	2070      	movs	r0, #112	; 0x70
    1670:	f002 f8ba 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1674:	1e847fff 	.word	0x1e847fff

00001678 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1678:	4907      	ldr	r1, [pc, #28]	; (1698 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    167a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    167e:	4282      	cmp	r2, r0
    1680:	bf04      	itt	eq
    1682:	6848      	ldreq	r0, [r1, #4]
    1684:	4770      	bxeq	lr
    1686:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    168a:	4904      	ldr	r1, [pc, #16]	; (169c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    168c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1690:	3008      	adds	r0, #8
    1692:	f7ff bd93 	b.w	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    1696:	0000      	.short	0x0000
    1698:	20000f14 	.word	0x20000f14
    169c:	20000b94 	.word	0x20000b94

000016a0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    16a0:	490e      	ldr	r1, [pc, #56]	; (16dc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    16a2:	b510      	push	{r4, lr}
    16a4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16a8:	2820      	cmp	r0, #32
    16aa:	d012      	beq.n	16d2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    16ac:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16b0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    16b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16b8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    16bc:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    16c0:	6840      	ldr	r0, [r0, #4]
    16c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16c6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    16ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16ce:	2104      	movs	r1, #4
    16d0:	4710      	bx	r2
    16d2:	f640 01bb 	movw	r1, #2235	; 0x8bb
    16d6:	2070      	movs	r0, #112	; 0x70
    16d8:	f002 f886 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16dc:	20000f14 	.word	0x20000f14

000016e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    16e0:	b570      	push	{r4, r5, r6, lr}
    16e2:	4d6a      	ldr	r5, [pc, #424]	; (188c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ac>)
    16e4:	496a      	ldr	r1, [pc, #424]	; (1890 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    16e6:	2601      	movs	r6, #1
    16e8:	f505 7460 	add.w	r4, r5, #896	; 0x380
    16ec:	2808      	cmp	r0, #8
    16ee:	d27d      	bcs.n	17ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    16f0:	e8df f000 	tbb	[pc, r0]
    16f4:	a9976104 	.word	0xa9976104
    16f8:	b3ae43c6 	.word	0xb3ae43c6
    16fc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1700:	b918      	cbnz	r0, 170a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1702:	f001 fed3 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1706:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    170a:	8ae0      	ldrh	r0, [r4, #22]
    170c:	b110      	cbz	r0, 1714 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    170e:	f002 f807 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1712:	b188      	cbz	r0, 1738 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1714:	f7ff fcba 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    1718:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    171c:	68a1      	ldr	r1, [r4, #8]
    171e:	f1b1 3fff 	cmp.w	r1, #4294967295
    1722:	d005      	beq.n	1730 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1724:	2301      	movs	r3, #1
    1726:	2203      	movs	r2, #3
    1728:	2005      	movs	r0, #5
    172a:	f001 faf3 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    172e:	b140      	cbz	r0, 1742 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1730:	7e60      	ldrb	r0, [r4, #25]
    1732:	2801      	cmp	r0, #1
    1734:	d110      	bne.n	1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1736:	e009      	b.n	174c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1738:	f640 016f 	movw	r1, #2159	; 0x86f
    173c:	2070      	movs	r0, #112	; 0x70
    173e:	f002 f853 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1742:	f640 0174 	movw	r1, #2164	; 0x874
    1746:	2070      	movs	r0, #112	; 0x70
    1748:	f002 f84e 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    174c:	6920      	ldr	r0, [r4, #16]
    174e:	1e40      	subs	r0, r0, #1
    1750:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1754:	f001 f9f8 	bl	2b48 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1758:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    175c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1760:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1764:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1768:	6840      	ldr	r0, [r0, #4]
    176a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    176e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1776:	2101      	movs	r1, #1
    1778:	4710      	bx	r2
    177a:	f7ff fc87 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    177e:	f04f 30ff 	mov.w	r0, #4294967295
    1782:	60a0      	str	r0, [r4, #8]
    1784:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1788:	b180      	cbz	r0, 17ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xcc>
    178a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    178e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1792:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1796:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    179a:	6840      	ldr	r0, [r0, #4]
    179c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17a0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    17a8:	2106      	movs	r1, #6
    17aa:	4710      	bx	r2
    17ac:	f640 0185 	movw	r1, #2181	; 0x885
    17b0:	2070      	movs	r0, #112	; 0x70
    17b2:	f002 f819 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17b6:	f7ff fc69 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    17ba:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    17be:	f001 ffaf 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17c2:	b118      	cbz	r0, 17cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xec>
    17c4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    17c8:	b128      	cbz	r0, 17d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf6>
    17ca:	e008      	b.n	17de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    17cc:	f640 0195 	movw	r1, #2197	; 0x895
    17d0:	2070      	movs	r0, #112	; 0x70
    17d2:	f002 f809 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d6:	f001 fe69 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    17da:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    17de:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    17e2:	b168      	cbz	r0, 1800 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
    17e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    17e8:	492a      	ldr	r1, [pc, #168]	; (1894 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    17ea:	e000      	b.n	17ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    17ec:	e048      	b.n	1880 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>
    17ee:	6008      	str	r0, [r1, #0]
    17f0:	2005      	movs	r0, #5
    17f2:	f001 fb57 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    17f6:	f001 fea5 	bl	3544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    17fa:	2000      	movs	r0, #0
    17fc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1800:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1804:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1808:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    180c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1810:	6840      	ldr	r0, [r0, #4]
    1812:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1816:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    181a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    181e:	2100      	movs	r1, #0
    1820:	4710      	bx	r2
    1822:	f001 fbf1 	bl	3008 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1826:	8ae0      	ldrh	r0, [r4, #22]
    1828:	b110      	cbz	r0, 1830 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x150>
    182a:	f001 ff79 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    182e:	b128      	cbz	r0, 183c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1830:	4819      	ldr	r0, [pc, #100]	; (1898 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1832:	7800      	ldrb	r0, [r0, #0]
    1834:	2803      	cmp	r0, #3
    1836:	bf08      	it	eq
    1838:	7766      	strbeq	r6, [r4, #29]
    183a:	bd70      	pop	{r4, r5, r6, pc}
    183c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    1840:	2070      	movs	r0, #112	; 0x70
    1842:	f001 ffd1 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1846:	4815      	ldr	r0, [pc, #84]	; (189c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1848:	6006      	str	r6, [r0, #0]
    184a:	6888      	ldr	r0, [r1, #8]
    184c:	6006      	str	r6, [r0, #0]
    184e:	bd70      	pop	{r4, r5, r6, pc}
    1850:	7808      	ldrb	r0, [r1, #0]
    1852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1856:	f002 b897 	b.w	3988 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    185a:	f7ff fc17 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    185e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1862:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1866:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    186a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    186e:	6840      	ldr	r0, [r0, #4]
    1870:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1874:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    187c:	2105      	movs	r1, #5
    187e:	4710      	bx	r2
    1880:	f640 01b3 	movw	r1, #2227	; 0x8b3
    1884:	2070      	movs	r0, #112	; 0x70
    1886:	f001 ffaf 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    188a:	0000      	.short	0x0000
    188c:	20000b94 	.word	0x20000b94
    1890:	20000014 	.word	0x20000014
    1894:	4001f508 	.word	0x4001f508
    1898:	20000016 	.word	0x20000016
    189c:	40000508 	.word	0x40000508

000018a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    18a0:	4803      	ldr	r0, [pc, #12]	; (18b0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    18a2:	b510      	push	{r4, lr}
    18a4:	7840      	ldrb	r0, [r0, #1]
    18a6:	f00a f8fd 	bl	baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18aa:	b280      	uxth	r0, r0
    18ac:	bd10      	pop	{r4, pc}
    18ae:	0000      	.short	0x0000
    18b0:	20000016 	.word	0x20000016

000018b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    18b4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18b8:	4682      	mov	sl, r0
    18ba:	48d1      	ldr	r0, [pc, #836]	; (1c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>)
    18bc:	b08b      	sub	sp, #44	; 0x2c
    18be:	6800      	ldr	r0, [r0, #0]
    18c0:	4dd0      	ldr	r5, [pc, #832]	; (1c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>)
    18c2:	05c0      	lsls	r0, r0, #23
    18c4:	0dc0      	lsrs	r0, r0, #23
    18c6:	d00e      	beq.n	18e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    18c8:	3810      	subs	r0, #16
    18ca:	b240      	sxtb	r0, r0
    18cc:	2800      	cmp	r0, #0
    18ce:	bfb8      	it	lt
    18d0:	f000 000f 	andlt.w	r0, r0, #15
    18d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    18d8:	bfac      	ite	ge
    18da:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    18de:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    18e2:	0940      	lsrs	r0, r0, #5
    18e4:	d00d      	beq.n	1902 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    18e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    18e8:	f04f 0b00 	mov.w	fp, #0
    18ec:	7800      	ldrb	r0, [r0, #0]
    18ee:	2800      	cmp	r0, #0
    18f0:	bf18      	it	ne
    18f2:	2801      	cmpne	r0, #1
    18f4:	d018      	beq.n	1928 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    18f6:	f240 715c 	movw	r1, #1884	; 0x75c
    18fa:	f04f 0070 	mov.w	r0, #112	; 0x70
    18fe:	f001 ff73 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1902:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1906:	f04f 0b01 	mov.w	fp, #1
    190a:	2820      	cmp	r0, #32
    190c:	d007      	beq.n	191e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    190e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1910:	7800      	ldrb	r0, [r0, #0]
    1912:	b148      	cbz	r0, 1928 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1914:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    1918:	2070      	movs	r0, #112	; 0x70
    191a:	f001 ff65 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    191e:	f240 7155 	movw	r1, #1877	; 0x755
    1922:	2070      	movs	r0, #112	; 0x70
    1924:	f001 ff60 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1928:	4cb7      	ldr	r4, [pc, #732]	; (1c08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>)
    192a:	b124      	cbz	r4, 1936 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    192c:	2100      	movs	r1, #0
    192e:	f240 705f 	movw	r0, #1887	; 0x75f
    1932:	f3af 8000 	nop.w
    1936:	49b5      	ldr	r1, [pc, #724]	; (1c0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>)
    1938:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    193c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1940:	f04f 0801 	mov.w	r8, #1
    1944:	9000      	str	r0, [sp, #0]
    1946:	b124      	cbz	r4, 1952 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1948:	2100      	movs	r1, #0
    194a:	f240 7067 	movw	r0, #1895	; 0x767
    194e:	f3af 8000 	nop.w
    1952:	f1b8 0f00 	cmp.w	r8, #0
    1956:	d009      	beq.n	196c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1958:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    195c:	f04f 0900 	mov.w	r9, #0
    1960:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1964:	f1bb 0f00 	cmp.w	fp, #0
    1968:	d007      	beq.n	197a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    196a:	e02e      	b.n	19ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    196c:	48a8      	ldr	r0, [pc, #672]	; (1c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    196e:	2800      	cmp	r0, #0
    1970:	bf18      	it	ne
    1972:	f3af 8000 	nopne.w
    1976:	b662      	cpsie	i
    1978:	e7ee      	b.n	1958 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    197a:	4637      	mov	r7, r6
    197c:	2001      	movs	r0, #1
    197e:	ea20 0607 	bic.w	r6, r0, r7
    1982:	48a4      	ldr	r0, [pc, #656]	; (1c14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    1984:	2240      	movs	r2, #64	; 0x40
    1986:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    198a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    198e:	f00a f9f7 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1992:	b124      	cbz	r4, 199e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1994:	2100      	movs	r1, #0
    1996:	f240 50da 	movw	r0, #1498	; 0x5da
    199a:	f3af 8000 	nop.w
    199e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    19a2:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    19a6:	6a09      	ldr	r1, [r1, #32]
    19a8:	6201      	str	r1, [r0, #32]
    19aa:	b124      	cbz	r4, 19b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    19ac:	2100      	movs	r1, #0
    19ae:	f240 50de 	movw	r0, #1502	; 0x5de
    19b2:	f3af 8000 	nop.w
    19b6:	b124      	cbz	r4, 19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    19b8:	2100      	movs	r1, #0
    19ba:	f240 7071 	movw	r0, #1905	; 0x771
    19be:	f3af 8000 	nop.w
    19c2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19c6:	2800      	cmp	r0, #0
    19c8:	d1bd      	bne.n	1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    19ca:	b124      	cbz	r4, 19d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    19cc:	2100      	movs	r1, #0
    19ce:	f240 707b 	movw	r0, #1915	; 0x77b
    19d2:	f3af 8000 	nop.w
    19d6:	f001 f817 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19da:	4680      	mov	r8, r0
    19dc:	4633      	mov	r3, r6
    19de:	aa06      	add	r2, sp, #24
    19e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    19e2:	f7ff fa7f 	bl	ee4 <CONFIG_BT_RX_STACK_SIZE+0x64c>
    19e6:	b124      	cbz	r4, 19f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    19e8:	2100      	movs	r1, #0
    19ea:	f240 7082 	movw	r0, #1922	; 0x782
    19ee:	f3af 8000 	nop.w
    19f2:	4988      	ldr	r1, [pc, #544]	; (1c14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    19f4:	a806      	add	r0, sp, #24
    19f6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    19fa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    19fe:	2901      	cmp	r1, #1
    1a00:	bf18      	it	ne
    1a02:	2902      	cmpne	r1, #2
    1a04:	d13e      	bne.n	1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1a06:	9906      	ldr	r1, [sp, #24]
    1a08:	9b07      	ldr	r3, [sp, #28]
    1a0a:	eba1 0108 	sub.w	r1, r1, r8
    1a0e:	4a82      	ldr	r2, [pc, #520]	; (1c18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>)
    1a10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a14:	eba3 0308 	sub.w	r3, r3, r8
    1a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1a1c:	2902      	cmp	r1, #2
    1a1e:	d36a      	bcc.n	1af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    1a20:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1a24:	d267      	bcs.n	1af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    1a26:	429a      	cmp	r2, r3
    1a28:	d365      	bcc.n	1af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    1a2a:	f04f 0901 	mov.w	r9, #1
    1a2e:	ab01      	add	r3, sp, #4
    1a30:	aa05      	add	r2, sp, #20
    1a32:	4631      	mov	r1, r6
    1a34:	f7fe ff46 	bl	8c4 <CONFIG_BT_RX_STACK_SIZE+0x2c>
    1a38:	2800      	cmp	r0, #0
    1a3a:	d064      	beq.n	1b06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x252>
    1a3c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1a40:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1a44:	4633      	mov	r3, r6
    1a46:	428a      	cmp	r2, r1
    1a48:	d061      	beq.n	1b0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x25a>
    1a4a:	2005      	movs	r0, #5
    1a4c:	f7fe fd88 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a50:	ea4f 0100 	mov.w	r1, r0
    1a54:	eb07 004a 	add.w	r0, r7, sl, lsl #1
    1a58:	7041      	strb	r1, [r0, #1]
    1a5a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a5e:	2820      	cmp	r0, #32
    1a60:	bf03      	ittte	eq
    1a62:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a66:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a6a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a6e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a72:	bf18      	it	ne
    1a74:	f880 a001 	strbne.w	sl, [r0, #1]
    1a78:	4632      	mov	r2, r6
    1a7a:	4651      	mov	r1, sl
    1a7c:	f05f 0003 	movs.w	r0, #3
    1a80:	f7ff fbd6 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1a84:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a88:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1a8c:	b124      	cbz	r4, 1a98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e4>
    1a8e:	2100      	movs	r1, #0
    1a90:	f240 7089 	movw	r0, #1929	; 0x789
    1a94:	f3af 8000 	nop.w
    1a98:	4860      	ldr	r0, [pc, #384]	; (1c1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>)
    1a9a:	2800      	cmp	r0, #0
    1a9c:	bf18      	it	ne
    1a9e:	f3af 8000 	nopne.w
    1aa2:	f3ef 8810 	mrs	r8, PRIMASK
    1aa6:	b672      	cpsid	i
    1aa8:	b124      	cbz	r4, 1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x200>
    1aaa:	2100      	movs	r1, #0
    1aac:	f240 708f 	movw	r0, #1935	; 0x78f
    1ab0:	f3af 8000 	nop.w
    1ab4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1ab8:	2800      	cmp	r0, #0
    1aba:	f47f af44 	bne.w	1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1abe:	b124      	cbz	r4, 1aca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x216>
    1ac0:	2100      	movs	r1, #0
    1ac2:	f240 7097 	movw	r0, #1943	; 0x797
    1ac6:	f3af 8000 	nop.w
    1aca:	f10d 0e18 	add.w	lr, sp, #24
    1ace:	9800      	ldr	r0, [sp, #0]
    1ad0:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1ad4:	f100 0008 	add.w	r0, r0, #8
    1ad8:	f1b9 0f00 	cmp.w	r9, #0
    1adc:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1ae0:	d042      	beq.n	1b68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    1ae2:	b124      	cbz	r4, 1aee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x23a>
    1ae4:	2100      	movs	r1, #0
    1ae6:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1aea:	f3af 8000 	nop.w
    1aee:	f1bb 0f00 	cmp.w	fp, #0
    1af2:	d12b      	bne.n	1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1af4:	e015      	b.n	1b22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
    1af6:	4632      	mov	r2, r6
    1af8:	4651      	mov	r1, sl
    1afa:	2004      	movs	r0, #4
    1afc:	f7ff fb98 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1b00:	f04f 0901 	mov.w	r9, #1
    1b04:	e7be      	b.n	1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1b06:	4632      	mov	r2, r6
    1b08:	4651      	mov	r1, sl
    1b0a:	2004      	movs	r0, #4
    1b0c:	e7b8      	b.n	1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1cc>
    1b0e:	2920      	cmp	r1, #32
    1b10:	bf19      	ittee	ne
    1b12:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1b16:	7841      	ldrbne	r1, [r0, #1]
    1b18:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1b1c:	f890 1020 	ldrbeq.w	r1, [r0, #32]
    1b20:	e798      	b.n	1a54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a0>
    1b22:	b19f      	cbz	r7, 1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1b24:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1b28:	2820      	cmp	r0, #32
    1b2a:	d10f      	bne.n	1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1b2c:	b124      	cbz	r4, 1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1b2e:	2100      	movs	r1, #0
    1b30:	f240 70a9 	movw	r0, #1961	; 0x7a9
    1b34:	f3af 8000 	nop.w
    1b38:	4631      	mov	r1, r6
    1b3a:	2002      	movs	r0, #2
    1b3c:	f7ff fba8 	bl	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    1b40:	b920      	cbnz	r0, 1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1b42:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b44:	7800      	ldrb	r0, [r0, #0]
    1b46:	b3e8      	cbz	r0, 1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x310>
    1b48:	2801      	cmp	r0, #1
    1b4a:	d049      	beq.n	1be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    1b4c:	b124      	cbz	r4, 1b58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a4>
    1b4e:	2100      	movs	r1, #0
    1b50:	f240 70c6 	movw	r0, #1990	; 0x7c6
    1b54:	f3af 8000 	nop.w
    1b58:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1b5c:	2001      	movs	r0, #1
    1b5e:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b62:	bf00      	nop
    1b64:	f04f 0901 	mov.w	r9, #1
    1b68:	b124      	cbz	r4, 1b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    1b6a:	2100      	movs	r1, #0
    1b6c:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1b70:	f3af 8000 	nop.w
    1b74:	f1b8 0f00 	cmp.w	r8, #0
    1b78:	d03b      	beq.n	1bf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    1b7a:	b124      	cbz	r4, 1b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1b7c:	2100      	movs	r1, #0
    1b7e:	f240 70d3 	movw	r0, #2003	; 0x7d3
    1b82:	f3af 8000 	nop.w
    1b86:	f1b9 0f00 	cmp.w	r9, #0
    1b8a:	d011      	beq.n	1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1b8c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b90:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b94:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b98:	2820      	cmp	r0, #32
    1b9a:	d009      	beq.n	1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1b9c:	b124      	cbz	r4, 1ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    1b9e:	2100      	movs	r1, #0
    1ba0:	f240 70da 	movw	r0, #2010	; 0x7da
    1ba4:	f3af 8000 	nop.w
    1ba8:	481d      	ldr	r0, [pc, #116]	; (1c20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>)
    1baa:	7840      	ldrb	r0, [r0, #1]
    1bac:	f001 feec 	bl	3988 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1bb0:	b124      	cbz	r4, 1bbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
    1bb2:	2100      	movs	r1, #0
    1bb4:	f240 70df 	movw	r0, #2015	; 0x7df
    1bb8:	f3af 8000 	nop.w
    1bbc:	b00d      	add	sp, #52	; 0x34
    1bbe:	4648      	mov	r0, r9
    1bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bc4:	e7ff      	b.n	1bc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1bc6:	b124      	cbz	r4, 1bd2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31e>
    1bc8:	2100      	movs	r1, #0
    1bca:	f240 70b1 	movw	r0, #1969	; 0x7b1
    1bce:	f3af 8000 	nop.w
    1bd2:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1bd6:	4651      	mov	r1, sl
    1bd8:	2004      	movs	r0, #4
    1bda:	f7ff fb29 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1bde:	e7c1      	b.n	1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b0>
    1be0:	2c00      	cmp	r4, #0
    1be2:	f43f aeb0 	beq.w	1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1be6:	2100      	movs	r1, #0
    1be8:	f240 70bc 	movw	r0, #1980	; 0x7bc
    1bec:	f3af 8000 	nop.w
    1bf0:	e6a9      	b.n	1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1bf2:	4807      	ldr	r0, [pc, #28]	; (1c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    1bf4:	2800      	cmp	r0, #0
    1bf6:	bf18      	it	ne
    1bf8:	f3af 8000 	nopne.w
    1bfc:	b662      	cpsie	i
    1bfe:	e7bc      	b.n	1b7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    1c00:	e000ed04 	.word	0xe000ed04
    1c04:	20000f14 	.word	0x20000f14
    1c08:	00000000 	.word	0x00000000
    1c0c:	20000b94 	.word	0x20000b94
    1c10:	00000000 	.word	0x00000000
    1c14:	20000e94 	.word	0x20000e94
    1c18:	003fffff 	.word	0x003fffff
    1c1c:	00000000 	.word	0x00000000
    1c20:	20000014 	.word	0x20000014

00001c24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c24:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c28:	48a3      	ldr	r0, [pc, #652]	; (1eb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>)
    1c2a:	b086      	sub	sp, #24
    1c2c:	6800      	ldr	r0, [r0, #0]
    1c2e:	05c0      	lsls	r0, r0, #23
    1c30:	0dc0      	lsrs	r0, r0, #23
    1c32:	d011      	beq.n	1c58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c34:	3810      	subs	r0, #16
    1c36:	b240      	sxtb	r0, r0
    1c38:	2800      	cmp	r0, #0
    1c3a:	bfb8      	it	lt
    1c3c:	f000 000f 	andlt.w	r0, r0, #15
    1c40:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c44:	bfac      	ite	ge
    1c46:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c4a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c4e:	0940      	lsrs	r0, r0, #5
    1c50:	bf08      	it	eq
    1c52:	f04f 0901 	moveq.w	r9, #1
    1c56:	d001      	beq.n	1c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1c58:	f04f 0900 	mov.w	r9, #0
    1c5c:	9806      	ldr	r0, [sp, #24]
    1c5e:	7800      	ldrb	r0, [r0, #0]
    1c60:	2800      	cmp	r0, #0
    1c62:	f04f 0000 	mov.w	r0, #0
    1c66:	bf1c      	itt	ne
    1c68:	b007      	addne	sp, #28
    1c6a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c6e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1ebc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1c72:	4d93      	ldr	r5, [pc, #588]	; (1ec0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>)
    1c74:	4c93      	ldr	r4, [pc, #588]	; (1ec4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>)
    1c76:	f04f 0b00 	mov.w	fp, #0
    1c7a:	9004      	str	r0, [sp, #16]
    1c7c:	b125      	cbz	r5, 1c88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1c7e:	2100      	movs	r1, #0
    1c80:	f240 6065 	movw	r0, #1637	; 0x665
    1c84:	f3af 8000 	nop.w
    1c88:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1c8c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1c90:	f04f 0800 	mov.w	r8, #0
    1c94:	b125      	cbz	r5, 1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1c96:	2100      	movs	r1, #0
    1c98:	f240 606a 	movw	r0, #1642	; 0x66a
    1c9c:	f3af 8000 	nop.w
    1ca0:	f1b9 0f00 	cmp.w	r9, #0
    1ca4:	d11d      	bne.n	1ce2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1ca6:	4637      	mov	r7, r6
    1ca8:	2001      	movs	r0, #1
    1caa:	ea20 0607 	bic.w	r6, r0, r7
    1cae:	4886      	ldr	r0, [pc, #536]	; (1ec8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>)
    1cb0:	2240      	movs	r2, #64	; 0x40
    1cb2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1cb6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1cba:	f00a f861 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cbe:	b125      	cbz	r5, 1cca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1cc0:	2100      	movs	r1, #0
    1cc2:	f240 50da 	movw	r0, #1498	; 0x5da
    1cc6:	f3af 8000 	nop.w
    1cca:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1cce:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1cd2:	6a09      	ldr	r1, [r1, #32]
    1cd4:	6201      	str	r1, [r0, #32]
    1cd6:	b125      	cbz	r5, 1ce2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1cd8:	2100      	movs	r1, #0
    1cda:	f240 50de 	movw	r0, #1502	; 0x5de
    1cde:	f3af 8000 	nop.w
    1ce2:	b125      	cbz	r5, 1cee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1ce4:	2100      	movs	r1, #0
    1ce6:	f240 6072 	movw	r0, #1650	; 0x672
    1cea:	f3af 8000 	nop.w
    1cee:	f000 fe8b 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1cf2:	4607      	mov	r7, r0
    1cf4:	4633      	mov	r3, r6
    1cf6:	466a      	mov	r2, sp
    1cf8:	9906      	ldr	r1, [sp, #24]
    1cfa:	f7ff f8f3 	bl	ee4 <CONFIG_BT_RX_STACK_SIZE+0x64c>
    1cfe:	b125      	cbz	r5, 1d0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1d00:	2100      	movs	r1, #0
    1d02:	f44f 60cf 	mov.w	r0, #1656	; 0x678
    1d06:	f3af 8000 	nop.w
    1d0a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1d0e:	2820      	cmp	r0, #32
    1d10:	d014      	beq.n	1d3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1d12:	6920      	ldr	r0, [r4, #16]
    1d14:	9900      	ldr	r1, [sp, #0]
    1d16:	1a09      	subs	r1, r1, r0
    1d18:	0209      	lsls	r1, r1, #8
    1d1a:	17ca      	asrs	r2, r1, #31
    1d1c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d20:	1209      	asrs	r1, r1, #8
    1d22:	d50b      	bpl.n	1d3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1d24:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d28:	1a89      	subs	r1, r1, r2
    1d2a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d2e:	4408      	add	r0, r1
    1d30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d34:	e9cd 2000 	strd	r2, r0, [sp]
    1d38:	f04f 0801 	mov.w	r8, #1
    1d3c:	b14d      	cbz	r5, 1d52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d3e:	2100      	movs	r1, #0
    1d40:	f240 6082 	movw	r0, #1666	; 0x682
    1d44:	f3af 8000 	nop.w
    1d48:	2100      	movs	r1, #0
    1d4a:	f44f 60d1 	mov.w	r0, #1672	; 0x688
    1d4e:	f3af 8000 	nop.w
    1d52:	9800      	ldr	r0, [sp, #0]
    1d54:	9901      	ldr	r1, [sp, #4]
    1d56:	1bc0      	subs	r0, r0, r7
    1d58:	1bc9      	subs	r1, r1, r7
    1d5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d62:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d66:	d205      	bcs.n	1d74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d68:	458a      	cmp	sl, r1
    1d6a:	d303      	bcc.n	1d74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d6c:	f1b9 0f00 	cmp.w	r9, #0
    1d70:	d10c      	bne.n	1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d72:	e003      	b.n	1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>
    1d74:	f1b9 0f00 	cmp.w	r9, #0
    1d78:	d038      	beq.n	1dec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1d7a:	e094      	b.n	1ea6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1d7c:	4633      	mov	r3, r6
    1d7e:	463a      	mov	r2, r7
    1d80:	4669      	mov	r1, sp
    1d82:	4852      	ldr	r0, [pc, #328]	; (1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>)
    1d84:	f7fe fc28 	bl	5d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1d88:	ea48 0800 	orr.w	r8, r8, r0
    1d8c:	f1b8 0f00 	cmp.w	r8, #0
    1d90:	d022      	beq.n	1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1d92:	9800      	ldr	r0, [sp, #0]
    1d94:	f009 fe86 	bl	baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d98:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d9c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1da0:	4b4b      	ldr	r3, [pc, #300]	; (1ed0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x184>)
    1da2:	4411      	add	r1, r2
    1da4:	1c49      	adds	r1, r1, #1
    1da6:	1842      	adds	r2, r0, r1
    1da8:	4298      	cmp	r0, r3
    1daa:	d841      	bhi.n	1e30 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe4>
    1dac:	4847      	ldr	r0, [pc, #284]	; (1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>)
    1dae:	4281      	cmp	r1, r0
    1db0:	dc5a      	bgt.n	1e68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11c>
    1db2:	4240      	negs	r0, r0
    1db4:	4281      	cmp	r1, r0
    1db6:	db5f      	blt.n	1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    1db8:	1c58      	adds	r0, r3, #1
    1dba:	4290      	cmp	r0, r2
    1dbc:	bfdc      	itt	le
    1dbe:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1dc2:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1dc6:	dd05      	ble.n	1dd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>
    1dc8:	2a00      	cmp	r2, #0
    1dca:	bfbc      	itt	lt
    1dcc:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1dd0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1dd4:	9806      	ldr	r0, [sp, #24]
    1dd6:	60c2      	str	r2, [r0, #12]
    1dd8:	2001      	movs	r0, #1
    1dda:	9004      	str	r0, [sp, #16]
    1ddc:	2d00      	cmp	r5, #0
    1dde:	d062      	beq.n	1ea6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1de0:	2100      	movs	r1, #0
    1de2:	f240 609b 	movw	r0, #1691	; 0x69b
    1de6:	f3af 8000 	nop.w
    1dea:	e05c      	b.n	1ea6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1dec:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1df0:	aa05      	add	r2, sp, #20
    1df2:	a904      	add	r1, sp, #16
    1df4:	f000 fcb2 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1df8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dfc:	2820      	cmp	r0, #32
    1dfe:	d01c      	beq.n	1e3a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xee>
    1e00:	6920      	ldr	r0, [r4, #16]
    1e02:	1d40      	adds	r0, r0, #5
    1e04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e08:	e9dd 2100 	ldrd	r2, r1, [sp]
    1e0c:	1a89      	subs	r1, r1, r2
    1e0e:	4401      	add	r1, r0
    1e10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e14:	e9cd 0100 	strd	r0, r1, [sp]
    1e18:	f009 fe44 	bl	baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e1c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e20:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e24:	4b2a      	ldr	r3, [pc, #168]	; (1ed0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x184>)
    1e26:	4411      	add	r1, r2
    1e28:	1c49      	adds	r1, r1, #1
    1e2a:	1842      	adds	r2, r0, r1
    1e2c:	4298      	cmp	r0, r3
    1e2e:	d918      	bls.n	1e62 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x116>
    1e30:	f240 6116 	movw	r1, #1558	; 0x616
    1e34:	2070      	movs	r0, #112	; 0x70
    1e36:	f001 fcd7 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e3a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e3e:	f107 0609 	add.w	r6, r7, #9
    1e42:	b120      	cbz	r0, 1e4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1e44:	f001 fc6c 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e48:	2800      	cmp	r0, #0
    1e4a:	bf08      	it	eq
    1e4c:	3632      	addeq	r6, #50	; 0x32
    1e4e:	4821      	ldr	r0, [pc, #132]	; (1ed4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>)
    1e50:	7841      	ldrb	r1, [r0, #1]
    1e52:	9804      	ldr	r0, [sp, #16]
    1e54:	4281      	cmp	r1, r0
    1e56:	bf84      	itt	hi
    1e58:	1a08      	subhi	r0, r1, r0
    1e5a:	4406      	addhi	r6, r0
    1e5c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e60:	e7d2      	b.n	1e08 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    1e62:	481a      	ldr	r0, [pc, #104]	; (1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>)
    1e64:	4281      	cmp	r1, r0
    1e66:	dd04      	ble.n	1e72 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e68:	f240 6117 	movw	r1, #1559	; 0x617
    1e6c:	2070      	movs	r0, #112	; 0x70
    1e6e:	f001 fcbb 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e72:	4819      	ldr	r0, [pc, #100]	; (1ed8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>)
    1e74:	4281      	cmp	r1, r0
    1e76:	da04      	bge.n	1e82 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1e78:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1e7c:	2070      	movs	r0, #112	; 0x70
    1e7e:	f001 fcb3 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e82:	4816      	ldr	r0, [pc, #88]	; (1edc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>)
    1e84:	4290      	cmp	r0, r2
    1e86:	bfdc      	itt	le
    1e88:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1e8c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1e90:	dd05      	ble.n	1e9e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x152>
    1e92:	2a00      	cmp	r2, #0
    1e94:	bfbc      	itt	lt
    1e96:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e9a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e9e:	9806      	ldr	r0, [sp, #24]
    1ea0:	60c2      	str	r2, [r0, #12]
    1ea2:	2001      	movs	r0, #1
    1ea4:	9004      	str	r0, [sp, #16]
    1ea6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1eaa:	2800      	cmp	r0, #0
    1eac:	f47f aee6 	bne.w	1c7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1eb0:	9804      	ldr	r0, [sp, #16]
    1eb2:	b007      	add	sp, #28
    1eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eb8:	e000ed04 	.word	0xe000ed04
    1ebc:	003fffff 	.word	0x003fffff
    1ec0:	00000000 	.word	0x00000000
    1ec4:	20000f14 	.word	0x20000f14
    1ec8:	20000e94 	.word	0x20000e94
    1ecc:	07a12000 	.word	0x07a12000
    1ed0:	1e847fff 	.word	0x1e847fff
    1ed4:	20000016 	.word	0x20000016
    1ed8:	f85ee000 	.word	0xf85ee000
    1edc:	1e848000 	.word	0x1e848000

00001ee0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ee0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ee4:	4d80      	ldr	r5, [pc, #512]	; (20e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe8>)
    1ee6:	b08c      	sub	sp, #48	; 0x30
    1ee8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1eec:	2000      	movs	r0, #0
    1eee:	9009      	str	r0, [sp, #36]	; 0x24
    1ef0:	2001      	movs	r0, #1
    1ef2:	4c7e      	ldr	r4, [pc, #504]	; (20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>)
    1ef4:	f04f 0800 	mov.w	r8, #0
    1ef8:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1efc:	4683      	mov	fp, r0
    1efe:	9008      	str	r0, [sp, #32]
    1f00:	b124      	cbz	r4, 1f0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f02:	2100      	movs	r1, #0
    1f04:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1f08:	f3af 8000 	nop.w
    1f0c:	9808      	ldr	r0, [sp, #32]
    1f0e:	b390      	cbz	r0, 1f76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1f10:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1f14:	b124      	cbz	r4, 1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1f16:	2100      	movs	r1, #0
    1f18:	f240 70f3 	movw	r0, #2035	; 0x7f3
    1f1c:	f3af 8000 	nop.w
    1f20:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    1f24:	2240      	movs	r2, #64	; 0x40
    1f26:	ea2b 0609 	bic.w	r6, fp, r9
    1f2a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f2e:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1f32:	4682      	mov	sl, r0
    1f34:	f009 ff24 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f38:	b124      	cbz	r4, 1f44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1f3a:	2100      	movs	r1, #0
    1f3c:	f240 50da 	movw	r0, #1498	; 0x5da
    1f40:	f3af 8000 	nop.w
    1f44:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f48:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1f4c:	9000      	str	r0, [sp, #0]
    1f4e:	6a09      	ldr	r1, [r1, #32]
    1f50:	6201      	str	r1, [r0, #32]
    1f52:	b124      	cbz	r4, 1f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1f54:	2100      	movs	r1, #0
    1f56:	f240 50de 	movw	r0, #1502	; 0x5de
    1f5a:	f3af 8000 	nop.w
    1f5e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f62:	b180      	cbz	r0, 1f86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1f64:	2c00      	cmp	r4, #0
    1f66:	bf1c      	itt	ne
    1f68:	2100      	movne	r1, #0
    1f6a:	f240 70f9 	movwne	r0, #2041	; 0x7f9
    1f6e:	d0c7      	beq.n	1f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f70:	f3af 8000 	nop.w
    1f74:	e7c4      	b.n	1f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f76:	e7ff      	b.n	1f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1f78:	485d      	ldr	r0, [pc, #372]	; (20f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf0>)
    1f7a:	2800      	cmp	r0, #0
    1f7c:	bf18      	it	ne
    1f7e:	f3af 8000 	nopne.w
    1f82:	b662      	cpsie	i
    1f84:	e7c4      	b.n	1f10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1f86:	b124      	cbz	r4, 1f92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1f88:	2100      	movs	r1, #0
    1f8a:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1f8e:	f3af 8000 	nop.w
    1f92:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f94:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1f98:	2803      	cmp	r0, #3
    1f9a:	d178      	bne.n	208e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8e>
    1f9c:	f8dd 9000 	ldr.w	r9, [sp]
    1fa0:	f8cd 9018 	str.w	r9, [sp, #24]
    1fa4:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fa6:	f899 0020 	ldrb.w	r0, [r9, #32]
    1faa:	4288      	cmp	r0, r1
    1fac:	bf14      	ite	ne
    1fae:	f04f 0a00 	movne.w	sl, #0
    1fb2:	f04f 0a01 	moveq.w	sl, #1
    1fb6:	f109 0c20 	add.w	ip, r9, #32
    1fba:	4686      	mov	lr, r0
    1fbc:	2220      	movs	r2, #32
    1fbe:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1fc2:	e003      	b.n	1fcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1fc4:	4602      	mov	r2, r0
    1fc6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fca:	7840      	ldrb	r0, [r0, #1]
    1fcc:	4288      	cmp	r0, r1
    1fce:	d002      	beq.n	1fd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1fd0:	2820      	cmp	r0, #32
    1fd2:	d00a      	beq.n	1fea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fd4:	e7f6      	b.n	1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1fd6:	2820      	cmp	r0, #32
    1fd8:	d007      	beq.n	1fea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fda:	4586      	cmp	lr, r0
    1fdc:	d107      	bne.n	1fee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1fde:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1fe2:	7840      	ldrb	r0, [r0, #1]
    1fe4:	f88c 0000 	strb.w	r0, [ip]
    1fe8:	e007      	b.n	1ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1fea:	4640      	mov	r0, r8
    1fec:	e00c      	b.n	2008 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8>
    1fee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1ff2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1ff6:	7840      	ldrb	r0, [r0, #1]
    1ff8:	7048      	strb	r0, [r1, #1]
    1ffa:	b124      	cbz	r4, 2006 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6>
    1ffc:	2100      	movs	r1, #0
    1ffe:	f240 5044 	movw	r0, #1348	; 0x544
    2002:	f3af 8000 	nop.w
    2006:	4658      	mov	r0, fp
    2008:	ea10 0f0a 	tst.w	r0, sl
    200c:	bf18      	it	ne
    200e:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    2012:	b3e0      	cbz	r0, 208e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8e>
    2014:	b124      	cbz	r4, 2020 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20>
    2016:	2100      	movs	r1, #0
    2018:	f640 0002 	movw	r0, #2050	; 0x802
    201c:	f3af 8000 	nop.w
    2020:	4632      	mov	r2, r6
    2022:	2001      	movs	r0, #1
    2024:	990c      	ldr	r1, [sp, #48]	; 0x30
    2026:	f7ff f903 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    202a:	9806      	ldr	r0, [sp, #24]
    202c:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    2030:	b124      	cbz	r4, 203c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3c>
    2032:	2100      	movs	r1, #0
    2034:	f640 000d 	movw	r0, #2061	; 0x80d
    2038:	f3af 8000 	nop.w
    203c:	482d      	ldr	r0, [pc, #180]	; (20f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf4>)
    203e:	2800      	cmp	r0, #0
    2040:	bf18      	it	ne
    2042:	f3af 8000 	nopne.w
    2046:	f3ef 8010 	mrs	r0, PRIMASK
    204a:	b672      	cpsid	i
    204c:	9008      	str	r0, [sp, #32]
    204e:	b124      	cbz	r4, 205a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5a>
    2050:	2100      	movs	r1, #0
    2052:	f640 0012 	movw	r0, #2066	; 0x812
    2056:	f3af 8000 	nop.w
    205a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    205e:	b138      	cbz	r0, 2070 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x70>
    2060:	2c00      	cmp	r4, #0
    2062:	bf1c      	itt	ne
    2064:	2100      	movne	r1, #0
    2066:	f640 0016 	movwne	r0, #2070	; 0x816
    206a:	f43f af49 	beq.w	1f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    206e:	e77f      	b.n	1f70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2070:	f1b9 0f00 	cmp.w	r9, #0
    2074:	d008      	beq.n	2088 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88>
    2076:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    207a:	2820      	cmp	r0, #32
    207c:	d104      	bne.n	2088 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88>
    207e:	4631      	mov	r1, r6
    2080:	2002      	movs	r0, #2
    2082:	f7ff f905 	bl	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    2086:	b1f8      	cbz	r0, 20c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc8>
    2088:	b134      	cbz	r4, 2098 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x98>
    208a:	2100      	movs	r1, #0
    208c:	e000      	b.n	2090 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x90>
    208e:	e009      	b.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    2090:	f640 002a 	movw	r0, #2090	; 0x82a
    2094:	f3af 8000 	nop.w
    2098:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    209c:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    20a0:	2001      	movs	r0, #1
    20a2:	9009      	str	r0, [sp, #36]	; 0x24
    20a4:	b124      	cbz	r4, 20b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb0>
    20a6:	2100      	movs	r1, #0
    20a8:	f640 0033 	movw	r0, #2099	; 0x833
    20ac:	f3af 8000 	nop.w
    20b0:	9808      	ldr	r0, [sp, #32]
    20b2:	b188      	cbz	r0, 20d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd8>
    20b4:	b124      	cbz	r4, 20c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc0>
    20b6:	2100      	movs	r1, #0
    20b8:	f640 0037 	movw	r0, #2103	; 0x837
    20bc:	f3af 8000 	nop.w
    20c0:	9809      	ldr	r0, [sp, #36]	; 0x24
    20c2:	b00d      	add	sp, #52	; 0x34
    20c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20c8:	2c00      	cmp	r4, #0
    20ca:	d0f1      	beq.n	20b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb0>
    20cc:	2100      	movs	r1, #0
    20ce:	f640 0025 	movw	r0, #2085	; 0x825
    20d2:	f3af 8000 	nop.w
    20d6:	e7e6      	b.n	20a6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa6>
    20d8:	4805      	ldr	r0, [pc, #20]	; (20f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf0>)
    20da:	2800      	cmp	r0, #0
    20dc:	bf18      	it	ne
    20de:	f3af 8000 	nopne.w
    20e2:	b662      	cpsie	i
    20e4:	e7e6      	b.n	20b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb4>
    20e6:	0000      	.short	0x0000
    20e8:	20000f14 	.word	0x20000f14
	...

000020f8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    20f8:	2820      	cmp	r0, #32
    20fa:	bf24      	itt	cs
    20fc:	2000      	movcs	r0, #0
    20fe:	4770      	bxcs	lr
    2100:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2104:	4b03      	ldr	r3, [pc, #12]	; (2114 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2106:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    210a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    210e:	6042      	str	r2, [r0, #4]
    2110:	2001      	movs	r0, #1
    2112:	4770      	bx	lr
    2114:	20000b94 	.word	0x20000b94

00002118 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2118:	b510      	push	{r4, lr}
    211a:	2820      	cmp	r0, #32
    211c:	d211      	bcs.n	2142 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    211e:	490e      	ldr	r1, [pc, #56]	; (2158 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2120:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2124:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2128:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    212c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2130:	b13b      	cbz	r3, 2142 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2132:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2136:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    213a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    213e:	2a01      	cmp	r2, #1
    2140:	d001      	beq.n	2146 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2142:	2000      	movs	r0, #0
    2144:	bd10      	pop	{r4, pc}
    2146:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    214a:	4601      	mov	r1, r0
    214c:	2000      	movs	r0, #0
    214e:	f7ff f86f 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    2152:	2001      	movs	r0, #1
    2154:	bd10      	pop	{r4, pc}
    2156:	0000      	.short	0x0000
    2158:	20000f14 	.word	0x20000f14

0000215c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    215c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2160:	4e7e      	ldr	r6, [pc, #504]	; (235c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2162:	4680      	mov	r8, r0
    2164:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2168:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    216c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2170:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2174:	2800      	cmp	r0, #0
    2176:	d065      	beq.n	2244 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2178:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    217c:	4d78      	ldr	r5, [pc, #480]	; (2360 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    217e:	b125      	cbz	r5, 218a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2180:	2100      	movs	r1, #0
    2182:	f640 30b9 	movw	r0, #3001	; 0xbb9
    2186:	f3af 8000 	nop.w
    218a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    218e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2192:	2801      	cmp	r0, #1
    2194:	d018      	beq.n	21c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2196:	b2c0      	uxtb	r0, r0
    2198:	2804      	cmp	r0, #4
    219a:	bf1c      	itt	ne
    219c:	2805      	cmpne	r0, #5
    219e:	2806      	cmpne	r0, #6
    21a0:	d055      	beq.n	224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    21a2:	b12d      	cbz	r5, 21b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    21a4:	f04f 0100 	mov.w	r1, #0
    21a8:	f640 30c5 	movw	r0, #3013	; 0xbc5
    21ac:	f3af 8000 	nop.w
    21b0:	f001 fc40 	bl	3a34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    21b4:	b125      	cbz	r5, 21c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    21b6:	2100      	movs	r1, #0
    21b8:	f640 30c9 	movw	r0, #3017	; 0xbc9
    21bc:	f3af 8000 	nop.w
    21c0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21c4:	2801      	cmp	r0, #1
    21c6:	d1e6      	bne.n	2196 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    21c8:	2401      	movs	r4, #1
    21ca:	b125      	cbz	r5, 21d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    21cc:	2100      	movs	r1, #0
    21ce:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    21d2:	f3af 8000 	nop.w
    21d6:	b3a4      	cbz	r4, 2242 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    21d8:	2000      	movs	r0, #0
    21da:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    21de:	b125      	cbz	r5, 21ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    21e0:	2100      	movs	r1, #0
    21e2:	f640 30d5 	movw	r0, #3029	; 0xbd5
    21e6:	f3af 8000 	nop.w
    21ea:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    21ee:	2001      	movs	r0, #1
    21f0:	ea20 090b 	bic.w	r9, r0, fp
    21f4:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21f8:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21fc:	2240      	movs	r2, #64	; 0x40
    21fe:	f009 fdbf 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2202:	b125      	cbz	r5, 220e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    2204:	2100      	movs	r1, #0
    2206:	f240 50da 	movw	r0, #1498	; 0x5da
    220a:	f3af 8000 	nop.w
    220e:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2212:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2216:	6a00      	ldr	r0, [r0, #32]
    2218:	f8ca 0020 	str.w	r0, [sl, #32]
    221c:	b125      	cbz	r5, 2228 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    221e:	2100      	movs	r1, #0
    2220:	f240 50de 	movw	r0, #1502	; 0x5de
    2224:	f3af 8000 	nop.w
    2228:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    222c:	b1e0      	cbz	r0, 2268 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    222e:	2d00      	cmp	r5, #0
    2230:	bf1c      	itt	ne
    2232:	2100      	movne	r1, #0
    2234:	f640 30db 	movwne	r0, #3035	; 0xbdb
    2238:	d0c7      	beq.n	21ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    223a:	bf00      	nop
    223c:	f3af 8000 	nop.w
    2240:	e7c3      	b.n	21ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2242:	e00a      	b.n	225a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2244:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    2248:	2070      	movs	r0, #112	; 0x70
    224a:	f001 facd 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    224e:	464a      	mov	r2, r9
    2250:	4641      	mov	r1, r8
    2252:	2001      	movs	r0, #1
    2254:	f7fe ffec 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    2258:	e7ac      	b.n	21b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    225a:	4842      	ldr	r0, [pc, #264]	; (2364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    225c:	2800      	cmp	r0, #0
    225e:	bf18      	it	ne
    2260:	f3af 8000 	nopne.w
    2264:	b662      	cpsie	i
    2266:	e7b7      	b.n	21d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2268:	b125      	cbz	r5, 2274 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    226a:	2100      	movs	r1, #0
    226c:	f640 30df 	movw	r0, #3039	; 0xbdf
    2270:	f3af 8000 	nop.w
    2274:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2278:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    227c:	4640      	mov	r0, r8
    227e:	461c      	mov	r4, r3
    2280:	f04f 0b20 	mov.w	fp, #32
    2284:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2288:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    228c:	e004      	b.n	2298 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    228e:	46a3      	mov	fp, r4
    2290:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2294:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2298:	4284      	cmp	r4, r0
    229a:	d002      	beq.n	22a2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    229c:	2c20      	cmp	r4, #32
    229e:	d02b      	beq.n	22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    22a0:	e7f5      	b.n	228e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    22a2:	2c20      	cmp	r4, #32
    22a4:	d028      	beq.n	22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    22a6:	42a3      	cmp	r3, r4
    22a8:	d104      	bne.n	22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    22aa:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    22ae:	7840      	ldrb	r0, [r0, #1]
    22b0:	7008      	strb	r0, [r1, #0]
    22b2:	e005      	b.n	22c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    22b4:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    22b8:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    22bc:	7840      	ldrb	r0, [r0, #1]
    22be:	7048      	strb	r0, [r1, #1]
    22c0:	f1ba 0f00 	cmp.w	sl, #0
    22c4:	d011      	beq.n	22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22c6:	b125      	cbz	r5, 22d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    22c8:	2100      	movs	r1, #0
    22ca:	f240 503c 	movw	r0, #1340	; 0x53c
    22ce:	f3af 8000 	nop.w
    22d2:	f89a 0000 	ldrb.w	r0, [sl]
    22d6:	42a0      	cmp	r0, r4
    22d8:	d107      	bne.n	22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22da:	b125      	cbz	r5, 22e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    22dc:	2100      	movs	r1, #0
    22de:	f240 503f 	movw	r0, #1343	; 0x53f
    22e2:	f3af 8000 	nop.w
    22e6:	f88a b000 	strb.w	fp, [sl]
    22ea:	b15d      	cbz	r5, 2304 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22ec:	2100      	movs	r1, #0
    22ee:	f240 5044 	movw	r0, #1348	; 0x544
    22f2:	f3af 8000 	nop.w
    22f6:	e000      	b.n	22fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    22f8:	b125      	cbz	r5, 2304 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22fa:	2100      	movs	r1, #0
    22fc:	f640 30e3 	movw	r0, #3043	; 0xbe3
    2300:	f3af 8000 	nop.w
    2304:	4818      	ldr	r0, [pc, #96]	; (2368 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2306:	2800      	cmp	r0, #0
    2308:	bf18      	it	ne
    230a:	f3af 8000 	nopne.w
    230e:	f3ef 8410 	mrs	r4, PRIMASK
    2312:	b672      	cpsid	i
    2314:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2318:	b138      	cbz	r0, 232a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    231a:	2d00      	cmp	r5, #0
    231c:	bf1c      	itt	ne
    231e:	2100      	movne	r1, #0
    2320:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    2324:	f43f af51 	beq.w	21ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2328:	e788      	b.n	223c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    232a:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    232e:	2001      	movs	r0, #1
    2330:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2334:	b154      	cbz	r4, 234c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    2336:	2d00      	cmp	r5, #0
    2338:	bf08      	it	eq
    233a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    233e:	2100      	movs	r1, #0
    2340:	f640 30f6 	movw	r0, #3062	; 0xbf6
    2344:	f3af 8000 	nop.w
    2348:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    234c:	4805      	ldr	r0, [pc, #20]	; (2364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    234e:	2800      	cmp	r0, #0
    2350:	bf18      	it	ne
    2352:	f3af 8000 	nopne.w
    2356:	b662      	cpsie	i
    2358:	e7ed      	b.n	2336 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    235a:	0000      	.short	0x0000
    235c:	20000f14 	.word	0x20000f14
	...

0000236c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    236c:	b570      	push	{r4, r5, r6, lr}
    236e:	460d      	mov	r5, r1
    2370:	4606      	mov	r6, r0
    2372:	f001 f9c3 	bl	36fc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2376:	480f      	ldr	r0, [pc, #60]	; (23b4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2378:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    237c:	2400      	movs	r4, #0
    237e:	3880      	subs	r0, #128	; 0x80
    2380:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2384:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2388:	b129      	cbz	r1, 2396 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    238a:	1c61      	adds	r1, r4, #1
    238c:	b2cc      	uxtb	r4, r1
    238e:	2c20      	cmp	r4, #32
    2390:	d3f8      	bcc.n	2384 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2392:	2020      	movs	r0, #32
    2394:	bd70      	pop	{r4, r5, r6, pc}
    2396:	4808      	ldr	r0, [pc, #32]	; (23b8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2398:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    239c:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    23a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    23a4:	4621      	mov	r1, r4
    23a6:	6045      	str	r5, [r0, #4]
    23a8:	2001      	movs	r0, #1
    23aa:	f7fe ff41 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    23ae:	4620      	mov	r0, r4
    23b0:	bd70      	pop	{r4, r5, r6, pc}
    23b2:	0000      	.short	0x0000
    23b4:	20000f14 	.word	0x20000f14
    23b8:	20000b94 	.word	0x20000b94

000023bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    23bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23c0:	b083      	sub	sp, #12
    23c2:	f000 fb21 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    23c6:	4605      	mov	r5, r0
    23c8:	f000 fdd4 	bl	2f74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23cc:	4c63      	ldr	r4, [pc, #396]	; (255c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    23ce:	68a0      	ldr	r0, [r4, #8]
    23d0:	f1b0 3fff 	cmp.w	r0, #4294967295
    23d4:	bf1c      	itt	ne
    23d6:	f04f 30ff 	movne.w	r0, #4294967295
    23da:	60a0      	strne	r0, [r4, #8]
    23dc:	7fa0      	ldrb	r0, [r4, #30]
    23de:	f8df b180 	ldr.w	fp, [pc, #384]	; 2560 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>
    23e2:	b9a8      	cbnz	r0, 2410 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    23e4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    23e8:	1a08      	subs	r0, r1, r0
    23ea:	0200      	lsls	r0, r0, #8
    23ec:	17c1      	asrs	r1, r0, #31
    23ee:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23f2:	1200      	asrs	r0, r0, #8
    23f4:	f44f 710c 	mov.w	r1, #560	; 0x230
    23f8:	f009 fb81 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23fc:	6921      	ldr	r1, [r4, #16]
    23fe:	4408      	add	r0, r1
    2400:	1a28      	subs	r0, r5, r0
    2402:	0200      	lsls	r0, r0, #8
    2404:	17c1      	asrs	r1, r0, #31
    2406:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    240a:	1200      	asrs	r0, r0, #8
    240c:	0fc0      	lsrs	r0, r0, #31
    240e:	d00b      	beq.n	2428 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2410:	7e60      	ldrb	r0, [r4, #25]
    2412:	b1e8      	cbz	r0, 2450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    2414:	f000 fc04 	bl	2c20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2418:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    241c:	b1f0      	cbz	r0, 245c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    241e:	f240 4154 	movw	r1, #1108	; 0x454
    2422:	2070      	movs	r0, #112	; 0x70
    2424:	f001 f9e0 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2428:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    242c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2430:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2434:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2438:	6840      	ldr	r0, [r0, #4]
    243a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    243e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2442:	2108      	movs	r1, #8
    2444:	4790      	blx	r2
    2446:	f240 4143 	movw	r1, #1091	; 0x443
    244a:	2070      	movs	r0, #112	; 0x70
    244c:	f001 f9cc 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2450:	1ce8      	adds	r0, r5, #3
    2452:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2456:	f000 fadd 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    245a:	e7dd      	b.n	2418 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    245c:	f04f 0a01 	mov.w	sl, #1
    2460:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2464:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2468:	2820      	cmp	r0, #32
    246a:	d024      	beq.n	24b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    246c:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2470:	2020      	movs	r0, #32
    2472:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2476:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    247a:	2600      	movs	r6, #0
    247c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2480:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2484:	4837      	ldr	r0, [pc, #220]	; (2564 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    2486:	6026      	str	r6, [r4, #0]
    2488:	7800      	ldrb	r0, [r0, #0]
    248a:	2802      	cmp	r0, #2
    248c:	bf16      	itet	ne
    248e:	2803      	cmpne	r0, #3
    2490:	2001      	moveq	r0, #1
    2492:	2000      	movne	r0, #0
    2494:	7720      	strb	r0, [r4, #28]
    2496:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    249a:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    249e:	f899 0020 	ldrb.w	r0, [r9, #32]
    24a2:	2820      	cmp	r0, #32
    24a4:	d031      	beq.n	250a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24aa:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    24ae:	7d81      	ldrb	r1, [r0, #22]
    24b0:	2901      	cmp	r1, #1
    24b2:	d005      	beq.n	24c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    24b4:	e029      	b.n	250a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24b6:	f240 4157 	movw	r1, #1111	; 0x457
    24ba:	2070      	movs	r0, #112	; 0x70
    24bc:	f001 f994 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24c0:	46ab      	mov	fp, r5
    24c2:	f100 0508 	add.w	r5, r0, #8
    24c6:	8a40      	ldrh	r0, [r0, #18]
    24c8:	aa01      	add	r2, sp, #4
    24ca:	4669      	mov	r1, sp
    24cc:	f000 f946 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24d0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24d4:	2820      	cmp	r0, #32
    24d6:	d004      	beq.n	24e2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
    24d8:	6920      	ldr	r0, [r4, #16]
    24da:	1d40      	adds	r0, r0, #5
    24dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24e0:	e00b      	b.n	24fa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13e>
    24e2:	8968      	ldrh	r0, [r5, #10]
    24e4:	f10b 0b09 	add.w	fp, fp, #9
    24e8:	b128      	cbz	r0, 24f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
    24ea:	f001 f919 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24ee:	2800      	cmp	r0, #0
    24f0:	bf08      	it	eq
    24f2:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    24f6:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    24fa:	e9d5 2100 	ldrd	r2, r1, [r5]
    24fe:	1a89      	subs	r1, r1, r2
    2500:	6028      	str	r0, [r5, #0]
    2502:	4408      	add	r0, r1
    2504:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2508:	6068      	str	r0, [r5, #4]
    250a:	4639      	mov	r1, r7
    250c:	2001      	movs	r0, #1
    250e:	f7fe febf 	bl	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    2512:	2800      	cmp	r0, #0
    2514:	d0f9      	beq.n	250a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2516:	4814      	ldr	r0, [pc, #80]	; (2568 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    2518:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    251c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2520:	2802      	cmp	r0, #2
    2522:	d104      	bne.n	252e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x172>
    2524:	463a      	mov	r2, r7
    2526:	4641      	mov	r1, r8
    2528:	2006      	movs	r0, #6
    252a:	f7fe fe81 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    252e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2532:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2536:	2820      	cmp	r0, #32
    2538:	d003      	beq.n	2542 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
    253a:	480c      	ldr	r0, [pc, #48]	; (256c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    253c:	7840      	ldrb	r0, [r0, #1]
    253e:	f001 fa23 	bl	3988 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2542:	7f20      	ldrb	r0, [r4, #28]
    2544:	2800      	cmp	r0, #0
    2546:	bf04      	itt	eq
    2548:	b003      	addeq	sp, #12
    254a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    254e:	f000 fd5b 	bl	3008 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2552:	7726      	strb	r6, [r4, #28]
    2554:	7766      	strb	r6, [r4, #29]
    2556:	b003      	add	sp, #12
    2558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    255c:	20000f14 	.word	0x20000f14
    2560:	20000b94 	.word	0x20000b94
    2564:	20000016 	.word	0x20000016
    2568:	20000e94 	.word	0x20000e94
    256c:	20000014 	.word	0x20000014

00002570 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2570:	b510      	push	{r4, lr}
    2572:	4c30      	ldr	r4, [pc, #192]	; (2634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2574:	b082      	sub	sp, #8
    2576:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    257a:	2920      	cmp	r1, #32
    257c:	d008      	beq.n	2590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    257e:	68a1      	ldr	r1, [r4, #8]
    2580:	f1b1 3fff 	cmp.w	r1, #4294967295
    2584:	d009      	beq.n	259a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2586:	f640 21e8 	movw	r1, #2792	; 0xae8
    258a:	2070      	movs	r0, #112	; 0x70
    258c:	f001 f92c 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2590:	f640 21e7 	movw	r1, #2791	; 0xae7
    2594:	2070      	movs	r0, #112	; 0x70
    2596:	f001 f927 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    259a:	6862      	ldr	r2, [r4, #4]
    259c:	4601      	mov	r1, r0
    259e:	4b26      	ldr	r3, [pc, #152]	; (2638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>)
    25a0:	1850      	adds	r0, r2, r1
    25a2:	429a      	cmp	r2, r3
    25a4:	d904      	bls.n	25b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    25a6:	f240 6116 	movw	r1, #1558	; 0x616
    25aa:	2070      	movs	r0, #112	; 0x70
    25ac:	f001 f91c 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b0:	4a22      	ldr	r2, [pc, #136]	; (263c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    25b2:	4291      	cmp	r1, r2
    25b4:	dd04      	ble.n	25c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    25b6:	f240 6117 	movw	r1, #1559	; 0x617
    25ba:	2070      	movs	r0, #112	; 0x70
    25bc:	f001 f914 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25c0:	4a1f      	ldr	r2, [pc, #124]	; (2640 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    25c2:	4291      	cmp	r1, r2
    25c4:	da04      	bge.n	25d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    25c6:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    25ca:	2070      	movs	r0, #112	; 0x70
    25cc:	f001 f90c 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25d0:	491c      	ldr	r1, [pc, #112]	; (2644 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    25d2:	4281      	cmp	r1, r0
    25d4:	bfdc      	itt	le
    25d6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25da:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25de:	dd05      	ble.n	25ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    25e0:	2800      	cmp	r0, #0
    25e2:	bfbc      	itt	lt
    25e4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25e8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25ec:	aa01      	add	r2, sp, #4
    25ee:	4669      	mov	r1, sp
    25f0:	f000 f8b4 	bl	275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    25f8:	280f      	cmp	r0, #15
    25fa:	bf8c      	ite	hi
    25fc:	2001      	movhi	r0, #1
    25fe:	2000      	movls	r0, #0
    2600:	9900      	ldr	r1, [sp, #0]
    2602:	4408      	add	r0, r1
    2604:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2608:	60a1      	str	r1, [r4, #8]
    260a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    260e:	2800      	cmp	r0, #0
    2610:	bf04      	itt	eq
    2612:	b002      	addeq	sp, #8
    2614:	bd10      	popeq	{r4, pc}
    2616:	2301      	movs	r3, #1
    2618:	2203      	movs	r2, #3
    261a:	2005      	movs	r0, #5
    261c:	f000 fb7a 	bl	2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2620:	2800      	cmp	r0, #0
    2622:	bf1c      	itt	ne
    2624:	b002      	addne	sp, #8
    2626:	bd10      	popne	{r4, pc}
    2628:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    262c:	2070      	movs	r0, #112	; 0x70
    262e:	f001 f8db 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2632:	0000      	.short	0x0000
    2634:	20000f14 	.word	0x20000f14
    2638:	1e847fff 	.word	0x1e847fff
    263c:	07a12000 	.word	0x07a12000
    2640:	f85ee000 	.word	0xf85ee000
    2644:	1e848000 	.word	0x1e848000

00002648 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2648:	b570      	push	{r4, r5, r6, lr}
    264a:	4c1e      	ldr	r4, [pc, #120]	; (26c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    264c:	2120      	movs	r1, #32
    264e:	f884 1020 	strb.w	r1, [r4, #32]
    2652:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2656:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    265a:	2000      	movs	r0, #0
    265c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2660:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2664:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2668:	1e42      	subs	r2, r0, #1
    266a:	60a2      	str	r2, [r4, #8]
    266c:	6020      	str	r0, [r4, #0]
    266e:	77a0      	strb	r0, [r4, #30]
    2670:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2674:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2678:	7720      	strb	r0, [r4, #28]
    267a:	7760      	strb	r0, [r4, #29]
    267c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2680:	4911      	ldr	r1, [pc, #68]	; (26c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2682:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2686:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    268a:	7008      	strb	r0, [r1, #0]
    268c:	7048      	strb	r0, [r1, #1]
    268e:	8048      	strh	r0, [r1, #2]
    2690:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2694:	2210      	movs	r2, #16
    2696:	7088      	strb	r0, [r1, #2]
    2698:	f801 0f04 	strb.w	r0, [r1, #4]!
    269c:	1e52      	subs	r2, r2, #1
    269e:	d1fa      	bne.n	2696 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    26a0:	4d0a      	ldr	r5, [pc, #40]	; (26cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    26a2:	2601      	movs	r6, #1
    26a4:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    26a8:	20ff      	movs	r0, #255	; 0xff
    26aa:	7028      	strb	r0, [r5, #0]
    26ac:	4808      	ldr	r0, [pc, #32]	; (26d0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    26ae:	f001 f94d 	bl	394c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    26b2:	7068      	strb	r0, [r5, #1]
    26b4:	f001 f9a8 	bl	3a08 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    26b8:	60a8      	str	r0, [r5, #8]
    26ba:	f000 fced 	bl	3098 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    26be:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    26c2:	bd70      	pop	{r4, r5, r6, pc}
    26c4:	20000f14 	.word	0x20000f14
    26c8:	20000016 	.word	0x20000016
    26cc:	20000014 	.word	0x20000014
    26d0:	000010ed 	.word	0x000010ed

000026d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    26d4:	b570      	push	{r4, r5, r6, lr}
    26d6:	4604      	mov	r4, r0
    26d8:	4615      	mov	r5, r2
    26da:	4608      	mov	r0, r1
    26dc:	f009 f9d7 	bl	ba8e <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>
    26e0:	4a0f      	ldr	r2, [pc, #60]	; (2720 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    26e2:	1b01      	subs	r1, r0, r4
    26e4:	f102 0c01 	add.w	ip, r2, #1
    26e8:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    26ec:	bf24      	itt	cs
    26ee:	1a23      	subcs	r3, r4, r0
    26f0:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    26f4:	d30b      	bcc.n	270e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    26f6:	428a      	cmp	r2, r1
    26f8:	d203      	bcs.n	2702 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    26fa:	1b11      	subs	r1, r2, r4
    26fc:	4408      	add	r0, r1
    26fe:	1c41      	adds	r1, r0, #1
    2700:	e005      	b.n	270e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2702:	429a      	cmp	r2, r3
    2704:	d207      	bcs.n	2716 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    2706:	1a10      	subs	r0, r2, r0
    2708:	4420      	add	r0, r4
    270a:	1c40      	adds	r0, r0, #1
    270c:	4241      	negs	r1, r0
    270e:	f101 000f 	add.w	r0, r1, #15
    2712:	1a28      	subs	r0, r5, r0
    2714:	bd70      	pop	{r4, r5, r6, pc}
    2716:	f640 310b 	movw	r1, #2827	; 0xb0b
    271a:	2070      	movs	r0, #112	; 0x70
    271c:	f001 f864 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2720:	1e847fff 	.word	0x1e847fff

00002724 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2724:	0b41      	lsrs	r1, r0, #13
    2726:	f248 6237 	movw	r2, #34359	; 0x8637
    272a:	4351      	muls	r1, r2
    272c:	0c0a      	lsrs	r2, r1, #16
    272e:	4b09      	ldr	r3, [pc, #36]	; (2754 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2730:	0251      	lsls	r1, r2, #9
    2732:	fb02 0203 	mla	r2, r2, r3, r0
    2736:	4808      	ldr	r0, [pc, #32]	; (2758 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2738:	4350      	muls	r0, r2
    273a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    273e:	306e      	adds	r0, #110	; 0x6e
    2740:	0d40      	lsrs	r0, r0, #21
    2742:	425b      	negs	r3, r3
    2744:	fb10 f303 	smulbb	r3, r0, r3
    2748:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    274c:	bf88      	it	hi
    274e:	1c49      	addhi	r1, r1, #1
    2750:	4408      	add	r0, r1
    2752:	4770      	bx	lr
    2754:	ffffc2f7 	.word	0xffffc2f7
    2758:	00010c6f 	.word	0x00010c6f

0000275c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    275c:	0b43      	lsrs	r3, r0, #13
    275e:	f248 6c37 	movw	ip, #34359	; 0x8637
    2762:	fb03 f30c 	mul.w	r3, r3, ip
    2766:	b430      	push	{r4, r5}
    2768:	0c1b      	lsrs	r3, r3, #16
    276a:	f8df c044 	ldr.w	ip, [pc, #68]	; 27b0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    276e:	025c      	lsls	r4, r3, #9
    2770:	fb03 030c 	mla	r3, r3, ip, r0
    2774:	480f      	ldr	r0, [pc, #60]	; (27b4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2776:	4358      	muls	r0, r3
    2778:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    277c:	eb04 000c 	add.w	r0, r4, ip
    2780:	f643 5409 	movw	r4, #15625	; 0x3d09
    2784:	fb1c f404 	smulbb	r4, ip, r4
    2788:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    278c:	f643 5508 	movw	r5, #15624	; 0x3d08
    2790:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2794:	442c      	add	r4, r5
    2796:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    279a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    279e:	bf84      	itt	hi
    27a0:	f04f 0c00 	movhi.w	ip, #0
    27a4:	1c40      	addhi	r0, r0, #1
    27a6:	6008      	str	r0, [r1, #0]
    27a8:	f882 c000 	strb.w	ip, [r2]
    27ac:	bc30      	pop	{r4, r5}
    27ae:	4770      	bx	lr
    27b0:	ffffc2f7 	.word	0xffffc2f7
    27b4:	00010c6f 	.word	0x00010c6f

000027b8 <MPSL_IRQ_RTC0_Handler>:
    27b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27bc:	4c38      	ldr	r4, [pc, #224]	; (28a0 <MPSL_IRQ_RTC0_Handler+0xe8>)
    27be:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27c2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 28a4 <MPSL_IRQ_RTC0_Handler+0xec>
    27c6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27ca:	f44f 6600 	mov.w	r6, #2048	; 0x800
    27ce:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27d2:	f04f 0500 	mov.w	r5, #0
    27d6:	bf1c      	itt	ne
    27d8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27dc:	2800      	cmpne	r0, #0
    27de:	d017      	beq.n	2810 <MPSL_IRQ_RTC0_Handler+0x58>
    27e0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    27e4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27e8:	482f      	ldr	r0, [pc, #188]	; (28a8 <MPSL_IRQ_RTC0_Handler+0xf0>)
    27ea:	6800      	ldr	r0, [r0, #0]
    27ec:	f8d8 1000 	ldr.w	r1, [r8]
    27f0:	eba0 0001 	sub.w	r0, r0, r1
    27f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27f8:	2802      	cmp	r0, #2
    27fa:	d302      	bcc.n	2802 <MPSL_IRQ_RTC0_Handler+0x4a>
    27fc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2800:	d306      	bcc.n	2810 <MPSL_IRQ_RTC0_Handler+0x58>
    2802:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2806:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    280a:	2004      	movs	r0, #4
    280c:	f7fe ff68 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2810:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2814:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2818:	bf1c      	itt	ne
    281a:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    281e:	2800      	cmpne	r0, #0
    2820:	d017      	beq.n	2852 <MPSL_IRQ_RTC0_Handler+0x9a>
    2822:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2826:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    282a:	4820      	ldr	r0, [pc, #128]	; (28ac <MPSL_IRQ_RTC0_Handler+0xf4>)
    282c:	6800      	ldr	r0, [r0, #0]
    282e:	f8d8 1000 	ldr.w	r1, [r8]
    2832:	eba0 0001 	sub.w	r0, r0, r1
    2836:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    283a:	2802      	cmp	r0, #2
    283c:	d302      	bcc.n	2844 <MPSL_IRQ_RTC0_Handler+0x8c>
    283e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2842:	d306      	bcc.n	2852 <MPSL_IRQ_RTC0_Handler+0x9a>
    2844:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2848:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    284c:	2005      	movs	r0, #5
    284e:	f7fe ff47 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2852:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2856:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    285a:	bf1a      	itte	ne
    285c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2860:	2800      	cmpne	r0, #0
    2862:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2866:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    286a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    286e:	4810      	ldr	r0, [pc, #64]	; (28b0 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2870:	6800      	ldr	r0, [r0, #0]
    2872:	f8d8 1000 	ldr.w	r1, [r8]
    2876:	eba0 0001 	sub.w	r0, r0, r1
    287a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    287e:	2802      	cmp	r0, #2
    2880:	d304      	bcc.n	288c <MPSL_IRQ_RTC0_Handler+0xd4>
    2882:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2886:	bf38      	it	cc
    2888:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    288c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2890:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2898:	2006      	movs	r0, #6
    289a:	f7fe bf21 	b.w	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    289e:	0000      	.short	0x0000
    28a0:	4000b000 	.word	0x4000b000
    28a4:	4000b504 	.word	0x4000b504
    28a8:	4000b540 	.word	0x4000b540
    28ac:	4000b544 	.word	0x4000b544
    28b0:	4000b548 	.word	0x4000b548

000028b4 <MPSL_IRQ_TIMER0_Handler>:
    28b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28b8:	4d3a      	ldr	r5, [pc, #232]	; (29a4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28ba:	7828      	ldrb	r0, [r5, #0]
    28bc:	2804      	cmp	r0, #4
    28be:	d06c      	beq.n	299a <MPSL_IRQ_TIMER0_Handler+0xe6>
    28c0:	1ce8      	adds	r0, r5, #3
    28c2:	2201      	movs	r2, #1
    28c4:	7801      	ldrb	r1, [r0, #0]
    28c6:	b159      	cbz	r1, 28e0 <MPSL_IRQ_TIMER0_Handler+0x2c>
    28c8:	2901      	cmp	r1, #1
    28ca:	bf08      	it	eq
    28cc:	706a      	strbeq	r2, [r5, #1]
    28ce:	d002      	beq.n	28d6 <MPSL_IRQ_TIMER0_Handler+0x22>
    28d0:	7869      	ldrb	r1, [r5, #1]
    28d2:	2900      	cmp	r1, #0
    28d4:	d05c      	beq.n	2990 <MPSL_IRQ_TIMER0_Handler+0xdc>
    28d6:	2102      	movs	r1, #2
    28d8:	7001      	strb	r1, [r0, #0]
    28da:	7840      	ldrb	r0, [r0, #1]
    28dc:	f000 fae2 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28e0:	4c31      	ldr	r4, [pc, #196]	; (29a8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    28e2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28e6:	f04f 0800 	mov.w	r8, #0
    28ea:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    28ee:	f44f 7680 	mov.w	r6, #256	; 0x100
    28f2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    28f6:	bf1c      	itt	ne
    28f8:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    28fc:	2800      	cmpne	r0, #0
    28fe:	d008      	beq.n	2912 <MPSL_IRQ_TIMER0_Handler+0x5e>
    2900:	f04f 0003 	mov.w	r0, #3
    2904:	f000 face 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2908:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    290c:	2003      	movs	r0, #3
    290e:	f7fe fee7 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2912:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2916:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    291a:	bf1c      	itt	ne
    291c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2920:	2800      	cmpne	r0, #0
    2922:	d008      	beq.n	2936 <MPSL_IRQ_TIMER0_Handler+0x82>
    2924:	f04f 0002 	mov.w	r0, #2
    2928:	f000 fabc 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    292c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2930:	2002      	movs	r0, #2
    2932:	f7fe fed5 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2936:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    293a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    293e:	bf1c      	itt	ne
    2940:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2944:	2800      	cmpne	r0, #0
    2946:	d008      	beq.n	295a <MPSL_IRQ_TIMER0_Handler+0xa6>
    2948:	f04f 0001 	mov.w	r0, #1
    294c:	f000 faaa 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2950:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2954:	2001      	movs	r0, #1
    2956:	f7fe fec3 	bl	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    295a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    295e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2962:	bf1a      	itte	ne
    2964:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2968:	2800      	cmpne	r0, #0
    296a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    296e:	f04f 0000 	mov.w	r0, #0
    2972:	f000 fa97 	bl	2ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2976:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    297a:	2004      	movs	r0, #4
    297c:	7028      	strb	r0, [r5, #0]
    297e:	f8c5 8008 	str.w	r8, [r5, #8]
    2982:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    298a:	2000      	movs	r0, #0
    298c:	f7fe bea8 	b.w	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2990:	f240 3166 	movw	r1, #870	; 0x366
    2994:	206c      	movs	r0, #108	; 0x6c
    2996:	f000 ff27 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    299a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    299e:	2007      	movs	r0, #7
    29a0:	f7fe be9e 	b.w	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29a4:	20000020 	.word	0x20000020
    29a8:	40008000 	.word	0x40008000
    29ac:	2201      	movs	r2, #1
    29ae:	0213      	lsls	r3, r2, #8
    29b0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    29b4:	2000      	movs	r0, #0
    29b6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    29ba:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    29be:	f3bf 8f4f 	dsb	sy
    29c2:	f3bf 8f6f 	isb	sy
    29c6:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    29ca:	490c      	ldr	r1, [pc, #48]	; (29fc <MPSL_IRQ_TIMER0_Handler+0x148>)
    29cc:	604a      	str	r2, [r1, #4]
    29ce:	1e43      	subs	r3, r0, #1
    29d0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    29d4:	4b0a      	ldr	r3, [pc, #40]	; (2a00 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    29d6:	6018      	str	r0, [r3, #0]
    29d8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29dc:	1d1b      	adds	r3, r3, #4
    29de:	6018      	str	r0, [r3, #0]
    29e0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    29e4:	1d1b      	adds	r3, r3, #4
    29e6:	6018      	str	r0, [r3, #0]
    29e8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    29ec:	1d1b      	adds	r3, r3, #4
    29ee:	6018      	str	r0, [r3, #0]
    29f0:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    29f4:	610a      	str	r2, [r1, #16]
    29f6:	4903      	ldr	r1, [pc, #12]	; (2a04 <MPSL_IRQ_TIMER0_Handler+0x150>)
    29f8:	7048      	strb	r0, [r1, #1]
    29fa:	4770      	bx	lr
    29fc:	40008000 	.word	0x40008000
    2a00:	40008540 	.word	0x40008540
    2a04:	20000020 	.word	0x20000020

00002a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2a08:	4801      	ldr	r0, [pc, #4]	; (2a10 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2a0a:	6800      	ldr	r0, [r0, #0]
    2a0c:	4770      	bx	lr
    2a0e:	0000      	.short	0x0000
    2a10:	4000b504 	.word	0x4000b504

00002a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2a14:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a18:	4e41      	ldr	r6, [pc, #260]	; (2b20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2a1a:	4604      	mov	r4, r0
    2a1c:	1ef7      	subs	r7, r6, #3
    2a1e:	f896 c000 	ldrb.w	ip, [r6]
    2a22:	68f8      	ldr	r0, [r7, #12]
    2a24:	f1bc 0f01 	cmp.w	ip, #1
    2a28:	bf04      	itt	eq
    2a2a:	42a0      	cmpeq	r0, r4
    2a2c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a30:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2a34:	4a3b      	ldr	r2, [pc, #236]	; (2b24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2a36:	6011      	str	r1, [r2, #0]
    2a38:	493b      	ldr	r1, [pc, #236]	; (2b28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2a3a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a3e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a42:	4a3a      	ldr	r2, [pc, #232]	; (2b2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2a44:	f04f 0500 	mov.w	r5, #0
    2a48:	f1bc 0f00 	cmp.w	ip, #0
    2a4c:	d057      	beq.n	2afe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2a4e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2a52:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a56:	6015      	str	r5, [r2, #0]
    2a58:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2a5c:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2a60:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a64:	f04f 0801 	mov.w	r8, #1
    2a68:	2a00      	cmp	r2, #0
    2a6a:	bf04      	itt	eq
    2a6c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2a70:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a78:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a7c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a80:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2a84:	4a2a      	ldr	r2, [pc, #168]	; (2b30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2a86:	f8d2 a000 	ldr.w	sl, [r2]
    2a8a:	eba4 0a0a 	sub.w	sl, r4, sl
    2a8e:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2a92:	f1bb 0f02 	cmp.w	fp, #2
    2a96:	d33c      	bcc.n	2b12 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a98:	f04f 0a02 	mov.w	sl, #2
    2a9c:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2aa0:	d237      	bcs.n	2b12 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2aa2:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2aa6:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2aaa:	f1bc 0f00 	cmp.w	ip, #0
    2aae:	d005      	beq.n	2abc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2ab0:	6811      	ldr	r1, [r2, #0]
    2ab2:	1a41      	subs	r1, r0, r1
    2ab4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ab8:	2902      	cmp	r1, #2
    2aba:	d3f9      	bcc.n	2ab0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2abc:	f8c7 8008 	str.w	r8, [r7, #8]
    2ac0:	703d      	strb	r5, [r7, #0]
    2ac2:	f7ff ff73 	bl	29ac <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ac6:	481b      	ldr	r0, [pc, #108]	; (2b34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2ac8:	6005      	str	r5, [r0, #0]
    2aca:	1d00      	adds	r0, r0, #4
    2acc:	f8c0 a000 	str.w	sl, [r0]
    2ad0:	4919      	ldr	r1, [pc, #100]	; (2b38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2ad2:	2004      	movs	r0, #4
    2ad4:	6008      	str	r0, [r1, #0]
    2ad6:	4919      	ldr	r1, [pc, #100]	; (2b3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2ad8:	f8c1 800c 	str.w	r8, [r1, #12]
    2adc:	68ba      	ldr	r2, [r7, #8]
    2ade:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2ae2:	0181      	lsls	r1, r0, #6
    2ae4:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2ae8:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2aec:	4a14      	ldr	r2, [pc, #80]	; (2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2aee:	0741      	lsls	r1, r0, #29
    2af0:	6011      	str	r1, [r2, #0]
    2af2:	60fc      	str	r4, [r7, #12]
    2af4:	7070      	strb	r0, [r6, #1]
    2af6:	f886 8000 	strb.w	r8, [r6]
    2afa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2afe:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b02:	4b10      	ldr	r3, [pc, #64]	; (2b44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b04:	601d      	str	r5, [r3, #0]
    2b06:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2b0a:	6015      	str	r5, [r2, #0]
    2b0c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2b10:	e7a4      	b.n	2a5c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2b12:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2b16:	f240 11ef 	movw	r1, #495	; 0x1ef
    2b1a:	206c      	movs	r0, #108	; 0x6c
    2b1c:	f000 fe64 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b20:	20000023 	.word	0x20000023
    2b24:	4001f508 	.word	0x4001f508
    2b28:	4000b000 	.word	0x4000b000
    2b2c:	4000b544 	.word	0x4000b544
    2b30:	4000b504 	.word	0x4000b504
    2b34:	40008504 	.word	0x40008504
    2b38:	40008510 	.word	0x40008510
    2b3c:	40008000 	.word	0x40008000
    2b40:	4001f504 	.word	0x4001f504
    2b44:	4000b540 	.word	0x4000b540

00002b48 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b4c:	4c2b      	ldr	r4, [pc, #172]	; (2bfc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b4e:	68e1      	ldr	r1, [r4, #12]
    2b50:	4281      	cmp	r1, r0
    2b52:	bf14      	ite	ne
    2b54:	2201      	movne	r2, #1
    2b56:	2200      	moveq	r2, #0
    2b58:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b5c:	f89c 7000 	ldrb.w	r7, [ip]
    2b60:	2f02      	cmp	r7, #2
    2b62:	d002      	beq.n	2b6a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2b64:	2a00      	cmp	r2, #0
    2b66:	d038      	beq.n	2bda <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2b68:	e003      	b.n	2b72 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2b6a:	2a00      	cmp	r2, #0
    2b6c:	bf08      	it	eq
    2b6e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b72:	7862      	ldrb	r2, [r4, #1]
    2b74:	b382      	cbz	r2, 2bd8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2b76:	4b23      	ldr	r3, [pc, #140]	; (2c04 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b7c:	601a      	str	r2, [r3, #0]
    2b7e:	4b22      	ldr	r3, [pc, #136]	; (2c08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b80:	1395      	asrs	r5, r2, #14
    2b82:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2b86:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2b8a:	2600      	movs	r6, #0
    2b8c:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2b90:	4a1e      	ldr	r2, [pc, #120]	; (2c0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2b92:	f8d2 8000 	ldr.w	r8, [r2]
    2b96:	eba0 0808 	sub.w	r8, r0, r8
    2b9a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2b9e:	f1b8 0f02 	cmp.w	r8, #2
    2ba2:	d324      	bcc.n	2bee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2ba4:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2ba8:	d221      	bcs.n	2bee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2baa:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2bae:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2bb2:	b12f      	cbz	r7, 2bc0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2bb4:	6813      	ldr	r3, [r2, #0]
    2bb6:	1acb      	subs	r3, r1, r3
    2bb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bbc:	2b02      	cmp	r3, #2
    2bbe:	d3f9      	bcc.n	2bb4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2bc0:	4b13      	ldr	r3, [pc, #76]	; (2c10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2bc2:	2102      	movs	r1, #2
    2bc4:	074a      	lsls	r2, r1, #29
    2bc6:	601a      	str	r2, [r3, #0]
    2bc8:	60e0      	str	r0, [r4, #12]
    2bca:	2004      	movs	r0, #4
    2bcc:	f88c 0001 	strb.w	r0, [ip, #1]
    2bd0:	f88c 1000 	strb.w	r1, [ip]
    2bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bd8:	e004      	b.n	2be4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2bda:	f240 11fd 	movw	r1, #509	; 0x1fd
    2bde:	206c      	movs	r0, #108	; 0x6c
    2be0:	f000 fe02 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2be4:	f240 2101 	movw	r1, #513	; 0x201
    2be8:	206c      	movs	r0, #108	; 0x6c
    2bea:	f000 fdfd 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bee:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2bf2:	f240 210d 	movw	r1, #525	; 0x20d
    2bf6:	206c      	movs	r0, #108	; 0x6c
    2bf8:	f000 fdf6 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bfc:	20000020 	.word	0x20000020
    2c00:	20000023 	.word	0x20000023
    2c04:	4001f508 	.word	0x4001f508
    2c08:	4000b000 	.word	0x4000b000
    2c0c:	4000b504 	.word	0x4000b504
    2c10:	4001f504 	.word	0x4001f504

00002c14 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2c14:	4801      	ldr	r0, [pc, #4]	; (2c1c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2c16:	68c0      	ldr	r0, [r0, #12]
    2c18:	4770      	bx	lr
    2c1a:	0000      	.short	0x0000
    2c1c:	20000020 	.word	0x20000020

00002c20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c24:	4833      	ldr	r0, [pc, #204]	; (2cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2c26:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2c2a:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2c2e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2c32:	4a32      	ldr	r2, [pc, #200]	; (2cfc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2c34:	2100      	movs	r1, #0
    2c36:	f89c 3000 	ldrb.w	r3, [ip]
    2c3a:	b163      	cbz	r3, 2c56 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2c3c:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2c40:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c44:	6011      	str	r1, [r2, #0]
    2c46:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c4a:	bf00      	nop
    2c4c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2c50:	2201      	movs	r2, #1
    2c52:	b980      	cbnz	r0, 2c76 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2c54:	e009      	b.n	2c6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2c56:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c5a:	4c29      	ldr	r4, [pc, #164]	; (2d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c5c:	6021      	str	r1, [r4, #0]
    2c5e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2c62:	6011      	str	r1, [r2, #0]
    2c64:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c68:	e7f0      	b.n	2c4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2c6a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2c72:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2c76:	2b02      	cmp	r3, #2
    2c78:	d004      	beq.n	2c84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2c7a:	f240 2119 	movw	r1, #537	; 0x219
    2c7e:	206c      	movs	r0, #108	; 0x6c
    2c80:	f000 fdb2 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c84:	4e1f      	ldr	r6, [pc, #124]	; (2d04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2c86:	6830      	ldr	r0, [r6, #0]
    2c88:	4c1f      	ldr	r4, [pc, #124]	; (2d08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c8a:	1cc0      	adds	r0, r0, #3
    2c8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c90:	68e3      	ldr	r3, [r4, #12]
    2c92:	4d1e      	ldr	r5, [pc, #120]	; (2d0c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c94:	4298      	cmp	r0, r3
    2c96:	d00b      	beq.n	2cb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c98:	6837      	ldr	r7, [r6, #0]
    2c9a:	1bdf      	subs	r7, r3, r7
    2c9c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2ca0:	2f04      	cmp	r7, #4
    2ca2:	d305      	bcc.n	2cb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2ca4:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2ca8:	d202      	bcs.n	2cb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2caa:	f7ff feb3 	bl	2a14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2cae:	e01b      	b.n	2ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2cb0:	6830      	ldr	r0, [r6, #0]
    2cb2:	1a18      	subs	r0, r3, r0
    2cb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cb8:	2802      	cmp	r0, #2
    2cba:	d313      	bcc.n	2ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2cbc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2cc0:	d210      	bcs.n	2ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2cc2:	4b13      	ldr	r3, [pc, #76]	; (2d10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2cc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2cc8:	6018      	str	r0, [r3, #0]
    2cca:	60a2      	str	r2, [r4, #8]
    2ccc:	7021      	strb	r1, [r4, #0]
    2cce:	606a      	str	r2, [r5, #4]
    2cd0:	60ea      	str	r2, [r5, #12]
    2cd2:	0040      	lsls	r0, r0, #1
    2cd4:	1f19      	subs	r1, r3, #4
    2cd6:	6008      	str	r0, [r1, #0]
    2cd8:	2004      	movs	r0, #4
    2cda:	f88c 0001 	strb.w	r0, [ip, #1]
    2cde:	f88c 2000 	strb.w	r2, [ip]
    2ce2:	e001      	b.n	2ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2ce4:	60a2      	str	r2, [r4, #8]
    2ce6:	7021      	strb	r1, [r4, #0]
    2ce8:	68a0      	ldr	r0, [r4, #8]
    2cea:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cf2:	0000      	.short	0x0000
    2cf4:	4000b000 	.word	0x4000b000
    2cf8:	20000023 	.word	0x20000023
    2cfc:	4000b544 	.word	0x4000b544
    2d00:	4000b540 	.word	0x4000b540
    2d04:	4000b504 	.word	0x4000b504
    2d08:	20000020 	.word	0x20000020
    2d0c:	40008000 	.word	0x40008000
    2d10:	4001f508 	.word	0x4001f508

00002d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d18:	f8df c174 	ldr.w	ip, [pc, #372]	; 2e90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2d1c:	2701      	movs	r7, #1
    2d1e:	f04f 0800 	mov.w	r8, #0
    2d22:	f89c 5000 	ldrb.w	r5, [ip]
    2d26:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d2a:	2807      	cmp	r0, #7
    2d2c:	d27e      	bcs.n	2e2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2d2e:	e8df f000 	tbb	[pc, r0]
    2d32:	0404      	.short	0x0404
    2d34:	6a6a0404 	.word	0x6a6a0404
    2d38:	006a      	.short	0x006a
    2d3a:	4c56      	ldr	r4, [pc, #344]	; (2e94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2d3c:	68e6      	ldr	r6, [r4, #12]
    2d3e:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2d42:	bf04      	itt	eq
    2d44:	7864      	ldrbeq	r4, [r4, #1]
    2d46:	2c00      	cmpeq	r4, #0
    2d48:	d002      	beq.n	2d50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2d4a:	2d02      	cmp	r5, #2
    2d4c:	d005      	beq.n	2d5a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d4e:	e03c      	b.n	2dca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2d50:	f44f 7113 	mov.w	r1, #588	; 0x24c
    2d54:	206c      	movs	r0, #108	; 0x6c
    2d56:	f000 fd47 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d5a:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2d5e:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2d62:	f1ac 0404 	sub.w	r4, ip, #4
    2d66:	0624      	lsls	r4, r4, #24
    2d68:	0da4      	lsrs	r4, r4, #22
    2d6a:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2d6e:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2d72:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2d76:	2400      	movs	r4, #0
    2d78:	2d01      	cmp	r5, #1
    2d7a:	d002      	beq.n	2d82 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2d7c:	2d02      	cmp	r5, #2
    2d7e:	d011      	beq.n	2da4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2d80:	e020      	b.n	2dc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d82:	f1bc 0f04 	cmp.w	ip, #4
    2d86:	d205      	bcs.n	2d94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2d88:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d8c:	f1ba 0f00 	cmp.w	sl, #0
    2d90:	d118      	bne.n	2dc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d92:	e004      	b.n	2d9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2d94:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2d98:	f1ba 0f00 	cmp.w	sl, #0
    2d9c:	d112      	bne.n	2dc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d9e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2da2:	e00f      	b.n	2dc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2da4:	f1bc 0f04 	cmp.w	ip, #4
    2da8:	d205      	bcs.n	2db6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2daa:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2dae:	f1ba 0f00 	cmp.w	sl, #0
    2db2:	d107      	bne.n	2dc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2db4:	e004      	b.n	2dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2db6:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2dba:	f1ba 0f00 	cmp.w	sl, #0
    2dbe:	d101      	bne.n	2dc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2dc0:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2dc4:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2dc8:	d1d5      	bne.n	2d76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2dca:	4c33      	ldr	r4, [pc, #204]	; (2e98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2dcc:	f100 0c10 	add.w	ip, r0, #16
    2dd0:	fa07 fc0c 	lsl.w	ip, r7, ip
    2dd4:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2dd8:	0080      	lsls	r0, r0, #2
    2dda:	4420      	add	r0, r4
    2ddc:	b152      	cbz	r2, 2df4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2dde:	6407      	str	r7, [r0, #64]	; 0x40
    2de0:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2de4:	1b8d      	subs	r5, r1, r6
    2de6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2dea:	42aa      	cmp	r2, r5
    2dec:	bf98      	it	ls
    2dee:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2df2:	d243      	bcs.n	2e7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2df4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2df8:	2b01      	cmp	r3, #1
    2dfa:	bf08      	it	eq
    2dfc:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2e00:	2001      	movs	r0, #1
    2e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e06:	b135      	cbz	r5, 2e16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e08:	4584      	cmp	ip, r0
    2e0a:	d104      	bne.n	2e16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2e0c:	f240 216f 	movw	r1, #623	; 0x26f
    2e10:	206c      	movs	r0, #108	; 0x6c
    2e12:	f000 fce9 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e16:	1f00      	subs	r0, r0, #4
    2e18:	b2c0      	uxtb	r0, r0
    2e1a:	2b01      	cmp	r3, #1
    2e1c:	bf0c      	ite	eq
    2e1e:	2401      	moveq	r4, #1
    2e20:	2400      	movne	r4, #0
    2e22:	2803      	cmp	r0, #3
    2e24:	d306      	bcc.n	2e34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2e26:	f240 1149 	movw	r1, #329	; 0x149
    2e2a:	e000      	b.n	2e2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2e2c:	e02b      	b.n	2e86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2e2e:	206c      	movs	r0, #108	; 0x6c
    2e30:	f000 fcda 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e34:	f8df c064 	ldr.w	ip, [pc, #100]	; 2e9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e38:	f100 0310 	add.w	r3, r0, #16
    2e3c:	fa07 f303 	lsl.w	r3, r7, r3
    2e40:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e44:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e48:	0080      	lsls	r0, r0, #2
    2e4a:	4460      	add	r0, ip
    2e4c:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2e50:	b14a      	cbz	r2, 2e66 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2e52:	4d13      	ldr	r5, [pc, #76]	; (2ea0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2e54:	682e      	ldr	r6, [r5, #0]
    2e56:	1b8d      	subs	r5, r1, r6
    2e58:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e5c:	42aa      	cmp	r2, r5
    2e5e:	bf98      	it	ls
    2e60:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e64:	d20a      	bcs.n	2e7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e66:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e6a:	2c00      	cmp	r4, #0
    2e6c:	bf18      	it	ne
    2e6e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e72:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e76:	2001      	movs	r0, #1
    2e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e7c:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2e80:	2000      	movs	r0, #0
    2e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e86:	f44f 711d 	mov.w	r1, #628	; 0x274
    2e8a:	206c      	movs	r0, #108	; 0x6c
    2e8c:	f000 fcac 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e90:	20000023 	.word	0x20000023
    2e94:	20000020 	.word	0x20000020
    2e98:	40008000 	.word	0x40008000
    2e9c:	4000b000 	.word	0x4000b000
    2ea0:	4000b504 	.word	0x4000b504

00002ea4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ea6:	2701      	movs	r7, #1
    2ea8:	2400      	movs	r4, #0
    2eaa:	2807      	cmp	r0, #7
    2eac:	d24c      	bcs.n	2f48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2eae:	e8df f000 	tbb	[pc, r0]
    2eb2:	0404      	.short	0x0404
    2eb4:	16160404 	.word	0x16160404
    2eb8:	0016      	.short	0x0016
    2eba:	4a26      	ldr	r2, [pc, #152]	; (2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2ebc:	f100 0110 	add.w	r1, r0, #16
    2ec0:	fa07 f101 	lsl.w	r1, r7, r1
    2ec4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2ec8:	0081      	lsls	r1, r0, #2
    2eca:	4411      	add	r1, r2
    2ecc:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2ed0:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2ed4:	4920      	ldr	r1, [pc, #128]	; (2f58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2ed6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2eda:	9000      	str	r0, [sp, #0]
    2edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ede:	4d1f      	ldr	r5, [pc, #124]	; (2f5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2ee0:	1f01      	subs	r1, r0, #4
    2ee2:	b2ce      	uxtb	r6, r1
    2ee4:	7829      	ldrb	r1, [r5, #0]
    2ee6:	b179      	cbz	r1, 2f08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2ee8:	786a      	ldrb	r2, [r5, #1]
    2eea:	4282      	cmp	r2, r0
    2eec:	d10c      	bne.n	2f08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2eee:	4a1c      	ldr	r2, [pc, #112]	; (2f60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2ef0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2ef4:	6010      	str	r0, [r2, #0]
    2ef6:	2901      	cmp	r1, #1
    2ef8:	bf08      	it	eq
    2efa:	f7ff fd57 	bleq	29ac <MPSL_IRQ_TIMER0_Handler+0xf8>
    2efe:	702c      	strb	r4, [r5, #0]
    2f00:	4918      	ldr	r1, [pc, #96]	; (2f64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2f02:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2f06:	60c8      	str	r0, [r1, #12]
    2f08:	f106 0010 	add.w	r0, r6, #16
    2f0c:	fa07 f100 	lsl.w	r1, r7, r0
    2f10:	4815      	ldr	r0, [pc, #84]	; (2f68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2f12:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f16:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f1a:	00b0      	lsls	r0, r6, #2
    2f1c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2f20:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2f24:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2f28:	4a10      	ldr	r2, [pc, #64]	; (2f6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f2a:	6812      	ldr	r2, [r2, #0]
    2f2c:	1a89      	subs	r1, r1, r2
    2f2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f32:	2902      	cmp	r1, #2
    2f34:	bf24      	itt	cs
    2f36:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2f3a:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2f3e:	480c      	ldr	r0, [pc, #48]	; (2f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f40:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2f44:	9000      	str	r0, [sp, #0]
    2f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f48:	f240 21ed 	movw	r1, #749	; 0x2ed
    2f4c:	206c      	movs	r0, #108	; 0x6c
    2f4e:	f000 fc4b 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f52:	0000      	.short	0x0000
    2f54:	40008000 	.word	0x40008000
    2f58:	40008140 	.word	0x40008140
    2f5c:	20000023 	.word	0x20000023
    2f60:	4001f508 	.word	0x4001f508
    2f64:	20000020 	.word	0x20000020
    2f68:	4000b000 	.word	0x4000b000
    2f6c:	4000b504 	.word	0x4000b504
    2f70:	4000b140 	.word	0x4000b140

00002f74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f74:	491e      	ldr	r1, [pc, #120]	; (2ff0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2f76:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f7a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2f7e:	481d      	ldr	r0, [pc, #116]	; (2ff4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2f80:	4a1d      	ldr	r2, [pc, #116]	; (2ff8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f82:	f890 c000 	ldrb.w	ip, [r0]
    2f86:	2000      	movs	r0, #0
    2f88:	f1bc 0f00 	cmp.w	ip, #0
    2f8c:	d00a      	beq.n	2fa4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2f8e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2f92:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f96:	6010      	str	r0, [r2, #0]
    2f98:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f9c:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2fa0:	b981      	cbnz	r1, 2fc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2fa2:	e009      	b.n	2fb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2fa4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fa8:	4b14      	ldr	r3, [pc, #80]	; (2ffc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2faa:	6018      	str	r0, [r3, #0]
    2fac:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fb0:	6010      	str	r0, [r2, #0]
    2fb2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fb6:	e7f1      	b.n	2f9c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2fb8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fc0:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2fc4:	490e      	ldr	r1, [pc, #56]	; (3000 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2fc6:	f04f 32ff 	mov.w	r2, #4294967295
    2fca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fce:	4a0d      	ldr	r2, [pc, #52]	; (3004 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2fd0:	6010      	str	r0, [r2, #0]
    2fd2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fd6:	1d12      	adds	r2, r2, #4
    2fd8:	6010      	str	r0, [r2, #0]
    2fda:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fde:	1d12      	adds	r2, r2, #4
    2fe0:	6010      	str	r0, [r2, #0]
    2fe2:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2fe6:	1d12      	adds	r2, r2, #4
    2fe8:	6010      	str	r0, [r2, #0]
    2fea:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2fee:	4770      	bx	lr
    2ff0:	4000b000 	.word	0x4000b000
    2ff4:	20000023 	.word	0x20000023
    2ff8:	4000b544 	.word	0x4000b544
    2ffc:	4000b540 	.word	0x4000b540
    3000:	40008000 	.word	0x40008000
    3004:	40008540 	.word	0x40008540

00003008 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3008:	4808      	ldr	r0, [pc, #32]	; (302c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    300a:	f990 0002 	ldrsb.w	r0, [r0, #2]
    300e:	2800      	cmp	r0, #0
    3010:	bfb8      	it	lt
    3012:	4770      	bxlt	lr
    3014:	f000 011f 	and.w	r1, r0, #31
    3018:	2201      	movs	r2, #1
    301a:	fa02 f101 	lsl.w	r1, r2, r1
    301e:	0940      	lsrs	r0, r0, #5
    3020:	0080      	lsls	r0, r0, #2
    3022:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3026:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    302a:	4770      	bx	lr
    302c:	20000020 	.word	0x20000020

00003030 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3030:	b510      	push	{r4, lr}
    3032:	2807      	cmp	r0, #7
    3034:	d20d      	bcs.n	3052 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3036:	e8df f000 	tbb	[pc, r0]
    303a:	0404      	.short	0x0404
    303c:	06060404 	.word	0x06060404
    3040:	0006      	.short	0x0006
    3042:	4906      	ldr	r1, [pc, #24]	; (305c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3044:	e002      	b.n	304c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3046:	1f00      	subs	r0, r0, #4
    3048:	4905      	ldr	r1, [pc, #20]	; (3060 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    304a:	b2c0      	uxtb	r0, r0
    304c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3050:	bd10      	pop	{r4, pc}
    3052:	f44f 7126 	mov.w	r1, #664	; 0x298
    3056:	206c      	movs	r0, #108	; 0x6c
    3058:	f000 fbc6 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    305c:	40008140 	.word	0x40008140
    3060:	4000b140 	.word	0x4000b140

00003064 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3064:	b510      	push	{r4, lr}
    3066:	2807      	cmp	r0, #7
    3068:	d20d      	bcs.n	3086 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    306a:	e8df f000 	tbb	[pc, r0]
    306e:	0404      	.short	0x0404
    3070:	06060404 	.word	0x06060404
    3074:	0006      	.short	0x0006
    3076:	4906      	ldr	r1, [pc, #24]	; (3090 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3078:	e002      	b.n	3080 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    307a:	1f00      	subs	r0, r0, #4
    307c:	4905      	ldr	r1, [pc, #20]	; (3094 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    307e:	b2c0      	uxtb	r0, r0
    3080:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3084:	bd10      	pop	{r4, pc}
    3086:	f44f 7126 	mov.w	r1, #664	; 0x298
    308a:	206c      	movs	r0, #108	; 0x6c
    308c:	f000 fbac 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3090:	40008140 	.word	0x40008140
    3094:	4000b140 	.word	0x4000b140

00003098 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3098:	b570      	push	{r4, r5, r6, lr}
    309a:	4819      	ldr	r0, [pc, #100]	; (3100 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    309c:	2400      	movs	r4, #0
    309e:	2104      	movs	r1, #4
    30a0:	7004      	strb	r4, [r0, #0]
    30a2:	1ec0      	subs	r0, r0, #3
    30a4:	7001      	strb	r1, [r0, #0]
    30a6:	0589      	lsls	r1, r1, #22
    30a8:	60c1      	str	r1, [r0, #12]
    30aa:	f7ff fc7f 	bl	29ac <MPSL_IRQ_TIMER0_Handler+0xf8>
    30ae:	2501      	movs	r5, #1
    30b0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    30b4:	02eb      	lsls	r3, r5, #11
    30b6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    30ba:	f3bf 8f4f 	dsb	sy
    30be:	f3bf 8f6f 	isb	sy
    30c2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    30c6:	4a0f      	ldr	r2, [pc, #60]	; (3104 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    30c8:	6055      	str	r5, [r2, #4]
    30ca:	6095      	str	r5, [r2, #8]
    30cc:	480e      	ldr	r0, [pc, #56]	; (3108 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    30ce:	6801      	ldr	r1, [r0, #0]
    30d0:	2900      	cmp	r1, #0
    30d2:	d1fc      	bne.n	30ce <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    30d4:	1e48      	subs	r0, r1, #1
    30d6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    30da:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    30de:	480b      	ldr	r0, [pc, #44]	; (310c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    30e0:	6004      	str	r4, [r0, #0]
    30e2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    30e6:	1d00      	adds	r0, r0, #4
    30e8:	6004      	str	r4, [r0, #0]
    30ea:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    30ee:	1d00      	adds	r0, r0, #4
    30f0:	6004      	str	r4, [r0, #0]
    30f2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    30f6:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    30fa:	6015      	str	r5, [r2, #0]
    30fc:	bd70      	pop	{r4, r5, r6, pc}
    30fe:	0000      	.short	0x0000
    3100:	20000023 	.word	0x20000023
    3104:	4000b000 	.word	0x4000b000
    3108:	4000b504 	.word	0x4000b504
    310c:	4000b540 	.word	0x4000b540

00003110 <MPSL_IRQ_CLOCK_Handler>:
    3110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3114:	4c16      	ldr	r4, [pc, #88]	; (3170 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3116:	7a60      	ldrb	r0, [r4, #9]
    3118:	2800      	cmp	r0, #0
    311a:	d027      	beq.n	316c <MPSL_IRQ_CLOCK_Handler+0x5c>
    311c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3120:	058d      	lsls	r5, r1, #22
    3122:	4628      	mov	r0, r5
    3124:	f008 fd0f 	bl	bb46 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3128:	4680      	mov	r8, r0
    312a:	f44f 7182 	mov.w	r1, #260	; 0x104
    312e:	4628      	mov	r0, r5
    3130:	f008 fd09 	bl	bb46 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3134:	2600      	movs	r6, #0
    3136:	4607      	mov	r7, r0
    3138:	f1b8 0f00 	cmp.w	r8, #0
    313c:	d009      	beq.n	3152 <MPSL_IRQ_CLOCK_Handler+0x42>
    313e:	2001      	movs	r0, #1
    3140:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3144:	7920      	ldrb	r0, [r4, #4]
    3146:	b120      	cbz	r0, 3152 <MPSL_IRQ_CLOCK_Handler+0x42>
    3148:	7126      	strb	r6, [r4, #4]
    314a:	69e0      	ldr	r0, [r4, #28]
    314c:	b108      	cbz	r0, 3152 <MPSL_IRQ_CLOCK_Handler+0x42>
    314e:	4780      	blx	r0
    3150:	61e6      	str	r6, [r4, #28]
    3152:	b137      	cbz	r7, 3162 <MPSL_IRQ_CLOCK_Handler+0x52>
    3154:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3158:	2002      	movs	r0, #2
    315a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    315e:	f000 fa8b 	bl	3678 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3162:	4640      	mov	r0, r8
    3164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3168:	f000 b85a 	b.w	3220 <MPSL_IRQ_CLOCK_Handler+0x110>
    316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3170:	20000030 	.word	0x20000030
    3174:	b510      	push	{r4, lr}
    3176:	f008 fd90 	bl	bc9a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    317a:	b930      	cbnz	r0, 318a <MPSL_IRQ_CLOCK_Handler+0x7a>
    317c:	f008 fdae 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3180:	b918      	cbnz	r0, 318a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3182:	f008 fde1 	bl	bd48 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3186:	2800      	cmp	r0, #0
    3188:	d002      	beq.n	3190 <MPSL_IRQ_CLOCK_Handler+0x80>
    318a:	4902      	ldr	r1, [pc, #8]	; (3194 <MPSL_IRQ_CLOCK_Handler+0x84>)
    318c:	2002      	movs	r0, #2
    318e:	6008      	str	r0, [r1, #0]
    3190:	bd10      	pop	{r4, pc}
    3192:	0000      	.short	0x0000
    3194:	40000c34 	.word	0x40000c34
    3198:	b570      	push	{r4, r5, r6, lr}
    319a:	f000 f987 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    319e:	f000 fabf 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31a2:	4c09      	ldr	r4, [pc, #36]	; (31c8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    31a4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31a8:	b130      	cbz	r0, 31b8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    31aa:	f7ff ffe3 	bl	3174 <MPSL_IRQ_CLOCK_Handler+0x64>
    31ae:	2001      	movs	r0, #1
    31b0:	6128      	str	r0, [r5, #16]
    31b2:	2004      	movs	r0, #4
    31b4:	72a0      	strb	r0, [r4, #10]
    31b6:	e004      	b.n	31c2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    31b8:	2003      	movs	r0, #3
    31ba:	72a0      	strb	r0, [r4, #10]
    31bc:	2001      	movs	r0, #1
    31be:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31c2:	2000      	movs	r0, #0
    31c4:	71e0      	strb	r0, [r4, #7]
    31c6:	bd70      	pop	{r4, r5, r6, pc}
    31c8:	20000030 	.word	0x20000030
    31cc:	b570      	push	{r4, r5, r6, lr}
    31ce:	4c13      	ldr	r4, [pc, #76]	; (321c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    31d0:	79a0      	ldrb	r0, [r4, #6]
    31d2:	b1f0      	cbz	r0, 3212 <MPSL_IRQ_CLOCK_Handler+0x102>
    31d4:	2801      	cmp	r0, #1
    31d6:	d003      	beq.n	31e0 <MPSL_IRQ_CLOCK_Handler+0xd0>
    31d8:	79e1      	ldrb	r1, [r4, #7]
    31da:	1e40      	subs	r0, r0, #1
    31dc:	4281      	cmp	r1, r0
    31de:	da18      	bge.n	3212 <MPSL_IRQ_CLOCK_Handler+0x102>
    31e0:	f000 fa9e 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31e4:	4605      	mov	r5, r0
    31e6:	f000 fb6f 	bl	38c8 <mpsl_temperature_get>
    31ea:	79a1      	ldrb	r1, [r4, #6]
    31ec:	2901      	cmp	r1, #1
    31ee:	d902      	bls.n	31f6 <MPSL_IRQ_CLOCK_Handler+0xe6>
    31f0:	79e1      	ldrb	r1, [r4, #7]
    31f2:	1c49      	adds	r1, r1, #1
    31f4:	71e1      	strb	r1, [r4, #7]
    31f6:	b10d      	cbz	r5, 31fc <MPSL_IRQ_CLOCK_Handler+0xec>
    31f8:	6961      	ldr	r1, [r4, #20]
    31fa:	e000      	b.n	31fe <MPSL_IRQ_CLOCK_Handler+0xee>
    31fc:	6921      	ldr	r1, [r4, #16]
    31fe:	1a41      	subs	r1, r0, r1
    3200:	2902      	cmp	r1, #2
    3202:	da02      	bge.n	320a <MPSL_IRQ_CLOCK_Handler+0xfa>
    3204:	f111 0f02 	cmn.w	r1, #2
    3208:	dc07      	bgt.n	321a <MPSL_IRQ_CLOCK_Handler+0x10a>
    320a:	b10d      	cbz	r5, 3210 <MPSL_IRQ_CLOCK_Handler+0x100>
    320c:	6160      	str	r0, [r4, #20]
    320e:	e000      	b.n	3212 <MPSL_IRQ_CLOCK_Handler+0x102>
    3210:	6120      	str	r0, [r4, #16]
    3212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3216:	f7ff bfbf 	b.w	3198 <MPSL_IRQ_CLOCK_Handler+0x88>
    321a:	bd70      	pop	{r4, r5, r6, pc}
    321c:	20000030 	.word	0x20000030
    3220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3224:	4606      	mov	r6, r0
    3226:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    322a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    322e:	4628      	mov	r0, r5
    3230:	f008 fc89 	bl	bb46 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3234:	4680      	mov	r8, r0
    3236:	f44f 7188 	mov.w	r1, #272	; 0x110
    323a:	4628      	mov	r0, r5
    323c:	f008 fc83 	bl	bb46 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3240:	4c27      	ldr	r4, [pc, #156]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3242:	4682      	mov	sl, r0
    3244:	7827      	ldrb	r7, [r4, #0]
    3246:	f104 0008 	add.w	r0, r4, #8
    324a:	f008 fcf0 	bl	bc2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    324e:	b110      	cbz	r0, 3256 <MPSL_IRQ_CLOCK_Handler+0x146>
    3250:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3254:	e016      	b.n	3284 <MPSL_IRQ_CLOCK_Handler+0x174>
    3256:	f04f 0901 	mov.w	r9, #1
    325a:	b146      	cbz	r6, 326e <MPSL_IRQ_CLOCK_Handler+0x15e>
    325c:	7aa0      	ldrb	r0, [r4, #10]
    325e:	2803      	cmp	r0, #3
    3260:	d105      	bne.n	326e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3262:	2004      	movs	r0, #4
    3264:	72a0      	strb	r0, [r4, #10]
    3266:	f7ff ff85 	bl	3174 <MPSL_IRQ_CLOCK_Handler+0x64>
    326a:	f8c5 9010 	str.w	r9, [r5, #16]
    326e:	2600      	movs	r6, #0
    3270:	f1b8 0f00 	cmp.w	r8, #0
    3274:	d018      	beq.n	32a8 <MPSL_IRQ_CLOCK_Handler+0x198>
    3276:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    327a:	7aa0      	ldrb	r0, [r4, #10]
    327c:	2804      	cmp	r0, #4
    327e:	d004      	beq.n	328a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3280:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3284:	206d      	movs	r0, #109	; 0x6d
    3286:	f000 faaf 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    328a:	f008 fd06 	bl	bc9a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    328e:	b928      	cbnz	r0, 329c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3290:	f008 fd24 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3294:	b910      	cbnz	r0, 329c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3296:	f008 fd57 	bl	bd48 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    329a:	b108      	cbz	r0, 32a0 <MPSL_IRQ_CLOCK_Handler+0x190>
    329c:	4811      	ldr	r0, [pc, #68]	; (32e4 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    329e:	6006      	str	r6, [r0, #0]
    32a0:	2002      	movs	r0, #2
    32a2:	72a0      	strb	r0, [r4, #10]
    32a4:	f000 f8e6 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32a8:	f1ba 0f00 	cmp.w	sl, #0
    32ac:	d008      	beq.n	32c0 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    32ae:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    32b2:	7aa0      	ldrb	r0, [r4, #10]
    32b4:	2802      	cmp	r0, #2
    32b6:	d101      	bne.n	32bc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    32b8:	f7ff ff88 	bl	31cc <MPSL_IRQ_CLOCK_Handler+0xbc>
    32bc:	f8c5 9014 	str.w	r9, [r5, #20]
    32c0:	b13f      	cbz	r7, 32d2 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    32c2:	7026      	strb	r6, [r4, #0]
    32c4:	7aa0      	ldrb	r0, [r4, #10]
    32c6:	2802      	cmp	r0, #2
    32c8:	d101      	bne.n	32ce <MPSL_IRQ_CLOCK_Handler+0x1be>
    32ca:	f7ff ff65 	bl	3198 <MPSL_IRQ_CLOCK_Handler+0x88>
    32ce:	f000 f8d1 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32d6:	4802      	ldr	r0, [pc, #8]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32d8:	3008      	adds	r0, #8
    32da:	f008 bcbf 	b.w	bc5c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    32de:	0000      	.short	0x0000
    32e0:	20000030 	.word	0x20000030
    32e4:	40000c34 	.word	0x40000c34
    32e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32ec:	4c5c      	ldr	r4, [pc, #368]	; (3460 <MPSL_IRQ_CLOCK_Handler+0x350>)
    32ee:	f04f 0800 	mov.w	r8, #0
    32f2:	4606      	mov	r6, r0
    32f4:	f8c4 8018 	str.w	r8, [r4, #24]
    32f8:	7843      	ldrb	r3, [r0, #1]
    32fa:	7882      	ldrb	r2, [r0, #2]
    32fc:	7800      	ldrb	r0, [r0, #0]
    32fe:	72e0      	strb	r0, [r4, #11]
    3300:	7163      	strb	r3, [r4, #5]
    3302:	2701      	movs	r7, #1
    3304:	71a2      	strb	r2, [r4, #6]
    3306:	07bd      	lsls	r5, r7, #30
    3308:	f884 8007 	strb.w	r8, [r4, #7]
    330c:	2805      	cmp	r0, #5
    330e:	d224      	bcs.n	335a <MPSL_IRQ_CLOCK_Handler+0x24a>
    3310:	e8df f000 	tbb	[pc, r0]
    3314:	1f05030f 	.word	0x1f05030f
    3318:	0021      	.short	0x0021
    331a:	61a7      	str	r7, [r4, #24]
    331c:	e009      	b.n	3332 <MPSL_IRQ_CLOCK_Handler+0x222>
    331e:	f000 f8c5 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3322:	2101      	movs	r1, #1
    3324:	4628      	mov	r0, r5
    3326:	f008 fc13 	bl	bb50 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    332a:	2800      	cmp	r0, #0
    332c:	d0f9      	beq.n	3322 <MPSL_IRQ_CLOCK_Handler+0x212>
    332e:	2002      	movs	r0, #2
    3330:	61a0      	str	r0, [r4, #24]
    3332:	f008 fc39 	bl	bba8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3336:	b1b0      	cbz	r0, 3366 <MPSL_IRQ_CLOCK_Handler+0x256>
    3338:	f000 fa0c 	bl	3754 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    333c:	7e21      	ldrb	r1, [r4, #24]
    333e:	f001 0103 	and.w	r1, r1, #3
    3342:	4288      	cmp	r0, r1
    3344:	d10f      	bne.n	3366 <MPSL_IRQ_CLOCK_Handler+0x256>
    3346:	79b0      	ldrb	r0, [r6, #6]
    3348:	b150      	cbz	r0, 3360 <MPSL_IRQ_CLOCK_Handler+0x250>
    334a:	2002      	movs	r0, #2
    334c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3350:	e06a      	b.n	3428 <MPSL_IRQ_CLOCK_Handler+0x318>
    3352:	4844      	ldr	r0, [pc, #272]	; (3464 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3354:	e7ec      	b.n	3330 <MPSL_IRQ_CLOCK_Handler+0x220>
    3356:	4844      	ldr	r0, [pc, #272]	; (3468 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3358:	e7ea      	b.n	3330 <MPSL_IRQ_CLOCK_Handler+0x220>
    335a:	f44f 714c 	mov.w	r1, #816	; 0x330
    335e:	e049      	b.n	33f4 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3360:	f000 f9cc 	bl	36fc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3364:	e060      	b.n	3428 <MPSL_IRQ_CLOCK_Handler+0x318>
    3366:	60ef      	str	r7, [r5, #12]
    3368:	f44f 7a82 	mov.w	sl, #260	; 0x104
    336c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3370:	69a0      	ldr	r0, [r4, #24]
    3372:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3376:	f008 fc7c 	bl	bc72 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    337a:	b940      	cbnz	r0, 338e <MPSL_IRQ_CLOCK_Handler+0x27e>
    337c:	f008 fc83 	bl	bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3380:	b928      	cbnz	r0, 338e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3382:	f008 fc97 	bl	bcb4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3386:	b910      	cbnz	r0, 338e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3388:	f008 fca8 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    338c:	b138      	cbz	r0, 339e <MPSL_IRQ_CLOCK_Handler+0x28e>
    338e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3392:	4836      	ldr	r0, [pc, #216]	; (346c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3394:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3398:	f3c1 3142 	ubfx	r1, r1, #13, #3
    339c:	6001      	str	r1, [r0, #0]
    339e:	f008 fc68 	bl	bc72 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    33a2:	b940      	cbnz	r0, 33b6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33a4:	f008 fc6f 	bl	bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    33a8:	b928      	cbnz	r0, 33b6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33aa:	f008 fc83 	bl	bcb4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    33ae:	b910      	cbnz	r0, 33b6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33b0:	f008 fc94 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33b4:	b110      	cbz	r0, 33bc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    33b6:	482d      	ldr	r0, [pc, #180]	; (346c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    33b8:	3010      	adds	r0, #16
    33ba:	6007      	str	r7, [r0, #0]
    33bc:	60af      	str	r7, [r5, #8]
    33be:	2002      	movs	r0, #2
    33c0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33c4:	79b0      	ldrb	r0, [r6, #6]
    33c6:	bb78      	cbnz	r0, 3428 <MPSL_IRQ_CLOCK_Handler+0x318>
    33c8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    33cc:	f010 0f02 	tst.w	r0, #2
    33d0:	d00e      	beq.n	33f0 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    33d2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3470 <MPSL_IRQ_CLOCK_Handler+0x360>
    33d6:	f8d9 1000 	ldr.w	r1, [r9]
    33da:	43c9      	mvns	r1, r1
    33dc:	f341 1700 	sbfx	r7, r1, #4, #1
    33e0:	f8d9 1000 	ldr.w	r1, [r9]
    33e4:	f041 0110 	orr.w	r1, r1, #16
    33e8:	f8c9 1000 	str.w	r1, [r9]
    33ec:	1c7f      	adds	r7, r7, #1
    33ee:	e007      	b.n	3400 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    33f0:	f240 21f1 	movw	r1, #753	; 0x2f1
    33f4:	206d      	movs	r0, #109	; 0x6d
    33f6:	f000 f9f7 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33fa:	bf00      	nop
    33fc:	f000 fb1a 	bl	3a34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3400:	4651      	mov	r1, sl
    3402:	4628      	mov	r0, r5
    3404:	f008 fb9f 	bl	bb46 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3408:	2800      	cmp	r0, #0
    340a:	d0f7      	beq.n	33fc <MPSL_IRQ_CLOCK_Handler+0x2ec>
    340c:	f000 f976 	bl	36fc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3410:	b92f      	cbnz	r7, 341e <MPSL_IRQ_CLOCK_Handler+0x30e>
    3412:	f8d9 1000 	ldr.w	r1, [r9]
    3416:	f021 0110 	bic.w	r1, r1, #16
    341a:	f8c9 1000 	str.w	r1, [r9]
    341e:	2002      	movs	r0, #2
    3420:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3424:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3428:	79a0      	ldrb	r0, [r4, #6]
    342a:	b170      	cbz	r0, 344a <MPSL_IRQ_CLOCK_Handler+0x33a>
    342c:	7830      	ldrb	r0, [r6, #0]
    342e:	b960      	cbnz	r0, 344a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3430:	f000 f976 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3434:	4606      	mov	r6, r0
    3436:	f000 fa47 	bl	38c8 <mpsl_temperature_get>
    343a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    343e:	b116      	cbz	r6, 3446 <MPSL_IRQ_CLOCK_Handler+0x336>
    3440:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3444:	e001      	b.n	344a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3446:	e9c4 0204 	strd	r0, r2, [r4, #16]
    344a:	2101      	movs	r1, #1
    344c:	4628      	mov	r0, r5
    344e:	f008 fb7f 	bl	bb50 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3452:	b108      	cbz	r0, 3458 <MPSL_IRQ_CLOCK_Handler+0x348>
    3454:	f000 f95e 	bl	3714 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3458:	f884 800a 	strb.w	r8, [r4, #10]
    345c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3460:	20000030 	.word	0x20000030
    3464:	00020001 	.word	0x00020001
    3468:	00030001 	.word	0x00030001
    346c:	4000053c 	.word	0x4000053c
    3470:	e000ed10 	.word	0xe000ed10

00003474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3474:	b510      	push	{r4, lr}
    3476:	f3ef 8410 	mrs	r4, PRIMASK
    347a:	b672      	cpsid	i
    347c:	480a      	ldr	r0, [pc, #40]	; (34a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    347e:	7841      	ldrb	r1, [r0, #1]
    3480:	b129      	cbz	r1, 348e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3482:	7841      	ldrb	r1, [r0, #1]
    3484:	1e49      	subs	r1, r1, #1
    3486:	7041      	strb	r1, [r0, #1]
    3488:	7841      	ldrb	r1, [r0, #1]
    348a:	b129      	cbz	r1, 3498 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    348c:	e008      	b.n	34a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    348e:	f240 110d 	movw	r1, #269	; 0x10d
    3492:	206d      	movs	r0, #109	; 0x6d
    3494:	f000 f9a8 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3498:	7880      	ldrb	r0, [r0, #2]
    349a:	b908      	cbnz	r0, 34a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    349c:	f000 f94e 	bl	373c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    34a0:	2c00      	cmp	r4, #0
    34a2:	d100      	bne.n	34a6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    34a4:	b662      	cpsie	i
    34a6:	bd10      	pop	{r4, pc}
    34a8:	20000030 	.word	0x20000030

000034ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    34ac:	b510      	push	{r4, lr}
    34ae:	f3ef 8410 	mrs	r4, PRIMASK
    34b2:	b672      	cpsid	i
    34b4:	4806      	ldr	r0, [pc, #24]	; (34d0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    34b6:	7841      	ldrb	r1, [r0, #1]
    34b8:	1c49      	adds	r1, r1, #1
    34ba:	7041      	strb	r1, [r0, #1]
    34bc:	7840      	ldrb	r0, [r0, #1]
    34be:	2801      	cmp	r0, #1
    34c0:	d101      	bne.n	34c6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    34c2:	f008 fb5c 	bl	bb7e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    34c6:	2c00      	cmp	r4, #0
    34c8:	d100      	bne.n	34cc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    34ca:	b662      	cpsie	i
    34cc:	bd10      	pop	{r4, pc}
    34ce:	0000      	.short	0x0000
    34d0:	20000030 	.word	0x20000030

000034d4 <mpsl_clock_hfclk_release>:
    34d4:	4805      	ldr	r0, [pc, #20]	; (34ec <mpsl_clock_hfclk_release+0x18>)
    34d6:	b510      	push	{r4, lr}
    34d8:	78c1      	ldrb	r1, [r0, #3]
    34da:	b121      	cbz	r1, 34e6 <mpsl_clock_hfclk_release+0x12>
    34dc:	2100      	movs	r1, #0
    34de:	7101      	strb	r1, [r0, #4]
    34e0:	70c1      	strb	r1, [r0, #3]
    34e2:	f7ff ffc7 	bl	3474 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    34e6:	2000      	movs	r0, #0
    34e8:	bd10      	pop	{r4, pc}
    34ea:	0000      	.short	0x0000
    34ec:	20000030 	.word	0x20000030

000034f0 <mpsl_clock_hfclk_request>:
    34f0:	b570      	push	{r4, r5, r6, lr}
    34f2:	4c0c      	ldr	r4, [pc, #48]	; (3524 <mpsl_clock_hfclk_request+0x34>)
    34f4:	78e1      	ldrb	r1, [r4, #3]
    34f6:	b961      	cbnz	r1, 3512 <mpsl_clock_hfclk_request+0x22>
    34f8:	2501      	movs	r5, #1
    34fa:	70e5      	strb	r5, [r4, #3]
    34fc:	61e0      	str	r0, [r4, #28]
    34fe:	f7ff ffd5 	bl	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3502:	f000 f90d 	bl	3720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3506:	b130      	cbz	r0, 3516 <mpsl_clock_hfclk_request+0x26>
    3508:	69e0      	ldr	r0, [r4, #28]
    350a:	b110      	cbz	r0, 3512 <mpsl_clock_hfclk_request+0x22>
    350c:	4780      	blx	r0
    350e:	2000      	movs	r0, #0
    3510:	61e0      	str	r0, [r4, #28]
    3512:	2000      	movs	r0, #0
    3514:	bd70      	pop	{r4, r5, r6, pc}
    3516:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    351a:	7125      	strb	r5, [r4, #4]
    351c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3520:	e7f7      	b.n	3512 <mpsl_clock_hfclk_request+0x22>
    3522:	0000      	.short	0x0000
    3524:	20000030 	.word	0x20000030

00003528 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3528:	f3ef 8010 	mrs	r0, PRIMASK
    352c:	b672      	cpsid	i
    352e:	4904      	ldr	r1, [pc, #16]	; (3540 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3530:	788a      	ldrb	r2, [r1, #2]
    3532:	1c52      	adds	r2, r2, #1
    3534:	708a      	strb	r2, [r1, #2]
    3536:	2800      	cmp	r0, #0
    3538:	d100      	bne.n	353c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    353a:	b662      	cpsie	i
    353c:	4770      	bx	lr
    353e:	0000      	.short	0x0000
    3540:	20000030 	.word	0x20000030

00003544 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3544:	b510      	push	{r4, lr}
    3546:	f3ef 8410 	mrs	r4, PRIMASK
    354a:	b672      	cpsid	i
    354c:	480a      	ldr	r0, [pc, #40]	; (3578 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    354e:	7881      	ldrb	r1, [r0, #2]
    3550:	b129      	cbz	r1, 355e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3552:	7881      	ldrb	r1, [r0, #2]
    3554:	1e49      	subs	r1, r1, #1
    3556:	7081      	strb	r1, [r0, #2]
    3558:	7841      	ldrb	r1, [r0, #1]
    355a:	b129      	cbz	r1, 3568 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    355c:	e008      	b.n	3570 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    355e:	f240 1125 	movw	r1, #293	; 0x125
    3562:	206d      	movs	r0, #109	; 0x6d
    3564:	f000 f940 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3568:	7880      	ldrb	r0, [r0, #2]
    356a:	b908      	cbnz	r0, 3570 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    356c:	f000 f8e6 	bl	373c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3570:	2c00      	cmp	r4, #0
    3572:	d100      	bne.n	3576 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3574:	b662      	cpsie	i
    3576:	bd10      	pop	{r4, pc}
    3578:	20000030 	.word	0x20000030

0000357c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3580:	0004      	movs	r4, r0
    3582:	f06f 0015 	mvn.w	r0, #21
    3586:	d03c      	beq.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3588:	7821      	ldrb	r1, [r4, #0]
    358a:	2904      	cmp	r1, #4
    358c:	d839      	bhi.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    358e:	2900      	cmp	r1, #0
    3590:	7861      	ldrb	r1, [r4, #1]
    3592:	d038      	beq.n	3606 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3594:	2900      	cmp	r1, #0
    3596:	d134      	bne.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3598:	78a1      	ldrb	r1, [r4, #2]
    359a:	2900      	cmp	r1, #0
    359c:	d131      	bne.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    359e:	2000      	movs	r0, #0
    35a0:	f008 fa9c 	bl	badc <MPSL_IRQ_RADIO_Handler+0x1e>
    35a4:	2000      	movs	r0, #0
    35a6:	f008 fa8c 	bl	bac2 <MPSL_IRQ_RADIO_Handler+0x4>
    35aa:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    35ae:	f04f 31ff 	mov.w	r1, #4294967295
    35b2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    35b6:	2600      	movs	r6, #0
    35b8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    35bc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    35c0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    35c4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    35c8:	4f14      	ldr	r7, [pc, #80]	; (361c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    35ca:	707e      	strb	r6, [r7, #1]
    35cc:	88a0      	ldrh	r0, [r4, #4]
    35ce:	81b8      	strh	r0, [r7, #12]
    35d0:	f008 facc 	bl	bb6c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    35d4:	2501      	movs	r5, #1
    35d6:	b108      	cbz	r0, 35dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    35d8:	70fd      	strb	r5, [r7, #3]
    35da:	707d      	strb	r5, [r7, #1]
    35dc:	2101      	movs	r1, #1
    35de:	4640      	mov	r0, r8
    35e0:	f008 fab6 	bl	bb50 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    35e4:	b108      	cbz	r0, 35ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    35e6:	f000 f895 	bl	3714 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    35ea:	4620      	mov	r0, r4
    35ec:	f7ff fe7c 	bl	32e8 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    35f0:	727d      	strb	r5, [r7, #9]
    35f2:	2000      	movs	r0, #0
    35f4:	f008 fa65 	bl	bac2 <MPSL_IRQ_RADIO_Handler+0x4>
    35f8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35fc:	4630      	mov	r0, r6
    35fe:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3606:	2900      	cmp	r1, #0
    3608:	d0fb      	beq.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    360a:	2920      	cmp	r1, #32
    360c:	d8f9      	bhi.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    360e:	78a1      	ldrb	r1, [r4, #2]
    3610:	2921      	cmp	r1, #33	; 0x21
    3612:	d8f6      	bhi.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3614:	2901      	cmp	r1, #1
    3616:	d1c2      	bne.n	359e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3618:	e7f3      	b.n	3602 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    361a:	0000      	.short	0x0000
    361c:	20000030 	.word	0x20000030

00003620 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3620:	4801      	ldr	r0, [pc, #4]	; (3628 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3622:	8980      	ldrh	r0, [r0, #12]
    3624:	4770      	bx	lr
    3626:	0000      	.short	0x0000
    3628:	20000030 	.word	0x20000030

0000362c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    362c:	b510      	push	{r4, lr}
    362e:	480d      	ldr	r0, [pc, #52]	; (3664 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3630:	f008 fafd 	bl	bc2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3634:	490b      	ldr	r1, [pc, #44]	; (3664 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3636:	3908      	subs	r1, #8
    3638:	b148      	cbz	r0, 364e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    363a:	2001      	movs	r0, #1
    363c:	7008      	strb	r0, [r1, #0]
    363e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3642:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    364a:	f7ff bf2f 	b.w	34ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    364e:	7a88      	ldrb	r0, [r1, #10]
    3650:	2802      	cmp	r0, #2
    3652:	d101      	bne.n	3658 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3654:	f7ff fda0 	bl	3198 <MPSL_IRQ_CLOCK_Handler+0x88>
    3658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    365c:	4801      	ldr	r0, [pc, #4]	; (3664 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    365e:	f008 bafd 	b.w	bc5c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3662:	0000      	.short	0x0000
    3664:	20000038 	.word	0x20000038

00003668 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3668:	4802      	ldr	r0, [pc, #8]	; (3674 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    366a:	7a80      	ldrb	r0, [r0, #10]
    366c:	2800      	cmp	r0, #0
    366e:	d000      	beq.n	3672 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3670:	2001      	movs	r0, #1
    3672:	4770      	bx	lr
    3674:	20000030 	.word	0x20000030

00003678 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    367a:	4d1f      	ldr	r5, [pc, #124]	; (36f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    367c:	7ae8      	ldrb	r0, [r5, #11]
    367e:	2800      	cmp	r0, #0
    3680:	d10f      	bne.n	36a2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3682:	7e28      	ldrb	r0, [r5, #24]
    3684:	f000 0003 	and.w	r0, r0, #3
    3688:	f008 fa7e 	bl	bb88 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    368c:	2800      	cmp	r0, #0
    368e:	d008      	beq.n	36a2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3690:	f3ef 8110 	mrs	r1, PRIMASK
    3694:	b672      	cpsid	i
    3696:	f7ff ffe7 	bl	3668 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    369a:	b118      	cbz	r0, 36a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    369c:	2900      	cmp	r1, #0
    369e:	d100      	bne.n	36a2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    36a0:	b662      	cpsie	i
    36a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36a4:	2601      	movs	r6, #1
    36a6:	72ae      	strb	r6, [r5, #10]
    36a8:	b901      	cbnz	r1, 36ac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    36aa:	b662      	cpsie	i
    36ac:	2018      	movs	r0, #24
    36ae:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    36b2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36b6:	61a6      	str	r6, [r4, #24]
    36b8:	f44f 7020 	mov.w	r0, #640	; 0x280
    36bc:	f8ad 0000 	strh.w	r0, [sp]
    36c0:	f8bd 0000 	ldrh.w	r0, [sp]
    36c4:	1e41      	subs	r1, r0, #1
    36c6:	f8ad 1000 	strh.w	r1, [sp]
    36ca:	d2f9      	bcs.n	36c0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    36cc:	2700      	movs	r7, #0
    36ce:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    36d2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    36d6:	4808      	ldr	r0, [pc, #32]	; (36f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    36d8:	3008      	adds	r0, #8
    36da:	f008 fabb 	bl	bc54 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    36de:	702f      	strb	r7, [r5, #0]
    36e0:	f7ff fd5a 	bl	3198 <MPSL_IRQ_CLOCK_Handler+0x88>
    36e4:	6166      	str	r6, [r4, #20]
    36e6:	7968      	ldrb	r0, [r5, #5]
    36e8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    36ec:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    36f0:	2018      	movs	r0, #24
    36f2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    36f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36f8:	20000030 	.word	0x20000030

000036fc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    36fc:	b510      	push	{r4, lr}
    36fe:	4c04      	ldr	r4, [pc, #16]	; (3710 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3700:	7e20      	ldrb	r0, [r4, #24]
    3702:	f000 0003 	and.w	r0, r0, #3
    3706:	f008 fa3f 	bl	bb88 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    370a:	2800      	cmp	r0, #0
    370c:	d0f8      	beq.n	3700 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    370e:	bd10      	pop	{r4, pc}
    3710:	20000030 	.word	0x20000030

00003714 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3714:	4901      	ldr	r1, [pc, #4]	; (371c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3716:	2001      	movs	r0, #1
    3718:	7008      	strb	r0, [r1, #0]
    371a:	4770      	bx	lr
    371c:	2000029c 	.word	0x2000029c

00003720 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3720:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3724:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3728:	b918      	cbnz	r0, 3732 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    372a:	4803      	ldr	r0, [pc, #12]	; (3738 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    372c:	7800      	ldrb	r0, [r0, #0]
    372e:	2800      	cmp	r0, #0
    3730:	d000      	beq.n	3734 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3732:	2001      	movs	r0, #1
    3734:	4770      	bx	lr
    3736:	0000      	.short	0x0000
    3738:	2000029c 	.word	0x2000029c

0000373c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    373c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3740:	2101      	movs	r1, #1
    3742:	6041      	str	r1, [r0, #4]
    3744:	2100      	movs	r1, #0
    3746:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    374a:	4801      	ldr	r0, [pc, #4]	; (3750 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    374c:	7001      	strb	r1, [r0, #0]
    374e:	4770      	bx	lr
    3750:	2000029c 	.word	0x2000029c

00003754 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3754:	4802      	ldr	r0, [pc, #8]	; (3760 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3756:	6800      	ldr	r0, [r0, #0]
    3758:	f000 0003 	and.w	r0, r0, #3
    375c:	4770      	bx	lr
    375e:	0000      	.short	0x0000
    3760:	4000041c 	.word	0x4000041c
    3764:	b510      	push	{r4, lr}
    3766:	b131      	cbz	r1, 3776 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3768:	2901      	cmp	r1, #1
    376a:	d007      	beq.n	377c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    376c:	f44f 7142 	mov.w	r1, #776	; 0x308
    3770:	a005      	add	r0, pc, #20	; (adr r0, 3788 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3772:	f000 f80f 	bl	3794 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3776:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    377a:	e001      	b.n	3780 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    377c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3780:	f000 0001 	and.w	r0, r0, #1
    3784:	bd10      	pop	{r4, pc}
    3786:	0000      	.short	0x0000
    3788:	5f66726e 	.word	0x5f66726e
    378c:	636f6c63 	.word	0x636f6c63
    3790:	00682e6b 	.word	0x00682e6b

00003794 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3794:	4a02      	ldr	r2, [pc, #8]	; (37a0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3796:	6852      	ldr	r2, [r2, #4]
    3798:	b102      	cbz	r2, 379c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    379a:	4710      	bx	r2
    379c:	e7fe      	b.n	379c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    379e:	0000      	.short	0x0000
    37a0:	20000050 	.word	0x20000050
    37a4:	4806      	ldr	r0, [pc, #24]	; (37c0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    37a6:	b510      	push	{r4, lr}
    37a8:	2100      	movs	r1, #0
    37aa:	6001      	str	r1, [r0, #0]
    37ac:	2101      	movs	r1, #1
    37ae:	6001      	str	r1, [r0, #0]
    37b0:	4608      	mov	r0, r1
    37b2:	f008 fa10 	bl	bbd6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37ba:	2001      	movs	r0, #1
    37bc:	f008 b9fe 	b.w	bbbc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37c0:	40001ffc 	.word	0x40001ffc
    37c4:	4807      	ldr	r0, [pc, #28]	; (37e4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    37c6:	b510      	push	{r4, lr}
    37c8:	2101      	movs	r1, #1
    37ca:	6041      	str	r1, [r0, #4]
    37cc:	1e89      	subs	r1, r1, #2
    37ce:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    37d2:	200c      	movs	r0, #12
    37d4:	f008 f9ff 	bl	bbd6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37dc:	200c      	movs	r0, #12
    37de:	f008 b9ed 	b.w	bbbc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37e2:	0000      	.short	0x0000
    37e4:	4000c000 	.word	0x4000c000

000037e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    37e8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    37ea:	4a10      	ldr	r2, [pc, #64]	; (382c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    37ec:	6855      	ldr	r5, [r2, #4]
    37ee:	b1e5      	cbz	r5, 382a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    37f0:	2200      	movs	r2, #0
    37f2:	4603      	mov	r3, r0
    37f4:	466e      	mov	r6, sp
    37f6:	240a      	movs	r4, #10
    37f8:	e003      	b.n	3802 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    37fa:	fbb0 f0f4 	udiv	r0, r0, r4
    37fe:	1c52      	adds	r2, r2, #1
    3800:	b2d2      	uxtb	r2, r2
    3802:	2800      	cmp	r0, #0
    3804:	d1f9      	bne.n	37fa <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    3806:	54b0      	strb	r0, [r6, r2]
    3808:	e00a      	b.n	3820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    380a:	bf00      	nop
    380c:	fbb3 f0f4 	udiv	r0, r3, r4
    3810:	fb04 3010 	mls	r0, r4, r0, r3
    3814:	fbb3 f3f4 	udiv	r3, r3, r4
    3818:	1e52      	subs	r2, r2, #1
    381a:	b2d2      	uxtb	r2, r2
    381c:	3030      	adds	r0, #48	; 0x30
    381e:	54b0      	strb	r0, [r6, r2]
    3820:	2a00      	cmp	r2, #0
    3822:	d1f3      	bne.n	380c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3824:	4630      	mov	r0, r6
    3826:	47a8      	blx	r5
    3828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    382a:	e7fe      	b.n	382a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    382c:	20000050 	.word	0x20000050

00003830 <mpsl_init>:
    3830:	b570      	push	{r4, r5, r6, lr}
    3832:	4c17      	ldr	r4, [pc, #92]	; (3890 <mpsl_init+0x60>)
    3834:	4606      	mov	r6, r0
    3836:	460d      	mov	r5, r1
    3838:	7860      	ldrb	r0, [r4, #1]
    383a:	b110      	cbz	r0, 3842 <mpsl_init+0x12>
    383c:	f04f 30ff 	mov.w	r0, #4294967295
    3840:	bd70      	pop	{r4, r5, r6, pc}
    3842:	b906      	cbnz	r6, 3846 <mpsl_init+0x16>
    3844:	4e13      	ldr	r6, [pc, #76]	; (3894 <mpsl_init+0x64>)
    3846:	6062      	str	r2, [r4, #4]
    3848:	7025      	strb	r5, [r4, #0]
    384a:	f7ff ffab 	bl	37a4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    384e:	f7ff ffb9 	bl	37c4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3852:	4630      	mov	r0, r6
    3854:	f7ff fe92 	bl	357c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3858:	0006      	movs	r6, r0
    385a:	d1f1      	bne.n	3840 <mpsl_init+0x10>
    385c:	f7fe fef4 	bl	2648 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3860:	f7ff ff0a 	bl	3678 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3864:	f008 f87a 	bl	b95c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3868:	4628      	mov	r0, r5
    386a:	f008 f9a7 	bl	bbbc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    386e:	2001      	movs	r0, #1
    3870:	2d00      	cmp	r5, #0
    3872:	db09      	blt.n	3888 <mpsl_init+0x58>
    3874:	f005 011f 	and.w	r1, r5, #31
    3878:	fa00 f101 	lsl.w	r1, r0, r1
    387c:	096a      	lsrs	r2, r5, #5
    387e:	0092      	lsls	r2, r2, #2
    3880:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3884:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3888:	7060      	strb	r0, [r4, #1]
    388a:	4630      	mov	r0, r6
    388c:	bd70      	pop	{r4, r5, r6, pc}
    388e:	0000      	.short	0x0000
    3890:	20000050 	.word	0x20000050
    3894:	0000bbf8 	.word	0x0000bbf8

00003898 <mpsl_is_initialized>:
    3898:	4801      	ldr	r0, [pc, #4]	; (38a0 <mpsl_is_initialized+0x8>)
    389a:	7840      	ldrb	r0, [r0, #1]
    389c:	4770      	bx	lr
    389e:	0000      	.short	0x0000
    38a0:	20000050 	.word	0x20000050

000038a4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    38a4:	4807      	ldr	r0, [pc, #28]	; (38c4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    38a6:	f990 0000 	ldrsb.w	r0, [r0]
    38aa:	2800      	cmp	r0, #0
    38ac:	db09      	blt.n	38c2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    38ae:	f000 021f 	and.w	r2, r0, #31
    38b2:	2101      	movs	r1, #1
    38b4:	4091      	lsls	r1, r2
    38b6:	0940      	lsrs	r0, r0, #5
    38b8:	0080      	lsls	r0, r0, #2
    38ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38be:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38c2:	4770      	bx	lr
    38c4:	20000050 	.word	0x20000050

000038c8 <mpsl_temperature_get>:
    38c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38cc:	2601      	movs	r6, #1
    38ce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    38d2:	0331      	lsls	r1, r6, #12
    38d4:	f04f 0800 	mov.w	r8, #0
    38d8:	4640      	mov	r0, r8
    38da:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    38de:	f3bf 8f4f 	dsb	sy
    38e2:	f3bf 8f6f 	isb	sy
    38e6:	4c16      	ldr	r4, [pc, #88]	; (3940 <mpsl_temperature_get+0x78>)
    38e8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    38ec:	200c      	movs	r0, #12
    38ee:	f008 f991 	bl	bc14 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38f2:	4d14      	ldr	r5, [pc, #80]	; (3944 <mpsl_temperature_get+0x7c>)
    38f4:	6828      	ldr	r0, [r5, #0]
    38f6:	43c0      	mvns	r0, r0
    38f8:	f340 1700 	sbfx	r7, r0, #4, #1
    38fc:	6828      	ldr	r0, [r5, #0]
    38fe:	f040 0010 	orr.w	r0, r0, #16
    3902:	6028      	str	r0, [r5, #0]
    3904:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3908:	6026      	str	r6, [r4, #0]
    390a:	1c7f      	adds	r7, r7, #1
    390c:	e002      	b.n	3914 <mpsl_temperature_get+0x4c>
    390e:	bf00      	nop
    3910:	f000 f890 	bl	3a34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3914:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3918:	2800      	cmp	r0, #0
    391a:	d0f9      	beq.n	3910 <mpsl_temperature_get+0x48>
    391c:	b91f      	cbnz	r7, 3926 <mpsl_temperature_get+0x5e>
    391e:	6828      	ldr	r0, [r5, #0]
    3920:	f020 0010 	bic.w	r0, r0, #16
    3924:	6028      	str	r0, [r5, #0]
    3926:	4808      	ldr	r0, [pc, #32]	; (3948 <mpsl_temperature_get+0x80>)
    3928:	6805      	ldr	r5, [r0, #0]
    392a:	6066      	str	r6, [r4, #4]
    392c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3930:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3934:	200c      	movs	r0, #12
    3936:	f008 f96d 	bl	bc14 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    393a:	4628      	mov	r0, r5
    393c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3940:	4000c000 	.word	0x4000c000
    3944:	e000ed10 	.word	0xe000ed10
    3948:	4000c508 	.word	0x4000c508

0000394c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    394c:	b510      	push	{r4, lr}
    394e:	4602      	mov	r2, r0
    3950:	2005      	movs	r0, #5
    3952:	490c      	ldr	r1, [pc, #48]	; (3984 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3954:	e004      	b.n	3960 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3956:	bf00      	nop
    3958:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    395c:	791b      	ldrb	r3, [r3, #4]
    395e:	b133      	cbz	r3, 396e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3960:	1e40      	subs	r0, r0, #1
    3962:	b2c0      	uxtb	r0, r0
    3964:	d2f8      	bcs.n	3958 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3966:	214b      	movs	r1, #75	; 0x4b
    3968:	2069      	movs	r0, #105	; 0x69
    396a:	f7ff ff3d 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    396e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3972:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3976:	2200      	movs	r2, #0
    3978:	714a      	strb	r2, [r1, #5]
    397a:	718a      	strb	r2, [r1, #6]
    397c:	2201      	movs	r2, #1
    397e:	710a      	strb	r2, [r1, #4]
    3980:	bd10      	pop	{r4, pc}
    3982:	0000      	.short	0x0000
    3984:	20000f48 	.word	0x20000f48

00003988 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3988:	b510      	push	{r4, lr}
    398a:	2805      	cmp	r0, #5
    398c:	d301      	bcc.n	3992 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    398e:	215a      	movs	r1, #90	; 0x5a
    3990:	e006      	b.n	39a0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3992:	490a      	ldr	r1, [pc, #40]	; (39bc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3994:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3998:	7901      	ldrb	r1, [r0, #4]
    399a:	2901      	cmp	r1, #1
    399c:	d003      	beq.n	39a6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    399e:	215b      	movs	r1, #91	; 0x5b
    39a0:	2069      	movs	r0, #105	; 0x69
    39a2:	f7ff ff21 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39a6:	7941      	ldrb	r1, [r0, #5]
    39a8:	7982      	ldrb	r2, [r0, #6]
    39aa:	1c49      	adds	r1, r1, #1
    39ac:	b2c9      	uxtb	r1, r1
    39ae:	428a      	cmp	r2, r1
    39b0:	d000      	beq.n	39b4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    39b2:	7141      	strb	r1, [r0, #5]
    39b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39b8:	f7ff bf74 	b.w	38a4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    39bc:	20000f48 	.word	0x20000f48

000039c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    39c0:	b570      	push	{r4, r5, r6, lr}
    39c2:	2505      	movs	r5, #5
    39c4:	4e0e      	ldr	r6, [pc, #56]	; (3a00 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    39c6:	4c0f      	ldr	r4, [pc, #60]	; (3a04 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    39c8:	e016      	b.n	39f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39ca:	7821      	ldrb	r1, [r4, #0]
    39cc:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    39d0:	7902      	ldrb	r2, [r0, #4]
    39d2:	2a01      	cmp	r2, #1
    39d4:	d108      	bne.n	39e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39d6:	7942      	ldrb	r2, [r0, #5]
    39d8:	7983      	ldrb	r3, [r0, #6]
    39da:	429a      	cmp	r2, r3
    39dc:	d004      	beq.n	39e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39de:	7942      	ldrb	r2, [r0, #5]
    39e0:	7182      	strb	r2, [r0, #6]
    39e2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    39e6:	4780      	blx	r0
    39e8:	7820      	ldrb	r0, [r4, #0]
    39ea:	1c40      	adds	r0, r0, #1
    39ec:	b2c0      	uxtb	r0, r0
    39ee:	7020      	strb	r0, [r4, #0]
    39f0:	2805      	cmp	r0, #5
    39f2:	d301      	bcc.n	39f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39f4:	2000      	movs	r0, #0
    39f6:	7020      	strb	r0, [r4, #0]
    39f8:	1e6d      	subs	r5, r5, #1
    39fa:	b2ed      	uxtb	r5, r5
    39fc:	d2e5      	bcs.n	39ca <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    39fe:	bd70      	pop	{r4, r5, r6, pc}
    3a00:	20000f48 	.word	0x20000f48
    3a04:	2000029d 	.word	0x2000029d

00003a08 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3a08:	b500      	push	{lr}
    3a0a:	f008 f932 	bl	bc72 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a0e:	b940      	cbnz	r0, 3a22 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a10:	f008 f939 	bl	bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a14:	b928      	cbnz	r0, 3a22 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a16:	f008 f94d 	bl	bcb4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a1a:	b910      	cbnz	r0, 3a22 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a1c:	f008 f95e 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a20:	b108      	cbz	r0, 3a26 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3a22:	4802      	ldr	r0, [pc, #8]	; (3a2c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3a24:	bd00      	pop	{pc}
    3a26:	4802      	ldr	r0, [pc, #8]	; (3a30 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3a28:	bd00      	pop	{pc}
    3a2a:	0000      	.short	0x0000
    3a2c:	4000050c 	.word	0x4000050c
    3a30:	4001e700 	.word	0x4001e700

00003a34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3a34:	b510      	push	{r4, lr}
    3a36:	f008 f951 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a3a:	b330      	cbz	r0, 3a8a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3a3c:	f3ef 8010 	mrs	r0, PRIMASK
    3a40:	b1c8      	cbz	r0, 3a76 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3a42:	2100      	movs	r1, #0
    3a44:	b672      	cpsid	i
    3a46:	4812      	ldr	r0, [pc, #72]	; (3a90 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3a48:	6802      	ldr	r2, [r0, #0]
    3a4a:	6803      	ldr	r3, [r0, #0]
    3a4c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3a50:	f043 0310 	orr.w	r3, r3, #16
    3a54:	6003      	str	r3, [r0, #0]
    3a56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a5a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3a5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a62:	431c      	orrs	r4, r3
    3a64:	d000      	beq.n	3a68 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a66:	bf40      	sev
    3a68:	bf20      	wfe
    3a6a:	bf00      	nop
    3a6c:	bf00      	nop
    3a6e:	bf00      	nop
    3a70:	bf00      	nop
    3a72:	b112      	cbz	r2, 3a7a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a74:	e005      	b.n	3a82 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a76:	2101      	movs	r1, #1
    3a78:	e7e4      	b.n	3a44 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a7a:	6802      	ldr	r2, [r0, #0]
    3a7c:	f022 0210 	bic.w	r2, r2, #16
    3a80:	6002      	str	r2, [r0, #0]
    3a82:	2900      	cmp	r1, #0
    3a84:	d000      	beq.n	3a88 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a86:	b662      	cpsie	i
    3a88:	bd10      	pop	{r4, pc}
    3a8a:	bf20      	wfe
    3a8c:	bd10      	pop	{r4, pc}
    3a8e:	0000      	.short	0x0000
    3a90:	e000ed10 	.word	0xe000ed10

00003a94 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3a94:	0000bf4d 0000bf69 0000bf57 0000bf63     M...i...W...c...
    3aa4:	0000bf51 0000bf4b 0000bf49 0000bf6f     Q...K...I...o...
    3ab4:	0000bf5d 0000bf43 0000bf3b 0000bf3f     ]...C...;...?...
    3ac4:	0000bf35                                5...

00003ac8 <mpsl_fem_disable>:
    3ac8:	4801      	ldr	r0, [pc, #4]	; (3ad0 <mpsl_fem_disable+0x8>)
    3aca:	6800      	ldr	r0, [r0, #0]
    3acc:	6800      	ldr	r0, [r0, #0]
    3ace:	4700      	bx	r0
    3ad0:	20000058 	.word	0x20000058

00003ad4 <mpsl_fem_lna_configuration_clear>:
    3ad4:	4801      	ldr	r0, [pc, #4]	; (3adc <mpsl_fem_lna_configuration_clear+0x8>)
    3ad6:	6800      	ldr	r0, [r0, #0]
    3ad8:	6900      	ldr	r0, [r0, #16]
    3ada:	4700      	bx	r0
    3adc:	20000058 	.word	0x20000058

00003ae0 <mpsl_fem_lna_configuration_set>:
    3ae0:	4a01      	ldr	r2, [pc, #4]	; (3ae8 <mpsl_fem_lna_configuration_set+0x8>)
    3ae2:	6812      	ldr	r2, [r2, #0]
    3ae4:	6892      	ldr	r2, [r2, #8]
    3ae6:	4710      	bx	r2
    3ae8:	20000058 	.word	0x20000058

00003aec <mpsl_fem_pa_configuration_clear>:
    3aec:	4801      	ldr	r0, [pc, #4]	; (3af4 <mpsl_fem_pa_configuration_clear+0x8>)
    3aee:	6800      	ldr	r0, [r0, #0]
    3af0:	68c0      	ldr	r0, [r0, #12]
    3af2:	4700      	bx	r0
    3af4:	20000058 	.word	0x20000058

00003af8 <mpsl_fem_pa_configuration_set>:
    3af8:	4a01      	ldr	r2, [pc, #4]	; (3b00 <mpsl_fem_pa_configuration_set+0x8>)
    3afa:	6812      	ldr	r2, [r2, #0]
    3afc:	6852      	ldr	r2, [r2, #4]
    3afe:	4710      	bx	r2
    3b00:	20000058 	.word	0x20000058

00003b04 <mpsl_fem_pa_is_configured>:
    3b04:	4901      	ldr	r1, [pc, #4]	; (3b0c <mpsl_fem_pa_is_configured+0x8>)
    3b06:	6809      	ldr	r1, [r1, #0]
    3b08:	6a09      	ldr	r1, [r1, #32]
    3b0a:	4708      	bx	r1
    3b0c:	20000058 	.word	0x20000058

00003b10 <mpsl_fem_device_config_254_apply_get>:
    3b10:	4801      	ldr	r0, [pc, #4]	; (3b18 <mpsl_fem_device_config_254_apply_get+0x8>)
    3b12:	7800      	ldrb	r0, [r0, #0]
    3b14:	4770      	bx	lr
    3b16:	0000      	.short	0x0000
    3b18:	2000029e 	.word	0x2000029e
    3b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b1e:	4c17      	ldr	r4, [pc, #92]	; (3b7c <mpsl_fem_device_config_254_apply_get+0x6c>)
    3b20:	79a0      	ldrb	r0, [r4, #6]
    3b22:	2802      	cmp	r0, #2
    3b24:	d200      	bcs.n	3b28 <mpsl_fem_device_config_254_apply_get+0x18>
    3b26:	2002      	movs	r0, #2
    3b28:	f88d 0001 	strb.w	r0, [sp, #1]
    3b2c:	7960      	ldrb	r0, [r4, #5]
    3b2e:	2803      	cmp	r0, #3
    3b30:	d200      	bcs.n	3b34 <mpsl_fem_device_config_254_apply_get+0x24>
    3b32:	2003      	movs	r0, #3
    3b34:	f88d 0000 	strb.w	r0, [sp]
    3b38:	7920      	ldrb	r0, [r4, #4]
    3b3a:	f8ad 0004 	strh.w	r0, [sp, #4]
    3b3e:	78e0      	ldrb	r0, [r4, #3]
    3b40:	f8ad 0002 	strh.w	r0, [sp, #2]
    3b44:	4668      	mov	r0, sp
    3b46:	f006 f8fb 	bl	9d40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3b4a:	b108      	cbz	r0, 3b50 <mpsl_fem_device_config_254_apply_get+0x40>
    3b4c:	21ae      	movs	r1, #174	; 0xae
    3b4e:	e010      	b.n	3b72 <mpsl_fem_device_config_254_apply_get+0x62>
    3b50:	68a0      	ldr	r0, [r4, #8]
    3b52:	9002      	str	r0, [sp, #8]
    3b54:	a802      	add	r0, sp, #8
    3b56:	f006 f909 	bl	9d6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3b5a:	b108      	cbz	r0, 3b60 <mpsl_fem_device_config_254_apply_get+0x50>
    3b5c:	21b2      	movs	r1, #178	; 0xb2
    3b5e:	e008      	b.n	3b72 <mpsl_fem_device_config_254_apply_get+0x62>
    3b60:	4807      	ldr	r0, [pc, #28]	; (3b80 <mpsl_fem_device_config_254_apply_get+0x70>)
    3b62:	6800      	ldr	r0, [r0, #0]
    3b64:	9003      	str	r0, [sp, #12]
    3b66:	a803      	add	r0, sp, #12
    3b68:	f00b f932 	bl	edd0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3b6c:	2800      	cmp	r0, #0
    3b6e:	d003      	beq.n	3b78 <mpsl_fem_device_config_254_apply_get+0x68>
    3b70:	21b6      	movs	r1, #182	; 0xb6
    3b72:	2003      	movs	r0, #3
    3b74:	f000 f8ce 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b78:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3b7a:	0000      	.short	0x0000
    3b7c:	20000068 	.word	0x20000068
    3b80:	00003dfc 	.word	0x00003dfc

00003b84 <sdc_build_revision_get>:
    3b84:	b510      	push	{r4, lr}
    3b86:	b128      	cbz	r0, 3b94 <sdc_build_revision_get+0x10>
    3b88:	2214      	movs	r2, #20
    3b8a:	4904      	ldr	r1, [pc, #16]	; (3b9c <sdc_build_revision_get+0x18>)
    3b8c:	f008 f8f8 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b90:	2000      	movs	r0, #0
    3b92:	bd10      	pop	{r4, pc}
    3b94:	f06f 0015 	mvn.w	r0, #21
    3b98:	bd10      	pop	{r4, pc}
    3b9a:	0000      	.short	0x0000
    3b9c:	00003e2e 	.word	0x00003e2e

00003ba0 <sdc_cfg_set>:
    3ba0:	b570      	push	{r4, r5, r6, lr}
    3ba2:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    3ba6:	bbb0      	cbnz	r0, 3c16 <sdc_cfg_set+0x76>
    3ba8:	4c1d      	ldr	r4, [pc, #116]	; (3c20 <sdc_cfg_set+0x80>)
    3baa:	78a0      	ldrb	r0, [r4, #2]
    3bac:	b108      	cbz	r0, 3bb2 <sdc_cfg_set+0x12>
    3bae:	11a8      	asrs	r0, r5, #6
    3bb0:	bd70      	pop	{r4, r5, r6, pc}
    3bb2:	b321      	cbz	r1, 3bfe <sdc_cfg_set+0x5e>
    3bb4:	f06f 0015 	mvn.w	r0, #21
    3bb8:	2a00      	cmp	r2, #0
    3bba:	d0f9      	beq.n	3bb0 <sdc_cfg_set+0x10>
    3bbc:	2908      	cmp	r1, #8
    3bbe:	d22a      	bcs.n	3c16 <sdc_cfg_set+0x76>
    3bc0:	e8df f001 	tbb	[pc, r1]
    3bc4:	0a070429 	.word	0x0a070429
    3bc8:	1e14110e 	.word	0x1e14110e
    3bcc:	7810      	ldrb	r0, [r2, #0]
    3bce:	7320      	strb	r0, [r4, #12]
    3bd0:	e018      	b.n	3c04 <sdc_cfg_set+0x64>
    3bd2:	7810      	ldrb	r0, [r2, #0]
    3bd4:	7360      	strb	r0, [r4, #13]
    3bd6:	e015      	b.n	3c04 <sdc_cfg_set+0x64>
    3bd8:	6810      	ldr	r0, [r2, #0]
    3bda:	f8c4 000f 	str.w	r0, [r4, #15]
    3bde:	e011      	b.n	3c04 <sdc_cfg_set+0x64>
    3be0:	6810      	ldr	r0, [r2, #0]
    3be2:	6160      	str	r0, [r4, #20]
    3be4:	e00e      	b.n	3c04 <sdc_cfg_set+0x64>
    3be6:	7810      	ldrb	r0, [r2, #0]
    3be8:	73a0      	strb	r0, [r4, #14]
    3bea:	e00b      	b.n	3c04 <sdc_cfg_set+0x64>
    3bec:	7921      	ldrb	r1, [r4, #4]
    3bee:	b111      	cbz	r1, 3bf6 <sdc_cfg_set+0x56>
    3bf0:	7811      	ldrb	r1, [r2, #0]
    3bf2:	2902      	cmp	r1, #2
    3bf4:	d3dc      	bcc.n	3bb0 <sdc_cfg_set+0x10>
    3bf6:	490a      	ldr	r1, [pc, #40]	; (3c20 <sdc_cfg_set+0x80>)
    3bf8:	7810      	ldrb	r0, [r2, #0]
    3bfa:	310c      	adds	r1, #12
    3bfc:	7308      	strb	r0, [r1, #12]
    3bfe:	e001      	b.n	3c04 <sdc_cfg_set+0x64>
    3c00:	8810      	ldrh	r0, [r2, #0]
    3c02:	8360      	strh	r0, [r4, #26]
    3c04:	4906      	ldr	r1, [pc, #24]	; (3c20 <sdc_cfg_set+0x80>)
    3c06:	2201      	movs	r2, #1
    3c08:	310c      	adds	r1, #12
    3c0a:	2000      	movs	r0, #0
    3c0c:	f008 f9b1 	bl	bf72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3c10:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c14:	db01      	blt.n	3c1a <sdc_cfg_set+0x7a>
    3c16:	4628      	mov	r0, r5
    3c18:	bd70      	pop	{r4, r5, r6, pc}
    3c1a:	2101      	movs	r1, #1
    3c1c:	70e1      	strb	r1, [r4, #3]
    3c1e:	bd70      	pop	{r4, r5, r6, pc}
    3c20:	2000005c 	.word	0x2000005c

00003c24 <sdc_enable>:
    3c24:	b538      	push	{r3, r4, r5, lr}
    3c26:	460d      	mov	r5, r1
    3c28:	0004      	movs	r4, r0
    3c2a:	d020      	beq.n	3c6e <sdc_enable+0x4a>
    3c2c:	b1fd      	cbz	r5, 3c6e <sdc_enable+0x4a>
    3c2e:	f000 f933 	bl	3e98 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c32:	b1f8      	cbz	r0, 3c74 <sdc_enable+0x50>
    3c34:	4620      	mov	r0, r4
    3c36:	f7ff fe89 	bl	394c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c3a:	4c10      	ldr	r4, [pc, #64]	; (3c7c <sdc_enable+0x58>)
    3c3c:	2200      	movs	r2, #0
    3c3e:	f104 010c 	add.w	r1, r4, #12
    3c42:	7020      	strb	r0, [r4, #0]
    3c44:	4628      	mov	r0, r5
    3c46:	f008 f994 	bl	bf72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3c4a:	f00b fcb0 	bl	f5ae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3c4e:	2100      	movs	r1, #0
    3c50:	7820      	ldrb	r0, [r4, #0]
    3c52:	f006 fae3 	bl	a21c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3c56:	7860      	ldrb	r0, [r4, #1]
    3c58:	f88d 0000 	strb.w	r0, [sp]
    3c5c:	4668      	mov	r0, sp
    3c5e:	f00b f8ab 	bl	edb8 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3c62:	f7ff ff5b 	bl	3b1c <mpsl_fem_device_config_254_apply_get+0xc>
    3c66:	2001      	movs	r0, #1
    3c68:	70a0      	strb	r0, [r4, #2]
    3c6a:	2000      	movs	r0, #0
    3c6c:	bd38      	pop	{r3, r4, r5, pc}
    3c6e:	f06f 0015 	mvn.w	r0, #21
    3c72:	bd38      	pop	{r3, r4, r5, pc}
    3c74:	f04f 30ff 	mov.w	r0, #4294967295
    3c78:	bd38      	pop	{r3, r4, r5, pc}
    3c7a:	0000      	.short	0x0000
    3c7c:	2000005c 	.word	0x2000005c

00003c80 <sdc_init>:
    3c80:	b570      	push	{r4, r5, r6, lr}
    3c82:	0005      	movs	r5, r0
    3c84:	d00b      	beq.n	3c9e <sdc_init+0x1e>
    3c86:	f7ff fe07 	bl	3898 <mpsl_is_initialized>
    3c8a:	f04f 34ff 	mov.w	r4, #4294967295
    3c8e:	b120      	cbz	r0, 3c9a <sdc_init+0x1a>
    3c90:	f7ff fcc6 	bl	3620 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3c94:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3c98:	d904      	bls.n	3ca4 <sdc_init+0x24>
    3c9a:	4620      	mov	r0, r4
    3c9c:	bd70      	pop	{r4, r5, r6, pc}
    3c9e:	f06f 0015 	mvn.w	r0, #21
    3ca2:	bd70      	pop	{r4, r5, r6, pc}
    3ca4:	2200      	movs	r2, #0
    3ca6:	4b16      	ldr	r3, [pc, #88]	; (3d00 <sdc_init+0x80>)
    3ca8:	4611      	mov	r1, r2
    3caa:	bf00      	nop
    3cac:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3cb0:	4284      	cmp	r4, r0
    3cb2:	d303      	bcc.n	3cbc <sdc_init+0x3c>
    3cb4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3cb8:	7882      	ldrb	r2, [r0, #2]
    3cba:	e003      	b.n	3cc4 <sdc_init+0x44>
    3cbc:	1c49      	adds	r1, r1, #1
    3cbe:	b2c9      	uxtb	r1, r1
    3cc0:	290c      	cmp	r1, #12
    3cc2:	d3f3      	bcc.n	3cac <sdc_init+0x2c>
    3cc4:	4c0f      	ldr	r4, [pc, #60]	; (3d04 <sdc_init+0x84>)
    3cc6:	4810      	ldr	r0, [pc, #64]	; (3d08 <sdc_init+0x88>)
    3cc8:	7062      	strb	r2, [r4, #1]
    3cca:	60a5      	str	r5, [r4, #8]
    3ccc:	f000 f9f6 	bl	40bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3cd0:	2000      	movs	r0, #0
    3cd2:	70a0      	strb	r0, [r4, #2]
    3cd4:	70e0      	strb	r0, [r4, #3]
    3cd6:	7120      	strb	r0, [r4, #4]
    3cd8:	f3ef 8410 	mrs	r4, PRIMASK
    3cdc:	b672      	cpsid	i
    3cde:	480b      	ldr	r0, [pc, #44]	; (3d0c <sdc_init+0x8c>)
    3ce0:	f06f 010c 	mvn.w	r1, #12
    3ce4:	f000 fd6c 	bl	47c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3ce8:	4809      	ldr	r0, [pc, #36]	; (3d10 <sdc_init+0x90>)
    3cea:	f000 fe2d 	bl	4948 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3cee:	b118      	cbz	r0, 3cf8 <sdc_init+0x78>
    3cf0:	21c4      	movs	r1, #196	; 0xc4
    3cf2:	2003      	movs	r0, #3
    3cf4:	f000 f80e 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cf8:	b904      	cbnz	r4, 3cfc <sdc_init+0x7c>
    3cfa:	b662      	cpsie	i
    3cfc:	2000      	movs	r0, #0
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	00003dfe 	.word	0x00003dfe
    3d04:	2000005c 	.word	0x2000005c
    3d08:	00003b1d 	.word	0x00003b1d
    3d0c:	4000c000 	.word	0x4000c000
    3d10:	00003ec5 	.word	0x00003ec5

00003d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d14:	b50e      	push	{r1, r2, r3, lr}
    3d16:	b672      	cpsid	i
    3d18:	4a15      	ldr	r2, [pc, #84]	; (3d70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d1a:	6895      	ldr	r5, [r2, #8]
    3d1c:	b1d5      	cbz	r5, 3d54 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3d1e:	2200      	movs	r2, #0
    3d20:	4603      	mov	r3, r0
    3d22:	466e      	mov	r6, sp
    3d24:	240a      	movs	r4, #10
    3d26:	e003      	b.n	3d30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d28:	fbb0 f0f4 	udiv	r0, r0, r4
    3d2c:	1c52      	adds	r2, r2, #1
    3d2e:	b2d2      	uxtb	r2, r2
    3d30:	2800      	cmp	r0, #0
    3d32:	d1f9      	bne.n	3d28 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d34:	54b0      	strb	r0, [r6, r2]
    3d36:	e009      	b.n	3d4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d38:	fbb3 f0f4 	udiv	r0, r3, r4
    3d3c:	fb04 3010 	mls	r0, r4, r0, r3
    3d40:	fbb3 f3f4 	udiv	r3, r3, r4
    3d44:	1e52      	subs	r2, r2, #1
    3d46:	b2d2      	uxtb	r2, r2
    3d48:	3030      	adds	r0, #48	; 0x30
    3d4a:	54b0      	strb	r0, [r6, r2]
    3d4c:	2a00      	cmp	r2, #0
    3d4e:	d1f3      	bne.n	3d38 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d50:	4630      	mov	r0, r6
    3d52:	47a8      	blx	r5
    3d54:	f3bf 8f4f 	dsb	sy
    3d58:	4806      	ldr	r0, [pc, #24]	; (3d74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3d5a:	6801      	ldr	r1, [r0, #0]
    3d5c:	4a06      	ldr	r2, [pc, #24]	; (3d78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3d5e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3d62:	4311      	orrs	r1, r2
    3d64:	6001      	str	r1, [r0, #0]
    3d66:	f3bf 8f4f 	dsb	sy
    3d6a:	bf00      	nop
    3d6c:	e7fd      	b.n	3d6a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3d6e:	0000      	.short	0x0000
    3d70:	2000005c 	.word	0x2000005c
    3d74:	e000ed0c 	.word	0xe000ed0c
    3d78:	05fa0004 	.word	0x05fa0004

00003d7c <sdc_support_adv>:
    3d7c:	4806      	ldr	r0, [pc, #24]	; (3d98 <sdc_support_adv+0x1c>)
    3d7e:	b510      	push	{r4, lr}
    3d80:	78c1      	ldrb	r1, [r0, #3]
    3d82:	7880      	ldrb	r0, [r0, #2]
    3d84:	4301      	orrs	r1, r0
    3d86:	d002      	beq.n	3d8e <sdc_support_adv+0x12>
    3d88:	f04f 30ff 	mov.w	r0, #4294967295
    3d8c:	bd10      	pop	{r4, pc}
    3d8e:	f006 fa65 	bl	a25c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3d92:	2000      	movs	r0, #0
    3d94:	bd10      	pop	{r4, pc}
    3d96:	0000      	.short	0x0000
    3d98:	2000005c 	.word	0x2000005c

00003d9c <sdc_support_dle>:
    3d9c:	4806      	ldr	r0, [pc, #24]	; (3db8 <sdc_support_dle+0x1c>)
    3d9e:	b510      	push	{r4, lr}
    3da0:	78c1      	ldrb	r1, [r0, #3]
    3da2:	7880      	ldrb	r0, [r0, #2]
    3da4:	4301      	orrs	r1, r0
    3da6:	d002      	beq.n	3dae <sdc_support_dle+0x12>
    3da8:	f04f 30ff 	mov.w	r0, #4294967295
    3dac:	bd10      	pop	{r4, pc}
    3dae:	f005 fff5 	bl	9d9c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3db2:	2000      	movs	r0, #0
    3db4:	bd10      	pop	{r4, pc}
    3db6:	0000      	.short	0x0000
    3db8:	2000005c 	.word	0x2000005c

00003dbc <sdc_support_le_2m_phy>:
    3dbc:	4806      	ldr	r0, [pc, #24]	; (3dd8 <sdc_support_le_2m_phy+0x1c>)
    3dbe:	b510      	push	{r4, lr}
    3dc0:	78c1      	ldrb	r1, [r0, #3]
    3dc2:	7880      	ldrb	r0, [r0, #2]
    3dc4:	4301      	orrs	r1, r0
    3dc6:	d002      	beq.n	3dce <sdc_support_le_2m_phy+0x12>
    3dc8:	f04f 30ff 	mov.w	r0, #4294967295
    3dcc:	bd10      	pop	{r4, pc}
    3dce:	f00b f964 	bl	f09a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3dd2:	2000      	movs	r0, #0
    3dd4:	bd10      	pop	{r4, pc}
    3dd6:	0000      	.short	0x0000
    3dd8:	2000005c 	.word	0x2000005c

00003ddc <sdc_support_slave>:
    3ddc:	4806      	ldr	r0, [pc, #24]	; (3df8 <sdc_support_slave+0x1c>)
    3dde:	b510      	push	{r4, lr}
    3de0:	78c1      	ldrb	r1, [r0, #3]
    3de2:	7880      	ldrb	r0, [r0, #2]
    3de4:	4301      	orrs	r1, r0
    3de6:	d002      	beq.n	3dee <sdc_support_slave+0x12>
    3de8:	f04f 30ff 	mov.w	r0, #4294967295
    3dec:	bd10      	pop	{r4, pc}
    3dee:	f006 fa47 	bl	a280 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3df2:	2000      	movs	r0, #0
    3df4:	bd10      	pop	{r4, pc}
    3df6:	0000      	.short	0x0000
    3df8:	2000005c 	.word	0x2000005c
    3dfc:	00010001 	.word	0x00010001
    3e00:	0002000b 	.word	0x0002000b
    3e04:	0005000a 	.word	0x0005000a
    3e08:	000a0009 	.word	0x000a0009
    3e0c:	00140008 	.word	0x00140008
    3e10:	001e0007 	.word	0x001e0007
    3e14:	00320006 	.word	0x00320006
    3e18:	004b0005 	.word	0x004b0005
    3e1c:	00640004 	.word	0x00640004
    3e20:	00960003 	.word	0x00960003
    3e24:	00fa0002 	.word	0x00fa0002
    3e28:	01f40001 	.word	0x01f40001
    3e2c:	473f0000 	.word	0x473f0000
    3e30:	95818e70 	.word	0x95818e70
    3e34:	d39d864e 	.word	0xd39d864e
    3e38:	f68895a2 	.word	0xf68895a2
    3e3c:	537f0a30 	.word	0x537f0a30
    3e40:	0000fd49 	.word	0x0000fd49

00003e44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e44:	4a05      	ldr	r2, [pc, #20]	; (3e5c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e46:	b510      	push	{r4, lr}
    3e48:	6852      	ldr	r2, [r2, #4]
    3e4a:	b112      	cbz	r2, 3e52 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e50:	4710      	bx	r2
    3e52:	2183      	movs	r1, #131	; 0x83
    3e54:	2004      	movs	r0, #4
    3e56:	f7ff ff5d 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e5a:	0000      	.short	0x0000
    3e5c:	20000f70 	.word	0x20000f70

00003e60 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3e60:	4a05      	ldr	r2, [pc, #20]	; (3e78 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3e62:	b510      	push	{r4, lr}
    3e64:	6812      	ldr	r2, [r2, #0]
    3e66:	b112      	cbz	r2, 3e6e <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e6c:	4710      	bx	r2
    3e6e:	217d      	movs	r1, #125	; 0x7d
    3e70:	2004      	movs	r0, #4
    3e72:	f7ff ff4f 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e76:	0000      	.short	0x0000
    3e78:	20000f70 	.word	0x20000f70

00003e7c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3e7c:	4a05      	ldr	r2, [pc, #20]	; (3e94 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3e7e:	b510      	push	{r4, lr}
    3e80:	6892      	ldr	r2, [r2, #8]
    3e82:	b112      	cbz	r2, 3e8a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e88:	4710      	bx	r2
    3e8a:	2189      	movs	r1, #137	; 0x89
    3e8c:	2004      	movs	r0, #4
    3e8e:	f7ff ff41 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e92:	0000      	.short	0x0000
    3e94:	20000f70 	.word	0x20000f70

00003e98 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3e98:	4805      	ldr	r0, [pc, #20]	; (3eb0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3e9a:	6801      	ldr	r1, [r0, #0]
    3e9c:	b129      	cbz	r1, 3eaa <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e9e:	6841      	ldr	r1, [r0, #4]
    3ea0:	b119      	cbz	r1, 3eaa <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ea2:	6880      	ldr	r0, [r0, #8]
    3ea4:	b108      	cbz	r0, 3eaa <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ea6:	2001      	movs	r0, #1
    3ea8:	4770      	bx	lr
    3eaa:	2000      	movs	r0, #0
    3eac:	4770      	bx	lr
    3eae:	0000      	.short	0x0000
    3eb0:	20000f70 	.word	0x20000f70

00003eb4 <sdc_rand_source_register>:
    3eb4:	4902      	ldr	r1, [pc, #8]	; (3ec0 <sdc_rand_source_register+0xc>)
    3eb6:	c80d      	ldmia	r0, {r0, r2, r3}
    3eb8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3ebc:	2000      	movs	r0, #0
    3ebe:	4770      	bx	lr
    3ec0:	20000f70 	.word	0x20000f70

00003ec4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ec6:	4c12      	ldr	r4, [pc, #72]	; (3f10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3ec8:	2600      	movs	r6, #0
    3eca:	6825      	ldr	r5, [r4, #0]
    3ecc:	e011      	b.n	3ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3ece:	9800      	ldr	r0, [sp, #0]
    3ed0:	2802      	cmp	r0, #2
    3ed2:	d002      	beq.n	3eda <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3ed4:	2803      	cmp	r0, #3
    3ed6:	d10c      	bne.n	3ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3ed8:	e006      	b.n	3ee8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3eda:	6820      	ldr	r0, [r4, #0]
    3edc:	b110      	cbz	r0, 3ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3ede:	2000      	movs	r0, #0
    3ee0:	6026      	str	r6, [r4, #0]
    3ee2:	e005      	b.n	3ef0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3ee4:	2128      	movs	r1, #40	; 0x28
    3ee6:	e00c      	b.n	3f02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3ee8:	6820      	ldr	r0, [r4, #0]
    3eea:	b168      	cbz	r0, 3f08 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3eec:	2001      	movs	r0, #1
    3eee:	6026      	str	r6, [r4, #0]
    3ef0:	47a8      	blx	r5
    3ef2:	4668      	mov	r0, sp
    3ef4:	f000 fcfa 	bl	48ec <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3ef8:	2800      	cmp	r0, #0
    3efa:	d0e8      	beq.n	3ece <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3efc:	2805      	cmp	r0, #5
    3efe:	d005      	beq.n	3f0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3f00:	2135      	movs	r1, #53	; 0x35
    3f02:	2004      	movs	r0, #4
    3f04:	f7ff ff06 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f08:	212d      	movs	r1, #45	; 0x2d
    3f0a:	e7fa      	b.n	3f02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f0e:	0000      	.short	0x0000
    3f10:	20000078 	.word	0x20000078
    3f14:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3f16:	4c21      	ldr	r4, [pc, #132]	; (3f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f18:	4605      	mov	r5, r0
    3f1a:	7820      	ldrb	r0, [r4, #0]
    3f1c:	b140      	cbz	r0, 3f30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3f1e:	78a2      	ldrb	r2, [r4, #2]
    3f20:	1c61      	adds	r1, r4, #1
    3f22:	4628      	mov	r0, r5
    3f24:	1c92      	adds	r2, r2, #2
    3f26:	f007 ff2b 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f2a:	2000      	movs	r0, #0
    3f2c:	7020      	strb	r0, [r4, #0]
    3f2e:	e025      	b.n	3f7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3f30:	481a      	ldr	r0, [pc, #104]	; (3f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f32:	3844      	subs	r0, #68	; 0x44
    3f34:	f005 ff68 	bl	9e08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f38:	2800      	cmp	r0, #0
    3f3a:	d020      	beq.n	3f7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f3c:	4c17      	ldr	r4, [pc, #92]	; (3f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f3e:	3c44      	subs	r4, #68	; 0x44
    3f40:	7820      	ldrb	r0, [r4, #0]
    3f42:	2811      	cmp	r0, #17
    3f44:	d104      	bne.n	3f50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8c>
    3f46:	210a      	movs	r1, #10
    3f48:	203e      	movs	r0, #62	; 0x3e
    3f4a:	f008 f8af 	bl	c0ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f4e:	b118      	cbz	r0, 3f58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f50:	7820      	ldrb	r0, [r4, #0]
    3f52:	2808      	cmp	r0, #8
    3f54:	d006      	beq.n	3f64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa0>
    3f56:	e00a      	b.n	3f6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xaa>
    3f58:	4910      	ldr	r1, [pc, #64]	; (3f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f5a:	4628      	mov	r0, r5
    3f5c:	3944      	subs	r1, #68	; 0x44
    3f5e:	f008 faae 	bl	c4be <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3f62:	e00b      	b.n	3f7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3f64:	2105      	movs	r1, #5
    3f66:	203e      	movs	r0, #62	; 0x3e
    3f68:	f008 f8a0 	bl	c0ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f6c:	b140      	cbz	r0, 3f80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3f6e:	490b      	ldr	r1, [pc, #44]	; (3f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f70:	4628      	mov	r0, r5
    3f72:	3944      	subs	r1, #68	; 0x44
    3f74:	f008 f8f8 	bl	c168 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3f78:	2800      	cmp	r0, #0
    3f7a:	d000      	beq.n	3f7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f7c:	2001      	movs	r0, #1
    3f7e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3f80:	88a0      	ldrh	r0, [r4, #4]
    3f82:	f8ad 0000 	strh.w	r0, [sp]
    3f86:	a901      	add	r1, sp, #4
    3f88:	4668      	mov	r0, sp
    3f8a:	f008 fbb2 	bl	c6f2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3f8e:	2800      	cmp	r0, #0
    3f90:	d0f5      	beq.n	3f7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f92:	2198      	movs	r1, #152	; 0x98
    3f94:	2008      	movs	r0, #8
    3f96:	f7ff febd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f9a:	0000      	.short	0x0000
    3f9c:	20001050 	.word	0x20001050
    3fa0:	b570      	push	{r4, r5, r6, lr}
    3fa2:	780a      	ldrb	r2, [r1, #0]
    3fa4:	7082      	strb	r2, [r0, #2]
    3fa6:	b33a      	cbz	r2, 3ff8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3fa8:	2a01      	cmp	r2, #1
    3faa:	d825      	bhi.n	3ff8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3fac:	2313      	movs	r3, #19
    3fae:	7003      	strb	r3, [r0, #0]
    3fb0:	2300      	movs	r3, #0
    3fb2:	e00a      	b.n	3fca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3fb4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3fb8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3fbc:	78a6      	ldrb	r6, [r4, #2]
    3fbe:	70ee      	strb	r6, [r5, #3]
    3fc0:	8864      	ldrh	r4, [r4, #2]
    3fc2:	0a24      	lsrs	r4, r4, #8
    3fc4:	1c5b      	adds	r3, r3, #1
    3fc6:	712c      	strb	r4, [r5, #4]
    3fc8:	b2db      	uxtb	r3, r3
    3fca:	4293      	cmp	r3, r2
    3fcc:	d3f2      	bcc.n	3fb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    3fce:	2300      	movs	r3, #0
    3fd0:	e00b      	b.n	3fea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    3fd2:	bf00      	nop
    3fd4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3fd8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3fdc:	792e      	ldrb	r6, [r5, #4]
    3fde:	7166      	strb	r6, [r4, #5]
    3fe0:	88ad      	ldrh	r5, [r5, #4]
    3fe2:	0a2d      	lsrs	r5, r5, #8
    3fe4:	1c5b      	adds	r3, r3, #1
    3fe6:	71a5      	strb	r5, [r4, #6]
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	4293      	cmp	r3, r2
    3fec:	d3f2      	bcc.n	3fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    3fee:	2101      	movs	r1, #1
    3ff0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3ff4:	b2c0      	uxtb	r0, r0
    3ff6:	bd70      	pop	{r4, r5, r6, pc}
    3ff8:	2000      	movs	r0, #0
    3ffa:	bd70      	pop	{r4, r5, r6, pc}

00003ffc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3ffc:	2101      	movs	r1, #1
    3ffe:	4a0c      	ldr	r2, [pc, #48]	; (4030 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4000:	2840      	cmp	r0, #64	; 0x40
    4002:	d20c      	bcs.n	401e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4004:	2820      	cmp	r0, #32
    4006:	d803      	bhi.n	4010 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4008:	1e40      	subs	r0, r0, #1
    400a:	4081      	lsls	r1, r0
    400c:	6810      	ldr	r0, [r2, #0]
    400e:	e002      	b.n	4016 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4010:	3821      	subs	r0, #33	; 0x21
    4012:	4081      	lsls	r1, r0
    4014:	6850      	ldr	r0, [r2, #4]
    4016:	4201      	tst	r1, r0
    4018:	d107      	bne.n	402a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    401a:	2000      	movs	r0, #0
    401c:	4770      	bx	lr
    401e:	28ff      	cmp	r0, #255	; 0xff
    4020:	d003      	beq.n	402a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4022:	3840      	subs	r0, #64	; 0x40
    4024:	4081      	lsls	r1, r0
    4026:	6890      	ldr	r0, [r2, #8]
    4028:	e7f5      	b.n	4016 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    402a:	2001      	movs	r0, #1
    402c:	4770      	bx	lr
    402e:	0000      	.short	0x0000
    4030:	2000007c 	.word	0x2000007c

00004034 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4034:	2101      	movs	r1, #1
    4036:	1e40      	subs	r0, r0, #1
    4038:	4081      	lsls	r1, r0
    403a:	4804      	ldr	r0, [pc, #16]	; (404c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    403c:	68c0      	ldr	r0, [r0, #12]
    403e:	4201      	tst	r1, r0
    4040:	d001      	beq.n	4046 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4042:	2001      	movs	r0, #1
    4044:	4770      	bx	lr
    4046:	2000      	movs	r0, #0
    4048:	4770      	bx	lr
    404a:	0000      	.short	0x0000
    404c:	2000007c 	.word	0x2000007c

00004050 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4050:	4901      	ldr	r1, [pc, #4]	; (4058 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4052:	6800      	ldr	r0, [r0, #0]
    4054:	60c8      	str	r0, [r1, #12]
    4056:	4770      	bx	lr
    4058:	2000007c 	.word	0x2000007c

0000405c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    405c:	4904      	ldr	r1, [pc, #16]	; (4070 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    405e:	6802      	ldr	r2, [r0, #0]
    4060:	6840      	ldr	r0, [r0, #4]
    4062:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4066:	600a      	str	r2, [r1, #0]
    4068:	4a02      	ldr	r2, [pc, #8]	; (4074 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    406a:	4310      	orrs	r0, r2
    406c:	6048      	str	r0, [r1, #4]
    406e:	4770      	bx	lr
    4070:	2000007c 	.word	0x2000007c
    4074:	024007f8 	.word	0x024007f8

00004078 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4078:	4901      	ldr	r1, [pc, #4]	; (4080 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    407a:	6800      	ldr	r0, [r0, #0]
    407c:	6088      	str	r0, [r1, #8]
    407e:	4770      	bx	lr
    4080:	2000007c 	.word	0x2000007c

00004084 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4084:	4805      	ldr	r0, [pc, #20]	; (409c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4086:	f04f 31ff 	mov.w	r1, #4294967295
    408a:	6001      	str	r1, [r0, #0]
    408c:	0cc9      	lsrs	r1, r1, #19
    408e:	6041      	str	r1, [r0, #4]
    4090:	2100      	movs	r1, #0
    4092:	6081      	str	r1, [r0, #8]
    4094:	211f      	movs	r1, #31
    4096:	60c1      	str	r1, [r0, #12]
    4098:	4770      	bx	lr
    409a:	0000      	.short	0x0000
    409c:	2000007c 	.word	0x2000007c

000040a0 <sdc_hci_cmd_cb_reset>:
    40a0:	b510      	push	{r4, lr}
    40a2:	f7ff ffef 	bl	4084 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    40a6:	f00a ff6d 	bl	ef84 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    40aa:	4604      	mov	r4, r0
    40ac:	4802      	ldr	r0, [pc, #8]	; (40b8 <sdc_hci_cmd_cb_reset+0x18>)
    40ae:	6800      	ldr	r0, [r0, #0]
    40b0:	b100      	cbz	r0, 40b4 <sdc_hci_cmd_cb_reset+0x14>
    40b2:	4780      	blx	r0
    40b4:	4620      	mov	r0, r4
    40b6:	bd10      	pop	{r4, pc}
    40b8:	2000008c 	.word	0x2000008c

000040bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    40bc:	4901      	ldr	r1, [pc, #4]	; (40c4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    40be:	6008      	str	r0, [r1, #0]
    40c0:	4770      	bx	lr
    40c2:	0000      	.short	0x0000
    40c4:	2000008c 	.word	0x2000008c

000040c8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    40c8:	2102      	movs	r1, #2
    40ca:	8001      	strh	r1, [r0, #0]
    40cc:	8041      	strh	r1, [r0, #2]
    40ce:	2100      	movs	r1, #0
    40d0:	7101      	strb	r1, [r0, #4]
    40d2:	213f      	movs	r1, #63	; 0x3f
    40d4:	7141      	strb	r1, [r0, #5]
    40d6:	f247 0147 	movw	r1, #28743	; 0x7047
    40da:	80c1      	strh	r1, [r0, #6]
    40dc:	4901      	ldr	r1, [pc, #4]	; (40e4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    40de:	6081      	str	r1, [r0, #8]
    40e0:	2000      	movs	r0, #0
    40e2:	4770      	bx	lr
    40e4:	4e95818e 	.word	0x4e95818e

000040e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    40e8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    40ea:	4604      	mov	r4, r0
    40ec:	4669      	mov	r1, sp
    40ee:	f008 fe66 	bl	cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    40f2:	b170      	cbz	r0, 4112 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    40f4:	f240 2112 	movw	r1, #530	; 0x212
    40f8:	e008      	b.n	410c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    40fa:	bf00      	nop
    40fc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4100:	4621      	mov	r1, r4
    4102:	f000 f8a9 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4106:	b120      	cbz	r0, 4112 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4108:	f240 2117 	movw	r1, #535	; 0x217
    410c:	2017      	movs	r0, #23
    410e:	f7ff fe01 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4112:	4668      	mov	r0, sp
    4114:	f000 f850 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4118:	2800      	cmp	r0, #0
    411a:	d0ef      	beq.n	40fc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    411c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4120:	b510      	push	{r4, lr}
    4122:	2802      	cmp	r0, #2
    4124:	d304      	bcc.n	4130 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4126:	f240 116b 	movw	r1, #363	; 0x16b
    412a:	2017      	movs	r0, #23
    412c:	f7ff fdf2 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4130:	4901      	ldr	r1, [pc, #4]	; (4138 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4132:	5c08      	ldrb	r0, [r1, r0]
    4134:	bd10      	pop	{r4, pc}
    4136:	0000      	.short	0x0000
    4138:	20000f7c 	.word	0x20000f7c

0000413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413e:	4605      	mov	r5, r0
    4140:	9000      	str	r0, [sp, #0]
    4142:	4291      	cmp	r1, r2
    4144:	d201      	bcs.n	414a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    4146:	4614      	mov	r4, r2
    4148:	e000      	b.n	414c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    414a:	460c      	mov	r4, r1
    414c:	b155      	cbz	r5, 4164 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    414e:	2700      	movs	r7, #0
    4150:	1ce8      	adds	r0, r5, #3
    4152:	f020 0003 	bic.w	r0, r0, #3
    4156:	42a8      	cmp	r0, r5
    4158:	d006      	beq.n	4168 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    415a:	f240 113f 	movw	r1, #319	; 0x13f
    415e:	2017      	movs	r0, #23
    4160:	f7ff fdd8 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4164:	2701      	movs	r7, #1
    4166:	e7f3      	b.n	4150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4168:	4e12      	ldr	r6, [pc, #72]	; (41b4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    416a:	4668      	mov	r0, sp
    416c:	7031      	strb	r1, [r6, #0]
    416e:	7072      	strb	r2, [r6, #1]
    4170:	4639      	mov	r1, r7
    4172:	f000 f8ed 	bl	4350 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4176:	2000      	movs	r0, #0
    4178:	4603      	mov	r3, r0
    417a:	9900      	ldr	r1, [sp, #0]
    417c:	1cc9      	adds	r1, r1, #3
    417e:	f021 0103 	bic.w	r1, r1, #3
    4182:	9100      	str	r1, [sp, #0]
    4184:	b967      	cbnz	r7, 41a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4186:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    418a:	60d1      	str	r1, [r2, #12]
    418c:	2100      	movs	r1, #0
    418e:	e005      	b.n	419c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4190:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4194:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4198:	1c49      	adds	r1, r1, #1
    419a:	b2c9      	uxtb	r1, r1
    419c:	42a1      	cmp	r1, r4
    419e:	d3f7      	bcc.n	4190 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    41a0:	9900      	ldr	r1, [sp, #0]
    41a2:	1c40      	adds	r0, r0, #1
    41a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    41a8:	b2c0      	uxtb	r0, r0
    41aa:	9100      	str	r1, [sp, #0]
    41ac:	2802      	cmp	r0, #2
    41ae:	d3e4      	bcc.n	417a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    41b0:	1b48      	subs	r0, r1, r5
    41b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b4:	20000f7c 	.word	0x20000f7c

000041b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    41b8:	b570      	push	{r4, r5, r6, lr}
    41ba:	4604      	mov	r4, r0
    41bc:	f008 fe69 	bl	ce92 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    41c0:	b108      	cbz	r0, 41c6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    41c2:	2010      	movs	r0, #16
    41c4:	bd70      	pop	{r4, r5, r6, pc}
    41c6:	7825      	ldrb	r5, [r4, #0]
    41c8:	f000 f8fe 	bl	43c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    41cc:	4602      	mov	r2, r0
    41ce:	480c      	ldr	r0, [pc, #48]	; (4200 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    41d0:	8861      	ldrh	r1, [r4, #2]
    41d2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    41d6:	e00e      	b.n	41f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    41d8:	68c3      	ldr	r3, [r0, #12]
    41da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    41de:	b143      	cbz	r3, 41f2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    41e0:	1c4a      	adds	r2, r1, #1
    41e2:	8062      	strh	r2, [r4, #2]
    41e4:	80a1      	strh	r1, [r4, #4]
    41e6:	68c0      	ldr	r0, [r0, #12]
    41e8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    41ec:	60a0      	str	r0, [r4, #8]
    41ee:	2000      	movs	r0, #0
    41f0:	bd70      	pop	{r4, r5, r6, pc}
    41f2:	1c49      	adds	r1, r1, #1
    41f4:	b289      	uxth	r1, r1
    41f6:	4291      	cmp	r1, r2
    41f8:	d3ee      	bcc.n	41d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    41fa:	8061      	strh	r1, [r4, #2]
    41fc:	2005      	movs	r0, #5
    41fe:	bd70      	pop	{r4, r5, r6, pc}
    4200:	20000f7c 	.word	0x20000f7c

00004204 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4208:	b121      	cbz	r1, 4214 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    420a:	2901      	cmp	r1, #1
    420c:	d002      	beq.n	4214 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    420e:	2000      	movs	r0, #0
    4210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4214:	4c0f      	ldr	r4, [pc, #60]	; (4254 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4216:	2700      	movs	r7, #0
    4218:	463b      	mov	r3, r7
    421a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    421e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4222:	f814 c001 	ldrb.w	ip, [r4, r1]
    4226:	e00a      	b.n	423e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4228:	19dc      	adds	r4, r3, r7
    422a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    422e:	b2a4      	uxth	r4, r4
    4230:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4234:	f1be 0f00 	cmp.w	lr, #0
    4238:	d004      	beq.n	4244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    423a:	1c5b      	adds	r3, r3, #1
    423c:	b29b      	uxth	r3, r3
    423e:	459c      	cmp	ip, r3
    4240:	d8f2      	bhi.n	4228 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4242:	4634      	mov	r4, r6
    4244:	8004      	strh	r4, [r0, #0]
    4246:	4620      	mov	r0, r4
    4248:	42b4      	cmp	r4, r6
    424a:	d0e0      	beq.n	420e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    424c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4250:	f000 b834 	b.w	42bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4254:	20000f7c 	.word	0x20000f7c

00004258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    425c:	4606      	mov	r6, r0
    425e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4262:	460c      	mov	r4, r1
    4264:	f243 0702 	movw	r7, #12290	; 0x3002
    4268:	38ff      	subs	r0, #255	; 0xff
    426a:	d020      	beq.n	42ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    426c:	2c02      	cmp	r4, #2
    426e:	d302      	bcc.n	4276 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4270:	2007      	movs	r0, #7
    4272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4276:	4630      	mov	r0, r6
    4278:	f000 f85a 	bl	4330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    427c:	0005      	movs	r5, r0
    427e:	d016      	beq.n	42ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4280:	480c      	ldr	r0, [pc, #48]	; (42b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4282:	4629      	mov	r1, r5
    4284:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4288:	4630      	mov	r0, r6
    428a:	4790      	blx	r2
    428c:	480a      	ldr	r0, [pc, #40]	; (42b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    428e:	2100      	movs	r1, #0
    4290:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4294:	68f8      	ldr	r0, [r7, #12]
    4296:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    429a:	4620      	mov	r0, r4
    429c:	f000 f88a 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42a0:	4602      	mov	r2, r0
    42a2:	4629      	mov	r1, r5
    42a4:	6878      	ldr	r0, [r7, #4]
    42a6:	f008 fd57 	bl	cd58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    42aa:	2000      	movs	r0, #0
    42ac:	e7e1      	b.n	4272 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    42ae:	4638      	mov	r0, r7
    42b0:	e7df      	b.n	4272 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    42b2:	0000      	.short	0x0000
    42b4:	000043e8 	.word	0x000043e8
    42b8:	20000f7c 	.word	0x20000f7c
    42bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42c0:	4690      	mov	r8, r2
    42c2:	460d      	mov	r5, r1
    42c4:	4607      	mov	r7, r0
    42c6:	f008 fd8b 	bl	cde0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    42ca:	b148      	cbz	r0, 42e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    42cc:	4816      	ldr	r0, [pc, #88]	; (4328 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    42ce:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    42d2:	68f0      	ldr	r0, [r6, #12]
    42d4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    42d8:	b128      	cbz	r0, 42e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    42da:	f240 1109 	movw	r1, #265	; 0x109
    42de:	e015      	b.n	430c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42e0:	f44f 7184 	mov.w	r1, #264	; 0x108
    42e4:	e012      	b.n	430c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42e6:	6870      	ldr	r0, [r6, #4]
    42e8:	2800      	cmp	r0, #0
    42ea:	d01a      	beq.n	4322 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    42ec:	4628      	mov	r0, r5
    42ee:	f000 f861 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42f2:	4601      	mov	r1, r0
    42f4:	6870      	ldr	r0, [r6, #4]
    42f6:	f008 fce1 	bl	ccbc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42fa:	0004      	movs	r4, r0
    42fc:	d010      	beq.n	4320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    42fe:	68f0      	ldr	r0, [r6, #12]
    4300:	2d02      	cmp	r5, #2
    4302:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4306:	d304      	bcc.n	4312 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4308:	f44f 718a 	mov.w	r1, #276	; 0x114
    430c:	2017      	movs	r0, #23
    430e:	f7ff fd01 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4312:	4806      	ldr	r0, [pc, #24]	; (432c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4314:	4642      	mov	r2, r8
    4316:	4621      	mov	r1, r4
    4318:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    431c:	4638      	mov	r0, r7
    431e:	4798      	blx	r3
    4320:	4620      	mov	r0, r4
    4322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4326:	0000      	.short	0x0000
    4328:	20000f7c 	.word	0x20000f7c
    432c:	000043e0 	.word	0x000043e0
    4330:	b570      	push	{r4, r5, r6, lr}
    4332:	460c      	mov	r4, r1
    4334:	4605      	mov	r5, r0
    4336:	f008 fd53 	bl	cde0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    433a:	2800      	cmp	r0, #0
    433c:	d005      	beq.n	434a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    433e:	4803      	ldr	r0, [pc, #12]	; (434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4340:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4344:	68c0      	ldr	r0, [r0, #12]
    4346:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    434a:	bd70      	pop	{r4, r5, r6, pc}
    434c:	20000f7c 	.word	0x20000f7c
    4350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4354:	4e16      	ldr	r6, [pc, #88]	; (43b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4356:	4688      	mov	r8, r1
    4358:	4605      	mov	r5, r0
    435a:	2400      	movs	r4, #0
    435c:	6828      	ldr	r0, [r5, #0]
    435e:	1cc0      	adds	r0, r0, #3
    4360:	f020 0003 	bic.w	r0, r0, #3
    4364:	6028      	str	r0, [r5, #0]
    4366:	4620      	mov	r0, r4
    4368:	f000 f824 	bl	43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    436c:	5d31      	ldrb	r1, [r6, r4]
    436e:	4348      	muls	r0, r1
    4370:	f1b8 0f00 	cmp.w	r8, #0
    4374:	d001      	beq.n	437a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4376:	2200      	movs	r2, #0
    4378:	e000      	b.n	437c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    437a:	682a      	ldr	r2, [r5, #0]
    437c:	4601      	mov	r1, r0
    437e:	9200      	str	r2, [sp, #0]
    4380:	b132      	cbz	r2, 4390 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4382:	2700      	movs	r7, #0
    4384:	ea4f 000d 	mov.w	r0, sp
    4388:	f008 fcc5 	bl	cd16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    438c:	b11f      	cbz	r7, 4396 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    438e:	e006      	b.n	439e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4390:	2701      	movs	r7, #1
    4392:	2000      	movs	r0, #0
    4394:	e7f8      	b.n	4388 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4396:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    439a:	9a00      	ldr	r2, [sp, #0]
    439c:	604a      	str	r2, [r1, #4]
    439e:	6829      	ldr	r1, [r5, #0]
    43a0:	1c64      	adds	r4, r4, #1
    43a2:	4408      	add	r0, r1
    43a4:	b2e4      	uxtb	r4, r4
    43a6:	6028      	str	r0, [r5, #0]
    43a8:	2c02      	cmp	r4, #2
    43aa:	d3d7      	bcc.n	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    43ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43b0:	20000f7c 	.word	0x20000f7c
    43b4:	4903      	ldr	r1, [pc, #12]	; (43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    43b6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    43ba:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    43be:	1cc0      	adds	r0, r0, #3
    43c0:	4008      	ands	r0, r1
    43c2:	4770      	bx	lr
    43c4:	000043dc 	.word	0x000043dc
    43c8:	4803      	ldr	r0, [pc, #12]	; (43d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    43ca:	7801      	ldrb	r1, [r0, #0]
    43cc:	7840      	ldrb	r0, [r0, #1]
    43ce:	4281      	cmp	r1, r0
    43d0:	d300      	bcc.n	43d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    43d2:	4608      	mov	r0, r1
    43d4:	4770      	bx	lr
    43d6:	0000      	.short	0x0000
    43d8:	20000f7c 	.word	0x20000f7c
    43dc:	00e80210 	.word	0x00e80210
    43e0:	0000cdf5 	.word	0x0000cdf5
    43e4:	0000cdf5 	.word	0x0000cdf5
    43e8:	0000e5d1 	.word	0x0000e5d1
    43ec:	0000db73 	.word	0x0000db73

000043f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    43f0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43f4:	4c26      	ldr	r4, [pc, #152]	; (4490 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    43f6:	4680      	mov	r8, r0
    43f8:	b081      	sub	sp, #4
    43fa:	6820      	ldr	r0, [r4, #0]
    43fc:	469a      	mov	sl, r3
    43fe:	4693      	mov	fp, r2
    4400:	b158      	cbz	r0, 441a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4402:	7a02      	ldrb	r2, [r0, #8]
    4404:	4542      	cmp	r2, r8
    4406:	d903      	bls.n	4410 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4408:	6841      	ldr	r1, [r0, #4]
    440a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    440e:	b140      	cbz	r0, 4422 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4410:	f243 0002 	movw	r0, #12290	; 0x3002
    4414:	b005      	add	sp, #20
    4416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    441a:	21a5      	movs	r1, #165	; 0xa5
    441c:	2018      	movs	r0, #24
    441e:	f7ff fc79 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4422:	4619      	mov	r1, r3
    4424:	9802      	ldr	r0, [sp, #8]
    4426:	f008 fcfd 	bl	ce24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    442a:	b286      	uxth	r6, r0
    442c:	4658      	mov	r0, fp
    442e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4430:	f008 fcef 	bl	ce12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4434:	b285      	uxth	r5, r0
    4436:	1970      	adds	r0, r6, r5
    4438:	1d00      	adds	r0, r0, #4
    443a:	b287      	uxth	r7, r0
    443c:	6820      	ldr	r0, [r4, #0]
    443e:	46a1      	mov	r9, r4
    4440:	4639      	mov	r1, r7
    4442:	6800      	ldr	r0, [r0, #0]
    4444:	f008 fc3a 	bl	ccbc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4448:	0004      	movs	r4, r0
    444a:	d01f      	beq.n	448c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    444c:	8067      	strh	r7, [r4, #2]
    444e:	8025      	strh	r5, [r4, #0]
    4450:	4629      	mov	r1, r5
    4452:	1d20      	adds	r0, r4, #4
    4454:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4456:	4607      	mov	r7, r0
    4458:	465a      	mov	r2, fp
    445a:	2301      	movs	r3, #1
    445c:	9500      	str	r5, [sp, #0]
    445e:	f008 fb8c 	bl	cb7a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4462:	8820      	ldrh	r0, [r4, #0]
    4464:	4631      	mov	r1, r6
    4466:	4438      	add	r0, r7
    4468:	2301      	movs	r3, #1
    446a:	9a02      	ldr	r2, [sp, #8]
    446c:	f8cd a000 	str.w	sl, [sp]
    4470:	f008 fb83 	bl	cb7a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4474:	8820      	ldrh	r0, [r4, #0]
    4476:	19c1      	adds	r1, r0, r7
    4478:	4638      	mov	r0, r7
    447a:	f008 fbaf 	bl	cbdc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    447e:	f8d9 0000 	ldr.w	r0, [r9]
    4482:	6841      	ldr	r1, [r0, #4]
    4484:	2000      	movs	r0, #0
    4486:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    448a:	e7c3      	b.n	4414 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    448c:	2004      	movs	r0, #4
    448e:	e7c1      	b.n	4414 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4490:	20000090 	.word	0x20000090

00004494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4494:	b570      	push	{r4, r5, r6, lr}
    4496:	4c14      	ldr	r4, [pc, #80]	; (44e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4498:	6823      	ldr	r3, [r4, #0]
    449a:	b18b      	cbz	r3, 44c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    449c:	7a19      	ldrb	r1, [r3, #8]
    449e:	4281      	cmp	r1, r0
    44a0:	d912      	bls.n	44c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44a2:	685a      	ldr	r2, [r3, #4]
    44a4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    44a8:	b171      	cbz	r1, 44c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44aa:	2500      	movs	r5, #0
    44ac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    44b0:	884a      	ldrh	r2, [r1, #2]
    44b2:	6818      	ldr	r0, [r3, #0]
    44b4:	f008 fc50 	bl	cd58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    44b8:	6821      	ldr	r1, [r4, #0]
    44ba:	2000      	movs	r0, #0
    44bc:	7a0a      	ldrb	r2, [r1, #8]
    44be:	e00c      	b.n	44da <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    44c0:	21c8      	movs	r1, #200	; 0xc8
    44c2:	2018      	movs	r0, #24
    44c4:	f7ff fc26 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44c8:	f243 0002 	movw	r0, #12290	; 0x3002
    44cc:	bd70      	pop	{r4, r5, r6, pc}
    44ce:	684b      	ldr	r3, [r1, #4]
    44d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    44d4:	b933      	cbnz	r3, 44e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    44d6:	1c40      	adds	r0, r0, #1
    44d8:	b2c0      	uxtb	r0, r0
    44da:	4282      	cmp	r2, r0
    44dc:	d8f7      	bhi.n	44ce <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    44de:	6808      	ldr	r0, [r1, #0]
    44e0:	f008 fc2f 	bl	cd42 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    44e4:	2000      	movs	r0, #0
    44e6:	bd70      	pop	{r4, r5, r6, pc}
    44e8:	20000090 	.word	0x20000090

000044ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    44ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f0:	460d      	mov	r5, r1
    44f2:	0004      	movs	r4, r0
    44f4:	4690      	mov	r8, r2
    44f6:	f04f 0600 	mov.w	r6, #0
    44fa:	d009      	beq.n	4510 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    44fc:	2700      	movs	r7, #0
    44fe:	1ce0      	adds	r0, r4, #3
    4500:	f020 0003 	bic.w	r0, r0, #3
    4504:	42a0      	cmp	r0, r4
    4506:	d005      	beq.n	4514 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4508:	2186      	movs	r1, #134	; 0x86
    450a:	2018      	movs	r0, #24
    450c:	f7ff fc02 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4510:	2701      	movs	r7, #1
    4512:	e7f4      	b.n	44fe <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4514:	b1cd      	cbz	r5, 454a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4516:	4611      	mov	r1, r2
    4518:	2000      	movs	r0, #0
    451a:	f008 fbfc 	bl	cd16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    451e:	300c      	adds	r0, #12
    4520:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4524:	b98f      	cbnz	r7, 454a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4526:	4f0a      	ldr	r7, [pc, #40]	; (4550 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4528:	f104 000c 	add.w	r0, r4, #12
    452c:	00aa      	lsls	r2, r5, #2
    452e:	603c      	str	r4, [r7, #0]
    4530:	7225      	strb	r5, [r4, #8]
    4532:	6060      	str	r0, [r4, #4]
    4534:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4538:	6020      	str	r0, [r4, #0]
    453a:	2100      	movs	r1, #0
    453c:	6860      	ldr	r0, [r4, #4]
    453e:	f007 fc99 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4542:	4641      	mov	r1, r8
    4544:	6838      	ldr	r0, [r7, #0]
    4546:	f008 fbe6 	bl	cd16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    454a:	4630      	mov	r0, r6
    454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4550:	20000090 	.word	0x20000090

00004554 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4554:	b570      	push	{r4, r5, r6, lr}
    4556:	4d08      	ldr	r5, [pc, #32]	; (4578 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4558:	6828      	ldr	r0, [r5, #0]
    455a:	2800      	cmp	r0, #0
    455c:	d00a      	beq.n	4574 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    455e:	2400      	movs	r4, #0
    4560:	e004      	b.n	456c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4562:	4620      	mov	r0, r4
    4564:	f7ff ff96 	bl	4494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4568:	1c64      	adds	r4, r4, #1
    456a:	b2e4      	uxtb	r4, r4
    456c:	6828      	ldr	r0, [r5, #0]
    456e:	7a00      	ldrb	r0, [r0, #8]
    4570:	42a0      	cmp	r0, r4
    4572:	d8f6      	bhi.n	4562 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4574:	bd70      	pop	{r4, r5, r6, pc}
    4576:	0000      	.short	0x0000
    4578:	20000090 	.word	0x20000090

0000457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    457c:	4909      	ldr	r1, [pc, #36]	; (45a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    457e:	b510      	push	{r4, lr}
    4580:	4602      	mov	r2, r0
    4582:	6809      	ldr	r1, [r1, #0]
    4584:	2000      	movs	r0, #0
    4586:	b149      	cbz	r1, 459c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4588:	7a0b      	ldrb	r3, [r1, #8]
    458a:	4293      	cmp	r3, r2
    458c:	d905      	bls.n	459a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    458e:	6849      	ldr	r1, [r1, #4]
    4590:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4594:	2900      	cmp	r1, #0
    4596:	d000      	beq.n	459a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4598:	1d08      	adds	r0, r1, #4
    459a:	bd10      	pop	{r4, pc}
    459c:	21ee      	movs	r1, #238	; 0xee
    459e:	2018      	movs	r0, #24
    45a0:	f7ff fbb8 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45a4:	20000090 	.word	0x20000090

000045a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    45a8:	490a      	ldr	r1, [pc, #40]	; (45d4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    45aa:	b510      	push	{r4, lr}
    45ac:	4602      	mov	r2, r0
    45ae:	6809      	ldr	r1, [r1, #0]
    45b0:	2000      	movs	r0, #0
    45b2:	b159      	cbz	r1, 45cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    45b4:	7a0b      	ldrb	r3, [r1, #8]
    45b6:	4293      	cmp	r3, r2
    45b8:	d907      	bls.n	45ca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45ba:	6849      	ldr	r1, [r1, #4]
    45bc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    45c0:	2900      	cmp	r1, #0
    45c2:	d002      	beq.n	45ca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45c4:	f831 0b04 	ldrh.w	r0, [r1], #4
    45c8:	4408      	add	r0, r1
    45ca:	bd10      	pop	{r4, pc}
    45cc:	21fc      	movs	r1, #252	; 0xfc
    45ce:	2018      	movs	r0, #24
    45d0:	f7ff fba0 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45d4:	20000090 	.word	0x20000090

000045d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    45d8:	b570      	push	{r4, r5, r6, lr}
    45da:	4606      	mov	r6, r0
    45dc:	4809      	ldr	r0, [pc, #36]	; (4604 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2c>)
    45de:	460d      	mov	r5, r1
    45e0:	8800      	ldrh	r0, [r0, #0]
    45e2:	b10a      	cbz	r2, 45e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x10>
    45e4:	0844      	lsrs	r4, r0, #1
    45e6:	e000      	b.n	45ea <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x12>
    45e8:	0884      	lsrs	r4, r0, #2
    45ea:	4621      	mov	r1, r4
    45ec:	6828      	ldr	r0, [r5, #0]
    45ee:	f008 fb65 	bl	ccbc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    45f2:	2100      	movs	r1, #0
    45f4:	792a      	ldrb	r2, [r5, #4]
    45f6:	f364 411f 	bfi	r1, r4, #16, #16
    45fa:	1c52      	adds	r2, r2, #1
    45fc:	712a      	strb	r2, [r5, #4]
    45fe:	e9c6 0100 	strd	r0, r1, [r6]
    4602:	bd70      	pop	{r4, r5, r6, pc}
    4604:	20000094 	.word	0x20000094

00004608 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    460c:	4688      	mov	r8, r1
    460e:	0005      	movs	r5, r0
    4610:	d00a      	beq.n	4628 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x20>
    4612:	2700      	movs	r7, #0
    4614:	1ce9      	adds	r1, r5, #3
    4616:	2000      	movs	r0, #0
    4618:	f021 0103 	bic.w	r1, r1, #3
    461c:	42a9      	cmp	r1, r5
    461e:	d005      	beq.n	462c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4620:	212e      	movs	r1, #46	; 0x2e
    4622:	2009      	movs	r0, #9
    4624:	f7ff fb76 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4628:	2701      	movs	r7, #1
    462a:	e7f3      	b.n	4614 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    462c:	491d      	ldr	r1, [pc, #116]	; (46a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    462e:	eb00 06c8 	add.w	r6, r0, r8, lsl #3
    4632:	b907      	cbnz	r7, 4636 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2e>
    4634:	604d      	str	r5, [r1, #4]
    4636:	2a1f      	cmp	r2, #31
    4638:	d804      	bhi.n	4644 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3c>
    463a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    463e:	ea00 0082 	and.w	r0, r0, r2, lsl #2
    4642:	e007      	b.n	4654 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4644:	207c      	movs	r0, #124	; 0x7c
    4646:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
    464a:	d201      	bcs.n	4650 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    464c:	0050      	lsls	r0, r2, #1
    464e:	e000      	b.n	4652 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    4650:	207c      	movs	r0, #124	; 0x7c
    4652:	b280      	uxth	r0, r0
    4654:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4658:	1cc0      	adds	r0, r0, #3
    465a:	4010      	ands	r0, r2
    465c:	2400      	movs	r4, #0
    465e:	8008      	strh	r0, [r1, #0]
    4660:	46a2      	mov	sl, r4
    4662:	4689      	mov	r9, r1
    4664:	e016      	b.n	4694 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    4666:	19a8      	adds	r0, r5, r6
    4668:	9000      	str	r0, [sp, #0]
    466a:	b10f      	cbz	r7, 4670 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    466c:	2000      	movs	r0, #0
    466e:	e000      	b.n	4672 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6a>
    4670:	4668      	mov	r0, sp
    4672:	f8b9 1000 	ldrh.w	r1, [r9]
    4676:	f008 fb4e 	bl	cd16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    467a:	b947      	cbnz	r7, 468e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x86>
    467c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4680:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    4684:	f883 a004 	strb.w	sl, [r3, #4]
    4688:	9a00      	ldr	r2, [sp, #0]
    468a:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
    468e:	1c64      	adds	r4, r4, #1
    4690:	4406      	add	r6, r0
    4692:	b2e4      	uxtb	r4, r4
    4694:	4544      	cmp	r4, r8
    4696:	d3e6      	bcc.n	4666 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5e>
    4698:	1df6      	adds	r6, r6, #7
    469a:	f026 0007 	bic.w	r0, r6, #7
    469e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46a2:	0000      	.short	0x0000
    46a4:	20000094 	.word	0x20000094

000046a8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    46a8:	4906      	ldr	r1, [pc, #24]	; (46c4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x1c>)
    46aa:	b510      	push	{r4, lr}
    46ac:	684a      	ldr	r2, [r1, #4]
    46ae:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
    46b2:	2000      	movs	r0, #0
    46b4:	7120      	strb	r0, [r4, #4]
    46b6:	8809      	ldrh	r1, [r1, #0]
    46b8:	4620      	mov	r0, r4
    46ba:	f008 fb2c 	bl	cd16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    46be:	4620      	mov	r0, r4
    46c0:	bd10      	pop	{r4, pc}
    46c2:	0000      	.short	0x0000
    46c4:	20000094 	.word	0x20000094
    46c8:	4909      	ldr	r1, [pc, #36]	; (46f0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    46ca:	b510      	push	{r4, lr}
    46cc:	4807      	ldr	r0, [pc, #28]	; (46ec <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    46ce:	6008      	str	r0, [r1, #0]
    46d0:	4b08      	ldr	r3, [pc, #32]	; (46f4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x4c>)
    46d2:	2011      	movs	r0, #17
    46d4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    46d8:	2200      	movs	r2, #0
    46da:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    46de:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    46e2:	1c40      	adds	r0, r0, #1
    46e4:	b2c0      	uxtb	r0, r0
    46e6:	2814      	cmp	r0, #20
    46e8:	d3f4      	bcc.n	46d4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2c>
    46ea:	bd10      	pop	{r4, pc}
    46ec:	fffe0000 	.word	0xfffe0000
    46f0:	4001f508 	.word	0x4001f508
    46f4:	4001f000 	.word	0x4001f000
    46f8:	b570      	push	{r4, r5, r6, lr}
    46fa:	2420      	movs	r4, #32
    46fc:	2100      	movs	r1, #0
    46fe:	2301      	movs	r3, #1
    4700:	fa20 f201 	lsr.w	r2, r0, r1
    4704:	07d2      	lsls	r2, r2, #31
    4706:	d020      	beq.n	474a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    4708:	b24a      	sxtb	r2, r1
    470a:	2a00      	cmp	r2, #0
    470c:	db10      	blt.n	4730 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x88>
    470e:	bf00      	nop
    4710:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4714:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4718:	f002 051f 	and.w	r5, r2, #31
    471c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4720:	fa03 f505 	lsl.w	r5, r3, r5
    4724:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4728:	f3bf 8f4f 	dsb	sy
    472c:	f3bf 8f6f 	isb	sy
    4730:	db0b      	blt.n	474a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    4732:	f002 051f 	and.w	r5, r2, #31
    4736:	ea4f 1252 	mov.w	r2, r2, lsr #5
    473a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    473e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4742:	fa03 f505 	lsl.w	r5, r3, r5
    4746:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    474a:	f101 0101 	add.w	r1, r1, #1
    474e:	42a1      	cmp	r1, r4
    4750:	d3d6      	bcc.n	4700 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x58>
    4752:	bd70      	pop	{r4, r5, r6, pc}
    4754:	b570      	push	{r4, r5, r6, lr}
    4756:	0042      	lsls	r2, r0, #1
    4758:	f04f 0100 	mov.w	r1, #0
    475c:	d501      	bpl.n	4762 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xba>
    475e:	4a14      	ldr	r2, [pc, #80]	; (47b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x108>)
    4760:	6011      	str	r1, [r2, #0]
    4762:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4766:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    476a:	429a      	cmp	r2, r3
    476c:	d003      	beq.n	4776 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xce>
    476e:	2164      	movs	r1, #100	; 0x64
    4770:	201b      	movs	r0, #27
    4772:	f7ff facf 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4776:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    477a:	d014      	beq.n	47a6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xfe>
    477c:	4a0d      	ldr	r2, [pc, #52]	; (47b4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x10c>)
    477e:	2001      	movs	r0, #1
    4780:	6050      	str	r0, [r2, #4]
    4782:	1e83      	subs	r3, r0, #2
    4784:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4788:	4a0b      	ldr	r2, [pc, #44]	; (47b8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x110>)
    478a:	6090      	str	r0, [r2, #8]
    478c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4790:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4794:	4c09      	ldr	r4, [pc, #36]	; (47bc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x114>)
    4796:	6021      	str	r1, [r4, #0]
    4798:	1d25      	adds	r5, r4, #4
    479a:	6028      	str	r0, [r5, #0]
    479c:	6090      	str	r0, [r2, #8]
    479e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    47a2:	6021      	str	r1, [r4, #0]
    47a4:	6028      	str	r0, [r5, #0]
    47a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47aa:	f7ff bf8d 	b.w	46c8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    47ae:	0000      	.short	0x0000
    47b0:	4001e504 	.word	0x4001e504
    47b4:	4000e000 	.word	0x4000e000
    47b8:	4000f000 	.word	0x4000f000
    47bc:	4000f500 	.word	0x4000f500

000047c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    47c0:	b570      	push	{r4, r5, r6, lr}
    47c2:	4c0a      	ldr	r4, [pc, #40]	; (47ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    47c4:	460d      	mov	r5, r1
    47c6:	6020      	str	r0, [r4, #0]
    47c8:	f7ff ffc4 	bl	4754 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xac>
    47cc:	6820      	ldr	r0, [r4, #0]
    47ce:	f7ff ff93 	bl	46f8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x50>
    47d2:	f000 f877 	bl	48c4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    47d6:	f7ff ff77 	bl	46c8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    47da:	f008 fb4f 	bl	ce7c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    47de:	4628      	mov	r0, r5
    47e0:	f000 f8aa 	bl	4938 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    47e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47e8:	f000 b8c2 	b.w	4970 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    47ec:	2000009c 	.word	0x2000009c

000047f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    47f0:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    47f4:	4e2f      	ldr	r6, [pc, #188]	; (48b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    47f6:	4683      	mov	fp, r0
    47f8:	6830      	ldr	r0, [r6, #0]
    47fa:	9001      	str	r0, [sp, #4]
    47fc:	2701      	movs	r7, #1
    47fe:	482e      	ldr	r0, [pc, #184]	; (48b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4800:	f007 fa15 	bl	bc2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4804:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 48b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    4808:	b920      	cbnz	r0, 4814 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    480a:	2700      	movs	r7, #0
    480c:	f108 0001 	add.w	r0, r8, #1
    4810:	f007 fa24 	bl	bc5c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4814:	4c29      	ldr	r4, [pc, #164]	; (48bc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4816:	2500      	movs	r5, #0
    4818:	f04f 0903 	mov.w	r9, #3
    481c:	2001      	movs	r0, #1
    481e:	6060      	str	r0, [r4, #4]
    4820:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4824:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4828:	f8c6 b000 	str.w	fp, [r6]
    482c:	6020      	str	r0, [r4, #0]
    482e:	f8df a090 	ldr.w	sl, [pc, #144]	; 48c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4832:	e017      	b.n	4864 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4834:	f8da 0000 	ldr.w	r0, [sl]
    4838:	06c0      	lsls	r0, r0, #27
    483a:	d513      	bpl.n	4864 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    483c:	200e      	movs	r0, #14
    483e:	f008 fb0e 	bl	ce5e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    4842:	f3ef 8010 	mrs	r0, PRIMASK
    4846:	9000      	str	r0, [sp, #0]
    4848:	b672      	cpsid	i
    484a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    484e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4852:	b920      	cbnz	r0, 485e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4854:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4858:	b908      	cbnz	r0, 485e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    485a:	f7ff f8eb 	bl	3a34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    485e:	9800      	ldr	r0, [sp, #0]
    4860:	b900      	cbnz	r0, 4864 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4862:	b662      	cpsie	i
    4864:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4868:	b918      	cbnz	r0, 4872 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    486a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    486e:	2800      	cmp	r0, #0
    4870:	d0e0      	beq.n	4834 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4872:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4876:	2800      	cmp	r0, #0
    4878:	d1d0      	bne.n	481c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    487a:	b137      	cbz	r7, 488a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    487c:	9801      	ldr	r0, [sp, #4]
    487e:	6030      	str	r0, [r6, #0]
    4880:	f108 0001 	add.w	r0, r8, #1
    4884:	f007 f9d3 	bl	bc2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4888:	e011      	b.n	48ae <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    488a:	f108 0001 	add.w	r0, r8, #1
    488e:	f007 f9ce 	bl	bc2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4892:	2800      	cmp	r0, #0
    4894:	d1ba      	bne.n	480c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4896:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    489a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    489e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    48a2:	200e      	movs	r0, #14
    48a4:	f008 fadb 	bl	ce5e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    48a8:	4803      	ldr	r0, [pc, #12]	; (48b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    48aa:	f007 f9d7 	bl	bc5c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    48ae:	2000      	movs	r0, #0
    48b0:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    48b4:	4000e504 	.word	0x4000e504
    48b8:	2000029f 	.word	0x2000029f
    48bc:	4000e000 	.word	0x4000e000
    48c0:	e000ed10 	.word	0xe000ed10

000048c4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    48c4:	b510      	push	{r4, lr}
    48c6:	4808      	ldr	r0, [pc, #32]	; (48e8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    48c8:	f007 f9c4 	bl	bc54 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48cc:	b108      	cbz	r0, 48d2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    48ce:	2124      	movs	r1, #36	; 0x24
    48d0:	e006      	b.n	48e0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    48d2:	4805      	ldr	r0, [pc, #20]	; (48e8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    48d4:	1c40      	adds	r0, r0, #1
    48d6:	f007 f9bd 	bl	bc54 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48da:	2800      	cmp	r0, #0
    48dc:	d003      	beq.n	48e6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    48de:	2128      	movs	r1, #40	; 0x28
    48e0:	201d      	movs	r0, #29
    48e2:	f7ff fa17 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48e6:	bd10      	pop	{r4, pc}
    48e8:	2000029f 	.word	0x2000029f

000048ec <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    48ec:	b570      	push	{r4, r5, r6, lr}
    48ee:	4911      	ldr	r1, [pc, #68]	; (4934 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    48f0:	680a      	ldr	r2, [r1, #0]
    48f2:	b1ea      	cbz	r2, 4930 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    48f4:	2300      	movs	r3, #0
    48f6:	461d      	mov	r5, r3
    48f8:	2401      	movs	r4, #1
    48fa:	684a      	ldr	r2, [r1, #4]
    48fc:	1c52      	adds	r2, r2, #1
    48fe:	604a      	str	r2, [r1, #4]
    4900:	2a09      	cmp	r2, #9
    4902:	d300      	bcc.n	4906 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4904:	604d      	str	r5, [r1, #4]
    4906:	790e      	ldrb	r6, [r1, #4]
    4908:	fa04 f206 	lsl.w	r2, r4, r6
    490c:	680e      	ldr	r6, [r1, #0]
    490e:	4216      	tst	r6, r2
    4910:	d00b      	beq.n	492a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4912:	f3ef 8310 	mrs	r3, PRIMASK
    4916:	b672      	cpsid	i
    4918:	680c      	ldr	r4, [r1, #0]
    491a:	4394      	bics	r4, r2
    491c:	600c      	str	r4, [r1, #0]
    491e:	b903      	cbnz	r3, 4922 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4920:	b662      	cpsie	i
    4922:	6849      	ldr	r1, [r1, #4]
    4924:	6001      	str	r1, [r0, #0]
    4926:	2000      	movs	r0, #0
    4928:	bd70      	pop	{r4, r5, r6, pc}
    492a:	1c5b      	adds	r3, r3, #1
    492c:	2b09      	cmp	r3, #9
    492e:	d3e4      	bcc.n	48fa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4930:	2005      	movs	r0, #5
    4932:	bd70      	pop	{r4, r5, r6, pc}
    4934:	200000a0 	.word	0x200000a0

00004938 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4938:	4802      	ldr	r0, [pc, #8]	; (4944 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    493a:	2100      	movs	r1, #0
    493c:	6001      	str	r1, [r0, #0]
    493e:	6041      	str	r1, [r0, #4]
    4940:	4770      	bx	lr
    4942:	0000      	.short	0x0000
    4944:	200000a0 	.word	0x200000a0

00004948 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4948:	b510      	push	{r4, lr}
    494a:	4c08      	ldr	r4, [pc, #32]	; (496c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    494c:	7861      	ldrb	r1, [r4, #1]
    494e:	b109      	cbz	r1, 4954 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4950:	200f      	movs	r0, #15
    4952:	bd10      	pop	{r4, pc}
    4954:	f7fe fffa 	bl	394c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4958:	7020      	strb	r0, [r4, #0]
    495a:	28ff      	cmp	r0, #255	; 0xff
    495c:	d001      	beq.n	4962 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    495e:	2000      	movs	r0, #0
    4960:	bd10      	pop	{r4, pc}
    4962:	2176      	movs	r1, #118	; 0x76
    4964:	201f      	movs	r0, #31
    4966:	f7ff f9d5 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    496a:	0000      	.short	0x0000
    496c:	200000a8 	.word	0x200000a8

00004970 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4970:	4901      	ldr	r1, [pc, #4]	; (4978 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4972:	2000      	movs	r0, #0
    4974:	7048      	strb	r0, [r1, #1]
    4976:	4770      	bx	lr
    4978:	200000a8 	.word	0x200000a8

0000497c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    497c:	4806      	ldr	r0, [pc, #24]	; (4998 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    497e:	4a07      	ldr	r2, [pc, #28]	; (499c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4980:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4982:	8852      	ldrh	r2, [r2, #2]
    4984:	4291      	cmp	r1, r2
    4986:	d104      	bne.n	4992 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4988:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    498c:	b108      	cbz	r0, 4992 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    498e:	2000      	movs	r0, #0
    4990:	4770      	bx	lr
    4992:	2001      	movs	r0, #1
    4994:	4770      	bx	lr
    4996:	0000      	.short	0x0000
    4998:	20001152 	.word	0x20001152
    499c:	2000028c 	.word	0x2000028c

000049a0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    49a0:	4901      	ldr	r1, [pc, #4]	; (49a8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    49a2:	8048      	strh	r0, [r1, #2]
    49a4:	4770      	bx	lr
    49a6:	0000      	.short	0x0000
    49a8:	2000028c 	.word	0x2000028c

000049ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    49ac:	4808      	ldr	r0, [pc, #32]	; (49d0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    49ae:	4a09      	ldr	r2, [pc, #36]	; (49d4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    49b0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    49b2:	8852      	ldrh	r2, [r2, #2]
    49b4:	4291      	cmp	r1, r2
    49b6:	d109      	bne.n	49cc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    49b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    49bc:	8481      	strh	r1, [r0, #36]	; 0x24
    49be:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    49c2:	b119      	cbz	r1, 49cc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    49c4:	2100      	movs	r1, #0
    49c6:	7001      	strb	r1, [r0, #0]
    49c8:	2001      	movs	r0, #1
    49ca:	4770      	bx	lr
    49cc:	2000      	movs	r0, #0
    49ce:	4770      	bx	lr
    49d0:	20001152 	.word	0x20001152
    49d4:	2000028c 	.word	0x2000028c

000049d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    49d8:	4807      	ldr	r0, [pc, #28]	; (49f8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    49da:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    49de:	2901      	cmp	r1, #1
    49e0:	d007      	beq.n	49f2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    49e2:	2101      	movs	r1, #1
    49e4:	7001      	strb	r1, [r0, #0]
    49e6:	4805      	ldr	r0, [pc, #20]	; (49fc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    49e8:	4903      	ldr	r1, [pc, #12]	; (49f8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    49ea:	8800      	ldrh	r0, [r0, #0]
    49ec:	8488      	strh	r0, [r1, #36]	; 0x24
    49ee:	2001      	movs	r0, #1
    49f0:	4770      	bx	lr
    49f2:	2000      	movs	r0, #0
    49f4:	4770      	bx	lr
    49f6:	0000      	.short	0x0000
    49f8:	20001152 	.word	0x20001152
    49fc:	2000028c 	.word	0x2000028c

00004a00 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4a00:	4906      	ldr	r1, [pc, #24]	; (4a1c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4a02:	4b07      	ldr	r3, [pc, #28]	; (4a20 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4a04:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a06:	885b      	ldrh	r3, [r3, #2]
    4a08:	429a      	cmp	r2, r3
    4a0a:	d105      	bne.n	4a18 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4a0c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a10:	b112      	cbz	r2, 4a18 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4a12:	6001      	str	r1, [r0, #0]
    4a14:	2001      	movs	r0, #1
    4a16:	4770      	bx	lr
    4a18:	2000      	movs	r0, #0
    4a1a:	4770      	bx	lr
    4a1c:	20001152 	.word	0x20001152
    4a20:	2000028c 	.word	0x2000028c

00004a24 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4a24:	4909      	ldr	r1, [pc, #36]	; (4a4c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a26:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a28:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4a2c:	3bff      	subs	r3, #255	; 0xff
    4a2e:	d002      	beq.n	4a36 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4a30:	2100      	movs	r1, #0
    4a32:	6001      	str	r1, [r0, #0]
    4a34:	e007      	b.n	4a46 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a36:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a3a:	4904      	ldr	r1, [pc, #16]	; (4a4c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a3c:	2a01      	cmp	r2, #1
    4a3e:	d002      	beq.n	4a46 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a40:	6001      	str	r1, [r0, #0]
    4a42:	2001      	movs	r0, #1
    4a44:	4770      	bx	lr
    4a46:	2000      	movs	r0, #0
    4a48:	4770      	bx	lr
    4a4a:	0000      	.short	0x0000
    4a4c:	20001152 	.word	0x20001152

00004a50 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4a50:	4901      	ldr	r1, [pc, #4]	; (4a58 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4a52:	8008      	strh	r0, [r1, #0]
    4a54:	4770      	bx	lr
    4a56:	0000      	.short	0x0000
    4a58:	2000028c 	.word	0x2000028c

00004a5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4a5c:	4905      	ldr	r1, [pc, #20]	; (4a74 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4a5e:	2000      	movs	r0, #0
    4a60:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a64:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a68:	8488      	strh	r0, [r1, #36]	; 0x24
    4a6a:	4903      	ldr	r1, [pc, #12]	; (4a78 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4a6c:	8008      	strh	r0, [r1, #0]
    4a6e:	8048      	strh	r0, [r1, #2]
    4a70:	4770      	bx	lr
    4a72:	0000      	.short	0x0000
    4a74:	20001152 	.word	0x20001152
    4a78:	2000028c 	.word	0x2000028c
    4a7c:	4905      	ldr	r1, [pc, #20]	; (4a94 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4a7e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a80:	4282      	cmp	r2, r0
    4a82:	d105      	bne.n	4a90 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4a84:	2000      	movs	r0, #0
    4a86:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a8e:	8488      	strh	r0, [r1, #36]	; 0x24
    4a90:	4770      	bx	lr
    4a92:	0000      	.short	0x0000
    4a94:	20001152 	.word	0x20001152

00004a98 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a98:	4a0a      	ldr	r2, [pc, #40]	; (4ac4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a9a:	b110      	cbz	r0, 4aa2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a9c:	2801      	cmp	r0, #1
    4a9e:	d007      	beq.n	4ab0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4aa0:	e00e      	b.n	4ac0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4aa2:	7850      	ldrb	r0, [r2, #1]
    4aa4:	b160      	cbz	r0, 4ac0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4aa6:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4aaa:	6008      	str	r0, [r1, #0]
    4aac:	88d0      	ldrh	r0, [r2, #6]
    4aae:	e004      	b.n	4aba <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4ab0:	7810      	ldrb	r0, [r2, #0]
    4ab2:	b128      	cbz	r0, 4ac0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4ab4:	6890      	ldr	r0, [r2, #8]
    4ab6:	6008      	str	r0, [r1, #0]
    4ab8:	8990      	ldrh	r0, [r2, #12]
    4aba:	8088      	strh	r0, [r1, #4]
    4abc:	2001      	movs	r0, #1
    4abe:	4770      	bx	lr
    4ac0:	2000      	movs	r0, #0
    4ac2:	4770      	bx	lr
    4ac4:	200002a1 	.word	0x200002a1

00004ac8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4ac8:	4a08      	ldr	r2, [pc, #32]	; (4aec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4aca:	2301      	movs	r3, #1
    4acc:	b138      	cbz	r0, 4ade <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4ace:	2801      	cmp	r0, #1
    4ad0:	d104      	bne.n	4adc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4ad2:	7013      	strb	r3, [r2, #0]
    4ad4:	6808      	ldr	r0, [r1, #0]
    4ad6:	6090      	str	r0, [r2, #8]
    4ad8:	8888      	ldrh	r0, [r1, #4]
    4ada:	8190      	strh	r0, [r2, #12]
    4adc:	4770      	bx	lr
    4ade:	7053      	strb	r3, [r2, #1]
    4ae0:	6808      	ldr	r0, [r1, #0]
    4ae2:	f8c2 0002 	str.w	r0, [r2, #2]
    4ae6:	8888      	ldrh	r0, [r1, #4]
    4ae8:	80d0      	strh	r0, [r2, #6]
    4aea:	4770      	bx	lr
    4aec:	200002a1 	.word	0x200002a1

00004af0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4af0:	4906      	ldr	r1, [pc, #24]	; (4b0c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4af2:	b110      	cbz	r0, 4afa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4af4:	2801      	cmp	r0, #1
    4af6:	d002      	beq.n	4afe <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4af8:	e005      	b.n	4b06 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4afa:	7848      	ldrb	r0, [r1, #1]
    4afc:	e000      	b.n	4b00 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4afe:	7808      	ldrb	r0, [r1, #0]
    4b00:	b108      	cbz	r0, 4b06 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4b02:	2001      	movs	r0, #1
    4b04:	4770      	bx	lr
    4b06:	2000      	movs	r0, #0
    4b08:	4770      	bx	lr
    4b0a:	0000      	.short	0x0000
    4b0c:	200002a1 	.word	0x200002a1

00004b10 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4b10:	4901      	ldr	r1, [pc, #4]	; (4b18 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4b12:	7448      	strb	r0, [r1, #17]
    4b14:	4770      	bx	lr
    4b16:	0000      	.short	0x0000
    4b18:	20000b82 	.word	0x20000b82

00004b1c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4b1c:	4801      	ldr	r0, [pc, #4]	; (4b24 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4b1e:	78c0      	ldrb	r0, [r0, #3]
    4b20:	4770      	bx	lr
    4b22:	0000      	.short	0x0000
    4b24:	200000c4 	.word	0x200000c4

00004b28 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4b28:	4801      	ldr	r0, [pc, #4]	; (4b30 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4b2a:	7900      	ldrb	r0, [r0, #4]
    4b2c:	4770      	bx	lr
    4b2e:	0000      	.short	0x0000
    4b30:	200000c4 	.word	0x200000c4

00004b34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4b34:	b578      	push	{r3, r4, r5, r6, lr}
    4b36:	4913      	ldr	r1, [pc, #76]	; (4b84 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4b38:	7c4a      	ldrb	r2, [r1, #17]
    4b3a:	b30a      	cbz	r2, 4b80 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b3c:	7c0a      	ldrb	r2, [r1, #16]
    4b3e:	f88d 2000 	strb.w	r2, [sp]
    4b42:	9a00      	ldr	r2, [sp, #0]
    4b44:	9200      	str	r2, [sp, #0]
    4b46:	f89d 2000 	ldrb.w	r2, [sp]
    4b4a:	b1ca      	cbz	r2, 4b80 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b4c:	2300      	movs	r3, #0
    4b4e:	f101 0210 	add.w	r2, r1, #16
    4b52:	241a      	movs	r4, #26
    4b54:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4b58:	7c0e      	ldrb	r6, [r1, #16]
    4b5a:	f88d 6000 	strb.w	r6, [sp]
    4b5e:	9e00      	ldr	r6, [sp, #0]
    4b60:	9600      	str	r6, [sp, #0]
    4b62:	f89d 6000 	ldrb.w	r6, [sp]
    4b66:	b14e      	cbz	r6, 4b7c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4b68:	7013      	strb	r3, [r2, #0]
    4b6a:	7043      	strb	r3, [r0, #1]
    4b6c:	7004      	strb	r4, [r0, #0]
    4b6e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4b72:	6046      	str	r6, [r0, #4]
    4b74:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4b78:	6086      	str	r6, [r0, #8]
    4b7a:	e7ed      	b.n	4b58 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4b7c:	2001      	movs	r0, #1
    4b7e:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b80:	2000      	movs	r0, #0
    4b82:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b84:	20000b82 	.word	0x20000b82

00004b88 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4b88:	b510      	push	{r4, lr}
    4b8a:	4604      	mov	r4, r0
    4b8c:	f000 f946 	bl	4e1c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4b90:	b118      	cbz	r0, 4b9a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4b92:	21bd      	movs	r1, #189	; 0xbd
    4b94:	2027      	movs	r0, #39	; 0x27
    4b96:	f7ff f8bd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b9a:	4803      	ldr	r0, [pc, #12]	; (4ba8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4b9c:	2101      	movs	r1, #1
    4b9e:	f008 fd4a 	bl	d636 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4ba2:	4802      	ldr	r0, [pc, #8]	; (4bac <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4ba4:	62c4      	str	r4, [r0, #44]	; 0x2c
    4ba6:	bd10      	pop	{r4, pc}
    4ba8:	20000b60 	.word	0x20000b60
    4bac:	200000c4 	.word	0x200000c4

00004bb0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4bb0:	4901      	ldr	r1, [pc, #4]	; (4bb8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4bb2:	2001      	movs	r0, #1
    4bb4:	7188      	strb	r0, [r1, #6]
    4bb6:	4770      	bx	lr
    4bb8:	200000c4 	.word	0x200000c4

00004bbc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4bc0:	4d57      	ldr	r5, [pc, #348]	; (4d20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x164>)
    4bc2:	9c08      	ldr	r4, [sp, #32]
    4bc4:	782e      	ldrb	r6, [r5, #0]
    4bc6:	2e00      	cmp	r6, #0
    4bc8:	d16e      	bne.n	4ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bca:	2a00      	cmp	r2, #0
    4bcc:	d06c      	beq.n	4ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d06a      	beq.n	4ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bd2:	2c00      	cmp	r4, #0
    4bd4:	d068      	beq.n	4ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bd6:	f105 0614 	add.w	r6, r5, #20
    4bda:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4bde:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4be2:	2700      	movs	r7, #0
    4be4:	71af      	strb	r7, [r5, #6]
    4be6:	716f      	strb	r7, [r5, #5]
    4be8:	70ef      	strb	r7, [r5, #3]
    4bea:	70af      	strb	r7, [r5, #2]
    4bec:	712f      	strb	r7, [r5, #4]
    4bee:	81af      	strh	r7, [r5, #12]
    4bf0:	81ef      	strh	r7, [r5, #14]
    4bf2:	f000 f94b 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4bf6:	4606      	mov	r6, r0
    4bf8:	f000 f942 	bl	4e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4bfc:	4604      	mov	r4, r0
    4bfe:	f005 ffd1 	bl	aba4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4c02:	f005 fca9 	bl	a558 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4c06:	f994 0066 	ldrsb.w	r0, [r4, #102]	; 0x66
    4c0a:	f006 f853 	bl	acb4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4c0e:	f104 0010 	add.w	r0, r4, #16
    4c12:	f006 f93d 	bl	ae90 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4c16:	f104 000c 	add.w	r0, r4, #12
    4c1a:	f006 f92d 	bl	ae78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4c1e:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4c22:	f006 f94f 	bl	aec4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4c26:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4c2a:	6840      	ldr	r0, [r0, #4]
    4c2c:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4c30:	b108      	cbz	r0, 4c36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x7a>
    4c32:	f005 ff05 	bl	aa40 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4c36:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4c3a:	2001      	movs	r0, #1
    4c3c:	f005 fe30 	bl	a8a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4c40:	2800      	cmp	r0, #0
    4c42:	d066      	beq.n	4d12 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4c44:	46ba      	mov	sl, r7
    4c46:	2001      	movs	r0, #1
    4c48:	f005 ff3a 	bl	aac0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4c4c:	4835      	ldr	r0, [pc, #212]	; (4d24 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x168>)
    4c4e:	f005 fea3 	bl	a998 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4c52:	8820      	ldrh	r0, [r4, #0]
    4c54:	f7ff fca8 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c58:	6328      	str	r0, [r5, #48]	; 0x30
    4c5a:	8820      	ldrh	r0, [r4, #0]
    4c5c:	f7ff fc8e 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c60:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4c64:	6368      	str	r0, [r5, #52]	; 0x34
    4c66:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4d28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    4c6a:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    4c6c:	f109 0808 	add.w	r8, r9, #8
    4c70:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    4c74:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4c76:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4c7a:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4c7c:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4c80:	f000 f976 	bl	4f70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4c84:	4601      	mov	r1, r0
    4c86:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4c88:	f008 fa58 	bl	d13c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c8c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    4c8e:	4281      	cmp	r1, r0
    4c90:	d200      	bcs.n	4c94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd8>
    4c92:	4608      	mov	r0, r1
    4c94:	7228      	strb	r0, [r5, #8]
    4c96:	46a8      	mov	r8, r5
    4c98:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4c9c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    4c9e:	7cf7      	ldrb	r7, [r6, #19]
    4ca0:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
    4ca2:	2908      	cmp	r1, #8
    4ca4:	d104      	bne.n	4cb0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf4>
    4ca6:	e002      	b.n	4cae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf2>
    4ca8:	f44f 718a 	mov.w	r1, #276	; 0x114
    4cac:	e035      	b.n	4d1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4cae:	2104      	movs	r1, #4
    4cb0:	f008 fa44 	bl	d13c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4cb4:	b90f      	cbnz	r7, 4cba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4cb6:	1d00      	adds	r0, r0, #4
    4cb8:	b280      	uxth	r0, r0
    4cba:	4285      	cmp	r5, r0
    4cbc:	d200      	bcs.n	4cc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x104>
    4cbe:	4628      	mov	r0, r5
    4cc0:	b2c0      	uxtb	r0, r0
    4cc2:	f888 0009 	strb.w	r0, [r8, #9]
    4cc6:	7cf2      	ldrb	r2, [r6, #19]
    4cc8:	b102      	cbz	r2, 4ccc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4cca:	2204      	movs	r2, #4
    4ccc:	4410      	add	r0, r2
    4cce:	b2c0      	uxtb	r0, r0
    4cd0:	f888 0007 	strb.w	r0, [r8, #7]
    4cd4:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    4cd8:	1d09      	adds	r1, r1, #4
    4cda:	4281      	cmp	r1, r0
    4cdc:	d202      	bcs.n	4ce4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4cde:	f240 11a1 	movw	r1, #417	; 0x1a1
    4ce2:	e01a      	b.n	4d1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4ce4:	4655      	mov	r5, sl
    4ce6:	2001      	movs	r0, #1
    4ce8:	f000 fb46 	bl	5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    4cec:	480f      	ldr	r0, [pc, #60]	; (4d2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>)
    4cee:	6800      	ldr	r0, [r0, #0]
    4cf0:	2803      	cmp	r0, #3
    4cf2:	d010      	beq.n	4d16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4cf4:	280b      	cmp	r0, #11
    4cf6:	d00e      	beq.n	4d16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4cf8:	4648      	mov	r0, r9
    4cfa:	f840 5f52 	str.w	r5, [r0, #82]!
    4cfe:	6045      	str	r5, [r0, #4]
    4d00:	4809      	ldr	r0, [pc, #36]	; (4d28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>)
    4d02:	88b1      	ldrh	r1, [r6, #4]
    4d04:	3052      	adds	r0, #82	; 0x52
    4d06:	8041      	strh	r1, [r0, #2]
    4d08:	8821      	ldrh	r1, [r4, #0]
    4d0a:	8001      	strh	r1, [r0, #0]
    4d0c:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4d10:	7101      	strb	r1, [r0, #4]
    4d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d16:	f240 11b1 	movw	r1, #433	; 0x1b1
    4d1a:	2027      	movs	r0, #39	; 0x27
    4d1c:	f7fe fffa 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d20:	200000c4 	.word	0x200000c4
    4d24:	000055a4 	.word	0x000055a4
    4d28:	20000b30 	.word	0x20000b30
    4d2c:	40001550 	.word	0x40001550

00004d30 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d34:	4605      	mov	r5, r0
    4d36:	f000 f8a9 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d3a:	4e33      	ldr	r6, [pc, #204]	; (4e08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4d3c:	4604      	mov	r4, r0
    4d3e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4d40:	7847      	ldrb	r7, [r0, #1]
    4d42:	b10d      	cbz	r5, 4d48 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4d44:	2d01      	cmp	r5, #1
    4d46:	d103      	bne.n	4d50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4d48:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4d4a:	f007 f987 	bl	c05c <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4d4e:	7070      	strb	r0, [r6, #1]
    4d50:	7870      	ldrb	r0, [r6, #1]
    4d52:	f04f 0800 	mov.w	r8, #0
    4d56:	f04f 0901 	mov.w	r9, #1
    4d5a:	b150      	cbz	r0, 4d72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4d5c:	2801      	cmp	r0, #1
    4d5e:	d01a      	beq.n	4d96 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4d60:	2802      	cmp	r0, #2
    4d62:	d034      	beq.n	4dce <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4d64:	2803      	cmp	r0, #3
    4d66:	d048      	beq.n	4dfa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4d68:	f240 31f1 	movw	r1, #1009	; 0x3f1
    4d6c:	2027      	movs	r0, #39	; 0x27
    4d6e:	f7fe ffd1 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d72:	2d01      	cmp	r5, #1
    4d74:	d032      	beq.n	4ddc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d76:	f000 f8e7 	bl	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4d7a:	4639      	mov	r1, r7
    4d7c:	2201      	movs	r2, #1
    4d7e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d80:	f007 fd90 	bl	c8a4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d84:	e028      	b.n	4dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4d86:	bf00      	nop
    4d88:	f884 8008 	strb.w	r8, [r4, #8]
    4d8c:	e031      	b.n	4df2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d8e:	bf00      	nop
    4d90:	f884 9008 	strb.w	r9, [r4, #8]
    4d94:	e02d      	b.n	4df2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d96:	2d01      	cmp	r5, #1
    4d98:	d008      	beq.n	4dac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4d9a:	f000 f8d5 	bl	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4d9e:	4639      	mov	r1, r7
    4da0:	2200      	movs	r2, #0
    4da2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4da4:	f007 fd7e 	bl	c8a4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4da8:	2d02      	cmp	r5, #2
    4daa:	d00b      	beq.n	4dc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dac:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4db0:	1c40      	adds	r0, r0, #1
    4db2:	f141 0100 	adc.w	r1, r1, #0
    4db6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4dba:	7a20      	ldrb	r0, [r4, #8]
    4dbc:	2801      	cmp	r0, #1
    4dbe:	d003      	beq.n	4dc8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4dc0:	f884 9008 	strb.w	r9, [r4, #8]
    4dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dc8:	f884 8008 	strb.w	r8, [r4, #8]
    4dcc:	e7fa      	b.n	4dc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dce:	2d01      	cmp	r5, #1
    4dd0:	d004      	beq.n	4ddc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4dd2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4dd4:	f007 ff6c 	bl	ccb0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4dd8:	2d02      	cmp	r5, #2
    4dda:	d0f3      	beq.n	4dc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4ddc:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4de0:	1c40      	adds	r0, r0, #1
    4de2:	f141 0100 	adc.w	r1, r1, #0
    4de6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4dea:	7a20      	ldrb	r0, [r4, #8]
    4dec:	2801      	cmp	r0, #1
    4dee:	d1cf      	bne.n	4d90 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4df0:	e7ca      	b.n	4d88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4df2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4df6:	f004 bee9 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4dfa:	2d01      	cmp	r5, #1
    4dfc:	d0e2      	beq.n	4dc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dfe:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e00:	f007 ff56 	bl	ccb0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4e04:	e7f5      	b.n	4df2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4e06:	0000      	.short	0x0000
    4e08:	200000c4 	.word	0x200000c4

00004e0c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4e0c:	4802      	ldr	r0, [pc, #8]	; (4e18 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4e0e:	89c0      	ldrh	r0, [r0, #14]
    4e10:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4e14:	4770      	bx	lr
    4e16:	0000      	.short	0x0000
    4e18:	200000c4 	.word	0x200000c4

00004e1c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4e1c:	4804      	ldr	r0, [pc, #16]	; (4e30 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4e1e:	7800      	ldrb	r0, [r0, #0]
    4e20:	b108      	cbz	r0, 4e26 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4e22:	200c      	movs	r0, #12
    4e24:	4770      	bx	lr
    4e26:	4903      	ldr	r1, [pc, #12]	; (4e34 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4e28:	2000      	movs	r0, #0
    4e2a:	7448      	strb	r0, [r1, #17]
    4e2c:	4770      	bx	lr
    4e2e:	0000      	.short	0x0000
    4e30:	200000c4 	.word	0x200000c4
    4e34:	20000b82 	.word	0x20000b82

00004e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4e38:	480c      	ldr	r0, [pc, #48]	; (4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4e3a:	b510      	push	{r4, lr}
    4e3c:	7801      	ldrb	r1, [r0, #0]
    4e3e:	b149      	cbz	r1, 4e54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4e40:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4e44:	7800      	ldrb	r0, [r0, #0]
    4e46:	2802      	cmp	r0, #2
    4e48:	d008      	beq.n	4e5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4e4a:	f240 11cd 	movw	r1, #461	; 0x1cd
    4e4e:	2027      	movs	r0, #39	; 0x27
    4e50:	f7fe ff60 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e58:	f000 b9a6 	b.w	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    4e5c:	6848      	ldr	r0, [r1, #4]
    4e5e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e66:	f005 bd9f 	b.w	a9a8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4e6a:	0000      	.short	0x0000
    4e6c:	200000c4 	.word	0x200000c4
    4e70:	4a02      	ldr	r2, [pc, #8]	; (4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4e72:	8993      	ldrh	r3, [r2, #12]
    4e74:	4303      	orrs	r3, r0
    4e76:	8193      	strh	r3, [r2, #12]
    4e78:	6952      	ldr	r2, [r2, #20]
    4e7a:	4710      	bx	r2
    4e7c:	200000c4 	.word	0x200000c4
    4e80:	4801      	ldr	r0, [pc, #4]	; (4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4e82:	6840      	ldr	r0, [r0, #4]
    4e84:	4770      	bx	lr
    4e86:	0000      	.short	0x0000
    4e88:	200000fc 	.word	0x200000fc
    4e8c:	4801      	ldr	r0, [pc, #4]	; (4e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e8e:	6840      	ldr	r0, [r0, #4]
    4e90:	3068      	adds	r0, #104	; 0x68
    4e92:	4770      	bx	lr
    4e94:	200000fc 	.word	0x200000fc
    4e98:	4a01      	ldr	r2, [pc, #4]	; (4ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4e9a:	2100      	movs	r1, #0
    4e9c:	6952      	ldr	r2, [r2, #20]
    4e9e:	4710      	bx	r2
    4ea0:	200000c4 	.word	0x200000c4
    4ea4:	b570      	push	{r4, r5, r6, lr}
    4ea6:	f7ff fff1 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4eaa:	4604      	mov	r4, r0
    4eac:	f7ff ffe8 	bl	4e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4eb0:	4605      	mov	r5, r0
    4eb2:	4621      	mov	r1, r4
    4eb4:	f008 f9c5 	bl	d242 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4eb8:	7fa9      	ldrb	r1, [r5, #30]
    4eba:	2901      	cmp	r1, #1
    4ebc:	d114      	bne.n	4ee8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4ebe:	2800      	cmp	r0, #0
    4ec0:	d012      	beq.n	4ee8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4ec2:	480a      	ldr	r0, [pc, #40]	; (4eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    4ec4:	6842      	ldr	r2, [r0, #4]
    4ec6:	8828      	ldrh	r0, [r5, #0]
    4ec8:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    4ecc:	7a60      	ldrb	r0, [r4, #9]
    4ece:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    4ed2:	7aa0      	ldrb	r0, [r4, #10]
    4ed4:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    4ed8:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    4edc:	2001      	movs	r0, #1
    4ede:	7010      	strb	r0, [r2, #0]
    4ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4ee4:	f004 be72 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4ee8:	bd70      	pop	{r4, r5, r6, pc}
    4eea:	0000      	.short	0x0000
    4eec:	200000fc 	.word	0x200000fc
    4ef0:	b570      	push	{r4, r5, r6, lr}
    4ef2:	4605      	mov	r5, r0
    4ef4:	2901      	cmp	r1, #1
    4ef6:	d818      	bhi.n	4f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4ef8:	4c12      	ldr	r4, [pc, #72]	; (4f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    4efa:	69a1      	ldr	r1, [r4, #24]
    4efc:	4788      	blx	r1
    4efe:	b1a0      	cbz	r0, 4f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f00:	7960      	ldrb	r0, [r4, #5]
    4f02:	b990      	cbnz	r0, 4f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f04:	b9e5      	cbnz	r5, 4f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4f06:	f104 0010 	add.w	r0, r4, #16
    4f0a:	7801      	ldrb	r1, [r0, #0]
    4f0c:	06c8      	lsls	r0, r1, #27
    4f0e:	d405      	bmi.n	4f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f12:	7800      	ldrb	r0, [r0, #0]
    4f14:	06c0      	lsls	r0, r0, #27
    4f16:	d401      	bmi.n	4f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f18:	2001      	movs	r0, #1
    4f1a:	e000      	b.n	4f1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    4f1c:	2000      	movs	r0, #0
    4f1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f20:	b92a      	cbnz	r2, 4f2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f22:	8962      	ldrh	r2, [r4, #10]
    4f24:	b11a      	cbz	r2, 4f2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f26:	06c9      	lsls	r1, r1, #27
    4f28:	d401      	bmi.n	4f2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f2a:	2001      	movs	r0, #1
    4f2c:	bd70      	pop	{r4, r5, r6, pc}
    4f2e:	89a1      	ldrh	r1, [r4, #12]
    4f30:	078a      	lsls	r2, r1, #30
    4f32:	d503      	bpl.n	4f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    4f34:	6a22      	ldr	r2, [r4, #32]
    4f36:	78d2      	ldrb	r2, [r2, #3]
    4f38:	2a02      	cmp	r2, #2
    4f3a:	d001      	beq.n	4f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4f3c:	4308      	orrs	r0, r1
    4f3e:	d1f4      	bne.n	4f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f40:	2000      	movs	r0, #0
    4f42:	bd70      	pop	{r4, r5, r6, pc}
    4f44:	200000c4 	.word	0x200000c4
    4f48:	b510      	push	{r4, lr}
    4f4a:	4c08      	ldr	r4, [pc, #32]	; (4f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    4f4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f4e:	b138      	cbz	r0, 4f60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4f50:	8962      	ldrh	r2, [r4, #10]
    4f52:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4f54:	1cd2      	adds	r2, r2, #3
    4f56:	f006 ff13 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f5c:	6260      	str	r0, [r4, #36]	; 0x24
    4f5e:	bd10      	pop	{r4, pc}
    4f60:	f44f 6187 	mov.w	r1, #1080	; 0x438
    4f64:	2027      	movs	r0, #39	; 0x27
    4f66:	f7fe fed5 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f6a:	0000      	.short	0x0000
    4f6c:	200000c4 	.word	0x200000c4
    4f70:	b510      	push	{r4, lr}
    4f72:	f7ff ff85 	bl	4e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4f76:	4604      	mov	r4, r0
    4f78:	f7ff ff88 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f7c:	4601      	mov	r1, r0
    4f7e:	7b42      	ldrb	r2, [r0, #13]
    4f80:	4815      	ldr	r0, [pc, #84]	; (4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    4f82:	2a24      	cmp	r2, #36	; 0x24
    4f84:	d00e      	beq.n	4fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f86:	7b89      	ldrb	r1, [r1, #14]
    4f88:	2924      	cmp	r1, #36	; 0x24
    4f8a:	d00b      	beq.n	4fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f8c:	2a1f      	cmp	r2, #31
    4f8e:	d00d      	beq.n	4fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4f90:	2a20      	cmp	r2, #32
    4f92:	d00b      	beq.n	4fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4f94:	2922      	cmp	r1, #34	; 0x22
    4f96:	d00f      	beq.n	4fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4f98:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4f9c:	2804      	cmp	r0, #4
    4f9e:	d100      	bne.n	4fa2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    4fa0:	2008      	movs	r0, #8
    4fa2:	bd10      	pop	{r4, pc}
    4fa4:	6840      	ldr	r0, [r0, #4]
    4fa6:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    4faa:	e00e      	b.n	4fca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    4fac:	2922      	cmp	r1, #34	; 0x22
    4fae:	d003      	beq.n	4fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4fb0:	6840      	ldr	r0, [r0, #4]
    4fb2:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    4fb6:	e005      	b.n	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4fb8:	6841      	ldr	r1, [r0, #4]
    4fba:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    4fbe:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    4fc2:	4008      	ands	r0, r1
    4fc4:	f007 ffb6 	bl	cf34 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4fc8:	4601      	mov	r1, r0
    4fca:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fd2:	f007 bfc7 	b.w	cf64 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4fd6:	0000      	.short	0x0000
    4fd8:	200000fc 	.word	0x200000fc
    4fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4fe0:	4688      	mov	r8, r1
    4fe2:	4606      	mov	r6, r0
    4fe4:	f7ff ff52 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4fe8:	4c4a      	ldr	r4, [pc, #296]	; (5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>)
    4fea:	2700      	movs	r7, #0
    4fec:	4605      	mov	r5, r0
    4fee:	f88d 7000 	strb.w	r7, [sp]
    4ff2:	7820      	ldrb	r0, [r4, #0]
    4ff4:	2802      	cmp	r0, #2
    4ff6:	d004      	beq.n	5002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    4ff8:	f240 4189 	movw	r1, #1161	; 0x489
    4ffc:	2027      	movs	r0, #39	; 0x27
    4ffe:	f7fe fe89 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5002:	7ba0      	ldrb	r0, [r4, #14]
    5004:	0640      	lsls	r0, r0, #25
    5006:	d406      	bmi.n	5016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    5008:	2040      	movs	r0, #64	; 0x40
    500a:	f7ff ff45 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    500e:	89e0      	ldrh	r0, [r4, #14]
    5010:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5014:	81e0      	strh	r0, [r4, #14]
    5016:	7ce8      	ldrb	r0, [r5, #19]
    5018:	b3c6      	cbz	r6, 508c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    501a:	f005 fb15 	bl	a648 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    501e:	f005 faf9 	bl	a614 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5022:	b968      	cbnz	r0, 5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5024:	7ce8      	ldrb	r0, [r5, #19]
    5026:	b158      	cbz	r0, 5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5028:	6a60      	ldr	r0, [r4, #36]	; 0x24
    502a:	7841      	ldrb	r1, [r0, #1]
    502c:	b141      	cbz	r1, 5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    502e:	7800      	ldrb	r0, [r0, #0]
    5030:	7a29      	ldrb	r1, [r5, #8]
    5032:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5036:	4288      	cmp	r0, r1
    5038:	d102      	bne.n	5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    503a:	2001      	movs	r0, #1
    503c:	70a0      	strb	r0, [r4, #2]
    503e:	e04a      	b.n	50d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5040:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5042:	7841      	ldrb	r1, [r0, #1]
    5044:	8161      	strh	r1, [r4, #10]
    5046:	b121      	cbz	r1, 5052 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5048:	6b60      	ldr	r0, [r4, #52]	; 0x34
    504a:	f007 fdfe 	bl	cc4a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    504e:	62a0      	str	r0, [r4, #40]	; 0x28
    5050:	e000      	b.n	5054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5052:	62a7      	str	r7, [r4, #40]	; 0x28
    5054:	89e0      	ldrh	r0, [r4, #14]
    5056:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    505a:	81e0      	strh	r0, [r4, #14]
    505c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    505e:	79e9      	ldrb	r1, [r5, #7]
    5060:	7800      	ldrb	r0, [r0, #0]
    5062:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5066:	4288      	cmp	r0, r1
    5068:	d005      	beq.n	5076 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    506a:	f000 f937 	bl	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    506e:	89e0      	ldrh	r0, [r4, #14]
    5070:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5074:	81e0      	strh	r0, [r4, #14]
    5076:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5078:	7a29      	ldrb	r1, [r5, #8]
    507a:	7800      	ldrb	r0, [r0, #0]
    507c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5080:	4288      	cmp	r0, r1
    5082:	d10e      	bne.n	50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5084:	4668      	mov	r0, sp
    5086:	f000 f8e5 	bl	5254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>
    508a:	e00a      	b.n	50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    508c:	e7ff      	b.n	508e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    508e:	b108      	cbz	r0, 5094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5090:	f005 fad4 	bl	a63c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5094:	78e0      	ldrb	r0, [r4, #3]
    5096:	1c40      	adds	r0, r0, #1
    5098:	70e0      	strb	r0, [r4, #3]
    509a:	89e0      	ldrh	r0, [r4, #14]
    509c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    50a0:	81e0      	strh	r0, [r4, #14]
    50a2:	4d1d      	ldr	r5, [pc, #116]	; (5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    50a4:	f1b8 0f00 	cmp.w	r8, #0
    50a8:	d104      	bne.n	50b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    50aa:	78e1      	ldrb	r1, [r4, #3]
    50ac:	2001      	movs	r0, #1
    50ae:	f7ff ff1f 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    50b2:	b1a0      	cbz	r0, 50de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a6>
    50b4:	f89d 0000 	ldrb.w	r0, [sp]
    50b8:	b110      	cbz	r0, 50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    50ba:	2000      	movs	r0, #0
    50bc:	f7ff fe38 	bl	4d30 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50c0:	b136      	cbz	r6, 50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    50c2:	70e7      	strb	r7, [r4, #3]
    50c4:	7968      	ldrb	r0, [r5, #5]
    50c6:	1c40      	adds	r0, r0, #1
    50c8:	7168      	strb	r0, [r5, #5]
    50ca:	f7ff feeb 	bl	4ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    50ce:	e002      	b.n	50d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    50d0:	79a8      	ldrb	r0, [r5, #6]
    50d2:	1c40      	adds	r0, r0, #1
    50d4:	71a8      	strb	r0, [r5, #6]
    50d6:	f000 f867 	bl	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    50da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50de:	f89d 0000 	ldrb.w	r0, [sp]
    50e2:	b110      	cbz	r0, 50ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b2>
    50e4:	2001      	movs	r0, #1
    50e6:	f7ff fe23 	bl	4d30 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50ea:	2000      	movs	r0, #0
    50ec:	f000 f98e 	bl	540c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    50f0:	f89d 0000 	ldrb.w	r0, [sp]
    50f4:	b110      	cbz	r0, 50fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    50f6:	2002      	movs	r0, #2
    50f8:	f7ff fe1a 	bl	4d30 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50fc:	b136      	cbz	r6, 510c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    50fe:	70e7      	strb	r7, [r4, #3]
    5100:	7968      	ldrb	r0, [r5, #5]
    5102:	1c40      	adds	r0, r0, #1
    5104:	7168      	strb	r0, [r5, #5]
    5106:	f7ff fecd 	bl	4ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    510a:	e7e6      	b.n	50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    510c:	79a8      	ldrb	r0, [r5, #6]
    510e:	1c40      	adds	r0, r0, #1
    5110:	71a8      	strb	r0, [r5, #6]
    5112:	e7e2      	b.n	50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    5114:	200000c4 	.word	0x200000c4
    5118:	20000b82 	.word	0x20000b82
    511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5120:	460e      	mov	r6, r1
    5122:	4680      	mov	r8, r0
    5124:	f7ff feb2 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5128:	4d1e      	ldr	r5, [pc, #120]	; (51a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>)
    512a:	4604      	mov	r4, r0
    512c:	7828      	ldrb	r0, [r5, #0]
    512e:	2801      	cmp	r0, #1
    5130:	d004      	beq.n	513c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    5132:	f240 4147 	movw	r1, #1095	; 0x447
    5136:	2027      	movs	r0, #39	; 0x27
    5138:	f7fe fdec 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    513c:	7860      	ldrb	r0, [r4, #1]
    513e:	2701      	movs	r7, #1
    5140:	b130      	cbz	r0, 5150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    5142:	2000      	movs	r0, #0
    5144:	7060      	strb	r0, [r4, #1]
    5146:	4601      	mov	r1, r0
    5148:	2004      	movs	r0, #4
    514a:	f7ff fe91 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    514e:	70e7      	strb	r7, [r4, #3]
    5150:	6a29      	ldr	r1, [r5, #32]
    5152:	7808      	ldrb	r0, [r1, #0]
    5154:	43c0      	mvns	r0, r0
    5156:	0780      	lsls	r0, r0, #30
    5158:	d109      	bne.n	516e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    515a:	79a0      	ldrb	r0, [r4, #6]
    515c:	b9d0      	cbnz	r0, 5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    515e:	2002      	movs	r0, #2
    5160:	f7ff fe86 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5164:	6a28      	ldr	r0, [r5, #32]
    5166:	7800      	ldrb	r0, [r0, #0]
    5168:	43c0      	mvns	r0, r0
    516a:	0780      	lsls	r0, r0, #30
    516c:	d012      	beq.n	5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    516e:	6a28      	ldr	r0, [r5, #32]
    5170:	7840      	ldrb	r0, [r0, #1]
    5172:	b110      	cbz	r0, 517a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    5174:	2002      	movs	r0, #2
    5176:	71a0      	strb	r0, [r4, #6]
    5178:	e000      	b.n	517c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    517a:	71a7      	strb	r7, [r4, #6]
    517c:	ea36 0608 	bics.w	r6, r6, r8
    5180:	d004      	beq.n	518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5182:	2100      	movs	r1, #0
    5184:	4608      	mov	r0, r1
    5186:	f7ff feb3 	bl	4ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    518a:	b128      	cbz	r0, 5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    518c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5190:	f000 b80a 	b.w	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5194:	2003      	movs	r0, #3
    5196:	e7ee      	b.n	5176 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    5198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    519c:	2000      	movs	r0, #0
    519e:	f000 b8eb 	b.w	5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    51a2:	0000      	.short	0x0000
    51a4:	200000c4 	.word	0x200000c4
    51a8:	b510      	push	{r4, lr}
    51aa:	f005 fae5 	bl	a778 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    51ae:	f005 f9d3 	bl	a558 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    51b2:	4c0d      	ldr	r4, [pc, #52]	; (51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    51b4:	89e0      	ldrh	r0, [r4, #14]
    51b6:	f7ff fe6f 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    51ba:	69e2      	ldr	r2, [r4, #28]
    51bc:	7961      	ldrb	r1, [r4, #5]
    51be:	78a0      	ldrb	r0, [r4, #2]
    51c0:	4790      	blx	r2
    51c2:	480a      	ldr	r0, [pc, #40]	; (51ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    51c4:	7c40      	ldrb	r0, [r0, #17]
    51c6:	b158      	cbz	r0, 51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>
    51c8:	4808      	ldr	r0, [pc, #32]	; (51ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    51ca:	3852      	subs	r0, #82	; 0x52
    51cc:	f850 1f52 	ldr.w	r1, [r0, #82]!
    51d0:	6081      	str	r1, [r0, #8]
    51d2:	6841      	ldr	r1, [r0, #4]
    51d4:	60c1      	str	r1, [r0, #12]
    51d6:	4805      	ldr	r0, [pc, #20]	; (51ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    51d8:	2101      	movs	r1, #1
    51da:	7401      	strb	r1, [r0, #16]
    51dc:	f004 fcf6 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    51e0:	2000      	movs	r0, #0
    51e2:	7020      	strb	r0, [r4, #0]
    51e4:	bd10      	pop	{r4, pc}
    51e6:	0000      	.short	0x0000
    51e8:	200000c4 	.word	0x200000c4
    51ec:	20000b82 	.word	0x20000b82
    51f0:	4808      	ldr	r0, [pc, #32]	; (5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3dc>)
    51f2:	b510      	push	{r4, lr}
    51f4:	7800      	ldrb	r0, [r0, #0]
    51f6:	2802      	cmp	r0, #2
    51f8:	d004      	beq.n	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    51fa:	f240 2101 	movw	r1, #513	; 0x201
    51fe:	2027      	movs	r0, #39	; 0x27
    5200:	f7fe fd88 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5204:	4904      	ldr	r1, [pc, #16]	; (5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    5206:	2001      	movs	r0, #1
    5208:	71c8      	strb	r0, [r1, #7]
    520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    520e:	f7ff bfcb 	b.w	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5212:	0000      	.short	0x0000
    5214:	200000c4 	.word	0x200000c4
    5218:	20000b82 	.word	0x20000b82
    521c:	b430      	push	{r4, r5}
    521e:	4b0c      	ldr	r3, [pc, #48]	; (5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5220:	b942      	cbnz	r2, 5234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5222:	79da      	ldrb	r2, [r3, #7]
    5224:	2aff      	cmp	r2, #255	; 0xff
    5226:	d105      	bne.n	5234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5228:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    522c:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    5230:	42a2      	cmp	r2, r4
    5232:	d00b      	beq.n	524c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5234:	b131      	cbz	r1, 5244 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5236:	79da      	ldrb	r2, [r3, #7]
    5238:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
    523c:	bc30      	pop	{r4, r5}
    523e:	4610      	mov	r0, r2
    5240:	f005 be2e 	b.w	aea0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5244:	22ff      	movs	r2, #255	; 0xff
    5246:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    524a:	e7f7      	b.n	523c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    524c:	bc30      	pop	{r4, r5}
    524e:	4770      	bx	lr
    5250:	200000c4 	.word	0x200000c4
    5254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5258:	4607      	mov	r7, r0
    525a:	f7ff fe17 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    525e:	4604      	mov	r4, r0
    5260:	481d      	ldr	r0, [pc, #116]	; (52d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>)
    5262:	2600      	movs	r6, #0
    5264:	2501      	movs	r5, #1
    5266:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5268:	780a      	ldrb	r2, [r1, #0]
    526a:	f002 0203 	and.w	r2, r2, #3
    526e:	2a01      	cmp	r2, #1
    5270:	d015      	beq.n	529e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5272:	2a02      	cmp	r2, #2
    5274:	d013      	beq.n	529e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5276:	2a03      	cmp	r2, #3
    5278:	d003      	beq.n	5282 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44a>
    527a:	7941      	ldrb	r1, [r0, #5]
    527c:	f041 0104 	orr.w	r1, r1, #4
    5280:	e024      	b.n	52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>
    5282:	7065      	strb	r5, [r4, #1]
    5284:	89c2      	ldrh	r2, [r0, #14]
    5286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    528a:	81c2      	strh	r2, [r0, #14]
    528c:	2001      	movs	r0, #1
    528e:	f7ff fdef 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5292:	e01d      	b.n	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5294:	7226      	strb	r6, [r4, #8]
    5296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    529a:	7225      	strb	r5, [r4, #8]
    529c:	e7fb      	b.n	5296 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    529e:	7849      	ldrb	r1, [r1, #1]
    52a0:	b1b1      	cbz	r1, 52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    52a2:	89c2      	ldrh	r2, [r0, #14]
    52a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    52a8:	81c2      	strh	r2, [r0, #14]
    52aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
    52ac:	2a00      	cmp	r2, #0
    52ae:	d0f2      	beq.n	5296 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    52b0:	29fb      	cmp	r1, #251	; 0xfb
    52b2:	d808      	bhi.n	52c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    52b4:	7980      	ldrb	r0, [r0, #6]
    52b6:	b120      	cbz	r0, 52c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48a>
    52b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    52bc:	2020      	movs	r0, #32
    52be:	f7ff bdeb 	b.w	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    52c2:	703d      	strb	r5, [r7, #0]
    52c4:	e7e7      	b.n	5296 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    52c6:	7941      	ldrb	r1, [r0, #5]
    52c8:	f041 0110 	orr.w	r1, r1, #16
    52cc:	7141      	strb	r1, [r0, #5]
    52ce:	e7e2      	b.n	5296 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    52d0:	7a20      	ldrb	r0, [r4, #8]
    52d2:	2801      	cmp	r0, #1
    52d4:	d1e1      	bne.n	529a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x462>
    52d6:	e7dd      	b.n	5294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    52d8:	200000c4 	.word	0x200000c4
    52dc:	b570      	push	{r4, r5, r6, lr}
    52de:	f7ff fdd5 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    52e2:	4604      	mov	r4, r0
    52e4:	7980      	ldrb	r0, [r0, #6]
    52e6:	2800      	cmp	r0, #0
    52e8:	d02e      	beq.n	5348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    52ea:	2802      	cmp	r0, #2
    52ec:	d10d      	bne.n	530a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    52ee:	481c      	ldr	r0, [pc, #112]	; (5360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>)
    52f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
    52f2:	f007 fab0 	bl	c856 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    52f6:	b340      	cbz	r0, 534a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x512>
    52f8:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    52fc:	1c40      	adds	r0, r0, #1
    52fe:	f141 0100 	adc.w	r1, r1, #0
    5302:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5306:	f004 fc61 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    530a:	2500      	movs	r5, #0
    530c:	71a5      	strb	r5, [r4, #6]
    530e:	78e0      	ldrb	r0, [r4, #3]
    5310:	b120      	cbz	r0, 531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    5312:	70e5      	strb	r5, [r4, #3]
    5314:	2100      	movs	r1, #0
    5316:	2010      	movs	r0, #16
    5318:	f7ff fdaa 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    531c:	78a0      	ldrb	r0, [r4, #2]
    531e:	b170      	cbz	r0, 533e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    5320:	70a5      	strb	r5, [r4, #2]
    5322:	f7ff fb43 	bl	49ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5326:	b198      	cbz	r0, 5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>
    5328:	2100      	movs	r1, #0
    532a:	2008      	movs	r0, #8
    532c:	f7ff fda0 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5330:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5334:	1c40      	adds	r0, r0, #1
    5336:	f141 0100 	adc.w	r1, r1, #0
    533a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    533e:	79e0      	ldrb	r0, [r4, #7]
    5340:	2801      	cmp	r0, #1
    5342:	d00a      	beq.n	535a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    5344:	2001      	movs	r0, #1
    5346:	71e0      	strb	r0, [r4, #7]
    5348:	bd70      	pop	{r4, r5, r6, pc}
    534a:	f44f 7163 	mov.w	r1, #908	; 0x38c
    534e:	e001      	b.n	5354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5350:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    5354:	2027      	movs	r0, #39	; 0x27
    5356:	f7fe fcdd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    535a:	71e5      	strb	r5, [r4, #7]
    535c:	bd70      	pop	{r4, r5, r6, pc}
    535e:	0000      	.short	0x0000
    5360:	200000c4 	.word	0x200000c4
    5364:	4803      	ldr	r0, [pc, #12]	; (5374 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    5366:	7800      	ldrb	r0, [r0, #0]
    5368:	2800      	cmp	r0, #0
    536a:	d001      	beq.n	5370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x538>
    536c:	f7ff bf1c 	b.w	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5370:	4770      	bx	lr
    5372:	0000      	.short	0x0000
    5374:	200000c4 	.word	0x200000c4
    5378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    537c:	4681      	mov	r9, r0
    537e:	f7ff fd7f 	bl	4e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5382:	4606      	mov	r6, r0
    5384:	f7ff fd82 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5388:	4c1d      	ldr	r4, [pc, #116]	; (5400 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>)
    538a:	4605      	mov	r5, r0
    538c:	464a      	mov	r2, r9
    538e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5390:	6260      	str	r0, [r4, #36]	; 0x24
    5392:	2101      	movs	r1, #1
    5394:	4630      	mov	r0, r6
    5396:	f7ff ff41 	bl	521c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    539a:	7ce8      	ldrb	r0, [r5, #19]
    539c:	f04f 0800 	mov.w	r8, #0
    53a0:	b1c0      	cbz	r0, 53d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    53a2:	7a67      	ldrb	r7, [r4, #9]
    53a4:	4817      	ldr	r0, [pc, #92]	; (5404 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    53a6:	f005 fc8b 	bl	acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    53aa:	4817      	ldr	r0, [pc, #92]	; (5408 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    53ac:	2101      	movs	r1, #1
    53ae:	7601      	strb	r1, [r0, #24]
    53b0:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    53b4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    53b8:	4a12      	ldr	r2, [pc, #72]	; (5404 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    53ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    53bc:	f005 f8bc 	bl	a538 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    53c0:	f896 0063 	ldrb.w	r0, [r6, #99]	; 0x63
    53c4:	f007 fdc0 	bl	cf48 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    53c8:	4602      	mov	r2, r0
    53ca:	4639      	mov	r1, r7
    53cc:	2001      	movs	r0, #1
    53ce:	f005 f8e1 	bl	a594 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    53d2:	e004      	b.n	53de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a6>
    53d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    53d6:	f005 fc73 	bl	acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    53da:	f005 f8bd 	bl	a558 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53de:	f1b9 0f00 	cmp.w	r9, #0
    53e2:	d102      	bne.n	53ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    53e4:	4640      	mov	r0, r8
    53e6:	f005 fb03 	bl	a9f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    53ea:	2100      	movs	r1, #0
    53ec:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    53f0:	2201      	movs	r2, #1
    53f2:	4608      	mov	r0, r1
    53f4:	f005 fcee 	bl	add4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    53f8:	2002      	movs	r0, #2
    53fa:	7020      	strb	r0, [r4, #0]
    53fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5400:	200000c4 	.word	0x200000c4
    5404:	20000a30 	.word	0x20000a30
    5408:	20000b38 	.word	0x20000b38
    540c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5410:	4604      	mov	r4, r0
    5412:	f7ff fd3b 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5416:	4605      	mov	r5, r0
    5418:	f7ff fd32 	bl	4e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    541c:	4606      	mov	r6, r0
    541e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 5598 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5422:	4622      	mov	r2, r4
    5424:	2100      	movs	r1, #0
    5426:	f7ff fef9 	bl	521c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    542a:	79a8      	ldrb	r0, [r5, #6]
    542c:	2701      	movs	r7, #1
    542e:	f04f 0800 	mov.w	r8, #0
    5432:	f1a9 0420 	sub.w	r4, r9, #32
    5436:	b140      	cbz	r0, 544a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x612>
    5438:	2801      	cmp	r0, #1
    543a:	d01f      	beq.n	547c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    543c:	2802      	cmp	r0, #2
    543e:	d030      	beq.n	54a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    5440:	2803      	cmp	r0, #3
    5442:	d03c      	beq.n	54be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x686>
    5444:	f240 219e 	movw	r1, #670	; 0x29e
    5448:	e058      	b.n	54fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    544a:	7a20      	ldrb	r0, [r4, #8]
    544c:	2148      	movs	r1, #72	; 0x48
    544e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5452:	5388      	strh	r0, [r1, r6]
    5454:	4648      	mov	r0, r9
    5456:	f7ff fad3 	bl	4a00 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    545a:	b128      	cbz	r0, 5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    545c:	2080      	movs	r0, #128	; 0x80
    545e:	6a21      	ldr	r1, [r4, #32]
    5460:	f7ff fd06 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5464:	70af      	strb	r7, [r5, #2]
    5466:	e02e      	b.n	54c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5468:	466a      	mov	r2, sp
    546a:	a901      	add	r1, sp, #4
    546c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    546e:	f007 fd83 	bl	cf78 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5472:	6220      	str	r0, [r4, #32]
    5474:	b110      	cbz	r0, 547c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5476:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    547a:	b111      	cbz	r1, 5482 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64a>
    547c:	4847      	ldr	r0, [pc, #284]	; (559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    547e:	6220      	str	r0, [r4, #32]
    5480:	e021      	b.n	54c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5482:	f89d 1000 	ldrb.w	r1, [sp]
    5486:	b931      	cbnz	r1, 5496 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5488:	f8a0 8000 	strh.w	r8, [r0]
    548c:	f880 8002 	strb.w	r8, [r0, #2]
    5490:	2101      	movs	r1, #1
    5492:	f008 f8d0 	bl	d636 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5496:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    549a:	6a20      	ldr	r0, [r4, #32]
    549c:	f008 f88f 	bl	d5be <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    54a0:	e011      	b.n	54c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    54a2:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    54a6:	f8ad 0004 	strh.w	r0, [sp, #4]
    54aa:	466a      	mov	r2, sp
    54ac:	a901      	add	r1, sp, #4
    54ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54b0:	f007 fd62 	bl	cf78 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    54b4:	6220      	str	r0, [r4, #32]
    54b6:	b930      	cbnz	r0, 54c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    54b8:	f240 218f 	movw	r1, #655	; 0x28f
    54bc:	e01e      	b.n	54fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    54be:	4648      	mov	r0, r9
    54c0:	f7ff fa9e 	bl	4a00 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    54c4:	b1c0      	cbz	r0, 54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    54c6:	6a20      	ldr	r0, [r4, #32]
    54c8:	2308      	movs	r3, #8
    54ca:	7801      	ldrb	r1, [r0, #0]
    54cc:	f021 0108 	bic.w	r1, r1, #8
    54d0:	7001      	strb	r1, [r0, #0]
    54d2:	79ea      	ldrb	r2, [r5, #7]
    54d4:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    54d8:	4311      	orrs	r1, r2
    54da:	f021 0104 	bic.w	r1, r1, #4
    54de:	7001      	strb	r1, [r0, #0]
    54e0:	7a2a      	ldrb	r2, [r5, #8]
    54e2:	2304      	movs	r3, #4
    54e4:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    54e8:	4311      	orrs	r1, r2
    54ea:	f021 0110 	bic.w	r1, r1, #16
    54ee:	7001      	strb	r1, [r0, #0]
    54f0:	43c9      	mvns	r1, r1
    54f2:	0789      	lsls	r1, r1, #30
    54f4:	d005      	beq.n	5502 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    54f6:	e007      	b.n	5508 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    54f8:	f44f 7126 	mov.w	r1, #664	; 0x298
    54fc:	2027      	movs	r0, #39	; 0x27
    54fe:	f7fe fc09 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5502:	78c0      	ldrb	r0, [r0, #3]
    5504:	2802      	cmp	r0, #2
    5506:	d00f      	beq.n	5528 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5508:	6b20      	ldr	r0, [r4, #48]	; 0x30
    550a:	f007 fac9 	bl	caa0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    550e:	b108      	cbz	r0, 5514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    5510:	2101      	movs	r1, #1
    5512:	e00a      	b.n	552a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    5514:	6a20      	ldr	r0, [r4, #32]
    5516:	7800      	ldrb	r0, [r0, #0]
    5518:	43c0      	mvns	r0, r0
    551a:	0780      	lsls	r0, r0, #30
    551c:	d004      	beq.n	5528 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    551e:	f7ff fa2d 	bl	497c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5522:	f080 0101 	eor.w	r1, r0, #1
    5526:	e000      	b.n	552a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    5528:	2100      	movs	r1, #0
    552a:	6a20      	ldr	r0, [r4, #32]
    552c:	7802      	ldrb	r2, [r0, #0]
    552e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5532:	7001      	strb	r1, [r0, #0]
    5534:	7ca9      	ldrb	r1, [r5, #18]
    5536:	b1d1      	cbz	r1, 556e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    5538:	7841      	ldrb	r1, [r0, #1]
    553a:	b1c1      	cbz	r1, 556e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    553c:	4818      	ldr	r0, [pc, #96]	; (55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    553e:	f005 fbbf 	bl	acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5542:	4816      	ldr	r0, [pc, #88]	; (559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5544:	3828      	subs	r0, #40	; 0x28
    5546:	f880 8018 	strb.w	r8, [r0, #24]
    554a:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    554e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5552:	4913      	ldr	r1, [pc, #76]	; (55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5554:	6a22      	ldr	r2, [r4, #32]
    5556:	f004 ffef 	bl	a538 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    555a:	f896 0062 	ldrb.w	r0, [r6, #98]	; 0x62
    555e:	f007 fcf3 	bl	cf48 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5562:	4602      	mov	r2, r0
    5564:	21fb      	movs	r1, #251	; 0xfb
    5566:	2000      	movs	r0, #0
    5568:	f005 f814 	bl	a594 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    556c:	e003      	b.n	5576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    556e:	f005 fba7 	bl	acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5572:	f004 fff1 	bl	a558 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5576:	2201      	movs	r2, #1
    5578:	f896 3063 	ldrb.w	r3, [r6, #99]	; 0x63
    557c:	4611      	mov	r1, r2
    557e:	2000      	movs	r0, #0
    5580:	f005 fc28 	bl	add4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5584:	7127      	strb	r7, [r4, #4]
    5586:	6a20      	ldr	r0, [r4, #32]
    5588:	8801      	ldrh	r1, [r0, #0]
    558a:	8221      	strh	r1, [r4, #16]
    558c:	7880      	ldrb	r0, [r0, #2]
    558e:	74a0      	strb	r0, [r4, #18]
    5590:	7027      	strb	r7, [r4, #0]
    5592:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5596:	0000      	.short	0x0000
    5598:	200000e4 	.word	0x200000e4
    559c:	20000b60 	.word	0x20000b60
    55a0:	20000a30 	.word	0x20000a30
    55a4:	000051f1 	.word	0x000051f1
    55a8:	00004fdd 	.word	0x00004fdd
    55ac:	0000511d 	.word	0x0000511d
    55b0:	00005365 	.word	0x00005365

000055b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    55b4:	4800      	ldr	r0, [pc, #0]	; (55b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    55b6:	4770      	bx	lr
    55b8:	2000134b 	.word	0x2000134b

000055bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    55bc:	4904      	ldr	r1, [pc, #16]	; (55d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    55be:	788a      	ldrb	r2, [r1, #2]
    55c0:	4282      	cmp	r2, r0
    55c2:	d903      	bls.n	55cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    55c4:	4408      	add	r0, r1
    55c6:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    55ca:	4770      	bx	lr
    55cc:	2000      	movs	r0, #0
    55ce:	4770      	bx	lr
    55d0:	20001178 	.word	0x20001178

000055d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    55d4:	4904      	ldr	r1, [pc, #16]	; (55e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    55d6:	788a      	ldrb	r2, [r1, #2]
    55d8:	4282      	cmp	r2, r0
    55da:	d903      	bls.n	55e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    55dc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    55e0:	3083      	adds	r0, #131	; 0x83
    55e2:	4770      	bx	lr
    55e4:	2000      	movs	r0, #0
    55e6:	4770      	bx	lr
    55e8:	20001178 	.word	0x20001178

000055ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    55ec:	4a05      	ldr	r2, [pc, #20]	; (5604 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    55ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    55f6:	6802      	ldr	r2, [r0, #0]
    55f8:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    55fc:	8880      	ldrh	r0, [r0, #4]
    55fe:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5602:	4770      	bx	lr
    5604:	20001178 	.word	0x20001178

00005608 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    560c:	460e      	mov	r6, r1
    560e:	4607      	mov	r7, r0
    5610:	4615      	mov	r5, r2
    5612:	2106      	movs	r1, #6
    5614:	4630      	mov	r0, r6
    5616:	f007 fe9d 	bl	d354 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    561a:	4c0d      	ldr	r4, [pc, #52]	; (5650 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    561c:	b160      	cbz	r0, 5638 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    561e:	2000      	movs	r0, #0
    5620:	e004      	b.n	562c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5622:	1821      	adds	r1, r4, r0
    5624:	1c40      	adds	r0, r0, #1
    5626:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    562a:	b2c0      	uxtb	r0, r0
    562c:	78a1      	ldrb	r1, [r4, #2]
    562e:	4281      	cmp	r1, r0
    5630:	d8f7      	bhi.n	5622 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5632:	2001      	movs	r0, #1
    5634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5638:	4631      	mov	r1, r6
    563a:	4638      	mov	r0, r7
    563c:	f007 fcab 	bl	cf96 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5640:	2808      	cmp	r0, #8
    5642:	d003      	beq.n	564c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5644:	4420      	add	r0, r4
    5646:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    564a:	e7f2      	b.n	5632 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    564c:	2000      	movs	r0, #0
    564e:	e7f1      	b.n	5634 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5650:	20001178 	.word	0x20001178

00005654 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5654:	4904      	ldr	r1, [pc, #16]	; (5668 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5656:	788a      	ldrb	r2, [r1, #2]
    5658:	4282      	cmp	r2, r0
    565a:	d903      	bls.n	5664 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    565c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5660:	1cc0      	adds	r0, r0, #3
    5662:	4770      	bx	lr
    5664:	2000      	movs	r0, #0
    5666:	4770      	bx	lr
    5668:	20001178 	.word	0x20001178

0000566c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    566c:	b510      	push	{r4, lr}
    566e:	f240 12d3 	movw	r2, #467	; 0x1d3
    5672:	2100      	movs	r1, #0
    5674:	4808      	ldr	r0, [pc, #32]	; (5698 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5676:	f006 fbfd 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    567a:	2208      	movs	r2, #8
    567c:	21ff      	movs	r1, #255	; 0xff
    567e:	4807      	ldr	r0, [pc, #28]	; (569c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5680:	f006 fbf8 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5684:	4805      	ldr	r0, [pc, #20]	; (569c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5686:	2100      	movs	r1, #0
    5688:	1f00      	subs	r0, r0, #4
    568a:	7001      	strb	r1, [r0, #0]
    568c:	7041      	strb	r1, [r0, #1]
    568e:	f44f 7161 	mov.w	r1, #900	; 0x384
    5692:	8041      	strh	r1, [r0, #2]
    5694:	bd10      	pop	{r4, pc}
    5696:	0000      	.short	0x0000
    5698:	20001178 	.word	0x20001178
    569c:	20000294 	.word	0x20000294

000056a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    56a0:	4901      	ldr	r1, [pc, #4]	; (56a8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    56a2:	7008      	strb	r0, [r1, #0]
    56a4:	4770      	bx	lr
    56a6:	0000      	.short	0x0000
    56a8:	20000290 	.word	0x20000290

000056ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    56ac:	4801      	ldr	r0, [pc, #4]	; (56b4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    56ae:	7800      	ldrb	r0, [r0, #0]
    56b0:	4770      	bx	lr
    56b2:	0000      	.short	0x0000
    56b4:	20000290 	.word	0x20000290

000056b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    56b8:	4b0b      	ldr	r3, [pc, #44]	; (56e8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    56ba:	b510      	push	{r4, lr}
    56bc:	789c      	ldrb	r4, [r3, #2]
    56be:	4284      	cmp	r4, r0
    56c0:	d90f      	bls.n	56e2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    56c2:	4418      	add	r0, r3
    56c4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    56cc:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    56d0:	700b      	strb	r3, [r1, #0]
    56d2:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    56d6:	6011      	str	r1, [r2, #0]
    56d8:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    56dc:	8090      	strh	r0, [r2, #4]
    56de:	2001      	movs	r0, #1
    56e0:	bd10      	pop	{r4, pc}
    56e2:	2000      	movs	r0, #0
    56e4:	bd10      	pop	{r4, pc}
    56e6:	0000      	.short	0x0000
    56e8:	20001178 	.word	0x20001178

000056ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    56ec:	4907      	ldr	r1, [pc, #28]	; (570c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    56ee:	788a      	ldrb	r2, [r1, #2]
    56f0:	4282      	cmp	r2, r0
    56f2:	d909      	bls.n	5708 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    56f4:	4408      	add	r0, r1
    56f6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56fa:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    56fe:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5702:	f000 0001 	and.w	r0, r0, #1
    5706:	4770      	bx	lr
    5708:	2000      	movs	r0, #0
    570a:	4770      	bx	lr
    570c:	20001178 	.word	0x20001178

00005710 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5714:	4698      	mov	r8, r3
    5716:	4691      	mov	r9, r2
    5718:	460c      	mov	r4, r1
    571a:	4605      	mov	r5, r0
    571c:	f000 f938 	bl	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    5720:	4606      	mov	r6, r0
    5722:	2810      	cmp	r0, #16
    5724:	d006      	beq.n	5734 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5726:	f000 f903 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    572a:	2810      	cmp	r0, #16
    572c:	d002      	beq.n	5734 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    572e:	2012      	movs	r0, #18
    5730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5734:	4f18      	ldr	r7, [pc, #96]	; (5798 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5736:	78b8      	ldrb	r0, [r7, #2]
    5738:	2808      	cmp	r0, #8
    573a:	d22a      	bcs.n	5792 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    573c:	2e10      	cmp	r6, #16
    573e:	d105      	bne.n	574c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5740:	2200      	movs	r2, #0
    5742:	4621      	mov	r1, r4
    5744:	4628      	mov	r0, r5
    5746:	f000 f907 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    574a:	4606      	mov	r6, r0
    574c:	78bc      	ldrb	r4, [r7, #2]
    574e:	2210      	movs	r2, #16
    5750:	1c60      	adds	r0, r4, #1
    5752:	70b8      	strb	r0, [r7, #2]
    5754:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5758:	1ce8      	adds	r0, r5, #3
    575a:	4649      	mov	r1, r9
    575c:	f007 fd64 	bl	d228 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5760:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5764:	2210      	movs	r2, #16
    5766:	4641      	mov	r1, r8
    5768:	f007 fd5e 	bl	d228 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    576c:	2110      	movs	r1, #16
    576e:	4640      	mov	r0, r8
    5770:	f007 fdf0 	bl	d354 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5774:	443c      	add	r4, r7
    5776:	2110      	movs	r1, #16
    5778:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    577c:	4648      	mov	r0, r9
    577e:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5782:	f007 fde7 	bl	d354 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5786:	77e0      	strb	r0, [r4, #31]
    5788:	f804 6c29 	strb.w	r6, [r4, #-41]
    578c:	2000      	movs	r0, #0
    578e:	73e0      	strb	r0, [r4, #15]
    5790:	e7ce      	b.n	5730 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5792:	2007      	movs	r0, #7
    5794:	e7cc      	b.n	5730 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5796:	0000      	.short	0x0000
    5798:	20001178 	.word	0x20001178

0000579c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    579c:	4806      	ldr	r0, [pc, #24]	; (57b8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    579e:	b510      	push	{r4, lr}
    57a0:	7880      	ldrb	r0, [r0, #2]
    57a2:	1e40      	subs	r0, r0, #1
    57a4:	b244      	sxtb	r4, r0
    57a6:	e004      	b.n	57b2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    57a8:	b2e0      	uxtb	r0, r4
    57aa:	f000 f939 	bl	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    57ae:	1e64      	subs	r4, r4, #1
    57b0:	b264      	sxtb	r4, r4
    57b2:	2c00      	cmp	r4, #0
    57b4:	daf8      	bge.n	57a8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    57b6:	bd10      	pop	{r4, pc}
    57b8:	20001178 	.word	0x20001178

000057bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    57bc:	4801      	ldr	r0, [pc, #4]	; (57c4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    57be:	8840      	ldrh	r0, [r0, #2]
    57c0:	4770      	bx	lr
    57c2:	0000      	.short	0x0000
    57c4:	20000290 	.word	0x20000290

000057c8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    57c8:	b138      	cbz	r0, 57da <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    57ca:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    57ce:	4288      	cmp	r0, r1
    57d0:	d803      	bhi.n	57da <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    57d2:	4903      	ldr	r1, [pc, #12]	; (57e0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    57d4:	8048      	strh	r0, [r1, #2]
    57d6:	2001      	movs	r0, #1
    57d8:	4770      	bx	lr
    57da:	2000      	movs	r0, #0
    57dc:	4770      	bx	lr
    57de:	0000      	.short	0x0000
    57e0:	20000290 	.word	0x20000290

000057e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    57e4:	4905      	ldr	r1, [pc, #20]	; (57fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    57e6:	788a      	ldrb	r2, [r1, #2]
    57e8:	4282      	cmp	r2, r0
    57ea:	d903      	bls.n	57f4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    57ec:	4408      	add	r0, r1
    57ee:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    57f2:	b108      	cbz	r0, 57f8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    57f4:	2000      	movs	r0, #0
    57f6:	4770      	bx	lr
    57f8:	2001      	movs	r0, #1
    57fa:	4770      	bx	lr
    57fc:	20001178 	.word	0x20001178

00005800 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5800:	b570      	push	{r4, r5, r6, lr}
    5802:	460d      	mov	r5, r1
    5804:	4606      	mov	r6, r0
    5806:	f000 f8c3 	bl	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    580a:	4c10      	ldr	r4, [pc, #64]	; (584c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    580c:	2810      	cmp	r0, #16
    580e:	d007      	beq.n	5820 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5810:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5814:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5818:	07c9      	lsls	r1, r1, #31
    581a:	d001      	beq.n	5820 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    581c:	2001      	movs	r0, #1
    581e:	bd70      	pop	{r4, r5, r6, pc}
    5820:	7861      	ldrb	r1, [r4, #1]
    5822:	2908      	cmp	r1, #8
    5824:	d210      	bcs.n	5848 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5826:	2810      	cmp	r0, #16
    5828:	d008      	beq.n	583c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    582a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    582e:	2101      	movs	r1, #1
    5830:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5834:	7860      	ldrb	r0, [r4, #1]
    5836:	1c40      	adds	r0, r0, #1
    5838:	7060      	strb	r0, [r4, #1]
    583a:	e7ef      	b.n	581c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    583c:	2201      	movs	r2, #1
    583e:	4629      	mov	r1, r5
    5840:	4630      	mov	r0, r6
    5842:	f000 f889 	bl	5958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    5846:	e7f5      	b.n	5834 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5848:	2000      	movs	r0, #0
    584a:	bd70      	pop	{r4, r5, r6, pc}
    584c:	20001178 	.word	0x20001178

00005850 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5850:	b570      	push	{r4, r5, r6, lr}
    5852:	4d0b      	ldr	r5, [pc, #44]	; (5880 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5854:	7828      	ldrb	r0, [r5, #0]
    5856:	1e40      	subs	r0, r0, #1
    5858:	b244      	sxtb	r4, r0
    585a:	e00a      	b.n	5872 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    585c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5860:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5864:	07c0      	lsls	r0, r0, #31
    5866:	d002      	beq.n	586e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5868:	b2e0      	uxtb	r0, r4
    586a:	f000 f921 	bl	5ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    586e:	1e64      	subs	r4, r4, #1
    5870:	b264      	sxtb	r4, r4
    5872:	2c00      	cmp	r4, #0
    5874:	daf2      	bge.n	585c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5876:	4903      	ldr	r1, [pc, #12]	; (5884 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5878:	2000      	movs	r0, #0
    587a:	7048      	strb	r0, [r1, #1]
    587c:	bd70      	pop	{r4, r5, r6, pc}
    587e:	0000      	.short	0x0000
    5880:	20001178 	.word	0x20001178
    5884:	20000290 	.word	0x20000290

00005888 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    588c:	2400      	movs	r4, #0
    588e:	4625      	mov	r5, r4
    5890:	4e18      	ldr	r6, [pc, #96]	; (58f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5892:	e029      	b.n	58e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5894:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5898:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    589c:	07c0      	lsls	r0, r0, #31
    589e:	d021      	beq.n	58e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    58a0:	4628      	mov	r0, r5
    58a2:	f000 f845 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    58a6:	4603      	mov	r3, r0
    58a8:	f7ff fed4 	bl	5654 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    58ac:	4601      	mov	r1, r0
    58ae:	2000      	movs	r0, #0
    58b0:	2b10      	cmp	r3, #16
    58b2:	d009      	beq.n	58c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    58b4:	18f2      	adds	r2, r6, r3
    58b6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    58ba:	f1bc 0f01 	cmp.w	ip, #1
    58be:	d002      	beq.n	58c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    58c0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    58c4:	b102      	cbz	r2, 58c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    58c6:	2001      	movs	r0, #1
    58c8:	1e40      	subs	r0, r0, #1
    58ca:	4201      	tst	r1, r0
    58cc:	d10a      	bne.n	58e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    58ce:	480a      	ldr	r0, [pc, #40]	; (58f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    58d0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    58d4:	5503      	strb	r3, [r0, r4]
    58d6:	4620      	mov	r0, r4
    58d8:	1c64      	adds	r4, r4, #1
    58da:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    58de:	b2e4      	uxtb	r4, r4
    58e0:	f005 fbea 	bl	b0b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    58e4:	1c6d      	adds	r5, r5, #1
    58e6:	b2ed      	uxtb	r5, r5
    58e8:	7830      	ldrb	r0, [r6, #0]
    58ea:	42a8      	cmp	r0, r5
    58ec:	d8d2      	bhi.n	5894 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    58ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58f2:	0000      	.short	0x0000
    58f4:	20001178 	.word	0x20001178
    58f8:	20000294 	.word	0x20000294
    58fc:	b570      	push	{r4, r5, r6, lr}
    58fe:	4b0a      	ldr	r3, [pc, #40]	; (5928 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	b173      	cbz	r3, 5922 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    5904:	4b09      	ldr	r3, [pc, #36]	; (592c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    5906:	789c      	ldrb	r4, [r3, #2]
    5908:	b15c      	cbz	r4, 5922 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    590a:	1845      	adds	r5, r0, r1
    590c:	4621      	mov	r1, r4
    590e:	b10a      	cbz	r2, 5914 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5910:	1cd8      	adds	r0, r3, #3
    5912:	e001      	b.n	5918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5914:	4805      	ldr	r0, [pc, #20]	; (592c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    5916:	3083      	adds	r0, #131	; 0x83
    5918:	462a      	mov	r2, r5
    591a:	f004 fd2f 	bl	a37c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    591e:	2001      	movs	r0, #1
    5920:	bd70      	pop	{r4, r5, r6, pc}
    5922:	2000      	movs	r0, #0
    5924:	bd70      	pop	{r4, r5, r6, pc}
    5926:	0000      	.short	0x0000
    5928:	20000290 	.word	0x20000290
    592c:	20001178 	.word	0x20001178
    5930:	4908      	ldr	r1, [pc, #32]	; (5954 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    5932:	b510      	push	{r4, lr}
    5934:	4603      	mov	r3, r0
    5936:	2000      	movs	r0, #0
    5938:	788a      	ldrb	r2, [r1, #2]
    593a:	e006      	b.n	594a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    593c:	180c      	adds	r4, r1, r0
    593e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5942:	429c      	cmp	r4, r3
    5944:	d004      	beq.n	5950 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    5946:	1c40      	adds	r0, r0, #1
    5948:	b2c0      	uxtb	r0, r0
    594a:	4282      	cmp	r2, r0
    594c:	d8f6      	bhi.n	593c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    594e:	2010      	movs	r0, #16
    5950:	bd10      	pop	{r4, pc}
    5952:	0000      	.short	0x0000
    5954:	20001178 	.word	0x20001178
    5958:	b570      	push	{r4, r5, r6, lr}
    595a:	4b0c      	ldr	r3, [pc, #48]	; (598c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    595c:	4604      	mov	r4, r0
    595e:	7818      	ldrb	r0, [r3, #0]
    5960:	1c45      	adds	r5, r0, #1
    5962:	701d      	strb	r5, [r3, #0]
    5964:	2810      	cmp	r0, #16
    5966:	d303      	bcc.n	5970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    5968:	2146      	movs	r1, #70	; 0x46
    596a:	2028      	movs	r0, #40	; 0x28
    596c:	f7fe f9d2 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5970:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5974:	680d      	ldr	r5, [r1, #0]
    5976:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    597a:	8889      	ldrh	r1, [r1, #4]
    597c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5980:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5984:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5988:	bd70      	pop	{r4, r5, r6, pc}
    598a:	0000      	.short	0x0000
    598c:	20001178 	.word	0x20001178
    5990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5994:	460f      	mov	r7, r1
    5996:	4606      	mov	r6, r0
    5998:	2400      	movs	r4, #0
    599a:	4d0d      	ldr	r5, [pc, #52]	; (59d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    599c:	e00f      	b.n	59be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    599e:	bf00      	nop
    59a0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    59a4:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    59a8:	42b1      	cmp	r1, r6
    59aa:	d106      	bne.n	59ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    59ac:	2206      	movs	r2, #6
    59ae:	4639      	mov	r1, r7
    59b0:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    59b4:	f006 f9d2 	bl	bd5c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    59b8:	b138      	cbz	r0, 59ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    59ba:	1c64      	adds	r4, r4, #1
    59bc:	b2e4      	uxtb	r4, r4
    59be:	7828      	ldrb	r0, [r5, #0]
    59c0:	42a0      	cmp	r0, r4
    59c2:	d8ed      	bhi.n	59a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    59c4:	2010      	movs	r0, #16
    59c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59ca:	4620      	mov	r0, r4
    59cc:	e7fb      	b.n	59c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    59ce:	0000      	.short	0x0000
    59d0:	20001178 	.word	0x20001178
    59d4:	b570      	push	{r4, r5, r6, lr}
    59d6:	4605      	mov	r5, r0
    59d8:	f7ff ffaa 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    59dc:	2810      	cmp	r0, #16
    59de:	d11c      	bne.n	5a1a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    59e0:	4c0e      	ldr	r4, [pc, #56]	; (5a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    59e2:	7820      	ldrb	r0, [r4, #0]
    59e4:	1e40      	subs	r0, r0, #1
    59e6:	b2c0      	uxtb	r0, r0
    59e8:	7020      	strb	r0, [r4, #0]
    59ea:	42a8      	cmp	r0, r5
    59ec:	d015      	beq.n	5a1a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    59ee:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    59f2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    59f6:	f502 7080 	add.w	r0, r2, #256	; 0x100
    59fa:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    59fe:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5a02:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5a06:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5a0a:	7820      	ldrb	r0, [r4, #0]
    5a0c:	f7ff ff90 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5a10:	2810      	cmp	r0, #16
    5a12:	d002      	beq.n	5a1a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5a14:	4420      	add	r0, r4
    5a16:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5a1a:	bd70      	pop	{r4, r5, r6, pc}
    5a1c:	20001178 	.word	0x20001178
    5a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a24:	4c21      	ldr	r4, [pc, #132]	; (5aac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    5a26:	4606      	mov	r6, r0
    5a28:	19a7      	adds	r7, r4, r6
    5a2a:	78a0      	ldrb	r0, [r4, #2]
    5a2c:	1e40      	subs	r0, r0, #1
    5a2e:	b2c5      	uxtb	r5, r0
    5a30:	70a5      	strb	r5, [r4, #2]
    5a32:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5a36:	42ae      	cmp	r6, r5
    5a38:	d02a      	beq.n	5a90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    5a3a:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5a3e:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5a42:	f10a 0103 	add.w	r1, sl, #3
    5a46:	f109 0003 	add.w	r0, r9, #3
    5a4a:	2210      	movs	r2, #16
    5a4c:	f006 f998 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a50:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5a54:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5a58:	2210      	movs	r2, #16
    5a5a:	f006 f991 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a5e:	1960      	adds	r0, r4, r5
    5a60:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5a64:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5a68:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5a6c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5a70:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5a74:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5a78:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5a7c:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5a80:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5a84:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5a88:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5a8c:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5a90:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5a94:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a98:	07c0      	lsls	r0, r0, #31
    5a9a:	d104      	bne.n	5aa6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    5a9c:	4640      	mov	r0, r8
    5a9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5aa2:	f7ff bf97 	b.w	59d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5aaa:	0000      	.short	0x0000
    5aac:	20001178 	.word	0x20001178
    5ab0:	4905      	ldr	r1, [pc, #20]	; (5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    5ab2:	784a      	ldrb	r2, [r1, #1]
    5ab4:	1e52      	subs	r2, r2, #1
    5ab6:	704a      	strb	r2, [r1, #1]
    5ab8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5abc:	2200      	movs	r2, #0
    5abe:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5ac2:	f7ff bf87 	b.w	59d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5ac6:	0000      	.short	0x0000
    5ac8:	20001178 	.word	0x20001178

00005acc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    5acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ace:	f06f 021f 	mvn.w	r2, #31
    5ad2:	0c01      	lsrs	r1, r0, #16
    5ad4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    5ad8:	251f      	movs	r5, #31
    5ada:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5ade:	3854      	subs	r0, #84	; 0x54
    5ae0:	d00d      	beq.n	5afe <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5ae2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5ae6:	3855      	subs	r0, #85	; 0x55
    5ae8:	d009      	beq.n	5afe <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5aea:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5aee:	38aa      	subs	r0, #170	; 0xaa
    5af0:	d005      	beq.n	5afe <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5af2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5af6:	38aa      	subs	r0, #170	; 0xaa
    5af8:	d001      	beq.n	5afe <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5afa:	2001      	movs	r0, #1
    5afc:	e000      	b.n	5b00 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    5afe:	2000      	movs	r0, #0
    5b00:	2200      	movs	r2, #0
    5b02:	4613      	mov	r3, r2
    5b04:	ea4f 0402 	mov.w	r4, r2
    5b08:	ea82 0701 	eor.w	r7, r2, r1
    5b0c:	43ff      	mvns	r7, r7
    5b0e:	431f      	orrs	r7, r3
    5b10:	1c7f      	adds	r7, r7, #1
    5b12:	d00f      	beq.n	5b34 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    5b14:	f006 0701 	and.w	r7, r6, #1
    5b18:	0852      	lsrs	r2, r2, #1
    5b1a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5b1e:	f005 0701 	and.w	r7, r5, #1
    5b22:	085b      	lsrs	r3, r3, #1
    5b24:	0876      	lsrs	r6, r6, #1
    5b26:	086d      	lsrs	r5, r5, #1
    5b28:	1c64      	adds	r4, r4, #1
    5b2a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5b2e:	2c16      	cmp	r4, #22
    5b30:	d3ea      	bcc.n	5b08 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    5b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b34:	2000      	movs	r0, #0
    5b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005b38 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b3c:	4604      	mov	r4, r0
    5b3e:	f100 0568 	add.w	r5, r0, #104	; 0x68
    5b42:	f04f 0901 	mov.w	r9, #1
    5b46:	b171      	cbz	r1, 5b66 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5b48:	f104 077e 	add.w	r7, r4, #126	; 0x7e
    5b4c:	1e7e      	subs	r6, r7, #1
    5b4e:	2901      	cmp	r1, #1
    5b50:	d021      	beq.n	5b96 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    5b52:	2902      	cmp	r1, #2
    5b54:	d046      	beq.n	5be4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    5b56:	2903      	cmp	r1, #3
    5b58:	d11b      	bne.n	5b92 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5b5a:	4639      	mov	r1, r7
    5b5c:	4630      	mov	r0, r6
    5b5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b62:	f007 bc7e 	b.w	d462 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b66:	f44f 7204 	mov.w	r2, #528	; 0x210
    5b6a:	2100      	movs	r1, #0
    5b6c:	f006 f982 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b70:	f004 fbf4 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5b74:	f644 112b 	movw	r1, #18731	; 0x492b
    5b78:	4008      	ands	r0, r1
    5b7a:	f885 9015 	strb.w	r9, [r5, #21]
    5b7e:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5b82:	0a00      	lsrs	r0, r0, #8
    5b84:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5b88:	20fe      	movs	r0, #254	; 0xfe
    5b8a:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5b8e:	207f      	movs	r0, #127	; 0x7f
    5b90:	7268      	strb	r0, [r5, #9]
    5b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b96:	f04f 0800 	mov.w	r8, #0
    5b9a:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
    5b9e:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    5ba2:	6861      	ldr	r1, [r4, #4]
    5ba4:	4814      	ldr	r0, [pc, #80]	; (5bf8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5ba6:	460a      	mov	r2, r1
    5ba8:	4408      	add	r0, r1
    5baa:	fbb0 f0f1 	udiv	r0, r0, r1
    5bae:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    5bb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5bb6:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    5bba:	8963      	ldrh	r3, [r4, #10]
    5bbc:	4628      	mov	r0, r5
    5bbe:	f000 f81d 	bl	5bfc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5bc2:	4639      	mov	r1, r7
    5bc4:	4630      	mov	r0, r6
    5bc6:	f007 fc4c 	bl	d462 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5bca:	f006 f8a3 	bl	bd14 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5bce:	b118      	cbz	r0, 5bd8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5bd0:	68e0      	ldr	r0, [r4, #12]
    5bd2:	f7ff ff7b 	bl	5acc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    5bd6:	b110      	cbz	r0, 5bde <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5bd8:	f884 816c 	strb.w	r8, [r4, #364]	; 0x16c
    5bdc:	e7d9      	b.n	5b92 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5bde:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
    5be2:	e7d6      	b.n	5b92 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5be4:	6841      	ldr	r1, [r0, #4]
    5be6:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    5bea:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    5bee:	4628      	mov	r0, r5
    5bf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bf4:	f000 b802 	b.w	5bfc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5bf8:	01c9c37f 	.word	0x01c9c37f
    5bfc:	b530      	push	{r4, r5, lr}
    5bfe:	2400      	movs	r4, #0
    5c00:	8684      	strh	r4, [r0, #52]	; 0x34
    5c02:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5c04:	4d13      	ldr	r5, [pc, #76]	; (5c54 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5c06:	434c      	muls	r4, r1
    5c08:	fbb4 f4f2 	udiv	r4, r4, r2
    5c0c:	8704      	strh	r4, [r0, #56]	; 0x38
    5c0e:	f242 7410 	movw	r4, #10000	; 0x2710
    5c12:	4363      	muls	r3, r4
    5c14:	fbb3 f3f2 	udiv	r3, r3, r2
    5c18:	1c5b      	adds	r3, r3, #1
    5c1a:	b29b      	uxth	r3, r3
    5c1c:	fb03 f402 	mul.w	r4, r3, r2
    5c20:	86c3      	strh	r3, [r0, #54]	; 0x36
    5c22:	42ac      	cmp	r4, r5
    5c24:	d901      	bls.n	5c2a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5c26:	1e5b      	subs	r3, r3, #1
    5c28:	86c3      	strh	r3, [r0, #54]	; 0x36
    5c2a:	4b0b      	ldr	r3, [pc, #44]	; (5c58 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5c2c:	f240 2471 	movw	r4, #625	; 0x271
    5c30:	fbb3 f3f2 	udiv	r3, r3, r2
    5c34:	1c5b      	adds	r3, r3, #1
    5c36:	8783      	strh	r3, [r0, #60]	; 0x3c
    5c38:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5c3a:	4363      	muls	r3, r4
    5c3c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5c40:	1e5b      	subs	r3, r3, #1
    5c42:	fbb3 f3f2 	udiv	r3, r3, r2
    5c46:	62c3      	str	r3, [r0, #44]	; 0x2c
    5c48:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5c4a:	434b      	muls	r3, r1
    5c4c:	fbb3 f1f2 	udiv	r1, r3, r2
    5c50:	6281      	str	r1, [r0, #40]	; 0x28
    5c52:	bd30      	pop	{r4, r5, pc}
    5c54:	01e84800 	.word	0x01e84800
    5c58:	02625a00 	.word	0x02625a00
    5c5c:	b570      	push	{r4, r5, r6, lr}
    5c5e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5c62:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5c66:	2401      	movs	r4, #1
    5c68:	fb03 2101 	mla	r1, r3, r1, r2
    5c6c:	2225      	movs	r2, #37	; 0x25
    5c6e:	fbb1 f3f2 	udiv	r3, r1, r2
    5c72:	fb02 1113 	mls	r1, r2, r3, r1
    5c76:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5c7a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5c7e:	f001 0307 	and.w	r3, r1, #7
    5c82:	7d92      	ldrb	r2, [r2, #22]
    5c84:	fa04 f303 	lsl.w	r3, r4, r3
    5c88:	421a      	tst	r2, r3
    5c8a:	d003      	beq.n	5c94 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x15c>
    5c8c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5c90:	2000      	movs	r0, #0
    5c92:	bd70      	pop	{r4, r5, r6, pc}
    5c94:	f890 2020 	ldrb.w	r2, [r0, #32]
    5c98:	fbb1 f3f2 	udiv	r3, r1, r2
    5c9c:	fb02 1113 	mls	r1, r2, r3, r1
    5ca0:	1c49      	adds	r1, r1, #1
    5ca2:	b2c9      	uxtb	r1, r1
    5ca4:	2300      	movs	r3, #0
    5ca6:	18c5      	adds	r5, r0, r3
    5ca8:	7eea      	ldrb	r2, [r5, #27]
    5caa:	428a      	cmp	r2, r1
    5cac:	d311      	bcc.n	5cd2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19a>
    5cae:	f895 5016 	ldrb.w	r5, [r5, #22]
    5cb2:	2200      	movs	r2, #0
    5cb4:	fa04 f602 	lsl.w	r6, r4, r2
    5cb8:	4235      	tst	r5, r6
    5cba:	d001      	beq.n	5cc0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x188>
    5cbc:	1e49      	subs	r1, r1, #1
    5cbe:	b2c9      	uxtb	r1, r1
    5cc0:	b121      	cbz	r1, 5ccc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    5cc2:	1c52      	adds	r2, r2, #1
    5cc4:	b2d2      	uxtb	r2, r2
    5cc6:	2a08      	cmp	r2, #8
    5cc8:	d3f4      	bcc.n	5cb4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>
    5cca:	e004      	b.n	5cd6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19e>
    5ccc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5cd0:	e7dc      	b.n	5c8c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x154>
    5cd2:	1a89      	subs	r1, r1, r2
    5cd4:	b2c9      	uxtb	r1, r1
    5cd6:	1c5b      	adds	r3, r3, #1
    5cd8:	b2db      	uxtb	r3, r3
    5cda:	2b05      	cmp	r3, #5
    5cdc:	d3e3      	bcc.n	5ca6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16e>
    5cde:	201f      	movs	r0, #31
    5ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

00005ce4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5ce4:	7841      	ldrb	r1, [r0, #1]
    5ce6:	b141      	cbz	r1, 5cfa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5ce8:	78c0      	ldrb	r0, [r0, #3]
    5cea:	2819      	cmp	r0, #25
    5cec:	d203      	bcs.n	5cf6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5cee:	4a04      	ldr	r2, [pc, #16]	; (5d00 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5cf0:	5c10      	ldrb	r0, [r2, r0]
    5cf2:	4288      	cmp	r0, r1
    5cf4:	d101      	bne.n	5cfa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5cf6:	2001      	movs	r0, #1
    5cf8:	4770      	bx	lr
    5cfa:	2000      	movs	r0, #0
    5cfc:	4770      	bx	lr
    5cfe:	0000      	.short	0x0000
    5d00:	0000f808 	.word	0x0000f808

00005d04 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5d04:	b50c      	push	{r2, r3, lr}
    5d06:	a20b      	add	r2, pc, #44	; (adr r2, 5d34 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5d08:	e9d2 1200 	ldrd	r1, r2, [r2]
    5d0c:	e9cd 1200 	strd	r1, r2, [sp]
    5d10:	7901      	ldrb	r1, [r0, #4]
    5d12:	7940      	ldrb	r0, [r0, #5]
    5d14:	f001 0207 	and.w	r2, r1, #7
    5d18:	4669      	mov	r1, sp
    5d1a:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5d1e:	2a01      	cmp	r2, #1
    5d20:	d804      	bhi.n	5d2c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5d22:	f000 0007 	and.w	r0, r0, #7
    5d26:	5c08      	ldrb	r0, [r1, r0]
    5d28:	2801      	cmp	r0, #1
    5d2a:	d901      	bls.n	5d30 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5d2c:	2000      	movs	r0, #0
    5d2e:	bd0c      	pop	{r2, r3, pc}
    5d30:	2001      	movs	r0, #1
    5d32:	bd0c      	pop	{r2, r3, pc}
    5d34:	02010100 	.word	0x02010100
    5d38:	03020201 	.word	0x03020201

00005d3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5d3c:	b510      	push	{r4, lr}
    5d3e:	2201      	movs	r2, #1
    5d40:	70c1      	strb	r1, [r0, #3]
    5d42:	2919      	cmp	r1, #25
    5d44:	d202      	bcs.n	5d4c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5d46:	4a06      	ldr	r2, [pc, #24]	; (5d60 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5d48:	5c52      	ldrb	r2, [r2, r1]
    5d4a:	e006      	b.n	5d5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d4c:	29ff      	cmp	r1, #255	; 0xff
    5d4e:	d004      	beq.n	5d5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d50:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5d54:	202a      	movs	r0, #42	; 0x2a
    5d56:	f7fd ffdd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d5a:	7042      	strb	r2, [r0, #1]
    5d5c:	bd10      	pop	{r4, pc}
    5d5e:	0000      	.short	0x0000
    5d60:	0000f808 	.word	0x0000f808

00005d64 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d68:	ea5f 0900 	movs.w	r9, r0
    5d6c:	d006      	beq.n	5d7c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5d6e:	4d21      	ldr	r5, [pc, #132]	; (5df4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5d70:	f105 0010 	add.w	r0, r5, #16
    5d74:	7b69      	ldrb	r1, [r5, #13]
    5d76:	4682      	mov	sl, r0
    5d78:	b119      	cbz	r1, 5d82 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5d7a:	e00b      	b.n	5d94 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d7c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5d80:	e005      	b.n	5d8e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5d82:	2100      	movs	r1, #0
    5d84:	f007 fd56 	bl	d834 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5d88:	b120      	cbz	r0, 5d94 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d8a:	f240 31d3 	movw	r1, #979	; 0x3d3
    5d8e:	202b      	movs	r0, #43	; 0x2b
    5d90:	f7fd ffc0 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d94:	8a2e      	ldrh	r6, [r5, #16]
    5d96:	2000      	movs	r0, #0
    5d98:	f7fe f9c2 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5d9c:	4f16      	ldr	r7, [pc, #88]	; (5df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5d9e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5dfc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5da2:	4604      	mov	r4, r0
    5da4:	6838      	ldr	r0, [r7, #0]
    5da6:	b158      	cbz	r0, 5dc0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5da8:	8a28      	ldrh	r0, [r5, #16]
    5daa:	42a0      	cmp	r0, r4
    5dac:	d308      	bcc.n	5dc0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5dae:	1b00      	subs	r0, r0, r4
    5db0:	b2c0      	uxtb	r0, r0
    5db2:	2101      	movs	r1, #1
    5db4:	f006 fff9 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5db8:	b148      	cbz	r0, 5dce <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5dba:	4649      	mov	r1, r9
    5dbc:	683a      	ldr	r2, [r7, #0]
    5dbe:	e004      	b.n	5dca <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5dc0:	f8d8 2000 	ldr.w	r2, [r8]
    5dc4:	b11a      	cbz	r2, 5dce <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5dc6:	8a28      	ldrh	r0, [r5, #16]
    5dc8:	4649      	mov	r1, r9
    5dca:	4790      	blx	r2
    5dcc:	b968      	cbnz	r0, 5dea <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5dce:	2100      	movs	r1, #0
    5dd0:	4650      	mov	r0, sl
    5dd2:	f007 fd2f 	bl	d834 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5dd6:	b910      	cbnz	r0, 5dde <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5dd8:	8a28      	ldrh	r0, [r5, #16]
    5dda:	42b0      	cmp	r0, r6
    5ddc:	d1e2      	bne.n	5da4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5dde:	4808      	ldr	r0, [pc, #32]	; (5e00 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5de0:	6801      	ldr	r1, [r0, #0]
    5de2:	b129      	cbz	r1, 5df0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5de4:	4648      	mov	r0, r9
    5de6:	4788      	blx	r1
    5de8:	b110      	cbz	r0, 5df0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5dea:	2001      	movs	r0, #1
    5dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5df0:	2000      	movs	r0, #0
    5df2:	e7fb      	b.n	5dec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5df4:	20000f90 	.word	0x20000f90
    5df8:	20000240 	.word	0x20000240
    5dfc:	20000244 	.word	0x20000244
    5e00:	2000024c 	.word	0x2000024c

00005e04 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5e04:	b570      	push	{r4, r5, r6, lr}
    5e06:	0005      	movs	r5, r0
    5e08:	460c      	mov	r4, r1
    5e0a:	d02e      	beq.n	5e6a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e0c:	4818      	ldr	r0, [pc, #96]	; (5e70 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5e0e:	6802      	ldr	r2, [r0, #0]
    5e10:	b35a      	cbz	r2, 5e6a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e12:	4628      	mov	r0, r5
    5e14:	4790      	blx	r2
    5e16:	b340      	cbz	r0, 5e6a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e18:	7820      	ldrb	r0, [r4, #0]
    5e1a:	2811      	cmp	r0, #17
    5e1c:	d002      	beq.n	5e24 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5e1e:	2814      	cmp	r0, #20
    5e20:	d003      	beq.n	5e2a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5e22:	e020      	b.n	5e66 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e24:	7920      	ldrb	r0, [r4, #4]
    5e26:	b1f0      	cbz	r0, 5e66 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e28:	e00a      	b.n	5e40 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e2a:	7920      	ldrb	r0, [r4, #4]
    5e2c:	b120      	cbz	r0, 5e38 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5e2e:	4628      	mov	r0, r5
    5e30:	f007 fef8 	bl	dc24 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5e34:	b120      	cbz	r0, 5e40 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e36:	e016      	b.n	5e66 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e38:	490e      	ldr	r1, [pc, #56]	; (5e74 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5e3a:	2000      	movs	r0, #0
    5e3c:	7348      	strb	r0, [r1, #13]
    5e3e:	e012      	b.n	5e66 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e40:	88e4      	ldrh	r4, [r4, #6]
    5e42:	2100      	movs	r1, #0
    5e44:	4620      	mov	r0, r4
    5e46:	f006 ffb0 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5e4a:	b160      	cbz	r0, 5e66 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e4c:	8800      	ldrh	r0, [r0, #0]
    5e4e:	f007 f825 	bl	ce9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5e52:	2100      	movs	r1, #0
    5e54:	4620      	mov	r0, r4
    5e56:	f7fe f9ff 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5e5a:	b120      	cbz	r0, 5e66 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e5c:	f44f 719a 	mov.w	r1, #308	; 0x134
    5e60:	202b      	movs	r0, #43	; 0x2b
    5e62:	f7fd ff57 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e66:	2001      	movs	r0, #1
    5e68:	bd70      	pop	{r4, r5, r6, pc}
    5e6a:	2000      	movs	r0, #0
    5e6c:	bd70      	pop	{r4, r5, r6, pc}
    5e6e:	0000      	.short	0x0000
    5e70:	2000023c 	.word	0x2000023c
    5e74:	20000f90 	.word	0x20000f90

00005e78 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5e78:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e7c:	b087      	sub	sp, #28
    5e7e:	460c      	mov	r4, r1
    5e80:	a902      	add	r1, sp, #8
    5e82:	9807      	ldr	r0, [sp, #28]
    5e84:	f007 f8ca 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e88:	2800      	cmp	r0, #0
    5e8a:	d17d      	bne.n	5f88 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5e8c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5fb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5e90:	f04f 0a01 	mov.w	sl, #1
    5e94:	4680      	mov	r8, r0
    5e96:	9803      	ldr	r0, [sp, #12]
    5e98:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    5e9c:	2800      	cmp	r0, #0
    5e9e:	d00c      	beq.n	5eba <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5ea0:	f8d9 2000 	ldr.w	r2, [r9]
    5ea4:	b162      	cbz	r2, 5ec0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5ea6:	4621      	mov	r1, r4
    5ea8:	9807      	ldr	r0, [sp, #28]
    5eaa:	4790      	blx	r2
    5eac:	b140      	cbz	r0, 5ec0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5eae:	4620      	mov	r0, r4
    5eb0:	f000 f91a 	bl	60e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5eb4:	2800      	cmp	r0, #0
    5eb6:	d1ee      	bne.n	5e96 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5eb8:	2001      	movs	r0, #1
    5eba:	b009      	add	sp, #36	; 0x24
    5ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ec0:	9d03      	ldr	r5, [sp, #12]
    5ec2:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    5ec6:	3568      	adds	r5, #104	; 0x68
    5ec8:	b950      	cbnz	r0, 5ee0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5eca:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5ece:	f88d 0004 	strb.w	r0, [sp, #4]
    5ed2:	9801      	ldr	r0, [sp, #4]
    5ed4:	9001      	str	r0, [sp, #4]
    5ed6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5eda:	b108      	cbz	r0, 5ee0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5edc:	2001      	movs	r0, #1
    5ede:	e000      	b.n	5ee2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5ee0:	2000      	movs	r0, #0
    5ee2:	4683      	mov	fp, r0
    5ee4:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    5ee8:	b1c0      	cbz	r0, 5f1c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5eea:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    5eee:	0780      	lsls	r0, r0, #30
    5ef0:	d514      	bpl.n	5f1c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5ef2:	f884 8001 	strb.w	r8, [r4, #1]
    5ef6:	f884 a000 	strb.w	sl, [r4]
    5efa:	f884 8004 	strb.w	r8, [r4, #4]
    5efe:	9907      	ldr	r1, [sp, #28]
    5f00:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f04:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    5f08:	71e1      	strb	r1, [r4, #7]
    5f0a:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    5f0e:	8121      	strh	r1, [r4, #8]
    5f10:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5f14:	8161      	strh	r1, [r4, #10]
    5f16:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    5f1a:	e7c8      	b.n	5eae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f1c:	9807      	ldr	r0, [sp, #28]
    5f1e:	f7fe fb43 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f22:	0007      	movs	r7, r0
    5f24:	d00d      	beq.n	5f42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5f26:	f006 fd4e 	bl	c9c6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5f2a:	0006      	movs	r6, r0
    5f2c:	d015      	beq.n	5f5a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5f2e:	f884 8001 	strb.w	r8, [r4, #1]
    5f32:	200d      	movs	r0, #13
    5f34:	7020      	strb	r0, [r4, #0]
    5f36:	9807      	ldr	r0, [sp, #28]
    5f38:	80e0      	strh	r0, [r4, #6]
    5f3a:	8126      	strh	r6, [r4, #8]
    5f3c:	f884 a004 	strb.w	sl, [r4, #4]
    5f40:	e007      	b.n	5f52 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5f42:	f240 213a 	movw	r1, #570	; 0x23a
    5f46:	e02d      	b.n	5fa4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f48:	2100      	movs	r1, #0
    5f4a:	4638      	mov	r0, r7
    5f4c:	460a      	mov	r2, r1
    5f4e:	f006 fe48 	bl	cbe2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5f52:	1e76      	subs	r6, r6, #1
    5f54:	b2b6      	uxth	r6, r6
    5f56:	d2f7      	bcs.n	5f48 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5f58:	e7a9      	b.n	5eae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f5a:	9807      	ldr	r0, [sp, #28]
    5f5c:	f7fe fb0e 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5f60:	b1f0      	cbz	r0, 5fa0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5f62:	f1bb 0f00 	cmp.w	fp, #0
    5f66:	d020      	beq.n	5faa <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f68:	f006 fc65 	bl	c836 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5f6c:	b160      	cbz	r0, 5f88 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5f6e:	9807      	ldr	r0, [sp, #28]
    5f70:	f006 ff94 	bl	ce9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5f74:	2100      	movs	r1, #0
    5f76:	9807      	ldr	r0, [sp, #28]
    5f78:	f7fe f96e 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5f7c:	f884 8001 	strb.w	r8, [r4, #1]
    5f80:	210a      	movs	r1, #10
    5f82:	4640      	mov	r0, r8
    5f84:	7021      	strb	r1, [r4, #0]
    5f86:	e000      	b.n	5f8a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5f88:	e00f      	b.n	5faa <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f8a:	f884 8004 	strb.w	r8, [r4, #4]
    5f8e:	9907      	ldr	r1, [sp, #28]
    5f90:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f94:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    5f98:	71e1      	strb	r1, [r4, #7]
    5f9a:	3524      	adds	r5, #36	; 0x24
    5f9c:	7028      	strb	r0, [r5, #0]
    5f9e:	e786      	b.n	5eae <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5fa0:	f44f 7116 	mov.w	r1, #600	; 0x258
    5fa4:	202b      	movs	r0, #43	; 0x2b
    5fa6:	f7fd feb5 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5faa:	2000      	movs	r0, #0
    5fac:	e785      	b.n	5eba <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5fae:	0000      	.short	0x0000
    5fb0:	20000248 	.word	0x20000248

00005fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fb8:	4c12      	ldr	r4, [pc, #72]	; (6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fba:	4607      	mov	r7, r0
    5fbc:	460e      	mov	r6, r1
    5fbe:	7de0      	ldrb	r0, [r4, #23]
    5fc0:	b110      	cbz	r0, 5fc8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5fc2:	8b20      	ldrh	r0, [r4, #24]
    5fc4:	2800      	cmp	r0, #0
    5fc6:	d012      	beq.n	5fee <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fc8:	480e      	ldr	r0, [pc, #56]	; (6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fca:	300e      	adds	r0, #14
    5fcc:	4680      	mov	r8, r0
    5fce:	f007 fbdb 	bl	d788 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fd2:	b9a8      	cbnz	r0, 6000 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fd4:	89e5      	ldrh	r5, [r4, #14]
    5fd6:	89e0      	ldrh	r0, [r4, #14]
    5fd8:	4632      	mov	r2, r6
    5fda:	4639      	mov	r1, r7
    5fdc:	f007 fbe3 	bl	d7a6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    5fe0:	b138      	cbz	r0, 5ff2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5fe2:	7de0      	ldrb	r0, [r4, #23]
    5fe4:	b110      	cbz	r0, 5fec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5fe6:	8b20      	ldrh	r0, [r4, #24]
    5fe8:	1e40      	subs	r0, r0, #1
    5fea:	8320      	strh	r0, [r4, #24]
    5fec:	2001      	movs	r0, #1
    5fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ff2:	4640      	mov	r0, r8
    5ff4:	f007 fbc8 	bl	d788 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5ff8:	b910      	cbnz	r0, 6000 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5ffa:	89e0      	ldrh	r0, [r4, #14]
    5ffc:	42a8      	cmp	r0, r5
    5ffe:	d1ea      	bne.n	5fd6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6000:	2000      	movs	r0, #0
    6002:	e7f4      	b.n	5fee <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6004:	20000f90 	.word	0x20000f90

00006008 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6008:	b510      	push	{r4, lr}
    600a:	7901      	ldrb	r1, [r0, #4]
    600c:	b119      	cbz	r1, 6016 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    600e:	2901      	cmp	r1, #1
    6010:	d006      	beq.n	6020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6012:	2000      	movs	r0, #0
    6014:	bd10      	pop	{r4, pc}
    6016:	8842      	ldrh	r2, [r0, #2]
    6018:	6883      	ldr	r3, [r0, #8]
    601a:	8800      	ldrh	r0, [r0, #0]
    601c:	2102      	movs	r1, #2
    601e:	e003      	b.n	6028 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6020:	8842      	ldrh	r2, [r0, #2]
    6022:	6883      	ldr	r3, [r0, #8]
    6024:	8800      	ldrh	r0, [r0, #0]
    6026:	2101      	movs	r1, #1
    6028:	f000 f808 	bl	603c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    602c:	b910      	cbnz	r0, 6034 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    602e:	4902      	ldr	r1, [pc, #8]	; (6038 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6030:	2001      	movs	r0, #1
    6032:	7008      	strb	r0, [r1, #0]
    6034:	2001      	movs	r0, #1
    6036:	bd10      	pop	{r4, pc}
    6038:	20000f90 	.word	0x20000f90
    603c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6040:	468a      	mov	sl, r1
    6042:	4699      	mov	r9, r3
    6044:	4615      	mov	r5, r2
    6046:	4604      	mov	r4, r0
    6048:	a901      	add	r1, sp, #4
    604a:	f006 ffe7 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    604e:	bbe0      	cbnz	r0, 60ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6050:	9f02      	ldr	r7, [sp, #8]
    6052:	f04f 0800 	mov.w	r8, #0
    6056:	3768      	adds	r7, #104	; 0x68
    6058:	b18d      	cbz	r5, 607e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    605a:	4620      	mov	r0, r4
    605c:	f7fe faa4 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6060:	0004      	movs	r4, r0
    6062:	d00f      	beq.n	6084 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6064:	4629      	mov	r1, r5
    6066:	f006 fced 	bl	ca44 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    606a:	0006      	movs	r6, r0
    606c:	d003      	beq.n	6076 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    606e:	481d      	ldr	r0, [pc, #116]	; (60e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6070:	8880      	ldrh	r0, [r0, #4]
    6072:	42a8      	cmp	r0, r5
    6074:	d208      	bcs.n	6088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6076:	2000      	movs	r0, #0
    6078:	b004      	add	sp, #16
    607a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    607e:	2001      	movs	r0, #1
    6080:	7538      	strb	r0, [r7, #20]
    6082:	e029      	b.n	60d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6084:	2189      	movs	r1, #137	; 0x89
    6086:	e02a      	b.n	60de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6088:	4620      	mov	r0, r4
    608a:	4631      	mov	r1, r6
    608c:	aa03      	add	r2, sp, #12
    608e:	f006 fcd2 	bl	ca36 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6092:	9803      	ldr	r0, [sp, #12]
    6094:	f8a0 8000 	strh.w	r8, [r0]
    6098:	f880 8002 	strb.w	r8, [r0, #2]
    609c:	7d39      	ldrb	r1, [r7, #20]
    609e:	b109      	cbz	r1, 60a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    60a0:	f04f 0a02 	mov.w	sl, #2
    60a4:	4651      	mov	r1, sl
    60a6:	f007 fac6 	bl	d636 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    60aa:	4631      	mov	r1, r6
    60ac:	2603      	movs	r6, #3
    60ae:	4620      	mov	r0, r4
    60b0:	464a      	mov	r2, r9
    60b2:	462b      	mov	r3, r5
    60b4:	9600      	str	r6, [sp, #0]
    60b6:	f006 fba7 	bl	c808 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    60ba:	4620      	mov	r0, r4
    60bc:	4629      	mov	r1, r5
    60be:	f006 fc5e 	bl	c97e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    60c2:	b158      	cbz	r0, 60dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    60c4:	4644      	mov	r4, r8
    60c6:	a801      	add	r0, sp, #4
    60c8:	e000      	b.n	60cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    60ca:	e005      	b.n	60d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    60cc:	f007 fb5f 	bl	d78e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    60d0:	9802      	ldr	r0, [sp, #8]
    60d2:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    60d6:	753c      	strb	r4, [r7, #20]
    60d8:	2001      	movs	r0, #1
    60da:	e7cd      	b.n	6078 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    60dc:	219f      	movs	r1, #159	; 0x9f
    60de:	202b      	movs	r0, #43	; 0x2b
    60e0:	f7fd fe18 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60e4:	20000f90 	.word	0x20000f90
    60e8:	b510      	push	{r4, lr}
    60ea:	492c      	ldr	r1, [pc, #176]	; (619c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    60ec:	b086      	sub	sp, #24
    60ee:	7d8a      	ldrb	r2, [r1, #22]
    60f0:	7801      	ldrb	r1, [r0, #0]
    60f2:	07d3      	lsls	r3, r2, #31
    60f4:	d101      	bne.n	60fa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    60f6:	2919      	cmp	r1, #25
    60f8:	d004      	beq.n	6104 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    60fa:	2918      	cmp	r1, #24
    60fc:	d01e      	beq.n	613c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    60fe:	2912      	cmp	r1, #18
    6100:	d045      	beq.n	618e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    6102:	e049      	b.n	6198 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6104:	8880      	ldrh	r0, [r0, #4]
    6106:	f8ad 0000 	strh.w	r0, [sp]
    610a:	a902      	add	r1, sp, #8
    610c:	f006 ff86 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6110:	b108      	cbz	r0, 6116 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    6112:	2158      	movs	r1, #88	; 0x58
    6114:	e035      	b.n	6182 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6116:	9803      	ldr	r0, [sp, #12]
    6118:	f810 1f5e 	ldrb.w	r1, [r0, #94]!
    611c:	f88d 1002 	strb.w	r1, [sp, #2]
    6120:	7841      	ldrb	r1, [r0, #1]
    6122:	f88d 1003 	strb.w	r1, [sp, #3]
    6126:	8840      	ldrh	r0, [r0, #2]
    6128:	f8ad 0004 	strh.w	r0, [sp, #4]
    612c:	2102      	movs	r1, #2
    612e:	4668      	mov	r0, sp
    6130:	f008 ff4e 	bl	efd0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6134:	b340      	cbz	r0, 6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6136:	f240 114d 	movw	r1, #333	; 0x14d
    613a:	e022      	b.n	6182 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    613c:	0791      	lsls	r1, r2, #30
    613e:	d42b      	bmi.n	6198 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6140:	8884      	ldrh	r4, [r0, #4]
    6142:	a903      	add	r1, sp, #12
    6144:	4620      	mov	r0, r4
    6146:	f008 fdae 	bl	eca6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    614a:	b110      	cbz	r0, 6152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    614c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6150:	e017      	b.n	6182 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6152:	f8ad 4000 	strh.w	r4, [sp]
    6156:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    615a:	f8ad 0002 	strh.w	r0, [sp, #2]
    615e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6162:	f8ad 0004 	strh.w	r0, [sp, #4]
    6166:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    616a:	f8ad 0006 	strh.w	r0, [sp, #6]
    616e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6172:	f8ad 0008 	strh.w	r0, [sp, #8]
    6176:	4668      	mov	r0, sp
    6178:	f008 fe32 	bl	ede0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    617c:	b120      	cbz	r0, 6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    617e:	f240 115d 	movw	r1, #349	; 0x15d
    6182:	202b      	movs	r0, #43	; 0x2b
    6184:	f7fd fdc6 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6188:	2001      	movs	r0, #1
    618a:	b006      	add	sp, #24
    618c:	bd10      	pop	{r4, pc}
    618e:	0751      	lsls	r1, r2, #29
    6190:	d402      	bmi.n	6198 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6192:	7b80      	ldrb	r0, [r0, #14]
    6194:	07c0      	lsls	r0, r0, #31
    6196:	d0f7      	beq.n	6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6198:	2000      	movs	r0, #0
    619a:	e7f6      	b.n	618a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    619c:	20000f90 	.word	0x20000f90

000061a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    61a0:	b570      	push	{r4, r5, r6, lr}
    61a2:	4604      	mov	r4, r0
    61a4:	7c00      	ldrb	r0, [r0, #16]
    61a6:	b300      	cbz	r0, 61ea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    61a8:	2802      	cmp	r0, #2
    61aa:	d01e      	beq.n	61ea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    61ac:	f05f 0001 	movs.w	r0, #1
    61b0:	f104 0149 	add.w	r1, r4, #73	; 0x49
    61b4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    61b8:	460d      	mov	r5, r1
    61ba:	b1c0      	cbz	r0, 61ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    61bc:	7de0      	ldrb	r0, [r4, #23]
    61be:	b1f0      	cbz	r0, 61fe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    61c0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    61c4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    61c8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    61cc:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    61d0:	7c20      	ldrb	r0, [r4, #16]
    61d2:	f007 fc95 	bl	db00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    61d6:	7620      	strb	r0, [r4, #24]
    61d8:	2008      	movs	r0, #8
    61da:	7660      	strb	r0, [r4, #25]
    61dc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    61e0:	4629      	mov	r1, r5
    61e2:	f007 fc79 	bl	dad8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    61e6:	b9a8      	cbnz	r0, 6214 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    61e8:	e00e      	b.n	6208 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    61ea:	2000      	movs	r0, #0
    61ec:	e7e0      	b.n	61b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    61ee:	2000      	movs	r0, #0
    61f0:	f7fe fc52 	bl	4a98 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    61f4:	2800      	cmp	r0, #0
    61f6:	d1eb      	bne.n	61d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    61f8:	f240 417f 	movw	r1, #1151	; 0x47f
    61fc:	e001      	b.n	6202 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    61fe:	f240 4183 	movw	r1, #1155	; 0x483
    6202:	202d      	movs	r0, #45	; 0x2d
    6204:	f7fd fd86 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6208:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    620c:	4629      	mov	r1, r5
    620e:	f007 fc6c 	bl	daea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6212:	b100      	cbz	r0, 6216 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6214:	2001      	movs	r0, #1
    6216:	76a0      	strb	r0, [r4, #26]
    6218:	7e20      	ldrb	r0, [r4, #24]
    621a:	b910      	cbnz	r0, 6222 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    621c:	78a0      	ldrb	r0, [r4, #2]
    621e:	0740      	lsls	r0, r0, #29
    6220:	d506      	bpl.n	6230 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6222:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6226:	f104 0150 	add.w	r1, r4, #80	; 0x50
    622a:	f006 feb4 	bl	cf96 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    622e:	7660      	strb	r0, [r4, #25]
    6230:	2500      	movs	r5, #0
    6232:	6425      	str	r5, [r4, #64]	; 0x40
    6234:	f005 fc24 	bl	ba80 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6238:	6460      	str	r0, [r4, #68]	; 0x44
    623a:	2100      	movs	r1, #0
    623c:	4620      	mov	r0, r4
    623e:	f007 fdad 	bl	dd9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6242:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6246:	78a0      	ldrb	r0, [r4, #2]
    6248:	0740      	lsls	r0, r0, #29
    624a:	d508      	bpl.n	625e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    624c:	7e20      	ldrb	r0, [r4, #24]
    624e:	2800      	cmp	r0, #0
    6250:	d005      	beq.n	625e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6252:	4620      	mov	r0, r4
    6254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6258:	2100      	movs	r1, #0
    625a:	f000 bdcd 	b.w	6df8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    625e:	bd70      	pop	{r4, r5, r6, pc}

00006260 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6260:	b508      	push	{r3, lr}
    6262:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    6266:	f88d 2000 	strb.w	r2, [sp]
    626a:	9a00      	ldr	r2, [sp, #0]
    626c:	9200      	str	r2, [sp, #0]
    626e:	f89d 3000 	ldrb.w	r3, [sp]
    6272:	2200      	movs	r2, #0
    6274:	b163      	cbz	r3, 6290 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6276:	704a      	strb	r2, [r1, #1]
    6278:	2317      	movs	r3, #23
    627a:	700b      	strb	r3, [r1, #0]
    627c:	f850 3fa9 	ldr.w	r3, [r0, #169]!
    6280:	604b      	str	r3, [r1, #4]
    6282:	6843      	ldr	r3, [r0, #4]
    6284:	608b      	str	r3, [r1, #8]
    6286:	7a03      	ldrb	r3, [r0, #8]
    6288:	730b      	strb	r3, [r1, #12]
    628a:	f800 2c01 	strb.w	r2, [r0, #-1]
    628e:	e03b      	b.n	6308 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6290:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6294:	f88d 3000 	strb.w	r3, [sp]
    6298:	9b00      	ldr	r3, [sp, #0]
    629a:	9300      	str	r3, [sp, #0]
    629c:	f89d 3000 	ldrb.w	r3, [sp]
    62a0:	b143      	cbz	r3, 62b4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    62a2:	704a      	strb	r2, [r1, #1]
    62a4:	2305      	movs	r3, #5
    62a6:	700b      	strb	r3, [r1, #0]
    62a8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    62ac:	604b      	str	r3, [r1, #4]
    62ae:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    62b2:	e029      	b.n	6308 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62b4:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    62b8:	f88d 3000 	strb.w	r3, [sp]
    62bc:	9b00      	ldr	r3, [sp, #0]
    62be:	9300      	str	r3, [sp, #0]
    62c0:	f89d 3000 	ldrb.w	r3, [sp]
    62c4:	b11b      	cbz	r3, 62ce <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    62c6:	bf00      	nop
    62c8:	f007 fd3f 	bl	dd4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    62cc:	e01c      	b.n	6308 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62ce:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    62d2:	f88d 3000 	strb.w	r3, [sp]
    62d6:	9b00      	ldr	r3, [sp, #0]
    62d8:	9300      	str	r3, [sp, #0]
    62da:	f89d 3000 	ldrb.w	r3, [sp]
    62de:	b1ab      	cbz	r3, 630c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    62e0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    62e4:	f88d 3000 	strb.w	r3, [sp]
    62e8:	9b00      	ldr	r3, [sp, #0]
    62ea:	9300      	str	r3, [sp, #0]
    62ec:	f89d 3000 	ldrb.w	r3, [sp]
    62f0:	2b00      	cmp	r3, #0
    62f2:	d1e9      	bne.n	62c8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    62f4:	704a      	strb	r2, [r1, #1]
    62f6:	2314      	movs	r3, #20
    62f8:	700b      	strb	r3, [r1, #0]
    62fa:	f850 3f9c 	ldr.w	r3, [r0, #156]!
    62fe:	604b      	str	r3, [r1, #4]
    6300:	8883      	ldrh	r3, [r0, #4]
    6302:	810b      	strh	r3, [r1, #8]
    6304:	f800 2c02 	strb.w	r2, [r0, #-2]
    6308:	2001      	movs	r0, #1
    630a:	bd08      	pop	{r3, pc}
    630c:	2000      	movs	r0, #0
    630e:	bd08      	pop	{r3, pc}

00006310 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6310:	b530      	push	{r4, r5, lr}
    6312:	460c      	mov	r4, r1
    6314:	b08d      	sub	sp, #52	; 0x34
    6316:	4605      	mov	r5, r0
    6318:	4601      	mov	r1, r0
    631a:	2220      	movs	r2, #32
    631c:	a802      	add	r0, sp, #8
    631e:	f005 fd2f 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6322:	a80a      	add	r0, sp, #40	; 0x28
    6324:	f007 fde7 	bl	def6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6328:	7aa0      	ldrb	r0, [r4, #10]
    632a:	f88d 0018 	strb.w	r0, [sp, #24]
    632e:	7820      	ldrb	r0, [r4, #0]
    6330:	f88d 0008 	strb.w	r0, [sp, #8]
    6334:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6338:	f8ad 0000 	strh.w	r0, [sp]
    633c:	f89d 0000 	ldrb.w	r0, [sp]
    6340:	f000 0101 	and.w	r1, r0, #1
    6344:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6348:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    634c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6350:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6354:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6358:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    635c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6360:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6364:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6368:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    636c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6370:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6374:	f8ad 000a 	strh.w	r0, [sp, #10]
    6378:	7d20      	ldrb	r0, [r4, #20]
    637a:	2801      	cmp	r0, #1
    637c:	d006      	beq.n	638c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    637e:	2802      	cmp	r0, #2
    6380:	d004      	beq.n	638c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6382:	f240 2185 	movw	r1, #645	; 0x285
    6386:	2006      	movs	r0, #6
    6388:	f7fd fcc4 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    638c:	f88d 000c 	strb.w	r0, [sp, #12]
    6390:	7a61      	ldrb	r1, [r4, #9]
    6392:	a80a      	add	r0, sp, #40	; 0x28
    6394:	f007 fd96 	bl	dec4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6398:	7d20      	ldrb	r0, [r4, #20]
    639a:	2101      	movs	r1, #1
    639c:	2802      	cmp	r0, #2
    639e:	d102      	bne.n	63a6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    63a0:	7d60      	ldrb	r0, [r4, #21]
    63a2:	1c40      	adds	r0, r0, #1
    63a4:	b2c1      	uxtb	r1, r0
    63a6:	7ea0      	ldrb	r0, [r4, #26]
    63a8:	1c40      	adds	r0, r0, #1
    63aa:	b2c2      	uxtb	r2, r0
    63ac:	a80a      	add	r0, sp, #40	; 0x28
    63ae:	f007 fd50 	bl	de52 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    63b2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    63b6:	0700      	lsls	r0, r0, #28
    63b8:	d501      	bpl.n	63be <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    63ba:	2000      	movs	r0, #0
    63bc:	e020      	b.n	6400 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    63be:	a80a      	add	r0, sp, #40	; 0x28
    63c0:	f007 fd59 	bl	de76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    63c4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    63c8:	2228      	movs	r2, #40	; 0x28
    63ca:	f000 fdbd 	bl	6f48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    63ce:	f240 2171 	movw	r1, #625	; 0x271
    63d2:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    63d6:	fbb0 f0f1 	udiv	r0, r0, r1
    63da:	4348      	muls	r0, r1
    63dc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    63e0:	f240 2371 	movw	r3, #625	; 0x271
    63e4:	0a0a      	lsrs	r2, r1, #8
    63e6:	f240 2171 	movw	r1, #625	; 0x271
    63ea:	434a      	muls	r2, r1
    63ec:	f8d4 1005 	ldr.w	r1, [r4, #5]
    63f0:	0a09      	lsrs	r1, r1, #8
    63f2:	4359      	muls	r1, r3
    63f4:	4290      	cmp	r0, r2
    63f6:	d801      	bhi.n	63fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    63f8:	9204      	str	r2, [sp, #16]
    63fa:	e004      	b.n	6406 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    63fc:	4288      	cmp	r0, r1
    63fe:	d801      	bhi.n	6404 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6400:	9004      	str	r0, [sp, #16]
    6402:	e000      	b.n	6406 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6404:	9104      	str	r1, [sp, #16]
    6406:	7ca0      	ldrb	r0, [r4, #18]
    6408:	f88d 0017 	strb.w	r0, [sp, #23]
    640c:	7e20      	ldrb	r0, [r4, #24]
    640e:	2801      	cmp	r0, #1
    6410:	d000      	beq.n	6414 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6412:	2000      	movs	r0, #0
    6414:	f88d 0014 	strb.w	r0, [sp, #20]
    6418:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    641c:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    6420:	2220      	movs	r2, #32
    6422:	a902      	add	r1, sp, #8
    6424:	4628      	mov	r0, r5
    6426:	f005 fcab 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    642a:	980a      	ldr	r0, [sp, #40]	; 0x28
    642c:	6228      	str	r0, [r5, #32]
    642e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6432:	84a8      	strh	r0, [r5, #36]	; 0x24
    6434:	7ae0      	ldrb	r0, [r4, #11]
    6436:	b168      	cbz	r0, 6454 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6438:	2802      	cmp	r0, #2
    643a:	d00b      	beq.n	6454 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    643c:	f05f 0001 	movs.w	r0, #1
    6440:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    6444:	68e0      	ldr	r0, [r4, #12]
    6446:	6528      	str	r0, [r5, #80]	; 0x50
    6448:	8a20      	ldrh	r0, [r4, #16]
    644a:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    644e:	b00d      	add	sp, #52	; 0x34
    6450:	2000      	movs	r0, #0
    6452:	bd30      	pop	{r4, r5, pc}
    6454:	2000      	movs	r0, #0
    6456:	e7f3      	b.n	6440 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

00006458 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6458:	4a0a      	ldr	r2, [pc, #40]	; (6484 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    645a:	b510      	push	{r4, lr}
    645c:	2100      	movs	r1, #0
    645e:	7011      	strb	r1, [r2, #0]
    6460:	4c09      	ldr	r4, [pc, #36]	; (6488 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6462:	6060      	str	r0, [r4, #4]
    6464:	f000 f822 	bl	64ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6468:	b110      	cbz	r0, 6470 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    646a:	f44f 7148 	mov.w	r1, #800	; 0x320
    646e:	e004      	b.n	647a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6470:	68a0      	ldr	r0, [r4, #8]
    6472:	2800      	cmp	r0, #0
    6474:	d104      	bne.n	6480 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6476:	f240 3123 	movw	r1, #803	; 0x323
    647a:	202d      	movs	r0, #45	; 0x2d
    647c:	f7fd fc4a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6480:	bd10      	pop	{r4, pc}
    6482:	0000      	.short	0x0000
    6484:	20000fac 	.word	0x20000fac
    6488:	20000104 	.word	0x20000104

0000648c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    648c:	4902      	ldr	r1, [pc, #8]	; (6498 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    648e:	4801      	ldr	r0, [pc, #4]	; (6494 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6490:	6088      	str	r0, [r1, #8]
    6492:	4770      	bx	lr
    6494:	00006f30 	.word	0x00006f30
    6498:	20000104 	.word	0x20000104

0000649c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    649c:	4902      	ldr	r1, [pc, #8]	; (64a8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    649e:	6008      	str	r0, [r1, #0]
    64a0:	6889      	ldr	r1, [r1, #8]
    64a2:	6809      	ldr	r1, [r1, #0]
    64a4:	4708      	bx	r1
    64a6:	0000      	.short	0x0000
    64a8:	20000104 	.word	0x20000104

000064ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    64ac:	4808      	ldr	r0, [pc, #32]	; (64d0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    64ae:	b510      	push	{r4, lr}
    64b0:	7801      	ldrb	r1, [r0, #0]
    64b2:	b111      	cbz	r1, 64ba <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    64b4:	240c      	movs	r4, #12
    64b6:	4620      	mov	r0, r4
    64b8:	bd10      	pop	{r4, pc}
    64ba:	2400      	movs	r4, #0
    64bc:	6004      	str	r4, [r0, #0]
    64be:	6044      	str	r4, [r0, #4]
    64c0:	6084      	str	r4, [r0, #8]
    64c2:	60c4      	str	r4, [r0, #12]
    64c4:	f004 f92e 	bl	a724 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    64c8:	f003 ff70 	bl	a3ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    64cc:	e7f3      	b.n	64b6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    64ce:	0000      	.short	0x0000
    64d0:	20000fac 	.word	0x20000fac

000064d4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    64d4:	4904      	ldr	r1, [pc, #16]	; (64e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    64d6:	b510      	push	{r4, lr}
    64d8:	7809      	ldrb	r1, [r1, #0]
    64da:	2901      	cmp	r1, #1
    64dc:	d101      	bne.n	64e2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    64de:	f000 fb77 	bl	6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    64e2:	2000      	movs	r0, #0
    64e4:	bd10      	pop	{r4, pc}
    64e6:	0000      	.short	0x0000
    64e8:	20000fac 	.word	0x20000fac

000064ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    64ec:	4902      	ldr	r1, [pc, #8]	; (64f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    64ee:	4801      	ldr	r0, [pc, #4]	; (64f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    64f0:	6008      	str	r0, [r1, #0]
    64f2:	4770      	bx	lr
    64f4:	00006d1d 	.word	0x00006d1d
    64f8:	20000110 	.word	0x20000110
    64fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6500:	000f      	movs	r7, r1
    6502:	4604      	mov	r4, r0
    6504:	d023      	beq.n	654e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6506:	f104 0020 	add.w	r0, r4, #32
    650a:	4605      	mov	r5, r0
    650c:	f007 fcdc 	bl	dec8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6510:	b9b0      	cbnz	r0, 6540 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6512:	78a0      	ldrb	r0, [r4, #2]
    6514:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6518:	b350      	cbz	r0, 6570 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    651a:	4628      	mov	r0, r5
    651c:	f007 fcab 	bl	de76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6520:	4606      	mov	r6, r0
    6522:	4628      	mov	r0, r5
    6524:	f007 fcd0 	bl	dec8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6528:	1a30      	subs	r0, r6, r0
    652a:	b2c0      	uxtb	r0, r0
    652c:	f007 fd21 	bl	df72 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6530:	4601      	mov	r1, r0
    6532:	4835      	ldr	r0, [pc, #212]	; (6608 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6534:	6842      	ldr	r2, [r0, #4]
    6536:	4411      	add	r1, r2
    6538:	6041      	str	r1, [r0, #4]
    653a:	4628      	mov	r0, r5
    653c:	f007 fce2 	bl	df04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6540:	4628      	mov	r0, r5
    6542:	f007 fca4 	bl	de8e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6546:	4601      	mov	r1, r0
    6548:	4620      	mov	r0, r4
    654a:	f007 fc63 	bl	de14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    654e:	4d2f      	ldr	r5, [pc, #188]	; (660c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6550:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    6554:	2100      	movs	r1, #0
    6556:	6868      	ldr	r0, [r5, #4]
    6558:	8001      	strh	r1, [r0, #0]
    655a:	f007 fc71 	bl	de40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    655e:	8860      	ldrh	r0, [r4, #2]
    6560:	2813      	cmp	r0, #19
    6562:	d013      	beq.n	658c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6564:	dc09      	bgt.n	657a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6566:	2810      	cmp	r0, #16
    6568:	d036      	beq.n	65d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    656a:	2812      	cmp	r0, #18
    656c:	d109      	bne.n	6582 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    656e:	e031      	b.n	65d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6570:	4620      	mov	r0, r4
    6572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6576:	f000 bb2b 	b.w	6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    657a:	2815      	cmp	r0, #21
    657c:	d00f      	beq.n	659e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    657e:	281d      	cmp	r0, #29
    6580:	d00d      	beq.n	659e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6582:	f240 6196 	movw	r1, #1686	; 0x696
    6586:	202d      	movs	r0, #45	; 0x2d
    6588:	f7fd fbc4 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    658c:	2100      	movs	r1, #0
    658e:	6868      	ldr	r0, [r5, #4]
    6590:	f007 f8b3 	bl	d6fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6594:	2101      	movs	r1, #1
    6596:	6868      	ldr	r0, [r5, #4]
    6598:	f007 fc52 	bl	de40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    659c:	e020      	b.n	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    659e:	2101      	movs	r1, #1
    65a0:	6868      	ldr	r0, [r5, #4]
    65a2:	f007 f8aa 	bl	d6fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    65a6:	2101      	movs	r1, #1
    65a8:	6868      	ldr	r0, [r5, #4]
    65aa:	f007 fc49 	bl	de40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    65ae:	b136      	cbz	r6, 65be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    65b0:	f104 0157 	add.w	r1, r4, #87	; 0x57
    65b4:	6868      	ldr	r0, [r5, #4]
    65b6:	f007 f8bb 	bl	d730 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65ba:	2101      	movs	r1, #1
    65bc:	e006      	b.n	65cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    65be:	f104 0150 	add.w	r1, r4, #80	; 0x50
    65c2:	6868      	ldr	r0, [r5, #4]
    65c4:	f007 f8b4 	bl	d730 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65c8:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    65cc:	6868      	ldr	r0, [r5, #4]
    65ce:	f007 f8b5 	bl	d73c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    65d2:	e005      	b.n	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    65d4:	2106      	movs	r1, #6
    65d6:	e000      	b.n	65da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    65d8:	2102      	movs	r1, #2
    65da:	6868      	ldr	r0, [r5, #4]
    65dc:	f007 f88d 	bl	d6fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    65e0:	4620      	mov	r0, r4
    65e2:	f000 fc7f 	bl	6ee4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    65e6:	8860      	ldrh	r0, [r4, #2]
    65e8:	281d      	cmp	r0, #29
    65ea:	d006      	beq.n	65fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65ec:	2815      	cmp	r0, #21
    65ee:	d004      	beq.n	65fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65f0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    65f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    65f4:	6868      	ldr	r0, [r5, #4]
    65f6:	f007 f870 	bl	d6da <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    65fa:	4639      	mov	r1, r7
    65fc:	4620      	mov	r0, r4
    65fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6602:	f000 b9e5 	b.w	69d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    6606:	0000      	.short	0x0000
    6608:	20000fac 	.word	0x20000fac
    660c:	20000104 	.word	0x20000104
    6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6614:	4d28      	ldr	r5, [pc, #160]	; (66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    6616:	4680      	mov	r8, r0
    6618:	7828      	ldrb	r0, [r5, #0]
    661a:	2802      	cmp	r0, #2
    661c:	d005      	beq.n	662a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    661e:	7828      	ldrb	r0, [r5, #0]
    6620:	2803      	cmp	r0, #3
    6622:	d002      	beq.n	662a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6624:	f640 4191 	movw	r1, #3217	; 0xc91
    6628:	e01f      	b.n	666a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    662a:	4c24      	ldr	r4, [pc, #144]	; (66bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    662c:	6820      	ldr	r0, [r4, #0]
    662e:	7b01      	ldrb	r1, [r0, #12]
    6630:	b109      	cbz	r1, 6636 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6632:	f007 fbfa 	bl	de2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    6636:	6860      	ldr	r0, [r4, #4]
    6638:	2700      	movs	r7, #0
    663a:	f1b8 0f00 	cmp.w	r8, #0
    663e:	7800      	ldrb	r0, [r0, #0]
    6640:	f000 060f 	and.w	r6, r0, #15
    6644:	d01f      	beq.n	6686 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6646:	f004 fa7b 	bl	ab40 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    664a:	b1e0      	cbz	r0, 6686 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    664c:	4639      	mov	r1, r7
    664e:	6860      	ldr	r0, [r4, #4]
    6650:	f007 f809 	bl	d666 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6654:	b1b8      	cbz	r0, 6686 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6656:	782a      	ldrb	r2, [r5, #0]
    6658:	6820      	ldr	r0, [r4, #0]
    665a:	4631      	mov	r1, r6
    665c:	2a02      	cmp	r2, #2
    665e:	d007      	beq.n	6670 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6660:	782a      	ldrb	r2, [r5, #0]
    6662:	2a03      	cmp	r2, #3
    6664:	d004      	beq.n	6670 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6666:	f640 416a 	movw	r1, #3178	; 0xc6a
    666a:	202d      	movs	r0, #45	; 0x2d
    666c:	f7fd fb52 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6670:	68a2      	ldr	r2, [r4, #8]
    6672:	782b      	ldrb	r3, [r5, #0]
    6674:	6952      	ldr	r2, [r2, #20]
    6676:	f06f 0607 	mvn.w	r6, #7
    667a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    667e:	58d2      	ldr	r2, [r2, r3]
    6680:	4790      	blx	r2
    6682:	4606      	mov	r6, r0
    6684:	e000      	b.n	6688 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    6686:	2601      	movs	r6, #1
    6688:	7ba8      	ldrb	r0, [r5, #14]
    668a:	b118      	cbz	r0, 6694 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    668c:	f004 f84a 	bl	a724 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6690:	f003 fe8c 	bl	a3ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6694:	2e00      	cmp	r6, #0
    6696:	d00d      	beq.n	66b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    6698:	6820      	ldr	r0, [r4, #0]
    669a:	f007 fc80 	bl	df9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    669e:	b120      	cbz	r0, 66aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    66a0:	68a0      	ldr	r0, [r4, #8]
    66a2:	6880      	ldr	r0, [r0, #8]
    66a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66a8:	4700      	bx	r0
    66aa:	6820      	ldr	r0, [r4, #0]
    66ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66b0:	f000 ba8e 	b.w	6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    66b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66b8:	20000fac 	.word	0x20000fac
    66bc:	20000104 	.word	0x20000104
    66c0:	b510      	push	{r4, lr}
    66c2:	2903      	cmp	r1, #3
    66c4:	d002      	beq.n	66cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    66c6:	2905      	cmp	r1, #5
    66c8:	d10a      	bne.n	66e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66ca:	e002      	b.n	66d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    66cc:	f000 fb5a 	bl	6d84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58c>
    66d0:	e003      	b.n	66da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    66d2:	4904      	ldr	r1, [pc, #16]	; (66e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    66d4:	6809      	ldr	r1, [r1, #0]
    66d6:	b109      	cbz	r1, 66dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    66d8:	4788      	blx	r1
    66da:	b108      	cbz	r0, 66e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66dc:	2000      	movs	r0, #0
    66de:	bd10      	pop	{r4, pc}
    66e0:	2001      	movs	r0, #1
    66e2:	bd10      	pop	{r4, pc}
    66e4:	20000110 	.word	0x20000110
    66e8:	4a09      	ldr	r2, [pc, #36]	; (6710 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    66ea:	0003      	movs	r3, r0
    66ec:	6810      	ldr	r0, [r2, #0]
    66ee:	d001      	beq.n	66f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    66f0:	f000 ba6e 	b.w	6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    66f4:	2900      	cmp	r1, #0
    66f6:	d009      	beq.n	670c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    66f8:	6891      	ldr	r1, [r2, #8]
    66fa:	4a06      	ldr	r2, [pc, #24]	; (6714 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    66fc:	6909      	ldr	r1, [r1, #16]
    66fe:	7812      	ldrb	r2, [r2, #0]
    6700:	f06f 030f 	mvn.w	r3, #15
    6704:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6708:	5889      	ldr	r1, [r1, r2]
    670a:	4708      	bx	r1
    670c:	4770      	bx	lr
    670e:	0000      	.short	0x0000
    6710:	20000104 	.word	0x20000104
    6714:	20000fac 	.word	0x20000fac
    6718:	b570      	push	{r4, r5, r6, lr}
    671a:	4604      	mov	r4, r0
    671c:	8840      	ldrh	r0, [r0, #2]
    671e:	2500      	movs	r5, #0
    6720:	2810      	cmp	r0, #16
    6722:	d014      	beq.n	674e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    6724:	4e14      	ldr	r6, [pc, #80]	; (6778 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    6726:	7bb0      	ldrb	r0, [r6, #14]
    6728:	b120      	cbz	r0, 6734 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    672a:	f003 fe5f 	bl	a3ec <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    672e:	2040      	movs	r0, #64	; 0x40
    6730:	f004 f808 	bl	a744 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6734:	4811      	ldr	r0, [pc, #68]	; (677c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6736:	6840      	ldr	r0, [r0, #4]
    6738:	f004 fac2 	bl	acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    673c:	78a0      	ldrb	r0, [r4, #2]
    673e:	0740      	lsls	r0, r0, #29
    6740:	d413      	bmi.n	676a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    6742:	7be0      	ldrb	r0, [r4, #15]
    6744:	2801      	cmp	r0, #1
    6746:	d008      	beq.n	675a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    6748:	2803      	cmp	r0, #3
    674a:	d006      	beq.n	675a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    674c:	e006      	b.n	675c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    674e:	4620      	mov	r0, r4
    6750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6754:	2101      	movs	r1, #1
    6756:	f7ff bed1 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    675a:	2510      	movs	r5, #16
    675c:	2100      	movs	r1, #0
    675e:	f045 020e 	orr.w	r2, r5, #14
    6762:	7923      	ldrb	r3, [r4, #4]
    6764:	4608      	mov	r0, r1
    6766:	f004 fb35 	bl	add4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    676a:	2000      	movs	r0, #0
    676c:	f004 f940 	bl	a9f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6770:	2002      	movs	r0, #2
    6772:	7030      	strb	r0, [r6, #0]
    6774:	bd70      	pop	{r4, r5, r6, pc}
    6776:	0000      	.short	0x0000
    6778:	20000fac 	.word	0x20000fac
    677c:	20000104 	.word	0x20000104
    6780:	b510      	push	{r4, lr}
    6782:	4c12      	ldr	r4, [pc, #72]	; (67cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    6784:	6820      	ldr	r0, [r4, #0]
    6786:	f000 f825 	bl	67d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    678a:	6820      	ldr	r0, [r4, #0]
    678c:	f007 fc07 	bl	df9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6790:	2800      	cmp	r0, #0
    6792:	6820      	ldr	r0, [r4, #0]
    6794:	d00b      	beq.n	67ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    6796:	490e      	ldr	r1, [pc, #56]	; (67d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6798:	780a      	ldrb	r2, [r1, #0]
    679a:	2a02      	cmp	r2, #2
    679c:	d00b      	beq.n	67b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    679e:	780a      	ldrb	r2, [r1, #0]
    67a0:	2a03      	cmp	r2, #3
    67a2:	d008      	beq.n	67b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    67a4:	f640 31a5 	movw	r1, #2981	; 0xba5
    67a8:	202d      	movs	r0, #45	; 0x2d
    67aa:	f7fd fab3 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67b2:	f000 ba0d 	b.w	6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    67b6:	68a2      	ldr	r2, [r4, #8]
    67b8:	7809      	ldrb	r1, [r1, #0]
    67ba:	68d2      	ldr	r2, [r2, #12]
    67bc:	f06f 0307 	mvn.w	r3, #7
    67c0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    67c4:	5851      	ldr	r1, [r2, r1]
    67c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67ca:	4708      	bx	r1
    67cc:	20000104 	.word	0x20000104
    67d0:	20000fac 	.word	0x20000fac
    67d4:	b510      	push	{r4, lr}
    67d6:	7b01      	ldrb	r1, [r0, #12]
    67d8:	b109      	cbz	r1, 67de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    67da:	f007 fb26 	bl	de2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    67de:	4805      	ldr	r0, [pc, #20]	; (67f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    67e0:	7b80      	ldrb	r0, [r0, #14]
    67e2:	2800      	cmp	r0, #0
    67e4:	d005      	beq.n	67f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    67e6:	f003 ff9d 	bl	a724 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    67ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67ee:	f003 bddd 	b.w	a3ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    67f2:	bd10      	pop	{r4, pc}
    67f4:	20000fac 	.word	0x20000fac

000067f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    67f8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    67fc:	4d5a      	ldr	r5, [pc, #360]	; (6968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    67fe:	4604      	mov	r4, r0
    6800:	7828      	ldrb	r0, [r5, #0]
    6802:	bbe8      	cbnz	r0, 6880 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    6804:	7820      	ldrb	r0, [r4, #0]
    6806:	28ff      	cmp	r0, #255	; 0xff
    6808:	d049      	beq.n	689e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    680a:	f04f 0900 	mov.w	r9, #0
    680e:	f8a5 900c 	strh.w	r9, [r5, #12]
    6812:	f8c5 9004 	str.w	r9, [r5, #4]
    6816:	f885 9001 	strb.w	r9, [r5, #1]
    681a:	f885 9002 	strb.w	r9, [r5, #2]
    681e:	f884 9061 	strb.w	r9, [r4, #97]	; 0x61
    6822:	4648      	mov	r0, r9
    6824:	f004 f94c 	bl	aac0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    6828:	4b50      	ldr	r3, [pc, #320]	; (696c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    682a:	f8df a144 	ldr.w	sl, [pc, #324]	; 6970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    682e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6830:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6834:	f8da 0008 	ldr.w	r0, [sl, #8]
    6838:	6840      	ldr	r0, [r0, #4]
    683a:	9003      	str	r0, [sp, #12]
    683c:	4668      	mov	r0, sp
    683e:	f004 f8ab 	bl	a998 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6842:	f004 f9af 	bl	aba4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6846:	f003 ff6d 	bl	a724 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    684a:	f003 fdaf 	bl	a3ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    684e:	4847      	ldr	r0, [pc, #284]	; (696c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    6850:	1f40      	subs	r0, r0, #5
    6852:	f004 fb11 	bl	ae78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6856:	4845      	ldr	r0, [pc, #276]	; (696c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    6858:	3808      	subs	r0, #8
    685a:	f004 fb19 	bl	ae90 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    685e:	f104 0020 	add.w	r0, r4, #32
    6862:	4606      	mov	r6, r0
    6864:	f007 fb4e 	bl	df04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6868:	4630      	mov	r0, r6
    686a:	f007 fb10 	bl	de8e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    686e:	4601      	mov	r1, r0
    6870:	4620      	mov	r0, r4
    6872:	f007 facf 	bl	de14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6876:	f994 000e 	ldrsb.w	r0, [r4, #14]
    687a:	f004 fa1b 	bl	acb4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    687e:	e000      	b.n	6882 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    6880:	e00d      	b.n	689e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6882:	7921      	ldrb	r1, [r4, #4]
    6884:	2000      	movs	r0, #0
    6886:	f004 f80b 	bl	a8a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    688a:	2601      	movs	r6, #1
    688c:	60a8      	str	r0, [r5, #8]
    688e:	b150      	cbz	r0, 68a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6890:	210f      	movs	r1, #15
    6892:	2005      	movs	r0, #5
    6894:	f003 ff6a 	bl	a76c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    6898:	7ea0      	ldrb	r0, [r4, #26]
    689a:	b958      	cbnz	r0, 68b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    689c:	e005      	b.n	68aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb2>
    689e:	200c      	movs	r0, #12
    68a0:	b004      	add	sp, #16
    68a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    68a6:	702e      	strb	r6, [r5, #0]
    68a8:	e05b      	b.n	6962 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16a>
    68aa:	7e20      	ldrb	r0, [r4, #24]
    68ac:	b910      	cbnz	r0, 68b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    68ae:	78a0      	ldrb	r0, [r4, #2]
    68b0:	0740      	lsls	r0, r0, #29
    68b2:	d52b      	bpl.n	690c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    68b4:	f005 f8e4 	bl	ba80 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    68b8:	4683      	mov	fp, r0
    68ba:	4659      	mov	r1, fp
    68bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
    68be:	f7fa feb7 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    68c2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 6974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    68c6:	4607      	mov	r7, r0
    68c8:	fb90 f1f8 	sdiv	r1, r0, r8
    68cc:	fb08 7011 	mls	r0, r8, r1, r7
    68d0:	4241      	negs	r1, r0
    68d2:	4658      	mov	r0, fp
    68d4:	f7fa fe7a 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    68d8:	6460      	str	r0, [r4, #68]	; 0x44
    68da:	fb97 f0f8 	sdiv	r0, r7, r8
    68de:	6c21      	ldr	r1, [r4, #64]	; 0x40
    68e0:	4408      	add	r0, r1
    68e2:	6420      	str	r0, [r4, #64]	; 0x40
    68e4:	f7fe ff6a 	bl	57bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    68e8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    68ea:	4288      	cmp	r0, r1
    68ec:	d80e      	bhi.n	690c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    68ee:	e9c4 9b10 	strd	r9, fp, [r4, #64]	; 0x40
    68f2:	2101      	movs	r1, #1
    68f4:	4620      	mov	r0, r4
    68f6:	f007 fa51 	bl	dd9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    68fa:	78a0      	ldrb	r0, [r4, #2]
    68fc:	0740      	lsls	r0, r0, #29
    68fe:	d505      	bpl.n	690c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6900:	7e20      	ldrb	r0, [r4, #24]
    6902:	b118      	cbz	r0, 690c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6904:	2101      	movs	r1, #1
    6906:	4620      	mov	r0, r4
    6908:	f000 fa76 	bl	6df8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    690c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    6910:	f104 0049 	add.w	r0, r4, #73	; 0x49
    6914:	f004 faa4 	bl	ae60 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    6918:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    691c:	2802      	cmp	r0, #2
    691e:	d10a      	bne.n	6936 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    6920:	4622      	mov	r2, r4
    6922:	e9d2 3719 	ldrd	r3, r7, [r2, #100]	; 0x64
    6926:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    692a:	e9c4 370c 	strd	r3, r7, [r4, #48]	; 0x30
    692e:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
    6932:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    6936:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    693a:	2802      	cmp	r0, #2
    693c:	d109      	bne.n	6952 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    693e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    6942:	e9d4 231b 	ldrd	r2, r3, [r4, #108]	; 0x6c
    6946:	e9c4 101b 	strd	r1, r0, [r4, #108]	; 0x6c
    694a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    694e:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    6952:	f7fe ff99 	bl	5888 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6956:	2103      	movs	r1, #3
    6958:	f8da 0004 	ldr.w	r0, [sl, #4]
    695c:	f006 fb0e 	bl	cf7c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6960:	73a8      	strb	r0, [r5, #14]
    6962:	2000      	movs	r0, #0
    6964:	e79c      	b.n	68a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa8>
    6966:	0000      	.short	0x0000
    6968:	20000fac 	.word	0x20000fac
    696c:	00006f10 	.word	0x00006f10
    6970:	20000104 	.word	0x20000104
    6974:	000f4240 	.word	0x000f4240
    6978:	b510      	push	{r4, lr}
    697a:	4604      	mov	r4, r0
    697c:	f7ff ff3c 	bl	67f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6980:	2800      	cmp	r0, #0
    6982:	d108      	bne.n	6996 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    6984:	4804      	ldr	r0, [pc, #16]	; (6998 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    6986:	7800      	ldrb	r0, [r0, #0]
    6988:	2801      	cmp	r0, #1
    698a:	d003      	beq.n	6994 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    698c:	2100      	movs	r1, #0
    698e:	4620      	mov	r0, r4
    6990:	f7ff fdb4 	bl	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6994:	2000      	movs	r0, #0
    6996:	bd10      	pop	{r4, pc}
    6998:	20000fac 	.word	0x20000fac
    699c:	480a      	ldr	r0, [pc, #40]	; (69c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    699e:	b510      	push	{r4, lr}
    69a0:	490a      	ldr	r1, [pc, #40]	; (69cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    69a2:	6804      	ldr	r4, [r0, #0]
    69a4:	7808      	ldrb	r0, [r1, #0]
    69a6:	2800      	cmp	r0, #0
    69a8:	d00d      	beq.n	69c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    69aa:	7808      	ldrb	r0, [r1, #0]
    69ac:	2802      	cmp	r0, #2
    69ae:	d002      	beq.n	69b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    69b0:	7808      	ldrb	r0, [r1, #0]
    69b2:	2803      	cmp	r0, #3
    69b4:	d102      	bne.n	69bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    69b6:	4620      	mov	r0, r4
    69b8:	f7ff ff0c 	bl	67d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    69bc:	4620      	mov	r0, r4
    69be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69c2:	f000 b905 	b.w	6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    69c6:	bd10      	pop	{r4, pc}
    69c8:	20000104 	.word	0x20000104
    69cc:	20000fac 	.word	0x20000fac
    69d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69d4:	4604      	mov	r4, r0
    69d6:	4827      	ldr	r0, [pc, #156]	; (6a74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    69d8:	460d      	mov	r5, r1
    69da:	6840      	ldr	r0, [r0, #4]
    69dc:	f004 f970 	bl	acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69e0:	4e25      	ldr	r6, [pc, #148]	; (6a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    69e2:	2004      	movs	r0, #4
    69e4:	7030      	strb	r0, [r6, #0]
    69e6:	b325      	cbz	r5, 6a32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    69e8:	8860      	ldrh	r0, [r4, #2]
    69ea:	2810      	cmp	r0, #16
    69ec:	d02a      	beq.n	6a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    69ee:	f104 0020 	add.w	r0, r4, #32
    69f2:	4680      	mov	r8, r0
    69f4:	68b5      	ldr	r5, [r6, #8]
    69f6:	f007 fa3e 	bl	de76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    69fa:	4607      	mov	r7, r0
    69fc:	4640      	mov	r0, r8
    69fe:	f007 fa63 	bl	dec8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6a02:	1a38      	subs	r0, r7, r0
    6a04:	1e40      	subs	r0, r0, #1
    6a06:	b2c0      	uxtb	r0, r0
    6a08:	8861      	ldrh	r1, [r4, #2]
    6a0a:	2228      	movs	r2, #40	; 0x28
    6a0c:	f000 fabc 	bl	6f88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6a10:	4405      	add	r5, r0
    6a12:	78a0      	ldrb	r0, [r4, #2]
    6a14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6a18:	b130      	cbz	r0, 6a28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    6a1a:	6870      	ldr	r0, [r6, #4]
    6a1c:	4405      	add	r5, r0
    6a1e:	f007 faac 	bl	df7a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6a22:	4428      	add	r0, r5
    6a24:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    6a28:	7922      	ldrb	r2, [r4, #4]
    6a2a:	4629      	mov	r1, r5
    6a2c:	2000      	movs	r0, #0
    6a2e:	f004 f955 	bl	acdc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6a32:	8860      	ldrh	r0, [r4, #2]
    6a34:	2813      	cmp	r0, #19
    6a36:	d013      	beq.n	6a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a38:	dc09      	bgt.n	6a4e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    6a3a:	2810      	cmp	r0, #16
    6a3c:	d018      	beq.n	6a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    6a3e:	2812      	cmp	r0, #18
    6a40:	d109      	bne.n	6a56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    6a42:	e00d      	b.n	6a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a44:	7921      	ldrb	r1, [r4, #4]
    6a46:	2000      	movs	r0, #0
    6a48:	f003 fede 	bl	a808 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6a4c:	e7f1      	b.n	6a32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6a4e:	2815      	cmp	r0, #21
    6a50:	d006      	beq.n	6a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a52:	281d      	cmp	r0, #29
    6a54:	d004      	beq.n	6a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a56:	f640 511c 	movw	r1, #3356	; 0xd1c
    6a5a:	202d      	movs	r0, #45	; 0x2d
    6a5c:	f7fd f95a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a60:	7923      	ldrb	r3, [r4, #4]
    6a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a66:	2201      	movs	r2, #1
    6a68:	4611      	mov	r1, r2
    6a6a:	2000      	movs	r0, #0
    6a6c:	f004 b9b2 	b.w	add4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a74:	20000104 	.word	0x20000104
    6a78:	20000fac 	.word	0x20000fac
    6a7c:	b510      	push	{r4, lr}
    6a7e:	4604      	mov	r4, r0
    6a80:	7800      	ldrb	r0, [r0, #0]
    6a82:	460b      	mov	r3, r1
    6a84:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    6a88:	29ff      	cmp	r1, #255	; 0xff
    6a8a:	d010      	beq.n	6aae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    6a8c:	f104 02ab 	add.w	r2, r4, #171	; 0xab
    6a90:	1e51      	subs	r1, r2, #1
    6a92:	4618      	mov	r0, r3
    6a94:	f7fe fe10 	bl	56b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6a98:	b130      	cbz	r0, 6aa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    6a9a:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    6a9e:	f040 0002 	orr.w	r0, r0, #2
    6aa2:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    6aa6:	e011      	b.n	6acc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    6aa8:	f640 712c 	movw	r1, #3884	; 0xf2c
    6aac:	e01d      	b.n	6aea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f2>
    6aae:	4810      	ldr	r0, [pc, #64]	; (6af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>)
    6ab0:	6840      	ldr	r0, [r0, #4]
    6ab2:	7801      	ldrb	r1, [r0, #0]
    6ab4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6ab8:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    6abc:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6ac0:	f8c4 10ab 	str.w	r1, [r4, #171]	; 0xab
    6ac4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6ac8:	f8a4 00af 	strh.w	r0, [r4, #175]	; 0xaf
    6acc:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6ad0:	287f      	cmp	r0, #127	; 0x7f
    6ad2:	d008      	beq.n	6ae6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    6ad4:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
    6ad8:	207f      	movs	r0, #127	; 0x7f
    6ada:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6ade:	3492      	adds	r4, #146	; 0x92
    6ae0:	2001      	movs	r0, #1
    6ae2:	75a0      	strb	r0, [r4, #22]
    6ae4:	bd10      	pop	{r4, pc}
    6ae6:	f640 51ce 	movw	r1, #3534	; 0xdce
    6aea:	202d      	movs	r0, #45	; 0x2d
    6aec:	f7fd f912 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6af0:	20000104 	.word	0x20000104
    6af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6af8:	4604      	mov	r4, r0
    6afa:	8840      	ldrh	r0, [r0, #2]
    6afc:	4617      	mov	r7, r2
    6afe:	4688      	mov	r8, r1
    6b00:	2903      	cmp	r1, #3
    6b02:	d006      	beq.n	6b12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    6b04:	f000 0501 	and.w	r5, r0, #1
    6b08:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6b0c:	b118      	cbz	r0, 6b16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    6b0e:	2001      	movs	r0, #1
    6b10:	e002      	b.n	6b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    6b12:	f3c0 0540 	ubfx	r5, r0, #1, #1
    6b16:	2000      	movs	r0, #0
    6b18:	4681      	mov	r9, r0
    6b1a:	f003 fe21 	bl	a760 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6b1e:	4606      	mov	r6, r0
    6b20:	f1b8 0f03 	cmp.w	r8, #3
    6b24:	d025      	beq.n	6b72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    6b26:	2001      	movs	r0, #1
    6b28:	4680      	mov	r8, r0
    6b2a:	ea35 0509 	bics.w	r5, r5, r9
    6b2e:	d046      	beq.n	6bbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6b30:	4825      	ldr	r0, [pc, #148]	; (6bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    6b32:	7b80      	ldrb	r0, [r0, #14]
    6b34:	b138      	cbz	r0, 6b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    6b36:	f006 fa24 	bl	cf82 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6b3a:	7038      	strb	r0, [r7, #0]
    6b3c:	28ff      	cmp	r0, #255	; 0xff
    6b3e:	d002      	beq.n	6b46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    6b40:	f7fe fdd4 	bl	56ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6b44:	4306      	orrs	r6, r0
    6b46:	4d21      	ldr	r5, [pc, #132]	; (6bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    6b48:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    6b4c:	6868      	ldr	r0, [r5, #4]
    6b4e:	7801      	ldrb	r1, [r0, #0]
    6b50:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6b54:	4291      	cmp	r1, r2
    6b56:	d106      	bne.n	6b66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    6b58:	2206      	movs	r2, #6
    6b5a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6b5e:	1cc0      	adds	r0, r0, #3
    6b60:	f005 f8fc 	bl	bd5c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6b64:	b138      	cbz	r0, 6b76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    6b66:	2000      	movs	r0, #0
    6b68:	7839      	ldrb	r1, [r7, #0]
    6b6a:	29ff      	cmp	r1, #255	; 0xff
    6b6c:	d009      	beq.n	6b82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38a>
    6b6e:	b9b8      	cbnz	r0, 6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b70:	e003      	b.n	6b7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    6b72:	2002      	movs	r0, #2
    6b74:	e7d8      	b.n	6b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    6b76:	2001      	movs	r0, #1
    6b78:	e7f6      	b.n	6b68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    6b7a:	7e60      	ldrb	r0, [r4, #25]
    6b7c:	4288      	cmp	r0, r1
    6b7e:	d00f      	beq.n	6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b80:	e008      	b.n	6b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6b82:	b138      	cbz	r0, 6b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6b84:	6869      	ldr	r1, [r5, #4]
    6b86:	f811 0b03 	ldrb.w	r0, [r1], #3
    6b8a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b8e:	f007 f8c3 	bl	dd18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6b92:	b128      	cbz	r0, 6ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b94:	2000      	movs	r0, #0
    6b96:	78a1      	ldrb	r1, [r4, #2]
    6b98:	0749      	lsls	r1, r1, #29
    6b9a:	d503      	bpl.n	6ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6b9c:	b990      	cbnz	r0, 6bc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6b9e:	e00e      	b.n	6bbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6ba0:	2001      	movs	r0, #1
    6ba2:	e7f8      	b.n	6b96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    6ba4:	b976      	cbnz	r6, 6bc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6ba6:	7be0      	ldrb	r0, [r4, #15]
    6ba8:	b108      	cbz	r0, 6bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6baa:	4540      	cmp	r0, r8
    6bac:	d107      	bne.n	6bbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6bae:	6869      	ldr	r1, [r5, #4]
    6bb0:	f811 0b03 	ldrb.w	r0, [r1], #3
    6bb4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6bb8:	f007 f8ae 	bl	dd18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6bbc:	b110      	cbz	r0, 6bc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6bbe:	2000      	movs	r0, #0
    6bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bc4:	2001      	movs	r0, #1
    6bc6:	e7fb      	b.n	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    6bc8:	20000fac 	.word	0x20000fac
    6bcc:	20000104 	.word	0x20000104
    6bd0:	b570      	push	{r4, r5, r6, lr}
    6bd2:	4604      	mov	r4, r0
    6bd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6bd6:	4d10      	ldr	r5, [pc, #64]	; (6c18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>)
    6bd8:	1c40      	adds	r0, r0, #1
    6bda:	62a0      	str	r0, [r4, #40]	; 0x28
    6bdc:	7ba8      	ldrb	r0, [r5, #14]
    6bde:	2600      	movs	r6, #0
    6be0:	b120      	cbz	r0, 6bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    6be2:	f003 fd9f 	bl	a724 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6be6:	f003 fbe1 	bl	a3ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6bea:	73ae      	strb	r6, [r5, #14]
    6bec:	702e      	strb	r6, [r5, #0]
    6bee:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6bf2:	b108      	cbz	r0, 6bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    6bf4:	2101      	movs	r1, #1
    6bf6:	e00a      	b.n	6c0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    6bf8:	7b60      	ldrb	r0, [r4, #13]
    6bfa:	b138      	cbz	r0, 6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6bfc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6bfe:	4288      	cmp	r0, r1
    6c00:	d804      	bhi.n	6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6c02:	2101      	movs	r1, #1
    6c04:	4620      	mov	r0, r4
    6c06:	f007 f9df 	bl	dfc8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6c0a:	bd70      	pop	{r4, r5, r6, pc}
    6c0c:	2100      	movs	r1, #0
    6c0e:	4620      	mov	r0, r4
    6c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c14:	f007 b9d8 	b.w	dfc8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6c18:	20000fac 	.word	0x20000fac
    6c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c20:	4604      	mov	r4, r0
    6c22:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6c26:	4690      	mov	r8, r2
    6c28:	460d      	mov	r5, r1
    6c2a:	f88d 0000 	strb.w	r0, [sp]
    6c2e:	9800      	ldr	r0, [sp, #0]
    6c30:	9000      	str	r0, [sp, #0]
    6c32:	f89d 0000 	ldrb.w	r0, [sp]
    6c36:	b110      	cbz	r0, 6c3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x446>
    6c38:	f640 31d9 	movw	r1, #3033	; 0xbd9
    6c3c:	e058      	b.n	6cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    6c3e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    6c42:	8828      	ldrh	r0, [r5, #0]
    6c44:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d163      	bne.n	6d14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    6c4c:	6868      	ldr	r0, [r5, #4]
    6c4e:	f006 f9f6 	bl	d03e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6c52:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    6c56:	8928      	ldrh	r0, [r5, #8]
    6c58:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    6c5c:	8968      	ldrh	r0, [r5, #10]
    6c5e:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    6c62:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    6c66:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    6c6a:	7e21      	ldrb	r1, [r4, #24]
    6c6c:	f104 0649 	add.w	r6, r4, #73	; 0x49
    6c70:	2700      	movs	r7, #0
    6c72:	f104 0980 	add.w	r9, r4, #128	; 0x80
    6c76:	b129      	cbz	r1, 6c84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>
    6c78:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6c7c:	4631      	mov	r1, r6
    6c7e:	f006 ff34 	bl	daea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6c82:	b940      	cbnz	r0, 6c96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    6c84:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6c88:	b170      	cbz	r0, 6ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6c8a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6c8e:	4631      	mov	r1, r6
    6c90:	f006 ff22 	bl	dad8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    6c94:	b140      	cbz	r0, 6ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6c96:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6c9a:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
    6c9e:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6ca2:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    6ca6:	e003      	b.n	6cb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
    6ca8:	f8c4 7086 	str.w	r7, [r4, #134]	; 0x86
    6cac:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
    6cb0:	4819      	ldr	r0, [pc, #100]	; (6d18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>)
    6cb2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6cb6:	6840      	ldr	r0, [r0, #4]
    6cb8:	7801      	ldrb	r1, [r0, #0]
    6cba:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6cbe:	f884 107f 	strb.w	r1, [r4, #127]	; 0x7f
    6cc2:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6cc6:	d016      	beq.n	6cf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    6cc8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    6ccc:	8880      	ldrh	r0, [r0, #4]
    6cce:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    6cd2:	464a      	mov	r2, r9
    6cd4:	f104 017f 	add.w	r1, r4, #127	; 0x7f
    6cd8:	4640      	mov	r0, r8
    6cda:	f7fe fced 	bl	56b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6cde:	b128      	cbz	r0, 6cec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    6ce0:	f814 0f7f 	ldrb.w	r0, [r4, #127]!
    6ce4:	f040 0002 	orr.w	r0, r0, #2
    6ce8:	7020      	strb	r0, [r4, #0]
    6cea:	e00c      	b.n	6d06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    6cec:	f640 31fa 	movw	r1, #3066	; 0xbfa
    6cf0:	202d      	movs	r0, #45	; 0x2d
    6cf2:	f7fd f80f 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cf6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    6cfa:	8880      	ldrh	r0, [r0, #4]
    6cfc:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    6d00:	f844 7f8c 	str.w	r7, [r4, #140]!
    6d04:	80a7      	strh	r7, [r4, #4]
    6d06:	8828      	ldrh	r0, [r5, #0]
    6d08:	f7fd fc38 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6d0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d10:	f005 bf21 	b.w	cb56 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d18:	20000104 	.word	0x20000104
    6d1c:	b538      	push	{r3, r4, r5, lr}
    6d1e:	4604      	mov	r4, r0
    6d20:	20ff      	movs	r0, #255	; 0xff
    6d22:	f88d 0000 	strb.w	r0, [sp]
    6d26:	2501      	movs	r5, #1
    6d28:	466a      	mov	r2, sp
    6d2a:	2105      	movs	r1, #5
    6d2c:	4620      	mov	r0, r4
    6d2e:	f7ff fee1 	bl	6af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6d32:	b300      	cbz	r0, 6d76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57e>
    6d34:	4a11      	ldr	r2, [pc, #68]	; (6d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>)
    6d36:	69e0      	ldr	r0, [r4, #28]
    6d38:	6852      	ldr	r2, [r2, #4]
    6d3a:	f810 1f7d 	ldrb.w	r1, [r0, #125]!
    6d3e:	7812      	ldrb	r2, [r2, #0]
    6d40:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6d44:	4011      	ands	r1, r2
    6d46:	7001      	strb	r1, [r0, #0]
    6d48:	2201      	movs	r2, #1
    6d4a:	4620      	mov	r0, r4
    6d4c:	69e1      	ldr	r1, [r4, #28]
    6d4e:	f000 f881 	bl	6e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6d52:	2300      	movs	r3, #0
    6d54:	f89d 2000 	ldrb.w	r2, [sp]
    6d58:	4620      	mov	r0, r4
    6d5a:	69e1      	ldr	r1, [r4, #28]
    6d5c:	f7ff ff5e 	bl	6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    6d60:	2001      	movs	r0, #1
    6d62:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6d66:	4a06      	ldr	r2, [pc, #24]	; (6d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>)
    6d68:	2100      	movs	r1, #0
    6d6a:	69e0      	ldr	r0, [r4, #28]
    6d6c:	7011      	strb	r1, [r2, #0]
    6d6e:	2105      	movs	r1, #5
    6d70:	f000 fa1a 	bl	71a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6d74:	e000      	b.n	6d78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    6d76:	2500      	movs	r5, #0
    6d78:	4628      	mov	r0, r5
    6d7a:	bd38      	pop	{r3, r4, r5, pc}
    6d7c:	20000104 	.word	0x20000104
    6d80:	20000fac 	.word	0x20000fac
    6d84:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6d86:	4604      	mov	r4, r0
    6d88:	20ff      	movs	r0, #255	; 0xff
    6d8a:	f88d 0000 	strb.w	r0, [sp]
    6d8e:	2501      	movs	r5, #1
    6d90:	466a      	mov	r2, sp
    6d92:	2103      	movs	r1, #3
    6d94:	4620      	mov	r0, r4
    6d96:	f7ff fead 	bl	6af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6d9a:	b328      	cbz	r0, 6de8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
    6d9c:	7b20      	ldrb	r0, [r4, #12]
    6d9e:	b168      	cbz	r0, 6dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6da0:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    6da4:	f88d 0004 	strb.w	r0, [sp, #4]
    6da8:	9801      	ldr	r0, [sp, #4]
    6daa:	9001      	str	r0, [sp, #4]
    6dac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6db0:	b920      	cbnz	r0, 6dbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6db2:	f89d 1000 	ldrb.w	r1, [sp]
    6db6:	4620      	mov	r0, r4
    6db8:	f7ff fe60 	bl	6a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    6dbc:	4e0c      	ldr	r6, [pc, #48]	; (6df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    6dbe:	2100      	movs	r1, #0
    6dc0:	6870      	ldr	r0, [r6, #4]
    6dc2:	8001      	strh	r1, [r0, #0]
    6dc4:	2104      	movs	r1, #4
    6dc6:	f006 fc98 	bl	d6fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6dca:	4620      	mov	r0, r4
    6dcc:	f000 f88a 	bl	6ee4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    6dd0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    6dd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6dd4:	6870      	ldr	r0, [r6, #4]
    6dd6:	f006 fcc7 	bl	d768 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6dda:	4906      	ldr	r1, [pc, #24]	; (6df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    6ddc:	2005      	movs	r0, #5
    6dde:	7008      	strb	r0, [r1, #0]
    6de0:	6870      	ldr	r0, [r6, #4]
    6de2:	f003 ff6d 	bl	acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6de6:	e000      	b.n	6dea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f2>
    6de8:	2500      	movs	r5, #0
    6dea:	4628      	mov	r0, r5
    6dec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6dee:	0000      	.short	0x0000
    6df0:	20000104 	.word	0x20000104
    6df4:	20000fac 	.word	0x20000fac
    6df8:	b570      	push	{r4, r5, r6, lr}
    6dfa:	4604      	mov	r4, r0
    6dfc:	460e      	mov	r6, r1
    6dfe:	7e40      	ldrb	r0, [r0, #25]
    6e00:	f7fe fc28 	bl	5654 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6e04:	0005      	movs	r5, r0
    6e06:	d019      	beq.n	6e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6e08:	2110      	movs	r1, #16
    6e0a:	f006 faa3 	bl	d354 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6e0e:	2800      	cmp	r0, #0
    6e10:	d114      	bne.n	6e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6e12:	2001      	movs	r0, #1
    6e14:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    6e18:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6e1c:	4632      	mov	r2, r6
    6e1e:	460c      	mov	r4, r1
    6e20:	4628      	mov	r0, r5
    6e22:	f006 f850 	bl	cec6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6e26:	4621      	mov	r1, r4
    6e28:	4c05      	ldr	r4, [pc, #20]	; (6e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>)
    6e2a:	6860      	ldr	r0, [r4, #4]
    6e2c:	f006 fc80 	bl	d730 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6e30:	6860      	ldr	r0, [r4, #4]
    6e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e36:	2101      	movs	r1, #1
    6e38:	f006 bc80 	b.w	d73c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6e3c:	bd70      	pop	{r4, r5, r6, pc}
    6e3e:	0000      	.short	0x0000
    6e40:	20000104 	.word	0x20000104
    6e44:	4802      	ldr	r0, [pc, #8]	; (6e50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    6e46:	2101      	movs	r1, #1
    6e48:	6800      	ldr	r0, [r0, #0]
    6e4a:	f7ff bb57 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6e4e:	0000      	.short	0x0000
    6e50:	20000104 	.word	0x20000104
    6e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e58:	4e21      	ldr	r6, [pc, #132]	; (6ee0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e8>)
    6e5a:	4680      	mov	r8, r0
    6e5c:	460c      	mov	r4, r1
    6e5e:	6870      	ldr	r0, [r6, #4]
    6e60:	4615      	mov	r5, r2
    6e62:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6e66:	60e1      	str	r1, [r4, #12]
    6e68:	8881      	ldrh	r1, [r0, #4]
    6e6a:	8221      	strh	r1, [r4, #16]
    6e6c:	7981      	ldrb	r1, [r0, #6]
    6e6e:	74a1      	strb	r1, [r4, #18]
    6e70:	8940      	ldrh	r0, [r0, #10]
    6e72:	f006 f8e0 	bl	d036 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6e76:	4607      	mov	r7, r0
    6e78:	6060      	str	r0, [r4, #4]
    6e7a:	6870      	ldr	r0, [r6, #4]
    6e7c:	4639      	mov	r1, r7
    6e7e:	7d80      	ldrb	r0, [r0, #22]
    6e80:	f006 fa63 	bl	d34a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6e84:	82a0      	strh	r0, [r4, #20]
    6e86:	6870      	ldr	r0, [r6, #4]
    6e88:	4639      	mov	r1, r7
    6e8a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6e8e:	f006 fa58 	bl	d342 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6e92:	61a0      	str	r0, [r4, #24]
    6e94:	6870      	ldr	r0, [r6, #4]
    6e96:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6e9a:	8121      	strh	r1, [r4, #8]
    6e9c:	8841      	ldrh	r1, [r0, #2]
    6e9e:	8161      	strh	r1, [r4, #10]
    6ea0:	6841      	ldr	r1, [r0, #4]
    6ea2:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
    6ea6:	7a01      	ldrb	r1, [r0, #8]
    6ea8:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
    6eac:	7a41      	ldrb	r1, [r0, #9]
    6eae:	f001 011f 	and.w	r1, r1, #31
    6eb2:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    6eb6:	7a40      	ldrb	r0, [r0, #9]
    6eb8:	0940      	lsrs	r0, r0, #5
    6eba:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    6ebe:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    6ec2:	2101      	movs	r1, #1
    6ec4:	7205      	strb	r5, [r0, #8]
    6ec6:	7245      	strb	r5, [r0, #9]
    6ec8:	7281      	strb	r1, [r0, #10]
    6eca:	2100      	movs	r1, #0
    6ecc:	3836      	subs	r0, #54	; 0x36
    6ece:	f006 fd86 	bl	d9de <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6ed2:	f898 000e 	ldrb.w	r0, [r8, #14]
    6ed6:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    6eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ede:	0000      	.short	0x0000
    6ee0:	20000104 	.word	0x20000104
    6ee4:	b570      	push	{r4, r5, r6, lr}
    6ee6:	4d07      	ldr	r5, [pc, #28]	; (6f04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>)
    6ee8:	4604      	mov	r4, r0
    6eea:	f100 0149 	add.w	r1, r0, #73	; 0x49
    6eee:	6868      	ldr	r0, [r5, #4]
    6ef0:	f006 fc2b 	bl	d74a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6ef4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    6ef8:	6868      	ldr	r0, [r5, #4]
    6efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6efe:	f006 bc2a 	b.w	d756 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6f02:	0000      	.short	0x0000
    6f04:	20000104 	.word	0x20000104
    6f08:	d6555555 	.word	0xd6555555
    6f0c:	008e89be 	.word	0x008e89be
    6f10:	00006781 	.word	0x00006781
    6f14:	00006611 	.word	0x00006611
    6f18:	000066e9 	.word	0x000066e9
    6f1c:	00000000 	.word	0x00000000
    6f20:	000066c1 	.word	0x000066c1
    6f24:	00006719 	.word	0x00006719
    6f28:	0000dd3f 	.word	0x0000dd3f
    6f2c:	0000dd45 	.word	0x0000dd45
    6f30:	00006979 	.word	0x00006979
    6f34:	0000699d 	.word	0x0000699d
    6f38:	00006e45 	.word	0x00006e45
    6f3c:	00006f2c 	.word	0x00006f2c
    6f40:	00006f24 	.word	0x00006f24
    6f44:	00006f20 	.word	0x00006f20

00006f48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6f48:	b510      	push	{r4, lr}
    6f4a:	1e42      	subs	r2, r0, #1
    6f4c:	2a02      	cmp	r2, #2
    6f4e:	d901      	bls.n	6f54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6f50:	21ca      	movs	r1, #202	; 0xca
    6f52:	e009      	b.n	6f68 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6f54:	1e40      	subs	r0, r0, #1
    6f56:	2910      	cmp	r1, #16
    6f58:	d009      	beq.n	6f6e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    6f5a:	2912      	cmp	r1, #18
    6f5c:	d00c      	beq.n	6f78 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f5e:	2913      	cmp	r1, #19
    6f60:	d00a      	beq.n	6f78 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f62:	2915      	cmp	r1, #21
    6f64:	d005      	beq.n	6f72 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6f66:	21d8      	movs	r1, #216	; 0xd8
    6f68:	202f      	movs	r0, #47	; 0x2f
    6f6a:	f7fc fed3 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f6e:	4905      	ldr	r1, [pc, #20]	; (6f84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f70:	e004      	b.n	6f7c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f72:	4904      	ldr	r1, [pc, #16]	; (6f84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f74:	1d89      	adds	r1, r1, #6
    6f76:	e001      	b.n	6f7c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f78:	4902      	ldr	r1, [pc, #8]	; (6f84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f7a:	1f89      	subs	r1, r1, #6
    6f7c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    6f80:	bd10      	pop	{r4, pc}
    6f82:	0000      	.short	0x0000
    6f84:	0000df92 	.word	0x0000df92

00006f88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    6f88:	1e42      	subs	r2, r0, #1
    6f8a:	b510      	push	{r4, lr}
    6f8c:	b2d2      	uxtb	r2, r2
    6f8e:	2a01      	cmp	r2, #1
    6f90:	d903      	bls.n	6f9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f92:	291d      	cmp	r1, #29
    6f94:	d001      	beq.n	6f9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f96:	21ee      	movs	r1, #238	; 0xee
    6f98:	e00d      	b.n	6fb6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    6f9a:	2913      	cmp	r1, #19
    6f9c:	d013      	beq.n	6fc6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6f9e:	dc04      	bgt.n	6faa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    6fa0:	2910      	cmp	r1, #16
    6fa2:	d00b      	beq.n	6fbc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    6fa4:	2912      	cmp	r1, #18
    6fa6:	d104      	bne.n	6fb2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6fa8:	e00d      	b.n	6fc6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6faa:	2915      	cmp	r1, #21
    6fac:	d008      	beq.n	6fc0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6fae:	291d      	cmp	r1, #29
    6fb0:	d00e      	beq.n	6fd0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    6fb2:	f44f 7181 	mov.w	r1, #258	; 0x102
    6fb6:	202f      	movs	r0, #47	; 0x2f
    6fb8:	f7fc feac 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fbc:	4807      	ldr	r0, [pc, #28]	; (6fdc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fbe:	e004      	b.n	6fca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6fc0:	4806      	ldr	r0, [pc, #24]	; (6fdc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fc2:	3008      	adds	r0, #8
    6fc4:	e001      	b.n	6fca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6fc6:	4805      	ldr	r0, [pc, #20]	; (6fdc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fc8:	1d00      	adds	r0, r0, #4
    6fca:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6fce:	bd10      	pop	{r4, pc}
    6fd0:	f240 315a 	movw	r1, #858	; 0x35a
    6fd4:	fb10 f001 	smulbb	r0, r0, r1
    6fd8:	bd10      	pop	{r4, pc}
    6fda:	0000      	.short	0x0000
    6fdc:	0000df80 	.word	0x0000df80

00006fe0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    6fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fe4:	4604      	mov	r4, r0
    6fe6:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    6fea:	4615      	mov	r5, r2
    6fec:	460f      	mov	r7, r1
    6fee:	2800      	cmp	r0, #0
    6ff0:	d15d      	bne.n	70ae <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    6ff2:	4621      	mov	r1, r4
    6ff4:	4844      	ldr	r0, [pc, #272]	; (7108 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    6ff6:	f7fb f9b9 	bl	236c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    6ffa:	4606      	mov	r6, r0
    6ffc:	2820      	cmp	r0, #32
    6ffe:	d056      	beq.n	70ae <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    7000:	2234      	movs	r2, #52	; 0x34
    7002:	2100      	movs	r1, #0
    7004:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7008:	f004 ff34 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    700c:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    7010:	2601      	movs	r6, #1
    7012:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    7016:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    701a:	b15f      	cbz	r7, 7034 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    701c:	2101      	movs	r1, #1
    701e:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    7022:	f7fc ff2b 	bl	3e7c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7026:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    702a:	f000 0007 	and.w	r0, r0, #7
    702e:	1c40      	adds	r0, r0, #1
    7030:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    7034:	4620      	mov	r0, r4
    7036:	f007 f951 	bl	e2dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    703a:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    703e:	2003      	movs	r0, #3
    7040:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    7044:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    7048:	2700      	movs	r7, #0
    704a:	f804 7fcc 	strb.w	r7, [r4, #204]!
    704e:	f7fa fc27 	bl	18a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7052:	8921      	ldrh	r1, [r4, #8]
    7054:	3ccc      	subs	r4, #204	; 0xcc
    7056:	4288      	cmp	r0, r1
    7058:	d800      	bhi.n	705c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    705a:	4608      	mov	r0, r1
    705c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    7060:	fa1f f880 	uxth.w	r8, r0
    7064:	4620      	mov	r0, r4
    7066:	f006 fddd 	bl	dc24 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    706a:	b318      	cbz	r0, 70b4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    706c:	4827      	ldr	r0, [pc, #156]	; (710c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    706e:	7800      	ldrb	r0, [r0, #0]
    7070:	f000 f8e4 	bl	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7074:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7078:	b281      	uxth	r1, r0
    707a:	4628      	mov	r0, r5
    707c:	f004 fd3f 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7080:	4428      	add	r0, r5
    7082:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7086:	34b8      	adds	r4, #184	; 0xb8
    7088:	f004 fcfa 	bl	ba80 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    708c:	4641      	mov	r1, r8
    708e:	f7fa fa9d 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7092:	6220      	str	r0, [r4, #32]
    7094:	f804 7c03 	strb.w	r7, [r4, #-3]
    7098:	7126      	strb	r6, [r4, #4]
    709a:	2001      	movs	r0, #1
    709c:	f006 ff69 	bl	df72 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    70a0:	f200 1007 	addw	r0, r0, #263	; 0x107
    70a4:	1a28      	subs	r0, r5, r0
    70a6:	62a7      	str	r7, [r4, #40]	; 0x28
    70a8:	60a0      	str	r0, [r4, #8]
    70aa:	3cb8      	subs	r4, #184	; 0xb8
    70ac:	e017      	b.n	70de <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfe>
    70ae:	200c      	movs	r0, #12
    70b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70b4:	4620      	mov	r0, r4
    70b6:	f007 f8bf 	bl	e238 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    70ba:	f844 0fd0 	str.w	r0, [r4, #208]!
    70be:	f804 6c1b 	strb.w	r6, [r4, #-27]
    70c2:	f004 fcdd 	bl	ba80 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    70c6:	4606      	mov	r6, r0
    70c8:	2000      	movs	r0, #0
    70ca:	f007 f9b6 	bl	e43a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    70ce:	eb00 0108 	add.w	r1, r0, r8
    70d2:	4630      	mov	r0, r6
    70d4:	f7fa fa7a 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    70d8:	6125      	str	r5, [r4, #16]
    70da:	60a0      	str	r0, [r4, #8]
    70dc:	3cd0      	subs	r4, #208	; 0xd0
    70de:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    70e2:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    70e6:	f007 f8f7 	bl	e2d8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    70ea:	b138      	cbz	r0, 70fc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11c>
    70ec:	f8a4 70dc 	strh.w	r7, [r4, #220]	; 0xdc
    70f0:	2100      	movs	r1, #0
    70f2:	4620      	mov	r0, r4
    70f4:	f006 fdf6 	bl	dce4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    70f8:	2000      	movs	r0, #0
    70fa:	e7d9      	b.n	70b0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    70fc:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    7100:	2030      	movs	r0, #48	; 0x30
    7102:	f7fc fe07 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7106:	0000      	.short	0x0000
    7108:	000078f5 	.word	0x000078f5
    710c:	20000114 	.word	0x20000114

00007110 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7110:	4804      	ldr	r0, [pc, #16]	; (7124 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x14>)
    7112:	2101      	movs	r1, #1
    7114:	2200      	movs	r2, #0
    7116:	7001      	strb	r1, [r0, #0]
    7118:	7042      	strb	r2, [r0, #1]
    711a:	70c1      	strb	r1, [r0, #3]
    711c:	7082      	strb	r2, [r0, #2]
    711e:	f006 bf95 	b.w	e04c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    7122:	0000      	.short	0x0000
    7124:	20000114 	.word	0x20000114

00007128 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    7128:	4901      	ldr	r1, [pc, #4]	; (7130 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    712a:	7008      	strb	r0, [r1, #0]
    712c:	4770      	bx	lr
    712e:	0000      	.short	0x0000
    7130:	20000114 	.word	0x20000114

00007134 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    7134:	4901      	ldr	r1, [pc, #4]	; (713c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    7136:	7048      	strb	r0, [r1, #1]
    7138:	4770      	bx	lr
    713a:	0000      	.short	0x0000
    713c:	20000114 	.word	0x20000114

00007140 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7140:	4905      	ldr	r1, [pc, #20]	; (7158 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    7142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7146:	fbb1 f1f2 	udiv	r1, r1, r2
    714a:	b510      	push	{r4, lr}
    714c:	f201 218b 	addw	r1, r1, #651	; 0x28b
    7150:	f006 fc5e 	bl	da10 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7154:	b280      	uxth	r0, r0
    7156:	bd10      	pop	{r4, pc}
    7158:	0001527d 	.word	0x0001527d

0000715c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7160:	4c10      	ldr	r4, [pc, #64]	; (71a4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7162:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    7166:	f003 fcb1 	bl	aacc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    716a:	4606      	mov	r6, r0
    716c:	7860      	ldrb	r0, [r4, #1]
    716e:	b128      	cbz	r0, 717c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7170:	4632      	mov	r2, r6
    7172:	4639      	mov	r1, r7
    7174:	4628      	mov	r0, r5
    7176:	f005 ff68 	bl	d04a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    717a:	4605      	mov	r5, r0
    717c:	6860      	ldr	r0, [r4, #4]
    717e:	4285      	cmp	r5, r0
    7180:	d005      	beq.n	718e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7182:	68e1      	ldr	r1, [r4, #12]
    7184:	1a28      	subs	r0, r5, r0
    7186:	4408      	add	r0, r1
    7188:	60e0      	str	r0, [r4, #12]
    718a:	f7fb f9f1 	bl	2570 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    718e:	6065      	str	r5, [r4, #4]
    7190:	42ae      	cmp	r6, r5
    7192:	d801      	bhi.n	7198 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7194:	78a0      	ldrb	r0, [r4, #2]
    7196:	b110      	cbz	r0, 719e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7198:	2000      	movs	r0, #0
    719a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    719e:	2001      	movs	r0, #1
    71a0:	e7fb      	b.n	719a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    71a2:	0000      	.short	0x0000
    71a4:	20000114 	.word	0x20000114

000071a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    71a8:	b570      	push	{r4, r5, r6, lr}
    71aa:	4c22      	ldr	r4, [pc, #136]	; (7234 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    71ac:	4605      	mov	r5, r0
    71ae:	2906      	cmp	r1, #6
    71b0:	d23c      	bcs.n	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    71b2:	e8df f001 	tbb	[pc, r1]
    71b6:	0b05      	.short	0x0b05
    71b8:	250f0e03 	.word	0x250f0e03
    71bc:	2100      	movs	r1, #0
    71be:	e000      	b.n	71c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    71c0:	2101      	movs	r1, #1
    71c2:	4628      	mov	r0, r5
    71c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71c8:	f000 b94c 	b.w	7464 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2bc>
    71cc:	2003      	movs	r0, #3
    71ce:	f885 012c 	strb.w	r0, [r5, #300]	; 0x12c
    71d2:	bd70      	pop	{r4, r5, r6, pc}
    71d4:	f003 fcae 	bl	ab34 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    71d8:	f8c5 0168 	str.w	r0, [r5, #360]	; 0x168
    71dc:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
    71e0:	f008 fa64 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    71e4:	f8d5 1168 	ldr.w	r1, [r5, #360]	; 0x168
    71e8:	1a08      	subs	r0, r1, r0
    71ea:	6861      	ldr	r1, [r4, #4]
    71ec:	4401      	add	r1, r0
    71ee:	6061      	str	r1, [r4, #4]
    71f0:	68a1      	ldr	r1, [r4, #8]
    71f2:	4408      	add	r0, r1
    71f4:	60a0      	str	r0, [r4, #8]
    71f6:	4628      	mov	r0, r5
    71f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71fc:	f000 b8d2 	b.w	73a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    7200:	f003 fc64 	bl	aacc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7204:	4601      	mov	r1, r0
    7206:	2200      	movs	r2, #0
    7208:	69a0      	ldr	r0, [r4, #24]
    720a:	f007 f8cb 	bl	e3a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f2>
    720e:	69a0      	ldr	r0, [r4, #24]
    7210:	4909      	ldr	r1, [pc, #36]	; (7238 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    7212:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    7216:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    721a:	f7fa ff6d 	bl	20f8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    721e:	2800      	cmp	r0, #0
    7220:	d1d7      	bne.n	71d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    7222:	f240 717a 	movw	r1, #1914	; 0x77a
    7226:	2030      	movs	r0, #48	; 0x30
    7228:	f7fc fd74 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    722c:	f240 7191 	movw	r1, #1937	; 0x791
    7230:	e7f9      	b.n	7226 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    7232:	0000      	.short	0x0000
    7234:	20000114 	.word	0x20000114
    7238:	0000e465 	.word	0x0000e465
    723c:	b510      	push	{r4, lr}
    723e:	280c      	cmp	r0, #12
    7240:	d304      	bcc.n	724c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    7242:	f44f 7140 	mov.w	r1, #768	; 0x300
    7246:	2006      	movs	r0, #6
    7248:	f7fc fd64 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    724c:	4901      	ldr	r1, [pc, #4]	; (7254 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    724e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7252:	bd10      	pop	{r4, pc}
    7254:	0000e546 	.word	0x0000e546
    7258:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    725a:	4c18      	ldr	r4, [pc, #96]	; (72bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    725c:	2001      	movs	r0, #1
    725e:	70a0      	strb	r0, [r4, #2]
    7260:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7264:	e00b      	b.n	727e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    7266:	2100      	movs	r1, #0
    7268:	f005 fd9f 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    726c:	0006      	movs	r6, r0
    726e:	d010      	beq.n	7292 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    7270:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    7274:	f7fa ff72 	bl	215c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7278:	4630      	mov	r0, r6
    727a:	f007 f886 	bl	e38a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    727e:	4669      	mov	r1, sp
    7280:	2000      	movs	r0, #0
    7282:	f005 fd9c 	bl	cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7286:	b180      	cbz	r0, 72aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7288:	f240 1111 	movw	r1, #273	; 0x111
    728c:	2030      	movs	r0, #48	; 0x30
    728e:	f7fc fd41 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7292:	f240 1131 	movw	r1, #305	; 0x131
    7296:	e7f9      	b.n	728c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    7298:	9802      	ldr	r0, [sp, #8]
    729a:	b130      	cbz	r0, 72aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    729c:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    72a0:	b119      	cbz	r1, 72aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    72a2:	8800      	ldrh	r0, [r0, #0]
    72a4:	42a8      	cmp	r0, r5
    72a6:	d1de      	bne.n	7266 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    72a8:	e004      	b.n	72b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    72aa:	4668      	mov	r0, sp
    72ac:	f7fc ff84 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72b0:	2800      	cmp	r0, #0
    72b2:	d0f1      	beq.n	7298 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    72b4:	2000      	movs	r0, #0
    72b6:	70a0      	strb	r0, [r4, #2]
    72b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    72ba:	0000      	.short	0x0000
    72bc:	20000114 	.word	0x20000114
    72c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72c4:	4604      	mov	r4, r0
    72c6:	4836      	ldr	r0, [pc, #216]	; (73a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    72c8:	461e      	mov	r6, r3
    72ca:	4690      	mov	r8, r2
    72cc:	78c0      	ldrb	r0, [r0, #3]
    72ce:	4689      	mov	r9, r1
    72d0:	2500      	movs	r5, #0
    72d2:	b368      	cbz	r0, 7330 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72d4:	f7fc f9c8 	bl	3668 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    72d8:	b350      	cbz	r0, 7330 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72da:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    72de:	2802      	cmp	r0, #2
    72e0:	d326      	bcc.n	7330 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72e2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    72e6:	2802      	cmp	r0, #2
    72e8:	d022      	beq.n	7330 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72ea:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    72ee:	b9f8      	cbnz	r0, 7330 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72f0:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    72f4:	f7ff ffa2 	bl	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    72f8:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    72fc:	b281      	uxth	r1, r0
    72fe:	8031      	strh	r1, [r6, #0]
    7300:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7304:	2700      	movs	r7, #0
    7306:	2801      	cmp	r0, #1
    7308:	d015      	beq.n	7336 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    730a:	6860      	ldr	r0, [r4, #4]
    730c:	f004 fbf7 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7310:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7314:	b280      	uxth	r0, r0
    7316:	4442      	add	r2, r8
    7318:	eba2 0109 	sub.w	r1, r2, r9
    731c:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7320:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7324:	1a82      	subs	r2, r0, r2
    7326:	fb01 7502 	mla	r5, r1, r2, r7
    732a:	2001      	movs	r0, #1
    732c:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7330:	4628      	mov	r0, r5
    7332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7336:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    733a:	2803      	cmp	r0, #3
    733c:	d02c      	beq.n	7398 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    733e:	2101      	movs	r1, #1
    7340:	2000      	movs	r0, #0
    7342:	f005 ff3c 	bl	d1be <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7346:	69a1      	ldr	r1, [r4, #24]
    7348:	1847      	adds	r7, r0, r1
    734a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    734e:	8831      	ldrh	r1, [r6, #0]
    7350:	34c8      	adds	r4, #200	; 0xc8
    7352:	f004 fbd4 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7356:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7358:	6e21      	ldr	r1, [r4, #96]	; 0x60
    735a:	1a82      	subs	r2, r0, r2
    735c:	fb01 5502 	mla	r5, r1, r2, r5
    7360:	65a0      	str	r0, [r4, #88]	; 0x58
    7362:	8831      	ldrh	r1, [r6, #0]
    7364:	4638      	mov	r0, r7
    7366:	f004 fbca 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    736a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    736c:	66a0      	str	r0, [r4, #104]	; 0x68
    736e:	1a41      	subs	r1, r0, r1
    7370:	440d      	add	r5, r1
    7372:	8831      	ldrh	r1, [r6, #0]
    7374:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7378:	f004 fbc1 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    737c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    737e:	4442      	add	r2, r8
    7380:	eba2 0109 	sub.w	r1, r2, r9
    7384:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7386:	1a89      	subs	r1, r1, r2
    7388:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    738a:	1e49      	subs	r1, r1, #1
    738c:	1a82      	subs	r2, r0, r2
    738e:	fb01 5502 	mla	r5, r1, r2, r5
    7392:	66e0      	str	r0, [r4, #108]	; 0x6c
    7394:	3cc8      	subs	r4, #200	; 0xc8
    7396:	e7c8      	b.n	732a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    7398:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    739c:	e7d3      	b.n	7346 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    739e:	0000      	.short	0x0000
    73a0:	20000114 	.word	0x20000114
    73a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73a8:	4604      	mov	r4, r0
    73aa:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    73ae:	2800      	cmp	r0, #0
    73b0:	d053      	beq.n	745a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    73b2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    73b6:	2803      	cmp	r0, #3
    73b8:	d14f      	bne.n	745a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    73ba:	4829      	ldr	r0, [pc, #164]	; (7460 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b8>)
    73bc:	f894 9063 	ldrb.w	r9, [r4, #99]	; 0x63
    73c0:	7800      	ldrb	r0, [r0, #0]
    73c2:	f7ff ff3b 	bl	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    73c6:	4605      	mov	r5, r0
    73c8:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    73cc:	f7ff ff36 	bl	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    73d0:	4428      	add	r0, r5
    73d2:	b286      	uxth	r6, r0
    73d4:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    73d8:	f7ff ff30 	bl	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    73dc:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    73e0:	fa1f f880 	uxth.w	r8, r0
    73e4:	4648      	mov	r0, r9
    73e6:	f008 f961 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    73ea:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    73ee:	1a0d      	subs	r5, r1, r0
    73f0:	4648      	mov	r0, r9
    73f2:	f008 f969 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    73f6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    73fa:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    73fe:	fbb0 f0fa 	udiv	r0, r0, sl
    7402:	1a2d      	subs	r5, r5, r0
    7404:	4648      	mov	r0, r9
    7406:	f008 f951 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    740a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    740e:	1a0f      	subs	r7, r1, r0
    7410:	4648      	mov	r0, r9
    7412:	f008 f959 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7416:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    741a:	4401      	add	r1, r0
    741c:	fbb1 f0fa 	udiv	r0, r1, sl
    7420:	1a39      	subs	r1, r7, r0
    7422:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    7426:	4370      	muls	r0, r6
    7428:	fbb0 f2f8 	udiv	r2, r0, r8
    742c:	2029      	movs	r0, #41	; 0x29
    742e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    7432:	3260      	adds	r2, #96	; 0x60
    7434:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    7438:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    743c:	42a9      	cmp	r1, r5
    743e:	d801      	bhi.n	7444 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x29c>
    7440:	4285      	cmp	r5, r0
    7442:	d901      	bls.n	7448 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>
    7444:	f7fc f8f2 	bl	362c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    7448:	4631      	mov	r1, r6
    744a:	6860      	ldr	r0, [r4, #4]
    744c:	f004 fb57 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7450:	2100      	movs	r1, #0
    7452:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7456:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    745e:	0000      	.short	0x0000
    7460:	20000114 	.word	0x20000114
    7464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7466:	460e      	mov	r6, r1
    7468:	4604      	mov	r4, r0
    746a:	f003 fb2f 	bl	aacc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    746e:	2500      	movs	r5, #0
    7470:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
    7474:	2e01      	cmp	r6, #1
    7476:	d102      	bne.n	747e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2d6>
    7478:	480f      	ldr	r0, [pc, #60]	; (74b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x310>)
    747a:	7880      	ldrb	r0, [r0, #2]
    747c:	b168      	cbz	r0, 749a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f2>
    747e:	2004      	movs	r0, #4
    7480:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7484:	f006 ff0f 	bl	e2a6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    7488:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    748c:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    7490:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7494:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    7498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    749a:	9500      	str	r5, [sp, #0]
    749c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    74a0:	2301      	movs	r3, #1
    74a2:	2200      	movs	r2, #0
    74a4:	4620      	mov	r0, r4
    74a6:	f000 f809 	bl	74bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    74aa:	2800      	cmp	r0, #0
    74ac:	d0ea      	beq.n	7484 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2dc>
    74ae:	f240 61e2 	movw	r1, #1762	; 0x6e2
    74b2:	2030      	movs	r0, #48	; 0x30
    74b4:	f7fc fc2e 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74b8:	20000114 	.word	0x20000114
    74bc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74c0:	4604      	mov	r4, r0
    74c2:	b085      	sub	sp, #20
    74c4:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    74c8:	f8df b424 	ldr.w	fp, [pc, #1060]	; 78f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x748>
    74cc:	e9cd 3000 	strd	r3, r0, [sp]
    74d0:	4699      	mov	r9, r3
    74d2:	460f      	mov	r7, r1
    74d4:	f89b 0000 	ldrb.w	r0, [fp]
    74d8:	f7ff feb0 	bl	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    74dc:	4605      	mov	r5, r0
    74de:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    74e2:	f7ff feab 	bl	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    74e6:	4428      	add	r0, r5
    74e8:	f8ad 0008 	strh.w	r0, [sp, #8]
    74ec:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    74f0:	280d      	cmp	r0, #13
    74f2:	d004      	beq.n	74fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x356>
    74f4:	2000      	movs	r0, #0
    74f6:	9003      	str	r0, [sp, #12]
    74f8:	9807      	ldr	r0, [sp, #28]
    74fa:	b110      	cbz	r0, 7502 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    74fc:	e02e      	b.n	755c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    74fe:	2001      	movs	r0, #1
    7500:	e7f9      	b.n	74f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34e>
    7502:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7506:	2803      	cmp	r0, #3
    7508:	d128      	bne.n	755c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    750a:	9803      	ldr	r0, [sp, #12]
    750c:	b330      	cbz	r0, 755c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    750e:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7512:	42b8      	cmp	r0, r7
    7514:	d122      	bne.n	755c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    7516:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    751a:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    751e:	6860      	ldr	r0, [r4, #4]
    7520:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    7524:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7528:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    752c:	4408      	add	r0, r1
    752e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    7532:	4620      	mov	r0, r4
    7534:	f007 f81d 	bl	e572 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7538:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    753c:	61a0      	str	r0, [r4, #24]
    753e:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    7542:	82a0      	strh	r0, [r4, #20]
    7544:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    7548:	6060      	str	r0, [r4, #4]
    754a:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    754e:	8120      	strh	r0, [r4, #8]
    7550:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7554:	8160      	strh	r0, [r4, #10]
    7556:	2002      	movs	r0, #2
    7558:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    755c:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    7560:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    7564:	1a38      	subs	r0, r7, r0
    7566:	fa0f fa80 	sxth.w	sl, r0
    756a:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    756e:	1a38      	subs	r0, r7, r0
    7570:	fa0f f880 	sxth.w	r8, r0
    7574:	f1b8 0f00 	cmp.w	r8, #0
    7578:	da06      	bge.n	7588 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>
    757a:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    757e:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7582:	2001      	movs	r0, #1
    7584:	46d0      	mov	r8, sl
    7586:	9000      	str	r0, [sp, #0]
    7588:	ab02      	add	r3, sp, #8
    758a:	4652      	mov	r2, sl
    758c:	4641      	mov	r1, r8
    758e:	4620      	mov	r0, r4
    7590:	f7ff fe96 	bl	72c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    7594:	9004      	str	r0, [sp, #16]
    7596:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    759a:	b140      	cbz	r0, 75ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x406>
    759c:	2801      	cmp	r0, #1
    759e:	d07c      	beq.n	769a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f2>
    75a0:	2802      	cmp	r0, #2
    75a2:	d05a      	beq.n	765a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4b2>
    75a4:	2803      	cmp	r0, #3
    75a6:	d079      	beq.n	769c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f4>
    75a8:	f44f 61ac 	mov.w	r1, #1376	; 0x560
    75ac:	e19c      	b.n	78e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    75ae:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    75b2:	b3e8      	cbz	r0, 7630 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x488>
    75b4:	2101      	movs	r1, #1
    75b6:	2000      	movs	r0, #0
    75b8:	f005 fe01 	bl	d1be <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    75bc:	4606      	mov	r6, r0
    75be:	69a0      	ldr	r0, [r4, #24]
    75c0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    75c4:	4430      	add	r0, r6
    75c6:	f004 fa9a 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75ca:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    75ce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    75d2:	6860      	ldr	r0, [r4, #4]
    75d4:	f004 fa93 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75d8:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    75dc:	a901      	add	r1, sp, #4
    75de:	4668      	mov	r0, sp
    75e0:	f003 f9d2 	bl	a988 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    75e4:	e9dd 1200 	ldrd	r1, r2, [sp]
    75e8:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    75ec:	f7fb f872 	bl	26d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    75f0:	4682      	mov	sl, r0
    75f2:	4620      	mov	r0, r4
    75f4:	f006 fe49 	bl	e28a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    75f8:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    75fc:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    7600:	f008 f862 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7604:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7608:	4401      	add	r1, r0
    760a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    760e:	fbb1 f0f0 	udiv	r0, r1, r0
    7612:	69a1      	ldr	r1, [r4, #24]
    7614:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7618:	4431      	add	r1, r6
    761a:	1a08      	subs	r0, r1, r0
    761c:	1a81      	subs	r1, r0, r2
    761e:	4441      	add	r1, r8
    7620:	3920      	subs	r1, #32
    7622:	eba1 060a 	sub.w	r6, r1, sl
    7626:	0050      	lsls	r0, r2, #1
    7628:	8aa1      	ldrh	r1, [r4, #20]
    762a:	3060      	adds	r0, #96	; 0x60
    762c:	4401      	add	r1, r0
    762e:	e000      	b.n	7632 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48a>
    7630:	e010      	b.n	7654 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ac>
    7632:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7636:	f006 fe3d 	bl	e2b4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    763a:	3020      	adds	r0, #32
    763c:	f8cb 0010 	str.w	r0, [fp, #16]
    7640:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7644:	4659      	mov	r1, fp
    7646:	1a30      	subs	r0, r6, r0
    7648:	f5b0 7fd7 	cmp.w	r0, #430	; 0x1ae
    764c:	d85c      	bhi.n	7708 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x560>
    764e:	f240 41f9 	movw	r1, #1273	; 0x4f9
    7652:	e149      	b.n	78e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    7654:	f240 41d7 	movw	r1, #1239	; 0x4d7
    7658:	e146      	b.n	78e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    765a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    765e:	69a0      	ldr	r0, [r4, #24]
    7660:	4408      	add	r0, r1
    7662:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7666:	f004 fa4a 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    766a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    766e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7672:	6860      	ldr	r0, [r4, #4]
    7674:	f004 fa43 	bl	bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7678:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    767c:	4620      	mov	r0, r4
    767e:	f006 fe04 	bl	e28a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    7682:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7686:	bb10      	cbnz	r0, 76ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    7688:	f1b9 0f00 	cmp.w	r9, #0
    768c:	d01f      	beq.n	76ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    768e:	f894 8063 	ldrb.w	r8, [r4, #99]	; 0x63
    7692:	4640      	mov	r0, r8
    7694:	f008 f818 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7698:	e001      	b.n	769e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    769a:	e036      	b.n	770a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x562>
    769c:	e052      	b.n	7744 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59c>
    769e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    76a2:	4401      	add	r1, r0
    76a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    76a8:	fbb1 f0f0 	udiv	r0, r1, r0
    76ac:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    76b0:	69a2      	ldr	r2, [r4, #24]
    76b2:	4408      	add	r0, r1
    76b4:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    76b8:	4411      	add	r1, r2
    76ba:	1a0e      	subs	r6, r1, r0
    76bc:	4640      	mov	r0, r8
    76be:	f007 fff5 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    76c2:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    76c6:	1a08      	subs	r0, r1, r0
    76c8:	4406      	add	r6, r0
    76ca:	3e20      	subs	r6, #32
    76cc:	e006      	b.n	76dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x534>
    76ce:	69a1      	ldr	r1, [r4, #24]
    76d0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    76d4:	4408      	add	r0, r1
    76d6:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    76da:	1a46      	subs	r6, r0, r1
    76dc:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    76e0:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    76e4:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    76e8:	fb01 0002 	mla	r0, r1, r2, r0
    76ec:	0040      	lsls	r0, r0, #1
    76ee:	8aa1      	ldrh	r1, [r4, #20]
    76f0:	3060      	adds	r0, #96	; 0x60
    76f2:	4401      	add	r1, r0
    76f4:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    76f8:	f006 fddc 	bl	e2b4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    76fc:	f8cb 0010 	str.w	r0, [fp, #16]
    7700:	2001      	movs	r0, #1
    7702:	4659      	mov	r1, fp
    7704:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7708:	e066      	b.n	77d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    770a:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    770e:	6860      	ldr	r0, [r4, #4]
    7710:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7714:	1a46      	subs	r6, r0, r1
    7716:	eb02 000a 	add.w	r0, r2, sl
    771a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    771e:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    7722:	1a80      	subs	r0, r0, r2
    7724:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    7728:	1e40      	subs	r0, r0, #1
    772a:	fb0c 3202 	mla	r2, ip, r2, r3
    772e:	fb00 2001 	mla	r0, r0, r1, r2
    7732:	0040      	lsls	r0, r0, #1
    7734:	8aa1      	ldrh	r1, [r4, #20]
    7736:	3060      	adds	r0, #96	; 0x60
    7738:	4401      	add	r1, r0
    773a:	fb06 f608 	mul.w	r6, r6, r8
    773e:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7742:	e044      	b.n	77ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x626>
    7744:	6860      	ldr	r0, [r4, #4]
    7746:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    774a:	fb00 f008 	mul.w	r0, r0, r8
    774e:	fb08 0611 	mls	r6, r8, r1, r0
    7752:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    7756:	2824      	cmp	r0, #36	; 0x24
    7758:	d003      	beq.n	7762 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ba>
    775a:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    775e:	2824      	cmp	r0, #36	; 0x24
    7760:	d109      	bne.n	7776 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    7762:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7766:	1a38      	subs	r0, r7, r0
    7768:	b200      	sxth	r0, r0
    776a:	2800      	cmp	r0, #0
    776c:	db03      	blt.n	7776 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    776e:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    7772:	b100      	cbz	r0, 7776 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    7774:	9001      	str	r0, [sp, #4]
    7776:	9800      	ldr	r0, [sp, #0]
    7778:	b1f8      	cbz	r0, 77ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    777a:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    777e:	b9e0      	cbnz	r0, 77ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    7780:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    7784:	2800      	cmp	r0, #0
    7786:	d07d      	beq.n	7884 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    7788:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    778c:	2800      	cmp	r0, #0
    778e:	d079      	beq.n	7884 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    7790:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7794:	f007 ff98 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7798:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    779c:	4401      	add	r1, r0
    779e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77a2:	fbb1 f0f0 	udiv	r0, r1, r0
    77a6:	1a36      	subs	r6, r6, r0
    77a8:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    77ac:	f007 ff7e 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    77b0:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    77b4:	1a08      	subs	r0, r1, r0
    77b6:	4406      	add	r6, r0
    77b8:	3e20      	subs	r6, #32
    77ba:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    77be:	eb01 000a 	add.w	r0, r1, sl
    77c2:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    77c6:	4348      	muls	r0, r1
    77c8:	0041      	lsls	r1, r0, #1
    77ca:	3160      	adds	r1, #96	; 0x60
    77cc:	9801      	ldr	r0, [sp, #4]
    77ce:	f006 fd71 	bl	e2b4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    77d2:	4659      	mov	r1, fp
    77d4:	f8cb 0010 	str.w	r0, [fp, #16]
    77d8:	9804      	ldr	r0, [sp, #16]
    77da:	6909      	ldr	r1, [r1, #16]
    77dc:	1a33      	subs	r3, r6, r0
    77de:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    77e2:	6860      	ldr	r0, [r4, #4]
    77e4:	1b80      	subs	r0, r0, r6
    77e6:	f2a0 203d 	subw	r0, r0, #573	; 0x23d
    77ea:	f8cb 0014 	str.w	r0, [fp, #20]
    77ee:	4281      	cmp	r1, r0
    77f0:	d800      	bhi.n	77f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64c>
    77f2:	4608      	mov	r0, r1
    77f4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    77f8:	2000      	movs	r0, #0
    77fa:	7028      	strb	r0, [r5, #0]
    77fc:	2064      	movs	r0, #100	; 0x64
    77fe:	8128      	strh	r0, [r5, #8]
    7800:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7804:	4619      	mov	r1, r3
    7806:	34dc      	adds	r4, #220	; 0xdc
    7808:	f7f9 fee0 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    780c:	60e8      	str	r0, [r5, #12]
    780e:	f854 0cb4 	ldr.w	r0, [r4, #-180]
    7812:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7814:	4408      	add	r0, r1
    7816:	6068      	str	r0, [r5, #4]
    7818:	68e8      	ldr	r0, [r5, #12]
    781a:	67e0      	str	r0, [r4, #124]	; 0x7c
    781c:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    7820:	2001      	movs	r0, #1
    7822:	72a8      	strb	r0, [r5, #10]
    7824:	8aa1      	ldrh	r1, [r4, #20]
    7826:	3cdc      	subs	r4, #220	; 0xdc
    7828:	1bc9      	subs	r1, r1, r7
    782a:	b209      	sxth	r1, r1
    782c:	2900      	cmp	r1, #0
    782e:	dd01      	ble.n	7834 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68c>
    7830:	2103      	movs	r1, #3
    7832:	72a9      	strb	r1, [r5, #10]
    7834:	9903      	ldr	r1, [sp, #12]
    7836:	b331      	cbz	r1, 7886 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6de>
    7838:	f1b9 0f00 	cmp.w	r9, #0
    783c:	d027      	beq.n	788e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    783e:	bf00      	nop
    7840:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    7844:	b392      	cbz	r2, 78ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x704>
    7846:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    784a:	bf00      	nop
    784c:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    7850:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    7854:	1c49      	adds	r1, r1, #1
    7856:	434b      	muls	r3, r1
    7858:	4293      	cmp	r3, r2
    785a:	d218      	bcs.n	788e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    785c:	7aa9      	ldrb	r1, [r5, #10]
    785e:	1e49      	subs	r1, r1, #1
    7860:	2900      	cmp	r1, #0
    7862:	dd14      	ble.n	788e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    7864:	72a8      	strb	r0, [r5, #10]
    7866:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    786a:	2101      	movs	r1, #1
    786c:	1c40      	adds	r0, r0, #1
    786e:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    7872:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    7876:	f7fc fae5 	bl	3e44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    787a:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    787e:	f000 0007 	and.w	r0, r0, #7
    7882:	e001      	b.n	7888 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e0>
    7884:	e013      	b.n	78ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x706>
    7886:	e015      	b.n	78b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70c>
    7888:	1c40      	adds	r0, r0, #1
    788a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    788e:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    7892:	4629      	mov	r1, r5
    7894:	f006 fd20 	bl	e2d8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    7898:	b320      	cbz	r0, 78e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x73c>
    789a:	9807      	ldr	r0, [sp, #28]
    789c:	f080 0001 	eor.w	r0, r0, #1
    78a0:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    78a4:	2000      	movs	r0, #0
    78a6:	b009      	add	sp, #36	; 0x24
    78a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78ac:	e018      	b.n	78e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x738>
    78ae:	f240 514b 	movw	r1, #1355	; 0x54b
    78b2:	e019      	b.n	78e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    78b4:	f1b9 0f00 	cmp.w	r9, #0
    78b8:	d1c2      	bne.n	7840 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x698>
    78ba:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    78be:	2800      	cmp	r0, #0
    78c0:	d0e5      	beq.n	788e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    78c2:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    78c6:	6860      	ldr	r0, [r4, #4]
    78c8:	1a41      	subs	r1, r0, r1
    78ca:	4628      	mov	r0, r5
    78cc:	f005 fc89 	bl	d1e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    78d0:	0400      	lsls	r0, r0, #16
    78d2:	0c00      	lsrs	r0, r0, #16
    78d4:	d0db      	beq.n	788e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    78d6:	9912      	ldr	r1, [sp, #72]	; 0x48
    78d8:	b101      	cbz	r1, 78dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x734>
    78da:	8008      	strh	r0, [r1, #0]
    78dc:	2001      	movs	r0, #1
    78de:	e7e2      	b.n	78a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6fe>
    78e0:	2100      	movs	r1, #0
    78e2:	e7b3      	b.n	784c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6a4>
    78e4:	f240 51ab 	movw	r1, #1451	; 0x5ab
    78e8:	2030      	movs	r0, #48	; 0x30
    78ea:	f7fc fa13 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78ee:	0000      	.short	0x0000
    78f0:	20000114 	.word	0x20000114
    78f4:	b570      	push	{r4, r5, r6, lr}
    78f6:	b140      	cbz	r0, 790a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    78f8:	2909      	cmp	r1, #9
    78fa:	d24a      	bcs.n	7992 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ea>
    78fc:	e8df f001 	tbb	[pc, r1]
    7900:	3d3d1707 	.word	0x3d3d1707
    7904:	412b4939 	.word	0x412b4939
    7908:	0045      	.short	0x0045
    790a:	21d5      	movs	r1, #213	; 0xd5
    790c:	e03e      	b.n	798c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    790e:	4922      	ldr	r1, [pc, #136]	; (7998 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f0>)
    7910:	4604      	mov	r4, r0
    7912:	6188      	str	r0, [r1, #24]
    7914:	f7fe fdc2 	bl	649c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    7918:	b110      	cbz	r0, 7920 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x778>
    791a:	f240 2187 	movw	r1, #647	; 0x287
    791e:	e035      	b.n	798c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7920:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    7924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7928:	38f6      	subs	r0, #246	; 0xf6
    792a:	f7fa be21 	b.w	2570 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    792e:	4605      	mov	r5, r0
    7930:	f006 f978 	bl	dc24 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7934:	b9a8      	cbnz	r0, 7962 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ba>
    7936:	4628      	mov	r0, r5
    7938:	f006 fc7e 	bl	e238 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    793c:	4604      	mov	r4, r0
    793e:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    7942:	42a0      	cmp	r0, r4
    7944:	d20b      	bcs.n	795e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    7946:	1a20      	subs	r0, r4, r0
    7948:	2104      	movs	r1, #4
    794a:	f7f9 fd7d 	bl	1448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    794e:	b130      	cbz	r0, 795e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    7950:	4628      	mov	r0, r5
    7952:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    7956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    795a:	f006 b934 	b.w	dbc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    795e:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    7962:	4628      	mov	r0, r5
    7964:	f7fe fdb6 	bl	64d4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    7968:	2800      	cmp	r0, #0
    796a:	d014      	beq.n	7996 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ee>
    796c:	f240 21bb 	movw	r1, #699	; 0x2bb
    7970:	e00c      	b.n	798c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7976:	f003 baab 	b.w	aed0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    797a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    797e:	f006 bbf5 	b.w	e16c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7986:	f006 bc4e 	b.w	e226 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    798a:	21f7      	movs	r1, #247	; 0xf7
    798c:	2030      	movs	r0, #48	; 0x30
    798e:	f7fc f9c1 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7992:	21fb      	movs	r1, #251	; 0xfb
    7994:	e7fa      	b.n	798c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7996:	bd70      	pop	{r4, r5, r6, pc}
    7998:	20000114 	.word	0x20000114
    799c:	b570      	push	{r4, r5, r6, lr}
    799e:	4604      	mov	r4, r0
    79a0:	f7f9 ff7e 	bl	18a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    79a4:	2864      	cmp	r0, #100	; 0x64
    79a6:	d901      	bls.n	79ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x804>
    79a8:	4605      	mov	r5, r0
    79aa:	e000      	b.n	79ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    79ac:	2564      	movs	r5, #100	; 0x64
    79ae:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    79b2:	2128      	movs	r1, #40	; 0x28
    79b4:	f006 fbd8 	bl	e168 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    79b8:	4428      	add	r0, r5
    79ba:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    79be:	f200 2037 	addw	r0, r0, #567	; 0x237
    79c2:	180e      	adds	r6, r1, r0
    79c4:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    79c8:	2128      	movs	r1, #40	; 0x28
    79ca:	f006 fbcd 	bl	e168 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    79ce:	f200 229b 	addw	r2, r0, #667	; 0x29b
    79d2:	4620      	mov	r0, r4
    79d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79d6:	f005 ff8f 	bl	d8f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    79da:	4605      	mov	r5, r0
    79dc:	4632      	mov	r2, r6
    79de:	4620      	mov	r0, r4
    79e0:	6861      	ldr	r1, [r4, #4]
    79e2:	f005 ff89 	bl	d8f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    79e6:	4907      	ldr	r1, [pc, #28]	; (7a04 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x85c>)
    79e8:	4285      	cmp	r5, r0
    79ea:	6088      	str	r0, [r1, #8]
    79ec:	d200      	bcs.n	79f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x848>
    79ee:	4628      	mov	r0, r5
    79f0:	6048      	str	r0, [r1, #4]
    79f2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    79f6:	f5a0 70b2 	sub.w	r0, r0, #356	; 0x164
    79fa:	60c8      	str	r0, [r1, #12]
    79fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a00:	f7fa bdb6 	b.w	2570 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7a04:	20000114 	.word	0x20000114
    7a08:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7a0a:	4604      	mov	r4, r0
    7a0c:	f004 f838 	bl	ba80 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7a10:	4601      	mov	r1, r0
    7a12:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7a16:	f7f9 fe0b 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7a1a:	6861      	ldr	r1, [r4, #4]
    7a1c:	b111      	cbz	r1, 7a24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87c>
    7a1e:	fbb0 f0f1 	udiv	r0, r0, r1
    7a22:	e000      	b.n	7a26 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87e>
    7a24:	2000      	movs	r0, #0
    7a26:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    7a2a:	290d      	cmp	r1, #13
    7a2c:	d00c      	beq.n	7a48 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7a2e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
    7a32:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7a36:	1813      	adds	r3, r2, r0
    7a38:	1acb      	subs	r3, r1, r3
    7a3a:	b21b      	sxth	r3, r3
    7a3c:	2b00      	cmp	r3, #0
    7a3e:	db06      	blt.n	7a4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a6>
    7a40:	1c49      	adds	r1, r1, #1
    7a42:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7a46:	e006      	b.n	7a56 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ae>
    7a48:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7a4c:	e00c      	b.n	7a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c0>
    7a4e:	1c40      	adds	r0, r0, #1
    7a50:	4410      	add	r0, r2
    7a52:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7a56:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    7a5a:	b940      	cbnz	r0, 7a6e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    7a5c:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7a60:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7a64:	4288      	cmp	r0, r1
    7a66:	d102      	bne.n	7a6e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    7a68:	1c40      	adds	r0, r0, #1
    7a6a:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7a6e:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7a72:	1c40      	adds	r0, r0, #1
    7a74:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    7a78:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    7a7c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    7a80:	1a40      	subs	r0, r0, r1
    7a82:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    7a86:	1e40      	subs	r0, r0, #1
    7a88:	4408      	add	r0, r1
    7a8a:	b285      	uxth	r5, r0
    7a8c:	e023      	b.n	7ad6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92e>
    7a8e:	a801      	add	r0, sp, #4
    7a90:	2300      	movs	r3, #0
    7a92:	9000      	str	r0, [sp, #0]
    7a94:	461a      	mov	r2, r3
    7a96:	4620      	mov	r0, r4
    7a98:	f7ff fd10 	bl	74bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    7a9c:	2800      	cmp	r0, #0
    7a9e:	d036      	beq.n	7b0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x966>
    7aa0:	2801      	cmp	r0, #1
    7aa2:	d004      	beq.n	7aae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x906>
    7aa4:	f240 6162 	movw	r1, #1634	; 0x662
    7aa8:	2030      	movs	r0, #48	; 0x30
    7aaa:	f7fc f933 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aae:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7ab2:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
    7ab6:	1a0a      	subs	r2, r1, r0
    7ab8:	b212      	sxth	r2, r2
    7aba:	2a00      	cmp	r2, #0
    7abc:	da06      	bge.n	7acc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x924>
    7abe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7ac2:	440a      	add	r2, r1
    7ac4:	1aaa      	subs	r2, r5, r2
    7ac6:	b212      	sxth	r2, r2
    7ac8:	2a00      	cmp	r2, #0
    7aca:	db02      	blt.n	7ad2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92a>
    7acc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    7ad0:	4408      	add	r0, r1
    7ad2:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7ad6:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7ada:	1a68      	subs	r0, r5, r1
    7adc:	b200      	sxth	r0, r0
    7ade:	2800      	cmp	r0, #0
    7ae0:	dad5      	bge.n	7a8e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8e6>
    7ae2:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    7ae6:	b180      	cbz	r0, 7b0a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x962>
    7ae8:	f05f 0008 	movs.w	r0, #8
    7aec:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    7af0:	2001      	movs	r0, #1
    7af2:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    7af6:	4620      	mov	r0, r4
    7af8:	f006 fd70 	bl	e5dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    7afc:	4620      	mov	r0, r4
    7afe:	f006 fc44 	bl	e38a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7b02:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    7b06:	f002 b861 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7b0a:	203e      	movs	r0, #62	; 0x3e
    7b0c:	e7ee      	b.n	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x944>
    7b0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00007b10 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7b10:	4806      	ldr	r0, [pc, #24]	; (7b2c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7b12:	4905      	ldr	r1, [pc, #20]	; (7b28 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7b14:	6501      	str	r1, [r0, #80]	; 0x50
    7b16:	4906      	ldr	r1, [pc, #24]	; (7b30 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7b18:	6541      	str	r1, [r0, #84]	; 0x54
    7b1a:	4807      	ldr	r0, [pc, #28]	; (7b38 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7b1c:	4905      	ldr	r1, [pc, #20]	; (7b34 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7b1e:	6501      	str	r1, [r0, #80]	; 0x50
    7b20:	4906      	ldr	r1, [pc, #24]	; (7b3c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7b22:	6541      	str	r1, [r0, #84]	; 0x54
    7b24:	4770      	bx	lr
    7b26:	0000      	.short	0x0000
    7b28:	00008fb5 	.word	0x00008fb5
    7b2c:	20000144 	.word	0x20000144
    7b30:	00009075 	.word	0x00009075
    7b34:	000096c1 	.word	0x000096c1
    7b38:	200001a8 	.word	0x200001a8
    7b3c:	000096f1 	.word	0x000096f1

00007b40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b42:	460d      	mov	r5, r1
    7b44:	4607      	mov	r7, r0
    7b46:	2100      	movs	r1, #0
    7b48:	f005 f92f 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7b4c:	1e04      	subs	r4, r0, #0
    7b4e:	d04f      	beq.n	7bf0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7b50:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    7b54:	2800      	cmp	r0, #0
    7b56:	d04b      	beq.n	7bf0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7b58:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7b5c:	f88d 0000 	strb.w	r0, [sp]
    7b60:	9800      	ldr	r0, [sp, #0]
    7b62:	9000      	str	r0, [sp, #0]
    7b64:	f89d 0000 	ldrb.w	r0, [sp]
    7b68:	2600      	movs	r6, #0
    7b6a:	b1d8      	cbz	r0, 7ba4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7b6c:	706e      	strb	r6, [r5, #1]
    7b6e:	2007      	movs	r0, #7
    7b70:	7028      	strb	r0, [r5, #0]
    7b72:	e00b      	b.n	7b8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7b74:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    7b78:	83a6      	strh	r6, [r4, #28]
    7b7a:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    7b7e:	6068      	str	r0, [r5, #4]
    7b80:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    7b84:	60a8      	str	r0, [r5, #8]
    7b86:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    7b8a:	81a8      	strh	r0, [r5, #12]
    7b8c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7b90:	f88d 0000 	strb.w	r0, [sp]
    7b94:	9800      	ldr	r0, [sp, #0]
    7b96:	9000      	str	r0, [sp, #0]
    7b98:	f89d 0000 	ldrb.w	r0, [sp]
    7b9c:	2800      	cmp	r0, #0
    7b9e:	d1e9      	bne.n	7b74 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7ba0:	712e      	strb	r6, [r5, #4]
    7ba2:	e10b      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7ba4:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7ba8:	b3a0      	cbz	r0, 7c14 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7baa:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7bae:	280b      	cmp	r0, #11
    7bb0:	d016      	beq.n	7be0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7bb2:	280c      	cmp	r0, #12
    7bb4:	d004      	beq.n	7bc0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7bb6:	f640 21ce 	movw	r1, #2766	; 0xace
    7bba:	2031      	movs	r0, #49	; 0x31
    7bbc:	f7fc f8aa 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bc0:	8820      	ldrh	r0, [r4, #0]
    7bc2:	f7fc fcdb 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7bc6:	4607      	mov	r7, r0
    7bc8:	f004 ffaa 	bl	cb20 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7bcc:	b978      	cbnz	r0, 7bee <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7bce:	706e      	strb	r6, [r5, #1]
    7bd0:	200c      	movs	r0, #12
    7bd2:	7028      	strb	r0, [r5, #0]
    7bd4:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7bd8:	7128      	strb	r0, [r5, #4]
    7bda:	8820      	ldrh	r0, [r4, #0]
    7bdc:	80e8      	strh	r0, [r5, #6]
    7bde:	e013      	b.n	7c08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7be0:	8820      	ldrh	r0, [r4, #0]
    7be2:	f7fc fccb 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7be6:	4607      	mov	r7, r0
    7be8:	f004 ff9a 	bl	cb20 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7bec:	b108      	cbz	r0, 7bf2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7bee:	2000      	movs	r0, #0
    7bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bf2:	706e      	strb	r6, [r5, #1]
    7bf4:	200b      	movs	r0, #11
    7bf6:	7028      	strb	r0, [r5, #0]
    7bf8:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7bfc:	7128      	strb	r0, [r5, #4]
    7bfe:	8820      	ldrh	r0, [r4, #0]
    7c00:	80e8      	strh	r0, [r5, #6]
    7c02:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    7c06:	7228      	strb	r0, [r5, #8]
    7c08:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    7c0c:	4638      	mov	r0, r7
    7c0e:	f004 ff9c 	bl	cb4a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7c12:	e0d3      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c14:	e7ff      	b.n	7c16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7c16:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    7c1a:	f88d 0000 	strb.w	r0, [sp]
    7c1e:	9800      	ldr	r0, [sp, #0]
    7c20:	9000      	str	r0, [sp, #0]
    7c22:	f89d 0000 	ldrb.w	r0, [sp]
    7c26:	b130      	cbz	r0, 7c36 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7c28:	706e      	strb	r6, [r5, #1]
    7c2a:	200e      	movs	r0, #14
    7c2c:	7028      	strb	r0, [r5, #0]
    7c2e:	80af      	strh	r7, [r5, #4]
    7c30:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    7c34:	e0c2      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c36:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7c3a:	f88d 0000 	strb.w	r0, [sp]
    7c3e:	9800      	ldr	r0, [sp, #0]
    7c40:	9000      	str	r0, [sp, #0]
    7c42:	f89d 0000 	ldrb.w	r0, [sp]
    7c46:	b198      	cbz	r0, 7c70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7c48:	706e      	strb	r6, [r5, #1]
    7c4a:	2008      	movs	r0, #8
    7c4c:	7028      	strb	r0, [r5, #0]
    7c4e:	8820      	ldrh	r0, [r4, #0]
    7c50:	80a8      	strh	r0, [r5, #4]
    7c52:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    7c56:	f8c5 1006 	str.w	r1, [r5, #6]
    7c5a:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    7c5e:	f8c5 100a 	str.w	r1, [r5, #10]
    7c62:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    7c66:	81e8      	strh	r0, [r5, #14]
    7c68:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    7c6c:	7026      	strb	r6, [r4, #0]
    7c6e:	e0a5      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c70:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7c74:	f88d 0000 	strb.w	r0, [sp]
    7c78:	9800      	ldr	r0, [sp, #0]
    7c7a:	9000      	str	r0, [sp, #0]
    7c7c:	f89d 0000 	ldrb.w	r0, [sp]
    7c80:	b1a0      	cbz	r0, 7cac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7c82:	706e      	strb	r6, [r5, #1]
    7c84:	2016      	movs	r0, #22
    7c86:	7028      	strb	r0, [r5, #0]
    7c88:	e005      	b.n	7c96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7c8a:	bf00      	nop
    7c8c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    7c90:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7c94:	6068      	str	r0, [r5, #4]
    7c96:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7c9a:	f88d 0000 	strb.w	r0, [sp]
    7c9e:	9800      	ldr	r0, [sp, #0]
    7ca0:	9000      	str	r0, [sp, #0]
    7ca2:	f89d 0000 	ldrb.w	r0, [sp]
    7ca6:	2800      	cmp	r0, #0
    7ca8:	d1f0      	bne.n	7c8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7caa:	e087      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7cac:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7cb0:	f88d 0000 	strb.w	r0, [sp]
    7cb4:	9800      	ldr	r0, [sp, #0]
    7cb6:	9000      	str	r0, [sp, #0]
    7cb8:	f89d 0000 	ldrb.w	r0, [sp]
    7cbc:	b170      	cbz	r0, 7cdc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7cbe:	706e      	strb	r6, [r5, #1]
    7cc0:	2006      	movs	r0, #6
    7cc2:	7028      	strb	r0, [r5, #0]
    7cc4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7cc8:	6068      	str	r0, [r5, #4]
    7cca:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    7cce:	60a8      	str	r0, [r5, #8]
    7cd0:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7cd4:	60e8      	str	r0, [r5, #12]
    7cd6:	f504 7401 	add.w	r4, r4, #516	; 0x204
    7cda:	e03a      	b.n	7d52 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7cdc:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7ce0:	f88d 0000 	strb.w	r0, [sp]
    7ce4:	9800      	ldr	r0, [sp, #0]
    7ce6:	9000      	str	r0, [sp, #0]
    7ce8:	f89d 0000 	ldrb.w	r0, [sp]
    7cec:	b1d0      	cbz	r0, 7d24 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7cee:	706e      	strb	r6, [r5, #1]
    7cf0:	2012      	movs	r0, #18
    7cf2:	7028      	strb	r0, [r5, #0]
    7cf4:	e00b      	b.n	7d0e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7cf6:	bf00      	nop
    7cf8:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    7cfc:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    7d00:	6068      	str	r0, [r5, #4]
    7d02:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    7d06:	60a8      	str	r0, [r5, #8]
    7d08:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7d0c:	60e8      	str	r0, [r5, #12]
    7d0e:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7d12:	f88d 0000 	strb.w	r0, [sp]
    7d16:	9800      	ldr	r0, [sp, #0]
    7d18:	9000      	str	r0, [sp, #0]
    7d1a:	f89d 0000 	ldrb.w	r0, [sp]
    7d1e:	2800      	cmp	r0, #0
    7d20:	d1ea      	bne.n	7cf8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7d22:	e04b      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d24:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    7d28:	f88d 0000 	strb.w	r0, [sp]
    7d2c:	9800      	ldr	r0, [sp, #0]
    7d2e:	9000      	str	r0, [sp, #0]
    7d30:	f89d 0000 	ldrb.w	r0, [sp]
    7d34:	b180      	cbz	r0, 7d58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7d36:	706e      	strb	r6, [r5, #1]
    7d38:	2018      	movs	r0, #24
    7d3a:	7028      	strb	r0, [r5, #0]
    7d3c:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    7d40:	6068      	str	r0, [r5, #4]
    7d42:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    7d46:	60a8      	str	r0, [r5, #8]
    7d48:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    7d4c:	81a8      	strh	r0, [r5, #12]
    7d4e:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    7d52:	f804 6c02 	strb.w	r6, [r4, #-2]
    7d56:	e031      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d58:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7d5c:	f88d 0000 	strb.w	r0, [sp]
    7d60:	9800      	ldr	r0, [sp, #0]
    7d62:	9000      	str	r0, [sp, #0]
    7d64:	f89d 0000 	ldrb.w	r0, [sp]
    7d68:	b138      	cbz	r0, 7d7a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7d6a:	2019      	movs	r0, #25
    7d6c:	7028      	strb	r0, [r5, #0]
    7d6e:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7d72:	6068      	str	r0, [r5, #4]
    7d74:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7d78:	e020      	b.n	7dbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d7a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7d7e:	f88d 0000 	strb.w	r0, [sp]
    7d82:	9800      	ldr	r0, [sp, #0]
    7d84:	9000      	str	r0, [sp, #0]
    7d86:	f89d 0000 	ldrb.w	r0, [sp]
    7d8a:	2800      	cmp	r0, #0
    7d8c:	f43f af30 	beq.w	7bf0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7d90:	706e      	strb	r6, [r5, #1]
    7d92:	2013      	movs	r0, #19
    7d94:	7028      	strb	r0, [r5, #0]
    7d96:	e007      	b.n	7da8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7d98:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7d9c:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    7da0:	6068      	str	r0, [r5, #4]
    7da2:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    7da6:	8128      	strh	r0, [r5, #8]
    7da8:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7dac:	f88d 0000 	strb.w	r0, [sp]
    7db0:	9800      	ldr	r0, [sp, #0]
    7db2:	9000      	str	r0, [sp, #0]
    7db4:	f89d 0000 	ldrb.w	r0, [sp]
    7db8:	2800      	cmp	r0, #0
    7dba:	d1ed      	bne.n	7d98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7dbc:	2001      	movs	r0, #1
    7dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007dc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7dc0:	481b      	ldr	r0, [pc, #108]	; (7e30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7dc2:	491a      	ldr	r1, [pc, #104]	; (7e2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7dc4:	6081      	str	r1, [r0, #8]
    7dc6:	491b      	ldr	r1, [pc, #108]	; (7e34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7dc8:	6041      	str	r1, [r0, #4]
    7dca:	491b      	ldr	r1, [pc, #108]	; (7e38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7dcc:	6001      	str	r1, [r0, #0]
    7dce:	491b      	ldr	r1, [pc, #108]	; (7e3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7dd0:	6281      	str	r1, [r0, #40]	; 0x28
    7dd2:	491b      	ldr	r1, [pc, #108]	; (7e40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7dd4:	62c1      	str	r1, [r0, #44]	; 0x2c
    7dd6:	491b      	ldr	r1, [pc, #108]	; (7e44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7dd8:	60c1      	str	r1, [r0, #12]
    7dda:	491b      	ldr	r1, [pc, #108]	; (7e48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7ddc:	6181      	str	r1, [r0, #24]
    7dde:	491b      	ldr	r1, [pc, #108]	; (7e4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7de0:	6301      	str	r1, [r0, #48]	; 0x30
    7de2:	491b      	ldr	r1, [pc, #108]	; (7e50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7de4:	6201      	str	r1, [r0, #32]
    7de6:	491b      	ldr	r1, [pc, #108]	; (7e54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7de8:	64c1      	str	r1, [r0, #76]	; 0x4c
    7dea:	491b      	ldr	r1, [pc, #108]	; (7e58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7dec:	6481      	str	r1, [r0, #72]	; 0x48
    7dee:	491b      	ldr	r1, [pc, #108]	; (7e5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7df0:	6441      	str	r1, [r0, #68]	; 0x44
    7df2:	491b      	ldr	r1, [pc, #108]	; (7e60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7df4:	6341      	str	r1, [r0, #52]	; 0x34
    7df6:	491b      	ldr	r1, [pc, #108]	; (7e64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7df8:	61c1      	str	r1, [r0, #28]
    7dfa:	481c      	ldr	r0, [pc, #112]	; (7e6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7dfc:	491a      	ldr	r1, [pc, #104]	; (7e68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7dfe:	6081      	str	r1, [r0, #8]
    7e00:	491b      	ldr	r1, [pc, #108]	; (7e70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7e02:	61c1      	str	r1, [r0, #28]
    7e04:	491b      	ldr	r1, [pc, #108]	; (7e74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7e06:	6241      	str	r1, [r0, #36]	; 0x24
    7e08:	491b      	ldr	r1, [pc, #108]	; (7e78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7e0a:	62c1      	str	r1, [r0, #44]	; 0x2c
    7e0c:	491b      	ldr	r1, [pc, #108]	; (7e7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7e0e:	6101      	str	r1, [r0, #16]
    7e10:	491b      	ldr	r1, [pc, #108]	; (7e80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7e12:	6141      	str	r1, [r0, #20]
    7e14:	491b      	ldr	r1, [pc, #108]	; (7e84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7e16:	6441      	str	r1, [r0, #68]	; 0x44
    7e18:	6341      	str	r1, [r0, #52]	; 0x34
    7e1a:	491b      	ldr	r1, [pc, #108]	; (7e88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7e1c:	6181      	str	r1, [r0, #24]
    7e1e:	491b      	ldr	r1, [pc, #108]	; (7e8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7e20:	6301      	str	r1, [r0, #48]	; 0x30
    7e22:	491b      	ldr	r1, [pc, #108]	; (7e90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7e24:	6481      	str	r1, [r0, #72]	; 0x48
    7e26:	491b      	ldr	r1, [pc, #108]	; (7e94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7e28:	64c1      	str	r1, [r0, #76]	; 0x4c
    7e2a:	4770      	bx	lr
    7e2c:	00009415 	.word	0x00009415
    7e30:	20000144 	.word	0x20000144
    7e34:	00008d7d 	.word	0x00008d7d
    7e38:	00008dd9 	.word	0x00008dd9
    7e3c:	0000913d 	.word	0x0000913d
    7e40:	00009181 	.word	0x00009181
    7e44:	00008e85 	.word	0x00008e85
    7e48:	000093ed 	.word	0x000093ed
    7e4c:	00009531 	.word	0x00009531
    7e50:	00008f31 	.word	0x00008f31
    7e54:	00009111 	.word	0x00009111
    7e58:	000090e5 	.word	0x000090e5
    7e5c:	000093ad 	.word	0x000093ad
    7e60:	000093dd 	.word	0x000093dd
    7e64:	00009449 	.word	0x00009449
    7e68:	000098a9 	.word	0x000098a9
    7e6c:	200001a8 	.word	0x200001a8
    7e70:	000098d1 	.word	0x000098d1
    7e74:	00009691 	.word	0x00009691
    7e78:	00009769 	.word	0x00009769
    7e7c:	00009665 	.word	0x00009665
    7e80:	00009811 	.word	0x00009811
    7e84:	000097ed 	.word	0x000097ed
    7e88:	00009835 	.word	0x00009835
    7e8c:	00009929 	.word	0x00009929
    7e90:	00009721 	.word	0x00009721
    7e94:	00009751 	.word	0x00009751

00007e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7e98:	4806      	ldr	r0, [pc, #24]	; (7eb4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7e9a:	4905      	ldr	r1, [pc, #20]	; (7eb0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7e9c:	6581      	str	r1, [r0, #88]	; 0x58
    7e9e:	4906      	ldr	r1, [pc, #24]	; (7eb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7ea0:	6601      	str	r1, [r0, #96]	; 0x60
    7ea2:	4807      	ldr	r0, [pc, #28]	; (7ec0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7ea4:	4905      	ldr	r1, [pc, #20]	; (7ebc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7ea6:	6581      	str	r1, [r0, #88]	; 0x58
    7ea8:	4906      	ldr	r1, [pc, #24]	; (7ec4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7eaa:	65c1      	str	r1, [r0, #92]	; 0x5c
    7eac:	4770      	bx	lr
    7eae:	0000      	.short	0x0000
    7eb0:	000091a1 	.word	0x000091a1
    7eb4:	20000144 	.word	0x20000144
    7eb8:	00009269 	.word	0x00009269
    7ebc:	00009795 	.word	0x00009795
    7ec0:	200001a8 	.word	0x200001a8
    7ec4:	000097c5 	.word	0x000097c5

00007ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ecc:	2701      	movs	r7, #1
    7ece:	4c73      	ldr	r4, [pc, #460]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    7ed0:	2500      	movs	r5, #0
    7ed2:	f367 0107 	bfi	r1, r7, #0, #8
    7ed6:	8065      	strh	r5, [r4, #2]
    7ed8:	7065      	strb	r5, [r4, #1]
    7eda:	7025      	strb	r5, [r4, #0]
    7edc:	60a0      	str	r0, [r4, #8]
    7ede:	4689      	mov	r9, r1
    7ee0:	4680      	mov	r8, r0
    7ee2:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    7ee6:	8800      	ldrh	r0, [r0, #0]
    7ee8:	f7fc fb5e 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7eec:	b180      	cbz	r0, 7f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7eee:	68a0      	ldr	r0, [r4, #8]
    7ef0:	8800      	ldrh	r0, [r0, #0]
    7ef2:	f7fc fdad 	bl	4a50 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7ef6:	68a0      	ldr	r0, [r4, #8]
    7ef8:	8800      	ldrh	r0, [r0, #0]
    7efa:	f7fc fd51 	bl	49a0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7efe:	68a0      	ldr	r0, [r4, #8]
    7f00:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7f04:	b1a9      	cbz	r1, 7f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7f06:	3068      	adds	r0, #104	; 0x68
    7f08:	f006 fb77 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7f0c:	b128      	cbz	r0, 7f1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    7f0e:	e010      	b.n	7f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7f10:	f640 31a9 	movw	r1, #2985	; 0xba9
    7f14:	2031      	movs	r0, #49	; 0x31
    7f16:	f7fb fefd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f1a:	68a0      	ldr	r0, [r4, #8]
    7f1c:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    7f20:	b139      	cbz	r1, 7f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7f22:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    7f26:	2301      	movs	r3, #1
    7f28:	4619      	mov	r1, r3
    7f2a:	3068      	adds	r0, #104	; 0x68
    7f2c:	f005 f8a0 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7f30:	b180      	cbz	r0, 7f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    7f32:	68a0      	ldr	r0, [r4, #8]
    7f34:	3068      	adds	r0, #104	; 0x68
    7f36:	f006 fb60 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7f3a:	b128      	cbz	r0, 7f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    7f3c:	68a0      	ldr	r0, [r4, #8]
    7f3e:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    7f42:	bf00      	nop
    7f44:	f000 fb88 	bl	8658 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x658>
    7f48:	68a0      	ldr	r0, [r4, #8]
    7f4a:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    7f4e:	b189      	cbz	r1, 7f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    7f50:	80a5      	strh	r5, [r4, #4]
    7f52:	e01e      	b.n	7f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    7f54:	68a0      	ldr	r0, [r4, #8]
    7f56:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    7f5a:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    7f5e:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    7f62:	2100      	movs	r1, #0
    7f64:	2002      	movs	r0, #2
    7f66:	f000 fe03 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    7f6a:	68a0      	ldr	r0, [r4, #8]
    7f6c:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7f70:	2002      	movs	r0, #2
    7f72:	e7e7      	b.n	7f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    7f74:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    7f78:	f88d 1000 	strb.w	r1, [sp]
    7f7c:	9900      	ldr	r1, [sp, #0]
    7f7e:	9100      	str	r1, [sp, #0]
    7f80:	f89d 1000 	ldrb.w	r1, [sp]
    7f84:	b919      	cbnz	r1, 7f8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    7f86:	8b81      	ldrh	r1, [r0, #28]
    7f88:	8902      	ldrh	r2, [r0, #8]
    7f8a:	4291      	cmp	r1, r2
    7f8c:	d800      	bhi.n	7f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    7f8e:	8901      	ldrh	r1, [r0, #8]
    7f90:	80a1      	strh	r1, [r4, #4]
    7f92:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    7f96:	1e49      	subs	r1, r1, #1
    7f98:	b28e      	uxth	r6, r1
    7f9a:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    7f9e:	4431      	add	r1, r6
    7fa0:	f820 195c 	strh.w	r1, [r0], #-92
    7fa4:	8801      	ldrh	r1, [r0, #0]
    7fa6:	4431      	add	r1, r6
    7fa8:	8001      	strh	r1, [r0, #0]
    7faa:	f001 fceb 	bl	9984 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1984>
    7fae:	b120      	cbz	r0, 7fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    7fb0:	68a0      	ldr	r0, [r4, #8]
    7fb2:	f850 1f90 	ldr.w	r1, [r0, #144]!
    7fb6:	4431      	add	r1, r6
    7fb8:	6001      	str	r1, [r0, #0]
    7fba:	68a0      	ldr	r0, [r4, #8]
    7fbc:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7fc0:	2901      	cmp	r1, #1
    7fc2:	d802      	bhi.n	7fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    7fc4:	1c49      	adds	r1, r1, #1
    7fc6:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    7fca:	b10e      	cbz	r6, 7fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    7fcc:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    7fd0:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7fd4:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    7fd8:	290b      	cmp	r1, #11
    7fda:	d001      	beq.n	7fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    7fdc:	290c      	cmp	r1, #12
    7fde:	d118      	bne.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    7fe0:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    7fe4:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    7fe8:	1ad2      	subs	r2, r2, r3
    7fea:	b212      	sxth	r2, r2
    7fec:	2a00      	cmp	r2, #0
    7fee:	db10      	blt.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    7ff0:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    7ff4:	f8c0 107e 	str.w	r1, [r0, #126]	; 0x7e
    7ff8:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    7ffc:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    8000:	2103      	movs	r1, #3
    8002:	f7fd fd99 	bl	5b38 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8006:	68a0      	ldr	r0, [r4, #8]
    8008:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    800c:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8010:	e024      	b.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
    8012:	2924      	cmp	r1, #36	; 0x24
    8014:	d10f      	bne.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    8016:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    801a:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    801e:	1a89      	subs	r1, r1, r2
    8020:	b209      	sxth	r1, r1
    8022:	2900      	cmp	r1, #0
    8024:	db07      	blt.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    8026:	f000 fe4f 	bl	8cc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc8>
    802a:	68a0      	ldr	r0, [r4, #8]
    802c:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8030:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    8034:	e012      	b.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
    8036:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    803a:	2924      	cmp	r1, #36	; 0x24
    803c:	d001      	beq.n	8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
    803e:	2925      	cmp	r1, #37	; 0x25
    8040:	d10c      	bne.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
    8042:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    8046:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    804a:	1a08      	subs	r0, r1, r0
    804c:	b200      	sxth	r0, r0
    804e:	2800      	cmp	r0, #0
    8050:	db04      	blt.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
    8052:	f000 fe39 	bl	8cc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc8>
    8056:	68a0      	ldr	r0, [r4, #8]
    8058:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    805c:	68a0      	ldr	r0, [r4, #8]
    805e:	4601      	mov	r1, r0
    8060:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    8064:	3068      	adds	r0, #104	; 0x68
    8066:	f005 f9db 	bl	d420 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    806a:	480d      	ldr	r0, [pc, #52]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    806c:	9000      	str	r0, [sp, #0]
    806e:	4b0d      	ldr	r3, [pc, #52]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    8070:	4a0d      	ldr	r2, [pc, #52]	; (80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    8072:	4641      	mov	r1, r8
    8074:	4648      	mov	r0, r9
    8076:	f7fc fda1 	bl	4bbc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    807a:	68a0      	ldr	r0, [r4, #8]
    807c:	2301      	movs	r3, #1
    807e:	2105      	movs	r1, #5
    8080:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8084:	3068      	adds	r0, #104	; 0x68
    8086:	f004 fff3 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    808a:	2800      	cmp	r0, #0
    808c:	d003      	beq.n	8096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    808e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8092:	f7fc bd8d 	b.w	4bb0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    809a:	0000      	.short	0x0000
    809c:	20000130 	.word	0x20000130
    80a0:	00008809 	.word	0x00008809
    80a4:	00008321 	.word	0x00008321
    80a8:	00008c15 	.word	0x00008c15
    80ac:	b570      	push	{r4, r5, r6, lr}
    80ae:	4c0f      	ldr	r4, [pc, #60]	; (80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>)
    80b0:	68a5      	ldr	r5, [r4, #8]
    80b2:	f895 1075 	ldrb.w	r1, [r5, #117]	; 0x75
    80b6:	2920      	cmp	r1, #32
    80b8:	d002      	beq.n	80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>
    80ba:	2926      	cmp	r1, #38	; 0x26
    80bc:	d003      	beq.n	80c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc6>
    80be:	e011      	b.n	80e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
    80c0:	f000 fe38 	bl	8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>
    80c4:	e008      	b.n	80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>
    80c6:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    80ca:	2301      	movs	r3, #1
    80cc:	210b      	movs	r1, #11
    80ce:	f105 0068 	add.w	r0, r5, #104	; 0x68
    80d2:	f004 ffcd 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    80d6:	b138      	cbz	r0, 80e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    80d8:	68a1      	ldr	r1, [r4, #8]
    80da:	2000      	movs	r0, #0
    80dc:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    80e0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    80e4:	2000      	movs	r0, #0
    80e6:	bd70      	pop	{r4, r5, r6, pc}
    80e8:	202a      	movs	r0, #42	; 0x2a
    80ea:	e7e9      	b.n	80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>
    80ec:	20000130 	.word	0x20000130
    80f0:	4804      	ldr	r0, [pc, #16]	; (8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>)
    80f2:	2100      	movs	r1, #0
    80f4:	6880      	ldr	r0, [r0, #8]
    80f6:	f820 1fa8 	strh.w	r1, [r0, #168]!
    80fa:	7881      	ldrb	r1, [r0, #2]
    80fc:	1c49      	adds	r1, r1, #1
    80fe:	7081      	strb	r1, [r0, #2]
    8100:	4770      	bx	lr
    8102:	0000      	.short	0x0000
    8104:	20000130 	.word	0x20000130
    8108:	4807      	ldr	r0, [pc, #28]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    810a:	b510      	push	{r4, lr}
    810c:	6881      	ldr	r1, [r0, #8]
    810e:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8112:	1e40      	subs	r0, r0, #1
    8114:	b240      	sxtb	r0, r0
    8116:	7008      	strb	r0, [r1, #0]
    8118:	2800      	cmp	r0, #0
    811a:	da04      	bge.n	8126 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x126>
    811c:	f240 118f 	movw	r1, #399	; 0x18f
    8120:	2031      	movs	r0, #49	; 0x31
    8122:	f7fb fdf7 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8126:	bd10      	pop	{r4, pc}
    8128:	20000130 	.word	0x20000130
    812c:	4917      	ldr	r1, [pc, #92]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    812e:	b510      	push	{r4, lr}
    8130:	6889      	ldr	r1, [r1, #8]
    8132:	f891 2076 	ldrb.w	r2, [r1, #118]	; 0x76
    8136:	b1b8      	cbz	r0, 8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    8138:	2a10      	cmp	r2, #16
    813a:	d006      	beq.n	814a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14a>
    813c:	2a14      	cmp	r2, #20
    813e:	d007      	beq.n	8150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>
    8140:	2a15      	cmp	r2, #21
    8142:	d008      	beq.n	8156 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x156>
    8144:	2a1b      	cmp	r2, #27
    8146:	d11c      	bne.n	8182 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182>
    8148:	e008      	b.n	815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    814a:	2101      	movs	r1, #1
    814c:	200b      	movs	r0, #11
    814e:	e007      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    8150:	f001 fa4a 	bl	95e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e8>
    8154:	e006      	b.n	8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>
    8156:	f000 fd29 	bl	8bac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbac>
    815a:	e003      	b.n	8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>
    815c:	2101      	movs	r1, #1
    815e:	2006      	movs	r0, #6
    8160:	f000 fd06 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8164:	2001      	movs	r0, #1
    8166:	bd10      	pop	{r4, pc}
    8168:	2a21      	cmp	r2, #33	; 0x21
    816a:	d10a      	bne.n	8182 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182>
    816c:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8170:	2802      	cmp	r0, #2
    8172:	d008      	beq.n	8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8174:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8178:	2801      	cmp	r0, #1
    817a:	d102      	bne.n	8182 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182>
    817c:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8180:	b108      	cbz	r0, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8182:	2000      	movs	r0, #0
    8184:	bd10      	pop	{r4, pc}
    8186:	2101      	movs	r1, #1
    8188:	2017      	movs	r0, #23
    818a:	e7e9      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    818c:	20000130 	.word	0x20000130
    8190:	b510      	push	{r4, lr}
    8192:	bbe8      	cbnz	r0, 8210 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x210>
    8194:	4c31      	ldr	r4, [pc, #196]	; (825c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>)
    8196:	68a0      	ldr	r0, [r4, #8]
    8198:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    819c:	07ca      	lsls	r2, r1, #31
    819e:	d002      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    81a0:	2101      	movs	r1, #1
    81a2:	2009      	movs	r0, #9
    81a4:	e052      	b.n	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    81a6:	078a      	lsls	r2, r1, #30
    81a8:	d50a      	bpl.n	81c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>
    81aa:	2101      	movs	r1, #1
    81ac:	200c      	movs	r0, #12
    81ae:	f000 fcdf 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    81b2:	68a0      	ldr	r0, [r4, #8]
    81b4:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    81b8:	f041 0101 	orr.w	r1, r1, #1
    81bc:	7001      	strb	r1, [r0, #0]
    81be:	e047      	b.n	8250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>
    81c0:	074a      	lsls	r2, r1, #29
    81c2:	d502      	bpl.n	81ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ca>
    81c4:	2101      	movs	r1, #1
    81c6:	2013      	movs	r0, #19
    81c8:	e040      	b.n	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    81ca:	070a      	lsls	r2, r1, #28
    81cc:	d505      	bpl.n	81da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    81ce:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    81d2:	7141      	strb	r1, [r0, #5]
    81d4:	2101      	movs	r1, #1
    81d6:	2007      	movs	r0, #7
    81d8:	e038      	b.n	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    81da:	f011 0f30 	tst.w	r1, #48	; 0x30
    81de:	d03b      	beq.n	8258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    81e0:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    81e4:	b9a1      	cbnz	r1, 8210 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x210>
    81e6:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    81ea:	b1e1      	cbz	r1, 8226 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x226>
    81ec:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    81f0:	2924      	cmp	r1, #36	; 0x24
    81f2:	d02f      	beq.n	8254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>
    81f4:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    81f8:	2924      	cmp	r1, #36	; 0x24
    81fa:	d02b      	beq.n	8254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>
    81fc:	f05f 0300 	movs.w	r3, #0
    8200:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8204:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8208:	f005 fb68 	bl	d8dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    820c:	68a1      	ldr	r1, [r4, #8]
    820e:	e000      	b.n	8212 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x212>
    8210:	e022      	b.n	8258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    8212:	f811 0f77 	ldrb.w	r0, [r1, #119]!
    8216:	f020 0020 	bic.w	r0, r0, #32
    821a:	f040 0010 	orr.w	r0, r0, #16
    821e:	7008      	strb	r0, [r1, #0]
    8220:	2000      	movs	r0, #0
    8222:	f881 0125 	strb.w	r0, [r1, #293]	; 0x125
    8226:	68a0      	ldr	r0, [r4, #8]
    8228:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    822c:	06c9      	lsls	r1, r1, #27
    822e:	d513      	bpl.n	8258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    8230:	f005 fb6f 	bl	d912 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8234:	f000 f906 	bl	8444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>
    8238:	68a1      	ldr	r1, [r4, #8]
    823a:	f101 0024 	add.w	r0, r1, #36	; 0x24
    823e:	8bc2      	ldrh	r2, [r0, #30]
    8240:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8244:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8246:	8048      	strh	r0, [r1, #2]
    8248:	2101      	movs	r1, #1
    824a:	2015      	movs	r0, #21
    824c:	f000 fc90 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8250:	2001      	movs	r0, #1
    8252:	bd10      	pop	{r4, pc}
    8254:	2301      	movs	r3, #1
    8256:	e7d3      	b.n	8200 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x200>
    8258:	2000      	movs	r0, #0
    825a:	bd10      	pop	{r4, pc}
    825c:	20000130 	.word	0x20000130
    8260:	b570      	push	{r4, r5, r6, lr}
    8262:	460d      	mov	r5, r1
    8264:	4606      	mov	r6, r0
    8266:	f005 f986 	bl	d576 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    826a:	4604      	mov	r4, r0
    826c:	4630      	mov	r0, r6
    826e:	f005 f98e 	bl	d58e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8272:	4629      	mov	r1, r5
    8274:	f000 f81e 	bl	82b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>
    8278:	b1b8      	cbz	r0, 82aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2aa>
    827a:	4620      	mov	r0, r4
    827c:	f004 ff91 	bl	d1a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8280:	0001      	movs	r1, r0
    8282:	d00d      	beq.n	82a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>
    8284:	480a      	ldr	r0, [pc, #40]	; (82b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>)
    8286:	6880      	ldr	r0, [r0, #8]
    8288:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    828c:	428a      	cmp	r2, r1
    828e:	d007      	beq.n	82a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>
    8290:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8294:	2901      	cmp	r1, #1
    8296:	d005      	beq.n	82a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>
    8298:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    829c:	4220      	tst	r0, r4
    829e:	d004      	beq.n	82aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2aa>
    82a0:	2001      	movs	r0, #1
    82a2:	bd70      	pop	{r4, r5, r6, pc}
    82a4:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    82a8:	e7f8      	b.n	829c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>
    82aa:	2000      	movs	r0, #0
    82ac:	bd70      	pop	{r4, r5, r6, pc}
    82ae:	0000      	.short	0x0000
    82b0:	20000130 	.word	0x20000130
    82b4:	b570      	push	{r4, r5, r6, lr}
    82b6:	460d      	mov	r5, r1
    82b8:	4604      	mov	r4, r0
    82ba:	f004 ff72 	bl	d1a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    82be:	b350      	cbz	r0, 8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    82c0:	4916      	ldr	r1, [pc, #88]	; (831c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x31c>)
    82c2:	6889      	ldr	r1, [r1, #8]
    82c4:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    82c8:	4282      	cmp	r2, r0
    82ca:	d024      	beq.n	8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    82cc:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    82d0:	2b01      	cmp	r3, #1
    82d2:	d005      	beq.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    82d4:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
    82d8:	4223      	tst	r3, r4
    82da:	d013      	beq.n	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    82dc:	b11d      	cbz	r5, 82e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e6>
    82de:	e01a      	b.n	8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    82e0:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    82e4:	e7f8      	b.n	82d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d8>
    82e6:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    82ea:	4221      	tst	r1, r4
    82ec:	d113      	bne.n	8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    82ee:	b15a      	cbz	r2, 8308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>
    82f0:	2a04      	cmp	r2, #4
    82f2:	d00e      	beq.n	8312 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x312>
    82f4:	2804      	cmp	r0, #4
    82f6:	d00c      	beq.n	8312 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x312>
    82f8:	2a08      	cmp	r2, #8
    82fa:	d00a      	beq.n	8312 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x312>
    82fc:	2808      	cmp	r0, #8
    82fe:	d008      	beq.n	8312 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x312>
    8300:	4282      	cmp	r2, r0
    8302:	d908      	bls.n	8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    8304:	2000      	movs	r0, #0
    8306:	bd70      	pop	{r4, r5, r6, pc}
    8308:	f240 1165 	movw	r1, #357	; 0x165
    830c:	2006      	movs	r0, #6
    830e:	f7fb fd01 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8312:	4282      	cmp	r2, r0
    8314:	d3f6      	bcc.n	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    8316:	2001      	movs	r0, #1
    8318:	bd70      	pop	{r4, r5, r6, pc}
    831a:	0000      	.short	0x0000
    831c:	20000130 	.word	0x20000130
    8320:	490c      	ldr	r1, [pc, #48]	; (8354 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x354>)
    8322:	4602      	mov	r2, r0
    8324:	7848      	ldrb	r0, [r1, #1]
    8326:	b998      	cbnz	r0, 8350 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x350>
    8328:	4608      	mov	r0, r1
    832a:	6880      	ldr	r0, [r0, #8]
    832c:	b142      	cbz	r2, 8340 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x340>
    832e:	7889      	ldrb	r1, [r1, #2]
    8330:	0709      	lsls	r1, r1, #28
    8332:	d503      	bpl.n	833c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>
    8334:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    8338:	2808      	cmp	r0, #8
    833a:	d009      	beq.n	8350 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x350>
    833c:	2001      	movs	r0, #1
    833e:	4770      	bx	lr
    8340:	f100 0124 	add.w	r1, r0, #36	; 0x24
    8344:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8346:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    8348:	428a      	cmp	r2, r1
    834a:	d801      	bhi.n	8350 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x350>
    834c:	f7fe bf06 	b.w	715c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8350:	2000      	movs	r0, #0
    8352:	4770      	bx	lr
    8354:	20000130 	.word	0x20000130
    8358:	b570      	push	{r4, r5, r6, lr}
    835a:	4c39      	ldr	r4, [pc, #228]	; (8440 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x440>)
    835c:	4605      	mov	r5, r0
    835e:	68a0      	ldr	r0, [r4, #8]
    8360:	3068      	adds	r0, #104	; 0x68
    8362:	f006 f94a 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8366:	2800      	cmp	r0, #0
    8368:	d169      	bne.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    836a:	2d00      	cmp	r5, #0
    836c:	d167      	bne.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    836e:	68a0      	ldr	r0, [r4, #8]
    8370:	2301      	movs	r3, #1
    8372:	4619      	mov	r1, r3
    8374:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8378:	3068      	adds	r0, #104	; 0x68
    837a:	f004 fe79 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    837e:	2800      	cmp	r0, #0
    8380:	d15d      	bne.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    8382:	68a0      	ldr	r0, [r4, #8]
    8384:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8388:	b149      	cbz	r1, 839e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39e>
    838a:	2100      	movs	r1, #0
    838c:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8390:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8394:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8398:	2100      	movs	r1, #0
    839a:	2002      	movs	r0, #2
    839c:	e045      	b.n	842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    839e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    83a2:	2301      	movs	r3, #1
    83a4:	2104      	movs	r1, #4
    83a6:	3068      	adds	r0, #104	; 0x68
    83a8:	f004 fe62 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83ac:	4605      	mov	r5, r0
    83ae:	f7ff feef 	bl	8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>
    83b2:	2800      	cmp	r0, #0
    83b4:	d143      	bne.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    83b6:	4628      	mov	r0, r5
    83b8:	f7ff feb8 	bl	812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
    83bc:	2800      	cmp	r0, #0
    83be:	d13e      	bne.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    83c0:	68a0      	ldr	r0, [r4, #8]
    83c2:	2301      	movs	r3, #1
    83c4:	2100      	movs	r1, #0
    83c6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    83ca:	3068      	adds	r0, #104	; 0x68
    83cc:	f004 fe50 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83d0:	b178      	cbz	r0, 83f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f2>
    83d2:	68a0      	ldr	r0, [r4, #8]
    83d4:	2301      	movs	r3, #1
    83d6:	2104      	movs	r1, #4
    83d8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    83dc:	3068      	adds	r0, #104	; 0x68
    83de:	f004 fe47 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83e2:	b930      	cbnz	r0, 83f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f2>
    83e4:	68a0      	ldr	r0, [r4, #8]
    83e6:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    83ea:	b110      	cbz	r0, 83f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f2>
    83ec:	2100      	movs	r1, #0
    83ee:	2012      	movs	r0, #18
    83f0:	e01b      	b.n	842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    83f2:	68a0      	ldr	r0, [r4, #8]
    83f4:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    83f8:	290a      	cmp	r1, #10
    83fa:	d01a      	beq.n	8432 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x432>
    83fc:	2d00      	cmp	r5, #0
    83fe:	d11e      	bne.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    8400:	f000 fb16 	bl	8a30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa30>
    8404:	2800      	cmp	r0, #0
    8406:	d11a      	bne.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    8408:	68a0      	ldr	r0, [r4, #8]
    840a:	2301      	movs	r3, #1
    840c:	2100      	movs	r1, #0
    840e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8412:	3068      	adds	r0, #104	; 0x68
    8414:	f004 fe2c 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8418:	2800      	cmp	r0, #0
    841a:	d010      	beq.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    841c:	68a0      	ldr	r0, [r4, #8]
    841e:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    8422:	2800      	cmp	r0, #0
    8424:	d00b      	beq.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    8426:	2100      	movs	r1, #0
    8428:	20ff      	movs	r0, #255	; 0xff
    842a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    842e:	f000 bb9f 	b.w	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8432:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    8436:	7101      	strb	r1, [r0, #4]
    8438:	2100      	movs	r1, #0
    843a:	2007      	movs	r0, #7
    843c:	e7f5      	b.n	842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    843e:	bd70      	pop	{r4, r5, r6, pc}
    8440:	20000130 	.word	0x20000130
    8444:	480a      	ldr	r0, [pc, #40]	; (8470 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x470>)
    8446:	b510      	push	{r4, lr}
    8448:	6881      	ldr	r1, [r0, #8]
    844a:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    844e:	2801      	cmp	r0, #1
    8450:	d009      	beq.n	8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8452:	8808      	ldrh	r0, [r1, #0]
    8454:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8458:	3124      	adds	r1, #36	; 0x24
    845a:	f005 fa1b 	bl	d894 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    845e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8462:	f001 bbb3 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8466:	2002      	movs	r0, #2
    8468:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    846c:	bd10      	pop	{r4, pc}
    846e:	0000      	.short	0x0000
    8470:	20000130 	.word	0x20000130
    8474:	b570      	push	{r4, r5, r6, lr}
    8476:	4c25      	ldr	r4, [pc, #148]	; (850c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>)
    8478:	0005      	movs	r5, r0
    847a:	d12f      	bne.n	84dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4dc>
    847c:	f000 f8a4 	bl	85c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c8>
    8480:	f000 f848 	bl	8514 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x514>
    8484:	0005      	movs	r5, r0
    8486:	d129      	bne.n	84dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4dc>
    8488:	8860      	ldrh	r0, [r4, #2]
    848a:	0741      	lsls	r1, r0, #29
    848c:	d506      	bpl.n	849c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49c>
    848e:	68a1      	ldr	r1, [r4, #8]
    8490:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    8494:	2907      	cmp	r1, #7
    8496:	d101      	bne.n	849c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49c>
    8498:	2101      	movs	r1, #1
    849a:	7021      	strb	r1, [r4, #0]
    849c:	0780      	lsls	r0, r0, #30
    849e:	d512      	bpl.n	84c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c6>
    84a0:	68e0      	ldr	r0, [r4, #12]
    84a2:	78c0      	ldrb	r0, [r0, #3]
    84a4:	2819      	cmp	r0, #25
    84a6:	d205      	bcs.n	84b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b4>
    84a8:	4919      	ldr	r1, [pc, #100]	; (8510 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x510>)
    84aa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    84ae:	b109      	cbz	r1, 84b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b4>
    84b0:	4788      	blx	r1
    84b2:	e008      	b.n	84c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c6>
    84b4:	28ff      	cmp	r0, #255	; 0xff
    84b6:	d004      	beq.n	84c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c2>
    84b8:	f240 713c 	movw	r1, #1852	; 0x73c
    84bc:	2031      	movs	r0, #49	; 0x31
    84be:	f7fb fc29 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84c2:	f001 f8c3 	bl	964c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164c>
    84c6:	78a0      	ldrb	r0, [r4, #2]
    84c8:	06c0      	lsls	r0, r0, #27
    84ca:	d507      	bpl.n	84dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4dc>
    84cc:	68a0      	ldr	r0, [r4, #8]
    84ce:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    84d2:	290b      	cmp	r1, #11
    84d4:	d102      	bne.n	84dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4dc>
    84d6:	210c      	movs	r1, #12
    84d8:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    84dc:	7860      	ldrb	r0, [r4, #1]
    84de:	0700      	lsls	r0, r0, #28
    84e0:	d511      	bpl.n	8506 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x506>
    84e2:	68a0      	ldr	r0, [r4, #8]
    84e4:	2301      	movs	r3, #1
    84e6:	2105      	movs	r1, #5
    84e8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    84ec:	3068      	adds	r0, #104	; 0x68
    84ee:	f004 fdbf 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84f2:	b128      	cbz	r0, 8500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>
    84f4:	68a1      	ldr	r1, [r4, #8]
    84f6:	2508      	movs	r5, #8
    84f8:	2000      	movs	r0, #0
    84fa:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    84fe:	e002      	b.n	8506 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x506>
    8500:	2000      	movs	r0, #0
    8502:	f7fc fc15 	bl	4d30 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8506:	4628      	mov	r0, r5
    8508:	bd70      	pop	{r4, r5, r6, pc}
    850a:	0000      	.short	0x0000
    850c:	20000130 	.word	0x20000130
    8510:	200001a8 	.word	0x200001a8
    8514:	b570      	push	{r4, r5, r6, lr}
    8516:	4c2a      	ldr	r4, [pc, #168]	; (85c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c0>)
    8518:	2000      	movs	r0, #0
    851a:	78a1      	ldrb	r1, [r4, #2]
    851c:	07c9      	lsls	r1, r1, #31
    851e:	d015      	beq.n	854c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54c>
    8520:	6920      	ldr	r0, [r4, #16]
    8522:	2301      	movs	r3, #1
    8524:	2105      	movs	r1, #5
    8526:	78c5      	ldrb	r5, [r0, #3]
    8528:	68a0      	ldr	r0, [r4, #8]
    852a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    852e:	3068      	adds	r0, #104	; 0x68
    8530:	f004 fd9e 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8534:	b158      	cbz	r0, 854e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54e>
    8536:	1ead      	subs	r5, r5, #2
    8538:	2d0a      	cmp	r5, #10
    853a:	d206      	bcs.n	854a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54a>
    853c:	e8df f005 	tbb	[pc, r5]
    8540:	05050707 	.word	0x05050707
    8544:	05050707 	.word	0x05050707
    8548:	0707      	.short	0x0707
    854a:	2008      	movs	r0, #8
    854c:	bd70      	pop	{r4, r5, r6, pc}
    854e:	6920      	ldr	r0, [r4, #16]
    8550:	f7fd fbc8 	bl	5ce4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8554:	b138      	cbz	r0, 8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    8556:	6920      	ldr	r0, [r4, #16]
    8558:	78c5      	ldrb	r5, [r0, #3]
    855a:	b145      	cbz	r5, 856e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56e>
    855c:	2d01      	cmp	r5, #1
    855e:	d006      	beq.n	856e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56e>
    8560:	2d16      	cmp	r5, #22
    8562:	d118      	bne.n	8596 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x596>
    8564:	e003      	b.n	856e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56e>
    8566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    856a:	f000 bd0b 	b.w	8f84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf84>
    856e:	68a0      	ldr	r0, [r4, #8]
    8570:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    8574:	f004 fdca 	bl	d10c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8578:	b168      	cbz	r0, 8596 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x596>
    857a:	68a1      	ldr	r1, [r4, #8]
    857c:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    8580:	281f      	cmp	r0, #31
    8582:	d008      	beq.n	8596 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x596>
    8584:	2820      	cmp	r0, #32
    8586:	d003      	beq.n	8590 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x590>
    8588:	2d16      	cmp	r5, #22
    858a:	d00c      	beq.n	85a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a6>
    858c:	2002      	movs	r0, #2
    858e:	bd70      	pop	{r4, r5, r6, pc}
    8590:	2026      	movs	r0, #38	; 0x26
    8592:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    8596:	2d19      	cmp	r5, #25
    8598:	d207      	bcs.n	85aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5aa>
    859a:	480a      	ldr	r0, [pc, #40]	; (85c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c4>)
    859c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    85a0:	b118      	cbz	r0, 85aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5aa>
    85a2:	4780      	blx	r0
    85a4:	e003      	b.n	85ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ae>
    85a6:	2020      	movs	r0, #32
    85a8:	bd70      	pop	{r4, r5, r6, pc}
    85aa:	f000 fceb 	bl	8f84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf84>
    85ae:	68a2      	ldr	r2, [r4, #8]
    85b0:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    85b4:	1c49      	adds	r1, r1, #1
    85b6:	f143 0300 	adc.w	r3, r3, #0
    85ba:	e9c2 1300 	strd	r1, r3, [r2]
    85be:	bd70      	pop	{r4, r5, r6, pc}
    85c0:	20000130 	.word	0x20000130
    85c4:	20000144 	.word	0x20000144
    85c8:	b570      	push	{r4, r5, r6, lr}
    85ca:	4c22      	ldr	r4, [pc, #136]	; (8654 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x654>)
    85cc:	78a0      	ldrb	r0, [r4, #2]
    85ce:	0700      	lsls	r0, r0, #28
    85d0:	d53e      	bpl.n	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    85d2:	68a0      	ldr	r0, [r4, #8]
    85d4:	3068      	adds	r0, #104	; 0x68
    85d6:	f006 f810 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    85da:	b148      	cbz	r0, 85f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f0>
    85dc:	68a0      	ldr	r0, [r4, #8]
    85de:	21fe      	movs	r1, #254	; 0xfe
    85e0:	2500      	movs	r5, #0
    85e2:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    85e6:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    85ea:	2919      	cmp	r1, #25
    85ec:	d10c      	bne.n	8608 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x608>
    85ee:	e004      	b.n	85fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fa>
    85f0:	f240 7146 	movw	r1, #1862	; 0x746
    85f4:	2031      	movs	r0, #49	; 0x31
    85f6:	f7fb fb8d 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85fa:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    85fe:	f7ff fd83 	bl	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    8602:	68a0      	ldr	r0, [r4, #8]
    8604:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8608:	68a0      	ldr	r0, [r4, #8]
    860a:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    860e:	291f      	cmp	r1, #31
    8610:	d002      	beq.n	8618 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x618>
    8612:	2927      	cmp	r1, #39	; 0x27
    8614:	d113      	bne.n	863e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63e>
    8616:	e00b      	b.n	8630 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x630>
    8618:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    861c:	f004 fd76 	bl	d10c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8620:	b108      	cbz	r0, 8626 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x626>
    8622:	2026      	movs	r0, #38	; 0x26
    8624:	e000      	b.n	8628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>
    8626:	2020      	movs	r0, #32
    8628:	68a1      	ldr	r1, [r4, #8]
    862a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    862e:	e006      	b.n	863e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63e>
    8630:	2101      	movs	r1, #1
    8632:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    8636:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    863a:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    863e:	68a0      	ldr	r0, [r4, #8]
    8640:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    8644:	2908      	cmp	r1, #8
    8646:	d103      	bne.n	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    8648:	2102      	movs	r1, #2
    864a:	7021      	strb	r1, [r4, #0]
    864c:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    8650:	bd70      	pop	{r4, r5, r6, pc}
    8652:	0000      	.short	0x0000
    8654:	20000130 	.word	0x20000130
    8658:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    865a:	4605      	mov	r5, r0
    865c:	4668      	mov	r0, sp
    865e:	f7fc f9e1 	bl	4a24 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8662:	b318      	cbz	r0, 86ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ac>
    8664:	2222      	movs	r2, #34	; 0x22
    8666:	2100      	movs	r1, #0
    8668:	9800      	ldr	r0, [sp, #0]
    866a:	f003 fc03 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    866e:	2103      	movs	r1, #3
    8670:	9800      	ldr	r0, [sp, #0]
    8672:	f004 ffe0 	bl	d636 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    8676:	9800      	ldr	r0, [sp, #0]
    8678:	7801      	ldrb	r1, [r0, #0]
    867a:	f021 0110 	bic.w	r1, r1, #16
    867e:	7001      	strb	r1, [r0, #0]
    8680:	4629      	mov	r1, r5
    8682:	f7fd fb5b 	bl	5d3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8686:	2100      	movs	r1, #0
    8688:	4c5e      	ldr	r4, [pc, #376]	; (8804 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x804>)
    868a:	f644 162f 	movw	r6, #18735	; 0x492f
    868e:	2d0e      	cmp	r5, #14
    8690:	d07e      	beq.n	8790 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x790>
    8692:	dc0e      	bgt.n	86b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b2>
    8694:	f1a5 0502 	sub.w	r5, r5, #2
    8698:	2d0c      	cmp	r5, #12
    869a:	d21c      	bcs.n	86d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d6>
    869c:	e8df f005 	tbb	[pc, r5]
    86a0:	a7451b1e 	.word	0xa7451b1e
    86a4:	511b1ea7 	.word	0x511b1ea7
    86a8:	3723a71b 	.word	0x3723a71b
    86ac:	f640 116b 	movw	r1, #2411	; 0x96b
    86b0:	e0a3      	b.n	87fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7fa>
    86b2:	2d15      	cmp	r5, #21
    86b4:	d058      	beq.n	8768 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x768>
    86b6:	dc08      	bgt.n	86ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ca>
    86b8:	2d11      	cmp	r5, #17
    86ba:	d01f      	beq.n	86fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6fc>
    86bc:	2d12      	cmp	r5, #18
    86be:	d01c      	beq.n	86fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6fa>
    86c0:	2d13      	cmp	r5, #19
    86c2:	d01a      	beq.n	86fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6fa>
    86c4:	2d14      	cmp	r5, #20
    86c6:	d106      	bne.n	86d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d6>
    86c8:	e04e      	b.n	8768 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x768>
    86ca:	2d16      	cmp	r5, #22
    86cc:	d023      	beq.n	8716 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x716>
    86ce:	2d17      	cmp	r5, #23
    86d0:	d065      	beq.n	879e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x79e>
    86d2:	2dff      	cmp	r5, #255	; 0xff
    86d4:	d07e      	beq.n	87d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d4>
    86d6:	f640 11dd 	movw	r1, #2525	; 0x9dd
    86da:	e08e      	b.n	87fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7fa>
    86dc:	68a1      	ldr	r1, [r4, #8]
    86de:	9800      	ldr	r0, [sp, #0]
    86e0:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    86e4:	e015      	b.n	8712 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x712>
    86e6:	9800      	ldr	r0, [sp, #0]
    86e8:	220b      	movs	r2, #11
    86ea:	7102      	strb	r2, [r0, #4]
    86ec:	2259      	movs	r2, #89	; 0x59
    86ee:	7142      	strb	r2, [r0, #5]
    86f0:	7181      	strb	r1, [r0, #6]
    86f2:	215b      	movs	r1, #91	; 0x5b
    86f4:	71c1      	strb	r1, [r0, #7]
    86f6:	2112      	movs	r1, #18
    86f8:	7201      	strb	r1, [r0, #8]
    86fa:	e078      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    86fc:	2103      	movs	r1, #3
    86fe:	9800      	ldr	r0, [sp, #0]
    8700:	f004 ff75 	bl	d5ee <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8704:	2106      	movs	r1, #6
    8706:	9800      	ldr	r0, [sp, #0]
    8708:	f004 ff73 	bl	d5f2 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    870c:	e06f      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    870e:	9800      	ldr	r0, [sp, #0]
    8710:	2106      	movs	r1, #6
    8712:	7101      	strb	r1, [r0, #4]
    8714:	e06b      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    8716:	9800      	ldr	r0, [sp, #0]
    8718:	f8d4 1008 	ldr.w	r1, [r4, #8]
    871c:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    8720:	7102      	strb	r2, [r0, #4]
    8722:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    8726:	7141      	strb	r1, [r0, #5]
    8728:	e061      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    872a:	68a1      	ldr	r1, [r4, #8]
    872c:	9800      	ldr	r0, [sp, #0]
    872e:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8732:	f004 ff71 	bl	d618 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    8736:	68a1      	ldr	r1, [r4, #8]
    8738:	9800      	ldr	r0, [sp, #0]
    873a:	31dc      	adds	r1, #220	; 0xdc
    873c:	f004 ff69 	bl	d612 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8740:	e055      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    8742:	9101      	str	r1, [sp, #4]
    8744:	9102      	str	r1, [sp, #8]
    8746:	f001 fe09 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    874a:	68a1      	ldr	r1, [r4, #8]
    874c:	4030      	ands	r0, r6
    874e:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8752:	4001      	ands	r1, r0
    8754:	f88d 1004 	strb.w	r1, [sp, #4]
    8758:	0a00      	lsrs	r0, r0, #8
    875a:	f88d 0005 	strb.w	r0, [sp, #5]
    875e:	a901      	add	r1, sp, #4
    8760:	9800      	ldr	r0, [sp, #0]
    8762:	f004 ff63 	bl	d62c <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    8766:	e042      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    8768:	68a0      	ldr	r0, [r4, #8]
    876a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    876e:	9800      	ldr	r0, [sp, #0]
    8770:	f004 ff69 	bl	d646 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8774:	68a0      	ldr	r0, [r4, #8]
    8776:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    877a:	9800      	ldr	r0, [sp, #0]
    877c:	f004 ff67 	bl	d64e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8780:	68a0      	ldr	r0, [r4, #8]
    8782:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
    8786:	9800      	ldr	r0, [sp, #0]
    8788:	f004 ff65 	bl	d656 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    878c:	68a0      	ldr	r0, [r4, #8]
    878e:	e000      	b.n	8792 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x792>
    8790:	e010      	b.n	87b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b4>
    8792:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    8796:	9800      	ldr	r0, [sp, #0]
    8798:	f004 ff61 	bl	d65e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    879c:	e027      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    879e:	68a1      	ldr	r1, [r4, #8]
    87a0:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    87a4:	2801      	cmp	r0, #1
    87a6:	9800      	ldr	r0, [sp, #0]
    87a8:	d0b8      	beq.n	871c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x71c>
    87aa:	f811 2f5e 	ldrb.w	r2, [r1, #94]!
    87ae:	7102      	strb	r2, [r0, #4]
    87b0:	7849      	ldrb	r1, [r1, #1]
    87b2:	e7b8      	b.n	8726 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x726>
    87b4:	9101      	str	r1, [sp, #4]
    87b6:	9102      	str	r1, [sp, #8]
    87b8:	f001 fdd0 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    87bc:	68a1      	ldr	r1, [r4, #8]
    87be:	4030      	ands	r0, r6
    87c0:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    87c4:	4001      	ands	r1, r0
    87c6:	f88d 1004 	strb.w	r1, [sp, #4]
    87ca:	0a00      	lsrs	r0, r0, #8
    87cc:	f88d 0005 	strb.w	r0, [sp, #5]
    87d0:	a901      	add	r1, sp, #4
    87d2:	e000      	b.n	87d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d6>
    87d4:	e003      	b.n	87de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7de>
    87d6:	9800      	ldr	r0, [sp, #0]
    87d8:	f004 ff23 	bl	d622 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    87dc:	e007      	b.n	87ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ee>
    87de:	68a0      	ldr	r0, [r4, #8]
    87e0:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    87e4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    87e8:	9800      	ldr	r0, [sp, #0]
    87ea:	f004 ff04 	bl	d5f6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    87ee:	f7fc f8f3 	bl	49d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    87f2:	2800      	cmp	r0, #0
    87f4:	d104      	bne.n	8800 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x800>
    87f6:	f640 11e1 	movw	r1, #2529	; 0x9e1
    87fa:	2031      	movs	r0, #49	; 0x31
    87fc:	f7fb fa8a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8800:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8802:	0000      	.short	0x0000
    8804:	20000130 	.word	0x20000130
    8808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    880c:	4c87      	ldr	r4, [pc, #540]	; (8a2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2c>)
    880e:	4682      	mov	sl, r0
    8810:	4689      	mov	r9, r1
    8812:	68a0      	ldr	r0, [r4, #8]
    8814:	8800      	ldrh	r0, [r0, #0]
    8816:	f7fb fec7 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    881a:	0006      	movs	r6, r0
    881c:	d00a      	beq.n	8834 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x834>
    881e:	8860      	ldrh	r0, [r4, #2]
    8820:	f04f 0500 	mov.w	r5, #0
    8824:	05c0      	lsls	r0, r0, #23
    8826:	68a0      	ldr	r0, [r4, #8]
    8828:	d509      	bpl.n	883e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83e>
    882a:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    882e:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8832:	e008      	b.n	8846 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x846>
    8834:	f640 5181 	movw	r1, #3457	; 0xd81
    8838:	2031      	movs	r0, #49	; 0x31
    883a:	f7fb fa6b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    883e:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    8842:	1c49      	adds	r1, r1, #1
    8844:	8001      	strh	r1, [r0, #0]
    8846:	f001 f89d 	bl	9984 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1984>
    884a:	f04f 0801 	mov.w	r8, #1
    884e:	b320      	cbz	r0, 889a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89a>
    8850:	8860      	ldrh	r0, [r4, #2]
    8852:	0500      	lsls	r0, r0, #20
    8854:	d506      	bpl.n	8864 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x864>
    8856:	68a0      	ldr	r0, [r4, #8]
    8858:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    885c:	b111      	cbz	r1, 8864 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x864>
    885e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8862:	e01a      	b.n	889a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89a>
    8864:	68a0      	ldr	r0, [r4, #8]
    8866:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    886a:	1c49      	adds	r1, r1, #1
    886c:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    8870:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    8874:	428b      	cmp	r3, r1
    8876:	d301      	bcc.n	887c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x87c>
    8878:	1a5a      	subs	r2, r3, r1
    887a:	e000      	b.n	887e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x87e>
    887c:	2200      	movs	r2, #0
    887e:	88a7      	ldrh	r7, [r4, #4]
    8880:	1d7f      	adds	r7, r7, #5
    8882:	42ba      	cmp	r2, r7
    8884:	d801      	bhi.n	888a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88a>
    8886:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    888a:	4299      	cmp	r1, r3
    888c:	d305      	bcc.n	889a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89a>
    888e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8892:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    8896:	f001 f999 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    889a:	8860      	ldrh	r0, [r4, #2]
    889c:	f04f 0702 	mov.w	r7, #2
    88a0:	f410 7f40 	tst.w	r0, #768	; 0x300
    88a4:	d00e      	beq.n	88c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c4>
    88a6:	68a0      	ldr	r0, [r4, #8]
    88a8:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    88ac:	b111      	cbz	r1, 88b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b4>
    88ae:	2903      	cmp	r1, #3
    88b0:	d108      	bne.n	88c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c4>
    88b2:	e002      	b.n	88ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ba>
    88b4:	f880 8079 	strb.w	r8, [r0, #121]	; 0x79
    88b8:	e001      	b.n	88be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8be>
    88ba:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    88be:	2101      	movs	r1, #1
    88c0:	f7fe fc72 	bl	71a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    88c4:	68a0      	ldr	r0, [r4, #8]
    88c6:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    88ca:	2901      	cmp	r1, #1
    88cc:	d104      	bne.n	88d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8d8>
    88ce:	8861      	ldrh	r1, [r4, #2]
    88d0:	0549      	lsls	r1, r1, #21
    88d2:	d501      	bpl.n	88d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8d8>
    88d4:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    88d8:	f1ba 0f00 	cmp.w	sl, #0
    88dc:	d175      	bne.n	89ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ca>
    88de:	78a1      	ldrb	r1, [r4, #2]
    88e0:	0649      	lsls	r1, r1, #25
    88e2:	d502      	bpl.n	88ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ea>
    88e4:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    88e8:	e004      	b.n	88f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f4>
    88ea:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    88ee:	1c49      	adds	r1, r1, #1
    88f0:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    88f4:	4648      	mov	r0, r9
    88f6:	f7ff fdbd 	bl	8474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x474>
    88fa:	ea40 0009 	orr.w	r0, r0, r9
    88fe:	4681      	mov	r9, r0
    8900:	f7ff fd2a 	bl	8358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>
    8904:	68a7      	ldr	r7, [r4, #8]
    8906:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    890a:	1c40      	adds	r0, r0, #1
    890c:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8910:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    8914:	b128      	cbz	r0, 8922 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x922>
    8916:	f7fc fa79 	bl	4e0c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    891a:	b1a8      	cbz	r0, 8948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x948>
    891c:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8920:	e012      	b.n	8948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x948>
    8922:	f7fc f901 	bl	4b28 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8926:	b108      	cbz	r0, 892c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92c>
    8928:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    892c:	f7fc f8f6 	bl	4b1c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8930:	b150      	cbz	r0, 8948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x948>
    8932:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8936:	1c40      	adds	r0, r0, #1
    8938:	b2c0      	uxtb	r0, r0
    893a:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    893e:	2802      	cmp	r0, #2
    8940:	d902      	bls.n	8948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x948>
    8942:	f827 5ff8 	strh.w	r5, [r7, #248]!
    8946:	733d      	strb	r5, [r7, #12]
    8948:	68a0      	ldr	r0, [r4, #8]
    894a:	2301      	movs	r3, #1
    894c:	2100      	movs	r1, #0
    894e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8952:	3068      	adds	r0, #104	; 0x68
    8954:	f004 fb8c 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8958:	b920      	cbnz	r0, 8964 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x964>
    895a:	68a0      	ldr	r0, [r4, #8]
    895c:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    8960:	280c      	cmp	r0, #12
    8962:	d15f      	bne.n	8a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa24>
    8964:	68a0      	ldr	r0, [r4, #8]
    8966:	2301      	movs	r3, #1
    8968:	2100      	movs	r1, #0
    896a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    896e:	3068      	adds	r0, #104	; 0x68
    8970:	f004 fb7e 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8974:	b350      	cbz	r0, 89cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9cc>
    8976:	68a0      	ldr	r0, [r4, #8]
    8978:	2301      	movs	r3, #1
    897a:	2100      	movs	r1, #0
    897c:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8980:	3068      	adds	r0, #104	; 0x68
    8982:	f004 fb75 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8986:	b308      	cbz	r0, 89cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9cc>
    8988:	68a0      	ldr	r0, [r4, #8]
    898a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    898e:	2902      	cmp	r1, #2
    8990:	d148      	bne.n	8a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa24>
    8992:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    8996:	b9c8      	cbnz	r0, 89cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9cc>
    8998:	4630      	mov	r0, r6
    899a:	f003 ff4c 	bl	c836 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    899e:	b1a8      	cbz	r0, 89cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9cc>
    89a0:	68a0      	ldr	r0, [r4, #8]
    89a2:	3068      	adds	r0, #104	; 0x68
    89a4:	f005 fe29 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    89a8:	b980      	cbnz	r0, 89cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9cc>
    89aa:	68a1      	ldr	r1, [r4, #8]
    89ac:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
    89b0:	2801      	cmp	r0, #1
    89b2:	d937      	bls.n	8a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa24>
    89b4:	f881 80fa 	strb.w	r8, [r1, #250]	; 0xfa
    89b8:	f8b1 209e 	ldrh.w	r2, [r1, #158]	; 0x9e
    89bc:	f8b1 009c 	ldrh.w	r0, [r1, #156]	; 0x9c
    89c0:	1e93      	subs	r3, r2, #2
    89c2:	4298      	cmp	r0, r3
    89c4:	db03      	blt.n	89ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ce>
    89c6:	2001      	movs	r0, #1
    89c8:	e004      	b.n	89d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9d4>
    89ca:	e01d      	b.n	8a08 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa08>
    89cc:	e02a      	b.n	8a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa24>
    89ce:	1a10      	subs	r0, r2, r0
    89d0:	1e40      	subs	r0, r0, #1
    89d2:	b280      	uxth	r0, r0
    89d4:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
    89d8:	88a3      	ldrh	r3, [r4, #4]
    89da:	429a      	cmp	r2, r3
    89dc:	d301      	bcc.n	89e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e2>
    89de:	2201      	movs	r2, #1
    89e0:	e002      	b.n	89e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e8>
    89e2:	1a9a      	subs	r2, r3, r2
    89e4:	1c52      	adds	r2, r2, #1
    89e6:	b292      	uxth	r2, r2
    89e8:	4290      	cmp	r0, r2
    89ea:	d900      	bls.n	89ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ee>
    89ec:	4610      	mov	r0, r2
    89ee:	2801      	cmp	r0, #1
    89f0:	d102      	bne.n	89f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f8>
    89f2:	bf00      	nop
    89f4:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    89f8:	68a1      	ldr	r1, [r4, #8]
    89fa:	f8b1 206c 	ldrh.w	r2, [r1, #108]	; 0x6c
    89fe:	4410      	add	r0, r2
    8a00:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    8a04:	f001 f87e 	bl	9b04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b04>
    8a08:	78a0      	ldrb	r0, [r4, #2]
    8a0a:	464a      	mov	r2, r9
    8a0c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8a10:	4650      	mov	r0, sl
    8a12:	f000 ffcb 	bl	99ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19ac>
    8a16:	68a0      	ldr	r0, [r4, #8]
    8a18:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    8a1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a20:	f7fb bfc4 	b.w	49ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8a24:	2001      	movs	r0, #1
    8a26:	68a1      	ldr	r1, [r4, #8]
    8a28:	e7e4      	b.n	89f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f4>
    8a2a:	0000      	.short	0x0000
    8a2c:	20000130 	.word	0x20000130
    8a30:	b570      	push	{r4, r5, r6, lr}
    8a32:	4c4e      	ldr	r4, [pc, #312]	; (8b6c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6c>)
    8a34:	2301      	movs	r3, #1
    8a36:	2100      	movs	r1, #0
    8a38:	68a0      	ldr	r0, [r4, #8]
    8a3a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8a3e:	3068      	adds	r0, #104	; 0x68
    8a40:	f004 fb16 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a44:	2800      	cmp	r0, #0
    8a46:	d076      	beq.n	8b36 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb36>
    8a48:	68a0      	ldr	r0, [r4, #8]
    8a4a:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    8a4e:	2500      	movs	r5, #0
    8a50:	b139      	cbz	r1, 8a62 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa62>
    8a52:	2100      	movs	r1, #0
    8a54:	200e      	movs	r0, #14
    8a56:	f000 f88b 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8a5a:	68a0      	ldr	r0, [r4, #8]
    8a5c:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    8a60:	e082      	b.n	8b68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb68>
    8a62:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    8a66:	b119      	cbz	r1, 8a70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa70>
    8a68:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8a6c:	0789      	lsls	r1, r1, #30
    8a6e:	d00a      	beq.n	8a86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa86>
    8a70:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8a74:	b111      	cbz	r1, 8a7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa7c>
    8a76:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8a7a:	b189      	cbz	r1, 8aa0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa0>
    8a7c:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8a80:	2901      	cmp	r1, #1
    8a82:	d02f      	beq.n	8ae4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae4>
    8a84:	e06a      	b.n	8b5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb5c>
    8a86:	2100      	movs	r1, #0
    8a88:	200c      	movs	r0, #12
    8a8a:	f000 f871 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8a8e:	68a0      	ldr	r0, [r4, #8]
    8a90:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8a94:	f041 0101 	orr.w	r1, r1, #1
    8a98:	7001      	strb	r1, [r0, #0]
    8a9a:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8a9e:	e063      	b.n	8b68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb68>
    8aa0:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8aa4:	2924      	cmp	r1, #36	; 0x24
    8aa6:	d01b      	beq.n	8ae0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae0>
    8aa8:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8aac:	2924      	cmp	r1, #36	; 0x24
    8aae:	d017      	beq.n	8ae0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae0>
    8ab0:	f05f 0300 	movs.w	r3, #0
    8ab4:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8ab8:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8abc:	f004 ff0e 	bl	d8dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8ac0:	68a0      	ldr	r0, [r4, #8]
    8ac2:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    8ac6:	2100      	movs	r1, #0
    8ac8:	2014      	movs	r0, #20
    8aca:	f000 f851 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8ace:	68a1      	ldr	r1, [r4, #8]
    8ad0:	f101 0024 	add.w	r0, r1, #36	; 0x24
    8ad4:	8bc2      	ldrh	r2, [r0, #30]
    8ad6:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8ada:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8adc:	8048      	strh	r0, [r1, #2]
    8ade:	e043      	b.n	8b68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb68>
    8ae0:	2301      	movs	r3, #1
    8ae2:	e7e7      	b.n	8ab4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xab4>
    8ae4:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    8ae8:	bb21      	cbnz	r1, 8b34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb34>
    8aea:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8aee:	2301      	movs	r3, #1
    8af0:	210b      	movs	r1, #11
    8af2:	3068      	adds	r0, #104	; 0x68
    8af4:	f004 fabc 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8af8:	b9e0      	cbnz	r0, 8b34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb34>
    8afa:	68a0      	ldr	r0, [r4, #8]
    8afc:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
    8b00:	f005 fd83 	bl	e60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8b04:	4605      	mov	r5, r0
    8b06:	68a0      	ldr	r0, [r4, #8]
    8b08:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    8b0c:	f005 fd7d 	bl	e60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8b10:	4606      	mov	r6, r0
    8b12:	68a0      	ldr	r0, [r4, #8]
    8b14:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    8b18:	4628      	mov	r0, r5
    8b1a:	f005 fd81 	bl	e620 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8b1e:	b158      	cbz	r0, 8b38 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb38>
    8b20:	68a0      	ldr	r0, [r4, #8]
    8b22:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    8b26:	4630      	mov	r0, r6
    8b28:	f005 fd7a 	bl	e620 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8b2c:	b120      	cbz	r0, 8b38 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb38>
    8b2e:	2000      	movs	r0, #0
    8b30:	f000 f900 	bl	8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>
    8b34:	e012      	b.n	8b5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb5c>
    8b36:	e012      	b.n	8b5e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb5e>
    8b38:	68a0      	ldr	r0, [r4, #8]
    8b3a:	2301      	movs	r3, #1
    8b3c:	2103      	movs	r1, #3
    8b3e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8b42:	3068      	adds	r0, #104	; 0x68
    8b44:	f004 fa94 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b48:	b940      	cbnz	r0, 8b5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb5c>
    8b4a:	68a0      	ldr	r0, [r4, #8]
    8b4c:	2301      	movs	r3, #1
    8b4e:	2102      	movs	r1, #2
    8b50:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8b54:	3068      	adds	r0, #104	; 0x68
    8b56:	f004 fa8b 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b5a:	b108      	cbz	r0, 8b60 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb60>
    8b5c:	2000      	movs	r0, #0
    8b5e:	bd70      	pop	{r4, r5, r6, pc}
    8b60:	2100      	movs	r1, #0
    8b62:	2016      	movs	r0, #22
    8b64:	f000 f804 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8b68:	2001      	movs	r0, #1
    8b6a:	bd70      	pop	{r4, r5, r6, pc}
    8b6c:	20000130 	.word	0x20000130
    8b70:	b570      	push	{r4, r5, r6, lr}
    8b72:	4c0d      	ldr	r4, [pc, #52]	; (8ba8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba8>)
    8b74:	4606      	mov	r6, r0
    8b76:	460d      	mov	r5, r1
    8b78:	68a0      	ldr	r0, [r4, #8]
    8b7a:	3068      	adds	r0, #104	; 0x68
    8b7c:	f005 fd3d 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b80:	b120      	cbz	r0, 8b8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8c>
    8b82:	f640 11f4 	movw	r1, #2548	; 0x9f4
    8b86:	2031      	movs	r0, #49	; 0x31
    8b88:	f7fb f8c4 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b8c:	68a2      	ldr	r2, [r4, #8]
    8b8e:	2000      	movs	r0, #0
    8b90:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    8b94:	b115      	cbz	r5, 8b9c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb9c>
    8b96:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    8b9a:	bd70      	pop	{r4, r5, r6, pc}
    8b9c:	f822 0fa2 	strh.w	r0, [r2, #162]!
    8ba0:	2001      	movs	r0, #1
    8ba2:	7110      	strb	r0, [r2, #4]
    8ba4:	bd70      	pop	{r4, r5, r6, pc}
    8ba6:	0000      	.short	0x0000
    8ba8:	20000130 	.word	0x20000130
    8bac:	b570      	push	{r4, r5, r6, lr}
    8bae:	4c18      	ldr	r4, [pc, #96]	; (8c10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc10>)
    8bb0:	2500      	movs	r5, #0
    8bb2:	68a0      	ldr	r0, [r4, #8]
    8bb4:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8bb8:	2901      	cmp	r1, #1
    8bba:	d00a      	beq.n	8bd2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbd2>
    8bbc:	2902      	cmp	r1, #2
    8bbe:	d125      	bne.n	8c0c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0c>
    8bc0:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    8bc4:	b1a9      	cbz	r1, 8bf2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbf2>
    8bc6:	2106      	movs	r1, #6
    8bc8:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8bcc:	2101      	movs	r1, #1
    8bce:	2002      	movs	r0, #2
    8bd0:	e017      	b.n	8c02 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc02>
    8bd2:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    8bd6:	2900      	cmp	r1, #0
    8bd8:	d118      	bne.n	8c0c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0c>
    8bda:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    8bde:	f500 7184 	add.w	r1, r0, #264	; 0x108
    8be2:	2200      	movs	r2, #0
    8be4:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8be8:	f004 f9fa 	bl	cfe0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8bec:	2101      	movs	r1, #1
    8bee:	2005      	movs	r0, #5
    8bf0:	e007      	b.n	8c02 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc02>
    8bf2:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8bf6:	0740      	lsls	r0, r0, #29
    8bf8:	d501      	bpl.n	8bfe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbfe>
    8bfa:	2011      	movs	r0, #17
    8bfc:	e000      	b.n	8c00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc00>
    8bfe:	200d      	movs	r0, #13
    8c00:	2101      	movs	r1, #1
    8c02:	f7ff ffb5 	bl	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    8c06:	68a0      	ldr	r0, [r4, #8]
    8c08:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    8c0c:	bd70      	pop	{r4, r5, r6, pc}
    8c0e:	0000      	.short	0x0000
    8c10:	20000130 	.word	0x20000130
    8c14:	b570      	push	{r4, r5, r6, lr}
    8c16:	4a2b      	ldr	r2, [pc, #172]	; (8cc4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc4>)
    8c18:	4603      	mov	r3, r0
    8c1a:	8850      	ldrh	r0, [r2, #2]
    8c1c:	4318      	orrs	r0, r3
    8c1e:	8050      	strh	r0, [r2, #2]
    8c20:	4610      	mov	r0, r2
    8c22:	2b40      	cmp	r3, #64	; 0x40
    8c24:	6880      	ldr	r0, [r0, #8]
    8c26:	d00d      	beq.n	8c44 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc44>
    8c28:	079e      	lsls	r6, r3, #30
    8c2a:	f04f 0500 	mov.w	r5, #0
    8c2e:	f04f 0401 	mov.w	r4, #1
    8c32:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8c36:	d50c      	bpl.n	8c52 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc52>
    8c38:	b14e      	cbz	r6, 8c4e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4e>
    8c3a:	f640 41ee 	movw	r1, #3310	; 0xcee
    8c3e:	2031      	movs	r0, #49	; 0x31
    8c40:	f7fb f868 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c48:	2104      	movs	r1, #4
    8c4a:	f7fe baad 	b.w	71a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8c4e:	60d1      	str	r1, [r2, #12]
    8c50:	e01c      	b.n	8c8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8c>
    8c52:	b1c6      	cbz	r6, 8c86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc86>
    8c54:	6111      	str	r1, [r2, #16]
    8c56:	78c9      	ldrb	r1, [r1, #3]
    8c58:	2906      	cmp	r1, #6
    8c5a:	d002      	beq.n	8c62 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc62>
    8c5c:	290b      	cmp	r1, #11
    8c5e:	d112      	bne.n	8c86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc86>
    8c60:	e009      	b.n	8c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc76>
    8c62:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8c66:	2917      	cmp	r1, #23
    8c68:	d10d      	bne.n	8c86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc86>
    8c6a:	2100      	movs	r1, #0
    8c6c:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    8c70:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
    8c74:	e007      	b.n	8c86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc86>
    8c76:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8c7a:	2911      	cmp	r1, #17
    8c7c:	d103      	bne.n	8c86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc86>
    8c7e:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
    8c82:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    8c86:	0799      	lsls	r1, r3, #30
    8c88:	d516      	bpl.n	8cb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb8>
    8c8a:	68d1      	ldr	r1, [r2, #12]
    8c8c:	78c9      	ldrb	r1, [r1, #3]
    8c8e:	2905      	cmp	r1, #5
    8c90:	d002      	beq.n	8c98 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc98>
    8c92:	290b      	cmp	r1, #11
    8c94:	d110      	bne.n	8cb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb8>
    8c96:	e009      	b.n	8cac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcac>
    8c98:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8c9c:	2915      	cmp	r1, #21
    8c9e:	d10b      	bne.n	8cb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb8>
    8ca0:	2100      	movs	r1, #0
    8ca2:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    8ca6:	f800 4c45 	strb.w	r4, [r0, #-69]
    8caa:	e005      	b.n	8cb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb8>
    8cac:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8cb0:	2910      	cmp	r1, #16
    8cb2:	d101      	bne.n	8cb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb8>
    8cb4:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
    8cb8:	0698      	lsls	r0, r3, #26
    8cba:	d501      	bpl.n	8cc0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc0>
    8cbc:	2008      	movs	r0, #8
    8cbe:	7050      	strb	r0, [r2, #1]
    8cc0:	bd70      	pop	{r4, r5, r6, pc}
    8cc2:	0000      	.short	0x0000
    8cc4:	20000130 	.word	0x20000130
    8cc8:	b570      	push	{r4, r5, r6, lr}
    8cca:	4c19      	ldr	r4, [pc, #100]	; (8d30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd30>)
    8ccc:	68a0      	ldr	r0, [r4, #8]
    8cce:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    8cd2:	b109      	cbz	r1, 8cd8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcd8>
    8cd4:	2601      	movs	r6, #1
    8cd6:	e000      	b.n	8cda <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcda>
    8cd8:	2600      	movs	r6, #0
    8cda:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    8cde:	b10a      	cbz	r2, 8ce4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce4>
    8ce0:	2501      	movs	r5, #1
    8ce2:	e000      	b.n	8ce6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce6>
    8ce4:	2500      	movs	r5, #0
    8ce6:	b90e      	cbnz	r6, 8cec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcec>
    8ce8:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    8cec:	b90d      	cbnz	r5, 8cf2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcf2>
    8cee:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    8cf2:	f100 035a 	add.w	r3, r0, #90	; 0x5a
    8cf6:	7219      	strb	r1, [r3, #8]
    8cf8:	725a      	strb	r2, [r3, #9]
    8cfa:	2101      	movs	r1, #1
    8cfc:	7299      	strb	r1, [r3, #10]
    8cfe:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    8d02:	2801      	cmp	r0, #1
    8d04:	d001      	beq.n	8d0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0a>
    8d06:	b906      	cbnz	r6, 8d0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0a>
    8d08:	b115      	cbz	r5, 8d10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd10>
    8d0a:	2000      	movs	r0, #0
    8d0c:	f000 f812 	bl	8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>
    8d10:	68a0      	ldr	r0, [r4, #8]
    8d12:	f004 fdfe 	bl	d912 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8d16:	2800      	cmp	r0, #0
    8d18:	d008      	beq.n	8d2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd2c>
    8d1a:	68a1      	ldr	r1, [r4, #8]
    8d1c:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8d20:	8808      	ldrh	r0, [r1, #0]
    8d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d26:	3124      	adds	r1, #36	; 0x24
    8d28:	f004 bdb4 	b.w	d894 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8d2c:	bd70      	pop	{r4, r5, r6, pc}
    8d2e:	0000      	.short	0x0000
    8d30:	20000130 	.word	0x20000130
    8d34:	b510      	push	{r4, lr}
    8d36:	4c10      	ldr	r4, [pc, #64]	; (8d78 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd78>)
    8d38:	68a1      	ldr	r1, [r4, #8]
    8d3a:	880a      	ldrh	r2, [r1, #0]
    8d3c:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    8d40:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    8d44:	f891 0062 	ldrb.w	r0, [r1, #98]	; 0x62
    8d48:	f005 fc5f 	bl	e60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8d4c:	68a1      	ldr	r1, [r4, #8]
    8d4e:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    8d52:	f891 0063 	ldrb.w	r0, [r1, #99]	; 0x63
    8d56:	f005 fc58 	bl	e60a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8d5a:	68a2      	ldr	r2, [r4, #8]
    8d5c:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    8d60:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    8d64:	2001      	movs	r0, #1
    8d66:	7008      	strb	r0, [r1, #0]
    8d68:	2000      	movs	r0, #0
    8d6a:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    8d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d72:	f000 bf2b 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8d76:	0000      	.short	0x0000
    8d78:	20000130 	.word	0x20000130
    8d7c:	b510      	push	{r4, lr}
    8d7e:	4c15      	ldr	r4, [pc, #84]	; (8dd4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdd4>)
    8d80:	2301      	movs	r3, #1
    8d82:	2100      	movs	r1, #0
    8d84:	68a0      	ldr	r0, [r4, #8]
    8d86:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8d8a:	3068      	adds	r0, #104	; 0x68
    8d8c:	f004 f970 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d90:	b190      	cbz	r0, 8db8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdb8>
    8d92:	6920      	ldr	r0, [r4, #16]
    8d94:	f004 fbc8 	bl	d528 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8d98:	68a1      	ldr	r1, [r4, #8]
    8d9a:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8d9e:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8da2:	f005 fc4b 	bl	e63c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8da6:	b148      	cbz	r0, 8dbc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdbc>
    8da8:	68a0      	ldr	r0, [r4, #8]
    8daa:	2128      	movs	r1, #40	; 0x28
    8dac:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8db0:	306e      	adds	r0, #110	; 0x6e
    8db2:	2101      	movs	r1, #1
    8db4:	7781      	strb	r1, [r0, #30]
    8db6:	e00b      	b.n	8dd0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdd0>
    8db8:	2001      	movs	r0, #1
    8dba:	bd10      	pop	{r4, pc}
    8dbc:	68a1      	ldr	r1, [r4, #8]
    8dbe:	6920      	ldr	r0, [r4, #16]
    8dc0:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    8dc4:	f004 fbab 	bl	d51e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8dc8:	68a1      	ldr	r1, [r4, #8]
    8dca:	200b      	movs	r0, #11
    8dcc:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8dd0:	2000      	movs	r0, #0
    8dd2:	bd10      	pop	{r4, pc}
    8dd4:	20000130 	.word	0x20000130
    8dd8:	b570      	push	{r4, r5, r6, lr}
    8dda:	4c29      	ldr	r4, [pc, #164]	; (8e80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe80>)
    8ddc:	2301      	movs	r3, #1
    8dde:	2100      	movs	r1, #0
    8de0:	68a0      	ldr	r0, [r4, #8]
    8de2:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8de6:	3068      	adds	r0, #104	; 0x68
    8de8:	f004 f942 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dec:	b1b8      	cbz	r0, 8e1e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe1e>
    8dee:	2100      	movs	r1, #0
    8df0:	6920      	ldr	r0, [r4, #16]
    8df2:	f004 fb6c 	bl	d4ce <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8df6:	b1a0      	cbz	r0, 8e22 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe22>
    8df8:	6920      	ldr	r0, [r4, #16]
    8dfa:	68a1      	ldr	r1, [r4, #8]
    8dfc:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8e00:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8e04:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8e08:	f005 fc18 	bl	e63c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8e0c:	b168      	cbz	r0, 8e2a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2a>
    8e0e:	68a0      	ldr	r0, [r4, #8]
    8e10:	2128      	movs	r1, #40	; 0x28
    8e12:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8e16:	306e      	adds	r0, #110	; 0x6e
    8e18:	2101      	movs	r1, #1
    8e1a:	7781      	strb	r1, [r0, #30]
    8e1c:	e02e      	b.n	8e7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe7c>
    8e1e:	2001      	movs	r0, #1
    8e20:	bd70      	pop	{r4, r5, r6, pc}
    8e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e26:	f000 b8ad 	b.w	8f84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf84>
    8e2a:	6920      	ldr	r0, [r4, #16]
    8e2c:	f004 fb7f 	bl	d52e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8e30:	f004 f901 	bl	d036 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8e34:	4605      	mov	r5, r0
    8e36:	68a0      	ldr	r0, [r4, #8]
    8e38:	4629      	mov	r1, r5
    8e3a:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    8e3e:	6920      	ldr	r0, [r4, #16]
    8e40:	7900      	ldrb	r0, [r0, #4]
    8e42:	f004 fa82 	bl	d34a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8e46:	68a1      	ldr	r1, [r4, #8]
    8e48:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    8e4c:	6920      	ldr	r0, [r4, #16]
    8e4e:	4629      	mov	r1, r5
    8e50:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8e54:	f004 fa75 	bl	d342 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8e58:	68a1      	ldr	r1, [r4, #8]
    8e5a:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    8e5e:	6920      	ldr	r0, [r4, #16]
    8e60:	f004 fb68 	bl	d534 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    8e64:	68a1      	ldr	r1, [r4, #8]
    8e66:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    8e6a:	6920      	ldr	r0, [r4, #16]
    8e6c:	f004 fb65 	bl	d53a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    8e70:	68a1      	ldr	r1, [r4, #8]
    8e72:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    8e76:	200d      	movs	r0, #13
    8e78:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8e7c:	2000      	movs	r0, #0
    8e7e:	bd70      	pop	{r4, r5, r6, pc}
    8e80:	20000130 	.word	0x20000130
    8e84:	b538      	push	{r3, r4, r5, lr}
    8e86:	4c29      	ldr	r4, [pc, #164]	; (8f2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2c>)
    8e88:	2301      	movs	r3, #1
    8e8a:	2100      	movs	r1, #0
    8e8c:	68a0      	ldr	r0, [r4, #8]
    8e8e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8e92:	3068      	adds	r0, #104	; 0x68
    8e94:	f004 f8ec 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e98:	b970      	cbnz	r0, 8eb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xeb8>
    8e9a:	68a0      	ldr	r0, [r4, #8]
    8e9c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8ea0:	2a12      	cmp	r2, #18
    8ea2:	d009      	beq.n	8eb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xeb8>
    8ea4:	2301      	movs	r3, #1
    8ea6:	2105      	movs	r1, #5
    8ea8:	3068      	adds	r0, #104	; 0x68
    8eaa:	f004 f8e1 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8eae:	b108      	cbz	r0, 8eb4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xeb4>
    8eb0:	2008      	movs	r0, #8
    8eb2:	bd38      	pop	{r3, r4, r5, pc}
    8eb4:	2001      	movs	r0, #1
    8eb6:	bd38      	pop	{r3, r4, r5, pc}
    8eb8:	68a0      	ldr	r0, [r4, #8]
    8eba:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8ebe:	b908      	cbnz	r0, 8ec4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec4>
    8ec0:	f7ff f916 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    8ec4:	68a1      	ldr	r1, [r4, #8]
    8ec6:	6920      	ldr	r0, [r4, #16]
    8ec8:	f501 7184 	add.w	r1, r1, #264	; 0x108
    8ecc:	f004 fb44 	bl	d558 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    8ed0:	68a1      	ldr	r1, [r4, #8]
    8ed2:	6920      	ldr	r0, [r4, #16]
    8ed4:	31d8      	adds	r1, #216	; 0xd8
    8ed6:	f004 fb36 	bl	d546 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    8eda:	68a1      	ldr	r1, [r4, #8]
    8edc:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    8ee0:	f88d 0000 	strb.w	r0, [sp]
    8ee4:	9800      	ldr	r0, [sp, #0]
    8ee6:	9000      	str	r0, [sp, #0]
    8ee8:	f89d 0000 	ldrb.w	r0, [sp]
    8eec:	b120      	cbz	r0, 8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    8eee:	f240 219d 	movw	r1, #669	; 0x29d
    8ef2:	2031      	movs	r0, #49	; 0x31
    8ef4:	f7fa ff0e 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ef8:	8808      	ldrh	r0, [r1, #0]
    8efa:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    8efe:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    8f02:	6920      	ldr	r0, [r4, #16]
    8f04:	f004 fb23 	bl	d54e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    8f08:	68a1      	ldr	r1, [r4, #8]
    8f0a:	6920      	ldr	r0, [r4, #16]
    8f0c:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    8f10:	f004 fb16 	bl	d540 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    8f14:	68a0      	ldr	r0, [r4, #8]
    8f16:	4601      	mov	r1, r0
    8f18:	2201      	movs	r2, #1
    8f1a:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    8f1e:	2014      	movs	r0, #20
    8f20:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8f24:	f000 fe52 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f28:	2000      	movs	r0, #0
    8f2a:	bd38      	pop	{r3, r4, r5, pc}
    8f2c:	20000130 	.word	0x20000130
    8f30:	b51c      	push	{r2, r3, r4, lr}
    8f32:	4c13      	ldr	r4, [pc, #76]	; (8f80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf80>)
    8f34:	68a0      	ldr	r0, [r4, #8]
    8f36:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8f3a:	07c0      	lsls	r0, r0, #31
    8f3c:	d001      	beq.n	8f42 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf42>
    8f3e:	2001      	movs	r0, #1
    8f40:	bd1c      	pop	{r2, r3, r4, pc}
    8f42:	4669      	mov	r1, sp
    8f44:	6920      	ldr	r0, [r4, #16]
    8f46:	f004 fb0d 	bl	d564 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    8f4a:	f001 fa07 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8f4e:	f644 112f 	movw	r1, #18735	; 0x492f
    8f52:	4008      	ands	r0, r1
    8f54:	f89d 2000 	ldrb.w	r2, [sp]
    8f58:	68a1      	ldr	r1, [r4, #8]
    8f5a:	4002      	ands	r2, r0
    8f5c:	f801 2fb4 	strb.w	r2, [r1, #180]!
    8f60:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8f64:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    8f68:	7048      	strb	r0, [r1, #1]
    8f6a:	f7ff f8c1 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    8f6e:	68a0      	ldr	r0, [r4, #8]
    8f70:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8f74:	f041 0101 	orr.w	r1, r1, #1
    8f78:	7001      	strb	r1, [r0, #0]
    8f7a:	2000      	movs	r0, #0
    8f7c:	bd1c      	pop	{r2, r3, r4, pc}
    8f7e:	0000      	.short	0x0000
    8f80:	20000130 	.word	0x20000130
    8f84:	4a0a      	ldr	r2, [pc, #40]	; (8fb0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfb0>)
    8f86:	b510      	push	{r4, lr}
    8f88:	6890      	ldr	r0, [r2, #8]
    8f8a:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8f8e:	070b      	lsls	r3, r1, #28
    8f90:	d501      	bpl.n	8f96 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf96>
    8f92:	2001      	movs	r0, #1
    8f94:	bd10      	pop	{r4, pc}
    8f96:	f041 0108 	orr.w	r1, r1, #8
    8f9a:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    8f9e:	6911      	ldr	r1, [r2, #16]
    8fa0:	78c9      	ldrb	r1, [r1, #3]
    8fa2:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    8fa6:	f7ff f8a3 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    8faa:	2000      	movs	r0, #0
    8fac:	bd10      	pop	{r4, pc}
    8fae:	0000      	.short	0x0000
    8fb0:	20000130 	.word	0x20000130
    8fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fb6:	4c2e      	ldr	r4, [pc, #184]	; (9070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1070>)
    8fb8:	68a0      	ldr	r0, [r4, #8]
    8fba:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8fbe:	f010 0f30 	tst.w	r0, #48	; 0x30
    8fc2:	d001      	beq.n	8fc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc8>
    8fc4:	2001      	movs	r0, #1
    8fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fc8:	6920      	ldr	r0, [r4, #16]
    8fca:	f004 fae6 	bl	d59a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    8fce:	b350      	cbz	r0, 9026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1026>
    8fd0:	6920      	ldr	r0, [r4, #16]
    8fd2:	f004 fad4 	bl	d57e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    8fd6:	4607      	mov	r7, r0
    8fd8:	6920      	ldr	r0, [r4, #16]
    8fda:	f004 fad4 	bl	d586 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    8fde:	4606      	mov	r6, r0
    8fe0:	6920      	ldr	r0, [r4, #16]
    8fe2:	f004 faca 	bl	d57a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    8fe6:	4605      	mov	r5, r0
    8fe8:	6920      	ldr	r0, [r4, #16]
    8fea:	f004 faca 	bl	d582 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    8fee:	4601      	mov	r1, r0
    8ff0:	9700      	str	r7, [sp, #0]
    8ff2:	68a0      	ldr	r0, [r4, #8]
    8ff4:	4633      	mov	r3, r6
    8ff6:	462a      	mov	r2, r5
    8ff8:	3024      	adds	r0, #36	; 0x24
    8ffa:	f004 fd14 	bl	da26 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    8ffe:	78a0      	ldrb	r0, [r4, #2]
    9000:	0780      	lsls	r0, r0, #30
    9002:	d503      	bpl.n	900c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100c>
    9004:	68e0      	ldr	r0, [r4, #12]
    9006:	78c0      	ldrb	r0, [r0, #3]
    9008:	2814      	cmp	r0, #20
    900a:	d010      	beq.n	902e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x102e>
    900c:	68a1      	ldr	r1, [r4, #8]
    900e:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    9012:	281c      	cmp	r0, #28
    9014:	d00b      	beq.n	902e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x102e>
    9016:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    901a:	2801      	cmp	r0, #1
    901c:	d00f      	beq.n	903e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x103e>
    901e:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    9022:	b960      	cbnz	r0, 903e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x103e>
    9024:	e008      	b.n	9038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1038>
    9026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    902a:	f7ff bfab 	b.w	8f84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf84>
    902e:	68a1      	ldr	r1, [r4, #8]
    9030:	2001      	movs	r0, #1
    9032:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    9036:	e002      	b.n	903e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x103e>
    9038:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    903c:	b130      	cbz	r0, 904c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104c>
    903e:	68a0      	ldr	r0, [r4, #8]
    9040:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9044:	f041 0110 	orr.w	r1, r1, #16
    9048:	7001      	strb	r1, [r0, #0]
    904a:	e00d      	b.n	9068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1068>
    904c:	f891 0077 	ldrb.w	r0, [r1, #119]	; 0x77
    9050:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    9054:	f040 0020 	orr.w	r0, r0, #32
    9058:	f881 0077 	strb.w	r0, [r1, #119]	; 0x77
    905c:	f831 0b24 	ldrh.w	r0, [r1], #36
    9060:	f004 fce8 	bl	da34 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9064:	f000 fdb2 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9068:	f7ff f842 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    906c:	2000      	movs	r0, #0
    906e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9070:	20000130 	.word	0x20000130
    9074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9076:	4c1a      	ldr	r4, [pc, #104]	; (90e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e0>)
    9078:	2301      	movs	r3, #1
    907a:	210a      	movs	r1, #10
    907c:	68a0      	ldr	r0, [r4, #8]
    907e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9082:	3068      	adds	r0, #104	; 0x68
    9084:	f003 fff4 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9088:	b338      	cbz	r0, 90da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10da>
    908a:	6920      	ldr	r0, [r4, #16]
    908c:	f004 fa85 	bl	d59a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9090:	b1c8      	cbz	r0, 90c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c6>
    9092:	6920      	ldr	r0, [r4, #16]
    9094:	f004 fa73 	bl	d57e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9098:	4607      	mov	r7, r0
    909a:	6920      	ldr	r0, [r4, #16]
    909c:	f004 fa73 	bl	d586 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    90a0:	4606      	mov	r6, r0
    90a2:	6920      	ldr	r0, [r4, #16]
    90a4:	f004 fa69 	bl	d57a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    90a8:	4605      	mov	r5, r0
    90aa:	6920      	ldr	r0, [r4, #16]
    90ac:	f004 fa69 	bl	d582 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    90b0:	4601      	mov	r1, r0
    90b2:	9700      	str	r7, [sp, #0]
    90b4:	68a0      	ldr	r0, [r4, #8]
    90b6:	4633      	mov	r3, r6
    90b8:	462a      	mov	r2, r5
    90ba:	3024      	adds	r0, #36	; 0x24
    90bc:	f004 fcb3 	bl	da26 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    90c0:	68a0      	ldr	r0, [r4, #8]
    90c2:	f004 fc26 	bl	d912 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    90c6:	68a1      	ldr	r1, [r4, #8]
    90c8:	2000      	movs	r0, #0
    90ca:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    90ce:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    90d2:	f7ff f9b7 	bl	8444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>
    90d6:	2000      	movs	r0, #0
    90d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90da:	2001      	movs	r0, #1
    90dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90de:	0000      	.short	0x0000
    90e0:	20000130 	.word	0x20000130
    90e4:	b510      	push	{r4, lr}
    90e6:	4c09      	ldr	r4, [pc, #36]	; (910c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110c>)
    90e8:	68a0      	ldr	r0, [r4, #8]
    90ea:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    90ee:	0740      	lsls	r0, r0, #29
    90f0:	d501      	bpl.n	90f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f6>
    90f2:	2001      	movs	r0, #1
    90f4:	bd10      	pop	{r4, pc}
    90f6:	f7fe fffb 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    90fa:	68a0      	ldr	r0, [r4, #8]
    90fc:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9100:	f041 0104 	orr.w	r1, r1, #4
    9104:	7001      	strb	r1, [r0, #0]
    9106:	2000      	movs	r0, #0
    9108:	bd10      	pop	{r4, pc}
    910a:	0000      	.short	0x0000
    910c:	20000130 	.word	0x20000130
    9110:	b510      	push	{r4, lr}
    9112:	4c09      	ldr	r4, [pc, #36]	; (9138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1138>)
    9114:	2301      	movs	r3, #1
    9116:	2109      	movs	r1, #9
    9118:	68a0      	ldr	r0, [r4, #8]
    911a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    911e:	3068      	adds	r0, #104	; 0x68
    9120:	f003 ffa6 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9124:	2800      	cmp	r0, #0
    9126:	d006      	beq.n	9136 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1136>
    9128:	68a1      	ldr	r1, [r4, #8]
    912a:	2000      	movs	r0, #0
    912c:	f801 0f9a 	strb.w	r0, [r1, #154]!
    9130:	7308      	strb	r0, [r1, #12]
    9132:	f801 0c25 	strb.w	r0, [r1, #-37]
    9136:	bd10      	pop	{r4, pc}
    9138:	20000130 	.word	0x20000130
    913c:	b510      	push	{r4, lr}
    913e:	4c0f      	ldr	r4, [pc, #60]	; (917c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x117c>)
    9140:	2301      	movs	r3, #1
    9142:	2100      	movs	r1, #0
    9144:	68a0      	ldr	r0, [r4, #8]
    9146:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    914a:	3068      	adds	r0, #104	; 0x68
    914c:	f003 ff90 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9150:	b138      	cbz	r0, 9162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1162>
    9152:	f7fe ffcd 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    9156:	68a1      	ldr	r1, [r4, #8]
    9158:	2010      	movs	r0, #16
    915a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    915e:	2000      	movs	r0, #0
    9160:	bd10      	pop	{r4, pc}
    9162:	68a0      	ldr	r0, [r4, #8]
    9164:	2301      	movs	r3, #1
    9166:	2105      	movs	r1, #5
    9168:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    916c:	3068      	adds	r0, #104	; 0x68
    916e:	f003 ff7f 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9172:	b108      	cbz	r0, 9178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1178>
    9174:	2008      	movs	r0, #8
    9176:	bd10      	pop	{r4, pc}
    9178:	2001      	movs	r0, #1
    917a:	bd10      	pop	{r4, pc}
    917c:	20000130 	.word	0x20000130
    9180:	4806      	ldr	r0, [pc, #24]	; (919c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x119c>)
    9182:	6880      	ldr	r0, [r0, #8]
    9184:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9188:	2911      	cmp	r1, #17
    918a:	d001      	beq.n	9190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1190>
    918c:	2002      	movs	r0, #2
    918e:	4770      	bx	lr
    9190:	2112      	movs	r1, #18
    9192:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9196:	2000      	movs	r0, #0
    9198:	4770      	bx	lr
    919a:	0000      	.short	0x0000
    919c:	20000130 	.word	0x20000130
    91a0:	b570      	push	{r4, r5, r6, lr}
    91a2:	4c30      	ldr	r4, [pc, #192]	; (9264 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1264>)
    91a4:	2301      	movs	r3, #1
    91a6:	210b      	movs	r1, #11
    91a8:	68a0      	ldr	r0, [r4, #8]
    91aa:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    91ae:	3068      	adds	r0, #104	; 0x68
    91b0:	f003 ff5e 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91b4:	bb48      	cbnz	r0, 920a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120a>
    91b6:	68a0      	ldr	r0, [r4, #8]
    91b8:	2301      	movs	r3, #1
    91ba:	2100      	movs	r1, #0
    91bc:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    91c0:	3068      	adds	r0, #104	; 0x68
    91c2:	f003 ff55 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91c6:	b1f0      	cbz	r0, 9206 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1206>
    91c8:	68a0      	ldr	r0, [r4, #8]
    91ca:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    91ce:	2824      	cmp	r0, #36	; 0x24
    91d0:	d01b      	beq.n	920a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120a>
    91d2:	6920      	ldr	r0, [r4, #16]
    91d4:	f004 f9fd 	bl	d5d2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    91d8:	b1c8      	cbz	r0, 920e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120e>
    91da:	68a0      	ldr	r0, [r4, #8]
    91dc:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    91e0:	f041 0104 	orr.w	r1, r1, #4
    91e4:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    91e8:	6921      	ldr	r1, [r4, #16]
    91ea:	794a      	ldrb	r2, [r1, #5]
    91ec:	f002 0207 	and.w	r2, r2, #7
    91f0:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    91f4:	7909      	ldrb	r1, [r1, #4]
    91f6:	f001 0107 	and.w	r1, r1, #7
    91fa:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    91fe:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9202:	bb3b      	cbnz	r3, 9254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1254>
    9204:	e007      	b.n	9216 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1216>
    9206:	2001      	movs	r0, #1
    9208:	bd70      	pop	{r4, r5, r6, pc}
    920a:	2020      	movs	r0, #32
    920c:	bd70      	pop	{r4, r5, r6, pc}
    920e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9212:	f7ff beb7 	b.w	8f84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf84>
    9216:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    921a:	2b01      	cmp	r3, #1
    921c:	d01a      	beq.n	9254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1254>
    921e:	f100 0362 	add.w	r3, r0, #98	; 0x62
    9222:	2501      	movs	r5, #1
    9224:	785e      	ldrb	r6, [r3, #1]
    9226:	428e      	cmp	r6, r1
    9228:	d106      	bne.n	9238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1238>
    922a:	7819      	ldrb	r1, [r3, #0]
    922c:	4291      	cmp	r1, r2
    922e:	d103      	bne.n	9238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1238>
    9230:	2102      	movs	r1, #2
    9232:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    9236:	e00d      	b.n	9254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1254>
    9238:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    923c:	8802      	ldrh	r2, [r0, #0]
    923e:	f821 2902 	strh.w	r2, [r1], #-2
    9242:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
    9246:	710a      	strb	r2, [r1, #4]
    9248:	f890 005b 	ldrb.w	r0, [r0, #91]	; 0x5b
    924c:	7148      	strb	r0, [r1, #5]
    924e:	700d      	strb	r5, [r1, #0]
    9250:	f000 fcbc 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9254:	68a1      	ldr	r1, [r4, #8]
    9256:	2021      	movs	r0, #33	; 0x21
    9258:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    925c:	f7fe ff48 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    9260:	2000      	movs	r0, #0
    9262:	bd70      	pop	{r4, r5, r6, pc}
    9264:	20000130 	.word	0x20000130
    9268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    926c:	4c4e      	ldr	r4, [pc, #312]	; (93a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a8>)
    926e:	68a0      	ldr	r0, [r4, #8]
    9270:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9274:	2920      	cmp	r1, #32
    9276:	d009      	beq.n	928c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128c>
    9278:	f05f 0700 	movs.w	r7, #0
    927c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9280:	2922      	cmp	r1, #34	; 0x22
    9282:	d005      	beq.n	9290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1290>
    9284:	b387      	cbz	r7, 92e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12e8>
    9286:	f100 0575 	add.w	r5, r0, #117	; 0x75
    928a:	e003      	b.n	9294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1294>
    928c:	2701      	movs	r7, #1
    928e:	e7f5      	b.n	927c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x127c>
    9290:	f100 0576 	add.w	r5, r0, #118	; 0x76
    9294:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9298:	f041 0104 	orr.w	r1, r1, #4
    929c:	7001      	strb	r1, [r0, #0]
    929e:	6920      	ldr	r0, [r4, #16]
    92a0:	f7fc fd30 	bl	5d04 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    92a4:	f04f 0801 	mov.w	r8, #1
    92a8:	2600      	movs	r6, #0
    92aa:	b308      	cbz	r0, 92f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12f0>
    92ac:	4639      	mov	r1, r7
    92ae:	6920      	ldr	r0, [r4, #16]
    92b0:	f7fe ffd6 	bl	8260 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x260>
    92b4:	b1e0      	cbz	r0, 92f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12f0>
    92b6:	466a      	mov	r2, sp
    92b8:	6921      	ldr	r1, [r4, #16]
    92ba:	68a0      	ldr	r0, [r4, #8]
    92bc:	f003 fffb 	bl	d2b6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    92c0:	b388      	cbz	r0, 9326 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1326>
    92c2:	6920      	ldr	r0, [r4, #16]
    92c4:	f004 f961 	bl	d58a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    92c8:	68a1      	ldr	r1, [r4, #8]
    92ca:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    92ce:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    92d2:	f005 f9b3 	bl	e63c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    92d6:	b338      	cbz	r0, 9328 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1328>
    92d8:	68a0      	ldr	r0, [r4, #8]
    92da:	2128      	movs	r1, #40	; 0x28
    92dc:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    92e0:	306e      	adds	r0, #110	; 0x6e
    92e2:	f880 801e 	strb.w	r8, [r0, #30]
    92e6:	e053      	b.n	9390 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1390>
    92e8:	e7ff      	b.n	92ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ea>
    92ea:	2002      	movs	r0, #2
    92ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    92f0:	68a0      	ldr	r0, [r4, #8]
    92f2:	f04f 0900 	mov.w	r9, #0
    92f6:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    92fa:	2901      	cmp	r1, #1
    92fc:	d015      	beq.n	932a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132a>
    92fe:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9302:	b1f7      	cbz	r7, 9342 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1342>
    9304:	6920      	ldr	r0, [r4, #16]
    9306:	68a1      	ldr	r1, [r4, #8]
    9308:	78c0      	ldrb	r0, [r0, #3]
    930a:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    930e:	fa08 f200 	lsl.w	r2, r8, r0
    9312:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9316:	b160      	cbz	r0, 9332 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1332>
    9318:	200a      	movs	r0, #10
    931a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    931e:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    9322:	b9a0      	cbnz	r0, 934e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134e>
    9324:	e008      	b.n	9338 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1338>
    9326:	e014      	b.n	9352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1352>
    9328:	e027      	b.n	937a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x137a>
    932a:	201e      	movs	r0, #30
    932c:	f7ff fd02 	bl	8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>
    9330:	e7e7      	b.n	9302 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1302>
    9332:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    9336:	e001      	b.n	933c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x133c>
    9338:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    933c:	2031      	movs	r0, #49	; 0x31
    933e:	f7fa fce9 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9342:	702e      	strb	r6, [r5, #0]
    9344:	f7fe fee0 	bl	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    9348:	f7ff fe1c 	bl	8f84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf84>
    934c:	4681      	mov	r9, r0
    934e:	4648      	mov	r0, r9
    9350:	e7cc      	b.n	92ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ec>
    9352:	68a0      	ldr	r0, [r4, #8]
    9354:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9358:	2901      	cmp	r1, #1
    935a:	d009      	beq.n	9370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1370>
    935c:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9360:	68a0      	ldr	r0, [r4, #8]
    9362:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9366:	428d      	cmp	r5, r1
    9368:	d112      	bne.n	9390 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1390>
    936a:	f880 6076 	strb.w	r6, [r0, #118]	; 0x76
    936e:	e00f      	b.n	9390 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1390>
    9370:	2000      	movs	r0, #0
    9372:	f7ff fcdf 	bl	8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>
    9376:	702e      	strb	r6, [r5, #0]
    9378:	e7f2      	b.n	9360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1360>
    937a:	68a0      	ldr	r0, [r4, #8]
    937c:	f89d 1000 	ldrb.w	r1, [sp]
    9380:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9384:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9388:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    938c:	2024      	movs	r0, #36	; 0x24
    938e:	7028      	strb	r0, [r5, #0]
    9390:	68a0      	ldr	r0, [r4, #8]
    9392:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9396:	428d      	cmp	r5, r1
    9398:	d102      	bne.n	93a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a0>
    939a:	f7fe feb5 	bl	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    939e:	e001      	b.n	93a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a4>
    93a0:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    93a4:	2000      	movs	r0, #0
    93a6:	e7a1      	b.n	92ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ec>
    93a8:	20000130 	.word	0x20000130
    93ac:	b510      	push	{r4, lr}
    93ae:	4c0a      	ldr	r4, [pc, #40]	; (93d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13d8>)
    93b0:	68a0      	ldr	r0, [r4, #8]
    93b2:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    93b6:	f041 0104 	orr.w	r1, r1, #4
    93ba:	7001      	strb	r1, [r0, #0]
    93bc:	6920      	ldr	r0, [r4, #16]
    93be:	f004 f912 	bl	d5e6 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    93c2:	2816      	cmp	r0, #22
    93c4:	d001      	beq.n	93ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13ca>
    93c6:	2000      	movs	r0, #0
    93c8:	bd10      	pop	{r4, pc}
    93ca:	6920      	ldr	r0, [r4, #16]
    93cc:	f004 f90d 	bl	d5ea <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    93d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93d4:	f7fe be6a 	b.w	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    93d8:	20000130 	.word	0x20000130
    93dc:	4802      	ldr	r0, [pc, #8]	; (93e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e8>)
    93de:	6900      	ldr	r0, [r0, #16]
    93e0:	7900      	ldrb	r0, [r0, #4]
    93e2:	f7fe be63 	b.w	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    93e6:	0000      	.short	0x0000
    93e8:	20000130 	.word	0x20000130
    93ec:	b510      	push	{r4, lr}
    93ee:	4c08      	ldr	r4, [pc, #32]	; (9410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1410>)
    93f0:	68a0      	ldr	r0, [r4, #8]
    93f2:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    93f6:	2817      	cmp	r0, #23
    93f8:	d001      	beq.n	93fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13fe>
    93fa:	2002      	movs	r0, #2
    93fc:	bd10      	pop	{r4, pc}
    93fe:	f7fe fe83 	bl	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    9402:	68a1      	ldr	r1, [r4, #8]
    9404:	201b      	movs	r0, #27
    9406:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    940a:	2000      	movs	r0, #0
    940c:	bd10      	pop	{r4, pc}
    940e:	0000      	.short	0x0000
    9410:	20000130 	.word	0x20000130
    9414:	b510      	push	{r4, lr}
    9416:	4c0b      	ldr	r4, [pc, #44]	; (9444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1444>)
    9418:	2301      	movs	r3, #1
    941a:	4619      	mov	r1, r3
    941c:	68a0      	ldr	r0, [r4, #8]
    941e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    9422:	3068      	adds	r0, #104	; 0x68
    9424:	f003 fe24 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9428:	b108      	cbz	r0, 942e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x142e>
    942a:	2000      	movs	r0, #0
    942c:	bd10      	pop	{r4, pc}
    942e:	6920      	ldr	r0, [r4, #16]
    9430:	f004 f8af 	bl	d592 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9434:	68a1      	ldr	r1, [r4, #8]
    9436:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    943a:	2007      	movs	r0, #7
    943c:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    9440:	e7f3      	b.n	942a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x142a>
    9442:	0000      	.short	0x0000
    9444:	20000130 	.word	0x20000130
    9448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    944c:	4d37      	ldr	r5, [pc, #220]	; (952c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152c>)
    944e:	2600      	movs	r6, #0
    9450:	4628      	mov	r0, r5
    9452:	68a9      	ldr	r1, [r5, #8]
    9454:	6900      	ldr	r0, [r0, #16]
    9456:	2701      	movs	r7, #1
    9458:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    945c:	7900      	ldrb	r0, [r0, #4]
    945e:	2b0e      	cmp	r3, #14
    9460:	d101      	bne.n	9466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1466>
    9462:	2812      	cmp	r0, #18
    9464:	d006      	beq.n	9474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1474>
    9466:	4a31      	ldr	r2, [pc, #196]	; (952c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152c>)
    9468:	2400      	movs	r4, #0
    946a:	6892      	ldr	r2, [r2, #8]
    946c:	32b4      	adds	r2, #180	; 0xb4
    946e:	2b1c      	cmp	r3, #28
    9470:	d004      	beq.n	947c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x147c>
    9472:	e005      	b.n	9480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1480>
    9474:	f7ff fe4c 	bl	9110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1110>
    9478:	4606      	mov	r6, r0
    947a:	e053      	b.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    947c:	2814      	cmp	r0, #20
    947e:	d002      	beq.n	9486 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1486>
    9480:	2b04      	cmp	r3, #4
    9482:	d00b      	beq.n	949c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x149c>
    9484:	e00c      	b.n	94a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14a0>
    9486:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    948a:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    948e:	2105      	movs	r1, #5
    9490:	4610      	mov	r0, r2
    9492:	f005 f864 	bl	e55e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    9496:	f7fe ffd5 	bl	8444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>
    949a:	e043      	b.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    949c:	280e      	cmp	r0, #14
    949e:	d002      	beq.n	94a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14a6>
    94a0:	2b20      	cmp	r3, #32
    94a2:	d00f      	beq.n	94c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c4>
    94a4:	e010      	b.n	94c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c8>
    94a6:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    94aa:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    94ae:	8808      	ldrh	r0, [r1, #0]
    94b0:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    94b4:	201a      	movs	r0, #26
    94b6:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    94ba:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    94be:	f000 fb85 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    94c2:	e02f      	b.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    94c4:	2816      	cmp	r0, #22
    94c6:	d006      	beq.n	94d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14d6>
    94c8:	2b26      	cmp	r3, #38	; 0x26
    94ca:	d101      	bne.n	94d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14d0>
    94cc:	2816      	cmp	r0, #22
    94ce:	d002      	beq.n	94d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14d6>
    94d0:	2817      	cmp	r0, #23
    94d2:	d014      	beq.n	94fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14fe>
    94d4:	e026      	b.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    94d6:	f801 4f75 	strb.w	r4, [r1, #117]!
    94da:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    94de:	7848      	ldrb	r0, [r1, #1]
    94e0:	2821      	cmp	r0, #33	; 0x21
    94e2:	d01f      	beq.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    94e4:	2108      	movs	r1, #8
    94e6:	4610      	mov	r0, r2
    94e8:	f005 f839 	bl	e55e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    94ec:	68a8      	ldr	r0, [r5, #8]
    94ee:	210b      	movs	r1, #11
    94f0:	30b4      	adds	r0, #180	; 0xb4
    94f2:	f005 f834 	bl	e55e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    94f6:	201a      	movs	r0, #26
    94f8:	f7ff fc1c 	bl	8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>
    94fc:	e012      	b.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    94fe:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    9502:	2822      	cmp	r0, #34	; 0x22
    9504:	d10e      	bne.n	9524 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1524>
    9506:	f881 4076 	strb.w	r4, [r1, #118]	; 0x76
    950a:	f7fe fdfd 	bl	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    950e:	68a8      	ldr	r0, [r5, #8]
    9510:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    9514:	2801      	cmp	r0, #1
    9516:	d102      	bne.n	951e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x151e>
    9518:	2000      	movs	r0, #0
    951a:	f7ff fc0b 	bl	8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>
    951e:	68a8      	ldr	r0, [r5, #8]
    9520:	f880 41a6 	strb.w	r4, [r0, #422]	; 0x1a6
    9524:	4630      	mov	r0, r6
    9526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    952a:	0000      	.short	0x0000
    952c:	20000130 	.word	0x20000130
    9530:	b570      	push	{r4, r5, r6, lr}
    9532:	4c2c      	ldr	r4, [pc, #176]	; (95e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e4>)
    9534:	68a0      	ldr	r0, [r4, #8]
    9536:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    953a:	0789      	lsls	r1, r1, #30
    953c:	d507      	bpl.n	954e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154e>
    953e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9542:	2301      	movs	r3, #1
    9544:	2108      	movs	r1, #8
    9546:	3068      	adds	r0, #104	; 0x68
    9548:	f003 fd92 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    954c:	b1e8      	cbz	r0, 958a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158a>
    954e:	68a0      	ldr	r0, [r4, #8]
    9550:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    9554:	0780      	lsls	r0, r0, #30
    9556:	d412      	bmi.n	957e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x157e>
    9558:	6920      	ldr	r0, [r4, #16]
    955a:	f004 f81c 	bl	d596 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    955e:	68a1      	ldr	r1, [r4, #8]
    9560:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    9564:	6920      	ldr	r0, [r4, #16]
    9566:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    956a:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    956e:	8840      	ldrh	r0, [r0, #2]
    9570:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    9574:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    9578:	f040 0002 	orr.w	r0, r0, #2
    957c:	7008      	strb	r0, [r1, #0]
    957e:	68a0      	ldr	r0, [r4, #8]
    9580:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9584:	07c9      	lsls	r1, r1, #31
    9586:	d002      	beq.n	958e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158e>
    9588:	e010      	b.n	95ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15ac>
    958a:	2001      	movs	r0, #1
    958c:	bd70      	pop	{r4, r5, r6, pc}
    958e:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9592:	078a      	lsls	r2, r1, #30
    9594:	d504      	bpl.n	95a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a0>
    9596:	f240 21d9 	movw	r1, #729	; 0x2d9
    959a:	2031      	movs	r0, #49	; 0x31
    959c:	f7fa fbba 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95a0:	f041 0102 	orr.w	r1, r1, #2
    95a4:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    95a8:	f7fe fda2 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    95ac:	68a0      	ldr	r0, [r4, #8]
    95ae:	2500      	movs	r5, #0
    95b0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    95b4:	2906      	cmp	r1, #6
    95b6:	d105      	bne.n	95c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c4>
    95b8:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    95bc:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    95c0:	f000 fb04 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95c4:	68a0      	ldr	r0, [r4, #8]
    95c6:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    95ca:	b149      	cbz	r1, 95e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e0>
    95cc:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    95d0:	f000 fafc 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95d4:	68a0      	ldr	r0, [r4, #8]
    95d6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    95da:	b909      	cbnz	r1, 95e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e0>
    95dc:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    95e0:	2000      	movs	r0, #0
    95e2:	bd70      	pop	{r4, r5, r6, pc}
    95e4:	20000130 	.word	0x20000130
    95e8:	b510      	push	{r4, lr}
    95ea:	4c17      	ldr	r4, [pc, #92]	; (9648 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1648>)
    95ec:	68a3      	ldr	r3, [r4, #8]
    95ee:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    95f2:	2808      	cmp	r0, #8
    95f4:	d20e      	bcs.n	9614 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1614>
    95f6:	f100 0208 	add.w	r2, r0, #8
    95fa:	f1c0 0008 	rsb	r0, r0, #8
    95fe:	b2c1      	uxtb	r1, r0
    9600:	1898      	adds	r0, r3, r2
    9602:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9606:	f7fa fc1d 	bl	3e44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    960a:	68a1      	ldr	r1, [r4, #8]
    960c:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    9610:	4410      	add	r0, r2
    9612:	7008      	strb	r0, [r1, #0]
    9614:	68a3      	ldr	r3, [r4, #8]
    9616:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    961a:	3808      	subs	r0, #8
    961c:	2804      	cmp	r0, #4
    961e:	d211      	bcs.n	9644 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1644>
    9620:	1d02      	adds	r2, r0, #4
    9622:	f1c0 0004 	rsb	r0, r0, #4
    9626:	b2c1      	uxtb	r1, r0
    9628:	1898      	adds	r0, r3, r2
    962a:	30d8      	adds	r0, #216	; 0xd8
    962c:	f7fa fc0a 	bl	3e44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9630:	68a0      	ldr	r0, [r4, #8]
    9632:	2100      	movs	r1, #0
    9634:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    9638:	2101      	movs	r1, #1
    963a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    963e:	2004      	movs	r0, #4
    9640:	f7ff ba96 	b.w	8b70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb70>
    9644:	bd10      	pop	{r4, pc}
    9646:	0000      	.short	0x0000
    9648:	20000130 	.word	0x20000130
    964c:	4804      	ldr	r0, [pc, #16]	; (9660 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1660>)
    964e:	2127      	movs	r1, #39	; 0x27
    9650:	6880      	ldr	r0, [r0, #8]
    9652:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    9656:	2100      	movs	r1, #0
    9658:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    965c:	4770      	bx	lr
    965e:	0000      	.short	0x0000
    9660:	20000130 	.word	0x20000130
    9664:	4809      	ldr	r0, [pc, #36]	; (968c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168c>)
    9666:	b510      	push	{r4, lr}
    9668:	6880      	ldr	r0, [r0, #8]
    966a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    966e:	2914      	cmp	r1, #20
    9670:	d004      	beq.n	967c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x167c>
    9672:	f240 6189 	movw	r1, #1673	; 0x689
    9676:	2031      	movs	r0, #49	; 0x31
    9678:	f7fa fb4c 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    967c:	2101      	movs	r1, #1
    967e:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9682:	2115      	movs	r1, #21
    9684:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9688:	bd10      	pop	{r4, pc}
    968a:	0000      	.short	0x0000
    968c:	20000130 	.word	0x20000130
    9690:	b510      	push	{r4, lr}
    9692:	4c0a      	ldr	r4, [pc, #40]	; (96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>)
    9694:	68a0      	ldr	r0, [r4, #8]
    9696:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    969a:	07c0      	lsls	r0, r0, #31
    969c:	d008      	beq.n	96b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16b0>
    969e:	f7fe fd33 	bl	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    96a2:	68a0      	ldr	r0, [r4, #8]
    96a4:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    96a8:	f021 0101 	bic.w	r1, r1, #1
    96ac:	7001      	strb	r1, [r0, #0]
    96ae:	bd10      	pop	{r4, pc}
    96b0:	f240 6172 	movw	r1, #1650	; 0x672
    96b4:	2031      	movs	r0, #49	; 0x31
    96b6:	f7fa fb2d 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96ba:	0000      	.short	0x0000
    96bc:	20000130 	.word	0x20000130
    96c0:	b510      	push	{r4, lr}
    96c2:	4c0a      	ldr	r4, [pc, #40]	; (96ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16ec>)
    96c4:	2301      	movs	r3, #1
    96c6:	2100      	movs	r1, #0
    96c8:	68a0      	ldr	r0, [r4, #8]
    96ca:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    96ce:	3068      	adds	r0, #104	; 0x68
    96d0:	f003 fcce 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96d4:	b120      	cbz	r0, 96e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16e0>
    96d6:	68a1      	ldr	r1, [r4, #8]
    96d8:	201c      	movs	r0, #28
    96da:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    96de:	bd10      	pop	{r4, pc}
    96e0:	f240 61f7 	movw	r1, #1783	; 0x6f7
    96e4:	2031      	movs	r0, #49	; 0x31
    96e6:	f7fa fb15 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96ea:	0000      	.short	0x0000
    96ec:	20000130 	.word	0x20000130
    96f0:	480a      	ldr	r0, [pc, #40]	; (971c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x171c>)
    96f2:	b510      	push	{r4, lr}
    96f4:	6880      	ldr	r0, [r0, #8]
    96f6:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    96fa:	f3c1 1201 	ubfx	r2, r1, #4, #2
    96fe:	2a01      	cmp	r2, #1
    9700:	d004      	beq.n	970c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170c>
    9702:	f240 61fe 	movw	r1, #1790	; 0x6fe
    9706:	2031      	movs	r0, #49	; 0x31
    9708:	f7fa fb04 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    970c:	f021 0110 	bic.w	r1, r1, #16
    9710:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9718:	f7fe bcf6 	b.w	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    971c:	20000130 	.word	0x20000130
    9720:	b510      	push	{r4, lr}
    9722:	4c0a      	ldr	r4, [pc, #40]	; (974c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174c>)
    9724:	2301      	movs	r3, #1
    9726:	2100      	movs	r1, #0
    9728:	68a0      	ldr	r0, [r4, #8]
    972a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    972e:	3068      	adds	r0, #104	; 0x68
    9730:	f003 fc9e 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9734:	b120      	cbz	r0, 9740 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1740>
    9736:	68a1      	ldr	r1, [r4, #8]
    9738:	200e      	movs	r0, #14
    973a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    973e:	bd10      	pop	{r4, pc}
    9740:	f240 61ea 	movw	r1, #1770	; 0x6ea
    9744:	2031      	movs	r0, #49	; 0x31
    9746:	f7fa fae5 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    974a:	0000      	.short	0x0000
    974c:	20000130 	.word	0x20000130
    9750:	4804      	ldr	r0, [pc, #16]	; (9764 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1764>)
    9752:	6880      	ldr	r0, [r0, #8]
    9754:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9758:	f021 0104 	bic.w	r1, r1, #4
    975c:	7001      	strb	r1, [r0, #0]
    975e:	f7fe bcd3 	b.w	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    9762:	0000      	.short	0x0000
    9764:	20000130 	.word	0x20000130
    9768:	4809      	ldr	r0, [pc, #36]	; (9790 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1790>)
    976a:	b510      	push	{r4, lr}
    976c:	6880      	ldr	r0, [r0, #8]
    976e:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9772:	2910      	cmp	r1, #16
    9774:	d004      	beq.n	9780 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1780>
    9776:	f240 6181 	movw	r1, #1665	; 0x681
    977a:	2031      	movs	r0, #49	; 0x31
    977c:	f7fa faca 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9780:	2101      	movs	r1, #1
    9782:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9786:	2111      	movs	r1, #17
    9788:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    978c:	bd10      	pop	{r4, pc}
    978e:	0000      	.short	0x0000
    9790:	20000130 	.word	0x20000130
    9794:	b510      	push	{r4, lr}
    9796:	4c0a      	ldr	r4, [pc, #40]	; (97c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c0>)
    9798:	2301      	movs	r3, #1
    979a:	2100      	movs	r1, #0
    979c:	68a0      	ldr	r0, [r4, #8]
    979e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    97a2:	3068      	adds	r0, #104	; 0x68
    97a4:	f003 fc64 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97a8:	b120      	cbz	r0, 97b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17b4>
    97aa:	68a1      	ldr	r1, [r4, #8]
    97ac:	201f      	movs	r0, #31
    97ae:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    97b2:	bd10      	pop	{r4, pc}
    97b4:	f240 710a 	movw	r1, #1802	; 0x70a
    97b8:	2031      	movs	r0, #49	; 0x31
    97ba:	f7fa faab 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97be:	0000      	.short	0x0000
    97c0:	20000130 	.word	0x20000130
    97c4:	4808      	ldr	r0, [pc, #32]	; (97e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e8>)
    97c6:	b510      	push	{r4, lr}
    97c8:	6880      	ldr	r0, [r0, #8]
    97ca:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    97ce:	2921      	cmp	r1, #33	; 0x21
    97d0:	d005      	beq.n	97de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17de>
    97d2:	b121      	cbz	r1, 97de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17de>
    97d4:	f240 7111 	movw	r1, #1809	; 0x711
    97d8:	2031      	movs	r0, #49	; 0x31
    97da:	f7fa fa9b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97de:	2122      	movs	r1, #34	; 0x22
    97e0:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    97e4:	bd10      	pop	{r4, pc}
    97e6:	0000      	.short	0x0000
    97e8:	20000130 	.word	0x20000130
    97ec:	4807      	ldr	r0, [pc, #28]	; (980c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180c>)
    97ee:	b510      	push	{r4, lr}
    97f0:	6880      	ldr	r0, [r0, #8]
    97f2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    97f6:	2915      	cmp	r1, #21
    97f8:	d004      	beq.n	9804 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1804>
    97fa:	f240 6196 	movw	r1, #1686	; 0x696
    97fe:	2031      	movs	r0, #49	; 0x31
    9800:	f7fa fa88 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9804:	2119      	movs	r1, #25
    9806:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    980a:	bd10      	pop	{r4, pc}
    980c:	20000130 	.word	0x20000130
    9810:	4807      	ldr	r0, [pc, #28]	; (9830 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1830>)
    9812:	b510      	push	{r4, lr}
    9814:	6880      	ldr	r0, [r0, #8]
    9816:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    981a:	2915      	cmp	r1, #21
    981c:	d004      	beq.n	9828 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1828>
    981e:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    9822:	2031      	movs	r0, #49	; 0x31
    9824:	f7fa fa76 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9828:	2117      	movs	r1, #23
    982a:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    982e:	bd10      	pop	{r4, pc}
    9830:	20000130 	.word	0x20000130
    9834:	b570      	push	{r4, r5, r6, lr}
    9836:	4d1b      	ldr	r5, [pc, #108]	; (98a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a4>)
    9838:	68a8      	ldr	r0, [r5, #8]
    983a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    983e:	291b      	cmp	r1, #27
    9840:	d002      	beq.n	9848 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1848>
    9842:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    9846:	e007      	b.n	9858 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1858>
    9848:	2400      	movs	r4, #0
    984a:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    984e:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    9852:	b121      	cbz	r1, 985e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x185e>
    9854:	f240 61b4 	movw	r1, #1716	; 0x6b4
    9858:	2031      	movs	r0, #49	; 0x31
    985a:	f7fa fa5b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    985e:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    9862:	b141      	cbz	r1, 9876 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1876>
    9864:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9868:	8801      	ldrh	r1, [r0, #0]
    986a:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    986e:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9872:	210c      	movs	r1, #12
    9874:	e008      	b.n	9888 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1888>
    9876:	8801      	ldrh	r1, [r0, #0]
    9878:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    987c:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9880:	2101      	movs	r1, #1
    9882:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    9886:	210b      	movs	r1, #11
    9888:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    988c:	8800      	ldrh	r0, [r0, #0]
    988e:	f7fa fe75 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9892:	f003 f960 	bl	cb56 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9896:	f000 f999 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    989a:	68a8      	ldr	r0, [r5, #8]
    989c:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
    98a0:	bd70      	pop	{r4, r5, r6, pc}
    98a2:	0000      	.short	0x0000
    98a4:	20000130 	.word	0x20000130
    98a8:	b510      	push	{r4, lr}
    98aa:	4c08      	ldr	r4, [pc, #32]	; (98cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18cc>)
    98ac:	2301      	movs	r3, #1
    98ae:	4619      	mov	r1, r3
    98b0:	68a0      	ldr	r0, [r4, #8]
    98b2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    98b6:	3068      	adds	r0, #104	; 0x68
    98b8:	f003 fbda 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98bc:	2800      	cmp	r0, #0
    98be:	d103      	bne.n	98c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c8>
    98c0:	68a1      	ldr	r1, [r4, #8]
    98c2:	2008      	movs	r0, #8
    98c4:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    98c8:	bd10      	pop	{r4, pc}
    98ca:	0000      	.short	0x0000
    98cc:	20000130 	.word	0x20000130
    98d0:	4814      	ldr	r0, [pc, #80]	; (9924 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1924>)
    98d2:	b510      	push	{r4, lr}
    98d4:	68c1      	ldr	r1, [r0, #12]
    98d6:	6880      	ldr	r0, [r0, #8]
    98d8:	7909      	ldrb	r1, [r1, #4]
    98da:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    98de:	2a0a      	cmp	r2, #10
    98e0:	d109      	bne.n	98f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18f6>
    98e2:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    98e6:	428a      	cmp	r2, r1
    98e8:	d105      	bne.n	98f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18f6>
    98ea:	2100      	movs	r1, #0
    98ec:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    98f0:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    98f4:	bd10      	pop	{r4, pc}
    98f6:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
    98fa:	0713      	lsls	r3, r2, #28
    98fc:	d507      	bpl.n	990e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190e>
    98fe:	f022 0108 	bic.w	r1, r2, #8
    9902:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    990a:	f7fe bbfd 	b.w	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    990e:	29ff      	cmp	r1, #255	; 0xff
    9910:	d004      	beq.n	991c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x191c>
    9912:	f240 616c 	movw	r1, #1644	; 0x66c
    9916:	2031      	movs	r0, #49	; 0x31
    9918:	f7fa f9fc 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    991c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9920:	f7ff be94 	b.w	964c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164c>
    9924:	20000130 	.word	0x20000130
    9928:	b510      	push	{r4, lr}
    992a:	4c15      	ldr	r4, [pc, #84]	; (9980 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1980>)
    992c:	68a0      	ldr	r0, [r4, #8]
    992e:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9932:	0789      	lsls	r1, r1, #30
    9934:	d411      	bmi.n	995a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x195a>
    9936:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    993a:	2301      	movs	r3, #1
    993c:	2100      	movs	r1, #0
    993e:	3068      	adds	r0, #104	; 0x68
    9940:	f003 fb96 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9944:	b120      	cbz	r0, 9950 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1950>
    9946:	68a1      	ldr	r1, [r4, #8]
    9948:	2006      	movs	r0, #6
    994a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    994e:	e009      	b.n	9964 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1964>
    9950:	f240 61d6 	movw	r1, #1750	; 0x6d6
    9954:	2031      	movs	r0, #49	; 0x31
    9956:	f7fa f9dd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    995a:	2100      	movs	r1, #0
    995c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9960:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    9964:	68a0      	ldr	r0, [r4, #8]
    9966:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    996a:	0780      	lsls	r0, r0, #30
    996c:	d507      	bpl.n	997e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x197e>
    996e:	f7fe fbcb 	bl	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    9972:	68a0      	ldr	r0, [r4, #8]
    9974:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9978:	f021 0102 	bic.w	r1, r1, #2
    997c:	7001      	strb	r1, [r0, #0]
    997e:	bd10      	pop	{r4, pc}
    9980:	20000130 	.word	0x20000130
    9984:	4808      	ldr	r0, [pc, #32]	; (99a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a8>)
    9986:	b510      	push	{r4, lr}
    9988:	6880      	ldr	r0, [r0, #8]
    998a:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    998e:	b941      	cbnz	r1, 99a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a2>
    9990:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9994:	2301      	movs	r3, #1
    9996:	2106      	movs	r1, #6
    9998:	3068      	adds	r0, #104	; 0x68
    999a:	f003 fb69 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    999e:	2800      	cmp	r0, #0
    99a0:	d000      	beq.n	99a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a4>
    99a2:	2001      	movs	r0, #1
    99a4:	bd10      	pop	{r4, pc}
    99a6:	0000      	.short	0x0000
    99a8:	20000130 	.word	0x20000130
    99ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99ae:	4c54      	ldr	r4, [pc, #336]	; (9b00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b00>)
    99b0:	4606      	mov	r6, r0
    99b2:	4615      	mov	r5, r2
    99b4:	68a0      	ldr	r0, [r4, #8]
    99b6:	b109      	cbz	r1, 99bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19bc>
    99b8:	2100      	movs	r1, #0
    99ba:	e004      	b.n	99c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c6>
    99bc:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    99c0:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    99c4:	4411      	add	r1, r2
    99c6:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    99ca:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    99ce:	b939      	cbnz	r1, 99e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19e0>
    99d0:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    99d4:	2301      	movs	r3, #1
    99d6:	4619      	mov	r1, r3
    99d8:	3068      	adds	r0, #104	; 0x68
    99da:	f003 fb49 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99de:	b130      	cbz	r0, 99ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19ee>
    99e0:	68a0      	ldr	r0, [r4, #8]
    99e2:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    99e6:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    99ea:	4411      	add	r1, r2
    99ec:	8001      	strh	r1, [r0, #0]
    99ee:	68a0      	ldr	r0, [r4, #8]
    99f0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    99f4:	b132      	cbz	r2, 9a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a04>
    99f6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    99fa:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    99fe:	4419      	add	r1, r3
    9a00:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    9a04:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    9a08:	2f00      	cmp	r7, #0
    9a0a:	dd06      	ble.n	9a1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a1a>
    9a0c:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    9a10:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9a14:	4419      	add	r1, r3
    9a16:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9a1a:	2101      	movs	r1, #1
    9a1c:	233d      	movs	r3, #61	; 0x3d
    9a1e:	b116      	cbz	r6, 9a26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a26>
    9a20:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    9a24:	e013      	b.n	9a4e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4e>
    9a26:	7824      	ldrb	r4, [r4, #0]
    9a28:	2c02      	cmp	r4, #2
    9a2a:	d00a      	beq.n	9a42 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a42>
    9a2c:	2c01      	cmp	r4, #1
    9a2e:	d012      	beq.n	9a56 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a56>
    9a30:	b345      	cbz	r5, 9a84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a84>
    9a32:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    9a36:	7011      	strb	r1, [r2, #0]
    9a38:	f015 0f14 	tst.w	r5, #20
    9a3c:	d00e      	beq.n	9a5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a5c>
    9a3e:	211e      	movs	r1, #30
    9a40:	e018      	b.n	9a74 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a74>
    9a42:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    9a46:	2a06      	cmp	r2, #6
    9a48:	d03e      	beq.n	9ac8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac8>
    9a4a:	2216      	movs	r2, #22
    9a4c:	e03c      	b.n	9ac8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac8>
    9a4e:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    9a52:	7011      	strb	r1, [r2, #0]
    9a54:	e041      	b.n	9ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ada>
    9a56:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    9a5a:	e035      	b.n	9ac8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac8>
    9a5c:	0729      	lsls	r1, r5, #28
    9a5e:	d502      	bpl.n	9a66 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a66>
    9a60:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    9a64:	e039      	b.n	9ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ada>
    9a66:	06a9      	lsls	r1, r5, #26
    9a68:	d501      	bpl.n	9a6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6e>
    9a6a:	2123      	movs	r1, #35	; 0x23
    9a6c:	e002      	b.n	9a74 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a74>
    9a6e:	07a9      	lsls	r1, r5, #30
    9a70:	d003      	beq.n	9a7a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a7a>
    9a72:	212a      	movs	r1, #42	; 0x2a
    9a74:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9a78:	e02f      	b.n	9ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ada>
    9a7a:	f640 419b 	movw	r1, #3227	; 0xc9b
    9a7e:	2031      	movs	r0, #49	; 0x31
    9a80:	f7fa f948 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a84:	b12a      	cbz	r2, 9a92 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a92>
    9a86:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    9a8a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9a8e:	429a      	cmp	r2, r3
    9a90:	d210      	bcs.n	9ab4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ab4>
    9a92:	2f00      	cmp	r7, #0
    9a94:	dd05      	ble.n	9aa2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa2>
    9a96:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    9a9a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9a9e:	429a      	cmp	r2, r3
    9aa0:	d208      	bcs.n	9ab4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ab4>
    9aa2:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    9aa6:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9aaa:	4293      	cmp	r3, r2
    9aac:	d304      	bcc.n	9ab8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ab8>
    9aae:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9ab2:	b10b      	cbz	r3, 9ab8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ab8>
    9ab4:	2222      	movs	r2, #34	; 0x22
    9ab6:	e007      	b.n	9ac8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac8>
    9ab8:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
    9abc:	b13b      	cbz	r3, 9ace <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ace>
    9abe:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    9ac2:	4293      	cmp	r3, r2
    9ac4:	d309      	bcc.n	9ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ada>
    9ac6:	2208      	movs	r2, #8
    9ac8:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    9acc:	e7bf      	b.n	9a4e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4e>
    9ace:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    9ad2:	2a06      	cmp	r2, #6
    9ad4:	d301      	bcc.n	9ada <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ada>
    9ad6:	223e      	movs	r2, #62	; 0x3e
    9ad8:	e7f6      	b.n	9ac8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac8>
    9ada:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9ade:	f88d 1000 	strb.w	r1, [sp]
    9ae2:	9900      	ldr	r1, [sp, #0]
    9ae4:	9100      	str	r1, [sp, #0]
    9ae6:	f89d 1000 	ldrb.w	r1, [sp]
    9aea:	b119      	cbz	r1, 9af4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1af4>
    9aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9af0:	f004 bd74 	b.w	e5dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9af8:	2100      	movs	r1, #0
    9afa:	f7fd bb55 	b.w	71a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9afe:	0000      	.short	0x0000
    9b00:	20000130 	.word	0x20000130
    9b04:	b570      	push	{r4, r5, r6, lr}
    9b06:	4d2d      	ldr	r5, [pc, #180]	; (9bbc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bbc>)
    9b08:	68a8      	ldr	r0, [r5, #8]
    9b0a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    9b0e:	b151      	cbz	r1, 9b26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b26>
    9b10:	2901      	cmp	r1, #1
    9b12:	d008      	beq.n	9b26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b26>
    9b14:	2902      	cmp	r1, #2
    9b16:	d009      	beq.n	9b2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b2c>
    9b18:	2903      	cmp	r1, #3
    9b1a:	d007      	beq.n	9b2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b2c>
    9b1c:	f640 215f 	movw	r1, #2655	; 0xa5f
    9b20:	2031      	movs	r0, #49	; 0x31
    9b22:	f7fa f8f7 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b26:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9b2a:	e035      	b.n	9b98 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b98>
    9b2c:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    9b30:	2908      	cmp	r1, #8
    9b32:	d034      	beq.n	9b9e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b9e>
    9b34:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9b38:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9b3c:	2400      	movs	r4, #0
    9b3e:	1c8b      	adds	r3, r1, #2
    9b40:	429a      	cmp	r2, r3
    9b42:	d306      	bcc.n	9b52 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b52>
    9b44:	1a51      	subs	r1, r2, r1
    9b46:	1e89      	subs	r1, r1, #2
    9b48:	040c      	lsls	r4, r1, #16
    9b4a:	0c24      	lsrs	r4, r4, #16
    9b4c:	d001      	beq.n	9b52 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b52>
    9b4e:	1e64      	subs	r4, r4, #1
    9b50:	b2a4      	uxth	r4, r4
    9b52:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    9b56:	b139      	cbz	r1, 9b68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b68>
    9b58:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9b5c:	2301      	movs	r3, #1
    9b5e:	2109      	movs	r1, #9
    9b60:	3068      	adds	r0, #104	; 0x68
    9b62:	f003 fa85 	bl	d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b66:	b330      	cbz	r0, 9bb6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bb6>
    9b68:	f7ff ff0c 	bl	9984 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1984>
    9b6c:	b168      	cbz	r0, 9b8a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8a>
    9b6e:	68a9      	ldr	r1, [r5, #8]
    9b70:	2000      	movs	r0, #0
    9b72:	3190      	adds	r1, #144	; 0x90
    9b74:	c906      	ldmia	r1, {r1, r2}
    9b76:	1c8b      	adds	r3, r1, #2
    9b78:	429a      	cmp	r2, r3
    9b7a:	d303      	bcc.n	9b84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b84>
    9b7c:	1a50      	subs	r0, r2, r1
    9b7e:	1e80      	subs	r0, r0, #2
    9b80:	d000      	beq.n	9b84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b84>
    9b82:	1e40      	subs	r0, r0, #1
    9b84:	42a0      	cmp	r0, r4
    9b86:	d200      	bcs.n	9b8a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8a>
    9b88:	b284      	uxth	r4, r0
    9b8a:	b10c      	cbz	r4, 9b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b90>
    9b8c:	1e64      	subs	r4, r4, #1
    9b8e:	b2a4      	uxth	r4, r4
    9b90:	68a8      	ldr	r0, [r5, #8]
    9b92:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9b96:	4421      	add	r1, r4
    9b98:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    9b9c:	bd70      	pop	{r4, r5, r6, pc}
    9b9e:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9ba2:	2903      	cmp	r1, #3
    9ba4:	d3bf      	bcc.n	9b26 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b26>
    9ba6:	f830 1f6c 	ldrh.w	r1, [r0, #108]!
    9baa:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9bac:	4411      	add	r1, r2
    9bae:	1c49      	adds	r1, r1, #1
    9bb0:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9bb4:	bd70      	pop	{r4, r5, r6, pc}
    9bb6:	2400      	movs	r4, #0
    9bb8:	e7ea      	b.n	9b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b90>
    9bba:	0000      	.short	0x0000
    9bbc:	20000130 	.word	0x20000130

00009bc0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    9bc0:	4901      	ldr	r1, [pc, #4]	; (9bc8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    9bc2:	7008      	strb	r0, [r1, #0]
    9bc4:	4770      	bx	lr
    9bc6:	0000      	.short	0x0000
    9bc8:	200002af 	.word	0x200002af

00009bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    9bcc:	4801      	ldr	r0, [pc, #4]	; (9bd4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    9bce:	7800      	ldrb	r0, [r0, #0]
    9bd0:	f7f9 beda 	b.w	3988 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9bd4:	200002af 	.word	0x200002af

00009bd8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9bd8:	4903      	ldr	r1, [pc, #12]	; (9be8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9bda:	888a      	ldrh	r2, [r1, #4]
    9bdc:	8002      	strh	r2, [r0, #0]
    9bde:	7889      	ldrb	r1, [r1, #2]
    9be0:	7081      	strb	r1, [r0, #2]
    9be2:	2000      	movs	r0, #0
    9be4:	4770      	bx	lr
    9be6:	0000      	.short	0x0000
    9be8:	20000f90 	.word	0x20000f90

00009bec <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9bec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9bee:	460c      	mov	r4, r1
    9bf0:	4605      	mov	r5, r0
    9bf2:	8800      	ldrh	r0, [r0, #0]
    9bf4:	4669      	mov	r1, sp
    9bf6:	f003 fa11 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9bfa:	2200      	movs	r2, #0
    9bfc:	b128      	cbz	r0, 9c0a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9bfe:	f8c4 2002 	str.w	r2, [r4, #2]
    9c02:	71a2      	strb	r2, [r4, #6]
    9c04:	8022      	strh	r2, [r4, #0]
    9c06:	2002      	movs	r0, #2
    9c08:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9c0a:	9901      	ldr	r1, [sp, #4]
    9c0c:	f111 0168 	adds.w	r1, r1, #104	; 0x68
    9c10:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
    9c14:	f8d1 0016 	ldr.w	r0, [r1, #22]
    9c18:	f8c4 0002 	str.w	r0, [r4, #2]
    9c1c:	7e88      	ldrb	r0, [r1, #26]
    9c1e:	71a0      	strb	r0, [r4, #6]
    9c20:	8828      	ldrh	r0, [r5, #0]
    9c22:	8020      	strh	r0, [r4, #0]
    9c24:	f891 004e 	ldrb.w	r0, [r1, #78]	; 0x4e
    9c28:	2800      	cmp	r0, #0
    9c2a:	d1f1      	bne.n	9c10 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9c2c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

00009c30 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9c30:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9c34:	460d      	mov	r5, r1
    9c36:	4606      	mov	r6, r0
    9c38:	f000 fb90 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9c3c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9c40:	b1e0      	cbz	r0, 9c7c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    9c42:	8830      	ldrh	r0, [r6, #0]
    9c44:	4669      	mov	r1, sp
    9c46:	f003 f9e9 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c4a:	2800      	cmp	r0, #0
    9c4c:	d114      	bne.n	9c78 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9c4e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9c52:	2700      	movs	r7, #0
    9c54:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    9c58:	f814 0f62 	ldrb.w	r0, [r4, #98]!
    9c5c:	f005 fa39 	bl	f0d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9c60:	70a8      	strb	r0, [r5, #2]
    9c62:	7860      	ldrb	r0, [r4, #1]
    9c64:	f005 fa35 	bl	f0d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9c68:	70e8      	strb	r0, [r5, #3]
    9c6a:	78a0      	ldrb	r0, [r4, #2]
    9c6c:	3c62      	subs	r4, #98	; 0x62
    9c6e:	2800      	cmp	r0, #0
    9c70:	d1f0      	bne.n	9c54 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    9c72:	8830      	ldrh	r0, [r6, #0]
    9c74:	8028      	strh	r0, [r5, #0]
    9c76:	2000      	movs	r0, #0
    9c78:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9c7c:	2001      	movs	r0, #1
    9c7e:	e7fb      	b.n	9c78 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

00009c80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9c80:	b51c      	push	{r2, r3, r4, lr}
    9c82:	8800      	ldrh	r0, [r0, #0]
    9c84:	4669      	mov	r1, sp
    9c86:	f003 f9c9 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c8a:	2800      	cmp	r0, #0
    9c8c:	d10b      	bne.n	9ca6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9c8e:	480b      	ldr	r0, [pc, #44]	; (9cbc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9c90:	7800      	ldrb	r0, [r0, #0]
    9c92:	b188      	cbz	r0, 9cb8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9c94:	9801      	ldr	r0, [sp, #4]
    9c96:	f005 fb9a 	bl	f3ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    9c9a:	b128      	cbz	r0, 9ca8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9c9c:	9801      	ldr	r0, [sp, #4]
    9c9e:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    9ca2:	b118      	cbz	r0, 9cac <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9ca4:	203a      	movs	r0, #58	; 0x3a
    9ca6:	bd1c      	pop	{r2, r3, r4, pc}
    9ca8:	2002      	movs	r0, #2
    9caa:	bd1c      	pop	{r2, r3, r4, pc}
    9cac:	9901      	ldr	r1, [sp, #4]
    9cae:	2001      	movs	r0, #1
    9cb0:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    9cb4:	2000      	movs	r0, #0
    9cb6:	bd1c      	pop	{r2, r3, r4, pc}
    9cb8:	2011      	movs	r0, #17
    9cba:	bd1c      	pop	{r2, r3, r4, pc}
    9cbc:	2000020c 	.word	0x2000020c

00009cc0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9cc0:	b510      	push	{r4, lr}
    9cc2:	4604      	mov	r4, r0
    9cc4:	f005 fb7a 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9cc8:	b130      	cbz	r0, 9cd8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9cca:	4804      	ldr	r0, [pc, #16]	; (9cdc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9ccc:	8881      	ldrh	r1, [r0, #4]
    9cce:	8021      	strh	r1, [r4, #0]
    9cd0:	88c0      	ldrh	r0, [r0, #6]
    9cd2:	8060      	strh	r0, [r4, #2]
    9cd4:	2000      	movs	r0, #0
    9cd6:	bd10      	pop	{r4, pc}
    9cd8:	2001      	movs	r0, #1
    9cda:	bd10      	pop	{r4, pc}
    9cdc:	20000214 	.word	0x20000214

00009ce0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9ce0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9ce2:	4605      	mov	r5, r0
    9ce4:	f000 fb3a 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9ce8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9cec:	b310      	cbz	r0, 9d34 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9cee:	2400      	movs	r4, #0
    9cf0:	a802      	add	r0, sp, #8
    9cf2:	f88d 4004 	strb.w	r4, [sp, #4]
    9cf6:	f88d 4008 	strb.w	r4, [sp, #8]
    9cfa:	9000      	str	r0, [sp, #0]
    9cfc:	78aa      	ldrb	r2, [r5, #2]
    9cfe:	7869      	ldrb	r1, [r5, #1]
    9d00:	7828      	ldrb	r0, [r5, #0]
    9d02:	ab01      	add	r3, sp, #4
    9d04:	f005 fbb5 	bl	f472 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    9d08:	2800      	cmp	r0, #0
    9d0a:	d112      	bne.n	9d32 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9d0c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9d10:	f005 fab5 	bl	f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9d14:	b180      	cbz	r0, 9d38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d16:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9d1a:	f005 fab0 	bl	f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9d1e:	b158      	cbz	r0, 9d38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d20:	4806      	ldr	r0, [pc, #24]	; (9d3c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9d22:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d26:	7481      	strb	r1, [r0, #18]
    9d28:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9d2c:	74c1      	strb	r1, [r0, #19]
    9d2e:	8284      	strh	r4, [r0, #20]
    9d30:	2000      	movs	r0, #0
    9d32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d34:	2001      	movs	r0, #1
    9d36:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d38:	2011      	movs	r0, #17
    9d3a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d3c:	20000f90 	.word	0x20000f90

00009d40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9d40:	7801      	ldrb	r1, [r0, #0]
    9d42:	b179      	cbz	r1, 9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d44:	7841      	ldrb	r1, [r0, #1]
    9d46:	b169      	cbz	r1, 9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d48:	8841      	ldrh	r1, [r0, #2]
    9d4a:	291b      	cmp	r1, #27
    9d4c:	d30a      	bcc.n	9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d4e:	8881      	ldrh	r1, [r0, #4]
    9d50:	291b      	cmp	r1, #27
    9d52:	d307      	bcc.n	9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d54:	4904      	ldr	r1, [pc, #16]	; (9d68 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9d56:	6802      	ldr	r2, [r0, #0]
    9d58:	f8c1 2002 	str.w	r2, [r1, #2]
    9d5c:	8880      	ldrh	r0, [r0, #4]
    9d5e:	80c8      	strh	r0, [r1, #6]
    9d60:	2000      	movs	r0, #0
    9d62:	4770      	bx	lr
    9d64:	2012      	movs	r0, #18
    9d66:	4770      	bx	lr
    9d68:	20000f90 	.word	0x20000f90

00009d6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9d6c:	6800      	ldr	r0, [r0, #0]
    9d6e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9d72:	4288      	cmp	r0, r1
    9d74:	d303      	bcc.n	9d7e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9d76:	4903      	ldr	r1, [pc, #12]	; (9d84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9d78:	6088      	str	r0, [r1, #8]
    9d7a:	2000      	movs	r0, #0
    9d7c:	4770      	bx	lr
    9d7e:	2012      	movs	r0, #18
    9d80:	4770      	bx	lr
    9d82:	0000      	.short	0x0000
    9d84:	20000f90 	.word	0x20000f90

00009d88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9d88:	4a03      	ldr	r2, [pc, #12]	; (9d98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9d8a:	e9d2 1200 	ldrd	r1, r2, [r2]
    9d8e:	6001      	str	r1, [r0, #0]
    9d90:	6042      	str	r2, [r0, #4]
    9d92:	2000      	movs	r0, #0
    9d94:	4770      	bx	lr
    9d96:	0000      	.short	0x0000
    9d98:	0000a1fc 	.word	0x0000a1fc

00009d9c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9d9c:	b510      	push	{r4, lr}
    9d9e:	2005      	movs	r0, #5
    9da0:	f000 fad2 	bl	a348 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9da4:	f7fd feb4 	bl	7b10 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9da8:	4902      	ldr	r1, [pc, #8]	; (9db4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9daa:	4801      	ldr	r0, [pc, #4]	; (9db0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9dac:	6048      	str	r0, [r1, #4]
    9dae:	bd10      	pop	{r4, pc}
    9db0:	00009e3d 	.word	0x00009e3d
    9db4:	2000020c 	.word	0x2000020c

00009db8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9db8:	b510      	push	{r4, lr}
    9dba:	f003 f883 	bl	cec4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9dbe:	f7fb fc55 	bl	566c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9dc2:	480f      	ldr	r0, [pc, #60]	; (9e00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>)
    9dc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9dc8:	4b0e      	ldr	r3, [pc, #56]	; (9e04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9dca:	81c1      	strh	r1, [r0, #14]
    9dcc:	8201      	strh	r1, [r0, #16]
    9dce:	2100      	movs	r1, #0
    9dd0:	75c1      	strb	r1, [r0, #23]
    9dd2:	8301      	strh	r1, [r0, #24]
    9dd4:	8001      	strh	r1, [r0, #0]
    9dd6:	221b      	movs	r2, #27
    9dd8:	801a      	strh	r2, [r3, #0]
    9dda:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9dde:	805c      	strh	r4, [r3, #2]
    9de0:	809a      	strh	r2, [r3, #4]
    9de2:	80dc      	strh	r4, [r3, #6]
    9de4:	7481      	strb	r1, [r0, #18]
    9de6:	74c1      	strb	r1, [r0, #19]
    9de8:	2303      	movs	r3, #3
    9dea:	7083      	strb	r3, [r0, #2]
    9dec:	2302      	movs	r3, #2
    9dee:	70c3      	strb	r3, [r0, #3]
    9df0:	8082      	strh	r2, [r0, #4]
    9df2:	80c2      	strh	r2, [r0, #6]
    9df4:	f640 62a6 	movw	r2, #3750	; 0xea6
    9df8:	6082      	str	r2, [r0, #8]
    9dfa:	7581      	strb	r1, [r0, #22]
    9dfc:	7301      	strb	r1, [r0, #12]
    9dfe:	bd10      	pop	{r4, pc}
    9e00:	20000f90 	.word	0x20000f90
    9e04:	20000214 	.word	0x20000214

00009e08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    9e08:	b510      	push	{r4, lr}
    9e0a:	b158      	cbz	r0, 9e24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    9e0c:	490a      	ldr	r1, [pc, #40]	; (9e38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    9e0e:	780a      	ldrb	r2, [r1, #0]
    9e10:	b16a      	cbz	r2, 9e2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    9e12:	2200      	movs	r2, #0
    9e14:	7042      	strb	r2, [r0, #1]
    9e16:	2303      	movs	r3, #3
    9e18:	7003      	strb	r3, [r0, #0]
    9e1a:	2301      	movs	r3, #1
    9e1c:	7103      	strb	r3, [r0, #4]
    9e1e:	700a      	strb	r2, [r1, #0]
    9e20:	4618      	mov	r0, r3
    9e22:	bd10      	pop	{r4, pc}
    9e24:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
    9e28:	2039      	movs	r0, #57	; 0x39
    9e2a:	f7f9 ff73 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e32:	f7fb bf97 	b.w	5d64 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    9e36:	0000      	.short	0x0000
    9e38:	20000f90 	.word	0x20000f90
    9e3c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e40:	4692      	mov	sl, r2
    9e42:	460f      	mov	r7, r1
    9e44:	4681      	mov	r9, r0
    9e46:	f005 fab9 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9e4a:	2800      	cmp	r0, #0
    9e4c:	d063      	beq.n	9f16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e4e:	4933      	ldr	r1, [pc, #204]	; (9f1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    9e50:	f8b9 204c 	ldrh.w	r2, [r9, #76]	; 0x4c
    9e54:	f8b9 604a 	ldrh.w	r6, [r9, #74]	; 0x4a
    9e58:	8808      	ldrh	r0, [r1, #0]
    9e5a:	4290      	cmp	r0, r2
    9e5c:	d300      	bcc.n	9e60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    9e5e:	4610      	mov	r0, r2
    9e60:	4680      	mov	r8, r0
    9e62:	8888      	ldrh	r0, [r1, #4]
    9e64:	42b0      	cmp	r0, r6
    9e66:	d200      	bcs.n	9e6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    9e68:	4606      	mov	r6, r0
    9e6a:	884c      	ldrh	r4, [r1, #2]
    9e6c:	f640 0048 	movw	r0, #2120	; 0x848
    9e70:	4284      	cmp	r4, r0
    9e72:	d300      	bcc.n	9e76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    9e74:	4604      	mov	r4, r0
    9e76:	88cd      	ldrh	r5, [r1, #6]
    9e78:	4285      	cmp	r5, r0
    9e7a:	d300      	bcc.n	9e7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    9e7c:	4605      	mov	r5, r0
    9e7e:	4284      	cmp	r4, r0
    9e80:	d300      	bcc.n	9e84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    9e82:	4604      	mov	r4, r0
    9e84:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9e88:	2e1b      	cmp	r6, #27
    9e8a:	d001      	beq.n	9e90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    9e8c:	428d      	cmp	r5, r1
    9e8e:	d104      	bne.n	9e9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    9e90:	f1b8 0f1b 	cmp.w	r8, #27
    9e94:	d03f      	beq.n	9f16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e96:	428c      	cmp	r4, r1
    9e98:	d03d      	beq.n	9f16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e9a:	466a      	mov	r2, sp
    9e9c:	4651      	mov	r1, sl
    9e9e:	4648      	mov	r0, r9
    9ea0:	f005 fa10 	bl	f2c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    9ea4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    9ea8:	4641      	mov	r1, r8
    9eaa:	4540      	cmp	r0, r8
    9eac:	d900      	bls.n	9eb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    9eae:	4608      	mov	r0, r1
    9eb0:	80f8      	strh	r0, [r7, #6]
    9eb2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9eb6:	42a1      	cmp	r1, r4
    9eb8:	d800      	bhi.n	9ebc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    9eba:	460c      	mov	r4, r1
    9ebc:	813c      	strh	r4, [r7, #8]
    9ebe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9ec2:	42b1      	cmp	r1, r6
    9ec4:	d800      	bhi.n	9ec8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    9ec6:	460e      	mov	r6, r1
    9ec8:	807e      	strh	r6, [r7, #2]
    9eca:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9ece:	42a9      	cmp	r1, r5
    9ed0:	d900      	bls.n	9ed4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    9ed2:	4629      	mov	r1, r5
    9ed4:	80b9      	strh	r1, [r7, #4]
    9ed6:	2201      	movs	r2, #1
    9ed8:	703a      	strb	r2, [r7, #0]
    9eda:	381b      	subs	r0, #27
    9edc:	28e0      	cmp	r0, #224	; 0xe0
    9ede:	d902      	bls.n	9ee6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    9ee0:	f640 419b 	movw	r1, #3227	; 0xc9b
    9ee4:	e014      	b.n	9f10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9ee6:	3e1b      	subs	r6, #27
    9ee8:	2ee0      	cmp	r6, #224	; 0xe0
    9eea:	d902      	bls.n	9ef2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    9eec:	f640 419d 	movw	r1, #3229	; 0xc9d
    9ef0:	e00e      	b.n	9f10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9ef2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    9ef6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    9efa:	4284      	cmp	r4, r0
    9efc:	d902      	bls.n	9f04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    9efe:	f640 419f 	movw	r1, #3231	; 0xc9f
    9f02:	e005      	b.n	9f10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9f04:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    9f08:	4281      	cmp	r1, r0
    9f0a:	d904      	bls.n	9f16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9f0c:	f640 41a1 	movw	r1, #3233	; 0xca1
    9f10:	2039      	movs	r0, #57	; 0x39
    9f12:	f7f9 feff 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f16:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f1a:	0000      	.short	0x0000
    9f1c:	20000214 	.word	0x20000214

00009f20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    9f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f24:	b088      	sub	sp, #32
    9f26:	460c      	mov	r4, r1
    9f28:	4606      	mov	r6, r0
    9f2a:	f003 fe88 	bl	dc3e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9f2e:	b198      	cbz	r0, 9f58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    9f30:	4630      	mov	r0, r6
    9f32:	f003 fe77 	bl	dc24 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9f36:	b130      	cbz	r0, 9f46 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    9f38:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9f3c:	2012      	movs	r0, #18
    9f3e:	2900      	cmp	r1, #0
    9f40:	d00b      	beq.n	9f5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f42:	2980      	cmp	r1, #128	; 0x80
    9f44:	d809      	bhi.n	9f5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f46:	4630      	mov	r0, r6
    9f48:	f003 fe57 	bl	dbfa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    9f4c:	b140      	cbz	r0, 9f60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f4e:	4630      	mov	r0, r6
    9f50:	f003 fdde 	bl	db10 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    9f54:	b130      	cbz	r0, 9f64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    9f56:	e009      	b.n	9f6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    9f58:	2042      	movs	r0, #66	; 0x42
    9f5a:	b008      	add	sp, #32
    9f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f60:	200c      	movs	r0, #12
    9f62:	e7fa      	b.n	9f5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f64:	4630      	mov	r0, r6
    9f66:	f003 fe57 	bl	dc18 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    9f6a:	b3a8      	cbz	r0, 9fd8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    9f6c:	4630      	mov	r0, r6
    9f6e:	f004 f86a 	bl	e046 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9f72:	2800      	cmp	r0, #0
    9f74:	d1f4      	bne.n	9f60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f76:	4630      	mov	r0, r6
    9f78:	f003 fde5 	bl	db46 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    9f7c:	2800      	cmp	r0, #0
    9f7e:	d1ef      	bne.n	9f60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f80:	4630      	mov	r0, r6
    9f82:	f7fc f90d 	bl	61a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    9f86:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9f8a:	f242 7110 	movw	r1, #10000	; 0x2710
    9f8e:	fb00 f801 	mul.w	r8, r0, r1
    9f92:	78e1      	ldrb	r1, [r4, #3]
    9f94:	4630      	mov	r0, r6
    9f96:	f003 fe27 	bl	dbe8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    9f9a:	4630      	mov	r0, r6
    9f9c:	f003 fe3e 	bl	dc1c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9fa0:	b1e8      	cbz	r0, 9fde <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    9fa2:	2200      	movs	r2, #0
    9fa4:	4611      	mov	r1, r2
    9fa6:	a801      	add	r0, sp, #4
    9fa8:	f7fa f92c 	bl	4204 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    9fac:	0004      	movs	r4, r0
    9fae:	d06a      	beq.n	a086 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9fb0:	2100      	movs	r1, #0
    9fb2:	f7fb fdc1 	bl	5b38 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9fb6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9fba:	8020      	strh	r0, [r4, #0]
    9fbc:	4621      	mov	r1, r4
    9fbe:	4630      	mov	r0, r6
    9fc0:	f003 fe50 	bl	dc64 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    9fc4:	f005 f9fa 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9fc8:	4d3a      	ldr	r5, [pc, #232]	; (a0b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    9fca:	2800      	cmp	r0, #0
    9fcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    9fd0:	d00f      	beq.n	9ff2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    9fd2:	88aa      	ldrh	r2, [r5, #4]
    9fd4:	88e9      	ldrh	r1, [r5, #6]
    9fd6:	e00e      	b.n	9ff6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    9fd8:	e7ff      	b.n	9fda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    9fda:	2012      	movs	r0, #18
    9fdc:	e7bd      	b.n	9f5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9fde:	4642      	mov	r2, r8
    9fe0:	2100      	movs	r1, #0
    9fe2:	4630      	mov	r0, r6
    9fe4:	f7fc fffc 	bl	6fe0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    9fe8:	2800      	cmp	r0, #0
    9fea:	d0b6      	beq.n	9f5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9fec:	f241 31fd 	movw	r1, #5117	; 0x13fd
    9ff0:	e053      	b.n	a09a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9ff2:	221b      	movs	r2, #27
    9ff4:	4611      	mov	r1, r2
    9ff6:	84c2      	strh	r2, [r0, #38]	; 0x26
    9ff8:	8501      	strh	r1, [r0, #40]	; 0x28
    9ffa:	68a8      	ldr	r0, [r5, #8]
    9ffc:	6260      	str	r0, [r4, #36]	; 0x24
    9ffe:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a002:	4630      	mov	r0, r6
    a004:	f003 fe12 	bl	dc2c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a008:	b910      	cbnz	r0, a010 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a00a:	4630      	mov	r0, r6
    a00c:	f003 fe28 	bl	dc60 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a010:	6067      	str	r7, [r4, #4]
    a012:	8821      	ldrh	r1, [r4, #0]
    a014:	f8ad 1008 	strh.w	r1, [sp, #8]
    a018:	7ca9      	ldrb	r1, [r5, #18]
    a01a:	f88d 100a 	strb.w	r1, [sp, #10]
    a01e:	7ce9      	ldrb	r1, [r5, #19]
    a020:	f88d 100b 	strb.w	r1, [sp, #11]
    a024:	8aa9      	ldrh	r1, [r5, #20]
    a026:	f8ad 100c 	strh.w	r1, [sp, #12]
    a02a:	a905      	add	r1, sp, #20
    a02c:	9100      	str	r1, [sp, #0]
    a02e:	2001      	movs	r0, #1
    a030:	ab04      	add	r3, sp, #16
    a032:	aa02      	add	r2, sp, #8
    a034:	4621      	mov	r1, r4
    a036:	f005 f982 	bl	f33e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    a03a:	b140      	cbz	r0, a04e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a03c:	2100      	movs	r1, #0
    a03e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a042:	f7fa f909 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a046:	b1f0      	cbz	r0, a086 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a048:	f241 4148 	movw	r1, #5192	; 0x1448
    a04c:	e025      	b.n	a09a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a04e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a052:	f88d 0018 	strb.w	r0, [sp, #24]
    a056:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a05a:	f88d 0019 	strb.w	r0, [sp, #25]
    a05e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a062:	f8ad 001a 	strh.w	r0, [sp, #26]
    a066:	a906      	add	r1, sp, #24
    a068:	4620      	mov	r0, r4
    a06a:	f003 f896 	bl	d19a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a06e:	78e8      	ldrb	r0, [r5, #3]
    a070:	9000      	str	r0, [sp, #0]
    a072:	78ab      	ldrb	r3, [r5, #2]
    a074:	88ea      	ldrh	r2, [r5, #6]
    a076:	88a9      	ldrh	r1, [r5, #4]
    a078:	8820      	ldrh	r0, [r4, #0]
    a07a:	f7fa f9b9 	bl	43f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a07e:	b120      	cbz	r0, a08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a080:	f241 4153 	movw	r1, #5203	; 0x1453
    a084:	e009      	b.n	a09a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a086:	2009      	movs	r0, #9
    a088:	e767      	b.n	9f5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a08a:	4642      	mov	r2, r8
    a08c:	4621      	mov	r1, r4
    a08e:	4630      	mov	r0, r6
    a090:	f7fc ffa6 	bl	6fe0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a094:	b120      	cbz	r0, a0a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a096:	f241 4155 	movw	r1, #5205	; 0x1455
    a09a:	2039      	movs	r0, #57	; 0x39
    a09c:	f7f9 fe3a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0a0:	4805      	ldr	r0, [pc, #20]	; (a0b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a0a2:	6843      	ldr	r3, [r0, #4]
    a0a4:	b123      	cbz	r3, a0b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a0a6:	2200      	movs	r2, #0
    a0a8:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    a0ac:	4620      	mov	r0, r4
    a0ae:	4798      	blx	r3
    a0b0:	2000      	movs	r0, #0
    a0b2:	e752      	b.n	9f5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0b4:	20000f90 	.word	0x20000f90
    a0b8:	2000020c 	.word	0x2000020c
    a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c0:	b088      	sub	sp, #32
    a0c2:	4604      	mov	r4, r0
    a0c4:	8800      	ldrh	r0, [r0, #0]
    a0c6:	a906      	add	r1, sp, #24
    a0c8:	f002 ffa8 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a0cc:	2800      	cmp	r0, #0
    a0ce:	d147      	bne.n	a160 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a0d0:	9807      	ldr	r0, [sp, #28]
    a0d2:	2700      	movs	r7, #0
    a0d4:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    a0d8:	f88d 1008 	strb.w	r1, [sp, #8]
    a0dc:	9902      	ldr	r1, [sp, #8]
    a0de:	9102      	str	r1, [sp, #8]
    a0e0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a0e4:	f88d 100c 	strb.w	r1, [sp, #12]
    a0e8:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a0ec:	3068      	adds	r0, #104	; 0x68
    a0ee:	0689      	lsls	r1, r1, #26
    a0f0:	d502      	bpl.n	a0f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a0f2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a0f6:	b149      	cbz	r1, a10c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a0f8:	f05f 0100 	movs.w	r1, #0
    a0fc:	f88d 1004 	strb.w	r1, [sp, #4]
    a100:	2105      	movs	r1, #5
    a102:	304c      	adds	r0, #76	; 0x4c
    a104:	f004 faa6 	bl	e654 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a108:	b110      	cbz	r0, a110 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a10a:	e004      	b.n	a116 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a10c:	2101      	movs	r1, #1
    a10e:	e7f5      	b.n	a0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a110:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a114:	b318      	cbz	r0, a15e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a116:	8921      	ldrh	r1, [r4, #8]
    a118:	88e0      	ldrh	r0, [r4, #6]
    a11a:	f005 f8c5 	bl	f2a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a11e:	2800      	cmp	r0, #0
    a120:	d11e      	bne.n	a160 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a122:	88a1      	ldrh	r1, [r4, #4]
    a124:	8860      	ldrh	r0, [r4, #2]
    a126:	f005 f8bf 	bl	f2a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a12a:	2800      	cmp	r0, #0
    a12c:	d118      	bne.n	a160 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a12e:	8921      	ldrh	r1, [r4, #8]
    a130:	88e0      	ldrh	r0, [r4, #6]
    a132:	f005 f8af 	bl	f294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a136:	2800      	cmp	r0, #0
    a138:	d112      	bne.n	a160 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a13a:	88a1      	ldrh	r1, [r4, #4]
    a13c:	8860      	ldrh	r0, [r4, #2]
    a13e:	f005 f8a9 	bl	f294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a142:	0006      	movs	r6, r0
    a144:	d10c      	bne.n	a160 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a146:	9807      	ldr	r0, [sp, #28]
    a148:	f04f 0801 	mov.w	r8, #1
    a14c:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    a150:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    a154:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a158:	b129      	cbz	r1, a166 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a15a:	263a      	movs	r6, #58	; 0x3a
    a15c:	e02f      	b.n	a1be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a15e:	201a      	movs	r0, #26
    a160:	b008      	add	sp, #32
    a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a166:	4639      	mov	r1, r7
    a168:	aa03      	add	r2, sp, #12
    a16a:	f005 f8ab 	bl	f2c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    a16e:	8861      	ldrh	r1, [r4, #2]
    a170:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a174:	4281      	cmp	r1, r0
    a176:	d200      	bcs.n	a17a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a178:	4608      	mov	r0, r1
    a17a:	80e8      	strh	r0, [r5, #6]
    a17c:	88a1      	ldrh	r1, [r4, #4]
    a17e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a182:	4281      	cmp	r1, r0
    a184:	d200      	bcs.n	a188 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a186:	4608      	mov	r0, r1
    a188:	8128      	strh	r0, [r5, #8]
    a18a:	88e2      	ldrh	r2, [r4, #6]
    a18c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a190:	428a      	cmp	r2, r1
    a192:	d200      	bcs.n	a196 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a194:	4611      	mov	r1, r2
    a196:	8069      	strh	r1, [r5, #2]
    a198:	8922      	ldrh	r2, [r4, #8]
    a19a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a19e:	428a      	cmp	r2, r1
    a1a0:	d200      	bcs.n	a1a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a1a2:	4611      	mov	r1, r2
    a1a4:	f640 0248 	movw	r2, #2120	; 0x848
    a1a8:	80a9      	strh	r1, [r5, #4]
    a1aa:	4291      	cmp	r1, r2
    a1ac:	d300      	bcc.n	a1b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a1ae:	4611      	mov	r1, r2
    a1b0:	80a9      	strh	r1, [r5, #4]
    a1b2:	4290      	cmp	r0, r2
    a1b4:	d200      	bcs.n	a1b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a1b6:	4602      	mov	r2, r0
    a1b8:	812a      	strh	r2, [r5, #8]
    a1ba:	f885 8000 	strb.w	r8, [r5]
    a1be:	706f      	strb	r7, [r5, #1]
    a1c0:	4630      	mov	r0, r6
    a1c2:	e7cd      	b.n	a160 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a1c4:	b510      	push	{r4, lr}
    a1c6:	4604      	mov	r4, r0
    a1c8:	88c1      	ldrh	r1, [r0, #6]
    a1ca:	8880      	ldrh	r0, [r0, #4]
    a1cc:	f005 f86c 	bl	f2a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a1d0:	2800      	cmp	r0, #0
    a1d2:	d10f      	bne.n	a1f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a1d4:	8861      	ldrh	r1, [r4, #2]
    a1d6:	8820      	ldrh	r0, [r4, #0]
    a1d8:	f005 f866 	bl	f2a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a1dc:	2800      	cmp	r0, #0
    a1de:	d109      	bne.n	a1f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a1e0:	4805      	ldr	r0, [pc, #20]	; (a1f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a1e2:	88a1      	ldrh	r1, [r4, #4]
    a1e4:	8081      	strh	r1, [r0, #4]
    a1e6:	8821      	ldrh	r1, [r4, #0]
    a1e8:	8001      	strh	r1, [r0, #0]
    a1ea:	88e1      	ldrh	r1, [r4, #6]
    a1ec:	80c1      	strh	r1, [r0, #6]
    a1ee:	8861      	ldrh	r1, [r4, #2]
    a1f0:	8041      	strh	r1, [r0, #2]
    a1f2:	2000      	movs	r0, #0
    a1f4:	bd10      	pop	{r4, pc}
    a1f6:	0000      	.short	0x0000
    a1f8:	20000214 	.word	0x20000214
    a1fc:	0b125b0b 	.word	0x0b125b0b
    a200:	125b0059 	.word	0x125b0059
    a204:	05060708 	.word	0x05060708
    a208:	00020304 	.word	0x00020304
    a20c:	f0f4f8fc 	.word	0xf0f4f8fc
    a210:	0304d8ec 	.word	0x0304d8ec
    a214:	f4f8fc00 	.word	0xf4f8fc00
    a218:	00d8ecf0 	.word	0x00d8ecf0

0000a21c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a21c:	b510      	push	{r4, lr}
    a21e:	f7ff fccf 	bl	9bc0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a222:	4804      	ldr	r0, [pc, #16]	; (a234 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a224:	6840      	ldr	r0, [r0, #4]
    a226:	f005 f99c 	bl	f562 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a22e:	f004 becd 	b.w	efcc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a232:	0000      	.short	0x0000
    a234:	2000021c 	.word	0x2000021c

0000a238 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a238:	b510      	push	{r4, lr}
    a23a:	4c07      	ldr	r4, [pc, #28]	; (a258 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a23c:	68a0      	ldr	r0, [r4, #8]
    a23e:	f005 f990 	bl	f562 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a242:	68e0      	ldr	r0, [r4, #12]
    a244:	f005 f98d 	bl	f562 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a248:	f002 fe3c 	bl	cec4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a24c:	f7fb fa0e 	bl	566c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a254:	f7ff bdb0 	b.w	9db8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a258:	2000021c 	.word	0x2000021c

0000a25c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a25c:	b500      	push	{lr}
    a25e:	4905      	ldr	r1, [pc, #20]	; (a274 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a260:	4805      	ldr	r0, [pc, #20]	; (a278 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a262:	f005 f95f 	bl	f524 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a266:	4804      	ldr	r0, [pc, #16]	; (a278 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a268:	4904      	ldr	r1, [pc, #16]	; (a27c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a26a:	1d00      	adds	r0, r0, #4
    a26c:	f85d eb04 	ldr.w	lr, [sp], #4
    a270:	f005 b958 	b.w	f524 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a274:	2000022c 	.word	0x2000022c
    a278:	20000220 	.word	0x20000220
    a27c:	20000234 	.word	0x20000234

0000a280 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a280:	b500      	push	{lr}
    a282:	4908      	ldr	r1, [pc, #32]	; (a2a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a284:	4808      	ldr	r0, [pc, #32]	; (a2a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a286:	f005 f94d 	bl	f524 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a28a:	4807      	ldr	r0, [pc, #28]	; (a2a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a28c:	4907      	ldr	r1, [pc, #28]	; (a2ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a28e:	1d00      	adds	r0, r0, #4
    a290:	f005 f948 	bl	f524 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a294:	4804      	ldr	r0, [pc, #16]	; (a2a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a296:	4906      	ldr	r1, [pc, #24]	; (a2b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a298:	3008      	adds	r0, #8
    a29a:	f85d eb04 	ldr.w	lr, [sp], #4
    a29e:	f005 b941 	b.w	f524 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a2a2:	0000      	.short	0x0000
    a2a4:	20000258 	.word	0x20000258
    a2a8:	20000220 	.word	0x20000220
    a2ac:	20000260 	.word	0x20000260
    a2b0:	20000250 	.word	0x20000250

0000a2b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a2b4:	4801      	ldr	r0, [pc, #4]	; (a2bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a2b6:	7800      	ldrb	r0, [r0, #0]
    a2b8:	4770      	bx	lr
    a2ba:	0000      	.short	0x0000
    a2bc:	2000021c 	.word	0x2000021c
    a2c0:	b510      	push	{r4, lr}
    a2c2:	f7fc f8e3 	bl	648c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a2c6:	f7fc ff23 	bl	7110 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a2ca:	4805      	ldr	r0, [pc, #20]	; (a2e0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    a2cc:	f7fc f8c4 	bl	6458 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a2d0:	4905      	ldr	r1, [pc, #20]	; (a2e8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    a2d2:	4804      	ldr	r0, [pc, #16]	; (a2e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    a2d4:	6008      	str	r0, [r1, #0]
    a2d6:	4906      	ldr	r1, [pc, #24]	; (a2f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    a2d8:	4804      	ldr	r0, [pc, #16]	; (a2ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    a2da:	6008      	str	r0, [r1, #0]
    a2dc:	bd10      	pop	{r4, pc}
    a2de:	0000      	.short	0x0000
    a2e0:	2000135b 	.word	0x2000135b
    a2e4:	00006261 	.word	0x00006261
    a2e8:	2000023c 	.word	0x2000023c
    a2ec:	00005e05 	.word	0x00005e05
    a2f0:	20000240 	.word	0x20000240
    a2f4:	490c      	ldr	r1, [pc, #48]	; (a328 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    a2f6:	b510      	push	{r4, lr}
    a2f8:	2001      	movs	r0, #1
    a2fa:	7008      	strb	r0, [r1, #0]
    a2fc:	f7fc f8f6 	bl	64ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a300:	f7fd fd5e 	bl	7dc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a304:	f002 fdcc 	bl	cea0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a308:	4808      	ldr	r0, [pc, #32]	; (a32c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    a30a:	f7fa fc3d 	bl	4b88 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a30e:	2000      	movs	r0, #0
    a310:	f7f9 feea 	bl	40e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a314:	4907      	ldr	r1, [pc, #28]	; (a334 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    a316:	4806      	ldr	r0, [pc, #24]	; (a330 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    a318:	6008      	str	r0, [r1, #0]
    a31a:	4908      	ldr	r1, [pc, #32]	; (a33c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    a31c:	4806      	ldr	r0, [pc, #24]	; (a338 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    a31e:	6008      	str	r0, [r1, #0]
    a320:	4908      	ldr	r1, [pc, #32]	; (a344 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    a322:	4807      	ldr	r0, [pc, #28]	; (a340 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    a324:	6008      	str	r0, [r1, #0]
    a326:	bd10      	pop	{r4, pc}
    a328:	2000021c 	.word	0x2000021c
    a32c:	2000135b 	.word	0x2000135b
    a330:	00004b35 	.word	0x00004b35
    a334:	2000024c 	.word	0x2000024c
    a338:	00007b41 	.word	0x00007b41
    a33c:	20000248 	.word	0x20000248
    a340:	00005e79 	.word	0x00005e79
    a344:	20000244 	.word	0x20000244

0000a348 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a348:	2101      	movs	r1, #1
    a34a:	4081      	lsls	r1, r0
    a34c:	4802      	ldr	r0, [pc, #8]	; (a358 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a34e:	6802      	ldr	r2, [r0, #0]
    a350:	4311      	orrs	r1, r2
    a352:	6001      	str	r1, [r0, #0]
    a354:	4770      	bx	lr
    a356:	0000      	.short	0x0000
    a358:	20000268 	.word	0x20000268

0000a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a35c:	4801      	ldr	r0, [pc, #4]	; (a364 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a35e:	6800      	ldr	r0, [r0, #0]
    a360:	4770      	bx	lr
    a362:	0000      	.short	0x0000
    a364:	20000268 	.word	0x20000268

0000a368 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a368:	4803      	ldr	r0, [pc, #12]	; (a378 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a36a:	8800      	ldrh	r0, [r0, #0]
    a36c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a370:	0040      	lsls	r0, r0, #1
    a372:	1c40      	adds	r0, r0, #1
    a374:	4770      	bx	lr
    a376:	0000      	.short	0x0000
    a378:	20000268 	.word	0x20000268

0000a37c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a37c:	b570      	push	{r4, r5, r6, lr}
    a37e:	4605      	mov	r5, r0
    a380:	4616      	mov	r6, r2
    a382:	460c      	mov	r4, r1
    a384:	2002      	movs	r0, #2
    a386:	f000 f999 	bl	a6bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a38a:	4906      	ldr	r1, [pc, #24]	; (a3a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a38c:	2001      	movs	r0, #1
    a38e:	1ef6      	subs	r6, r6, #3
    a390:	7008      	strb	r0, [r1, #0]
    a392:	4805      	ldr	r0, [pc, #20]	; (a3a8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a394:	6006      	str	r6, [r0, #0]
    a396:	4804      	ldr	r0, [pc, #16]	; (a3a8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a398:	3808      	subs	r0, #8
    a39a:	6005      	str	r5, [r0, #0]
    a39c:	1f00      	subs	r0, r0, #4
    a39e:	6004      	str	r4, [r0, #0]
    a3a0:	bd70      	pop	{r4, r5, r6, pc}
    a3a2:	0000      	.short	0x0000
    a3a4:	200002b0 	.word	0x200002b0
    a3a8:	4000f510 	.word	0x4000f510

0000a3ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a3ac:	b510      	push	{r4, lr}
    a3ae:	4c0c      	ldr	r4, [pc, #48]	; (a3e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a3b0:	7820      	ldrb	r0, [r4, #0]
    a3b2:	b180      	cbz	r0, a3d6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a3b4:	490b      	ldr	r1, [pc, #44]	; (a3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a3b6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a3ba:	6008      	str	r0, [r1, #0]
    a3bc:	f000 f86a 	bl	a494 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a3c0:	2100      	movs	r1, #0
    a3c2:	b120      	cbz	r0, a3ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a3c4:	2001      	movs	r0, #1
    a3c6:	7060      	strb	r0, [r4, #1]
    a3c8:	4807      	ldr	r0, [pc, #28]	; (a3e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a3ca:	6800      	ldr	r0, [r0, #0]
    a3cc:	e001      	b.n	a3d2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a3ce:	7061      	strb	r1, [r4, #1]
    a3d0:	2010      	movs	r0, #16
    a3d2:	70a0      	strb	r0, [r4, #2]
    a3d4:	7021      	strb	r1, [r4, #0]
    a3d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3da:	2000      	movs	r0, #0
    a3dc:	f000 b96e 	b.w	a6bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3e0:	200002b0 	.word	0x200002b0
    a3e4:	4001f508 	.word	0x4001f508
    a3e8:	4000f400 	.word	0x4000f400

0000a3ec <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a3ec:	b510      	push	{r4, lr}
    a3ee:	2002      	movs	r0, #2
    a3f0:	f000 f964 	bl	a6bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3f4:	4904      	ldr	r1, [pc, #16]	; (a408 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a3f6:	2001      	movs	r0, #1
    a3f8:	7008      	strb	r0, [r1, #0]
    a3fa:	f000 f859 	bl	a4b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a3fe:	4903      	ldr	r1, [pc, #12]	; (a40c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a400:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a404:	6008      	str	r0, [r1, #0]
    a406:	bd10      	pop	{r4, pc}
    a408:	200002b0 	.word	0x200002b0
    a40c:	4001f504 	.word	0x4001f504

0000a410 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a410:	4803      	ldr	r0, [pc, #12]	; (a420 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a412:	2100      	movs	r1, #0
    a414:	7001      	strb	r1, [r0, #0]
    a416:	7041      	strb	r1, [r0, #1]
    a418:	2110      	movs	r1, #16
    a41a:	7081      	strb	r1, [r0, #2]
    a41c:	4770      	bx	lr
    a41e:	0000      	.short	0x0000
    a420:	200002b0 	.word	0x200002b0

0000a424 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a424:	4807      	ldr	r0, [pc, #28]	; (a444 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a426:	b510      	push	{r4, lr}
    a428:	7801      	ldrb	r1, [r0, #0]
    a42a:	b141      	cbz	r1, a43e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a42c:	f000 f832 	bl	a494 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a430:	b118      	cbz	r0, a43a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a432:	4805      	ldr	r0, [pc, #20]	; (a448 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a434:	6800      	ldr	r0, [r0, #0]
    a436:	b2c0      	uxtb	r0, r0
    a438:	bd10      	pop	{r4, pc}
    a43a:	2010      	movs	r0, #16
    a43c:	bd10      	pop	{r4, pc}
    a43e:	7880      	ldrb	r0, [r0, #2]
    a440:	bd10      	pop	{r4, pc}
    a442:	0000      	.short	0x0000
    a444:	200002b0 	.word	0x200002b0
    a448:	4000f400 	.word	0x4000f400

0000a44c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a44c:	4808      	ldr	r0, [pc, #32]	; (a470 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a44e:	b510      	push	{r4, lr}
    a450:	7801      	ldrb	r1, [r0, #0]
    a452:	b159      	cbz	r1, a46c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a454:	4807      	ldr	r0, [pc, #28]	; (a474 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a456:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a45a:	b128      	cbz	r0, a468 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a45c:	f000 f80c 	bl	a478 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a460:	2800      	cmp	r0, #0
    a462:	d000      	beq.n	a466 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a464:	2001      	movs	r0, #1
    a466:	bd10      	pop	{r4, pc}
    a468:	2002      	movs	r0, #2
    a46a:	bd10      	pop	{r4, pc}
    a46c:	7840      	ldrb	r0, [r0, #1]
    a46e:	bd10      	pop	{r4, pc}
    a470:	200002b0 	.word	0x200002b0
    a474:	4000f000 	.word	0x4000f000
    a478:	4805      	ldr	r0, [pc, #20]	; (a490 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a47a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a47e:	b111      	cbz	r1, a486 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a480:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a484:	b108      	cbz	r0, a48a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a486:	2000      	movs	r0, #0
    a488:	4770      	bx	lr
    a48a:	2001      	movs	r0, #1
    a48c:	4770      	bx	lr
    a48e:	0000      	.short	0x0000
    a490:	4000f000 	.word	0x4000f000
    a494:	4805      	ldr	r0, [pc, #20]	; (a4ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a496:	b510      	push	{r4, lr}
    a498:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a49c:	b120      	cbz	r0, a4a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a49e:	f7ff ffeb 	bl	a478 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a4a2:	b108      	cbz	r0, a4a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a4a4:	2001      	movs	r0, #1
    a4a6:	bd10      	pop	{r4, pc}
    a4a8:	2000      	movs	r0, #0
    a4aa:	bd10      	pop	{r4, pc}
    a4ac:	4000f000 	.word	0x4000f000
    a4b0:	4804      	ldr	r0, [pc, #16]	; (a4c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a4b2:	2100      	movs	r1, #0
    a4b4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a4b8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a4bc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a4c0:	4770      	bx	lr
    a4c2:	0000      	.short	0x0000
    a4c4:	4000f000 	.word	0x4000f000

0000a4c8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a4c8:	4a08      	ldr	r2, [pc, #32]	; (a4ec <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a4ca:	b510      	push	{r4, lr}
    a4cc:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a4d0:	4907      	ldr	r1, [pc, #28]	; (a4f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a4d2:	4610      	mov	r0, r2
    a4d4:	f7f9 fb04 	bl	3ae0 <mpsl_fem_lna_configuration_set>
    a4d8:	2800      	cmp	r0, #0
    a4da:	d005      	beq.n	a4e8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a4dc:	1c40      	adds	r0, r0, #1
    a4de:	d003      	beq.n	a4e8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a4e0:	217d      	movs	r1, #125	; 0x7d
    a4e2:	2040      	movs	r0, #64	; 0x40
    a4e4:	f7f9 fc16 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4e8:	bd10      	pop	{r4, pc}
    a4ea:	0000      	.short	0x0000
    a4ec:	2000026c 	.word	0x2000026c
    a4f0:	0000a520 	.word	0x0000a520

0000a4f4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a4f4:	4a08      	ldr	r2, [pc, #32]	; (a518 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a4f6:	b510      	push	{r4, lr}
    a4f8:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a4fc:	4907      	ldr	r1, [pc, #28]	; (a51c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a4fe:	4610      	mov	r0, r2
    a500:	f7f9 fafa 	bl	3af8 <mpsl_fem_pa_configuration_set>
    a504:	2800      	cmp	r0, #0
    a506:	d005      	beq.n	a514 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a508:	1c40      	adds	r0, r0, #1
    a50a:	d003      	beq.n	a514 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a50c:	2172      	movs	r1, #114	; 0x72
    a50e:	2040      	movs	r0, #64	; 0x40
    a510:	f7f9 fc00 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a514:	bd10      	pop	{r4, pc}
    a516:	0000      	.short	0x0000
    a518:	2000026c 	.word	0x2000026c
    a51c:	0000a520 	.word	0x0000a520
    a520:	00000001 	.word	0x00000001
    a524:	40001110 	.word	0x40001110
	...

0000a538 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    a538:	b570      	push	{r4, r5, r6, lr}
    a53a:	4606      	mov	r6, r0
    a53c:	4614      	mov	r4, r2
    a53e:	460d      	mov	r5, r1
    a540:	2001      	movs	r0, #1
    a542:	f000 f8bb 	bl	a6bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a546:	4803      	ldr	r0, [pc, #12]	; (a554 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    a548:	6006      	str	r6, [r0, #0]
    a54a:	1d00      	adds	r0, r0, #4
    a54c:	6004      	str	r4, [r0, #0]
    a54e:	1d00      	adds	r0, r0, #4
    a550:	6005      	str	r5, [r0, #0]
    a552:	bd70      	pop	{r4, r5, r6, pc}
    a554:	4000f508 	.word	0x4000f508

0000a558 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a558:	480a      	ldr	r0, [pc, #40]	; (a584 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    a55a:	7801      	ldrb	r1, [r0, #0]
    a55c:	b171      	cbz	r1, a57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    a55e:	4a0a      	ldr	r2, [pc, #40]	; (a588 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a560:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    a564:	6011      	str	r1, [r2, #0]
    a566:	4909      	ldr	r1, [pc, #36]	; (a58c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a568:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    a56c:	2100      	movs	r1, #0
    a56e:	b11a      	cbz	r2, a578 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a570:	4a07      	ldr	r2, [pc, #28]	; (a590 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a572:	6812      	ldr	r2, [r2, #0]
    a574:	7042      	strb	r2, [r0, #1]
    a576:	e000      	b.n	a57a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a578:	7041      	strb	r1, [r0, #1]
    a57a:	7001      	strb	r1, [r0, #0]
    a57c:	2000      	movs	r0, #0
    a57e:	f000 b89d 	b.w	a6bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a582:	0000      	.short	0x0000
    a584:	200002b3 	.word	0x200002b3
    a588:	4001f508 	.word	0x4001f508
    a58c:	4000f000 	.word	0x4000f000
    a590:	4000f400 	.word	0x4000f400

0000a594 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    a594:	b570      	push	{r4, r5, r6, lr}
    a596:	4604      	mov	r4, r0
    a598:	4816      	ldr	r0, [pc, #88]	; (a5f4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    a59a:	460e      	mov	r6, r1
    a59c:	2501      	movs	r5, #1
    a59e:	7005      	strb	r5, [r0, #0]
    a5a0:	4915      	ldr	r1, [pc, #84]	; (a5f8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a5a2:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    a5a6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a5aa:	6008      	str	r0, [r1, #0]
    a5ac:	f001 fb96 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a5b0:	b930      	cbnz	r0, a5c0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    a5b2:	4811      	ldr	r0, [pc, #68]	; (a5f8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a5b4:	3014      	adds	r0, #20
    a5b6:	6801      	ldr	r1, [r0, #0]
    a5b8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a5bc:	4331      	orrs	r1, r6
    a5be:	6001      	str	r1, [r0, #0]
    a5c0:	490e      	ldr	r1, [pc, #56]	; (a5fc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    a5c2:	2200      	movs	r2, #0
    a5c4:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    a5c8:	4b0d      	ldr	r3, [pc, #52]	; (a600 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a5ca:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a5ce:	6018      	str	r0, [r3, #0]
    a5d0:	b12c      	cbz	r4, a5de <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    a5d2:	2c01      	cmp	r4, #1
    a5d4:	d007      	beq.n	a5e6 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    a5d6:	2185      	movs	r1, #133	; 0x85
    a5d8:	203c      	movs	r0, #60	; 0x3c
    a5da:	f7f9 fb9b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5de:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    a5e2:	600d      	str	r5, [r1, #0]
    a5e4:	bd70      	pop	{r4, r5, r6, pc}
    a5e6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    a5ea:	600d      	str	r5, [r1, #0]
    a5ec:	4904      	ldr	r1, [pc, #16]	; (a600 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a5ee:	1f09      	subs	r1, r1, #4
    a5f0:	6008      	str	r0, [r1, #0]
    a5f2:	bd70      	pop	{r4, r5, r6, pc}
    a5f4:	200002b3 	.word	0x200002b3
    a5f8:	4000f504 	.word	0x4000f504
    a5fc:	4000f000 	.word	0x4000f000
    a600:	4001f508 	.word	0x4001f508

0000a604 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a604:	4802      	ldr	r0, [pc, #8]	; (a610 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a606:	2100      	movs	r1, #0
    a608:	7001      	strb	r1, [r0, #0]
    a60a:	7041      	strb	r1, [r0, #1]
    a60c:	4770      	bx	lr
    a60e:	0000      	.short	0x0000
    a610:	200002b3 	.word	0x200002b3

0000a614 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a614:	4806      	ldr	r0, [pc, #24]	; (a630 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a616:	7801      	ldrb	r1, [r0, #0]
    a618:	b141      	cbz	r1, a62c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a61a:	4806      	ldr	r0, [pc, #24]	; (a634 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a61c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a620:	2800      	cmp	r0, #0
    a622:	d002      	beq.n	a62a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a624:	4804      	ldr	r0, [pc, #16]	; (a638 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a626:	6800      	ldr	r0, [r0, #0]
    a628:	b2c0      	uxtb	r0, r0
    a62a:	4770      	bx	lr
    a62c:	7840      	ldrb	r0, [r0, #1]
    a62e:	4770      	bx	lr
    a630:	200002b3 	.word	0x200002b3
    a634:	4000f000 	.word	0x4000f000
    a638:	4000f400 	.word	0x4000f400

0000a63c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a63c:	4901      	ldr	r1, [pc, #4]	; (a644 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a63e:	2001      	movs	r0, #1
    a640:	6088      	str	r0, [r1, #8]
    a642:	4770      	bx	lr
    a644:	4000f000 	.word	0x4000f000

0000a648 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a64c:	2800      	cmp	r0, #0
    a64e:	d02c      	beq.n	a6aa <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a650:	4817      	ldr	r0, [pc, #92]	; (a6b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    a652:	7800      	ldrb	r0, [r0, #0]
    a654:	b1b0      	cbz	r0, a684 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a656:	4d17      	ldr	r5, [pc, #92]	; (a6b4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a658:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a65c:	2800      	cmp	r0, #0
    a65e:	d124      	bne.n	a6aa <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a660:	2702      	movs	r7, #2
    a662:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a666:	4c14      	ldr	r4, [pc, #80]	; (a6b8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a668:	6820      	ldr	r0, [r4, #0]
    a66a:	43c0      	mvns	r0, r0
    a66c:	f340 1600 	sbfx	r6, r0, #4, #1
    a670:	6820      	ldr	r0, [r4, #0]
    a672:	f040 0010 	orr.w	r0, r0, #16
    a676:	6020      	str	r0, [r4, #0]
    a678:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a67c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a680:	1c76      	adds	r6, r6, #1
    a682:	e007      	b.n	a694 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    a684:	21fd      	movs	r1, #253	; 0xfd
    a686:	203c      	movs	r0, #60	; 0x3c
    a688:	f7f9 fb44 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a68c:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a690:	f7f9 f9d0 	bl	3a34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a694:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a698:	2800      	cmp	r0, #0
    a69a:	d0f7      	beq.n	a68c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    a69c:	b91e      	cbnz	r6, a6a6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    a69e:	6820      	ldr	r0, [r4, #0]
    a6a0:	f020 0010 	bic.w	r0, r0, #16
    a6a4:	6020      	str	r0, [r4, #0]
    a6a6:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a6ae:	0000      	.short	0x0000
    a6b0:	200002b3 	.word	0x200002b3
    a6b4:	4000f000 	.word	0x4000f000
    a6b8:	e000ed10 	.word	0xe000ed10

0000a6bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a6bc:	b510      	push	{r4, lr}
    a6be:	4604      	mov	r4, r0
    a6c0:	f000 f822 	bl	a708 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a6c4:	2c00      	cmp	r4, #0
    a6c6:	d017      	beq.n	a6f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a6c8:	4a0c      	ldr	r2, [pc, #48]	; (a6fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a6ca:	480c      	ldr	r0, [pc, #48]	; (a6fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a6cc:	490c      	ldr	r1, [pc, #48]	; (a700 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a6ce:	3214      	adds	r2, #20
    a6d0:	4b0c      	ldr	r3, [pc, #48]	; (a704 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a6d2:	2c01      	cmp	r4, #1
    a6d4:	d005      	beq.n	a6e2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a6d6:	2c02      	cmp	r4, #2
    a6d8:	d008      	beq.n	a6ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a6da:	217d      	movs	r1, #125	; 0x7d
    a6dc:	203d      	movs	r0, #61	; 0x3d
    a6de:	f7f9 fb19 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6e2:	2402      	movs	r4, #2
    a6e4:	6004      	str	r4, [r0, #0]
    a6e6:	6011      	str	r1, [r2, #0]
    a6e8:	0620      	lsls	r0, r4, #24
    a6ea:	e004      	b.n	a6f6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a6ec:	2403      	movs	r4, #3
    a6ee:	6004      	str	r4, [r0, #0]
    a6f0:	6011      	str	r1, [r2, #0]
    a6f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a6f6:	6018      	str	r0, [r3, #0]
    a6f8:	bd10      	pop	{r4, pc}
    a6fa:	0000      	.short	0x0000
    a6fc:	4000f500 	.word	0x4000f500
    a700:	2000145d 	.word	0x2000145d
    a704:	4001f504 	.word	0x4001f504
    a708:	4804      	ldr	r0, [pc, #16]	; (a71c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a70a:	2100      	movs	r1, #0
    a70c:	6001      	str	r1, [r0, #0]
    a70e:	6001      	str	r1, [r0, #0]
    a710:	4903      	ldr	r1, [pc, #12]	; (a720 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a712:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a716:	6008      	str	r0, [r1, #0]
    a718:	4770      	bx	lr
    a71a:	0000      	.short	0x0000
    a71c:	4000f500 	.word	0x4000f500
    a720:	4001f508 	.word	0x4001f508

0000a724 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a724:	4805      	ldr	r0, [pc, #20]	; (a73c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a726:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a72a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a72e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a732:	4903      	ldr	r1, [pc, #12]	; (a740 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    a734:	2000      	movs	r0, #0
    a736:	6008      	str	r0, [r1, #0]
    a738:	4770      	bx	lr
    a73a:	0000      	.short	0x0000
    a73c:	40001000 	.word	0x40001000
    a740:	40001560 	.word	0x40001560

0000a744 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a744:	4904      	ldr	r1, [pc, #16]	; (a758 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a746:	6008      	str	r0, [r1, #0]
    a748:	4804      	ldr	r0, [pc, #16]	; (a75c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    a74a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a74e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a752:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a756:	4770      	bx	lr
    a758:	40001560 	.word	0x40001560
    a75c:	40001000 	.word	0x40001000

0000a760 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a760:	4801      	ldr	r0, [pc, #4]	; (a768 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a762:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a766:	4770      	bx	lr
    a768:	20000fcc 	.word	0x20000fcc

0000a76c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    a76c:	4a01      	ldr	r2, [pc, #4]	; (a774 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    a76e:	7051      	strb	r1, [r2, #1]
    a770:	7010      	strb	r0, [r2, #0]
    a772:	4770      	bx	lr
    a774:	20000fcc 	.word	0x20000fcc

0000a778 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a77a:	4c1e      	ldr	r4, [pc, #120]	; (a7f4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    a77c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a780:	2710      	movs	r7, #16
    a782:	f3c0 1600 	ubfx	r6, r0, #4, #1
    a786:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    a78a:	2002      	movs	r0, #2
    a78c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a790:	4819      	ldr	r0, [pc, #100]	; (a7f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    a792:	2500      	movs	r5, #0
    a794:	491a      	ldr	r1, [pc, #104]	; (a800 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    a796:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    a79a:	4818      	ldr	r0, [pc, #96]	; (a7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    a79c:	6008      	str	r0, [r1, #0]
    a79e:	4819      	ldr	r0, [pc, #100]	; (a804 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    a7a0:	6800      	ldr	r0, [r0, #0]
    a7a2:	b1b0      	cbz	r0, a7d2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    a7a4:	20ff      	movs	r0, #255	; 0xff
    a7a6:	f88d 0000 	strb.w	r0, [sp]
    a7aa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a7ae:	2001      	movs	r0, #1
    a7b0:	6120      	str	r0, [r4, #16]
    a7b2:	e004      	b.n	a7be <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    a7b4:	f89d 0000 	ldrb.w	r0, [sp]
    a7b8:	1e40      	subs	r0, r0, #1
    a7ba:	f88d 0000 	strb.w	r0, [sp]
    a7be:	f89d 0000 	ldrb.w	r0, [sp]
    a7c2:	b118      	cbz	r0, a7cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    a7c4:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    a7c8:	2800      	cmp	r0, #0
    a7ca:	d0f3      	beq.n	a7b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    a7cc:	f89d 0000 	ldrb.w	r0, [sp]
    a7d0:	b150      	cbz	r0, a7e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    a7d2:	f000 fd07 	bl	b1e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    a7d6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a7da:	f000 fe9f 	bl	b51c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    a7de:	2e00      	cmp	r6, #0
    a7e0:	d001      	beq.n	a7e6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a7e2:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7e8:	f240 71c3 	movw	r1, #1987	; 0x7c3
    a7ec:	203e      	movs	r0, #62	; 0x3e
    a7ee:	f7f9 fa91 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7f2:	0000      	.short	0x0000
    a7f4:	40001000 	.word	0x40001000
    a7f8:	20000fcc 	.word	0x20000fcc
    a7fc:	0c0e0000 	.word	0x0c0e0000
    a800:	4001f508 	.word	0x4001f508
    a804:	40001550 	.word	0x40001550

0000a808 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a80c:	4c1f      	ldr	r4, [pc, #124]	; (a88c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    a80e:	4607      	mov	r7, r0
    a810:	4688      	mov	r8, r1
    a812:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a816:	07c1      	lsls	r1, r0, #31
    a818:	d018      	beq.n	a84c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a81a:	4a1d      	ldr	r2, [pc, #116]	; (a890 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a81c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a820:	6011      	str	r1, [r2, #0]
    a822:	4d1c      	ldr	r5, [pc, #112]	; (a894 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a824:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    a828:	f041 0101 	orr.w	r1, r1, #1
    a82c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    a830:	f040 0002 	orr.w	r0, r0, #2
    a834:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a838:	4640      	mov	r0, r8
    a83a:	f000 fed5 	bl	b5e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a83e:	f000 fc7f 	bl	b140 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a842:	2601      	movs	r6, #1
    a844:	b13f      	cbz	r7, a856 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a846:	2f01      	cmp	r7, #1
    a848:	d00e      	beq.n	a868 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a84a:	e016      	b.n	a87a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a84c:	f240 6155 	movw	r1, #1621	; 0x655
    a850:	203e      	movs	r0, #62	; 0x3e
    a852:	f7f9 fa5f 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a856:	4640      	mov	r0, r8
    a858:	f000 fc92 	bl	b180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a85c:	4640      	mov	r0, r8
    a85e:	f000 fc53 	bl	b108 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a862:	72e6      	strb	r6, [r4, #11]
    a864:	602e      	str	r6, [r5, #0]
    a866:	e008      	b.n	a87a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a868:	f000 fcb2 	bl	b1d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a86c:	f000 fe20 	bl	b4b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a870:	2002      	movs	r0, #2
    a872:	72e0      	strb	r0, [r4, #11]
    a874:	f000 fd28 	bl	b2c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a878:	606e      	str	r6, [r5, #4]
    a87a:	4807      	ldr	r0, [pc, #28]	; (a898 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a87c:	64c6      	str	r6, [r0, #76]	; 0x4c
    a87e:	4807      	ldr	r0, [pc, #28]	; (a89c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a880:	6801      	ldr	r1, [r0, #0]
    a882:	4638      	mov	r0, r7
    a884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a888:	f004 bf30 	b.w	f6ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a88c:	20000fcc 	.word	0x20000fcc
    a890:	4001f504 	.word	0x4001f504
    a894:	40001000 	.word	0x40001000
    a898:	40008000 	.word	0x40008000
    a89c:	4000854c 	.word	0x4000854c

0000a8a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8a4:	4d35      	ldr	r5, [pc, #212]	; (a97c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a8a6:	4606      	mov	r6, r0
    a8a8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a8ac:	4689      	mov	r9, r1
    a8ae:	6028      	str	r0, [r5, #0]
    a8b0:	4c33      	ldr	r4, [pc, #204]	; (a980 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a8b2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a8b6:	f040 0002 	orr.w	r0, r0, #2
    a8ba:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a8be:	4608      	mov	r0, r1
    a8c0:	f000 fe92 	bl	b5e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a8c4:	f000 fc3c 	bl	b140 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a8c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a984 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a8cc:	2700      	movs	r7, #0
    a8ce:	b116      	cbz	r6, a8d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a8d0:	2e01      	cmp	r6, #1
    a8d2:	d027      	beq.n	a924 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a8d4:	e03f      	b.n	a956 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a8d6:	4648      	mov	r0, r9
    a8d8:	f000 fc52 	bl	b180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a8dc:	7a60      	ldrb	r0, [r4, #9]
    a8de:	2801      	cmp	r0, #1
    a8e0:	d105      	bne.n	a8ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a8e2:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a8e6:	f041 0108 	orr.w	r1, r1, #8
    a8ea:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a8ee:	4648      	mov	r0, r9
    a8f0:	f000 fc0a 	bl	b108 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a8f4:	2001      	movs	r0, #1
    a8f6:	72e0      	strb	r0, [r4, #11]
    a8f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a8fa:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a8fe:	6320      	str	r0, [r4, #48]	; 0x30
    a900:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a904:	6028      	str	r0, [r5, #0]
    a906:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a90a:	f1b9 0f02 	cmp.w	r9, #2
    a90e:	d007      	beq.n	a920 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a910:	f640 0034 	movw	r0, #2100	; 0x834
    a914:	f649 72ec 	movw	r2, #40940	; 0x9fec
    a918:	4410      	add	r0, r2
    a91a:	fbb0 f7f1 	udiv	r7, r0, r1
    a91e:	e01a      	b.n	a956 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a920:	4608      	mov	r0, r1
    a922:	e7f7      	b.n	a914 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    a924:	f000 fc54 	bl	b1d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a928:	f000 fdc2 	bl	b4b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a92c:	7a60      	ldrb	r0, [r4, #9]
    a92e:	2801      	cmp	r0, #1
    a930:	d105      	bne.n	a93e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    a932:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a936:	f041 0104 	orr.w	r1, r1, #4
    a93a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a93e:	2002      	movs	r0, #2
    a940:	72e0      	strb	r0, [r4, #11]
    a942:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a944:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    a948:	6320      	str	r0, [r4, #48]	; 0x30
    a94a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    a94e:	6028      	str	r0, [r5, #0]
    a950:	2729      	movs	r7, #41	; 0x29
    a952:	f000 fcb9 	bl	b2c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a956:	f000 fca3 	bl	b2a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    a95a:	f001 f88b 	bl	ba74 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    a95e:	6800      	ldr	r0, [r0, #0]
    a960:	2801      	cmp	r0, #1
    a962:	d006      	beq.n	a972 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    a964:	2100      	movs	r1, #0
    a966:	4630      	mov	r0, r6
    a968:	f004 fec0 	bl	f6ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a96c:	4638      	mov	r0, r7
    a96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a972:	f7ff ff01 	bl	a778 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a976:	2000      	movs	r0, #0
    a978:	e7f9      	b.n	a96e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    a97a:	0000      	.short	0x0000
    a97c:	4001f504 	.word	0x4001f504
    a980:	20000fcc 	.word	0x20000fcc
    a984:	40001000 	.word	0x40001000

0000a988 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    a988:	4a02      	ldr	r2, [pc, #8]	; (a994 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    a98a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a98c:	6003      	str	r3, [r0, #0]
    a98e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    a990:	6008      	str	r0, [r1, #0]
    a992:	4770      	bx	lr
    a994:	20000fcc 	.word	0x20000fcc

0000a998 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    a998:	b510      	push	{r4, lr}
    a99a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    a99c:	4901      	ldr	r1, [pc, #4]	; (a9a4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    a99e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    a9a2:	bd10      	pop	{r4, pc}
    a9a4:	20000fbc 	.word	0x20000fbc

0000a9a8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    a9a8:	490e      	ldr	r1, [pc, #56]	; (a9e4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    a9aa:	b510      	push	{r4, lr}
    a9ac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    a9ae:	4282      	cmp	r2, r0
    a9b0:	d302      	bcc.n	a9b8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    a9b2:	f640 0143 	movw	r1, #2115	; 0x843
    a9b6:	e00a      	b.n	a9ce <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    a9b8:	2201      	movs	r2, #1
    a9ba:	740a      	strb	r2, [r1, #16]
    a9bc:	6148      	str	r0, [r1, #20]
    a9be:	490a      	ldr	r1, [pc, #40]	; (a9e8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    a9c0:	644a      	str	r2, [r1, #68]	; 0x44
    a9c2:	4a0a      	ldr	r2, [pc, #40]	; (a9ec <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    a9c4:	6813      	ldr	r3, [r2, #0]
    a9c6:	4283      	cmp	r3, r0
    a9c8:	d304      	bcc.n	a9d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    a9ca:	f640 014c 	movw	r1, #2124	; 0x84c
    a9ce:	203e      	movs	r0, #62	; 0x3e
    a9d0:	f7f9 f9a0 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9d4:	2300      	movs	r3, #0
    a9d6:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    a9da:	6010      	str	r0, [r2, #0]
    a9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a9e0:	f000 bd74 	b.w	b4cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    a9e4:	20000fcc 	.word	0x20000fcc
    a9e8:	40008000 	.word	0x40008000
    a9ec:	40008544 	.word	0x40008544

0000a9f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    a9f0:	b570      	push	{r4, r5, r6, lr}
    a9f2:	4c10      	ldr	r4, [pc, #64]	; (aa34 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    a9f4:	4606      	mov	r6, r0
    a9f6:	2002      	movs	r0, #2
    a9f8:	7420      	strb	r0, [r4, #16]
    a9fa:	2596      	movs	r5, #150	; 0x96
    a9fc:	f000 f86c 	bl	aad8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    aa00:	4602      	mov	r2, r0
    aa02:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    aa06:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    aa0a:	2801      	cmp	r0, #1
    aa0c:	d00d      	beq.n	aa2a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    aa0e:	4628      	mov	r0, r5
    aa10:	f004 fe84 	bl	f71c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    aa14:	4908      	ldr	r1, [pc, #32]	; (aa38 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    aa16:	6160      	str	r0, [r4, #20]
    aa18:	2000      	movs	r0, #0
    aa1a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    aa1e:	6961      	ldr	r1, [r4, #20]
    aa20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aa22:	4408      	add	r0, r1
    aa24:	4905      	ldr	r1, [pc, #20]	; (aa3c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    aa26:	6008      	str	r0, [r1, #0]
    aa28:	bd70      	pop	{r4, r5, r6, pc}
    aa2a:	4633      	mov	r3, r6
    aa2c:	4628      	mov	r0, r5
    aa2e:	f004 fe91 	bl	f754 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    aa32:	e7ef      	b.n	aa14 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    aa34:	20000fcc 	.word	0x20000fcc
    aa38:	40008000 	.word	0x40008000
    aa3c:	40008544 	.word	0x40008544

0000aa40 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    aa40:	b510      	push	{r4, lr}
    aa42:	f001 f967 	bl	bd14 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    aa46:	2800      	cmp	r0, #0
    aa48:	d006      	beq.n	aa58 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    aa4a:	4804      	ldr	r0, [pc, #16]	; (aa5c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    aa4c:	6801      	ldr	r1, [r0, #0]
    aa4e:	f021 0101 	bic.w	r1, r1, #1
    aa52:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    aa56:	6001      	str	r1, [r0, #0]
    aa58:	bd10      	pop	{r4, pc}
    aa5a:	0000      	.short	0x0000
    aa5c:	40001774 	.word	0x40001774

0000aa60 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa64:	2240      	movs	r2, #64	; 0x40
    aa66:	2100      	movs	r1, #0
    aa68:	4813      	ldr	r0, [pc, #76]	; (aab8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    aa6a:	f001 fa03 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aa6e:	f000 fd55 	bl	b51c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    aa72:	f001 f908 	bl	bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    aa76:	4d11      	ldr	r5, [pc, #68]	; (aabc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aa78:	4e10      	ldr	r6, [pc, #64]	; (aabc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aa7a:	2400      	movs	r4, #0
    aa7c:	4f0f      	ldr	r7, [pc, #60]	; (aabc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aa7e:	3508      	adds	r5, #8
    aa80:	3610      	adds	r6, #16
    aa82:	b928      	cbnz	r0, aa90 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aa84:	f001 f916 	bl	bcb4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    aa88:	b910      	cbnz	r0, aa90 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aa8a:	f001 f91d 	bl	bcc8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    aa8e:	b108      	cbz	r0, aa94 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    aa90:	2224      	movs	r2, #36	; 0x24
    aa92:	e006      	b.n	aaa2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aa94:	f001 f958 	bl	bd48 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    aa98:	b910      	cbnz	r0, aaa0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    aa9a:	f001 f94b 	bl	bd34 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    aa9e:	b140      	cbz	r0, aab2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    aaa0:	2240      	movs	r2, #64	; 0x40
    aaa2:	21ff      	movs	r1, #255	; 0xff
    aaa4:	4638      	mov	r0, r7
    aaa6:	f001 f9e5 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aaaa:	602c      	str	r4, [r5, #0]
    aaac:	6034      	str	r4, [r6, #0]
    aaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aab2:	2238      	movs	r2, #56	; 0x38
    aab4:	e7f5      	b.n	aaa2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aab6:	0000      	.short	0x0000
    aab8:	20000fcc 	.word	0x20000fcc
    aabc:	40000e00 	.word	0x40000e00

0000aac0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    aac0:	4901      	ldr	r1, [pc, #4]	; (aac8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    aac2:	7008      	strb	r0, [r1, #0]
    aac4:	4770      	bx	lr
    aac6:	0000      	.short	0x0000
    aac8:	20000284 	.word	0x20000284

0000aacc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    aacc:	4801      	ldr	r0, [pc, #4]	; (aad4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    aace:	6a40      	ldr	r0, [r0, #36]	; 0x24
    aad0:	4770      	bx	lr
    aad2:	0000      	.short	0x0000
    aad4:	20000fcc 	.word	0x20000fcc

0000aad8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    aad8:	4814      	ldr	r0, [pc, #80]	; (ab2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    aada:	b510      	push	{r4, lr}
    aadc:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    aae0:	7ac0      	ldrb	r0, [r0, #11]
    aae2:	b141      	cbz	r1, aaf6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    aae4:	2902      	cmp	r1, #2
    aae6:	d00b      	beq.n	ab00 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    aae8:	2802      	cmp	r0, #2
    aaea:	d009      	beq.n	ab00 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    aaec:	2901      	cmp	r1, #1
    aaee:	d00b      	beq.n	ab08 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    aaf0:	2801      	cmp	r0, #1
    aaf2:	d009      	beq.n	ab08 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    aaf4:	e015      	b.n	ab22 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    aaf6:	2800      	cmp	r0, #0
    aaf8:	d1f6      	bne.n	aae8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    aafa:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    aafe:	e00d      	b.n	ab1c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    ab00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab04:	f000 bc6e 	b.w	b3e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32c>
    ab08:	4809      	ldr	r0, [pc, #36]	; (ab30 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    ab0a:	6800      	ldr	r0, [r0, #0]
    ab0c:	f000 000f 	and.w	r0, r0, #15
    ab10:	2803      	cmp	r0, #3
    ab12:	d006      	beq.n	ab22 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    ab14:	2804      	cmp	r0, #4
    ab16:	d006      	beq.n	ab26 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    ab18:	f240 210b 	movw	r1, #523	; 0x20b
    ab1c:	203e      	movs	r0, #62	; 0x3e
    ab1e:	f7f9 f8f9 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab22:	2001      	movs	r0, #1
    ab24:	bd10      	pop	{r4, pc}
    ab26:	2002      	movs	r0, #2
    ab28:	bd10      	pop	{r4, pc}
    ab2a:	0000      	.short	0x0000
    ab2c:	20000fcc 	.word	0x20000fcc
    ab30:	40001510 	.word	0x40001510

0000ab34 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ab34:	4801      	ldr	r0, [pc, #4]	; (ab3c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ab36:	6a00      	ldr	r0, [r0, #32]
    ab38:	4770      	bx	lr
    ab3a:	0000      	.short	0x0000
    ab3c:	20000fcc 	.word	0x20000fcc

0000ab40 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    ab40:	4801      	ldr	r0, [pc, #4]	; (ab48 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    ab42:	7f40      	ldrb	r0, [r0, #29]
    ab44:	4770      	bx	lr
    ab46:	0000      	.short	0x0000
    ab48:	20000fcc 	.word	0x20000fcc

0000ab4c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ab4c:	b510      	push	{r4, lr}
    ab4e:	f000 fccb 	bl	b4e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    ab52:	f7ff fe11 	bl	a778 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ab56:	f004 fd5f 	bl	f618 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    ab5a:	480f      	ldr	r0, [pc, #60]	; (ab98 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    ab5c:	4a0f      	ldr	r2, [pc, #60]	; (ab9c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    ab5e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ab60:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ab64:	6011      	str	r1, [r2, #0]
    ab66:	2400      	movs	r4, #0
    ab68:	6304      	str	r4, [r0, #48]	; 0x30
    ab6a:	7404      	strb	r4, [r0, #16]
    ab6c:	6244      	str	r4, [r0, #36]	; 0x24
    ab6e:	6204      	str	r4, [r0, #32]
    ab70:	f000 fcba 	bl	b4e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    ab74:	480a      	ldr	r0, [pc, #40]	; (aba0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    ab76:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ab7a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    ab7e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    ab82:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    ab86:	2001      	movs	r0, #1
    ab88:	f004 fd7f 	bl	f68a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ab8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab90:	2001      	movs	r0, #1
    ab92:	f004 bd6d 	b.w	f670 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ab96:	0000      	.short	0x0000
    ab98:	20000fcc 	.word	0x20000fcc
    ab9c:	4001f508 	.word	0x4001f508
    aba0:	40008000 	.word	0x40008000

0000aba4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	2001      	movs	r0, #1
    aba8:	f004 fd6f 	bl	f68a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    abac:	4837      	ldr	r0, [pc, #220]	; (ac8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    abae:	2400      	movs	r4, #0
    abb0:	6004      	str	r4, [r0, #0]
    abb2:	2601      	movs	r6, #1
    abb4:	6006      	str	r6, [r0, #0]
    abb6:	f001 f89d 	bl	bcf4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    abba:	4d35      	ldr	r5, [pc, #212]	; (ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    abbc:	b118      	cbz	r0, abc6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    abbe:	6828      	ldr	r0, [r5, #0]
    abc0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    abc4:	6028      	str	r0, [r5, #0]
    abc6:	f001 f889 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    abca:	b128      	cbz	r0, abd8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    abcc:	6828      	ldr	r0, [r5, #0]
    abce:	4931      	ldr	r1, [pc, #196]	; (ac94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    abd0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    abd4:	4308      	orrs	r0, r1
    abd6:	6028      	str	r0, [r5, #0]
    abd8:	f001 f89c 	bl	bd14 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    abdc:	b138      	cbz	r0, abee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    abde:	482c      	ldr	r0, [pc, #176]	; (ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    abe0:	1d00      	adds	r0, r0, #4
    abe2:	6801      	ldr	r1, [r0, #0]
    abe4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    abe8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    abec:	6001      	str	r1, [r0, #0]
    abee:	4928      	ldr	r1, [pc, #160]	; (ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    abf0:	4829      	ldr	r0, [pc, #164]	; (ac98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    abf2:	313c      	adds	r1, #60	; 0x3c
    abf4:	6008      	str	r0, [r1, #0]
    abf6:	f7f8 ff8b 	bl	3b10 <mpsl_fem_device_config_254_apply_get>
    abfa:	b140      	cbz	r0, ac0e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    abfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ac00:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ac04:	1c41      	adds	r1, r0, #1
    ac06:	d002      	beq.n	ac0e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    ac08:	4921      	ldr	r1, [pc, #132]	; (ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ac0a:	3110      	adds	r1, #16
    ac0c:	6008      	str	r0, [r1, #0]
    ac0e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ac12:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ac14:	1c41      	adds	r1, r0, #1
    ac16:	d004      	beq.n	ac22 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    ac18:	4920      	ldr	r1, [pc, #128]	; (ac9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ac1a:	680a      	ldr	r2, [r1, #0]
    ac1c:	f360 4217 	bfi	r2, r0, #16, #8
    ac20:	600a      	str	r2, [r1, #0]
    ac22:	491e      	ldr	r1, [pc, #120]	; (ac9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ac24:	f240 605b 	movw	r0, #1627	; 0x65b
    ac28:	3954      	subs	r1, #84	; 0x54
    ac2a:	6008      	str	r0, [r1, #0]
    ac2c:	1f09      	subs	r1, r1, #4
    ac2e:	f240 1003 	movw	r0, #259	; 0x103
    ac32:	6008      	str	r0, [r1, #0]
    ac34:	1f08      	subs	r0, r1, #4
    ac36:	6006      	str	r6, [r0, #0]
    ac38:	2001      	movs	r0, #1
    ac3a:	f000 fcd5 	bl	b5e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ac3e:	4917      	ldr	r1, [pc, #92]	; (ac9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ac40:	f240 1001 	movw	r0, #257	; 0x101
    ac44:	31c4      	adds	r1, #196	; 0xc4
    ac46:	6008      	str	r0, [r1, #0]
    ac48:	4e15      	ldr	r6, [pc, #84]	; (aca0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ac4a:	2502      	movs	r5, #2
    ac4c:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    ac50:	4915      	ldr	r1, [pc, #84]	; (aca8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ac52:	4814      	ldr	r0, [pc, #80]	; (aca4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ac54:	6008      	str	r0, [r1, #0]
    ac56:	4815      	ldr	r0, [pc, #84]	; (acac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ac58:	f506 7600 	add.w	r6, r6, #512	; 0x200
    ac5c:	8704      	strh	r4, [r0, #56]	; 0x38
    ac5e:	3010      	adds	r0, #16
    ac60:	6244      	str	r4, [r0, #36]	; 0x24
    ac62:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    ac66:	2001      	movs	r0, #1
    ac68:	f004 fd02 	bl	f670 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ac6c:	2010      	movs	r0, #16
    ac6e:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    ac72:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ac76:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    ac7a:	480d      	ldr	r0, [pc, #52]	; (acb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    ac7c:	6840      	ldr	r0, [r0, #4]
    ac7e:	2800      	cmp	r0, #0
    ac80:	d002      	beq.n	ac88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    ac82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ac86:	4700      	bx	r0
    ac88:	bd70      	pop	{r4, r5, r6, pc}
    ac8a:	0000      	.short	0x0000
    ac8c:	40001ffc 	.word	0x40001ffc
    ac90:	4000173c 	.word	0x4000173c
    ac94:	80000096 	.word	0x80000096
    ac98:	8900002c 	.word	0x8900002c
    ac9c:	4000158c 	.word	0x4000158c
    aca0:	40001000 	.word	0x40001000
    aca4:	0c0e0000 	.word	0x0c0e0000
    aca8:	4001f508 	.word	0x4001f508
    acac:	20000fbc 	.word	0x20000fbc
    acb0:	20000284 	.word	0x20000284

0000acb4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    acb4:	4901      	ldr	r1, [pc, #4]	; (acbc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    acb6:	7608      	strb	r0, [r1, #24]
    acb8:	4770      	bx	lr
    acba:	0000      	.short	0x0000
    acbc:	20000fcc 	.word	0x20000fcc

0000acc0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    acc0:	4904      	ldr	r1, [pc, #16]	; (acd4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    acc2:	6008      	str	r0, [r1, #0]
    acc4:	4804      	ldr	r0, [pc, #16]	; (acd8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    acc6:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    acca:	f041 0101 	orr.w	r1, r1, #1
    acce:	7001      	strb	r1, [r0, #0]
    acd0:	f000 baae 	b.w	b230 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    acd4:	40001504 	.word	0x40001504
    acd8:	20000fcc 	.word	0x20000fcc

0000acdc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    acdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ace0:	4e35      	ldr	r6, [pc, #212]	; (adb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    ace2:	4607      	mov	r7, r0
    ace4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ace8:	468a      	mov	sl, r1
    acea:	4614      	mov	r4, r2
    acec:	6030      	str	r0, [r6, #0]
    acee:	4610      	mov	r0, r2
    acf0:	f000 fc7a 	bl	b5e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    acf4:	f000 fa24 	bl	b140 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    acf8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; adbc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    acfc:	4d30      	ldr	r5, [pc, #192]	; (adc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    acfe:	f04f 0801 	mov.w	r8, #1
    ad02:	b127      	cbz	r7, ad0e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    ad04:	2f01      	cmp	r7, #1
    ad06:	d01d      	beq.n	ad44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    ad08:	f240 7144 	movw	r1, #1860	; 0x744
    ad0c:	e04a      	b.n	ada4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    ad0e:	4620      	mov	r0, r4
    ad10:	f000 fa36 	bl	b180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ad14:	4620      	mov	r0, r4
    ad16:	f000 f9f7 	bl	b108 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    ad1a:	2c02      	cmp	r4, #2
    ad1c:	d00f      	beq.n	ad3e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    ad1e:	f640 0034 	movw	r0, #2100	; 0x834
    ad22:	bf00      	nop
    ad24:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ad28:	4401      	add	r1, r0
    ad2a:	4650      	mov	r0, sl
    ad2c:	f000 fc00 	bl	b530 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    ad30:	4604      	mov	r4, r0
    ad32:	4648      	mov	r0, r9
    ad34:	f000 fbe6 	bl	b504 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    ad38:	f885 800b 	strb.w	r8, [r5, #11]
    ad3c:	e014      	b.n	ad68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ad3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ad42:	e7ef      	b.n	ad24 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ad44:	f000 fa44 	bl	b1d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    ad48:	f000 fbb2 	bl	b4b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    ad4c:	f000 fabc 	bl	b2c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    ad50:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ad54:	4650      	mov	r0, sl
    ad56:	f000 fbeb 	bl	b530 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    ad5a:	4604      	mov	r4, r0
    ad5c:	4817      	ldr	r0, [pc, #92]	; (adbc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ad5e:	1d00      	adds	r0, r0, #4
    ad60:	f000 fbd0 	bl	b504 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    ad64:	2002      	movs	r0, #2
    ad66:	72e8      	strb	r0, [r5, #11]
    ad68:	4816      	ldr	r0, [pc, #88]	; (adc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ad6a:	6004      	str	r4, [r0, #0]
    ad6c:	4917      	ldr	r1, [pc, #92]	; (adcc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ad6e:	4816      	ldr	r0, [pc, #88]	; (adc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ad70:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ad74:	6b28      	ldr	r0, [r5, #48]	; 0x30
    ad76:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ad7a:	6328      	str	r0, [r5, #48]	; 0x30
    ad7c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ad80:	6030      	str	r0, [r6, #0]
    ad82:	2110      	movs	r1, #16
    ad84:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ad88:	1200      	asrs	r0, r0, #8
    ad8a:	6030      	str	r0, [r6, #0]
    ad8c:	f000 fa88 	bl	b2a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    ad90:	490f      	ldr	r1, [pc, #60]	; (add0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ad92:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ad96:	480b      	ldr	r0, [pc, #44]	; (adc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ad98:	300c      	adds	r0, #12
    ad9a:	6800      	ldr	r0, [r0, #0]
    ad9c:	42a0      	cmp	r0, r4
    ad9e:	d304      	bcc.n	adaa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ada0:	f240 7169 	movw	r1, #1897	; 0x769
    ada4:	203e      	movs	r0, #62	; 0x3e
    ada6:	f7f8 ffb5 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adaa:	4621      	mov	r1, r4
    adac:	4638      	mov	r0, r7
    adae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adb2:	f004 bc9b 	b.w	f6ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    adb6:	0000      	.short	0x0000
    adb8:	4001f504 	.word	0x4001f504
    adbc:	40001000 	.word	0x40001000
    adc0:	20000fcc 	.word	0x20000fcc
    adc4:	40008540 	.word	0x40008540
    adc8:	40008140 	.word	0x40008140
    adcc:	4001f098 	.word	0x4001f098
    add0:	40008000 	.word	0x40008000

0000add4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    add4:	b510      	push	{r4, lr}
    add6:	b14a      	cbz	r2, adec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    add8:	4c12      	ldr	r4, [pc, #72]	; (ae24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    adda:	7260      	strb	r0, [r4, #9]
    addc:	7363      	strb	r3, [r4, #13]
    adde:	07d0      	lsls	r0, r2, #31
    ade0:	d007      	beq.n	adf2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    ade2:	2a01      	cmp	r2, #1
    ade4:	d005      	beq.n	adf2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    ade6:	f640 113e 	movw	r1, #2366	; 0x93e
    adea:	e00c      	b.n	ae06 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    adec:	f640 1137 	movw	r1, #2359	; 0x937
    adf0:	e009      	b.n	ae06 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    adf2:	b159      	cbz	r1, ae0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    adf4:	2002      	movs	r0, #2
    adf6:	72a0      	strb	r0, [r4, #10]
    adf8:	7322      	strb	r2, [r4, #12]
    adfa:	2801      	cmp	r0, #1
    adfc:	d008      	beq.n	ae10 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    adfe:	2802      	cmp	r0, #2
    ae00:	d00f      	beq.n	ae22 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ae02:	f640 1155 	movw	r1, #2389	; 0x955
    ae06:	203e      	movs	r0, #62	; 0x3e
    ae08:	f7f8 ff84 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae0c:	2001      	movs	r0, #1
    ae0e:	e7f2      	b.n	adf6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    ae10:	7ae0      	ldrb	r0, [r4, #11]
    ae12:	2802      	cmp	r0, #2
    ae14:	d105      	bne.n	ae22 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ae16:	f000 f9db 	bl	b1d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    ae1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae1e:	f000 bb47 	b.w	b4b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    ae22:	bd10      	pop	{r4, pc}
    ae24:	20000fcc 	.word	0x20000fcc

0000ae28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    ae28:	490a      	ldr	r1, [pc, #40]	; (ae54 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    ae2a:	b508      	push	{r3, lr}
    ae2c:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    ae30:	2a01      	cmp	r2, #1
    ae32:	d001      	beq.n	ae38 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    ae34:	2000      	movs	r0, #0
    ae36:	bd08      	pop	{r3, pc}
    ae38:	4a07      	ldr	r2, [pc, #28]	; (ae58 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    ae3a:	6812      	ldr	r2, [r2, #0]
    ae3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ae40:	4252      	negs	r2, r2
    ae42:	7002      	strb	r2, [r0, #0]
    ae44:	2000      	movs	r0, #0
    ae46:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    ae4a:	4804      	ldr	r0, [pc, #16]	; (ae5c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    ae4c:	6800      	ldr	r0, [r0, #0]
    ae4e:	9000      	str	r0, [sp, #0]
    ae50:	2001      	movs	r0, #1
    ae52:	bd08      	pop	{r3, pc}
    ae54:	40001000 	.word	0x40001000
    ae58:	40001548 	.word	0x40001548
    ae5c:	4000111c 	.word	0x4000111c

0000ae60 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    ae60:	4a04      	ldr	r2, [pc, #16]	; (ae74 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    ae62:	6803      	ldr	r3, [r0, #0]
    ae64:	f8c2 3012 	str.w	r3, [r2, #18]
    ae68:	8880      	ldrh	r0, [r0, #4]
    ae6a:	82d0      	strh	r0, [r2, #22]
    ae6c:	f102 0010 	add.w	r0, r2, #16
    ae70:	7201      	strb	r1, [r0, #8]
    ae72:	4770      	bx	lr
    ae74:	20000fbc 	.word	0x20000fbc

0000ae78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    ae78:	4a04      	ldr	r2, [pc, #16]	; (ae8c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ae7a:	78c1      	ldrb	r1, [r0, #3]
    ae7c:	6011      	str	r1, [r2, #0]
    ae7e:	6800      	ldr	r0, [r0, #0]
    ae80:	4902      	ldr	r1, [pc, #8]	; (ae8c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ae82:	0200      	lsls	r0, r0, #8
    ae84:	3908      	subs	r1, #8
    ae86:	6008      	str	r0, [r1, #0]
    ae88:	4770      	bx	lr
    ae8a:	0000      	.short	0x0000
    ae8c:	40001524 	.word	0x40001524

0000ae90 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    ae90:	6800      	ldr	r0, [r0, #0]
    ae92:	4902      	ldr	r1, [pc, #8]	; (ae9c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    ae94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae98:	6008      	str	r0, [r1, #0]
    ae9a:	4770      	bx	lr
    ae9c:	4000153c 	.word	0x4000153c

0000aea0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    aea0:	b510      	push	{r4, lr}
    aea2:	f000 fb7d 	bl	b5a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    aea6:	4806      	ldr	r0, [pc, #24]	; (aec0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    aea8:	6800      	ldr	r0, [r0, #0]
    aeaa:	2803      	cmp	r0, #3
    aeac:	d001      	beq.n	aeb2 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    aeae:	280b      	cmp	r0, #11
    aeb0:	d104      	bne.n	aebc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    aeb2:	f240 21a5 	movw	r1, #677	; 0x2a5
    aeb6:	203e      	movs	r0, #62	; 0x3e
    aeb8:	f7f8 ff2c 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aebc:	bd10      	pop	{r4, pc}
    aebe:	0000      	.short	0x0000
    aec0:	40001550 	.word	0x40001550

0000aec4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    aec4:	4901      	ldr	r1, [pc, #4]	; (aecc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    aec6:	7648      	strb	r0, [r1, #25]
    aec8:	4770      	bx	lr
    aeca:	0000      	.short	0x0000
    aecc:	20000fcc 	.word	0x20000fcc

0000aed0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    aed0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    aed4:	4d6f      	ldr	r5, [pc, #444]	; (b094 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>)
    aed6:	2701      	movs	r7, #1
    aed8:	64ef      	str	r7, [r5, #76]	; 0x4c
    aeda:	486f      	ldr	r0, [pc, #444]	; (b098 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    aedc:	f8d0 a000 	ldr.w	sl, [r0]
    aee0:	486e      	ldr	r0, [pc, #440]	; (b09c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    aee2:	6800      	ldr	r0, [r0, #0]
    aee4:	4c6e      	ldr	r4, [pc, #440]	; (b0a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    aee6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; b0a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    aeea:	e9c4 0a0e 	strd	r0, sl, [r4, #56]	; 0x38
    aeee:	f898 0000 	ldrb.w	r0, [r8]
    aef2:	2804      	cmp	r0, #4
    aef4:	d302      	bcc.n	aefc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    aef6:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    aefa:	e0c0      	b.n	b07e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    aefc:	f000 f972 	bl	b1e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    af00:	4969      	ldr	r1, [pc, #420]	; (b0a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    af02:	6b20      	ldr	r0, [r4, #48]	; 0x30
    af04:	6008      	str	r0, [r1, #0]
    af06:	f8df b1a4 	ldr.w	fp, [pc, #420]	; b0ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>
    af0a:	2600      	movs	r6, #0
    af0c:	6326      	str	r6, [r4, #48]	; 0x30
    af0e:	f8db 1200 	ldr.w	r1, [fp, #512]	; 0x200
    af12:	f240 121d 	movw	r2, #285	; 0x11d
    af16:	4391      	bics	r1, r2
    af18:	f8cb 1200 	str.w	r1, [fp, #512]	; 0x200
    af1c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    af20:	f8db 010c 	ldr.w	r0, [fp, #268]	; 0x10c
    af24:	b900      	cbnz	r0, af28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    af26:	64af      	str	r7, [r5, #72]	; 0x48
    af28:	f000 f9e0 	bl	b2ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x234>
    af2c:	4605      	mov	r5, r0
    af2e:	485a      	ldr	r0, [pc, #360]	; (b098 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    af30:	1f00      	subs	r0, r0, #4
    af32:	6800      	ldr	r0, [r0, #0]
    af34:	6260      	str	r0, [r4, #36]	; 0x24
    af36:	f7ff fdcf 	bl	aad8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    af3a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    af3e:	7ae0      	ldrb	r0, [r4, #11]
    af40:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    af44:	495a      	ldr	r1, [pc, #360]	; (b0b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    af46:	6226      	str	r6, [r4, #32]
    af48:	2802      	cmp	r0, #2
    af4a:	d107      	bne.n	af5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    af4c:	7860      	ldrb	r0, [r4, #1]
    af4e:	b128      	cbz	r0, af5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    af50:	680a      	ldr	r2, [r1, #0]
    af52:	7812      	ldrb	r2, [r2, #0]
    af54:	4002      	ands	r2, r0
    af56:	7820      	ldrb	r0, [r4, #0]
    af58:	4390      	bics	r0, r2
    af5a:	d011      	beq.n	af80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    af5c:	7726      	strb	r6, [r4, #28]
    af5e:	f8df 9154 	ldr.w	r9, [pc, #340]	; b0b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    af62:	07a8      	lsls	r0, r5, #30
    af64:	d502      	bpl.n	af6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    af66:	f8d9 0000 	ldr.w	r0, [r9]
    af6a:	6220      	str	r0, [r4, #32]
    af6c:	0728      	lsls	r0, r5, #28
    af6e:	d502      	bpl.n	af76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa6>
    af70:	f8d9 0000 	ldr.w	r0, [r9]
    af74:	6220      	str	r0, [r4, #32]
    af76:	f898 0000 	ldrb.w	r0, [r8]
    af7a:	07c0      	lsls	r0, r0, #31
    af7c:	d002      	beq.n	af84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    af7e:	e01c      	b.n	afba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    af80:	7727      	strb	r7, [r4, #28]
    af82:	e7ec      	b.n	af5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    af84:	f8d1 8000 	ldr.w	r8, [r1]
    af88:	f898 0000 	ldrb.w	r0, [r8]
    af8c:	f000 000f 	and.w	r0, r0, #15
    af90:	2807      	cmp	r0, #7
    af92:	d211      	bcs.n	afb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    af94:	2206      	movs	r2, #6
    af96:	f108 0109 	add.w	r1, r8, #9
    af9a:	1ca0      	adds	r0, r4, #2
    af9c:	f000 fede 	bl	bd5c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    afa0:	b938      	cbnz	r0, afb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    afa2:	7a20      	ldrb	r0, [r4, #8]
    afa4:	f898 1000 	ldrb.w	r1, [r8]
    afa8:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    afac:	d101      	bne.n	afb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    afae:	2001      	movs	r0, #1
    afb0:	e000      	b.n	afb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe4>
    afb2:	2000      	movs	r0, #0
    afb4:	7760      	strb	r0, [r4, #29]
    afb6:	e000      	b.n	afba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    afb8:	7766      	strb	r6, [r4, #29]
    afba:	f04f 0800 	mov.w	r8, #0
    afbe:	4651      	mov	r1, sl
    afc0:	4628      	mov	r0, r5
    afc2:	f000 fa23 	bl	b40c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x354>
    afc6:	b918      	cbnz	r0, afd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    afc8:	f8cb 7010 	str.w	r7, [fp, #16]
    afcc:	f04f 0801 	mov.w	r8, #1
    afd0:	4e33      	ldr	r6, [pc, #204]	; (b0a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    afd2:	07e8      	lsls	r0, r5, #31
    afd4:	f1a6 0610 	sub.w	r6, r6, #16
    afd8:	d002      	beq.n	afe0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    afda:	6830      	ldr	r0, [r6, #0]
    afdc:	4780      	blx	r0
    afde:	e031      	b.n	b044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    afe0:	07a8      	lsls	r0, r5, #30
    afe2:	d526      	bpl.n	b032 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x162>
    afe4:	0768      	lsls	r0, r5, #29
    afe6:	d41e      	bmi.n	b026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    afe8:	f000 fe94 	bl	bd14 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    afec:	b9d8      	cbnz	r0, b026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    afee:	f000 fe81 	bl	bcf4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aff2:	b9c0      	cbnz	r0, b026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    aff4:	482e      	ldr	r0, [pc, #184]	; (b0b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    aff6:	38b4      	subs	r0, #180	; 0xb4
    aff8:	6800      	ldr	r0, [r0, #0]
    affa:	f3c0 5742 	ubfx	r7, r0, #21, #3
    affe:	f3c0 6300 	ubfx	r3, r0, #24, #1
    b002:	f000 020f 	and.w	r2, r0, #15
    b006:	f3c0 1103 	ubfx	r1, r0, #4, #4
    b00a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b00e:	b153      	cbz	r3, b026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b010:	b10a      	cbz	r2, b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b012:	b101      	cbz	r1, b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b014:	b938      	cbnz	r0, b026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b016:	4826      	ldr	r0, [pc, #152]	; (b0b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    b018:	38b0      	subs	r0, #176	; 0xb0
    b01a:	6800      	ldr	r0, [r0, #0]
    b01c:	b118      	cbz	r0, b026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b01e:	2f03      	cmp	r7, #3
    b020:	d201      	bcs.n	b026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b022:	f045 0504 	orr.w	r5, r5, #4
    b026:	f345 0080 	sbfx	r0, r5, #2, #1
    b02a:	4641      	mov	r1, r8
    b02c:	1c40      	adds	r0, r0, #1
    b02e:	6872      	ldr	r2, [r6, #4]
    b030:	e007      	b.n	b042 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x172>
    b032:	f015 0f28 	tst.w	r5, #40	; 0x28
    b036:	d005      	beq.n	b044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    b038:	f345 1140 	sbfx	r1, r5, #5, #1
    b03c:	68b2      	ldr	r2, [r6, #8]
    b03e:	4640      	mov	r0, r8
    b040:	1c49      	adds	r1, r1, #1
    b042:	4790      	blx	r2
    b044:	06e8      	lsls	r0, r5, #27
    b046:	d501      	bpl.n	b04c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    b048:	68f0      	ldr	r0, [r6, #12]
    b04a:	4780      	blx	r0
    b04c:	7ae0      	ldrb	r0, [r4, #11]
    b04e:	2802      	cmp	r0, #2
    b050:	d11e      	bne.n	b090 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    b052:	7c20      	ldrb	r0, [r4, #16]
    b054:	2800      	cmp	r0, #0
    b056:	d01b      	beq.n	b090 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    b058:	2802      	cmp	r0, #2
    b05a:	d004      	beq.n	b066 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x196>
    b05c:	2801      	cmp	r0, #1
    b05e:	d008      	beq.n	b072 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a2>
    b060:	f640 3166 	movw	r1, #2918	; 0xb66
    b064:	e00b      	b.n	b07e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    b066:	6961      	ldr	r1, [r4, #20]
    b068:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b06a:	4401      	add	r1, r0
    b06c:	f8c9 1000 	str.w	r1, [r9]
    b070:	e00a      	b.n	b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    b072:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b074:	6960      	ldr	r0, [r4, #20]
    b076:	4288      	cmp	r0, r1
    b078:	d804      	bhi.n	b084 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b07a:	f640 3167 	movw	r1, #2919	; 0xb67
    b07e:	203e      	movs	r0, #62	; 0x3e
    b080:	f7f8 fe48 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b084:	f8c9 0000 	str.w	r0, [r9]
    b088:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b08c:	f000 ba1e 	b.w	b4cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    b090:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b094:	40008000 	.word	0x40008000
    b098:	4000854c 	.word	0x4000854c
    b09c:	4000b504 	.word	0x4000b504
    b0a0:	20000fcc 	.word	0x20000fcc
    b0a4:	20000284 	.word	0x20000284
    b0a8:	4001f508 	.word	0x4001f508
    b0ac:	40001000 	.word	0x40001000
    b0b0:	40001504 	.word	0x40001504
    b0b4:	40008544 	.word	0x40008544

0000b0b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b0b8:	b570      	push	{r4, r5, r6, lr}
    b0ba:	4b11      	ldr	r3, [pc, #68]	; (b100 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b0bc:	888c      	ldrh	r4, [r1, #4]
    b0be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b0c2:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b0c6:	780c      	ldrb	r4, [r1, #0]
    b0c8:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b0cc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b0d0:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b0d4:	4d0b      	ldr	r5, [pc, #44]	; (b104 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b0d6:	6829      	ldr	r1, [r5, #0]
    b0d8:	f100 0608 	add.w	r6, r0, #8
    b0dc:	2401      	movs	r4, #1
    b0de:	fa04 f306 	lsl.w	r3, r4, r6
    b0e2:	b132      	cbz	r2, b0f2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b0e4:	2a01      	cmp	r2, #1
    b0e6:	d006      	beq.n	b0f6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b0e8:	f240 41f1 	movw	r1, #1265	; 0x4f1
    b0ec:	203e      	movs	r0, #62	; 0x3e
    b0ee:	f7f8 fe11 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0f2:	4399      	bics	r1, r3
    b0f4:	e000      	b.n	b0f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b0f6:	4319      	orrs	r1, r3
    b0f8:	4084      	lsls	r4, r0
    b0fa:	430c      	orrs	r4, r1
    b0fc:	602c      	str	r4, [r5, #0]
    b0fe:	bd70      	pop	{r4, r5, r6, pc}
    b100:	40001000 	.word	0x40001000
    b104:	40001640 	.word	0x40001640
    b108:	b510      	push	{r4, lr}
    b10a:	4604      	mov	r4, r0
    b10c:	f000 fe02 	bl	bd14 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b110:	2800      	cmp	r0, #0
    b112:	d00e      	beq.n	b132 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    b114:	4a09      	ldr	r2, [pc, #36]	; (b13c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    b116:	6811      	ldr	r1, [r2, #0]
    b118:	0650      	lsls	r0, r2, #25
    b11a:	2c02      	cmp	r4, #2
    b11c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b120:	d008      	beq.n	b134 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    b122:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b126:	bf00      	nop
    b128:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b12c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b130:	6010      	str	r0, [r2, #0]
    b132:	bd10      	pop	{r4, pc}
    b134:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b138:	e7f6      	b.n	b128 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    b13a:	0000      	.short	0x0000
    b13c:	40001588 	.word	0x40001588
    b140:	480d      	ldr	r0, [pc, #52]	; (b178 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    b142:	7e40      	ldrb	r0, [r0, #25]
    b144:	2825      	cmp	r0, #37	; 0x25
    b146:	d007      	beq.n	b158 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    b148:	2826      	cmp	r0, #38	; 0x26
    b14a:	d007      	beq.n	b15c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    b14c:	2827      	cmp	r0, #39	; 0x27
    b14e:	d007      	beq.n	b160 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    b150:	280a      	cmp	r0, #10
    b152:	d807      	bhi.n	b164 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    b154:	2204      	movs	r2, #4
    b156:	e006      	b.n	b166 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    b158:	2102      	movs	r1, #2
    b15a:	e007      	b.n	b16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b15c:	211a      	movs	r1, #26
    b15e:	e005      	b.n	b16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b160:	2150      	movs	r1, #80	; 0x50
    b162:	e003      	b.n	b16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b164:	2206      	movs	r2, #6
    b166:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b16a:	b2c9      	uxtb	r1, r1
    b16c:	4a03      	ldr	r2, [pc, #12]	; (b17c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b16e:	6011      	str	r1, [r2, #0]
    b170:	4902      	ldr	r1, [pc, #8]	; (b17c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b172:	314c      	adds	r1, #76	; 0x4c
    b174:	6008      	str	r0, [r1, #0]
    b176:	4770      	bx	lr
    b178:	20000fcc 	.word	0x20000fcc
    b17c:	40001508 	.word	0x40001508
    b180:	4912      	ldr	r1, [pc, #72]	; (b1cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x114>)
    b182:	b508      	push	{r3, lr}
    b184:	f991 2018 	ldrsb.w	r2, [r1, #24]
    b188:	7e49      	ldrb	r1, [r1, #25]
    b18a:	2801      	cmp	r0, #1
    b18c:	d00a      	beq.n	b1a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b18e:	2802      	cmp	r0, #2
    b190:	d00a      	beq.n	b1a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf0>
    b192:	2804      	cmp	r0, #4
    b194:	d00a      	beq.n	b1ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf4>
    b196:	2808      	cmp	r0, #8
    b198:	d00a      	beq.n	b1b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf8>
    b19a:	f240 31d7 	movw	r1, #983	; 0x3d7
    b19e:	2006      	movs	r0, #6
    b1a0:	f7f8 fdb8 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1a4:	2000      	movs	r0, #0
    b1a6:	e004      	b.n	b1b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b1a8:	2001      	movs	r0, #1
    b1aa:	e002      	b.n	b1b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b1ac:	2003      	movs	r0, #3
    b1ae:	e000      	b.n	b1b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b1b0:	2002      	movs	r0, #2
    b1b2:	466b      	mov	r3, sp
    b1b4:	f7f5 f91e 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b1b8:	b118      	cbz	r0, b1c2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    b1ba:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    b1be:	203e      	movs	r0, #62	; 0x3e
    b1c0:	e7ee      	b.n	b1a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>
    b1c2:	f99d 0000 	ldrsb.w	r0, [sp]
    b1c6:	f000 fa09 	bl	b5dc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b1ca:	bd08      	pop	{r3, pc}
    b1cc:	20000fcc 	.word	0x20000fcc
    b1d0:	4803      	ldr	r0, [pc, #12]	; (b1e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    b1d2:	7a81      	ldrb	r1, [r0, #10]
    b1d4:	2901      	cmp	r1, #1
    b1d6:	d102      	bne.n	b1de <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x126>
    b1d8:	7b40      	ldrb	r0, [r0, #13]
    b1da:	f7ff bfd1 	b.w	b180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b1de:	4770      	bx	lr
    b1e0:	20000fcc 	.word	0x20000fcc
    b1e4:	4805      	ldr	r0, [pc, #20]	; (b1fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x144>)
    b1e6:	7ac0      	ldrb	r0, [r0, #11]
    b1e8:	2801      	cmp	r0, #1
    b1ea:	d003      	beq.n	b1f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x13c>
    b1ec:	2802      	cmp	r0, #2
    b1ee:	d103      	bne.n	b1f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x140>
    b1f0:	f004 b9fa 	b.w	f5e8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b1f4:	f004 ba04 	b.w	f600 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b1f8:	4770      	bx	lr
    b1fa:	0000      	.short	0x0000
    b1fc:	20000fcc 	.word	0x20000fcc
    b200:	4809      	ldr	r0, [pc, #36]	; (b228 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>)
    b202:	b508      	push	{r3, lr}
    b204:	2100      	movs	r1, #0
    b206:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b20a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b20e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b212:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b216:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b21a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b21e:	4803      	ldr	r0, [pc, #12]	; (b22c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    b220:	6800      	ldr	r0, [r0, #0]
    b222:	9000      	str	r0, [sp, #0]
    b224:	bd08      	pop	{r3, pc}
    b226:	0000      	.short	0x0000
    b228:	40001000 	.word	0x40001000
    b22c:	40001118 	.word	0x40001118
    b230:	4816      	ldr	r0, [pc, #88]	; (b28c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d4>)
    b232:	b510      	push	{r4, lr}
    b234:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    b238:	07c1      	lsls	r1, r0, #31
    b23a:	d026      	beq.n	b28a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b23c:	0781      	lsls	r1, r0, #30
    b23e:	d513      	bpl.n	b268 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1b0>
    b240:	4813      	ldr	r0, [pc, #76]	; (b290 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b242:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b246:	f041 0101 	orr.w	r1, r1, #1
    b24a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b24e:	4811      	ldr	r0, [pc, #68]	; (b294 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1dc>)
    b250:	6800      	ldr	r0, [r0, #0]
    b252:	280b      	cmp	r0, #11
    b254:	d005      	beq.n	b262 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b256:	280a      	cmp	r0, #10
    b258:	d003      	beq.n	b262 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b25a:	2803      	cmp	r0, #3
    b25c:	d001      	beq.n	b262 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b25e:	2802      	cmp	r0, #2
    b260:	d113      	bne.n	b28a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b262:	f240 514b 	movw	r1, #1355	; 0x54b
    b266:	e00d      	b.n	b284 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>
    b268:	0740      	lsls	r0, r0, #29
    b26a:	d50e      	bpl.n	b28a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b26c:	4808      	ldr	r0, [pc, #32]	; (b290 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b26e:	490a      	ldr	r1, [pc, #40]	; (b298 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e0>)
    b270:	3008      	adds	r0, #8
    b272:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b276:	4809      	ldr	r0, [pc, #36]	; (b29c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e4>)
    b278:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b27c:	2801      	cmp	r0, #1
    b27e:	d104      	bne.n	b28a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b280:	f240 5152 	movw	r1, #1362	; 0x552
    b284:	203e      	movs	r0, #62	; 0x3e
    b286:	f7f8 fd45 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b28a:	bd10      	pop	{r4, pc}
    b28c:	20000fcc 	.word	0x20000fcc
    b290:	40001000 	.word	0x40001000
    b294:	40001550 	.word	0x40001550
    b298:	4001f098 	.word	0x4001f098
    b29c:	40008000 	.word	0x40008000
    b2a0:	4808      	ldr	r0, [pc, #32]	; (b2c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20c>)
    b2a2:	4601      	mov	r1, r0
    b2a4:	7a42      	ldrb	r2, [r0, #9]
    b2a6:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    b2aa:	b112      	cbz	r2, b2b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1fa>
    b2ac:	2a01      	cmp	r2, #1
    b2ae:	d003      	beq.n	b2b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x200>
    b2b0:	e006      	b.n	b2c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    b2b2:	f041 0102 	orr.w	r1, r1, #2
    b2b6:	e001      	b.n	b2bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x204>
    b2b8:	f041 0104 	orr.w	r1, r1, #4
    b2bc:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    b2c0:	f7ff bfb6 	b.w	b230 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    b2c4:	20000fcc 	.word	0x20000fcc
    b2c8:	b510      	push	{r4, lr}
    b2ca:	f000 fd23 	bl	bd14 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b2ce:	2800      	cmp	r0, #0
    b2d0:	d108      	bne.n	b2e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b2d2:	f000 fd0f 	bl	bcf4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b2d6:	2800      	cmp	r0, #0
    b2d8:	d104      	bne.n	b2e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b2da:	4803      	ldr	r0, [pc, #12]	; (b2e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x230>)
    b2dc:	6801      	ldr	r1, [r0, #0]
    b2de:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b2e2:	6001      	str	r1, [r0, #0]
    b2e4:	bd10      	pop	{r4, pc}
    b2e6:	0000      	.short	0x0000
    b2e8:	40001568 	.word	0x40001568
    b2ec:	b538      	push	{r3, r4, r5, lr}
    b2ee:	4d36      	ldr	r5, [pc, #216]	; (b3c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    b2f0:	2400      	movs	r4, #0
    b2f2:	7c28      	ldrb	r0, [r5, #16]
    b2f4:	b120      	cbz	r0, b300 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    b2f6:	4835      	ldr	r0, [pc, #212]	; (b3cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>)
    b2f8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b2fc:	2801      	cmp	r0, #1
    b2fe:	d007      	beq.n	b310 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x258>
    b300:	2200      	movs	r2, #0
    b302:	7ae9      	ldrb	r1, [r5, #11]
    b304:	4832      	ldr	r0, [pc, #200]	; (b3d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x318>)
    b306:	2901      	cmp	r1, #1
    b308:	d004      	beq.n	b314 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    b30a:	2902      	cmp	r1, #2
    b30c:	d00a      	beq.n	b324 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    b30e:	e019      	b.n	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b310:	2201      	movs	r2, #1
    b312:	e7f6      	b.n	b302 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24a>
    b314:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b318:	2901      	cmp	r1, #1
    b31a:	d001      	beq.n	b320 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    b31c:	2400      	movs	r4, #0
    b31e:	e011      	b.n	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b320:	2408      	movs	r4, #8
    b322:	e00f      	b.n	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b324:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b328:	2901      	cmp	r1, #1
    b32a:	d006      	beq.n	b33a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x282>
    b32c:	2100      	movs	r1, #0
    b32e:	4b29      	ldr	r3, [pc, #164]	; (b3d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b330:	681b      	ldr	r3, [r3, #0]
    b332:	2b01      	cmp	r3, #1
    b334:	d003      	beq.n	b33e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x286>
    b336:	2404      	movs	r4, #4
    b338:	e002      	b.n	b340 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x288>
    b33a:	2102      	movs	r1, #2
    b33c:	e7f7      	b.n	b32e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x276>
    b33e:	2400      	movs	r4, #0
    b340:	430c      	orrs	r4, r1
    b342:	4314      	orrs	r4, r2
    b344:	f014 0f0b 	tst.w	r4, #11
    b348:	d105      	bne.n	b356 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29e>
    b34a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b34e:	2901      	cmp	r1, #1
    b350:	d006      	beq.n	b360 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2a8>
    b352:	2100      	movs	r1, #0
    b354:	430c      	orrs	r4, r1
    b356:	4920      	ldr	r1, [pc, #128]	; (b3d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x320>)
    b358:	7809      	ldrb	r1, [r1, #0]
    b35a:	07c9      	lsls	r1, r1, #31
    b35c:	d002      	beq.n	b364 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    b35e:	e023      	b.n	b3a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2f0>
    b360:	2110      	movs	r1, #16
    b362:	e7f7      	b.n	b354 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29c>
    b364:	491d      	ldr	r1, [pc, #116]	; (b3dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x324>)
    b366:	6809      	ldr	r1, [r1, #0]
    b368:	f011 0fff 	tst.w	r1, #255	; 0xff
    b36c:	d003      	beq.n	b376 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2be>
    b36e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b372:	2a01      	cmp	r2, #1
    b374:	d000      	beq.n	b378 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c0>
    b376:	2200      	movs	r2, #0
    b378:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    b37c:	f011 0fff 	tst.w	r1, #255	; 0xff
    b380:	d003      	beq.n	b38a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d2>
    b382:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b386:	2801      	cmp	r0, #1
    b388:	d000      	beq.n	b38c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>
    b38a:	2000      	movs	r0, #0
    b38c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    b390:	4810      	ldr	r0, [pc, #64]	; (b3d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b392:	3010      	adds	r0, #16
    b394:	6800      	ldr	r0, [r0, #0]
    b396:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b39a:	f7ff f857 	bl	a44c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    b39e:	2801      	cmp	r0, #1
    b3a0:	d000      	beq.n	b3a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    b3a2:	2000      	movs	r0, #0
    b3a4:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    b3a8:	f7ff ff2a 	bl	b200 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x148>
    b3ac:	06e0      	lsls	r0, r4, #27
    b3ae:	d506      	bpl.n	b3be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b3b0:	0720      	lsls	r0, r4, #28
    b3b2:	d404      	bmi.n	b3be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b3b4:	7ae8      	ldrb	r0, [r5, #11]
    b3b6:	2801      	cmp	r0, #1
    b3b8:	d101      	bne.n	b3be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b3ba:	f044 0420 	orr.w	r4, r4, #32
    b3be:	4808      	ldr	r0, [pc, #32]	; (b3e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x328>)
    b3c0:	6800      	ldr	r0, [r0, #0]
    b3c2:	9000      	str	r0, [sp, #0]
    b3c4:	4620      	mov	r0, r4
    b3c6:	bd38      	pop	{r3, r4, r5, pc}
    b3c8:	20000fcc 	.word	0x20000fcc
    b3cc:	40008000 	.word	0x40008000
    b3d0:	40001000 	.word	0x40001000
    b3d4:	40001400 	.word	0x40001400
    b3d8:	20000284 	.word	0x20000284
    b3dc:	40001640 	.word	0x40001640
    b3e0:	40008144 	.word	0x40008144
    b3e4:	4808      	ldr	r0, [pc, #32]	; (b408 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x350>)
    b3e6:	b510      	push	{r4, lr}
    b3e8:	6800      	ldr	r0, [r0, #0]
    b3ea:	f000 000f 	and.w	r0, r0, #15
    b3ee:	2803      	cmp	r0, #3
    b3f0:	d006      	beq.n	b400 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    b3f2:	2804      	cmp	r0, #4
    b3f4:	d006      	beq.n	b404 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x34c>
    b3f6:	f240 2136 	movw	r1, #566	; 0x236
    b3fa:	203e      	movs	r0, #62	; 0x3e
    b3fc:	f7f8 fc8a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b400:	2001      	movs	r0, #1
    b402:	bd10      	pop	{r4, pc}
    b404:	2002      	movs	r0, #2
    b406:	bd10      	pop	{r4, pc}
    b408:	40001510 	.word	0x40001510
    b40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b410:	4c25      	ldr	r4, [pc, #148]	; (b4a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>)
    b412:	460d      	mov	r5, r1
    b414:	7aa2      	ldrb	r2, [r4, #10]
    b416:	b19a      	cbz	r2, b440 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x388>
    b418:	7b21      	ldrb	r1, [r4, #12]
    b41a:	078b      	lsls	r3, r1, #30
    b41c:	d503      	bpl.n	b426 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b41e:	0783      	lsls	r3, r0, #30
    b420:	d501      	bpl.n	b426 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b422:	0743      	lsls	r3, r0, #29
    b424:	d41c      	bmi.n	b460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b426:	06cb      	lsls	r3, r1, #27
    b428:	d505      	bpl.n	b436 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b42a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b42e:	b113      	cbz	r3, b436 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b430:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b434:	b1a3      	cbz	r3, b460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b436:	070b      	lsls	r3, r1, #28
    b438:	d50b      	bpl.n	b452 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b43a:	7f23      	ldrb	r3, [r4, #28]
    b43c:	b983      	cbnz	r3, b460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b43e:	e008      	b.n	b452 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b440:	491a      	ldr	r1, [pc, #104]	; (b4ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f4>)
    b442:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b446:	6008      	str	r0, [r1, #0]
    b448:	f000 f868 	bl	b51c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b44c:	2000      	movs	r0, #0
    b44e:	7420      	strb	r0, [r4, #16]
    b450:	e028      	b.n	b4a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b452:	0749      	lsls	r1, r1, #29
    b454:	d501      	bpl.n	b45a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a2>
    b456:	7f61      	ldrb	r1, [r4, #29]
    b458:	b111      	cbz	r1, b460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b45a:	f010 0f11 	tst.w	r0, #17
    b45e:	d002      	beq.n	b466 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ae>
    b460:	f7ff f98a 	bl	a778 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b464:	e01e      	b.n	b4a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b466:	2a01      	cmp	r2, #1
    b468:	d001      	beq.n	b46e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b6>
    b46a:	2601      	movs	r6, #1
    b46c:	e000      	b.n	b470 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b46e:	2600      	movs	r6, #0
    b470:	7a60      	ldrb	r0, [r4, #9]
    b472:	2801      	cmp	r0, #1
    b474:	d00e      	beq.n	b494 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3dc>
    b476:	2700      	movs	r7, #0
    b478:	f000 f850 	bl	b51c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b47c:	2196      	movs	r1, #150	; 0x96
    b47e:	4630      	mov	r0, r6
    b480:	f000 f864 	bl	b54c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x494>
    b484:	4601      	mov	r1, r0
    b486:	b14f      	cbz	r7, b49c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e4>
    b488:	353b      	adds	r5, #59	; 0x3b
    b48a:	428d      	cmp	r5, r1
    b48c:	d904      	bls.n	b498 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e0>
    b48e:	2000      	movs	r0, #0
    b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b494:	2701      	movs	r7, #1
    b496:	e7ef      	b.n	b478 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3c0>
    b498:	2001      	movs	r0, #1
    b49a:	7260      	strb	r0, [r4, #9]
    b49c:	7b62      	ldrb	r2, [r4, #13]
    b49e:	4630      	mov	r0, r6
    b4a0:	f7ff fc1c 	bl	acdc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b4a4:	2001      	movs	r0, #1
    b4a6:	e7f3      	b.n	b490 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d8>
    b4a8:	20000fcc 	.word	0x20000fcc
    b4ac:	4001f508 	.word	0x4001f508
    b4b0:	4805      	ldr	r0, [pc, #20]	; (b4c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x410>)
    b4b2:	2100      	movs	r1, #0
    b4b4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b4b8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4bc:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b4c0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	40001000 	.word	0x40001000
    b4cc:	4804      	ldr	r0, [pc, #16]	; (b4e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x428>)
    b4ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b4d0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b4d4:	6301      	str	r1, [r0, #48]	; 0x30
    b4d6:	4903      	ldr	r1, [pc, #12]	; (b4e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42c>)
    b4d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b4dc:	6008      	str	r0, [r1, #0]
    b4de:	4770      	bx	lr
    b4e0:	20000fcc 	.word	0x20000fcc
    b4e4:	4001f504 	.word	0x4001f504
    b4e8:	4905      	ldr	r1, [pc, #20]	; (b500 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b4ea:	2000      	movs	r0, #0
    b4ec:	6008      	str	r0, [r1, #0]
    b4ee:	1f09      	subs	r1, r1, #4
    b4f0:	6008      	str	r0, [r1, #0]
    b4f2:	1f09      	subs	r1, r1, #4
    b4f4:	6008      	str	r0, [r1, #0]
    b4f6:	4902      	ldr	r1, [pc, #8]	; (b500 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b4f8:	1d09      	adds	r1, r1, #4
    b4fa:	6008      	str	r0, [r1, #0]
    b4fc:	4770      	bx	lr
    b4fe:	0000      	.short	0x0000
    b500:	40008548 	.word	0x40008548
    b504:	4903      	ldr	r1, [pc, #12]	; (b514 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45c>)
    b506:	7a49      	ldrb	r1, [r1, #9]
    b508:	2900      	cmp	r1, #0
    b50a:	d102      	bne.n	b512 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45a>
    b50c:	4902      	ldr	r1, [pc, #8]	; (b518 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>)
    b50e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b512:	4770      	bx	lr
    b514:	20000fcc 	.word	0x20000fcc
    b518:	4001f098 	.word	0x4001f098
    b51c:	4803      	ldr	r0, [pc, #12]	; (b52c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>)
    b51e:	2100      	movs	r1, #0
    b520:	7241      	strb	r1, [r0, #9]
    b522:	7281      	strb	r1, [r0, #10]
    b524:	72c1      	strb	r1, [r0, #11]
    b526:	2101      	movs	r1, #1
    b528:	7301      	strb	r1, [r0, #12]
    b52a:	4770      	bx	lr
    b52c:	20000fcc 	.word	0x20000fcc
    b530:	4a05      	ldr	r2, [pc, #20]	; (b548 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x490>)
    b532:	7a52      	ldrb	r2, [r2, #9]
    b534:	2a01      	cmp	r2, #1
    b536:	d006      	beq.n	b546 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48e>
    b538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b53c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b540:	fbb1 f1f2 	udiv	r1, r1, r2
    b544:	1a40      	subs	r0, r0, r1
    b546:	4770      	bx	lr
    b548:	20000fcc 	.word	0x20000fcc
    b54c:	b570      	push	{r4, r5, r6, lr}
    b54e:	4c13      	ldr	r4, [pc, #76]	; (b59c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e4>)
    b550:	4603      	mov	r3, r0
    b552:	460d      	mov	r5, r1
    b554:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    b558:	2000      	movs	r0, #0
    b55a:	b15a      	cbz	r2, b574 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>
    b55c:	4621      	mov	r1, r4
    b55e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    b562:	b163      	cbz	r3, b57e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c6>
    b564:	2b01      	cmp	r3, #1
    b566:	d111      	bne.n	b58c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d4>
    b568:	2a01      	cmp	r2, #1
    b56a:	4628      	mov	r0, r5
    b56c:	d012      	beq.n	b594 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4dc>
    b56e:	f004 f915 	bl	f79c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b572:	e009      	b.n	b588 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b574:	f240 7186 	movw	r1, #1926	; 0x786
    b578:	203e      	movs	r0, #62	; 0x3e
    b57a:	f7f8 fbcb 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b57e:	2a01      	cmp	r2, #1
    b580:	4628      	mov	r0, r5
    b582:	d004      	beq.n	b58e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d6>
    b584:	f004 f918 	bl	f7b8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b588:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b58a:	4408      	add	r0, r1
    b58c:	bd70      	pop	{r4, r5, r6, pc}
    b58e:	f004 f92d 	bl	f7ec <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b592:	e7f9      	b.n	b588 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b594:	f004 f91b 	bl	f7ce <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b598:	e7f6      	b.n	b588 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b59a:	0000      	.short	0x0000
    b59c:	20000fcc 	.word	0x20000fcc
    b5a0:	b510      	push	{r4, lr}
    b5a2:	2200      	movs	r2, #0
    b5a4:	2901      	cmp	r1, #1
    b5a6:	d008      	beq.n	b5ba <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x502>
    b5a8:	2902      	cmp	r1, #2
    b5aa:	d004      	beq.n	b5b6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4fe>
    b5ac:	f44f 7121 	mov.w	r1, #644	; 0x284
    b5b0:	203e      	movs	r0, #62	; 0x3e
    b5b2:	f7f8 fbaf 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b5ba:	4905      	ldr	r1, [pc, #20]	; (b5d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x518>)
    b5bc:	430a      	orrs	r2, r1
    b5be:	4905      	ldr	r1, [pc, #20]	; (b5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b5c0:	600a      	str	r2, [r1, #0]
    b5c2:	4905      	ldr	r1, [pc, #20]	; (b5d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x520>)
    b5c4:	4308      	orrs	r0, r1
    b5c6:	4903      	ldr	r1, [pc, #12]	; (b5d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b5c8:	1d09      	adds	r1, r1, #4
    b5ca:	6008      	str	r0, [r1, #0]
    b5cc:	bd10      	pop	{r4, pc}
    b5ce:	0000      	.short	0x0000
    b5d0:	00100108 	.word	0x00100108
    b5d4:	40001514 	.word	0x40001514
    b5d8:	02030000 	.word	0x02030000

0000b5dc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b5dc:	4901      	ldr	r1, [pc, #4]	; (b5e4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b5de:	b2c0      	uxtb	r0, r0
    b5e0:	6008      	str	r0, [r1, #0]
    b5e2:	4770      	bx	lr
    b5e4:	4000150c 	.word	0x4000150c

0000b5e8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b5e8:	b510      	push	{r4, lr}
    b5ea:	4907      	ldr	r1, [pc, #28]	; (b608 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b5ec:	2801      	cmp	r0, #1
    b5ee:	d005      	beq.n	b5fc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b5f0:	2802      	cmp	r0, #2
    b5f2:	d005      	beq.n	b600 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b5f4:	2197      	movs	r1, #151	; 0x97
    b5f6:	203f      	movs	r0, #63	; 0x3f
    b5f8:	f7f8 fb8c 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5fc:	2003      	movs	r0, #3
    b5fe:	e000      	b.n	b602 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b600:	2004      	movs	r0, #4
    b602:	6008      	str	r0, [r1, #0]
    b604:	bd10      	pop	{r4, pc}
    b606:	0000      	.short	0x0000
    b608:	40001510 	.word	0x40001510

0000b60c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b60c:	4770      	bx	lr
    b60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b612:	000d      	movs	r5, r1
    b614:	4604      	mov	r4, r0
    b616:	f04f 0602 	mov.w	r6, #2
    b61a:	f04f 0701 	mov.w	r7, #1
    b61e:	d008      	beq.n	b632 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    b620:	7828      	ldrb	r0, [r5, #0]
    b622:	b1d0      	cbz	r0, b65a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b624:	2801      	cmp	r0, #1
    b626:	d007      	beq.n	b638 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    b628:	2802      	cmp	r0, #2
    b62a:	d014      	beq.n	b656 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b62c:	2803      	cmp	r0, #3
    b62e:	d13b      	bne.n	b6a8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b630:	e016      	b.n	b660 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    b632:	f880 7020 	strb.w	r7, [r0, #32]
    b636:	e00e      	b.n	b656 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b638:	6868      	ldr	r0, [r5, #4]
    b63a:	28c8      	cmp	r0, #200	; 0xc8
    b63c:	d303      	bcc.n	b646 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    b63e:	2104      	movs	r1, #4
    b640:	f7f5 ff02 	bl	1448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    b644:	b108      	cbz	r0, b64a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    b646:	2600      	movs	r6, #0
    b648:	e007      	b.n	b65a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b64a:	4620      	mov	r0, r4
    b64c:	6869      	ldr	r1, [r5, #4]
    b64e:	f000 f92a 	bl	b8a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b652:	2601      	movs	r6, #1
    b654:	e001      	b.n	b65a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b656:	f7f4 ff15 	bl	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
    b65a:	4630      	mov	r0, r6
    b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b660:	7820      	ldrb	r0, [r4, #0]
    b662:	2800      	cmp	r0, #0
    b664:	d1f7      	bne.n	b656 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b666:	6868      	ldr	r0, [r5, #4]
    b668:	f7f4 fede 	bl	428 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x28>
    b66c:	b1e0      	cbz	r0, b6a8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b66e:	6869      	ldr	r1, [r5, #4]
    b670:	7808      	ldrb	r0, [r1, #0]
    b672:	b128      	cbz	r0, b680 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    b674:	78a0      	ldrb	r0, [r4, #2]
    b676:	2805      	cmp	r0, #5
    b678:	d007      	beq.n	b68a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    b67a:	f240 1179 	movw	r1, #377	; 0x179
    b67e:	e010      	b.n	b6a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    b680:	4620      	mov	r0, r4
    b682:	f000 f918 	bl	b8b6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    b686:	7067      	strb	r7, [r4, #1]
    b688:	e7e5      	b.n	b656 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b68a:	4620      	mov	r0, r4
    b68c:	f000 f92b 	bl	b8e6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    b690:	78e0      	ldrb	r0, [r4, #3]
    b692:	f104 010c 	add.w	r1, r4, #12
    b696:	f000 f80a 	bl	b6ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b69a:	2800      	cmp	r0, #0
    b69c:	d1db      	bne.n	b656 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b69e:	f240 117b 	movw	r1, #379	; 0x17b
    b6a2:	206a      	movs	r0, #106	; 0x6a
    b6a4:	f7f8 f8a0 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6a8:	f884 7020 	strb.w	r7, [r4, #32]
    b6ac:	e7d3      	b.n	b656 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b6ae:	f7f6 b901 	b.w	18b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6b6:	460d      	mov	r5, r1
    b6b8:	0004      	movs	r4, r0
    b6ba:	d00b      	beq.n	b6d4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    b6bc:	7926      	ldrb	r6, [r4, #4]
    b6be:	2700      	movs	r7, #0
    b6c0:	2002      	movs	r0, #2
    b6c2:	2d09      	cmp	r5, #9
    b6c4:	d27b      	bcs.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    b6c6:	e8df f005 	tbb	[pc, r5]
    b6ca:	1008      	.short	0x1008
    b6cc:	645b2e2e 	.word	0x645b2e2e
    b6d0:	0086977c 	.word	0x0086977c
    b6d4:	f240 1193 	movw	r1, #403	; 0x193
    b6d8:	e0e2      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b6da:	78a0      	ldrb	r0, [r4, #2]
    b6dc:	2804      	cmp	r0, #4
    b6de:	d06f      	beq.n	b7c0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    b6e0:	2803      	cmp	r0, #3
    b6e2:	d0fc      	beq.n	b6de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    b6e4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    b6e8:	e0da      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b6ea:	78a0      	ldrb	r0, [r4, #2]
    b6ec:	2804      	cmp	r0, #4
    b6ee:	d004      	beq.n	b6fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b6f0:	2803      	cmp	r0, #3
    b6f2:	d002      	beq.n	b6fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b6f4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    b6f8:	e0d2      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b6fa:	2005      	movs	r0, #5
    b6fc:	70a0      	strb	r0, [r4, #2]
    b6fe:	f884 7020 	strb.w	r7, [r4, #32]
    b702:	7820      	ldrb	r0, [r4, #0]
    b704:	bb80      	cbnz	r0, b768 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    b706:	2100      	movs	r1, #0
    b708:	4620      	mov	r0, r4
    b70a:	f000 f8cc 	bl	b8a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b70e:	7b20      	ldrb	r0, [r4, #12]
    b710:	2801      	cmp	r0, #1
    b712:	d004      	beq.n	b71e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    b714:	69a0      	ldr	r0, [r4, #24]
    b716:	61e0      	str	r0, [r4, #28]
    b718:	2100      	movs	r1, #0
    b71a:	68a2      	ldr	r2, [r4, #8]
    b71c:	e041      	b.n	b7a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b71e:	78e0      	ldrb	r0, [r4, #3]
    b720:	f7f5 ffaa 	bl	1678 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    b724:	e7f7      	b.n	b716 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    b726:	78a1      	ldrb	r1, [r4, #2]
    b728:	2904      	cmp	r1, #4
    b72a:	d004      	beq.n	b736 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b72c:	2903      	cmp	r1, #3
    b72e:	d002      	beq.n	b736 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b730:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    b734:	e0b4      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b736:	7822      	ldrb	r2, [r4, #0]
    b738:	b122      	cbz	r2, b744 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    b73a:	4621      	mov	r1, r4
    b73c:	4630      	mov	r0, r6
    b73e:	f000 f8ee 	bl	b91e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b742:	e0a4      	b.n	b88e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b744:	2904      	cmp	r1, #4
    b746:	d000      	beq.n	b74a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    b748:	2001      	movs	r0, #1
    b74a:	70a0      	strb	r0, [r4, #2]
    b74c:	68a2      	ldr	r2, [r4, #8]
    b74e:	2d02      	cmp	r5, #2
    b750:	d00b      	beq.n	b76a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    b752:	2106      	movs	r1, #6
    b754:	4630      	mov	r0, r6
    b756:	4790      	blx	r2
    b758:	2800      	cmp	r0, #0
    b75a:	d06b      	beq.n	b834 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b75c:	7800      	ldrb	r0, [r0, #0]
    b75e:	2800      	cmp	r0, #0
    b760:	d068      	beq.n	b834 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b762:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    b766:	e09b      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b768:	e031      	b.n	b7ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b76a:	2105      	movs	r1, #5
    b76c:	4630      	mov	r0, r6
    b76e:	4790      	blx	r2
    b770:	2800      	cmp	r0, #0
    b772:	d071      	beq.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b774:	7800      	ldrb	r0, [r0, #0]
    b776:	2800      	cmp	r0, #0
    b778:	d06e      	beq.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b77a:	f240 11d5 	movw	r1, #469	; 0x1d5
    b77e:	e08f      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b780:	78a0      	ldrb	r0, [r4, #2]
    b782:	2805      	cmp	r0, #5
    b784:	d002      	beq.n	b78c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    b786:	f240 11e1 	movw	r1, #481	; 0x1e1
    b78a:	e089      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b78c:	2102      	movs	r1, #2
    b78e:	68a2      	ldr	r2, [r4, #8]
    b790:	e007      	b.n	b7a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b792:	78a0      	ldrb	r0, [r4, #2]
    b794:	2805      	cmp	r0, #5
    b796:	d002      	beq.n	b79e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    b798:	f240 11e7 	movw	r1, #487	; 0x1e7
    b79c:	e080      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b79e:	68a2      	ldr	r2, [r4, #8]
    b7a0:	2101      	movs	r1, #1
    b7a2:	4630      	mov	r0, r6
    b7a4:	4790      	blx	r2
    b7a6:	4601      	mov	r1, r0
    b7a8:	4620      	mov	r0, r4
    b7aa:	f7ff ff30 	bl	b60e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b7ae:	2802      	cmp	r0, #2
    b7b0:	d06d      	beq.n	b88e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b7b2:	b3f0      	cbz	r0, b832 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    b7b4:	2801      	cmp	r0, #1
    b7b6:	d064      	beq.n	b882 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    b7b8:	f240 2127 	movw	r1, #551	; 0x227
    b7bc:	e070      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7be:	e05d      	b.n	b87c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    b7c0:	e067      	b.n	b892 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    b7c2:	78a0      	ldrb	r0, [r4, #2]
    b7c4:	2805      	cmp	r0, #5
    b7c6:	d002      	beq.n	b7ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b7c8:	f240 11ed 	movw	r1, #493	; 0x1ed
    b7cc:	e068      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7d2:	f7f4 be57 	b.w	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
    b7d6:	78a0      	ldrb	r0, [r4, #2]
    b7d8:	2805      	cmp	r0, #5
    b7da:	d002      	beq.n	b7e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    b7dc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    b7e0:	e05e      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7e2:	68a2      	ldr	r2, [r4, #8]
    b7e4:	210a      	movs	r1, #10
    b7e6:	4630      	mov	r0, r6
    b7e8:	4790      	blx	r2
    b7ea:	4601      	mov	r1, r0
    b7ec:	4620      	mov	r0, r4
    b7ee:	f7ff ff0e 	bl	b60e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b7f2:	f240 11f5 	movw	r1, #501	; 0x1f5
    b7f6:	e053      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7f8:	78a1      	ldrb	r1, [r4, #2]
    b7fa:	2905      	cmp	r1, #5
    b7fc:	d006      	beq.n	b80c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b7fe:	7862      	ldrb	r2, [r4, #1]
    b800:	b10a      	cbz	r2, b806 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    b802:	2903      	cmp	r1, #3
    b804:	d002      	beq.n	b80c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b806:	f240 11f9 	movw	r1, #505	; 0x1f9
    b80a:	e049      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b80c:	7821      	ldrb	r1, [r4, #0]
    b80e:	b129      	cbz	r1, b81c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    b810:	4621      	mov	r1, r4
    b812:	4630      	mov	r0, r6
    b814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b818:	f000 b881 	b.w	b91e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b81c:	f894 1020 	ldrb.w	r1, [r4, #32]
    b820:	b189      	cbz	r1, b846 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    b822:	f884 7020 	strb.w	r7, [r4, #32]
    b826:	70a0      	strb	r0, [r4, #2]
    b828:	68a2      	ldr	r2, [r4, #8]
    b82a:	2108      	movs	r1, #8
    b82c:	4630      	mov	r0, r6
    b82e:	4790      	blx	r2
    b830:	e001      	b.n	b836 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    b832:	e029      	b.n	b888 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    b834:	e02b      	b.n	b88e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b836:	2800      	cmp	r0, #0
    b838:	d00e      	beq.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b83a:	7800      	ldrb	r0, [r0, #0]
    b83c:	2800      	cmp	r0, #0
    b83e:	d00b      	beq.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b840:	f240 2105 	movw	r1, #517	; 0x205
    b844:	e02c      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b846:	7861      	ldrb	r1, [r4, #1]
    b848:	b159      	cbz	r1, b862 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    b84a:	78e0      	ldrb	r0, [r4, #3]
    b84c:	f104 010c 	add.w	r1, r4, #12
    b850:	f7ff ff2d 	bl	b6ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b854:	b110      	cbz	r0, b85c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    b856:	7067      	strb	r7, [r4, #1]
    b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b85c:	f240 2109 	movw	r1, #521	; 0x209
    b860:	e01e      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b862:	70a0      	strb	r0, [r4, #2]
    b864:	68a2      	ldr	r2, [r4, #8]
    b866:	2107      	movs	r1, #7
    b868:	4630      	mov	r0, r6
    b86a:	4790      	blx	r2
    b86c:	2800      	cmp	r0, #0
    b86e:	d0f3      	beq.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b870:	7800      	ldrb	r0, [r0, #0]
    b872:	2800      	cmp	r0, #0
    b874:	d0f0      	beq.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b876:	f240 2111 	movw	r1, #529	; 0x211
    b87a:	e011      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b87c:	f240 2116 	movw	r1, #534	; 0x216
    b880:	e00e      	b.n	b8a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b882:	2104      	movs	r1, #4
    b884:	68a2      	ldr	r2, [r4, #8]
    b886:	e78c      	b.n	b7a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b888:	2103      	movs	r1, #3
    b88a:	68a2      	ldr	r2, [r4, #8]
    b88c:	e789      	b.n	b7a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b88e:	2d00      	cmp	r5, #0
    b890:	d1e2      	bne.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b892:	f000 f8f2 	bl	ba7a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    b896:	6800      	ldr	r0, [r0, #0]
    b898:	2800      	cmp	r0, #0
    b89a:	d0dd      	beq.n	b858 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b89c:	f240 2131 	movw	r1, #561	; 0x231
    b8a0:	206a      	movs	r0, #106	; 0x6a
    b8a2:	f7f7 ffa1 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8a6:	4602      	mov	r2, r0
    b8a8:	7b03      	ldrb	r3, [r0, #12]
    b8aa:	6900      	ldr	r0, [r0, #16]
    b8ac:	4408      	add	r0, r1
    b8ae:	6110      	str	r0, [r2, #16]
    b8b0:	3859      	subs	r0, #89	; 0x59
    b8b2:	f7f6 be5d 	b.w	2570 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    b8b6:	2201      	movs	r2, #1
    b8b8:	7302      	strb	r2, [r0, #12]
    b8ba:	2200      	movs	r2, #0
    b8bc:	75c2      	strb	r2, [r0, #23]
    b8be:	790a      	ldrb	r2, [r1, #4]
    b8c0:	b16a      	cbz	r2, b8de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    b8c2:	2200      	movs	r2, #0
    b8c4:	8282      	strh	r2, [r0, #20]
    b8c6:	794a      	ldrb	r2, [r1, #5]
    b8c8:	b15a      	cbz	r2, b8e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
    b8ca:	2204      	movs	r2, #4
    b8cc:	7582      	strb	r2, [r0, #22]
    b8ce:	688a      	ldr	r2, [r1, #8]
    b8d0:	326a      	adds	r2, #106	; 0x6a
    b8d2:	6102      	str	r2, [r0, #16]
    b8d4:	68c9      	ldr	r1, [r1, #12]
    b8d6:	6181      	str	r1, [r0, #24]
    b8d8:	2103      	movs	r1, #3
    b8da:	7081      	strb	r1, [r0, #2]
    b8dc:	4770      	bx	lr
    b8de:	222b      	movs	r2, #43	; 0x2b
    b8e0:	e7f0      	b.n	b8c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
    b8e2:	2203      	movs	r2, #3
    b8e4:	e7f2      	b.n	b8cc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
    b8e6:	b510      	push	{r4, lr}
    b8e8:	4604      	mov	r4, r0
    b8ea:	2000      	movs	r0, #0
    b8ec:	7320      	strb	r0, [r4, #12]
    b8ee:	75e0      	strb	r0, [r4, #23]
    b8f0:	7908      	ldrb	r0, [r1, #4]
    b8f2:	b180      	cbz	r0, b916 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
    b8f4:	2000      	movs	r0, #0
    b8f6:	82a0      	strh	r0, [r4, #20]
    b8f8:	7948      	ldrb	r0, [r1, #5]
    b8fa:	b170      	cbz	r0, b91a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
    b8fc:	2004      	movs	r0, #4
    b8fe:	75a0      	strb	r0, [r4, #22]
    b900:	68c8      	ldr	r0, [r1, #12]
    b902:	306a      	adds	r0, #106	; 0x6a
    b904:	6120      	str	r0, [r4, #16]
    b906:	6889      	ldr	r1, [r1, #8]
    b908:	69e0      	ldr	r0, [r4, #28]
    b90a:	f7f5 fe5f 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    b90e:	61a0      	str	r0, [r4, #24]
    b910:	2004      	movs	r0, #4
    b912:	70a0      	strb	r0, [r4, #2]
    b914:	bd10      	pop	{r4, pc}
    b916:	202b      	movs	r0, #43	; 0x2b
    b918:	e7ed      	b.n	b8f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
    b91a:	2003      	movs	r0, #3
    b91c:	e7ef      	b.n	b8fe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
    b91e:	b570      	push	{r4, r5, r6, lr}
    b920:	4605      	mov	r5, r0
    b922:	460c      	mov	r4, r1
    b924:	78c8      	ldrb	r0, [r1, #3]
    b926:	f7f6 fbf7 	bl	2118 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b92a:	b178      	cbz	r0, b94c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
    b92c:	4620      	mov	r0, r4
    b92e:	f000 f810 	bl	b952 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    b932:	68a2      	ldr	r2, [r4, #8]
    b934:	2109      	movs	r1, #9
    b936:	4628      	mov	r0, r5
    b938:	4790      	blx	r2
    b93a:	2800      	cmp	r0, #0
    b93c:	d008      	beq.n	b950 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    b93e:	7800      	ldrb	r0, [r0, #0]
    b940:	2800      	cmp	r0, #0
    b942:	d005      	beq.n	b950 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    b944:	21db      	movs	r1, #219	; 0xdb
    b946:	206a      	movs	r0, #106	; 0x6a
    b948:	f7f7 ff4e 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b94c:	21d7      	movs	r1, #215	; 0xd7
    b94e:	e7fa      	b.n	b946 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
    b950:	bd70      	pop	{r4, r5, r6, pc}
    b952:	2100      	movs	r1, #0
    b954:	7081      	strb	r1, [r0, #2]
    b956:	7001      	strb	r1, [r0, #0]
    b958:	7041      	strb	r1, [r0, #1]
    b95a:	4770      	bx	lr

0000b95c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    b95c:	b570      	push	{r4, r5, r6, lr}
    b95e:	f7f4 fdeb 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    b962:	4605      	mov	r5, r0
    b964:	2400      	movs	r4, #0
    b966:	e006      	b.n	b976 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    b968:	4620      	mov	r0, r4
    b96a:	f7f4 fdeb 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b96e:	f7ff fff0 	bl	b952 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    b972:	1c64      	adds	r4, r4, #1
    b974:	b2e4      	uxtb	r4, r4
    b976:	42ac      	cmp	r4, r5
    b978:	d3f6      	bcc.n	b968 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    b97a:	bd70      	pop	{r4, r5, r6, pc}

0000b97c <mpsl_timeslot_request>:
    b97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b980:	460d      	mov	r5, r1
    b982:	f7f4 fddf 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b986:	0004      	movs	r4, r0
    b988:	d007      	beq.n	b99a <mpsl_timeslot_request+0x1e>
    b98a:	78a0      	ldrb	r0, [r4, #2]
    b98c:	f06f 0622 	mvn.w	r6, #34	; 0x22
    b990:	2801      	cmp	r0, #1
    b992:	d006      	beq.n	b9a2 <mpsl_timeslot_request+0x26>
    b994:	2802      	cmp	r0, #2
    b996:	d110      	bne.n	b9ba <mpsl_timeslot_request+0x3e>
    b998:	e003      	b.n	b9a2 <mpsl_timeslot_request+0x26>
    b99a:	f06f 0001 	mvn.w	r0, #1
    b99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9a2:	f06f 0715 	mvn.w	r7, #21
    b9a6:	b155      	cbz	r5, b9be <mpsl_timeslot_request+0x42>
    b9a8:	4628      	mov	r0, r5
    b9aa:	f7f4 fd3d 	bl	428 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x28>
    b9ae:	b130      	cbz	r0, b9be <mpsl_timeslot_request+0x42>
    b9b0:	7828      	ldrb	r0, [r5, #0]
    b9b2:	b130      	cbz	r0, b9c2 <mpsl_timeslot_request+0x46>
    b9b4:	78a0      	ldrb	r0, [r4, #2]
    b9b6:	2802      	cmp	r0, #2
    b9b8:	d008      	beq.n	b9cc <mpsl_timeslot_request+0x50>
    b9ba:	4630      	mov	r0, r6
    b9bc:	e7ef      	b.n	b99e <mpsl_timeslot_request+0x22>
    b9be:	4638      	mov	r0, r7
    b9c0:	e7ed      	b.n	b99e <mpsl_timeslot_request+0x22>
    b9c2:	4629      	mov	r1, r5
    b9c4:	4620      	mov	r0, r4
    b9c6:	f7ff ff76 	bl	b8b6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    b9ca:	e003      	b.n	b9d4 <mpsl_timeslot_request+0x58>
    b9cc:	4629      	mov	r1, r5
    b9ce:	4620      	mov	r0, r4
    b9d0:	f7ff ff89 	bl	b8e6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    b9d4:	78e0      	ldrb	r0, [r4, #3]
    b9d6:	f104 010c 	add.w	r1, r4, #12
    b9da:	f7ff fe68 	bl	b6ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b9de:	b108      	cbz	r0, b9e4 <mpsl_timeslot_request+0x68>
    b9e0:	2000      	movs	r0, #0
    b9e2:	e7dc      	b.n	b99e <mpsl_timeslot_request+0x22>
    b9e4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    b9e8:	206a      	movs	r0, #106	; 0x6a
    b9ea:	f7f7 fefd 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000b9ee <mpsl_timeslot_session_close>:
    b9ee:	b510      	push	{r4, lr}
    b9f0:	4604      	mov	r4, r0
    b9f2:	f7f4 fda7 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b9f6:	0001      	movs	r1, r0
    b9f8:	d004      	beq.n	ba04 <mpsl_timeslot_session_close+0x16>
    b9fa:	7808      	ldrb	r0, [r1, #0]
    b9fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
    ba00:	b968      	cbnz	r0, ba1e <mpsl_timeslot_session_close+0x30>
    ba02:	e002      	b.n	ba0a <mpsl_timeslot_session_close+0x1c>
    ba04:	f06f 0001 	mvn.w	r0, #1
    ba08:	bd10      	pop	{r4, pc}
    ba0a:	7888      	ldrb	r0, [r1, #2]
    ba0c:	b138      	cbz	r0, ba1e <mpsl_timeslot_session_close+0x30>
    ba0e:	2802      	cmp	r0, #2
    ba10:	d007      	beq.n	ba22 <mpsl_timeslot_session_close+0x34>
    ba12:	2801      	cmp	r0, #1
    ba14:	d005      	beq.n	ba22 <mpsl_timeslot_session_close+0x34>
    ba16:	2001      	movs	r0, #1
    ba18:	7008      	strb	r0, [r1, #0]
    ba1a:	2000      	movs	r0, #0
    ba1c:	bd10      	pop	{r4, pc}
    ba1e:	4610      	mov	r0, r2
    ba20:	bd10      	pop	{r4, pc}
    ba22:	4620      	mov	r0, r4
    ba24:	f7ff ff7b 	bl	b91e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    ba28:	e7f7      	b.n	ba1a <mpsl_timeslot_session_close+0x2c>

0000ba2a <mpsl_timeslot_session_count_set>:
    ba2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba2e:	460e      	mov	r6, r1
    ba30:	4607      	mov	r7, r0
    ba32:	f7f4 fd81 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ba36:	4605      	mov	r5, r0
    ba38:	2400      	movs	r4, #0
    ba3a:	e00a      	b.n	ba52 <mpsl_timeslot_session_count_set+0x28>
    ba3c:	4620      	mov	r0, r4
    ba3e:	f7f4 fd81 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ba42:	7880      	ldrb	r0, [r0, #2]
    ba44:	b118      	cbz	r0, ba4e <mpsl_timeslot_session_count_set+0x24>
    ba46:	f04f 30ff 	mov.w	r0, #4294967295
    ba4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba4e:	1c64      	adds	r4, r4, #1
    ba50:	b2e4      	uxtb	r4, r4
    ba52:	42ac      	cmp	r4, r5
    ba54:	d3f2      	bcc.n	ba3c <mpsl_timeslot_session_count_set+0x12>
    ba56:	2e08      	cmp	r6, #8
    ba58:	d902      	bls.n	ba60 <mpsl_timeslot_session_count_set+0x36>
    ba5a:	f06f 0015 	mvn.w	r0, #21
    ba5e:	e7f4      	b.n	ba4a <mpsl_timeslot_session_count_set+0x20>
    ba60:	b117      	cbz	r7, ba68 <mpsl_timeslot_session_count_set+0x3e>
    ba62:	4631      	mov	r1, r6
    ba64:	4638      	mov	r0, r7
    ba66:	e001      	b.n	ba6c <mpsl_timeslot_session_count_set+0x42>
    ba68:	2100      	movs	r1, #0
    ba6a:	4608      	mov	r0, r1
    ba6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba70:	f7f4 bd4e 	b.w	510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000ba74 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    ba74:	2000      	movs	r0, #0
    ba76:	f7f7 baf5 	b.w	3064 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000ba7a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    ba7a:	2000      	movs	r0, #0
    ba7c:	f7f7 bad8 	b.w	3030 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000ba80 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    ba80:	b510      	push	{r4, lr}
    ba82:	f7f6 ffc1 	bl	2a08 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ba86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba8a:	f000 b80b 	b.w	baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000ba8e <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>:
    ba8e:	0a41      	lsrs	r1, r0, #9
    ba90:	f643 5209 	movw	r2, #15625	; 0x3d09
    ba94:	4351      	muls	r1, r2
    ba96:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ba9a:	fb10 f002 	smulbb	r0, r0, r2
    ba9e:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    baa2:	4770      	bx	lr

0000baa4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    baa4:	0a41      	lsrs	r1, r0, #9
    baa6:	f643 5209 	movw	r2, #15625	; 0x3d09
    baaa:	4351      	muls	r1, r2
    baac:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bab0:	fb10 f002 	smulbb	r0, r0, r2
    bab4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    bab8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    babc:	4770      	bx	lr

0000babe <MPSL_IRQ_RADIO_Handler>:
    babe:	f7f5 bdef 	b.w	16a0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    bac2:	2800      	cmp	r0, #0
    bac4:	db09      	blt.n	bada <MPSL_IRQ_RADIO_Handler+0x1c>
    bac6:	f000 021f 	and.w	r2, r0, #31
    baca:	2101      	movs	r1, #1
    bacc:	4091      	lsls	r1, r2
    bace:	0940      	lsrs	r0, r0, #5
    bad0:	0080      	lsls	r0, r0, #2
    bad2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bad6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bada:	4770      	bx	lr
    badc:	2800      	cmp	r0, #0
    bade:	db0d      	blt.n	bafc <MPSL_IRQ_RADIO_Handler+0x3e>
    bae0:	f000 021f 	and.w	r2, r0, #31
    bae4:	2101      	movs	r1, #1
    bae6:	4091      	lsls	r1, r2
    bae8:	0940      	lsrs	r0, r0, #5
    baea:	0080      	lsls	r0, r0, #2
    baec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    baf0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    baf4:	f3bf 8f4f 	dsb	sy
    baf8:	f3bf 8f6f 	isb	sy
    bafc:	4770      	bx	lr

0000bafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bafe:	b570      	push	{r4, r5, r6, lr}
    bb00:	4602      	mov	r2, r0
    bb02:	2000      	movs	r0, #0
    bb04:	2900      	cmp	r1, #0
    bb06:	d01d      	beq.n	bb44 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    bb08:	fba2 0101 	umull	r0, r1, r2, r1
    bb0c:	0a40      	lsrs	r0, r0, #9
    bb0e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bb12:	0a49      	lsrs	r1, r1, #9
    bb14:	1c40      	adds	r0, r0, #1
    bb16:	f141 0100 	adc.w	r1, r1, #0
    bb1a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bb1e:	1883      	adds	r3, r0, r2
    bb20:	f141 0100 	adc.w	r1, r1, #0
    bb24:	1c5b      	adds	r3, r3, #1
    bb26:	f141 0400 	adc.w	r4, r1, #0
    bb2a:	2100      	movs	r1, #0
    bb2c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    bb30:	41a1      	sbcs	r1, r4
    bb32:	d203      	bcs.n	bb3c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bb34:	2171      	movs	r1, #113	; 0x71
    bb36:	206d      	movs	r0, #109	; 0x6d
    bb38:	f7f7 fe56 	bl	37e8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb3c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bb40:	fbb0 f0f2 	udiv	r0, r0, r2
    bb44:	bd70      	pop	{r4, r5, r6, pc}
    bb46:	5840      	ldr	r0, [r0, r1]
    bb48:	2800      	cmp	r0, #0
    bb4a:	d000      	beq.n	bb4e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bb4c:	2001      	movs	r0, #1
    bb4e:	4770      	bx	lr
    bb50:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bb54:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bb58:	f002 0201 	and.w	r2, r2, #1
    bb5c:	03c0      	lsls	r0, r0, #15
    bb5e:	d503      	bpl.n	bb68 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bb60:	428a      	cmp	r2, r1
    bb62:	d101      	bne.n	bb68 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bb64:	2001      	movs	r0, #1
    bb66:	4770      	bx	lr
    bb68:	2000      	movs	r0, #0
    bb6a:	4770      	bx	lr

0000bb6c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bb6c:	b510      	push	{r4, lr}
    bb6e:	2101      	movs	r1, #1
    bb70:	0788      	lsls	r0, r1, #30
    bb72:	f7f7 fdf7 	bl	3764 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bb76:	2800      	cmp	r0, #0
    bb78:	d000      	beq.n	bb7c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bb7a:	2001      	movs	r0, #1
    bb7c:	bd10      	pop	{r4, pc}

0000bb7e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bb7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bb82:	2101      	movs	r1, #1
    bb84:	6001      	str	r1, [r0, #0]
    bb86:	4770      	bx	lr

0000bb88 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bb88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bb8c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bb90:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bb94:	f002 0203 	and.w	r2, r2, #3
    bb98:	03c9      	lsls	r1, r1, #15
    bb9a:	d503      	bpl.n	bba4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bb9c:	4282      	cmp	r2, r0
    bb9e:	d101      	bne.n	bba4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bba0:	2001      	movs	r0, #1
    bba2:	4770      	bx	lr
    bba4:	2000      	movs	r0, #0
    bba6:	4770      	bx	lr

0000bba8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bba8:	b510      	push	{r4, lr}
    bbaa:	2100      	movs	r1, #0
    bbac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bbb0:	f7f7 fdd8 	bl	3764 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bbb4:	2800      	cmp	r0, #0
    bbb6:	d000      	beq.n	bbba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bbb8:	2001      	movs	r0, #1
    bbba:	bd10      	pop	{r4, pc}
    bbbc:	2800      	cmp	r0, #0
    bbbe:	db09      	blt.n	bbd4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bbc0:	f000 021f 	and.w	r2, r0, #31
    bbc4:	2101      	movs	r1, #1
    bbc6:	4091      	lsls	r1, r2
    bbc8:	0940      	lsrs	r0, r0, #5
    bbca:	0080      	lsls	r0, r0, #2
    bbcc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bbd0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bbd4:	4770      	bx	lr
    bbd6:	2800      	cmp	r0, #0
    bbd8:	db0d      	blt.n	bbf6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bbda:	f000 021f 	and.w	r2, r0, #31
    bbde:	2101      	movs	r1, #1
    bbe0:	4091      	lsls	r1, r2
    bbe2:	0940      	lsrs	r0, r0, #5
    bbe4:	0080      	lsls	r0, r0, #2
    bbe6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bbea:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bbee:	f3bf 8f4f 	dsb	sy
    bbf2:	f3bf 8f6f 	isb	sy
    bbf6:	4770      	bx	lr
    bbf8:	00021000 	.word	0x00021000
    bbfc:	000000fa 	.word	0x000000fa
    bc00:	cd328aac 	.word	0xcd328aac
    bc04:	09dd6d0b 	.word	0x09dd6d0b
    bc08:	8494d80b 	.word	0x8494d80b
    bc0c:	bff32eb7 	.word	0xbff32eb7
    bc10:	7bd81808 	.word	0x7bd81808
    bc14:	2800      	cmp	r0, #0
    bc16:	db09      	blt.n	bc2c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bc18:	f000 021f 	and.w	r2, r0, #31
    bc1c:	2101      	movs	r1, #1
    bc1e:	4091      	lsls	r1, r2
    bc20:	0940      	lsrs	r0, r0, #5
    bc22:	0080      	lsls	r0, r0, #2
    bc24:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc28:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bc2c:	4770      	bx	lr

0000bc2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    bc2e:	f3ef 8110 	mrs	r1, PRIMASK
    bc32:	b672      	cpsid	i
    bc34:	7802      	ldrb	r2, [r0, #0]
    bc36:	2a01      	cmp	r2, #1
    bc38:	d001      	beq.n	bc3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    bc3a:	2201      	movs	r2, #1
    bc3c:	e000      	b.n	bc40 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    bc3e:	2200      	movs	r2, #0
    bc40:	2301      	movs	r3, #1
    bc42:	7003      	strb	r3, [r0, #0]
    bc44:	b901      	cbnz	r1, bc48 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    bc46:	b662      	cpsie	i
    bc48:	b10a      	cbz	r2, bc4e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    bc4a:	2000      	movs	r0, #0
    bc4c:	4770      	bx	lr
    bc4e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bc52:	4770      	bx	lr

0000bc54 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    bc54:	2100      	movs	r1, #0
    bc56:	7001      	strb	r1, [r0, #0]
    bc58:	4608      	mov	r0, r1
    bc5a:	4770      	bx	lr

0000bc5c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    bc5c:	f3ef 8110 	mrs	r1, PRIMASK
    bc60:	b672      	cpsid	i
    bc62:	2200      	movs	r2, #0
    bc64:	7002      	strb	r2, [r0, #0]
    bc66:	b901      	cbnz	r1, bc6a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    bc68:	b662      	cpsie	i
    bc6a:	2000      	movs	r0, #0
    bc6c:	4770      	bx	lr

0000bc6e <mpsl_low_priority_process>:
    bc6e:	f7f7 bea7 	b.w	39c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000bc72 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    bc72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bc76:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bc7a:	280f      	cmp	r0, #15
    bc7c:	d001      	beq.n	bc82 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    bc7e:	2000      	movs	r0, #0
    bc80:	4770      	bx	lr
    bc82:	2001      	movs	r0, #1
    bc84:	4770      	bx	lr

0000bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    bc86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bc8a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bc8e:	280a      	cmp	r0, #10
    bc90:	d001      	beq.n	bc96 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    bc92:	2000      	movs	r0, #0
    bc94:	4770      	bx	lr
    bc96:	2001      	movs	r0, #1
    bc98:	4770      	bx	lr

0000bc9a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    bc9a:	b500      	push	{lr}
    bc9c:	f7ff fff3 	bl	bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bca0:	b120      	cbz	r0, bcac <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    bca2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bca6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bcaa:	b108      	cbz	r0, bcb0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    bcac:	2000      	movs	r0, #0
    bcae:	bd00      	pop	{pc}
    bcb0:	2001      	movs	r0, #1
    bcb2:	bd00      	pop	{pc}

0000bcb4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    bcb4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bcb8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bcbc:	280e      	cmp	r0, #14
    bcbe:	d001      	beq.n	bcc4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    bcc0:	2000      	movs	r0, #0
    bcc2:	4770      	bx	lr
    bcc4:	2001      	movs	r0, #1
    bcc6:	4770      	bx	lr

0000bcc8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    bcc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bccc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bcd0:	2810      	cmp	r0, #16
    bcd2:	d001      	beq.n	bcd8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    bcd4:	2000      	movs	r0, #0
    bcd6:	4770      	bx	lr
    bcd8:	2001      	movs	r0, #1
    bcda:	4770      	bx	lr

0000bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    bcdc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bce0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bce4:	2806      	cmp	r0, #6
    bce6:	d003      	beq.n	bcf0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    bce8:	1c40      	adds	r0, r0, #1
    bcea:	d001      	beq.n	bcf0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    bcec:	2000      	movs	r0, #0
    bcee:	4770      	bx	lr
    bcf0:	2001      	movs	r0, #1
    bcf2:	4770      	bx	lr

0000bcf4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    bcf4:	b500      	push	{lr}
    bcf6:	f7ff fff1 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bcfa:	b148      	cbz	r0, bd10 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bcfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bd00:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bd04:	2806      	cmp	r0, #6
    bd06:	d303      	bcc.n	bd10 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bd08:	1c40      	adds	r0, r0, #1
    bd0a:	d001      	beq.n	bd10 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bd0c:	2001      	movs	r0, #1
    bd0e:	bd00      	pop	{pc}
    bd10:	2000      	movs	r0, #0
    bd12:	bd00      	pop	{pc}

0000bd14 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    bd14:	b500      	push	{lr}
    bd16:	f7ff ffe1 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd1a:	b138      	cbz	r0, bd2c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    bd1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bd20:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bd24:	2806      	cmp	r0, #6
    bd26:	d303      	bcc.n	bd30 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bd28:	1c40      	adds	r0, r0, #1
    bd2a:	d001      	beq.n	bd30 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bd2c:	2000      	movs	r0, #0
    bd2e:	bd00      	pop	{pc}
    bd30:	2001      	movs	r0, #1
    bd32:	bd00      	pop	{pc}

0000bd34 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    bd34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bd38:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bd3c:	280d      	cmp	r0, #13
    bd3e:	d001      	beq.n	bd44 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    bd40:	2000      	movs	r0, #0
    bd42:	4770      	bx	lr
    bd44:	2001      	movs	r0, #1
    bd46:	4770      	bx	lr

0000bd48 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    bd48:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bd4c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bd50:	2808      	cmp	r0, #8
    bd52:	d001      	beq.n	bd58 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    bd54:	2000      	movs	r0, #0
    bd56:	4770      	bx	lr
    bd58:	2001      	movs	r0, #1
    bd5a:	4770      	bx	lr

0000bd5c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    bd5c:	2a00      	cmp	r2, #0
    bd5e:	bf04      	itt	eq
    bd60:	2000      	moveq	r0, #0
    bd62:	4770      	bxeq	lr
    bd64:	1e52      	subs	r2, r2, #1
    bd66:	d007      	beq.n	bd78 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    bd68:	7803      	ldrb	r3, [r0, #0]
    bd6a:	f891 c000 	ldrb.w	ip, [r1]
    bd6e:	4563      	cmp	r3, ip
    bd70:	bf04      	itt	eq
    bd72:	1c40      	addeq	r0, r0, #1
    bd74:	1c49      	addeq	r1, r1, #1
    bd76:	d0f5      	beq.n	bd64 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    bd78:	7800      	ldrb	r0, [r0, #0]
    bd7a:	7809      	ldrb	r1, [r1, #0]
    bd7c:	1a40      	subs	r0, r0, r1
    bd7e:	4770      	bx	lr

0000bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    bd80:	b4f0      	push	{r4, r5, r6, r7}
    bd82:	ea80 0c01 	eor.w	ip, r0, r1
    bd86:	4603      	mov	r3, r0
    bd88:	f01c 0f03 	tst.w	ip, #3
    bd8c:	d13c      	bne.n	be08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bd8e:	f013 0f03 	tst.w	r3, #3
    bd92:	d00b      	beq.n	bdac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    bd94:	2a00      	cmp	r2, #0
    bd96:	bf04      	itt	eq
    bd98:	bcf0      	popeq	{r4, r5, r6, r7}
    bd9a:	4770      	bxeq	lr
    bd9c:	f811 cb01 	ldrb.w	ip, [r1], #1
    bda0:	f803 cb01 	strb.w	ip, [r3], #1
    bda4:	1e52      	subs	r2, r2, #1
    bda6:	f013 0f03 	tst.w	r3, #3
    bdaa:	d1f3      	bne.n	bd94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    bdac:	2a03      	cmp	r2, #3
    bdae:	d94f      	bls.n	be50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bdb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bdb4:	d24c      	bcs.n	be50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bdb6:	f1c2 0c00 	rsb	ip, r2, #0
    bdba:	ea4f 74ec 	mov.w	r4, ip, asr #31
    bdbe:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    bdc2:	ea4f 0cac 	mov.w	ip, ip, asr #2
    bdc6:	f1cc 0c00 	rsb	ip, ip, #0
    bdca:	f1bc 0f00 	cmp.w	ip, #0
    bdce:	dd1b      	ble.n	be08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bdd0:	1f0d      	subs	r5, r1, #4
    bdd2:	1f1c      	subs	r4, r3, #4
    bdd4:	f01c 0f01 	tst.w	ip, #1
    bdd8:	d003      	beq.n	bde2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    bdda:	f855 6f04 	ldr.w	r6, [r5, #4]!
    bdde:	f844 6f04 	str.w	r6, [r4, #4]!
    bde2:	ea5f 066c 	movs.w	r6, ip, asr #1
    bde6:	d007      	beq.n	bdf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    bde8:	686f      	ldr	r7, [r5, #4]
    bdea:	6067      	str	r7, [r4, #4]
    bdec:	f855 7f08 	ldr.w	r7, [r5, #8]!
    bdf0:	f844 7f08 	str.w	r7, [r4, #8]!
    bdf4:	1e76      	subs	r6, r6, #1
    bdf6:	d1f7      	bne.n	bde8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    bdf8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    bdfc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    be00:	f1cc 0c00 	rsb	ip, ip, #0
    be04:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    be08:	2a00      	cmp	r2, #0
    be0a:	bf04      	itt	eq
    be0c:	bcf0      	popeq	{r4, r5, r6, r7}
    be0e:	4770      	bxeq	lr
    be10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    be14:	d226      	bcs.n	be64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    be16:	2a00      	cmp	r2, #0
    be18:	bfdc      	itt	le
    be1a:	bcf0      	pople	{r4, r5, r6, r7}
    be1c:	4770      	bxle	lr
    be1e:	1e49      	subs	r1, r1, #1
    be20:	1e5b      	subs	r3, r3, #1
    be22:	f012 0f01 	tst.w	r2, #1
    be26:	d003      	beq.n	be30 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    be28:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    be2c:	f803 cf01 	strb.w	ip, [r3, #1]!
    be30:	1052      	asrs	r2, r2, #1
    be32:	bf04      	itt	eq
    be34:	bcf0      	popeq	{r4, r5, r6, r7}
    be36:	4770      	bxeq	lr
    be38:	f891 c001 	ldrb.w	ip, [r1, #1]
    be3c:	f883 c001 	strb.w	ip, [r3, #1]
    be40:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    be44:	f803 cf02 	strb.w	ip, [r3, #2]!
    be48:	1e52      	subs	r2, r2, #1
    be4a:	d1f5      	bne.n	be38 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    be4c:	bcf0      	pop	{r4, r5, r6, r7}
    be4e:	4770      	bx	lr
    be50:	2a04      	cmp	r2, #4
    be52:	d3d9      	bcc.n	be08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    be54:	f851 cb04 	ldr.w	ip, [r1], #4
    be58:	1f12      	subs	r2, r2, #4
    be5a:	f843 cb04 	str.w	ip, [r3], #4
    be5e:	2a04      	cmp	r2, #4
    be60:	d2f8      	bcs.n	be54 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    be62:	e7d1      	b.n	be08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    be64:	f811 cb01 	ldrb.w	ip, [r1], #1
    be68:	f803 cb01 	strb.w	ip, [r3], #1
    be6c:	1e52      	subs	r2, r2, #1
    be6e:	d1f9      	bne.n	be64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    be70:	bcf0      	pop	{r4, r5, r6, r7}
    be72:	4770      	bx	lr

0000be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    be74:	b470      	push	{r4, r5, r6}
    be76:	4603      	mov	r3, r0
    be78:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    be7c:	f010 0f03 	tst.w	r0, #3
    be80:	d009      	beq.n	be96 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    be82:	2a00      	cmp	r2, #0
    be84:	bf04      	itt	eq
    be86:	bc70      	popeq	{r4, r5, r6}
    be88:	4770      	bxeq	lr
    be8a:	f803 cb01 	strb.w	ip, [r3], #1
    be8e:	1e52      	subs	r2, r2, #1
    be90:	f013 0f03 	tst.w	r3, #3
    be94:	d1f5      	bne.n	be82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    be96:	b2c9      	uxtb	r1, r1
    be98:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    be9c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    bea0:	2a03      	cmp	r2, #3
    bea2:	d939      	bls.n	bf18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    bea4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bea8:	d236      	bcs.n	bf18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    beaa:	4251      	negs	r1, r2
    beac:	17cc      	asrs	r4, r1, #31
    beae:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    beb2:	1089      	asrs	r1, r1, #2
    beb4:	424e      	negs	r6, r1
    beb6:	2e00      	cmp	r6, #0
    beb8:	dd11      	ble.n	bede <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    beba:	1f19      	subs	r1, r3, #4
    bebc:	f016 0f01 	tst.w	r6, #1
    bec0:	bf18      	it	ne
    bec2:	f841 5f04 	strne.w	r5, [r1, #4]!
    bec6:	1074      	asrs	r4, r6, #1
    bec8:	d004      	beq.n	bed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    beca:	604d      	str	r5, [r1, #4]
    becc:	f841 5f08 	str.w	r5, [r1, #8]!
    bed0:	1e64      	subs	r4, r4, #1
    bed2:	d1fa      	bne.n	beca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    bed4:	4271      	negs	r1, r6
    bed6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    beda:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    bede:	2a00      	cmp	r2, #0
    bee0:	bf04      	itt	eq
    bee2:	bc70      	popeq	{r4, r5, r6}
    bee4:	4770      	bxeq	lr
    bee6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    beea:	d21d      	bcs.n	bf28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    beec:	2a00      	cmp	r2, #0
    beee:	bfdc      	itt	le
    bef0:	bc70      	pople	{r4, r5, r6}
    bef2:	4770      	bxle	lr
    bef4:	1e59      	subs	r1, r3, #1
    bef6:	f012 0f01 	tst.w	r2, #1
    befa:	bf18      	it	ne
    befc:	f801 cf01 	strbne.w	ip, [r1, #1]!
    bf00:	1052      	asrs	r2, r2, #1
    bf02:	bf04      	itt	eq
    bf04:	bc70      	popeq	{r4, r5, r6}
    bf06:	4770      	bxeq	lr
    bf08:	f881 c001 	strb.w	ip, [r1, #1]
    bf0c:	f801 cf02 	strb.w	ip, [r1, #2]!
    bf10:	1e52      	subs	r2, r2, #1
    bf12:	d1f9      	bne.n	bf08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    bf14:	bc70      	pop	{r4, r5, r6}
    bf16:	4770      	bx	lr
    bf18:	2a04      	cmp	r2, #4
    bf1a:	d3e0      	bcc.n	bede <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bf1c:	1f12      	subs	r2, r2, #4
    bf1e:	f843 5b04 	str.w	r5, [r3], #4
    bf22:	2a04      	cmp	r2, #4
    bf24:	d2fa      	bcs.n	bf1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    bf26:	e7da      	b.n	bede <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bf28:	f803 cb01 	strb.w	ip, [r3], #1
    bf2c:	1e52      	subs	r2, r2, #1
    bf2e:	d1fb      	bne.n	bf28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bf30:	bc70      	pop	{r4, r5, r6}
    bf32:	4770      	bx	lr
    bf34:	f04f 30ff 	mov.w	r0, #4294967295
    bf38:	4770      	bx	lr
    bf3a:	2000      	movs	r0, #0
    bf3c:	4770      	bx	lr
    bf3e:	2000      	movs	r0, #0
    bf40:	4770      	bx	lr
    bf42:	f04f 30ff 	mov.w	r0, #4294967295
    bf46:	4770      	bx	lr
    bf48:	4770      	bx	lr
    bf4a:	4770      	bx	lr
    bf4c:	2000      	movs	r0, #0
    bf4e:	4770      	bx	lr
    bf50:	f04f 30ff 	mov.w	r0, #4294967295
    bf54:	4770      	bx	lr
    bf56:	f04f 30ff 	mov.w	r0, #4294967295
    bf5a:	4770      	bx	lr
    bf5c:	2100      	movs	r1, #0
    bf5e:	7001      	strb	r1, [r0, #0]
    bf60:	4770      	bx	lr
    bf62:	f04f 30ff 	mov.w	r0, #4294967295
    bf66:	4770      	bx	lr
    bf68:	f04f 30ff 	mov.w	r0, #4294967295
    bf6c:	4770      	bx	lr
    bf6e:	2000      	movs	r0, #0
    bf70:	4770      	bx	lr
    bf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf74:	4604      	mov	r4, r0
    bf76:	f100 0003 	add.w	r0, r0, #3
    bf7a:	f020 0003 	bic.w	r0, r0, #3
    bf7e:	0016      	movs	r6, r2
    bf80:	9000      	str	r0, [sp, #0]
    bf82:	460d      	mov	r5, r1
    bf84:	788a      	ldrb	r2, [r1, #2]
    bf86:	7849      	ldrb	r1, [r1, #1]
    bf88:	d000      	beq.n	bf8c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    bf8a:	2000      	movs	r0, #0
    bf8c:	f7f8 f8d6 	bl	413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    bf90:	9900      	ldr	r1, [sp, #0]
    bf92:	4408      	add	r0, r1
    bf94:	9000      	str	r0, [sp, #0]
    bf96:	78a9      	ldrb	r1, [r5, #2]
    bf98:	b139      	cbz	r1, bfaa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    bf9a:	89ea      	ldrh	r2, [r5, #14]
    bf9c:	b106      	cbz	r6, bfa0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12c>
    bf9e:	2000      	movs	r0, #0
    bfa0:	f7f8 fb32 	bl	4608 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    bfa4:	9900      	ldr	r1, [sp, #0]
    bfa6:	4408      	add	r0, r1
    bfa8:	9000      	str	r0, [sp, #0]
    bfaa:	4632      	mov	r2, r6
    bfac:	4629      	mov	r1, r5
    bfae:	4668      	mov	r0, sp
    bfb0:	f000 f807 	bl	bfc2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14e>
    bfb4:	9800      	ldr	r0, [sp, #0]
    bfb6:	1dc0      	adds	r0, r0, #7
    bfb8:	f020 0007 	bic.w	r0, r0, #7
    bfbc:	9000      	str	r0, [sp, #0]
    bfbe:	1b00      	subs	r0, r0, r4
    bfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfc6:	4606      	mov	r6, r0
    bfc8:	460c      	mov	r4, r1
    bfca:	7808      	ldrb	r0, [r1, #0]
    bfcc:	7849      	ldrb	r1, [r1, #1]
    bfce:	2700      	movs	r7, #0
    bfd0:	4408      	add	r0, r1
    bfd2:	4691      	mov	r9, r2
    bfd4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    bfd8:	463d      	mov	r5, r7
    bfda:	e00e      	b.n	bffa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x186>
    bfdc:	79a3      	ldrb	r3, [r4, #6]
    bfde:	2b02      	cmp	r3, #2
    bfe0:	d200      	bcs.n	bfe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x170>
    bfe2:	2302      	movs	r3, #2
    bfe4:	7962      	ldrb	r2, [r4, #5]
    bfe6:	2a03      	cmp	r2, #3
    bfe8:	d200      	bcs.n	bfec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    bfea:	2203      	movs	r2, #3
    bfec:	7921      	ldrb	r1, [r4, #4]
    bfee:	78e0      	ldrb	r0, [r4, #3]
    bff0:	f000 ff01 	bl	cdf6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    bff4:	1c6d      	adds	r5, r5, #1
    bff6:	4407      	add	r7, r0
    bff8:	b2ed      	uxtb	r5, r5
    bffa:	4545      	cmp	r5, r8
    bffc:	d3ee      	bcc.n	bfdc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x168>
    bffe:	6830      	ldr	r0, [r6, #0]
    c000:	1cc0      	adds	r0, r0, #3
    c002:	f020 0003 	bic.w	r0, r0, #3
    c006:	6030      	str	r0, [r6, #0]
    c008:	f1b9 0f00 	cmp.w	r9, #0
    c00c:	d000      	beq.n	c010 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x19c>
    c00e:	2000      	movs	r0, #0
    c010:	463a      	mov	r2, r7
    c012:	4641      	mov	r1, r8
    c014:	f7f8 fa6a 	bl	44ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c018:	6831      	ldr	r1, [r6, #0]
    c01a:	4408      	add	r0, r1
    c01c:	6030      	str	r0, [r6, #0]
    c01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c022 <sdc_soc_ecb_block_encrypt>:
    c022:	b530      	push	{r4, r5, lr}
    c024:	460d      	mov	r5, r1
    c026:	b08d      	sub	sp, #52	; 0x34
    c028:	4614      	mov	r4, r2
    c02a:	4601      	mov	r1, r0
    c02c:	2210      	movs	r2, #16
    c02e:	4668      	mov	r0, sp
    c030:	f7ff fea6 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c034:	2210      	movs	r2, #16
    c036:	4629      	mov	r1, r5
    c038:	a804      	add	r0, sp, #16
    c03a:	f7ff fea1 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c03e:	4668      	mov	r0, sp
    c040:	f7f8 fbd6 	bl	47f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c044:	b118      	cbz	r0, c04e <sdc_soc_ecb_block_encrypt+0x2c>
    c046:	f06f 0015 	mvn.w	r0, #21
    c04a:	b00d      	add	sp, #52	; 0x34
    c04c:	bd30      	pop	{r4, r5, pc}
    c04e:	2210      	movs	r2, #16
    c050:	4620      	mov	r0, r4
    c052:	a908      	add	r1, sp, #32
    c054:	f7ff fe94 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c058:	2000      	movs	r0, #0
    c05a:	e7f6      	b.n	c04a <sdc_soc_ecb_block_encrypt+0x28>

0000c05c <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c05c:	2000      	movs	r0, #0
    c05e:	4770      	bx	lr

0000c060 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c060:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c062:	4604      	mov	r4, r0
    c064:	1d01      	adds	r1, r0, #4
    c066:	4668      	mov	r0, sp
    c068:	f7f9 ffa4 	bl	5fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c06c:	2800      	cmp	r0, #0
    c06e:	d004      	beq.n	c07a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c070:	4669      	mov	r1, sp
    c072:	4620      	mov	r0, r4
    c074:	f000 f848 	bl	c108 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c078:	2001      	movs	r0, #1
    c07a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c07c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c07c:	b50e      	push	{r1, r2, r3, lr}
    c07e:	4601      	mov	r1, r0
    c080:	4668      	mov	r0, sp
    c082:	f000 f827 	bl	c0d4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c086:	4668      	mov	r0, sp
    c088:	f7f9 ffbe 	bl	6008 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c08c:	bd0e      	pop	{r1, r2, r3, pc}

0000c08e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c08e:	b510      	push	{r4, lr}
    c090:	4604      	mov	r4, r0
    c092:	4620      	mov	r0, r4
    c094:	f7f7 ff3e 	bl	3f14 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c098:	2800      	cmp	r0, #0
    c09a:	d006      	beq.n	c0aa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c09c:	78a1      	ldrb	r1, [r4, #2]
    c09e:	7820      	ldrb	r0, [r4, #0]
    c0a0:	f000 f804 	bl	c0ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c0a4:	2800      	cmp	r0, #0
    c0a6:	d0f4      	beq.n	c092 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c0a8:	2001      	movs	r0, #1
    c0aa:	bd10      	pop	{r4, pc}
    c0ac:	b570      	push	{r4, r5, r6, lr}
    c0ae:	460c      	mov	r4, r1
    c0b0:	4605      	mov	r5, r0
    c0b2:	f7f7 ffa3 	bl	3ffc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c0b6:	2800      	cmp	r0, #0
    c0b8:	d002      	beq.n	c0c0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c0ba:	2d3e      	cmp	r5, #62	; 0x3e
    c0bc:	d001      	beq.n	c0c2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c0be:	2001      	movs	r0, #1
    c0c0:	bd70      	pop	{r4, r5, r6, pc}
    c0c2:	2c12      	cmp	r4, #18
    c0c4:	d004      	beq.n	c0d0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c0c6:	4620      	mov	r0, r4
    c0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c0cc:	f7f7 bfb2 	b.w	4034 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c0d0:	2000      	movs	r0, #0
    c0d2:	bd70      	pop	{r4, r5, r6, pc}

0000c0d4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c0d4:	880a      	ldrh	r2, [r1, #0]
    c0d6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c0da:	8002      	strh	r2, [r0, #0]
    c0dc:	884a      	ldrh	r2, [r1, #2]
    c0de:	8042      	strh	r2, [r0, #2]
    c0e0:	784a      	ldrb	r2, [r1, #1]
    c0e2:	0993      	lsrs	r3, r2, #6
    c0e4:	2200      	movs	r2, #0
    c0e6:	7142      	strb	r2, [r0, #5]
    c0e8:	784b      	ldrb	r3, [r1, #1]
    c0ea:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c0ee:	b11b      	cbz	r3, c0f8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c0f0:	2b01      	cmp	r3, #1
    c0f2:	d005      	beq.n	c100 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c0f4:	2b02      	cmp	r3, #2
    c0f6:	d005      	beq.n	c104 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c0f8:	7102      	strb	r2, [r0, #4]
    c0fa:	1d09      	adds	r1, r1, #4
    c0fc:	6081      	str	r1, [r0, #8]
    c0fe:	4770      	bx	lr
    c100:	2201      	movs	r2, #1
    c102:	e7f9      	b.n	c0f8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c104:	2202      	movs	r2, #2
    c106:	e7f7      	b.n	c0f8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c108 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c108:	b510      	push	{r4, lr}
    c10a:	460c      	mov	r4, r1
    c10c:	7809      	ldrb	r1, [r1, #0]
    c10e:	7001      	strb	r1, [r0, #0]
    c110:	7841      	ldrb	r1, [r0, #1]
    c112:	f021 010f 	bic.w	r1, r1, #15
    c116:	7041      	strb	r1, [r0, #1]
    c118:	8822      	ldrh	r2, [r4, #0]
    c11a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c11e:	4311      	orrs	r1, r2
    c120:	7041      	strb	r1, [r0, #1]
    c122:	78a2      	ldrb	r2, [r4, #2]
    c124:	7082      	strb	r2, [r0, #2]
    c126:	8862      	ldrh	r2, [r4, #2]
    c128:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c12c:	0a12      	lsrs	r2, r2, #8
    c12e:	70c2      	strb	r2, [r0, #3]
    c130:	7041      	strb	r1, [r0, #1]
    c132:	7922      	ldrb	r2, [r4, #4]
    c134:	f002 0203 	and.w	r2, r2, #3
    c138:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c13c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c140:	7041      	strb	r1, [r0, #1]
    c142:	7962      	ldrb	r2, [r4, #5]
    c144:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c148:	7041      	strb	r1, [r0, #1]
    c14a:	68a1      	ldr	r1, [r4, #8]
    c14c:	1d02      	adds	r2, r0, #4
    c14e:	4291      	cmp	r1, r2
    c150:	d006      	beq.n	c160 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c152:	8862      	ldrh	r2, [r4, #2]
    c154:	2afb      	cmp	r2, #251	; 0xfb
    c156:	d300      	bcc.n	c15a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c158:	22fb      	movs	r2, #251	; 0xfb
    c15a:	1d00      	adds	r0, r0, #4
    c15c:	f7ff fe10 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c160:	78a0      	ldrb	r0, [r4, #2]
    c162:	1d00      	adds	r0, r0, #4
    c164:	b2c0      	uxtb	r0, r0
    c166:	bd10      	pop	{r4, pc}

0000c168 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c16c:	4604      	mov	r4, r0
    c16e:	780f      	ldrb	r7, [r1, #0]
    c170:	2000      	movs	r0, #0
    c172:	250c      	movs	r5, #12
    c174:	2605      	movs	r6, #5
    c176:	223e      	movs	r2, #62	; 0x3e
    c178:	23ff      	movs	r3, #255	; 0xff
    c17a:	2f1b      	cmp	r7, #27
    c17c:	d27d      	bcs.n	c27a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c17e:	e8df f007 	tbb	[pc, r7]
    c182:	0eeb      	.short	0x0eeb
    c184:	632d2725 	.word	0x632d2725
    c188:	af9b816d 	.word	0xaf9b816d
    c18c:	e2c7bcb1 	.word	0xe2c7bcb1
    c190:	31ebebf5 	.word	0x31ebebf5
    c194:	f2fed5d2 	.word	0xf2fed5d2
    c198:	eeeff0f1 	.word	0xeeeff0f1
    c19c:	00ed      	.short	0x00ed
    c19e:	7025      	strb	r5, [r4, #0]
    c1a0:	7908      	ldrb	r0, [r1, #4]
    c1a2:	70a0      	strb	r0, [r4, #2]
    c1a4:	7948      	ldrb	r0, [r1, #5]
    c1a6:	70e0      	strb	r0, [r4, #3]
    c1a8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c1ac:	0a00      	lsrs	r0, r0, #8
    c1ae:	7120      	strb	r0, [r4, #4]
    c1b0:	79c8      	ldrb	r0, [r1, #7]
    c1b2:	7160      	strb	r0, [r4, #5]
    c1b4:	7a08      	ldrb	r0, [r1, #8]
    c1b6:	71a0      	strb	r0, [r4, #6]
    c1b8:	8908      	ldrh	r0, [r1, #8]
    c1ba:	0a00      	lsrs	r0, r0, #8
    c1bc:	71e0      	strb	r0, [r4, #7]
    c1be:	7a88      	ldrb	r0, [r1, #10]
    c1c0:	7220      	strb	r0, [r4, #8]
    c1c2:	8948      	ldrh	r0, [r1, #10]
    c1c4:	0a00      	lsrs	r0, r0, #8
    c1c6:	7260      	strb	r0, [r4, #9]
    c1c8:	2008      	movs	r0, #8
    c1ca:	e0c2      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c1cc:	2010      	movs	r0, #16
    c1ce:	e000      	b.n	c1d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c1d0:	201a      	movs	r0, #26
    c1d2:	7020      	strb	r0, [r4, #0]
    c1d4:	7908      	ldrb	r0, [r1, #4]
    c1d6:	70a0      	strb	r0, [r4, #2]
    c1d8:	2001      	movs	r0, #1
    c1da:	e0ba      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c1dc:	4620      	mov	r0, r4
    c1de:	f000 f947 	bl	c470 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c1e2:	e0b4      	b.n	c34e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c1e4:	7022      	strb	r2, [r4, #0]
    c1e6:	200a      	movs	r0, #10
    c1e8:	70a0      	strb	r0, [r4, #2]
    c1ea:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c1ee:	70e0      	strb	r0, [r4, #3]
    c1f0:	7888      	ldrb	r0, [r1, #2]
    c1f2:	7120      	strb	r0, [r4, #4]
    c1f4:	8848      	ldrh	r0, [r1, #2]
    c1f6:	0a00      	lsrs	r0, r0, #8
    c1f8:	7160      	strb	r0, [r4, #5]
    c1fa:	7908      	ldrb	r0, [r1, #4]
    c1fc:	71a0      	strb	r0, [r4, #6]
    c1fe:	7948      	ldrb	r0, [r1, #5]
    c200:	71e0      	strb	r0, [r4, #7]
    c202:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c206:	60a0      	str	r0, [r4, #8]
    c208:	8948      	ldrh	r0, [r1, #10]
    c20a:	81a0      	strh	r0, [r4, #12]
    c20c:	68c8      	ldr	r0, [r1, #12]
    c20e:	f8c4 000e 	str.w	r0, [r4, #14]
    c212:	8a08      	ldrh	r0, [r1, #16]
    c214:	8260      	strh	r0, [r4, #18]
    c216:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c21a:	6160      	str	r0, [r4, #20]
    c21c:	8ac8      	ldrh	r0, [r1, #22]
    c21e:	8320      	strh	r0, [r4, #24]
    c220:	7e08      	ldrb	r0, [r1, #24]
    c222:	76a0      	strb	r0, [r4, #26]
    c224:	8b08      	ldrh	r0, [r1, #24]
    c226:	0a00      	lsrs	r0, r0, #8
    c228:	76e0      	strb	r0, [r4, #27]
    c22a:	7e88      	ldrb	r0, [r1, #26]
    c22c:	7720      	strb	r0, [r4, #28]
    c22e:	8b48      	ldrh	r0, [r1, #26]
    c230:	0a00      	lsrs	r0, r0, #8
    c232:	7760      	strb	r0, [r4, #29]
    c234:	7f08      	ldrb	r0, [r1, #28]
    c236:	77a0      	strb	r0, [r4, #30]
    c238:	8b88      	ldrh	r0, [r1, #28]
    c23a:	0a00      	lsrs	r0, r0, #8
    c23c:	77e0      	strb	r0, [r4, #31]
    c23e:	7f88      	ldrb	r0, [r1, #30]
    c240:	f884 0020 	strb.w	r0, [r4, #32]
    c244:	201f      	movs	r0, #31
    c246:	e084      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c248:	7022      	strb	r2, [r4, #0]
    c24a:	2014      	movs	r0, #20
    c24c:	70a0      	strb	r0, [r4, #2]
    c24e:	7908      	ldrb	r0, [r1, #4]
    c250:	70e0      	strb	r0, [r4, #3]
    c252:	8888      	ldrh	r0, [r1, #4]
    c254:	0a00      	lsrs	r0, r0, #8
    c256:	7120      	strb	r0, [r4, #4]
    c258:	7988      	ldrb	r0, [r1, #6]
    c25a:	e0a8      	b.n	c3ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c25c:	7022      	strb	r2, [r4, #0]
    c25e:	2004      	movs	r0, #4
    c260:	70a0      	strb	r0, [r4, #2]
    c262:	7908      	ldrb	r0, [r1, #4]
    c264:	70e0      	strb	r0, [r4, #3]
    c266:	7988      	ldrb	r0, [r1, #6]
    c268:	7120      	strb	r0, [r4, #4]
    c26a:	88c8      	ldrh	r0, [r1, #6]
    c26c:	0a00      	lsrs	r0, r0, #8
    c26e:	7160      	strb	r0, [r4, #5]
    c270:	6888      	ldr	r0, [r1, #8]
    c272:	f8c4 0006 	str.w	r0, [r4, #6]
    c276:	68c8      	ldr	r0, [r1, #12]
    c278:	e000      	b.n	c27c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c27a:	e06d      	b.n	c358 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c27c:	f8c4 000a 	str.w	r0, [r4, #10]
    c280:	200c      	movs	r0, #12
    c282:	e066      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c284:	7022      	strb	r2, [r4, #0]
    c286:	2003      	movs	r0, #3
    c288:	70a0      	strb	r0, [r4, #2]
    c28a:	7908      	ldrb	r0, [r1, #4]
    c28c:	70e0      	strb	r0, [r4, #3]
    c28e:	7988      	ldrb	r0, [r1, #6]
    c290:	7120      	strb	r0, [r4, #4]
    c292:	88c8      	ldrh	r0, [r1, #6]
    c294:	0a00      	lsrs	r0, r0, #8
    c296:	7160      	strb	r0, [r4, #5]
    c298:	7a08      	ldrb	r0, [r1, #8]
    c29a:	71a0      	strb	r0, [r4, #6]
    c29c:	8908      	ldrh	r0, [r1, #8]
    c29e:	0a00      	lsrs	r0, r0, #8
    c2a0:	71e0      	strb	r0, [r4, #7]
    c2a2:	7a88      	ldrb	r0, [r1, #10]
    c2a4:	7220      	strb	r0, [r4, #8]
    c2a6:	8948      	ldrh	r0, [r1, #10]
    c2a8:	0a00      	lsrs	r0, r0, #8
    c2aa:	7260      	strb	r0, [r4, #9]
    c2ac:	7b08      	ldrb	r0, [r1, #12]
    c2ae:	72a0      	strb	r0, [r4, #10]
    c2b0:	8988      	ldrh	r0, [r1, #12]
    c2b2:	0a00      	lsrs	r0, r0, #8
    c2b4:	72e0      	strb	r0, [r4, #11]
    c2b6:	e0d9      	b.n	c46c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c2b8:	7022      	strb	r2, [r4, #0]
    c2ba:	70a6      	strb	r6, [r4, #2]
    c2bc:	7908      	ldrb	r0, [r1, #4]
    c2be:	70e0      	strb	r0, [r4, #3]
    c2c0:	8888      	ldrh	r0, [r1, #4]
    c2c2:	0a00      	lsrs	r0, r0, #8
    c2c4:	7120      	strb	r0, [r4, #4]
    c2c6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c2ca:	f8c4 0005 	str.w	r0, [r4, #5]
    c2ce:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c2d2:	f8c4 0009 	str.w	r0, [r4, #9]
    c2d6:	89c8      	ldrh	r0, [r1, #14]
    c2d8:	f8a4 000d 	strh.w	r0, [r4, #13]
    c2dc:	200d      	movs	r0, #13
    c2de:	e038      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c2e0:	2011      	movs	r0, #17
    c2e2:	e044      	b.n	c36e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    c2e4:	7026      	strb	r6, [r4, #0]
    c2e6:	7908      	ldrb	r0, [r1, #4]
    c2e8:	70a0      	strb	r0, [r4, #2]
    c2ea:	7948      	ldrb	r0, [r1, #5]
    c2ec:	70e0      	strb	r0, [r4, #3]
    c2ee:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c2f2:	0a00      	lsrs	r0, r0, #8
    c2f4:	7120      	strb	r0, [r4, #4]
    c2f6:	79c8      	ldrb	r0, [r1, #7]
    c2f8:	e059      	b.n	c3ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c2fa:	2008      	movs	r0, #8
    c2fc:	7020      	strb	r0, [r4, #0]
    c2fe:	7908      	ldrb	r0, [r1, #4]
    c300:	70a0      	strb	r0, [r4, #2]
    c302:	7988      	ldrb	r0, [r1, #6]
    c304:	70e0      	strb	r0, [r4, #3]
    c306:	88c8      	ldrh	r0, [r1, #6]
    c308:	0a00      	lsrs	r0, r0, #8
    c30a:	7120      	strb	r0, [r4, #4]
    c30c:	7a08      	ldrb	r0, [r1, #8]
    c30e:	e04e      	b.n	c3ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c310:	2030      	movs	r0, #48	; 0x30
    c312:	7020      	strb	r0, [r4, #0]
    c314:	7908      	ldrb	r0, [r1, #4]
    c316:	70a0      	strb	r0, [r4, #2]
    c318:	7988      	ldrb	r0, [r1, #6]
    c31a:	70e0      	strb	r0, [r4, #3]
    c31c:	88c8      	ldrh	r0, [r1, #6]
    c31e:	0a00      	lsrs	r0, r0, #8
    c320:	7120      	strb	r0, [r4, #4]
    c322:	2003      	movs	r0, #3
    c324:	e015      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c326:	7022      	strb	r2, [r4, #0]
    c328:	2007      	movs	r0, #7
    c32a:	e045      	b.n	c3b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c32c:	7022      	strb	r2, [r4, #0]
    c32e:	70a5      	strb	r5, [r4, #2]
    c330:	7908      	ldrb	r0, [r1, #4]
    c332:	70e0      	strb	r0, [r4, #3]
    c334:	7988      	ldrb	r0, [r1, #6]
    c336:	7120      	strb	r0, [r4, #4]
    c338:	88c8      	ldrh	r0, [r1, #6]
    c33a:	0a00      	lsrs	r0, r0, #8
    c33c:	7160      	strb	r0, [r4, #5]
    c33e:	7a08      	ldrb	r0, [r1, #8]
    c340:	71a0      	strb	r0, [r4, #6]
    c342:	7a48      	ldrb	r0, [r1, #9]
    c344:	e028      	b.n	c398 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    c346:	4620      	mov	r0, r4
    c348:	1d09      	adds	r1, r1, #4
    c34a:	f7f7 fe29 	bl	3fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    c34e:	2800      	cmp	r0, #0
    c350:	d002      	beq.n	c358 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c352:	7060      	strb	r0, [r4, #1]
    c354:	1c80      	adds	r0, r0, #2
    c356:	b2c0      	uxtb	r0, r0
    c358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c35c:	e073      	b.n	c446 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    c35e:	e047      	b.n	c3f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c360:	e028      	b.n	c3b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    c362:	e053      	b.n	c40c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    c364:	e061      	b.n	c42a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    c366:	e01a      	b.n	c39e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    c368:	e009      	b.n	c37e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    c36a:	e7ff      	b.n	c36c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c36c:	2057      	movs	r0, #87	; 0x57
    c36e:	7020      	strb	r0, [r4, #0]
    c370:	7908      	ldrb	r0, [r1, #4]
    c372:	70a0      	strb	r0, [r4, #2]
    c374:	8888      	ldrh	r0, [r1, #4]
    c376:	0a00      	lsrs	r0, r0, #8
    c378:	70e0      	strb	r0, [r4, #3]
    c37a:	2002      	movs	r0, #2
    c37c:	e7e9      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c37e:	7022      	strb	r2, [r4, #0]
    c380:	2012      	movs	r0, #18
    c382:	70a0      	strb	r0, [r4, #2]
    c384:	7908      	ldrb	r0, [r1, #4]
    c386:	70e0      	strb	r0, [r4, #3]
    c388:	7948      	ldrb	r0, [r1, #5]
    c38a:	7120      	strb	r0, [r4, #4]
    c38c:	7988      	ldrb	r0, [r1, #6]
    c38e:	7160      	strb	r0, [r4, #5]
    c390:	88c8      	ldrh	r0, [r1, #6]
    c392:	0a00      	lsrs	r0, r0, #8
    c394:	71a0      	strb	r0, [r4, #6]
    c396:	7a08      	ldrb	r0, [r1, #8]
    c398:	71e0      	strb	r0, [r4, #7]
    c39a:	2006      	movs	r0, #6
    c39c:	e7d9      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c39e:	7023      	strb	r3, [r4, #0]
    c3a0:	20a1      	movs	r0, #161	; 0xa1
    c3a2:	70a0      	strb	r0, [r4, #2]
    c3a4:	7908      	ldrb	r0, [r1, #4]
    c3a6:	70e0      	strb	r0, [r4, #3]
    c3a8:	7948      	ldrb	r0, [r1, #5]
    c3aa:	7120      	strb	r0, [r4, #4]
    c3ac:	2000      	movs	r0, #0
    c3ae:	7160      	strb	r0, [r4, #5]
    c3b0:	2004      	movs	r0, #4
    c3b2:	e7ce      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c3b4:	7023      	strb	r3, [r4, #0]
    c3b6:	20a2      	movs	r0, #162	; 0xa2
    c3b8:	70a0      	strb	r0, [r4, #2]
    c3ba:	7908      	ldrb	r0, [r1, #4]
    c3bc:	70e0      	strb	r0, [r4, #3]
    c3be:	8888      	ldrh	r0, [r1, #4]
    c3c0:	0a00      	lsrs	r0, r0, #8
    c3c2:	7120      	strb	r0, [r4, #4]
    c3c4:	7988      	ldrb	r0, [r1, #6]
    c3c6:	7160      	strb	r0, [r4, #5]
    c3c8:	88c8      	ldrh	r0, [r1, #6]
    c3ca:	0a00      	lsrs	r0, r0, #8
    c3cc:	71a0      	strb	r0, [r4, #6]
    c3ce:	7a08      	ldrb	r0, [r1, #8]
    c3d0:	71e0      	strb	r0, [r4, #7]
    c3d2:	8908      	ldrh	r0, [r1, #8]
    c3d4:	0a00      	lsrs	r0, r0, #8
    c3d6:	7220      	strb	r0, [r4, #8]
    c3d8:	7a88      	ldrb	r0, [r1, #10]
    c3da:	7260      	strb	r0, [r4, #9]
    c3dc:	8948      	ldrh	r0, [r1, #10]
    c3de:	0a00      	lsrs	r0, r0, #8
    c3e0:	72a0      	strb	r0, [r4, #10]
    c3e2:	7b08      	ldrb	r0, [r1, #12]
    c3e4:	72e0      	strb	r0, [r4, #11]
    c3e6:	8988      	ldrh	r0, [r1, #12]
    c3e8:	0a00      	lsrs	r0, r0, #8
    c3ea:	7320      	strb	r0, [r4, #12]
    c3ec:	200b      	movs	r0, #11
    c3ee:	e7b0      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c3f0:	7023      	strb	r3, [r4, #0]
    c3f2:	20a3      	movs	r0, #163	; 0xa3
    c3f4:	70a0      	strb	r0, [r4, #2]
    c3f6:	7908      	ldrb	r0, [r1, #4]
    c3f8:	70e0      	strb	r0, [r4, #3]
    c3fa:	8888      	ldrh	r0, [r1, #4]
    c3fc:	0a00      	lsrs	r0, r0, #8
    c3fe:	7120      	strb	r0, [r4, #4]
    c400:	7988      	ldrb	r0, [r1, #6]
    c402:	7160      	strb	r0, [r4, #5]
    c404:	79c8      	ldrb	r0, [r1, #7]
    c406:	71a0      	strb	r0, [r4, #6]
    c408:	2005      	movs	r0, #5
    c40a:	e7a2      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c40c:	7022      	strb	r2, [r4, #0]
    c40e:	2013      	movs	r0, #19
    c410:	70a0      	strb	r0, [r4, #2]
    c412:	7908      	ldrb	r0, [r1, #4]
    c414:	70e0      	strb	r0, [r4, #3]
    c416:	7948      	ldrb	r0, [r1, #5]
    c418:	7120      	strb	r0, [r4, #4]
    c41a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c41e:	f8c4 0005 	str.w	r0, [r4, #5]
    c422:	8948      	ldrh	r0, [r1, #10]
    c424:	f8a4 0009 	strh.w	r0, [r4, #9]
    c428:	e020      	b.n	c46c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c42a:	7023      	strb	r3, [r4, #0]
    c42c:	20a4      	movs	r0, #164	; 0xa4
    c42e:	70a0      	strb	r0, [r4, #2]
    c430:	7908      	ldrb	r0, [r1, #4]
    c432:	70e0      	strb	r0, [r4, #3]
    c434:	8888      	ldrh	r0, [r1, #4]
    c436:	0a00      	lsrs	r0, r0, #8
    c438:	7120      	strb	r0, [r4, #4]
    c43a:	7988      	ldrb	r0, [r1, #6]
    c43c:	7160      	strb	r0, [r4, #5]
    c43e:	79c8      	ldrb	r0, [r1, #7]
    c440:	71a0      	strb	r0, [r4, #6]
    c442:	2007      	movs	r0, #7
    c444:	e785      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c446:	7023      	strb	r3, [r4, #0]
    c448:	2080      	movs	r0, #128	; 0x80
    c44a:	70a0      	strb	r0, [r4, #2]
    c44c:	888a      	ldrh	r2, [r1, #4]
    c44e:	f8a4 2003 	strh.w	r2, [r4, #3]
    c452:	88ca      	ldrh	r2, [r1, #6]
    c454:	f8a4 2005 	strh.w	r2, [r4, #5]
    c458:	7a0a      	ldrb	r2, [r1, #8]
    c45a:	71e2      	strb	r2, [r4, #7]
    c45c:	7a4a      	ldrb	r2, [r1, #9]
    c45e:	8122      	strh	r2, [r4, #8]
    c460:	7a8a      	ldrb	r2, [r1, #10]
    c462:	72a2      	strb	r2, [r4, #10]
    c464:	7ac9      	ldrb	r1, [r1, #11]
    c466:	f001 0101 	and.w	r1, r1, #1
    c46a:	72e1      	strb	r1, [r4, #11]
    c46c:	200a      	movs	r0, #10
    c46e:	e770      	b.n	c352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c470 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c470:	223e      	movs	r2, #62	; 0x3e
    c472:	7002      	strb	r2, [r0, #0]
    c474:	2201      	movs	r2, #1
    c476:	7082      	strb	r2, [r0, #2]
    c478:	790a      	ldrb	r2, [r1, #4]
    c47a:	70c2      	strb	r2, [r0, #3]
    c47c:	798a      	ldrb	r2, [r1, #6]
    c47e:	7102      	strb	r2, [r0, #4]
    c480:	88ca      	ldrh	r2, [r1, #6]
    c482:	0a12      	lsrs	r2, r2, #8
    c484:	7142      	strb	r2, [r0, #5]
    c486:	7a0a      	ldrb	r2, [r1, #8]
    c488:	7182      	strb	r2, [r0, #6]
    c48a:	7a4a      	ldrb	r2, [r1, #9]
    c48c:	71c2      	strb	r2, [r0, #7]
    c48e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c492:	6082      	str	r2, [r0, #8]
    c494:	89ca      	ldrh	r2, [r1, #14]
    c496:	8182      	strh	r2, [r0, #12]
    c498:	7c0a      	ldrb	r2, [r1, #16]
    c49a:	7382      	strb	r2, [r0, #14]
    c49c:	8a0a      	ldrh	r2, [r1, #16]
    c49e:	0a12      	lsrs	r2, r2, #8
    c4a0:	73c2      	strb	r2, [r0, #15]
    c4a2:	7c8a      	ldrb	r2, [r1, #18]
    c4a4:	7402      	strb	r2, [r0, #16]
    c4a6:	8a4a      	ldrh	r2, [r1, #18]
    c4a8:	0a12      	lsrs	r2, r2, #8
    c4aa:	7442      	strb	r2, [r0, #17]
    c4ac:	7d0a      	ldrb	r2, [r1, #20]
    c4ae:	7482      	strb	r2, [r0, #18]
    c4b0:	8a8a      	ldrh	r2, [r1, #20]
    c4b2:	0a12      	lsrs	r2, r2, #8
    c4b4:	74c2      	strb	r2, [r0, #19]
    c4b6:	7d89      	ldrb	r1, [r1, #22]
    c4b8:	7501      	strb	r1, [r0, #20]
    c4ba:	2013      	movs	r0, #19
    c4bc:	4770      	bx	lr

0000c4be <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c4be:	223e      	movs	r2, #62	; 0x3e
    c4c0:	7002      	strb	r2, [r0, #0]
    c4c2:	2201      	movs	r2, #1
    c4c4:	7082      	strb	r2, [r0, #2]
    c4c6:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c4ca:	70c2      	strb	r2, [r0, #3]
    c4cc:	788a      	ldrb	r2, [r1, #2]
    c4ce:	7102      	strb	r2, [r0, #4]
    c4d0:	884a      	ldrh	r2, [r1, #2]
    c4d2:	0a12      	lsrs	r2, r2, #8
    c4d4:	7142      	strb	r2, [r0, #5]
    c4d6:	790a      	ldrb	r2, [r1, #4]
    c4d8:	7182      	strb	r2, [r0, #6]
    c4da:	794a      	ldrb	r2, [r1, #5]
    c4dc:	71c2      	strb	r2, [r0, #7]
    c4de:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c4e2:	6082      	str	r2, [r0, #8]
    c4e4:	894a      	ldrh	r2, [r1, #10]
    c4e6:	8182      	strh	r2, [r0, #12]
    c4e8:	7e0a      	ldrb	r2, [r1, #24]
    c4ea:	7382      	strb	r2, [r0, #14]
    c4ec:	8b0a      	ldrh	r2, [r1, #24]
    c4ee:	0a12      	lsrs	r2, r2, #8
    c4f0:	73c2      	strb	r2, [r0, #15]
    c4f2:	7e8a      	ldrb	r2, [r1, #26]
    c4f4:	7402      	strb	r2, [r0, #16]
    c4f6:	8b4a      	ldrh	r2, [r1, #26]
    c4f8:	0a12      	lsrs	r2, r2, #8
    c4fa:	7442      	strb	r2, [r0, #17]
    c4fc:	7f0a      	ldrb	r2, [r1, #28]
    c4fe:	7482      	strb	r2, [r0, #18]
    c500:	8b8a      	ldrh	r2, [r1, #28]
    c502:	0a12      	lsrs	r2, r2, #8
    c504:	74c2      	strb	r2, [r0, #19]
    c506:	7f89      	ldrb	r1, [r1, #30]
    c508:	7501      	strb	r1, [r0, #20]
    c50a:	2113      	movs	r1, #19
    c50c:	7041      	strb	r1, [r0, #1]
    c50e:	4608      	mov	r0, r1
    c510:	4770      	bx	lr

0000c512 <sdc_hci_data_get>:
    c512:	b510      	push	{r4, lr}
    c514:	b120      	cbz	r0, c520 <sdc_hci_data_get+0xe>
    c516:	f7ff fda3 	bl	c060 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c51a:	b120      	cbz	r0, c526 <sdc_hci_data_get+0x14>
    c51c:	2000      	movs	r0, #0
    c51e:	bd10      	pop	{r4, pc}
    c520:	f06f 0015 	mvn.w	r0, #21
    c524:	bd10      	pop	{r4, pc}
    c526:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c52a:	bd10      	pop	{r4, pc}

0000c52c <sdc_hci_data_put>:
    c52c:	b510      	push	{r4, lr}
    c52e:	f06f 0415 	mvn.w	r4, #21
    c532:	b120      	cbz	r0, c53e <sdc_hci_data_put+0x12>
    c534:	f7ff fda2 	bl	c07c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c538:	b108      	cbz	r0, c53e <sdc_hci_data_put+0x12>
    c53a:	2000      	movs	r0, #0
    c53c:	bd10      	pop	{r4, pc}
    c53e:	4620      	mov	r0, r4
    c540:	bd10      	pop	{r4, pc}

0000c542 <sdc_hci_evt_get>:
    c542:	b510      	push	{r4, lr}
    c544:	b120      	cbz	r0, c550 <sdc_hci_evt_get+0xe>
    c546:	f7ff fda2 	bl	c08e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c54a:	b120      	cbz	r0, c556 <sdc_hci_evt_get+0x14>
    c54c:	2000      	movs	r0, #0
    c54e:	bd10      	pop	{r4, pc}
    c550:	f06f 0015 	mvn.w	r0, #21
    c554:	bd10      	pop	{r4, pc}
    c556:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c55a:	bd10      	pop	{r4, pc}

0000c55c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c55c:	f002 bcb7 	b.w	eece <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c560 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c560:	f002 bcf9 	b.w	ef56 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c564 <sdc_hci_cmd_cb_set_event_mask>:
    c564:	b510      	push	{r4, lr}
    c566:	f7f7 fd79 	bl	405c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c56a:	2000      	movs	r0, #0
    c56c:	bd10      	pop	{r4, pc}

0000c56e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c56e:	b510      	push	{r4, lr}
    c570:	f7f7 fd82 	bl	4078 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c574:	2000      	movs	r0, #0
    c576:	bd10      	pop	{r4, pc}

0000c578 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c578:	f002 bd09 	b.w	ef8e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c57c <sdc_hci_cmd_vs_conn_event_extend>:
    c57c:	b508      	push	{r3, lr}
    c57e:	7800      	ldrb	r0, [r0, #0]
    c580:	f88d 0000 	strb.w	r0, [sp]
    c584:	4668      	mov	r0, sp
    c586:	f002 fc23 	bl	edd0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c58a:	bd08      	pop	{r3, pc}

0000c58c <sdc_hci_cmd_vs_conn_update>:
    c58c:	2001      	movs	r0, #1
    c58e:	4770      	bx	lr

0000c590 <sdc_hci_cmd_vs_event_length_set>:
    c590:	f7fd bbec 	b.w	9d6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c594 <sdc_hci_cmd_vs_llpm_mode_set>:
    c594:	2001      	movs	r0, #1
    c596:	4770      	bx	lr

0000c598 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c598:	7800      	ldrb	r0, [r0, #0]
    c59a:	b100      	cbz	r0, c59e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c59c:	2001      	movs	r0, #1
    c59e:	f002 bb7d 	b.w	ec9c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c5a2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c5a2:	b570      	push	{r4, r5, r6, lr}
    c5a4:	4605      	mov	r5, r0
    c5a6:	2210      	movs	r2, #16
    c5a8:	2100      	movs	r1, #0
    c5aa:	f7ff fc63 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c5ae:	2210      	movs	r2, #16
    c5b0:	2100      	movs	r1, #0
    c5b2:	f105 0010 	add.w	r0, r5, #16
    c5b6:	f7ff fc5d 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c5ba:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c5be:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c5c2:	1c40      	adds	r0, r0, #1
    c5c4:	d10b      	bne.n	c5de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c5c6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c5ca:	1c40      	adds	r0, r0, #1
    c5cc:	d107      	bne.n	c5de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c5ce:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c5d2:	1c40      	adds	r0, r0, #1
    c5d4:	d103      	bne.n	c5de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c5d6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c5da:	1c40      	adds	r0, r0, #1
    c5dc:	d00b      	beq.n	c5f6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c5de:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c5e2:	6128      	str	r0, [r5, #16]
    c5e4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c5e8:	6168      	str	r0, [r5, #20]
    c5ea:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c5ee:	61a8      	str	r0, [r5, #24]
    c5f0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c5f4:	61e8      	str	r0, [r5, #28]
    c5f6:	2000      	movs	r0, #0
    c5f8:	f7f8 fa7a 	bl	4af0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c5fc:	b918      	cbnz	r0, c606 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c5fe:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c602:	07c0      	lsls	r0, r0, #31
    c604:	d118      	bne.n	c638 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c606:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c60a:	1c40      	adds	r0, r0, #1
    c60c:	d10b      	bne.n	c626 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c60e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c612:	1c40      	adds	r0, r0, #1
    c614:	d107      	bne.n	c626 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c616:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c61a:	1c40      	adds	r0, r0, #1
    c61c:	d103      	bne.n	c626 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c61e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c622:	1c40      	adds	r0, r0, #1
    c624:	d008      	beq.n	c638 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c626:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c62a:	6028      	str	r0, [r5, #0]
    c62c:	6860      	ldr	r0, [r4, #4]
    c62e:	6068      	str	r0, [r5, #4]
    c630:	68a0      	ldr	r0, [r4, #8]
    c632:	60a8      	str	r0, [r5, #8]
    c634:	68e0      	ldr	r0, [r4, #12]
    c636:	60e8      	str	r0, [r5, #12]
    c638:	2000      	movs	r0, #0
    c63a:	bd70      	pop	{r4, r5, r6, pc}

0000c63c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c63c:	b570      	push	{r4, r5, r6, lr}
    c63e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c642:	4604      	mov	r4, r0
    c644:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c648:	1c40      	adds	r0, r0, #1
    c64a:	d105      	bne.n	c658 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c64c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c650:	43c0      	mvns	r0, r0
    c652:	0400      	lsls	r0, r0, #16
    c654:	0c00      	lsrs	r0, r0, #16
    c656:	d03a      	beq.n	c6ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c658:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c65c:	07c0      	lsls	r0, r0, #31
    c65e:	d036      	beq.n	c6ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c660:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c664:	f8c4 0001 	str.w	r0, [r4, #1]
    c668:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c66c:	f8a4 0005 	strh.w	r0, [r4, #5]
    c670:	79a0      	ldrb	r0, [r4, #6]
    c672:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c676:	71a0      	strb	r0, [r4, #6]
    c678:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c67c:	1c40      	adds	r0, r0, #1
    c67e:	d00f      	beq.n	c6a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c680:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c684:	1c40      	adds	r0, r0, #1
    c686:	d00b      	beq.n	c6a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c688:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c68c:	1c40      	adds	r0, r0, #1
    c68e:	d007      	beq.n	c6a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c690:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c694:	1c40      	adds	r0, r0, #1
    c696:	d003      	beq.n	c6a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c698:	2000      	movs	r0, #0
    c69a:	f7f8 fa29 	bl	4af0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c69e:	b140      	cbz	r0, c6b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c6a0:	2210      	movs	r2, #16
    c6a2:	2100      	movs	r1, #0
    c6a4:	1de0      	adds	r0, r4, #7
    c6a6:	f7ff fbe5 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c6aa:	2001      	movs	r0, #1
    c6ac:	7020      	strb	r0, [r4, #0]
    c6ae:	2000      	movs	r0, #0
    c6b0:	bd70      	pop	{r4, r5, r6, pc}
    c6b2:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c6b6:	f8c4 0007 	str.w	r0, [r4, #7]
    c6ba:	6868      	ldr	r0, [r5, #4]
    c6bc:	f8c4 000b 	str.w	r0, [r4, #11]
    c6c0:	68a8      	ldr	r0, [r5, #8]
    c6c2:	f8c4 000f 	str.w	r0, [r4, #15]
    c6c6:	68e8      	ldr	r0, [r5, #12]
    c6c8:	f8c4 0013 	str.w	r0, [r4, #19]
    c6cc:	e7ed      	b.n	c6aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c6ce:	2000      	movs	r0, #0
    c6d0:	e7ec      	b.n	c6ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c6d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c6d2:	f002 bb63 	b.w	ed9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c6d6 <sdc_hci_cmd_ip_read_bd_addr>:
    c6d6:	f002 bc0b 	b.w	eef0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c6da <sdc_hci_cmd_ip_read_local_version_information>:
    c6da:	f7fd bb55 	b.w	9d88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c6de <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c6de:	f002 b81a 	b.w	e716 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c6e2 <sdc_hci_cmd_le_add_device_to_white_list>:
    c6e2:	f002 b833 	b.w	e74c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c6e6 <sdc_hci_cmd_le_clear_resolving_list>:
    c6e6:	f002 b848 	b.w	e77a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c6ea <sdc_hci_cmd_le_clear_white_list>:
    c6ea:	f002 b853 	b.w	e794 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c6ee <sdc_hci_cmd_le_encrypt>:
    c6ee:	f002 b85b 	b.w	e7a8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c6f2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c6f2:	8802      	ldrh	r2, [r0, #0]
    c6f4:	800a      	strh	r2, [r1, #0]
    c6f6:	f002 b860 	b.w	e7ba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c6fa <sdc_hci_cmd_le_long_term_key_request_reply>:
    c6fa:	8802      	ldrh	r2, [r0, #0]
    c6fc:	800a      	strh	r2, [r1, #0]
    c6fe:	f002 b875 	b.w	e7ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c702 <sdc_hci_cmd_le_rand>:
    c702:	f002 b89d 	b.w	e840 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c706 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c706:	f002 b8a1 	b.w	e84c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c70a <sdc_hci_cmd_le_read_buffer_size>:
    c70a:	f7fd ba65 	b.w	9bd8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c70e <sdc_hci_cmd_le_read_channel_map>:
    c70e:	f7fd ba6d 	b.w	9bec <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c712 <sdc_hci_cmd_le_read_max_data_length>:
    c712:	f002 b8a4 	b.w	e85e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c716 <sdc_hci_cmd_le_read_phy>:
    c716:	f7fd ba8b 	b.w	9c30 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c71a <sdc_hci_cmd_le_read_remote_features>:
    c71a:	f7fd bab1 	b.w	9c80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c71e <sdc_hci_cmd_le_read_resolving_list_size>:
    c71e:	f002 b8ae 	b.w	e87e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c722 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c722:	f7fd bacd 	b.w	9cc0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c726 <sdc_hci_cmd_le_read_transmit_power>:
    c726:	f002 b8ae 	b.w	e886 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c72a <sdc_hci_cmd_le_read_white_list_size>:
    c72a:	f002 b8b5 	b.w	e898 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c72e <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c72e:	f002 b8b7 	b.w	e8a0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c732 <sdc_hci_cmd_le_remove_device_from_white_list>:
    c732:	f002 b8ce 	b.w	e8d2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c736 <sdc_hci_cmd_le_set_address_resolution_enable>:
    c736:	f002 b8e1 	b.w	e8fc <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c73a <sdc_hci_cmd_le_set_adv_data>:
    c73a:	f002 b8ed 	b.w	e918 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c73e <sdc_hci_cmd_le_set_adv_enable>:
    c73e:	f002 b927 	b.w	e990 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c742 <sdc_hci_cmd_le_set_adv_params>:
    c742:	f002 b958 	b.w	e9f6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c746 <sdc_hci_cmd_le_set_data_length>:
    c746:	f002 b9e8 	b.w	eb1a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c74a <sdc_hci_cmd_le_set_default_phy>:
    c74a:	f7fd bac9 	b.w	9ce0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c74e <sdc_hci_cmd_le_set_event_mask>:
    c74e:	b510      	push	{r4, lr}
    c750:	f7f7 fc7e 	bl	4050 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c754:	2000      	movs	r0, #0
    c756:	bd10      	pop	{r4, pc}

0000c758 <sdc_hci_cmd_le_set_phy>:
    c758:	f002 ba06 	b.w	eb68 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c75c <sdc_hci_cmd_le_set_privacy_mode>:
    c75c:	f002 ba24 	b.w	eba8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c760 <sdc_hci_cmd_le_set_random_address>:
    c760:	f002 ba38 	b.w	ebd4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c764 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c764:	f002 ba44 	b.w	ebf0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c768 <sdc_hci_cmd_le_set_scan_response_data>:
    c768:	f002 ba4b 	b.w	ec02 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c76c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c76c:	f002 ba7f 	b.w	ec6e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c770 <sdc_hci_cmd_lc_disconnect>:
    c770:	f001 bf81 	b.w	e676 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c774 <sdc_hci_cmd_lc_read_remote_version_information>:
    c774:	f002 bbc8 	b.w	ef08 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c778:	b570      	push	{r4, r5, r6, lr}
    c77a:	880b      	ldrh	r3, [r1, #0]
    c77c:	7f04      	ldrb	r4, [r0, #28]
    c77e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c782:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c786:	8802      	ldrh	r2, [r0, #0]
    c788:	4435      	add	r5, r6
    c78a:	1da4      	adds	r4, r4, #6
    c78c:	882d      	ldrh	r5, [r5, #0]
    c78e:	4422      	add	r2, r4
    c790:	b292      	uxth	r2, r2
    c792:	4425      	add	r5, r4
    c794:	1e54      	subs	r4, r2, #1
    c796:	442c      	add	r4, r5
    c798:	fb94 f4f2 	sdiv	r4, r4, r2
    c79c:	fb02 6204 	mla	r2, r2, r4, r6
    c7a0:	8840      	ldrh	r0, [r0, #2]
    c7a2:	b292      	uxth	r2, r2
    c7a4:	4290      	cmp	r0, r2
    c7a6:	d903      	bls.n	c7b0 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c7a8:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c7ac:	4310      	orrs	r0, r2
    c7ae:	e002      	b.n	c7b6 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c7b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c7b4:	4398      	bics	r0, r3
    c7b6:	8008      	strh	r0, [r1, #0]
    c7b8:	bd70      	pop	{r4, r5, r6, pc}
    c7ba:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c7be:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c7c2:	429a      	cmp	r2, r3
    c7c4:	d107      	bne.n	c7d6 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c7c6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c7ca:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c7ce:	4288      	cmp	r0, r1
    c7d0:	d001      	beq.n	c7d6 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c7d2:	2001      	movs	r0, #1
    c7d4:	4770      	bx	lr
    c7d6:	2000      	movs	r0, #0
    c7d8:	4770      	bx	lr

0000c7da <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c7da:	b570      	push	{r4, r5, r6, lr}
    c7dc:	7f00      	ldrb	r0, [r0, #28]
    c7de:	461c      	mov	r4, r3
    c7e0:	1d80      	adds	r0, r0, #6
    c7e2:	4408      	add	r0, r1
    c7e4:	4613      	mov	r3, r2
    c7e6:	8809      	ldrh	r1, [r1, #0]
    c7e8:	9a04      	ldr	r2, [sp, #16]
    c7ea:	1cc9      	adds	r1, r1, #3
    c7ec:	b289      	uxth	r1, r1
    c7ee:	1915      	adds	r5, r2, r4
    c7f0:	1ec0      	subs	r0, r0, #3
    c7f2:	428d      	cmp	r5, r1
    c7f4:	d805      	bhi.n	c802 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c7f6:	1881      	adds	r1, r0, r2
    c7f8:	4622      	mov	r2, r4
    c7fa:	4618      	mov	r0, r3
    c7fc:	f7ff fac0 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c800:	e000      	b.n	c804 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c802:	2400      	movs	r4, #0
    c804:	4620      	mov	r0, r4
    c806:	bd70      	pop	{r4, r5, r6, pc}

0000c808 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c808:	b570      	push	{r4, r5, r6, lr}
    c80a:	7f00      	ldrb	r0, [r0, #28]
    c80c:	461c      	mov	r4, r3
    c80e:	1d80      	adds	r0, r0, #6
    c810:	4408      	add	r0, r1
    c812:	4613      	mov	r3, r2
    c814:	8809      	ldrh	r1, [r1, #0]
    c816:	9a04      	ldr	r2, [sp, #16]
    c818:	1cc9      	adds	r1, r1, #3
    c81a:	b289      	uxth	r1, r1
    c81c:	1915      	adds	r5, r2, r4
    c81e:	1ec0      	subs	r0, r0, #3
    c820:	428d      	cmp	r5, r1
    c822:	d805      	bhi.n	c830 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c824:	4410      	add	r0, r2
    c826:	4622      	mov	r2, r4
    c828:	4619      	mov	r1, r3
    c82a:	f7ff faa9 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c82e:	e000      	b.n	c832 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c830:	2400      	movs	r4, #0
    c832:	4620      	mov	r0, r4
    c834:	bd70      	pop	{r4, r5, r6, pc}

0000c836 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c836:	8881      	ldrh	r1, [r0, #4]
    c838:	88c0      	ldrh	r0, [r0, #6]
    c83a:	4288      	cmp	r0, r1
    c83c:	d101      	bne.n	c842 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c83e:	2001      	movs	r0, #1
    c840:	4770      	bx	lr
    c842:	2000      	movs	r0, #0
    c844:	4770      	bx	lr

0000c846 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c846:	8881      	ldrh	r1, [r0, #4]
    c848:	8900      	ldrh	r0, [r0, #8]
    c84a:	4288      	cmp	r0, r1
    c84c:	d101      	bne.n	c852 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c84e:	2001      	movs	r0, #1
    c850:	4770      	bx	lr
    c852:	2000      	movs	r0, #0
    c854:	4770      	bx	lr

0000c856 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c856:	b570      	push	{r4, r5, r6, lr}
    c858:	4604      	mov	r4, r0
    c85a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c85e:	8880      	ldrh	r0, [r0, #4]
    c860:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c864:	4401      	add	r1, r0
    c866:	8a20      	ldrh	r0, [r4, #16]
    c868:	2800      	cmp	r0, #0
    c86a:	d01a      	beq.n	c8a2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c86c:	89a2      	ldrh	r2, [r4, #12]
    c86e:	2500      	movs	r5, #0
    c870:	4410      	add	r0, r2
    c872:	b280      	uxth	r0, r0
    c874:	81a0      	strh	r0, [r4, #12]
    c876:	880a      	ldrh	r2, [r1, #0]
    c878:	4290      	cmp	r0, r2
    c87a:	d905      	bls.n	c888 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c87c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    c880:	f04f 0014 	mov.w	r0, #20
    c884:	f7f7 fa46 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c888:	d109      	bne.n	c89e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c88a:	69a0      	ldr	r0, [r4, #24]
    c88c:	b108      	cbz	r0, c892 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c88e:	7f40      	ldrb	r0, [r0, #29]
    c890:	7088      	strb	r0, [r1, #2]
    c892:	f104 0104 	add.w	r1, r4, #4
    c896:	4620      	mov	r0, r4
    c898:	f7ff ff6e 	bl	c778 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c89c:	81a5      	strh	r5, [r4, #12]
    c89e:	8225      	strh	r5, [r4, #16]
    c8a0:	2001      	movs	r0, #1
    c8a2:	bd70      	pop	{r4, r5, r6, pc}

0000c8a4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8a8:	4604      	mov	r4, r0
    c8aa:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c8ae:	88c0      	ldrh	r0, [r0, #6]
    c8b0:	460e      	mov	r6, r1
    c8b2:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c8b6:	8a60      	ldrh	r0, [r4, #18]
    c8b8:	19d9      	adds	r1, r3, r7
    c8ba:	b108      	cbz	r0, c8c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    c8bc:	42b0      	cmp	r0, r6
    c8be:	d202      	bcs.n	c8c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    c8c0:	2000      	movs	r0, #0
    c8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8c6:	89e0      	ldrh	r0, [r4, #14]
    c8c8:	2500      	movs	r5, #0
    c8ca:	b140      	cbz	r0, c8de <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    c8cc:	f8b1 c000 	ldrh.w	ip, [r1]
    c8d0:	4560      	cmp	r0, ip
    c8d2:	d008      	beq.n	c8e6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    c8d4:	f240 211f 	movw	r1, #543	; 0x21f
    c8d8:	2014      	movs	r0, #20
    c8da:	f7f7 fa1b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8de:	7f60      	ldrb	r0, [r4, #29]
    c8e0:	7088      	strb	r0, [r1, #2]
    c8e2:	800d      	strh	r5, [r1, #0]
    c8e4:	e00e      	b.n	c904 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    c8e6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    c8ea:	4418      	add	r0, r3
    c8ec:	f10c 0c06 	add.w	ip, ip, #6
    c8f0:	44bc      	add	ip, r7
    c8f2:	4460      	add	r0, ip
    c8f4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    c8f8:	f820 cc03 	strh.w	ip, [r0, #-3]
    c8fc:	f894 c020 	ldrb.w	ip, [r4, #32]
    c900:	f800 cc01 	strb.w	ip, [r0, #-1]
    c904:	89e0      	ldrh	r0, [r4, #14]
    c906:	4430      	add	r0, r6
    c908:	81e0      	strh	r0, [r4, #14]
    c90a:	8808      	ldrh	r0, [r1, #0]
    c90c:	4430      	add	r0, r6
    c90e:	8008      	strh	r0, [r1, #0]
    c910:	b16a      	cbz	r2, c92e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    c912:	1da1      	adds	r1, r4, #6
    c914:	4620      	mov	r0, r4
    c916:	f7ff ff2f 	bl	c778 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c91a:	81e5      	strh	r5, [r4, #14]
    c91c:	7f60      	ldrb	r0, [r4, #29]
    c91e:	1c40      	adds	r0, r0, #1
    c920:	7760      	strb	r0, [r4, #29]
    c922:	7da0      	ldrb	r0, [r4, #22]
    c924:	b108      	cbz	r0, c92a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    c926:	88e0      	ldrh	r0, [r4, #6]
    c928:	82a0      	strh	r0, [r4, #20]
    c92a:	75a5      	strb	r5, [r4, #22]
    c92c:	e00b      	b.n	c946 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    c92e:	7f20      	ldrb	r0, [r4, #28]
    c930:	89e1      	ldrh	r1, [r4, #14]
    c932:	1d80      	adds	r0, r0, #6
    c934:	4438      	add	r0, r7
    c936:	4419      	add	r1, r3
    c938:	4408      	add	r0, r1
    c93a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c93e:	83e1      	strh	r1, [r4, #30]
    c940:	7880      	ldrb	r0, [r0, #2]
    c942:	f884 0020 	strb.w	r0, [r4, #32]
    c946:	8265      	strh	r5, [r4, #18]
    c948:	75e5      	strb	r5, [r4, #23]
    c94a:	2001      	movs	r0, #1
    c94c:	e7b9      	b.n	c8c2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000c94e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c94e:	b510      	push	{r4, lr}
    c950:	4604      	mov	r4, r0
    c952:	88c0      	ldrh	r0, [r0, #6]
    c954:	88a1      	ldrh	r1, [r4, #4]
    c956:	4281      	cmp	r1, r0
    c958:	d007      	beq.n	c96a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c95a:	89a0      	ldrh	r0, [r4, #12]
    c95c:	b928      	cbnz	r0, c96a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c95e:	8a20      	ldrh	r0, [r4, #16]
    c960:	b918      	cbnz	r0, c96a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c962:	88a0      	ldrh	r0, [r4, #4]
    c964:	8aa1      	ldrh	r1, [r4, #20]
    c966:	4288      	cmp	r0, r1
    c968:	d101      	bne.n	c96e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    c96a:	2000      	movs	r0, #0
    c96c:	bd10      	pop	{r4, pc}
    c96e:	1d21      	adds	r1, r4, #4
    c970:	4620      	mov	r0, r4
    c972:	f7ff ff01 	bl	c778 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c976:	2000      	movs	r0, #0
    c978:	8220      	strh	r0, [r4, #16]
    c97a:	2001      	movs	r0, #1
    c97c:	bd10      	pop	{r4, pc}

0000c97e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    c97e:	b510      	push	{r4, lr}
    c980:	4604      	mov	r4, r0
    c982:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c986:	88c0      	ldrh	r0, [r0, #6]
    c988:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c98c:	4402      	add	r2, r0
    c98e:	8820      	ldrh	r0, [r4, #0]
    c990:	2845      	cmp	r0, #69	; 0x45
    c992:	d200      	bcs.n	c996 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    c994:	2045      	movs	r0, #69	; 0x45
    c996:	4288      	cmp	r0, r1
    c998:	d204      	bcs.n	c9a4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    c99a:	f44f 7180 	mov.w	r1, #256	; 0x100
    c99e:	2014      	movs	r0, #20
    c9a0:	f7f7 f9b8 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9a4:	7de0      	ldrb	r0, [r4, #23]
    c9a6:	2800      	cmp	r0, #0
    c9a8:	d003      	beq.n	c9b2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    c9aa:	8810      	ldrh	r0, [r2, #0]
    c9ac:	4288      	cmp	r0, r1
    c9ae:	d201      	bcs.n	c9b4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    c9b0:	2000      	movs	r0, #0
    c9b2:	bd10      	pop	{r4, pc}
    c9b4:	8011      	strh	r1, [r2, #0]
    c9b6:	1da1      	adds	r1, r4, #6
    c9b8:	4620      	mov	r0, r4
    c9ba:	f7ff fedd 	bl	c778 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c9be:	2000      	movs	r0, #0
    c9c0:	75e0      	strb	r0, [r4, #23]
    c9c2:	2001      	movs	r0, #1
    c9c4:	bd10      	pop	{r4, pc}

0000c9c6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    c9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9ca:	8941      	ldrh	r1, [r0, #10]
    c9cc:	8886      	ldrh	r6, [r0, #4]
    c9ce:	4604      	mov	r4, r0
    c9d0:	2500      	movs	r5, #0
    c9d2:	f100 070a 	add.w	r7, r0, #10
    c9d6:	e006      	b.n	c9e6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    c9d8:	4639      	mov	r1, r7
    c9da:	4620      	mov	r0, r4
    c9dc:	f7ff fecc 	bl	c778 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c9e0:	1c6d      	adds	r5, r5, #1
    c9e2:	8961      	ldrh	r1, [r4, #10]
    c9e4:	b2ad      	uxth	r5, r5
    c9e6:	42b1      	cmp	r1, r6
    c9e8:	d1f6      	bne.n	c9d8 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    c9ea:	4628      	mov	r0, r5
    c9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c9f0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    c9f0:	b530      	push	{r4, r5, lr}
    c9f2:	88c4      	ldrh	r4, [r0, #6]
    c9f4:	8881      	ldrh	r1, [r0, #4]
    c9f6:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c9fa:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c9fe:	4413      	add	r3, r2
    ca00:	8882      	ldrh	r2, [r0, #4]
    ca02:	8a85      	ldrh	r5, [r0, #20]
    ca04:	42aa      	cmp	r2, r5
    ca06:	d012      	beq.n	ca2e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    ca08:	42a1      	cmp	r1, r4
    ca0a:	d010      	beq.n	ca2e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    ca0c:	8981      	ldrh	r1, [r0, #12]
    ca0e:	b971      	cbnz	r1, ca2e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    ca10:	6982      	ldr	r2, [r0, #24]
    ca12:	b172      	cbz	r2, ca32 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ca14:	4610      	mov	r0, r2
    ca16:	f7ff ff16 	bl	c846 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    ca1a:	b950      	cbnz	r0, ca32 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ca1c:	8910      	ldrh	r0, [r2, #8]
    ca1e:	3224      	adds	r2, #36	; 0x24
    ca20:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    ca24:	4410      	add	r0, r2
    ca26:	7899      	ldrb	r1, [r3, #2]
    ca28:	7880      	ldrb	r0, [r0, #2]
    ca2a:	4288      	cmp	r0, r1
    ca2c:	d101      	bne.n	ca32 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ca2e:	2000      	movs	r0, #0
    ca30:	bd30      	pop	{r4, r5, pc}
    ca32:	4618      	mov	r0, r3
    ca34:	bd30      	pop	{r4, r5, pc}

0000ca36 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ca36:	7f00      	ldrb	r0, [r0, #28]
    ca38:	1d80      	adds	r0, r0, #6
    ca3a:	4408      	add	r0, r1
    ca3c:	1ec0      	subs	r0, r0, #3
    ca3e:	6010      	str	r0, [r2, #0]
    ca40:	8808      	ldrh	r0, [r1, #0]
    ca42:	4770      	bx	lr

0000ca44 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca48:	460e      	mov	r6, r1
    ca4a:	88c1      	ldrh	r1, [r0, #6]
    ca4c:	8902      	ldrh	r2, [r0, #8]
    ca4e:	4604      	mov	r4, r0
    ca50:	f100 0824 	add.w	r8, r0, #36	; 0x24
    ca54:	8800      	ldrh	r0, [r0, #0]
    ca56:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    ca5a:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    ca5e:	2845      	cmp	r0, #69	; 0x45
    ca60:	d200      	bcs.n	ca64 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    ca62:	2045      	movs	r0, #69	; 0x45
    ca64:	42b0      	cmp	r0, r6
    ca66:	d203      	bcs.n	ca70 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    ca68:	21c2      	movs	r1, #194	; 0xc2
    ca6a:	2014      	movs	r0, #20
    ca6c:	f7f7 f952 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca70:	4610      	mov	r0, r2
    ca72:	f7ff fea2 	bl	c7ba <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ca76:	b110      	cbz	r0, ca7e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    ca78:	2000      	movs	r0, #0
    ca7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca7e:	42af      	cmp	r7, r5
    ca80:	d908      	bls.n	ca94 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ca82:	7f21      	ldrb	r1, [r4, #28]
    ca84:	1b78      	subs	r0, r7, r5
    ca86:	1a40      	subs	r0, r0, r1
    ca88:	1f80      	subs	r0, r0, #6
    ca8a:	4286      	cmp	r6, r0
    ca8c:	dd02      	ble.n	ca94 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ca8e:	2000      	movs	r0, #0
    ca90:	75e0      	strb	r0, [r4, #23]
    ca92:	e7f1      	b.n	ca78 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    ca94:	eb08 0005 	add.w	r0, r8, r5
    ca98:	2101      	movs	r1, #1
    ca9a:	8006      	strh	r6, [r0, #0]
    ca9c:	75e1      	strb	r1, [r4, #23]
    ca9e:	e7ec      	b.n	ca7a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000caa0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    caa0:	b538      	push	{r3, r4, r5, lr}
    caa2:	88c4      	ldrh	r4, [r0, #6]
    caa4:	8881      	ldrh	r1, [r0, #4]
    caa6:	f100 0224 	add.w	r2, r0, #36	; 0x24
    caaa:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    caae:	441a      	add	r2, r3
    cab0:	42a1      	cmp	r1, r4
    cab2:	d010      	beq.n	cad6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cab4:	8983      	ldrh	r3, [r0, #12]
    cab6:	8a05      	ldrh	r5, [r0, #16]
    cab8:	8812      	ldrh	r2, [r2, #0]
    caba:	442b      	add	r3, r5
    cabc:	4293      	cmp	r3, r2
    cabe:	d308      	bcc.n	cad2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cac0:	f8ad 1000 	strh.w	r1, [sp]
    cac4:	4669      	mov	r1, sp
    cac6:	f7ff fe57 	bl	c778 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    caca:	f8bd 0000 	ldrh.w	r0, [sp]
    cace:	42a0      	cmp	r0, r4
    cad0:	d001      	beq.n	cad6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cad2:	2001      	movs	r0, #1
    cad4:	bd38      	pop	{r3, r4, r5, pc}
    cad6:	2000      	movs	r0, #0
    cad8:	bd38      	pop	{r3, r4, r5, pc}

0000cada <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cada:	b570      	push	{r4, r5, r6, lr}
    cadc:	88c6      	ldrh	r6, [r0, #6]
    cade:	8885      	ldrh	r5, [r0, #4]
    cae0:	4603      	mov	r3, r0
    cae2:	f100 0424 	add.w	r4, r0, #36	; 0x24
    cae6:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    caea:	4420      	add	r0, r4
    caec:	42b5      	cmp	r5, r6
    caee:	d102      	bne.n	caf6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    caf0:	2000      	movs	r0, #0
    caf2:	8218      	strh	r0, [r3, #16]
    caf4:	bd70      	pop	{r4, r5, r6, pc}
    caf6:	8804      	ldrh	r4, [r0, #0]
    caf8:	899d      	ldrh	r5, [r3, #12]
    cafa:	7f1e      	ldrb	r6, [r3, #28]
    cafc:	1b64      	subs	r4, r4, r5
    cafe:	4435      	add	r5, r6
    cb00:	4428      	add	r0, r5
    cb02:	880d      	ldrh	r5, [r1, #0]
    cb04:	b2a4      	uxth	r4, r4
    cb06:	1cc0      	adds	r0, r0, #3
    cb08:	42a5      	cmp	r5, r4
    cb0a:	d900      	bls.n	cb0e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cb0c:	800c      	strh	r4, [r1, #0]
    cb0e:	899c      	ldrh	r4, [r3, #12]
    cb10:	b124      	cbz	r4, cb1c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cb12:	2400      	movs	r4, #0
    cb14:	7014      	strb	r4, [r2, #0]
    cb16:	8809      	ldrh	r1, [r1, #0]
    cb18:	8219      	strh	r1, [r3, #16]
    cb1a:	bd70      	pop	{r4, r5, r6, pc}
    cb1c:	2401      	movs	r4, #1
    cb1e:	e7f9      	b.n	cb14 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cb20 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    cb20:	b510      	push	{r4, lr}
    cb22:	8a81      	ldrh	r1, [r0, #20]
    cb24:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cb28:	3aff      	subs	r2, #255	; 0xff
    cb2a:	d002      	beq.n	cb32 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    cb2c:	7d82      	ldrb	r2, [r0, #22]
    cb2e:	b952      	cbnz	r2, cb46 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cb30:	e004      	b.n	cb3c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    cb32:	f240 3155 	movw	r1, #853	; 0x355
    cb36:	2014      	movs	r0, #20
    cb38:	f7f7 f8ec 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb3c:	8880      	ldrh	r0, [r0, #4]
    cb3e:	4281      	cmp	r1, r0
    cb40:	d101      	bne.n	cb46 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cb42:	2000      	movs	r0, #0
    cb44:	bd10      	pop	{r4, pc}
    cb46:	2001      	movs	r0, #1
    cb48:	bd10      	pop	{r4, pc}

0000cb4a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    cb4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cb4e:	8281      	strh	r1, [r0, #20]
    cb50:	2100      	movs	r1, #0
    cb52:	7581      	strb	r1, [r0, #22]
    cb54:	4770      	bx	lr

0000cb56 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    cb56:	b510      	push	{r4, lr}
    cb58:	8a81      	ldrh	r1, [r0, #20]
    cb5a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cb5e:	3aff      	subs	r2, #255	; 0xff
    cb60:	d004      	beq.n	cb6c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    cb62:	f44f 714e 	mov.w	r1, #824	; 0x338
    cb66:	2014      	movs	r0, #20
    cb68:	f7f7 f8d4 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb6c:	88c1      	ldrh	r1, [r0, #6]
    cb6e:	8281      	strh	r1, [r0, #20]
    cb70:	89c1      	ldrh	r1, [r0, #14]
    cb72:	b101      	cbz	r1, cb76 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    cb74:	2101      	movs	r1, #1
    cb76:	7581      	strb	r1, [r0, #22]
    cb78:	bd10      	pop	{r4, pc}

0000cb7a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb7e:	461d      	mov	r5, r3
    cb80:	4616      	mov	r6, r2
    cb82:	9f06      	ldr	r7, [sp, #24]
    cb84:	460b      	mov	r3, r1
    cb86:	4604      	mov	r4, r0
    cb88:	463a      	mov	r2, r7
    cb8a:	4629      	mov	r1, r5
    cb8c:	4630      	mov	r0, r6
    cb8e:	f000 f84f 	bl	cc30 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cb92:	4283      	cmp	r3, r0
    cb94:	d201      	bcs.n	cb9a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cb96:	21a1      	movs	r1, #161	; 0xa1
    cb98:	e018      	b.n	cbcc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cb9a:	1ce0      	adds	r0, r4, #3
    cb9c:	f020 0103 	bic.w	r1, r0, #3
    cba0:	4620      	mov	r0, r4
    cba2:	42a1      	cmp	r1, r4
    cba4:	d001      	beq.n	cbaa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    cba6:	21a2      	movs	r1, #162	; 0xa2
    cba8:	e010      	b.n	cbcc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cbaa:	2224      	movs	r2, #36	; 0x24
    cbac:	2100      	movs	r1, #0
    cbae:	f7ff f961 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cbb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cbb6:	82a0      	strh	r0, [r4, #20]
    cbb8:	19a8      	adds	r0, r5, r6
    cbba:	1d80      	adds	r0, r0, #6
    cbbc:	4378      	muls	r0, r7
    cbbe:	b280      	uxth	r0, r0
    cbc0:	7725      	strb	r5, [r4, #28]
    cbc2:	8060      	strh	r0, [r4, #2]
    cbc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cbc8:	d903      	bls.n	cbd2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cbca:	21a8      	movs	r1, #168	; 0xa8
    cbcc:	2014      	movs	r0, #20
    cbce:	f7f7 f8a1 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbd2:	8026      	strh	r6, [r4, #0]
    cbd4:	2000      	movs	r0, #0
    cbd6:	7760      	strb	r0, [r4, #29]
    cbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cbdc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cbdc:	6181      	str	r1, [r0, #24]
    cbde:	6188      	str	r0, [r1, #24]
    cbe0:	4770      	bx	lr

0000cbe2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbe6:	460b      	mov	r3, r1
    cbe8:	4604      	mov	r4, r0
    cbea:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cbee:	8905      	ldrh	r5, [r0, #8]
    cbf0:	8946      	ldrh	r6, [r0, #10]
    cbf2:	8880      	ldrh	r0, [r0, #4]
    cbf4:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cbf8:	4439      	add	r1, r7
    cbfa:	460f      	mov	r7, r1
    cbfc:	4285      	cmp	r5, r0
    cbfe:	d102      	bne.n	cc06 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cc00:	2000      	movs	r0, #0
    cc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc06:	b10a      	cbz	r2, cc0c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cc08:	1cc8      	adds	r0, r1, #3
    cc0a:	6010      	str	r0, [r2, #0]
    cc0c:	b123      	cbz	r3, cc18 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cc0e:	7f22      	ldrb	r2, [r4, #28]
    cc10:	1cf9      	adds	r1, r7, #3
    cc12:	4618      	mov	r0, r3
    cc14:	f7ff f8b4 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc18:	883f      	ldrh	r7, [r7, #0]
    cc1a:	f104 0108 	add.w	r1, r4, #8
    cc1e:	4620      	mov	r0, r4
    cc20:	f7ff fdaa 	bl	c778 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc24:	42b5      	cmp	r5, r6
    cc26:	d101      	bne.n	cc2c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    cc28:	8920      	ldrh	r0, [r4, #8]
    cc2a:	8160      	strh	r0, [r4, #10]
    cc2c:	4638      	mov	r0, r7
    cc2e:	e7e8      	b.n	cc02 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000cc30 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cc30:	4401      	add	r1, r0
    cc32:	1d89      	adds	r1, r1, #6
    cc34:	4351      	muls	r1, r2
    cc36:	b28a      	uxth	r2, r1
    cc38:	2100      	movs	r1, #0
    cc3a:	2845      	cmp	r0, #69	; 0x45
    cc3c:	d201      	bcs.n	cc42 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    cc3e:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    cc42:	3224      	adds	r2, #36	; 0x24
    cc44:	1850      	adds	r0, r2, r1
    cc46:	b280      	uxth	r0, r0
    cc48:	4770      	bx	lr

0000cc4a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    cc4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc4e:	4688      	mov	r8, r1
    cc50:	88c1      	ldrh	r1, [r0, #6]
    cc52:	4604      	mov	r4, r0
    cc54:	8900      	ldrh	r0, [r0, #8]
    cc56:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    cc5a:	f104 0524 	add.w	r5, r4, #36	; 0x24
    cc5e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cc62:	eb05 0906 	add.w	r9, r5, r6
    cc66:	f7ff fda8 	bl	c7ba <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cc6a:	2200      	movs	r2, #0
    cc6c:	b998      	cbnz	r0, cc96 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    cc6e:	8820      	ldrh	r0, [r4, #0]
    cc70:	2845      	cmp	r0, #69	; 0x45
    cc72:	d200      	bcs.n	cc76 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    cc74:	2045      	movs	r0, #69	; 0x45
    cc76:	42b7      	cmp	r7, r6
    cc78:	d906      	bls.n	cc88 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cc7a:	7f23      	ldrb	r3, [r4, #28]
    cc7c:	1bb9      	subs	r1, r7, r6
    cc7e:	1ac9      	subs	r1, r1, r3
    cc80:	1f89      	subs	r1, r1, #6
    cc82:	4281      	cmp	r1, r0
    cc84:	da00      	bge.n	cc88 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cc86:	4608      	mov	r0, r1
    cc88:	89e1      	ldrh	r1, [r4, #14]
    cc8a:	b111      	cbz	r1, cc92 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    cc8c:	f8b9 3000 	ldrh.w	r3, [r9]
    cc90:	1ac0      	subs	r0, r0, r3
    cc92:	4540      	cmp	r0, r8
    cc94:	da03      	bge.n	cc9e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    cc96:	8262      	strh	r2, [r4, #18]
    cc98:	2000      	movs	r0, #0
    cc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc9e:	7f20      	ldrb	r0, [r4, #28]
    cca0:	4429      	add	r1, r5
    cca2:	1d80      	adds	r0, r0, #6
    cca4:	4430      	add	r0, r6
    cca6:	4408      	add	r0, r1
    cca8:	f8a4 8012 	strh.w	r8, [r4, #18]
    ccac:	1ec0      	subs	r0, r0, #3
    ccae:	e7f4      	b.n	cc9a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000ccb0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    ccb0:	2100      	movs	r1, #0
    ccb2:	81c1      	strh	r1, [r0, #14]
    ccb4:	8241      	strh	r1, [r0, #18]
    ccb6:	75c1      	strb	r1, [r0, #23]
    ccb8:	7581      	strb	r1, [r0, #22]
    ccba:	4770      	bx	lr

0000ccbc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    ccbc:	b570      	push	{r4, r5, r6, lr}
    ccbe:	2300      	movs	r3, #0
    ccc0:	2908      	cmp	r1, #8
    ccc2:	d204      	bcs.n	ccce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    ccc4:	f240 11cb 	movw	r1, #459	; 0x1cb
    ccc8:	2015      	movs	r0, #21
    ccca:	f7f7 f823 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccce:	6802      	ldr	r2, [r0, #0]
    ccd0:	b90a      	cbnz	r2, ccd6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    ccd2:	e01e      	b.n	cd12 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    ccd4:	4610      	mov	r0, r2
    ccd6:	6802      	ldr	r2, [r0, #0]
    ccd8:	8893      	ldrh	r3, [r2, #4]
    ccda:	428b      	cmp	r3, r1
    ccdc:	d002      	beq.n	cce4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    ccde:	6813      	ldr	r3, [r2, #0]
    cce0:	2b00      	cmp	r3, #0
    cce2:	d1f7      	bne.n	ccd4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    cce4:	8894      	ldrh	r4, [r2, #4]
    cce6:	4613      	mov	r3, r2
    cce8:	428c      	cmp	r4, r1
    ccea:	d101      	bne.n	ccf0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    ccec:	6811      	ldr	r1, [r2, #0]
    ccee:	e00d      	b.n	cd0c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    ccf0:	f101 0508 	add.w	r5, r1, #8
    ccf4:	b2ae      	uxth	r6, r5
    ccf6:	2500      	movs	r5, #0
    ccf8:	42b4      	cmp	r4, r6
    ccfa:	d309      	bcc.n	cd10 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    ccfc:	1a64      	subs	r4, r4, r1
    ccfe:	4411      	add	r1, r2
    cd00:	600d      	str	r5, [r1, #0]
    cd02:	808c      	strh	r4, [r1, #4]
    cd04:	6802      	ldr	r2, [r0, #0]
    cd06:	6812      	ldr	r2, [r2, #0]
    cd08:	6002      	str	r2, [r0, #0]
    cd0a:	600a      	str	r2, [r1, #0]
    cd0c:	6001      	str	r1, [r0, #0]
    cd0e:	e000      	b.n	cd12 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    cd10:	2300      	movs	r3, #0
    cd12:	4618      	mov	r0, r3
    cd14:	bd70      	pop	{r4, r5, r6, pc}

0000cd16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    cd16:	b510      	push	{r4, lr}
    cd18:	000c      	movs	r4, r1
    cd1a:	d006      	beq.n	cd2a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    cd1c:	2c08      	cmp	r4, #8
    cd1e:	d209      	bcs.n	cd34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    cd20:	f240 1195 	movw	r1, #405	; 0x195
    cd24:	2015      	movs	r0, #21
    cd26:	f7f6 fff5 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd2a:	b108      	cbz	r0, cd30 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    cd2c:	2100      	movs	r1, #0
    cd2e:	6001      	str	r1, [r0, #0]
    cd30:	2000      	movs	r0, #0
    cd32:	bd10      	pop	{r4, pc}
    cd34:	b118      	cbz	r0, cd3e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    cd36:	b2a1      	uxth	r1, r4
    cd38:	6800      	ldr	r0, [r0, #0]
    cd3a:	f000 f814 	bl	cd66 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cd3e:	1d20      	adds	r0, r4, #4
    cd40:	bd10      	pop	{r4, pc}

0000cd42 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cd42:	2100      	movs	r1, #0
    cd44:	6802      	ldr	r2, [r0, #0]
    cd46:	e003      	b.n	cd50 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    cd48:	8893      	ldrh	r3, [r2, #4]
    cd4a:	6812      	ldr	r2, [r2, #0]
    cd4c:	4419      	add	r1, r3
    cd4e:	b289      	uxth	r1, r1
    cd50:	2a00      	cmp	r2, #0
    cd52:	d1f9      	bne.n	cd48 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    cd54:	f000 b807 	b.w	cd66 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cd58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cd58:	2300      	movs	r3, #0
    cd5a:	600b      	str	r3, [r1, #0]
    cd5c:	808a      	strh	r2, [r1, #4]
    cd5e:	6802      	ldr	r2, [r0, #0]
    cd60:	600a      	str	r2, [r1, #0]
    cd62:	6001      	str	r1, [r0, #0]
    cd64:	4770      	bx	lr
    cd66:	2300      	movs	r3, #0
    cd68:	6043      	str	r3, [r0, #4]
    cd6a:	1d02      	adds	r2, r0, #4
    cd6c:	8101      	strh	r1, [r0, #8]
    cd6e:	6002      	str	r2, [r0, #0]
    cd70:	4770      	bx	lr

0000cd72 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    cd72:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    cd76:	3bff      	subs	r3, #255	; 0xff
    cd78:	d001      	beq.n	cd7e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    cd7a:	2902      	cmp	r1, #2
    cd7c:	d301      	bcc.n	cd82 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    cd7e:	2000      	movs	r0, #0
    cd80:	4770      	bx	lr
    cd82:	f7f7 ba9b 	b.w	42bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000cd86 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    cd86:	b50e      	push	{r1, r2, r3, lr}
    cd88:	4669      	mov	r1, sp
    cd8a:	f000 f818 	bl	cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    cd8e:	b120      	cbz	r0, cd9a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    cd90:	f44f 71b2 	mov.w	r1, #356	; 0x164
    cd94:	2017      	movs	r0, #23
    cd96:	f7f6 ffbd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd9a:	4668      	mov	r0, sp
    cd9c:	f7f7 fa0c 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    cda0:	b108      	cbz	r0, cda6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    cda2:	2000      	movs	r0, #0
    cda4:	bd0e      	pop	{r1, r2, r3, pc}
    cda6:	2001      	movs	r0, #1
    cda8:	bd0e      	pop	{r1, r2, r3, pc}

0000cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    cdaa:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    cdae:	3aff      	subs	r2, #255	; 0xff
    cdb0:	d001      	beq.n	cdb6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    cdb2:	2902      	cmp	r1, #2
    cdb4:	d301      	bcc.n	cdba <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    cdb6:	2000      	movs	r0, #0
    cdb8:	4770      	bx	lr
    cdba:	f7f7 bab9 	b.w	4330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    cdbe:	b570      	push	{r4, r5, r6, lr}
    cdc0:	4605      	mov	r5, r0
    cdc2:	460c      	mov	r4, r1
    cdc4:	4608      	mov	r0, r1
    cdc6:	f000 f864 	bl	ce92 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    cdca:	b108      	cbz	r0, cdd0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    cdcc:	2010      	movs	r0, #16
    cdce:	bd70      	pop	{r4, r5, r6, pc}
    cdd0:	2d02      	cmp	r5, #2
    cdd2:	d301      	bcc.n	cdd8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    cdd4:	2007      	movs	r0, #7
    cdd6:	bd70      	pop	{r4, r5, r6, pc}
    cdd8:	7025      	strb	r5, [r4, #0]
    cdda:	2000      	movs	r0, #0
    cddc:	8060      	strh	r0, [r4, #2]
    cdde:	bd70      	pop	{r4, r5, r6, pc}
    cde0:	b510      	push	{r4, lr}
    cde2:	4604      	mov	r4, r0
    cde4:	f7f7 faf0 	bl	43c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    cde8:	42a0      	cmp	r0, r4
    cdea:	d901      	bls.n	cdf0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    cdec:	2001      	movs	r0, #1
    cdee:	bd10      	pop	{r4, pc}
    cdf0:	2000      	movs	r0, #0
    cdf2:	bd10      	pop	{r4, pc}
    cdf4:	4770      	bx	lr

0000cdf6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    cdf6:	b570      	push	{r4, r5, r6, lr}
    cdf8:	460e      	mov	r6, r1
    cdfa:	461d      	mov	r5, r3
    cdfc:	4611      	mov	r1, r2
    cdfe:	f000 f811 	bl	ce24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    ce02:	4604      	mov	r4, r0
    ce04:	4629      	mov	r1, r5
    ce06:	4630      	mov	r0, r6
    ce08:	f000 f803 	bl	ce12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    ce0c:	4420      	add	r0, r4
    ce0e:	1d00      	adds	r0, r0, #4
    ce10:	bd70      	pop	{r4, r5, r6, pc}
    ce12:	b510      	push	{r4, lr}
    ce14:	460a      	mov	r2, r1
    ce16:	2101      	movs	r1, #1
    ce18:	f7ff ff0a 	bl	cc30 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ce1c:	1cc0      	adds	r0, r0, #3
    ce1e:	f020 0003 	bic.w	r0, r0, #3
    ce22:	bd10      	pop	{r4, pc}
    ce24:	b510      	push	{r4, lr}
    ce26:	460a      	mov	r2, r1
    ce28:	2101      	movs	r1, #1
    ce2a:	f7ff ff01 	bl	cc30 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ce2e:	1cc0      	adds	r0, r0, #3
    ce30:	f020 0003 	bic.w	r0, r0, #3
    ce34:	bd10      	pop	{r4, pc}

0000ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>:
    ce36:	b510      	push	{r4, lr}
    ce38:	680b      	ldr	r3, [r1, #0]
    ce3a:	4604      	mov	r4, r0
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d00d      	beq.n	ce5c <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x26>
    ce40:	88ca      	ldrh	r2, [r1, #6]
    ce42:	4619      	mov	r1, r3
    ce44:	6820      	ldr	r0, [r4, #0]
    ce46:	f7ff ff87 	bl	cd58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    ce4a:	7920      	ldrb	r0, [r4, #4]
    ce4c:	2801      	cmp	r0, #1
    ce4e:	d102      	bne.n	ce56 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x20>
    ce50:	6820      	ldr	r0, [r4, #0]
    ce52:	f7ff ff76 	bl	cd42 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    ce56:	7920      	ldrb	r0, [r4, #4]
    ce58:	1e40      	subs	r0, r0, #1
    ce5a:	7120      	strb	r0, [r4, #4]
    ce5c:	bd10      	pop	{r4, pc}
    ce5e:	2800      	cmp	r0, #0
    ce60:	db09      	blt.n	ce76 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x40>
    ce62:	f000 021f 	and.w	r2, r0, #31
    ce66:	2101      	movs	r1, #1
    ce68:	4091      	lsls	r1, r2
    ce6a:	0940      	lsrs	r0, r0, #5
    ce6c:	0080      	lsls	r0, r0, #2
    ce6e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce72:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ce76:	4770      	bx	lr

0000ce78 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ce78:	f7f7 bcba 	b.w	47f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000ce7c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    ce7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    ce80:	2000      	movs	r0, #0
    ce82:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    ce86:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce8a:	2001      	movs	r0, #1
    ce8c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ce90:	4770      	bx	lr

0000ce92 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    ce92:	b108      	cbz	r0, ce98 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    ce94:	2000      	movs	r0, #0
    ce96:	4770      	bx	lr
    ce98:	2001      	movs	r0, #1
    ce9a:	4770      	bx	lr

0000ce9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ce9c:	f7f7 bdee 	b.w	4a7c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000cea0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    cea0:	f7f7 bddc 	b.w	4a5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000cea4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    cea4:	b510      	push	{r4, lr}
    cea6:	2900      	cmp	r1, #0
    cea8:	4604      	mov	r4, r0
    ceaa:	f04f 0106 	mov.w	r1, #6
    ceae:	d002      	beq.n	ceb6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    ceb0:	f7f6 ffc8 	bl	3e44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ceb4:	e001      	b.n	ceba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    ceb6:	f7f6 ffe1 	bl	3e7c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ceba:	7960      	ldrb	r0, [r4, #5]
    cebc:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    cec0:	7160      	strb	r0, [r4, #5]
    cec2:	bd10      	pop	{r4, pc}

0000cec4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    cec4:	4770      	bx	lr

0000cec6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    cec6:	b530      	push	{r4, r5, lr}
    cec8:	460c      	mov	r4, r1
    ceca:	4605      	mov	r5, r0
    cecc:	b08d      	sub	sp, #52	; 0x34
    cece:	f04f 0103 	mov.w	r1, #3
    ced2:	f104 0003 	add.w	r0, r4, #3
    ced6:	b112      	cbz	r2, cede <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    ced8:	f7f6 ffb4 	bl	3e44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cedc:	e001      	b.n	cee2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    cede:	f7f6 ffcd 	bl	3e7c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    cee2:	7960      	ldrb	r0, [r4, #5]
    cee4:	220d      	movs	r2, #13
    cee6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    ceea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ceee:	7160      	strb	r0, [r4, #5]
    cef0:	2100      	movs	r1, #0
    cef2:	a804      	add	r0, sp, #16
    cef4:	f7fe ffbe 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cef8:	78e0      	ldrb	r0, [r4, #3]
    cefa:	f88d 001f 	strb.w	r0, [sp, #31]
    cefe:	7920      	ldrb	r0, [r4, #4]
    cf00:	f88d 001e 	strb.w	r0, [sp, #30]
    cf04:	7960      	ldrb	r0, [r4, #5]
    cf06:	f88d 001d 	strb.w	r0, [sp, #29]
    cf0a:	2210      	movs	r2, #16
    cf0c:	4629      	mov	r1, r5
    cf0e:	4668      	mov	r0, sp
    cf10:	f7fe ff36 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf14:	4668      	mov	r0, sp
    cf16:	f7ff ffaf 	bl	ce78 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cf1a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    cf1e:	7020      	strb	r0, [r4, #0]
    cf20:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    cf24:	7060      	strb	r0, [r4, #1]
    cf26:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    cf2a:	70a0      	strb	r0, [r4, #2]
    cf2c:	b00d      	add	sp, #52	; 0x34
    cf2e:	bd30      	pop	{r4, r5, pc}

0000cf30 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    cf30:	f7f8 b93a 	b.w	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    cf34:	07c1      	lsls	r1, r0, #31
    cf36:	d001      	beq.n	cf3c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    cf38:	2001      	movs	r0, #1
    cf3a:	4770      	bx	lr
    cf3c:	0780      	lsls	r0, r0, #30
    cf3e:	d501      	bpl.n	cf44 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    cf40:	2002      	movs	r0, #2
    cf42:	4770      	bx	lr
    cf44:	2000      	movs	r0, #0
    cf46:	4770      	bx	lr
    cf48:	b510      	push	{r4, lr}
    cf4a:	2801      	cmp	r0, #1
    cf4c:	d008      	beq.n	cf60 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    cf4e:	2802      	cmp	r0, #2
    cf50:	d004      	beq.n	cf5c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    cf52:	f240 3197 	movw	r1, #919	; 0x397
    cf56:	2006      	movs	r0, #6
    cf58:	f7f6 fedc 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf5c:	2001      	movs	r0, #1
    cf5e:	bd10      	pop	{r4, pc}
    cf60:	2000      	movs	r0, #0
    cf62:	bd10      	pop	{r4, pc}
    cf64:	2900      	cmp	r1, #0
    cf66:	d004      	beq.n	cf72 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    cf68:	2801      	cmp	r0, #1
    cf6a:	d003      	beq.n	cf74 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cf6c:	2901      	cmp	r1, #1
    cf6e:	d001      	beq.n	cf74 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cf70:	2002      	movs	r0, #2
    cf72:	4770      	bx	lr
    cf74:	2001      	movs	r0, #1
    cf76:	4770      	bx	lr
    cf78:	f7ff bdaf 	b.w	cada <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000cf7c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    cf7c:	2201      	movs	r2, #1
    cf7e:	f7f8 bcbd 	b.w	58fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000cf82 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    cf82:	b510      	push	{r4, lr}
    cf84:	f002 fb1e 	bl	f5c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    cf88:	b118      	cbz	r0, cf92 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    cf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf8e:	f7fd ba49 	b.w	a424 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    cf92:	20ff      	movs	r0, #255	; 0xff
    cf94:	bd10      	pop	{r4, pc}

0000cf96 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    cf96:	b510      	push	{r4, lr}
    cf98:	f7f8 fcfa 	bl	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cf9c:	2810      	cmp	r0, #16
    cf9e:	d003      	beq.n	cfa8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    cfa0:	f7f8 fcc6 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    cfa4:	2810      	cmp	r0, #16
    cfa6:	d100      	bne.n	cfaa <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    cfa8:	2008      	movs	r0, #8
    cfaa:	bd10      	pop	{r4, pc}

0000cfac <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    cfac:	b510      	push	{r4, lr}
    cfae:	f7f8 fcef 	bl	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cfb2:	2810      	cmp	r0, #16
    cfb4:	d007      	beq.n	cfc6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cfb6:	f7f8 fcbb 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    cfba:	2810      	cmp	r0, #16
    cfbc:	d003      	beq.n	cfc6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cfbe:	f7f8 fd2f 	bl	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    cfc2:	2001      	movs	r0, #1
    cfc4:	bd10      	pop	{r4, pc}
    cfc6:	2000      	movs	r0, #0
    cfc8:	bd10      	pop	{r4, pc}

0000cfca <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    cfca:	b510      	push	{r4, lr}
    cfcc:	f7f8 fce0 	bl	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cfd0:	2810      	cmp	r0, #16
    cfd2:	d003      	beq.n	cfdc <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    cfd4:	f7f8 fd6c 	bl	5ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    cfd8:	2001      	movs	r0, #1
    cfda:	bd10      	pop	{r4, pc}
    cfdc:	2000      	movs	r0, #0
    cfde:	bd10      	pop	{r4, pc}

0000cfe0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    cfe0:	b570      	push	{r4, r5, r6, lr}
    cfe2:	460e      	mov	r6, r1
    cfe4:	b08c      	sub	sp, #48	; 0x30
    cfe6:	4614      	mov	r4, r2
    cfe8:	4601      	mov	r1, r0
    cfea:	461d      	mov	r5, r3
    cfec:	2210      	movs	r2, #16
    cfee:	4668      	mov	r0, sp
    cff0:	f000 f91a 	bl	d228 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cff4:	2210      	movs	r2, #16
    cff6:	4631      	mov	r1, r6
    cff8:	a804      	add	r0, sp, #16
    cffa:	f000 f915 	bl	d228 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cffe:	4668      	mov	r0, sp
    d000:	f7ff ff3a 	bl	ce78 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d004:	a908      	add	r1, sp, #32
    d006:	f04f 0210 	mov.w	r2, #16
    d00a:	4628      	mov	r0, r5
    d00c:	b11c      	cbz	r4, d016 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d00e:	f000 f90b 	bl	d228 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d012:	b00c      	add	sp, #48	; 0x30
    d014:	bd70      	pop	{r4, r5, r6, pc}
    d016:	f7fe feb3 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d01a:	e7fa      	b.n	d012 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d01c:	b510      	push	{r4, lr}
    d01e:	460c      	mov	r4, r1
    d020:	2100      	movs	r1, #0
    d022:	f7ff fec2 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d026:	6060      	str	r0, [r4, #4]
    d028:	b118      	cbz	r0, d032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d02a:	2001      	movs	r0, #1
    d02c:	7020      	strb	r0, [r4, #0]
    d02e:	2000      	movs	r0, #0
    d030:	bd10      	pop	{r4, pc}
    d032:	2002      	movs	r0, #2
    d034:	bd10      	pop	{r4, pc}

0000d036 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d036:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d03a:	4348      	muls	r0, r1
    d03c:	4770      	bx	lr

0000d03e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d03e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d042:	fbb0 f0f1 	udiv	r0, r0, r1
    d046:	b280      	uxth	r0, r0
    d048:	4770      	bx	lr

0000d04a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d04a:	b570      	push	{r4, r5, r6, lr}
    d04c:	4604      	mov	r4, r0
    d04e:	4290      	cmp	r0, r2
    d050:	d20b      	bcs.n	d06a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d052:	1b10      	subs	r0, r2, r4
    d054:	2864      	cmp	r0, #100	; 0x64
    d056:	d200      	bcs.n	d05a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d058:	2064      	movs	r0, #100	; 0x64
    d05a:	1825      	adds	r5, r4, r0
    d05c:	428d      	cmp	r5, r1
    d05e:	d803      	bhi.n	d068 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d060:	2104      	movs	r1, #4
    d062:	f7f4 f9f1 	bl	1448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d066:	b108      	cbz	r0, d06c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d068:	4620      	mov	r0, r4
    d06a:	bd70      	pop	{r4, r5, r6, pc}
    d06c:	4628      	mov	r0, r5
    d06e:	bd70      	pop	{r4, r5, r6, pc}

0000d070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d070:	b510      	push	{r4, lr}
    d072:	f1a2 030f 	sub.w	r3, r2, #15
    d076:	290c      	cmp	r1, #12
    d078:	d244      	bcs.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d07a:	e8df f001 	tbb	[pc, r1]
    d07e:	0806      	.short	0x0806
    d080:	1815120d 	.word	0x1815120d
    d084:	4127241c 	.word	0x4127241c
    d088:	312a      	.short	0x312a
    d08a:	b3c2      	cbz	r2, d0fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d08c:	e03a      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d08e:	2a07      	cmp	r2, #7
    d090:	d03a      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d092:	2a08      	cmp	r2, #8
    d094:	d038      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d096:	e035      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d098:	2a0c      	cmp	r2, #12
    d09a:	d035      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d09c:	2a0b      	cmp	r2, #11
    d09e:	d033      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0a0:	e030      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0a2:	2a0d      	cmp	r2, #13
    d0a4:	d030      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0a6:	e02d      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0a8:	2b0c      	cmp	r3, #12
    d0aa:	d92d      	bls.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ac:	e02a      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0ae:	3a10      	subs	r2, #16
    d0b0:	2a0b      	cmp	r2, #11
    d0b2:	d929      	bls.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0b4:	e026      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0b6:	2b03      	cmp	r3, #3
    d0b8:	d926      	bls.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ba:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d0be:	b308      	cbz	r0, d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0c0:	2a1b      	cmp	r2, #27
    d0c2:	d921      	bls.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0c4:	e01e      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0c6:	2a04      	cmp	r2, #4
    d0c8:	d01e      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ca:	e01b      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0cc:	2a06      	cmp	r2, #6
    d0ce:	d01b      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0d0:	e018      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0d2:	2a1c      	cmp	r2, #28
    d0d4:	d018      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0d6:	2a1d      	cmp	r2, #29
    d0d8:	d016      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0da:	2a1e      	cmp	r2, #30
    d0dc:	d014      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0de:	e011      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0e0:	2a1f      	cmp	r2, #31
    d0e2:	d011      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0e4:	2a20      	cmp	r2, #32
    d0e6:	d00f      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0e8:	2a21      	cmp	r2, #33	; 0x21
    d0ea:	d00d      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ec:	2a22      	cmp	r2, #34	; 0x22
    d0ee:	d00b      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0f0:	2a23      	cmp	r2, #35	; 0x23
    d0f2:	d009      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0f4:	2a24      	cmp	r2, #36	; 0x24
    d0f6:	d007      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0f8:	2a26      	cmp	r2, #38	; 0x26
    d0fa:	d005      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0fc:	e002      	b.n	d104 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0fe:	e003      	b.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d100:	2a0e      	cmp	r2, #14
    d102:	d001      	beq.n	d108 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d104:	2000      	movs	r0, #0
    d106:	bd10      	pop	{r4, pc}
    d108:	2001      	movs	r0, #1
    d10a:	bd10      	pop	{r4, pc}

0000d10c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d10c:	280c      	cmp	r0, #12
    d10e:	d013      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d110:	280b      	cmp	r0, #11
    d112:	d011      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d114:	280d      	cmp	r0, #13
    d116:	d00f      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d118:	281f      	cmp	r0, #31
    d11a:	d00d      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d11c:	2820      	cmp	r0, #32
    d11e:	d00b      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d120:	2821      	cmp	r0, #33	; 0x21
    d122:	d009      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d124:	2822      	cmp	r0, #34	; 0x22
    d126:	d007      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d128:	2823      	cmp	r0, #35	; 0x23
    d12a:	d005      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d12c:	2824      	cmp	r0, #36	; 0x24
    d12e:	d003      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d130:	2826      	cmp	r0, #38	; 0x26
    d132:	d001      	beq.n	d138 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d134:	2000      	movs	r0, #0
    d136:	4770      	bx	lr
    d138:	2001      	movs	r0, #1
    d13a:	4770      	bx	lr

0000d13c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d13c:	f011 0f0c 	tst.w	r1, #12
    d140:	d016      	beq.n	d170 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d142:	074a      	lsls	r2, r1, #29
    d144:	f44f 7116 	mov.w	r1, #600	; 0x258
    d148:	2a00      	cmp	r2, #0
    d14a:	da02      	bge.n	d152 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d14c:	f04f 0210 	mov.w	r2, #16
    d150:	e001      	b.n	d156 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d152:	f04f 0240 	mov.w	r2, #64	; 0x40
    d156:	da01      	bge.n	d15c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d158:	f04f 0196 	mov.w	r1, #150	; 0x96
    d15c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d160:	eba0 0301 	sub.w	r3, r0, r1
    d164:	4288      	cmp	r0, r1
    d166:	d910      	bls.n	d18a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d168:	fb93 f0f2 	sdiv	r0, r3, r2
    d16c:	b280      	uxth	r0, r0
    d16e:	4770      	bx	lr
    d170:	2902      	cmp	r1, #2
    d172:	d002      	beq.n	d17a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d174:	2870      	cmp	r0, #112	; 0x70
    d176:	d80a      	bhi.n	d18e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d178:	e007      	b.n	d18a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d17a:	283c      	cmp	r0, #60	; 0x3c
    d17c:	d905      	bls.n	d18a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d17e:	383c      	subs	r0, #60	; 0x3c
    d180:	17c1      	asrs	r1, r0, #31
    d182:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d186:	1080      	asrs	r0, r0, #2
    d188:	e7f0      	b.n	d16c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d18a:	2000      	movs	r0, #0
    d18c:	e7ee      	b.n	d16c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d18e:	3870      	subs	r0, #112	; 0x70
    d190:	17c1      	asrs	r1, r0, #31
    d192:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d196:	10c0      	asrs	r0, r0, #3
    d198:	e7e8      	b.n	d16c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d19a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d19a:	6809      	ldr	r1, [r1, #0]
    d19c:	f8c0 105e 	str.w	r1, [r0, #94]	; 0x5e
    d1a0:	4770      	bx	lr

0000d1a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d1a2:	07c1      	lsls	r1, r0, #31
    d1a4:	d001      	beq.n	d1aa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d1a6:	2001      	movs	r0, #1
    d1a8:	4770      	bx	lr
    d1aa:	0781      	lsls	r1, r0, #30
    d1ac:	d501      	bpl.n	d1b2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d1ae:	2002      	movs	r0, #2
    d1b0:	4770      	bx	lr
    d1b2:	0740      	lsls	r0, r0, #29
    d1b4:	d501      	bpl.n	d1ba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d1b6:	2008      	movs	r0, #8
    d1b8:	4770      	bx	lr
    d1ba:	2000      	movs	r0, #0
    d1bc:	4770      	bx	lr

0000d1be <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d1be:	b510      	push	{r4, lr}
    d1c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d1c4:	2901      	cmp	r1, #1
    d1c6:	d006      	beq.n	d1d6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d1c8:	2902      	cmp	r1, #2
    d1ca:	d005      	beq.n	d1d8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d1cc:	f240 4129 	movw	r1, #1065	; 0x429
    d1d0:	2029      	movs	r0, #41	; 0x29
    d1d2:	f7f6 fd9f 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1d6:	b108      	cbz	r0, d1dc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d1d8:	4610      	mov	r0, r2
    d1da:	bd10      	pop	{r4, pc}
    d1dc:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d1e0:	bd10      	pop	{r4, pc}

0000d1e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1e6:	460c      	mov	r4, r1
    d1e8:	4605      	mov	r5, r0
    d1ea:	68c6      	ldr	r6, [r0, #12]
    d1ec:	f7f4 fd1a 	bl	1c24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d1f0:	b198      	cbz	r0, d21a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d1f2:	b1bc      	cbz	r4, d224 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d1f4:	4630      	mov	r0, r6
    d1f6:	68e9      	ldr	r1, [r5, #12]
    d1f8:	f7f4 fa1a 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d1fc:	2800      	cmp	r0, #0
    d1fe:	dd11      	ble.n	d224 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d200:	4420      	add	r0, r4
    d202:	1e40      	subs	r0, r0, #1
    d204:	fbb0 f7f4 	udiv	r7, r0, r4
    d208:	fb07 f104 	mul.w	r1, r7, r4
    d20c:	4630      	mov	r0, r6
    d20e:	f7f4 f9dd 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d212:	60e8      	str	r0, [r5, #12]
    d214:	4638      	mov	r0, r7
    d216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d21a:	f240 21ae 	movw	r1, #686	; 0x2ae
    d21e:	2029      	movs	r0, #41	; 0x29
    d220:	f7f6 fd78 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d224:	2000      	movs	r0, #0
    d226:	e7f6      	b.n	d216 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d228 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d228:	b530      	push	{r4, r5, lr}
    d22a:	4613      	mov	r3, r2
    d22c:	e006      	b.n	d23c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d22e:	18cc      	adds	r4, r1, r3
    d230:	1ad5      	subs	r5, r2, r3
    d232:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d236:	1e5b      	subs	r3, r3, #1
    d238:	5544      	strb	r4, [r0, r5]
    d23a:	b2db      	uxtb	r3, r3
    d23c:	2b00      	cmp	r3, #0
    d23e:	d1f6      	bne.n	d22e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d240:	bd30      	pop	{r4, r5, pc}

0000d242 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d242:	b538      	push	{r3, r4, r5, lr}
    d244:	4605      	mov	r5, r0
    d246:	460c      	mov	r4, r1
    d248:	4668      	mov	r0, sp
    d24a:	f7fd fded 	bl	ae28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d24e:	b308      	cbz	r0, d294 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    d250:	f99d 0000 	ldrsb.w	r0, [sp]
    d254:	7260      	strb	r0, [r4, #9]
    d256:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    d25a:	72a1      	strb	r1, [r4, #10]
    d25c:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d260:	2200      	movs	r2, #0
    d262:	1a41      	subs	r1, r0, r1
    d264:	d500      	bpl.n	d268 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    d266:	4249      	negs	r1, r1
    d268:	7feb      	ldrb	r3, [r5, #31]
    d26a:	428b      	cmp	r3, r1
    d26c:	dc10      	bgt.n	d290 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d26e:	2bff      	cmp	r3, #255	; 0xff
    d270:	d00e      	beq.n	d290 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d272:	7b21      	ldrb	r1, [r4, #12]
    d274:	1c49      	adds	r1, r1, #1
    d276:	b2c9      	uxtb	r1, r1
    d278:	7321      	strb	r1, [r4, #12]
    d27a:	f895 3020 	ldrb.w	r3, [r5, #32]
    d27e:	4299      	cmp	r1, r3
    d280:	d802      	bhi.n	d288 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    d282:	7ae1      	ldrb	r1, [r4, #11]
    d284:	297f      	cmp	r1, #127	; 0x7f
    d286:	d103      	bne.n	d290 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d288:	72e0      	strb	r0, [r4, #11]
    d28a:	2000      	movs	r0, #0
    d28c:	7320      	strb	r0, [r4, #12]
    d28e:	2201      	movs	r2, #1
    d290:	4610      	mov	r0, r2
    d292:	bd38      	pop	{r3, r4, r5, pc}
    d294:	207f      	movs	r0, #127	; 0x7f
    d296:	7260      	strb	r0, [r4, #9]
    d298:	2000      	movs	r0, #0
    d29a:	bd38      	pop	{r3, r4, r5, pc}

0000d29c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d29c:	2300      	movs	r3, #0
    d29e:	6283      	str	r3, [r0, #40]	; 0x28
    d2a0:	8602      	strh	r2, [r0, #48]	; 0x30
    d2a2:	f240 2371 	movw	r3, #625	; 0x271
    d2a6:	435a      	muls	r2, r3
    d2a8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d2ac:	1e52      	subs	r2, r2, #1
    d2ae:	fbb2 f1f1 	udiv	r1, r2, r1
    d2b2:	62c1      	str	r1, [r0, #44]	; 0x2c
    d2b4:	4770      	bx	lr

0000d2b6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d2b6:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d2ba:	4607      	mov	r7, r0
    d2bc:	4690      	mov	r8, r2
    d2be:	468b      	mov	fp, r1
    d2c0:	2601      	movs	r6, #1
    d2c2:	4608      	mov	r0, r1
    d2c4:	f000 f957 	bl	d576 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d2c8:	4682      	mov	sl, r0
    d2ca:	4658      	mov	r0, fp
    d2cc:	f000 f95f 	bl	d58e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d2d0:	4681      	mov	r9, r0
    d2d2:	f7ff ff66 	bl	d1a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d2d6:	4604      	mov	r4, r0
    d2d8:	4650      	mov	r0, sl
    d2da:	f7ff ff62 	bl	d1a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d2de:	4605      	mov	r5, r0
    d2e0:	ea54 0005 	orrs.w	r0, r4, r5
    d2e4:	d100      	bne.n	d2e8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d2e6:	2600      	movs	r6, #0
    d2e8:	f7fd f83e 	bl	a368 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d2ec:	ea10 0f09 	tst.w	r0, r9
    d2f0:	d100      	bne.n	d2f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d2f2:	2400      	movs	r4, #0
    d2f4:	f7fd f838 	bl	a368 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d2f8:	ea10 0f0a 	tst.w	r0, sl
    d2fc:	d100      	bne.n	d300 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d2fe:	2500      	movs	r5, #0
    d300:	f897 0062 	ldrb.w	r0, [r7, #98]	; 0x62
    d304:	42a0      	cmp	r0, r4
    d306:	d100      	bne.n	d30a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d308:	2400      	movs	r4, #0
    d30a:	f888 4000 	strb.w	r4, [r8]
    d30e:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
    d312:	42a8      	cmp	r0, r5
    d314:	d100      	bne.n	d318 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d316:	2500      	movs	r5, #0
    d318:	f888 5001 	strb.w	r5, [r8, #1]
    d31c:	b974      	cbnz	r4, d33c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d31e:	b96d      	cbnz	r5, d33c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d320:	4658      	mov	r0, fp
    d322:	f000 f932 	bl	d58a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d326:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
    d32a:	1a40      	subs	r0, r0, r1
    d32c:	b200      	sxth	r0, r0
    d32e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d332:	4288      	cmp	r0, r1
    d334:	dc01      	bgt.n	d33a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d336:	2800      	cmp	r0, #0
    d338:	dc00      	bgt.n	d33c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d33a:	2600      	movs	r6, #0
    d33c:	4630      	mov	r0, r6
    d33e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d342 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d342:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d346:	4348      	muls	r0, r1
    d348:	4770      	bx	lr

0000d34a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d34a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d34e:	fb10 f001 	smulbb	r0, r0, r1
    d352:	4770      	bx	lr

0000d354 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d354:	b510      	push	{r4, lr}
    d356:	2300      	movs	r3, #0
    d358:	461a      	mov	r2, r3
    d35a:	e003      	b.n	d364 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d35c:	5c84      	ldrb	r4, [r0, r2]
    d35e:	4323      	orrs	r3, r4
    d360:	1c52      	adds	r2, r2, #1
    d362:	b2d2      	uxtb	r2, r2
    d364:	428a      	cmp	r2, r1
    d366:	d3f9      	bcc.n	d35c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d368:	b10b      	cbz	r3, d36e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d36a:	2000      	movs	r0, #0
    d36c:	bd10      	pop	{r4, pc}
    d36e:	2001      	movs	r0, #1
    d370:	bd10      	pop	{r4, pc}

0000d372 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    d372:	b570      	push	{r4, r5, r6, lr}
    d374:	788b      	ldrb	r3, [r1, #2]
    d376:	780c      	ldrb	r4, [r1, #0]
    d378:	7ac5      	ldrb	r5, [r0, #11]
    d37a:	4063      	eors	r3, r4
    d37c:	78cc      	ldrb	r4, [r1, #3]
    d37e:	7849      	ldrb	r1, [r1, #1]
    d380:	404c      	eors	r4, r1
    d382:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    d386:	ea83 0102 	eor.w	r1, r3, r2
    d38a:	2200      	movs	r2, #0
    d38c:	b2cc      	uxtb	r4, r1
    d38e:	0a09      	lsrs	r1, r1, #8
    d390:	fa94 f4a4 	rbit	r4, r4
    d394:	fa91 f1a1 	rbit	r1, r1
    d398:	0e24      	lsrs	r4, r4, #24
    d39a:	0e09      	lsrs	r1, r1, #24
    d39c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    d3a0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    d3a4:	1c52      	adds	r2, r2, #1
    d3a6:	4419      	add	r1, r3
    d3a8:	b2d2      	uxtb	r2, r2
    d3aa:	b289      	uxth	r1, r1
    d3ac:	2a03      	cmp	r2, #3
    d3ae:	d3ed      	bcc.n	d38c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x1a>
    d3b0:	4059      	eors	r1, r3
    d3b2:	2225      	movs	r2, #37	; 0x25
    d3b4:	fbb1 f3f2 	udiv	r3, r1, r2
    d3b8:	fb02 1213 	mls	r2, r2, r3, r1
    d3bc:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    d3c0:	f002 0607 	and.w	r6, r2, #7
    d3c4:	785b      	ldrb	r3, [r3, #1]
    d3c6:	2401      	movs	r4, #1
    d3c8:	fa04 f606 	lsl.w	r6, r4, r6
    d3cc:	4233      	tst	r3, r6
    d3ce:	d001      	beq.n	d3d4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    d3d0:	4610      	mov	r0, r2
    d3d2:	bd70      	pop	{r4, r5, r6, pc}
    d3d4:	434d      	muls	r5, r1
    d3d6:	0c29      	lsrs	r1, r5, #16
    d3d8:	1c49      	adds	r1, r1, #1
    d3da:	b2c9      	uxtb	r1, r1
    d3dc:	2300      	movs	r3, #0
    d3de:	18c5      	adds	r5, r0, r3
    d3e0:	79aa      	ldrb	r2, [r5, #6]
    d3e2:	428a      	cmp	r2, r1
    d3e4:	d311      	bcc.n	d40a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x98>
    d3e6:	786d      	ldrb	r5, [r5, #1]
    d3e8:	2200      	movs	r2, #0
    d3ea:	fa04 f602 	lsl.w	r6, r4, r2
    d3ee:	4235      	tst	r5, r6
    d3f0:	d001      	beq.n	d3f6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x84>
    d3f2:	1e49      	subs	r1, r1, #1
    d3f4:	b2c9      	uxtb	r1, r1
    d3f6:	b121      	cbz	r1, d402 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    d3f8:	1c52      	adds	r2, r2, #1
    d3fa:	b2d2      	uxtb	r2, r2
    d3fc:	2a08      	cmp	r2, #8
    d3fe:	d3f4      	bcc.n	d3ea <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    d400:	e005      	b.n	d40e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x9c>
    d402:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    d406:	b2c0      	uxtb	r0, r0
    d408:	bd70      	pop	{r4, r5, r6, pc}
    d40a:	1a89      	subs	r1, r1, r2
    d40c:	b2c9      	uxtb	r1, r1
    d40e:	1c5b      	adds	r3, r3, #1
    d410:	b2db      	uxtb	r3, r3
    d412:	2b05      	cmp	r3, #5
    d414:	d3e3      	bcc.n	d3de <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x6c>
    d416:	f44f 7187 	mov.w	r1, #270	; 0x10e
    d41a:	2046      	movs	r0, #70	; 0x46
    d41c:	f7f6 fc7a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d420 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d420:	b510      	push	{r4, lr}
    d422:	4604      	mov	r4, r0
    d424:	f890 0020 	ldrb.w	r0, [r0, #32]
    d428:	b108      	cbz	r0, d42e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d42a:	2825      	cmp	r0, #37	; 0x25
    d42c:	d901      	bls.n	d432 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d42e:	2012      	movs	r0, #18
    d430:	bd10      	pop	{r4, pc}
    d432:	b12a      	cbz	r2, d440 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d434:	7d60      	ldrb	r0, [r4, #21]
    d436:	b128      	cbz	r0, d444 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d438:	2801      	cmp	r0, #1
    d43a:	d009      	beq.n	d450 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d43c:	201f      	movs	r0, #31
    d43e:	bd10      	pop	{r4, pc}
    d440:	2000      	movs	r0, #0
    d442:	bd10      	pop	{r4, pc}
    d444:	4620      	mov	r0, r4
    d446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d44a:	4611      	mov	r1, r2
    d44c:	f7f8 bc06 	b.w	5c5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>
    d450:	88a2      	ldrh	r2, [r4, #4]
    d452:	f104 0015 	add.w	r0, r4, #21
    d456:	310c      	adds	r1, #12
    d458:	f7ff ff8b 	bl	d372 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d45c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    d460:	e7ee      	b.n	d440 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d462 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d462:	b530      	push	{r4, r5, lr}
    d464:	1c42      	adds	r2, r0, #1
    d466:	428a      	cmp	r2, r1
    d468:	d004      	beq.n	d474 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    d46a:	680a      	ldr	r2, [r1, #0]
    d46c:	f8c0 2001 	str.w	r2, [r0, #1]
    d470:	7909      	ldrb	r1, [r1, #4]
    d472:	7141      	strb	r1, [r0, #5]
    d474:	7941      	ldrb	r1, [r0, #5]
    d476:	f001 011f 	and.w	r1, r1, #31
    d47a:	7141      	strb	r1, [r0, #5]
    d47c:	2100      	movs	r1, #0
    d47e:	72c1      	strb	r1, [r0, #11]
    d480:	1843      	adds	r3, r0, r1
    d482:	1c49      	adds	r1, r1, #1
    d484:	785c      	ldrb	r4, [r3, #1]
    d486:	b2c9      	uxtb	r1, r1
    d488:	f004 0201 	and.w	r2, r4, #1
    d48c:	0864      	lsrs	r4, r4, #1
    d48e:	f004 0501 	and.w	r5, r4, #1
    d492:	4415      	add	r5, r2
    d494:	0862      	lsrs	r2, r4, #1
    d496:	f002 0401 	and.w	r4, r2, #1
    d49a:	442c      	add	r4, r5
    d49c:	0852      	lsrs	r2, r2, #1
    d49e:	f002 0501 	and.w	r5, r2, #1
    d4a2:	442c      	add	r4, r5
    d4a4:	0852      	lsrs	r2, r2, #1
    d4a6:	f002 0501 	and.w	r5, r2, #1
    d4aa:	442c      	add	r4, r5
    d4ac:	0852      	lsrs	r2, r2, #1
    d4ae:	f002 0501 	and.w	r5, r2, #1
    d4b2:	442c      	add	r4, r5
    d4b4:	0852      	lsrs	r2, r2, #1
    d4b6:	f002 0501 	and.w	r5, r2, #1
    d4ba:	442c      	add	r4, r5
    d4bc:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    d4c0:	719a      	strb	r2, [r3, #6]
    d4c2:	7ac3      	ldrb	r3, [r0, #11]
    d4c4:	2905      	cmp	r1, #5
    d4c6:	441a      	add	r2, r3
    d4c8:	72c2      	strb	r2, [r0, #11]
    d4ca:	d3d9      	bcc.n	d480 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    d4cc:	bd30      	pop	{r4, r5, pc}

0000d4ce <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d4ce:	b570      	push	{r4, r5, r6, lr}
    d4d0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d4d4:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d4d8:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d4dc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d4e0:	88c0      	ldrh	r0, [r0, #6]
    d4e2:	b131      	cbz	r1, d4f2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d4e4:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d4e8:	d903      	bls.n	d4f2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d4ea:	f640 5107 	movw	r1, #3335	; 0xd07
    d4ee:	428a      	cmp	r2, r1
    d4f0:	d90b      	bls.n	d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d4f2:	1f91      	subs	r1, r2, #6
    d4f4:	f640 467a 	movw	r6, #3194	; 0xc7a
    d4f8:	42b1      	cmp	r1, r6
    d4fa:	d80e      	bhi.n	d51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d4fc:	b16b      	cbz	r3, d51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d4fe:	2b08      	cmp	r3, #8
    d500:	d80b      	bhi.n	d51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d502:	4293      	cmp	r3, r2
    d504:	d209      	bcs.n	d51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d506:	4294      	cmp	r4, r2
    d508:	d807      	bhi.n	d51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d50a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d50e:	d204      	bcs.n	d51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d510:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d514:	d801      	bhi.n	d51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d516:	2001      	movs	r0, #1
    d518:	bd70      	pop	{r4, r5, r6, pc}
    d51a:	2000      	movs	r0, #0
    d51c:	bd70      	pop	{r4, r5, r6, pc}

0000d51e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d51e:	6842      	ldr	r2, [r0, #4]
    d520:	600a      	str	r2, [r1, #0]
    d522:	7a00      	ldrb	r0, [r0, #8]
    d524:	7108      	strb	r0, [r1, #4]
    d526:	4770      	bx	lr

0000d528 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d528:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d52c:	4770      	bx	lr

0000d52e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d52e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d532:	4770      	bx	lr

0000d534 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d534:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d538:	4770      	bx	lr

0000d53a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d53a:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d53e:	4770      	bx	lr

0000d540 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d540:	8980      	ldrh	r0, [r0, #12]
    d542:	8008      	strh	r0, [r1, #0]
    d544:	4770      	bx	lr

0000d546 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d546:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d54a:	6008      	str	r0, [r1, #0]
    d54c:	4770      	bx	lr

0000d54e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d54e:	6842      	ldr	r2, [r0, #4]
    d550:	600a      	str	r2, [r1, #0]
    d552:	6880      	ldr	r0, [r0, #8]
    d554:	6048      	str	r0, [r1, #4]
    d556:	4770      	bx	lr

0000d558 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d558:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d55c:	600a      	str	r2, [r1, #0]
    d55e:	6840      	ldr	r0, [r0, #4]
    d560:	6048      	str	r0, [r1, #4]
    d562:	4770      	bx	lr

0000d564 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d564:	6842      	ldr	r2, [r0, #4]
    d566:	600a      	str	r2, [r1, #0]
    d568:	6880      	ldr	r0, [r0, #8]
    d56a:	6048      	str	r0, [r1, #4]
    d56c:	4770      	bx	lr

0000d56e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d56e:	7800      	ldrb	r0, [r0, #0]
    d570:	f000 0003 	and.w	r0, r0, #3
    d574:	4770      	bx	lr

0000d576 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d576:	7900      	ldrb	r0, [r0, #4]
    d578:	4770      	bx	lr

0000d57a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d57a:	8880      	ldrh	r0, [r0, #4]
    d57c:	4770      	bx	lr

0000d57e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d57e:	88c0      	ldrh	r0, [r0, #6]
    d580:	4770      	bx	lr

0000d582 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d582:	8900      	ldrh	r0, [r0, #8]
    d584:	4770      	bx	lr

0000d586 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d586:	8940      	ldrh	r0, [r0, #10]
    d588:	4770      	bx	lr

0000d58a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d58a:	88c0      	ldrh	r0, [r0, #6]
    d58c:	4770      	bx	lr

0000d58e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d58e:	7940      	ldrb	r0, [r0, #5]
    d590:	4770      	bx	lr

0000d592 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d592:	7900      	ldrb	r0, [r0, #4]
    d594:	4770      	bx	lr

0000d596 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d596:	7900      	ldrb	r0, [r0, #4]
    d598:	4770      	bx	lr

0000d59a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d59a:	8901      	ldrh	r1, [r0, #8]
    d59c:	291b      	cmp	r1, #27
    d59e:	d30c      	bcc.n	d5ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d5a0:	8941      	ldrh	r1, [r0, #10]
    d5a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d5a6:	4291      	cmp	r1, r2
    d5a8:	d307      	bcc.n	d5ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d5aa:	8881      	ldrh	r1, [r0, #4]
    d5ac:	291b      	cmp	r1, #27
    d5ae:	d304      	bcc.n	d5ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d5b0:	88c0      	ldrh	r0, [r0, #6]
    d5b2:	4290      	cmp	r0, r2
    d5b4:	d301      	bcc.n	d5ba <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d5b6:	2001      	movs	r0, #1
    d5b8:	4770      	bx	lr
    d5ba:	2000      	movs	r0, #0
    d5bc:	4770      	bx	lr

0000d5be <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d5be:	b510      	push	{r4, lr}
    d5c0:	29fb      	cmp	r1, #251	; 0xfb
    d5c2:	d904      	bls.n	d5ce <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d5c4:	f240 515b 	movw	r1, #1371	; 0x55b
    d5c8:	202a      	movs	r0, #42	; 0x2a
    d5ca:	f7f6 fba3 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5ce:	7041      	strb	r1, [r0, #1]
    d5d0:	bd10      	pop	{r4, pc}

0000d5d2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d5d2:	7901      	ldrb	r1, [r0, #4]
    d5d4:	0749      	lsls	r1, r1, #29
    d5d6:	d004      	beq.n	d5e2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d5d8:	7940      	ldrb	r0, [r0, #5]
    d5da:	0740      	lsls	r0, r0, #29
    d5dc:	d001      	beq.n	d5e2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d5de:	2001      	movs	r0, #1
    d5e0:	4770      	bx	lr
    d5e2:	2000      	movs	r0, #0
    d5e4:	4770      	bx	lr

0000d5e6 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d5e6:	7900      	ldrb	r0, [r0, #4]
    d5e8:	4770      	bx	lr

0000d5ea <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d5ea:	7940      	ldrb	r0, [r0, #5]
    d5ec:	4770      	bx	lr

0000d5ee <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d5ee:	7101      	strb	r1, [r0, #4]
    d5f0:	4770      	bx	lr

0000d5f2 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d5f2:	7141      	strb	r1, [r0, #5]
    d5f4:	4770      	bx	lr

0000d5f6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d5f6:	b510      	push	{r4, lr}
    d5f8:	2a1b      	cmp	r2, #27
    d5fa:	d904      	bls.n	d606 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d5fc:	f240 31c2 	movw	r1, #962	; 0x3c2
    d600:	202a      	movs	r0, #42	; 0x2a
    d602:	f7f6 fb87 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d606:	7042      	strb	r2, [r0, #1]
    d608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d60c:	1cc0      	adds	r0, r0, #3
    d60e:	f7fe bbb7 	b.w	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d612 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d612:	6809      	ldr	r1, [r1, #0]
    d614:	60c1      	str	r1, [r0, #12]
    d616:	4770      	bx	lr

0000d618 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d618:	680a      	ldr	r2, [r1, #0]
    d61a:	6042      	str	r2, [r0, #4]
    d61c:	6849      	ldr	r1, [r1, #4]
    d61e:	6081      	str	r1, [r0, #8]
    d620:	4770      	bx	lr

0000d622 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d622:	680a      	ldr	r2, [r1, #0]
    d624:	6042      	str	r2, [r0, #4]
    d626:	6849      	ldr	r1, [r1, #4]
    d628:	6081      	str	r1, [r0, #8]
    d62a:	4770      	bx	lr

0000d62c <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d62c:	680a      	ldr	r2, [r1, #0]
    d62e:	6042      	str	r2, [r0, #4]
    d630:	6849      	ldr	r1, [r1, #4]
    d632:	6081      	str	r1, [r0, #8]
    d634:	4770      	bx	lr

0000d636 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d636:	7802      	ldrb	r2, [r0, #0]
    d638:	f001 0103 	and.w	r1, r1, #3
    d63c:	f022 0203 	bic.w	r2, r2, #3
    d640:	430a      	orrs	r2, r1
    d642:	7002      	strb	r2, [r0, #0]
    d644:	4770      	bx	lr

0000d646 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d646:	7101      	strb	r1, [r0, #4]
    d648:	0a09      	lsrs	r1, r1, #8
    d64a:	7141      	strb	r1, [r0, #5]
    d64c:	4770      	bx	lr

0000d64e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d64e:	7181      	strb	r1, [r0, #6]
    d650:	0a09      	lsrs	r1, r1, #8
    d652:	71c1      	strb	r1, [r0, #7]
    d654:	4770      	bx	lr

0000d656 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d656:	7201      	strb	r1, [r0, #8]
    d658:	0a09      	lsrs	r1, r1, #8
    d65a:	7241      	strb	r1, [r0, #9]
    d65c:	4770      	bx	lr

0000d65e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d65e:	7281      	strb	r1, [r0, #10]
    d660:	0a09      	lsrs	r1, r1, #8
    d662:	72c1      	strb	r1, [r0, #11]
    d664:	4770      	bx	lr

0000d666 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d666:	b570      	push	{r4, r5, r6, lr}
    d668:	7802      	ldrb	r2, [r0, #0]
    d66a:	f002 020f 	and.w	r2, r2, #15
    d66e:	2a03      	cmp	r2, #3
    d670:	d02c      	beq.n	d6cc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    d672:	2a05      	cmp	r2, #5
    d674:	d12d      	bne.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d676:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d67a:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d67e:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d682:	7d83      	ldrb	r3, [r0, #22]
    d684:	b141      	cbz	r1, d698 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d686:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d68a:	d905      	bls.n	d698 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d68c:	f640 5107 	movw	r1, #3335	; 0xd07
    d690:	428a      	cmp	r2, r1
    d692:	d801      	bhi.n	d698 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d694:	2101      	movs	r1, #1
    d696:	e000      	b.n	d69a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    d698:	2100      	movs	r1, #0
    d69a:	7846      	ldrb	r6, [r0, #1]
    d69c:	2e22      	cmp	r6, #34	; 0x22
    d69e:	d118      	bne.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6a0:	b959      	cbnz	r1, d6ba <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    d6a2:	1f91      	subs	r1, r2, #6
    d6a4:	f640 467a 	movw	r6, #3194	; 0xc7a
    d6a8:	42b1      	cmp	r1, r6
    d6aa:	d812      	bhi.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6ac:	b18b      	cbz	r3, d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6ae:	2b08      	cmp	r3, #8
    d6b0:	d80f      	bhi.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6b2:	4293      	cmp	r3, r2
    d6b4:	d20d      	bcs.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6b6:	4294      	cmp	r4, r2
    d6b8:	d80b      	bhi.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6ba:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d6be:	d208      	bcs.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6c0:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d6c4:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d6c8:	d905      	bls.n	d6d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d6ca:	e002      	b.n	d6d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6cc:	7840      	ldrb	r0, [r0, #1]
    d6ce:	280c      	cmp	r0, #12
    d6d0:	d001      	beq.n	d6d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d6d2:	2000      	movs	r0, #0
    d6d4:	bd70      	pop	{r4, r5, r6, pc}
    d6d6:	2001      	movs	r0, #1
    d6d8:	bd70      	pop	{r4, r5, r6, pc}

0000d6da <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d6da:	b570      	push	{r4, r5, r6, lr}
    d6dc:	4614      	mov	r4, r2
    d6de:	4605      	mov	r5, r0
    d6e0:	2a1f      	cmp	r2, #31
    d6e2:	d903      	bls.n	d6ec <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d6e4:	21b2      	movs	r1, #178	; 0xb2
    d6e6:	202a      	movs	r0, #42	; 0x2a
    d6e8:	f7f6 fb14 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6ec:	f105 0009 	add.w	r0, r5, #9
    d6f0:	f7fe fb46 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d6f4:	1da4      	adds	r4, r4, #6
    d6f6:	706c      	strb	r4, [r5, #1]
    d6f8:	bd70      	pop	{r4, r5, r6, pc}

0000d6fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d6fa:	b510      	push	{r4, lr}
    d6fc:	7802      	ldrb	r2, [r0, #0]
    d6fe:	f001 030f 	and.w	r3, r1, #15
    d702:	f022 020f 	bic.w	r2, r2, #15
    d706:	431a      	orrs	r2, r3
    d708:	7002      	strb	r2, [r0, #0]
    d70a:	2907      	cmp	r1, #7
    d70c:	d20c      	bcs.n	d728 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d70e:	e8df f001 	tbb	[pc, r1]
    d712:	0604      	.short	0x0604
    d714:	08040604 	.word	0x08040604
    d718:	0004      	.short	0x0004
    d71a:	2106      	movs	r1, #6
    d71c:	e002      	b.n	d724 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d71e:	210c      	movs	r1, #12
    d720:	e000      	b.n	d724 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d722:	2122      	movs	r1, #34	; 0x22
    d724:	7041      	strb	r1, [r0, #1]
    d726:	bd10      	pop	{r4, pc}
    d728:	216e      	movs	r1, #110	; 0x6e
    d72a:	202a      	movs	r0, #42	; 0x2a
    d72c:	f7f6 faf2 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d730 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    d730:	680a      	ldr	r2, [r1, #0]
    d732:	f840 2f09 	str.w	r2, [r0, #9]!
    d736:	8889      	ldrh	r1, [r1, #4]
    d738:	8081      	strh	r1, [r0, #4]
    d73a:	4770      	bx	lr

0000d73c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    d73c:	7802      	ldrb	r2, [r0, #0]
    d73e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d742:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d746:	7002      	strb	r2, [r0, #0]
    d748:	4770      	bx	lr

0000d74a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    d74a:	680a      	ldr	r2, [r1, #0]
    d74c:	f840 2f03 	str.w	r2, [r0, #3]!
    d750:	8889      	ldrh	r1, [r1, #4]
    d752:	8081      	strh	r1, [r0, #4]
    d754:	4770      	bx	lr

0000d756 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    d756:	7802      	ldrb	r2, [r0, #0]
    d758:	2340      	movs	r3, #64	; 0x40
    d75a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    d75e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d762:	430a      	orrs	r2, r1
    d764:	7002      	strb	r2, [r0, #0]
    d766:	4770      	bx	lr

0000d768 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    d768:	b570      	push	{r4, r5, r6, lr}
    d76a:	4614      	mov	r4, r2
    d76c:	4605      	mov	r5, r0
    d76e:	2a1f      	cmp	r2, #31
    d770:	d903      	bls.n	d77a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    d772:	21d4      	movs	r1, #212	; 0xd4
    d774:	202a      	movs	r0, #42	; 0x2a
    d776:	f7f6 facd 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d77a:	f105 0009 	add.w	r0, r5, #9
    d77e:	f7fe faff 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d782:	1da4      	adds	r4, r4, #6
    d784:	706c      	strb	r4, [r5, #1]
    d786:	bd70      	pop	{r4, r5, r6, pc}

0000d788 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    d788:	2101      	movs	r1, #1
    d78a:	f000 b853 	b.w	d834 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000d78e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d78e:	6841      	ldr	r1, [r0, #4]
    d790:	2200      	movs	r2, #0
    d792:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    d796:	2b00      	cmp	r3, #0
    d798:	d004      	beq.n	d7a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d79a:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    d79e:	6840      	ldr	r0, [r0, #4]
    d7a0:	f000 bc87 	b.w	e0b2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    d7a4:	4770      	bx	lr
    d7a6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d7aa:	460e      	mov	r6, r1
    d7ac:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    d7b0:	4617      	mov	r7, r2
    d7b2:	39ff      	subs	r1, #255	; 0xff
    d7b4:	d014      	beq.n	d7e0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d7b6:	8030      	strh	r0, [r6, #0]
    d7b8:	2100      	movs	r1, #0
    d7ba:	7171      	strb	r1, [r6, #5]
    d7bc:	f7f6 fede 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d7c0:	4604      	mov	r4, r0
    d7c2:	f7ff f915 	bl	c9f0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    d7c6:	0005      	movs	r5, r0
    d7c8:	d00a      	beq.n	d7e0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d7ca:	4620      	mov	r0, r4
    d7cc:	4629      	mov	r1, r5
    d7ce:	aa01      	add	r2, sp, #4
    d7d0:	f7ff f931 	bl	ca36 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    d7d4:	8070      	strh	r0, [r6, #2]
    d7d6:	b130      	cbz	r0, d7e6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    d7d8:	28fb      	cmp	r0, #251	; 0xfb
    d7da:	d906      	bls.n	d7ea <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    d7dc:	21c9      	movs	r1, #201	; 0xc9
    d7de:	e026      	b.n	d82e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d7e0:	2000      	movs	r0, #0
    d7e2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d7e6:	21c8      	movs	r1, #200	; 0xc8
    d7e8:	e021      	b.n	d82e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d7ea:	9801      	ldr	r0, [sp, #4]
    d7ec:	f7ff febf 	bl	d56e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    d7f0:	2801      	cmp	r0, #1
    d7f2:	d003      	beq.n	d7fc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d7f4:	2802      	cmp	r0, #2
    d7f6:	d001      	beq.n	d7fc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d7f8:	21d8      	movs	r1, #216	; 0xd8
    d7fa:	e018      	b.n	d82e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d7fc:	7130      	strb	r0, [r6, #4]
    d7fe:	4629      	mov	r1, r5
    d800:	8873      	ldrh	r3, [r6, #2]
    d802:	2503      	movs	r5, #3
    d804:	4620      	mov	r0, r4
    d806:	463a      	mov	r2, r7
    d808:	9500      	str	r5, [sp, #0]
    d80a:	f7fe ffe6 	bl	c7da <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    d80e:	4620      	mov	r0, r4
    d810:	60b7      	str	r7, [r6, #8]
    d812:	f7ff f89c 	bl	c94e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    d816:	b138      	cbz	r0, d828 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    d818:	2100      	movs	r1, #0
    d81a:	4620      	mov	r0, r4
    d81c:	460a      	mov	r2, r1
    d81e:	f7ff f9e0 	bl	cbe2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    d822:	b118      	cbz	r0, d82c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    d824:	2001      	movs	r0, #1
    d826:	e7dc      	b.n	d7e2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    d828:	21e8      	movs	r1, #232	; 0xe8
    d82a:	e000      	b.n	d82e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d82c:	21ed      	movs	r1, #237	; 0xed
    d82e:	202b      	movs	r0, #43	; 0x2b
    d830:	f7f6 fa70 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d834:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d838:	4604      	mov	r4, r0
    d83a:	460e      	mov	r6, r1
    d83c:	2000      	movs	r0, #0
    d83e:	f7f6 fc6f 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d842:	4605      	mov	r5, r0
    d844:	2000      	movs	r0, #0
    d846:	b916      	cbnz	r6, d84e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    d848:	2001      	movs	r0, #1
    d84a:	f7f6 fc69 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d84e:	2600      	movs	r6, #0
    d850:	46b0      	mov	r8, r6
    d852:	182f      	adds	r7, r5, r0
    d854:	e017      	b.n	d886 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    d856:	8820      	ldrh	r0, [r4, #0]
    d858:	1c40      	adds	r0, r0, #1
    d85a:	b280      	uxth	r0, r0
    d85c:	8020      	strh	r0, [r4, #0]
    d85e:	42b8      	cmp	r0, r7
    d860:	d302      	bcc.n	d868 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    d862:	4640      	mov	r0, r8
    d864:	f8a4 8000 	strh.w	r8, [r4]
    d868:	b280      	uxth	r0, r0
    d86a:	42a8      	cmp	r0, r5
    d86c:	d304      	bcc.n	d878 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d86e:	42b8      	cmp	r0, r7
    d870:	d202      	bcs.n	d878 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d872:	2000      	movs	r0, #0
    d874:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d878:	4669      	mov	r1, sp
    d87a:	f7ff fbcf 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d87e:	2800      	cmp	r0, #0
    d880:	d0f8      	beq.n	d874 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    d882:	1c76      	adds	r6, r6, #1
    d884:	b2f6      	uxtb	r6, r6
    d886:	42b7      	cmp	r7, r6
    d888:	d8e5      	bhi.n	d856 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    d88a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d88e:	8020      	strh	r0, [r4, #0]
    d890:	2012      	movs	r0, #18
    d892:	e7ef      	b.n	d874 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000d894 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    d894:	b570      	push	{r4, r5, r6, lr}
    d896:	8050      	strh	r0, [r2, #2]
    d898:	890c      	ldrh	r4, [r1, #8]
    d89a:	8094      	strh	r4, [r2, #4]
    d89c:	898b      	ldrh	r3, [r1, #12]
    d89e:	80d3      	strh	r3, [r2, #6]
    d8a0:	8948      	ldrh	r0, [r1, #10]
    d8a2:	8110      	strh	r0, [r2, #8]
    d8a4:	89cd      	ldrh	r5, [r1, #14]
    d8a6:	8155      	strh	r5, [r2, #10]
    d8a8:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    d8aa:	42ae      	cmp	r6, r5
    d8ac:	d108      	bne.n	d8c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d8ae:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    d8b0:	4285      	cmp	r5, r0
    d8b2:	d105      	bne.n	d8c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d8b4:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    d8b6:	429d      	cmp	r5, r3
    d8b8:	d102      	bne.n	d8c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d8ba:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    d8bc:	42a3      	cmp	r3, r4
    d8be:	d001      	beq.n	d8c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    d8c0:	2301      	movs	r3, #1
    d8c2:	e000      	b.n	d8c6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    d8c4:	2300      	movs	r3, #0
    d8c6:	7313      	strb	r3, [r2, #12]
    d8c8:	8548      	strh	r0, [r1, #42]	; 0x2a
    d8ca:	8950      	ldrh	r0, [r2, #10]
    d8cc:	85c8      	strh	r0, [r1, #46]	; 0x2e
    d8ce:	8890      	ldrh	r0, [r2, #4]
    d8d0:	8588      	strh	r0, [r1, #44]	; 0x2c
    d8d2:	88d0      	ldrh	r0, [r2, #6]
    d8d4:	8608      	strh	r0, [r1, #48]	; 0x30
    d8d6:	2001      	movs	r0, #1
    d8d8:	7010      	strb	r0, [r2, #0]
    d8da:	bd70      	pop	{r4, r5, r6, pc}

0000d8dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    d8dc:	b510      	push	{r4, lr}
    d8de:	888c      	ldrh	r4, [r1, #4]
    d8e0:	890a      	ldrh	r2, [r1, #8]
    d8e2:	884b      	ldrh	r3, [r1, #2]
    d8e4:	88c9      	ldrh	r1, [r1, #6]
    d8e6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    d8ea:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    d8ee:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
    d8f2:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
    d8f6:	bd10      	pop	{r4, pc}

0000d8f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    d8f8:	b570      	push	{r4, r5, r6, lr}
    d8fa:	4615      	mov	r5, r2
    d8fc:	460c      	mov	r4, r1
    d8fe:	f000 f8c1 	bl	da84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d902:	3096      	adds	r0, #150	; 0x96
    d904:	4428      	add	r0, r5
    d906:	42a0      	cmp	r0, r4
    d908:	d801      	bhi.n	d90e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    d90a:	1a20      	subs	r0, r4, r0
    d90c:	bd70      	pop	{r4, r5, r6, pc}
    d90e:	2000      	movs	r0, #0
    d910:	bd70      	pop	{r4, r5, r6, pc}

0000d912 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    d912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d916:	4604      	mov	r4, r0
    d918:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
    d91a:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    d91c:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
    d920:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    d922:	4285      	cmp	r5, r0
    d924:	d300      	bcc.n	d928 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    d926:	4605      	mov	r5, r0
    d928:	4620      	mov	r0, r4
    d92a:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    d92e:	f000 f89b 	bl	da68 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d932:	4601      	mov	r1, r0
    d934:	85e5      	strh	r5, [r4, #46]	; 0x2e
    d936:	8661      	strh	r1, [r4, #50]	; 0x32
    d938:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d93a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d93e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d940:	4680      	mov	r8, r0
    d942:	42aa      	cmp	r2, r5
    d944:	d200      	bcs.n	d948 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    d946:	462a      	mov	r2, r5
    d948:	428b      	cmp	r3, r1
    d94a:	d200      	bcs.n	d94e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    d94c:	460b      	mov	r3, r1
    d94e:	8202      	strh	r2, [r0, #16]
    d950:	f8a8 3012 	strh.w	r3, [r8, #18]
    d954:	42bd      	cmp	r5, r7
    d956:	d101      	bne.n	d95c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    d958:	42b1      	cmp	r1, r6
    d95a:	d001      	beq.n	d960 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    d95c:	2001      	movs	r0, #1
    d95e:	e000      	b.n	d962 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    d960:	2000      	movs	r0, #0
    d962:	4681      	mov	r9, r0
    d964:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    d968:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    d96a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    d96c:	8e26      	ldrh	r6, [r4, #48]	; 0x30
    d96e:	4285      	cmp	r5, r0
    d970:	d300      	bcc.n	d974 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    d972:	4605      	mov	r5, r0
    d974:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    d978:	4620      	mov	r0, r4
    d97a:	f000 f87c 	bl	da76 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d97e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    d982:	2902      	cmp	r1, #2
    d984:	d108      	bne.n	d998 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    d986:	42af      	cmp	r7, r5
    d988:	d200      	bcs.n	d98c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    d98a:	463d      	mov	r5, r7
    d98c:	4286      	cmp	r6, r0
    d98e:	d200      	bcs.n	d992 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    d990:	4630      	mov	r0, r6
    d992:	2100      	movs	r1, #0
    d994:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
    d998:	f8a8 5008 	strh.w	r5, [r8, #8]
    d99c:	f8a8 000c 	strh.w	r0, [r8, #12]
    d9a0:	42bd      	cmp	r5, r7
    d9a2:	d101      	bne.n	d9a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    d9a4:	42b0      	cmp	r0, r6
    d9a6:	d001      	beq.n	d9ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    d9a8:	2001      	movs	r0, #1
    d9aa:	e000      	b.n	d9ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    d9ac:	2000      	movs	r0, #0
    d9ae:	ea40 0009 	orr.w	r0, r0, r9
    d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d9b6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    d9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9ba:	4616      	mov	r6, r2
    d9bc:	460f      	mov	r7, r1
    d9be:	4604      	mov	r4, r0
    d9c0:	f000 f860 	bl	da84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d9c4:	4605      	mov	r5, r0
    d9c6:	463a      	mov	r2, r7
    d9c8:	6861      	ldr	r1, [r4, #4]
    d9ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d9cc:	f000 f847 	bl	da5e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    d9d0:	19a9      	adds	r1, r5, r6
    d9d2:	4281      	cmp	r1, r0
    d9d4:	d300      	bcc.n	d9d8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    d9d6:	4608      	mov	r0, r1
    d9d8:	62a0      	str	r0, [r4, #40]	; 0x28
    d9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d9de <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    d9de:	221b      	movs	r2, #27
    d9e0:	8402      	strh	r2, [r0, #32]
    d9e2:	8382      	strh	r2, [r0, #28]
    d9e4:	82c2      	strh	r2, [r0, #22]
    d9e6:	8282      	strh	r2, [r0, #20]
    d9e8:	8142      	strh	r2, [r0, #10]
    d9ea:	8202      	strh	r2, [r0, #16]
    d9ec:	8102      	strh	r2, [r0, #8]
    d9ee:	8542      	strh	r2, [r0, #42]	; 0x2a
    d9f0:	8582      	strh	r2, [r0, #44]	; 0x2c
    d9f2:	8482      	strh	r2, [r0, #36]	; 0x24
    d9f4:	2900      	cmp	r1, #0
    d9f6:	d10a      	bne.n	da0e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    d9f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d9fc:	8441      	strh	r1, [r0, #34]	; 0x22
    d9fe:	83c1      	strh	r1, [r0, #30]
    da00:	8341      	strh	r1, [r0, #26]
    da02:	8301      	strh	r1, [r0, #24]
    da04:	81c1      	strh	r1, [r0, #14]
    da06:	8241      	strh	r1, [r0, #18]
    da08:	8181      	strh	r1, [r0, #12]
    da0a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    da0c:	8601      	strh	r1, [r0, #48]	; 0x30
    da0e:	4770      	bx	lr

0000da10 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    da10:	6800      	ldr	r0, [r0, #0]
    da12:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    da16:	4290      	cmp	r0, r2
    da18:	d903      	bls.n	da22 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    da1a:	1a40      	subs	r0, r0, r1
    da1c:	389c      	subs	r0, #156	; 0x9c
    da1e:	0840      	lsrs	r0, r0, #1
    da20:	4770      	bx	lr
    da22:	2000      	movs	r0, #0
    da24:	4770      	bx	lr

0000da26 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    da26:	b510      	push	{r4, lr}
    da28:	9c02      	ldr	r4, [sp, #8]
    da2a:	8281      	strh	r1, [r0, #20]
    da2c:	82c2      	strh	r2, [r0, #22]
    da2e:	8303      	strh	r3, [r0, #24]
    da30:	8344      	strh	r4, [r0, #26]
    da32:	bd10      	pop	{r4, pc}

0000da34 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    da34:	8050      	strh	r0, [r2, #2]
    da36:	8a88      	ldrh	r0, [r1, #20]
    da38:	8090      	strh	r0, [r2, #4]
    da3a:	8ac8      	ldrh	r0, [r1, #22]
    da3c:	80d0      	strh	r0, [r2, #6]
    da3e:	8b08      	ldrh	r0, [r1, #24]
    da40:	8110      	strh	r0, [r2, #8]
    da42:	8b48      	ldrh	r0, [r1, #26]
    da44:	8150      	strh	r0, [r2, #10]
    da46:	2001      	movs	r0, #1
    da48:	7010      	strb	r0, [r2, #0]
    da4a:	4770      	bx	lr
    da4c:	2902      	cmp	r1, #2
    da4e:	d003      	beq.n	da58 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    da50:	00c0      	lsls	r0, r0, #3
    da52:	3070      	adds	r0, #112	; 0x70
    da54:	b280      	uxth	r0, r0
    da56:	4770      	bx	lr
    da58:	0080      	lsls	r0, r0, #2
    da5a:	303c      	adds	r0, #60	; 0x3c
    da5c:	e7fa      	b.n	da54 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    da5e:	4288      	cmp	r0, r1
    da60:	d300      	bcc.n	da64 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    da62:	4608      	mov	r0, r1
    da64:	1a80      	subs	r0, r0, r2
    da66:	4770      	bx	lr
    da68:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    da6c:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    da6e:	4281      	cmp	r1, r0
    da70:	d200      	bcs.n	da74 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x40>
    da72:	4608      	mov	r0, r1
    da74:	4770      	bx	lr
    da76:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    da7a:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
    da7c:	4281      	cmp	r1, r0
    da7e:	d200      	bcs.n	da82 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    da80:	4608      	mov	r0, r1
    da82:	4770      	bx	lr
    da84:	2196      	movs	r1, #150	; 0x96
    da86:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    da8a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    da8e:	f000 b800 	b.w	da92 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da96:	460d      	mov	r5, r1
    da98:	4606      	mov	r6, r0
    da9a:	4698      	mov	r8, r3
    da9c:	4617      	mov	r7, r2
    da9e:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    daa0:	4611      	mov	r1, r2
    daa2:	f7ff ffd3 	bl	da4c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    daa6:	4604      	mov	r4, r0
    daa8:	4639      	mov	r1, r7
    daaa:	4630      	mov	r0, r6
    daac:	f7ff ffe3 	bl	da76 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    dab0:	42a0      	cmp	r0, r4
    dab2:	d200      	bcs.n	dab6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x82>
    dab4:	4604      	mov	r4, r0
    dab6:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    dab8:	4641      	mov	r1, r8
    daba:	f7ff ffc7 	bl	da4c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    dabe:	4607      	mov	r7, r0
    dac0:	4641      	mov	r1, r8
    dac2:	4630      	mov	r0, r6
    dac4:	f7ff ffd0 	bl	da68 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dac8:	42b8      	cmp	r0, r7
    daca:	d300      	bcc.n	dace <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9a>
    dacc:	4638      	mov	r0, r7
    dace:	4420      	add	r0, r4
    dad0:	4428      	add	r0, r5
    dad2:	1d80      	adds	r0, r0, #6
    dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dad8:	2801      	cmp	r0, #1
    dada:	d102      	bne.n	dae2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xae>
    dadc:	7948      	ldrb	r0, [r1, #5]
    dade:	0980      	lsrs	r0, r0, #6
    dae0:	d001      	beq.n	dae6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    dae2:	2000      	movs	r0, #0
    dae4:	4770      	bx	lr
    dae6:	2001      	movs	r0, #1
    dae8:	4770      	bx	lr
    daea:	2801      	cmp	r0, #1
    daec:	d106      	bne.n	dafc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    daee:	7948      	ldrb	r0, [r1, #5]
    daf0:	2101      	movs	r1, #1
    daf2:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    daf6:	d101      	bne.n	dafc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    daf8:	2001      	movs	r0, #1
    dafa:	4770      	bx	lr
    dafc:	2000      	movs	r0, #0
    dafe:	4770      	bx	lr
    db00:	2802      	cmp	r0, #2
    db02:	d003      	beq.n	db0c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    db04:	2803      	cmp	r0, #3
    db06:	d001      	beq.n	db0c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    db08:	2000      	movs	r0, #0
    db0a:	4770      	bx	lr
    db0c:	2001      	movs	r0, #1
    db0e:	4770      	bx	lr

0000db10 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    db10:	b510      	push	{r4, lr}
    db12:	4604      	mov	r4, r0
    db14:	7c00      	ldrb	r0, [r0, #16]
    db16:	f7ff fff3 	bl	db00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    db1a:	b148      	cbz	r0, db30 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    db1c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    db20:	f104 0150 	add.w	r1, r4, #80	; 0x50
    db24:	f7ff fa37 	bl	cf96 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    db28:	2808      	cmp	r0, #8
    db2a:	d001      	beq.n	db30 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    db2c:	2001      	movs	r0, #1
    db2e:	bd10      	pop	{r4, pc}
    db30:	7c20      	ldrb	r0, [r4, #16]
    db32:	b118      	cbz	r0, db3c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    db34:	2802      	cmp	r0, #2
    db36:	d001      	beq.n	db3c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    db38:	7de0      	ldrb	r0, [r4, #23]
    db3a:	bd10      	pop	{r4, pc}
    db3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db40:	2000      	movs	r0, #0
    db42:	f7f6 bfd5 	b.w	4af0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000db46 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    db46:	b508      	push	{r3, lr}
    db48:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    db4c:	f88d 1000 	strb.w	r1, [sp]
    db50:	9900      	ldr	r1, [sp, #0]
    db52:	9100      	str	r1, [sp, #0]
    db54:	f89d 1000 	ldrb.w	r1, [sp]
    db58:	b109      	cbz	r1, db5e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    db5a:	2001      	movs	r0, #1
    db5c:	bd08      	pop	{r3, pc}
    db5e:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    db62:	f88d 0000 	strb.w	r0, [sp]
    db66:	9800      	ldr	r0, [sp, #0]
    db68:	9000      	str	r0, [sp, #0]
    db6a:	f89d 0000 	ldrb.w	r0, [sp]
    db6e:	2000      	movs	r0, #0
    db70:	bd08      	pop	{r3, pc}

0000db72 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    db72:	20ff      	movs	r0, #255	; 0xff
    db74:	7008      	strb	r0, [r1, #0]
    db76:	4770      	bx	lr

0000db78 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    db78:	b570      	push	{r4, r5, r6, lr}
    db7a:	460d      	mov	r5, r1
    db7c:	4604      	mov	r4, r0
    db7e:	22e8      	movs	r2, #232	; 0xe8
    db80:	2100      	movs	r1, #0
    db82:	f7fe f977 	bl	be74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db86:	20ff      	movs	r0, #255	; 0xff
    db88:	7020      	strb	r0, [r4, #0]
    db8a:	207f      	movs	r0, #127	; 0x7f
    db8c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    db90:	2013      	movs	r0, #19
    db92:	8060      	strh	r0, [r4, #2]
    db94:	4628      	mov	r0, r5
    db96:	f7f6 fd87 	bl	46a8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    db9a:	62e0      	str	r0, [r4, #44]	; 0x2c
    db9c:	2002      	movs	r0, #2
    db9e:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    dba2:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    dba6:	2000      	movs	r0, #0
    dba8:	73a0      	strb	r0, [r4, #14]
    dbaa:	f104 0020 	add.w	r0, r4, #32
    dbae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dbb2:	f000 b9a0 	b.w	def6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000dbb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    dbb6:	7880      	ldrb	r0, [r0, #2]
    dbb8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    dbbc:	b108      	cbz	r0, dbc2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    dbbe:	2000      	movs	r0, #0
    dbc0:	4770      	bx	lr
    dbc2:	201f      	movs	r0, #31
    dbc4:	4770      	bx	lr

0000dbc6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    dbc6:	f7f9 b803 	b.w	6bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>

0000dbca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    dbca:	6880      	ldr	r0, [r0, #8]
    dbcc:	4770      	bx	lr

0000dbce <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    dbce:	2001      	movs	r0, #1
    dbd0:	4770      	bx	lr

0000dbd2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    dbd2:	b510      	push	{r4, lr}
    dbd4:	4604      	mov	r4, r0
    dbd6:	3020      	adds	r0, #32
    dbd8:	f000 f94d 	bl	de76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    dbdc:	8861      	ldrh	r1, [r4, #2]
    dbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbe2:	2228      	movs	r2, #40	; 0x28
    dbe4:	f7f9 b9b0 	b.w	6f48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000dbe8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    dbe8:	2200      	movs	r2, #0
    dbea:	6282      	str	r2, [r0, #40]	; 0x28
    dbec:	8843      	ldrh	r3, [r0, #2]
    dbee:	2b1d      	cmp	r3, #29
    dbf0:	d001      	beq.n	dbf6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    dbf2:	7341      	strb	r1, [r0, #13]
    dbf4:	4770      	bx	lr
    dbf6:	7342      	strb	r2, [r0, #13]
    dbf8:	4770      	bx	lr

0000dbfa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    dbfa:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    dbfe:	2100      	movs	r1, #0
    dc00:	2a02      	cmp	r2, #2
    dc02:	d104      	bne.n	dc0e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    dc04:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    dc08:	b108      	cbz	r0, dc0e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    dc0a:	2001      	movs	r0, #1
    dc0c:	e000      	b.n	dc10 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    dc0e:	2000      	movs	r0, #0
    dc10:	4381      	bics	r1, r0
    dc12:	f081 0001 	eor.w	r0, r1, #1
    dc16:	4770      	bx	lr

0000dc18 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    dc18:	2000      	movs	r0, #0
    dc1a:	4770      	bx	lr

0000dc1c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    dc1c:	7880      	ldrb	r0, [r0, #2]
    dc1e:	f000 0001 	and.w	r0, r0, #1
    dc22:	4770      	bx	lr

0000dc24 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    dc24:	7880      	ldrb	r0, [r0, #2]
    dc26:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dc2a:	4770      	bx	lr

0000dc2c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    dc2c:	2001      	movs	r0, #1
    dc2e:	4770      	bx	lr

0000dc30 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    dc30:	7880      	ldrb	r0, [r0, #2]
    dc32:	f3c0 0040 	ubfx	r0, r0, #1, #1
    dc36:	4770      	bx	lr

0000dc38 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    dc38:	f990 000e 	ldrsb.w	r0, [r0, #14]
    dc3c:	4770      	bx	lr

0000dc3e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    dc3e:	7800      	ldrb	r0, [r0, #0]
    dc40:	28ff      	cmp	r0, #255	; 0xff
    dc42:	d001      	beq.n	dc48 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    dc44:	2001      	movs	r0, #1
    dc46:	4770      	bx	lr
    dc48:	2000      	movs	r0, #0
    dc4a:	4770      	bx	lr

0000dc4c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    dc4c:	680a      	ldr	r2, [r1, #0]
    dc4e:	f840 2f11 	str.w	r2, [r0, #17]!
    dc52:	8889      	ldrh	r1, [r1, #4]
    dc54:	8081      	strh	r1, [r0, #4]
    dc56:	2101      	movs	r1, #1
    dc58:	7181      	strb	r1, [r0, #6]
    dc5a:	4770      	bx	lr

0000dc5c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    dc5c:	7b00      	ldrb	r0, [r0, #12]
    dc5e:	4770      	bx	lr

0000dc60 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    dc60:	2001      	movs	r0, #1
    dc62:	4770      	bx	lr

0000dc64 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    dc64:	61c1      	str	r1, [r0, #28]
    dc66:	4770      	bx	lr

0000dc68 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>:
    dc68:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    dc6c:	b102      	cbz	r2, dc70 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x8>
    dc6e:	2201      	movs	r2, #1
    dc70:	2300      	movs	r3, #0
    dc72:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    dc76:	b119      	cbz	r1, dc80 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x18>
    dc78:	e9d0 3019 	ldrd	r3, r0, [r0, #100]	; 0x64
    dc7c:	e9c1 3000 	strd	r3, r0, [r1]
    dc80:	4610      	mov	r0, r2
    dc82:	4770      	bx	lr

0000dc84 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>:
    dc84:	2102      	movs	r1, #2
    dc86:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    dc8a:	4770      	bx	lr

0000dc8c <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>:
    dc8c:	e9d0 2019 	ldrd	r2, r0, [r0, #100]	; 0x64
    dc90:	e9c1 2000 	strd	r2, r0, [r1]
    dc94:	4770      	bx	lr

0000dc96 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    dc96:	2201      	movs	r2, #1
    dc98:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    dc9c:	e9d1 2100 	ldrd	r2, r1, [r1]
    dca0:	e9c0 2119 	strd	r2, r1, [r0, #100]	; 0x64
    dca4:	4770      	bx	lr

0000dca6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>:
    dca6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    dcaa:	b102      	cbz	r2, dcae <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x8>
    dcac:	2201      	movs	r2, #1
    dcae:	2300      	movs	r3, #0
    dcb0:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    dcb4:	b119      	cbz	r1, dcbe <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x18>
    dcb6:	e9d0 301b 	ldrd	r3, r0, [r0, #108]	; 0x6c
    dcba:	e9c1 3000 	strd	r3, r0, [r1]
    dcbe:	4610      	mov	r0, r2
    dcc0:	4770      	bx	lr

0000dcc2 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>:
    dcc2:	2102      	movs	r1, #2
    dcc4:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    dcc8:	4770      	bx	lr

0000dcca <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>:
    dcca:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    dcce:	e9c1 2000 	strd	r2, r0, [r1]
    dcd2:	4770      	bx	lr

0000dcd4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    dcd4:	2201      	movs	r2, #1
    dcd6:	f880 2075 	strb.w	r2, [r0, #117]	; 0x75
    dcda:	e9d1 2100 	ldrd	r2, r1, [r1]
    dcde:	e9c0 211b 	strd	r2, r1, [r0, #108]	; 0x6c
    dce2:	4770      	bx	lr

0000dce4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    dce4:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    dce8:	4770      	bx	lr

0000dcea <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    dcea:	b570      	push	{r4, r5, r6, lr}
    dcec:	4604      	mov	r4, r0
    dcee:	7880      	ldrb	r0, [r0, #2]
    dcf0:	2501      	movs	r5, #1
    dcf2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dcf6:	b138      	cbz	r0, dd08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    dcf8:	233c      	movs	r3, #60	; 0x3c
    dcfa:	22ff      	movs	r2, #255	; 0xff
    dcfc:	4620      	mov	r0, r4
    dcfe:	69e1      	ldr	r1, [r4, #28]
    dd00:	f7f8 ff8c 	bl	6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    dd04:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    dd08:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    dd0c:	bd70      	pop	{r4, r5, r6, pc}

0000dd0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    dd0e:	7bc0      	ldrb	r0, [r0, #15]
    dd10:	2800      	cmp	r0, #0
    dd12:	d000      	beq.n	dd16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    dd14:	2001      	movs	r0, #1
    dd16:	4770      	bx	lr
    dd18:	b510      	push	{r4, lr}
    dd1a:	f7ff f93c 	bl	cf96 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    dd1e:	4604      	mov	r4, r0
    dd20:	f7f7 fd60 	bl	57e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    dd24:	b138      	cbz	r0, dd36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dd26:	4620      	mov	r0, r4
    dd28:	f7f7 fc94 	bl	5654 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    dd2c:	b118      	cbz	r0, dd36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dd2e:	2110      	movs	r1, #16
    dd30:	f7ff fb10 	bl	d354 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    dd34:	b108      	cbz	r0, dd3a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    dd36:	2000      	movs	r0, #0
    dd38:	bd10      	pop	{r4, pc}
    dd3a:	2001      	movs	r0, #1
    dd3c:	bd10      	pop	{r4, pc}
    dd3e:	2101      	movs	r1, #1
    dd40:	f7f8 bbdc 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dd44:	2101      	movs	r1, #1
    dd46:	f7f8 bbd9 	b.w	64fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd4e:	4604      	mov	r4, r0
    dd50:	2700      	movs	r7, #0
    dd52:	704f      	strb	r7, [r1, #1]
    dd54:	2011      	movs	r0, #17
    dd56:	460d      	mov	r5, r1
    dd58:	7008      	strb	r0, [r1, #0]
    dd5a:	2220      	movs	r2, #32
    dd5c:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    dd60:	1d28      	adds	r0, r5, #4
    dd62:	f7fe f80d 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd66:	2601      	movs	r6, #1
    dd68:	722e      	strb	r6, [r5, #8]
    dd6a:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    dd6e:	7928      	ldrb	r0, [r5, #4]
    dd70:	2800      	cmp	r0, #0
    dd72:	d111      	bne.n	dd98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    dd74:	88e8      	ldrh	r0, [r5, #6]
    dd76:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    dd7a:	69e0      	ldr	r0, [r4, #28]
    dd7c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    dd80:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
    dd84:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    dd88:	8800      	ldrh	r0, [r0, #0]
    dd8a:	f7f6 fbf7 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    dd8e:	f7fe fedc 	bl	cb4a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    dd92:	69e0      	ldr	r0, [r4, #28]
    dd94:	f880 6068 	strb.w	r6, [r0, #104]	; 0x68
    dd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dda0:	4604      	mov	r4, r0
    dda2:	460f      	mov	r7, r1
    dda4:	7e40      	ldrb	r0, [r0, #25]
    dda6:	f7f7 fc15 	bl	55d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ddaa:	4606      	mov	r6, r0
    ddac:	7e20      	ldrb	r0, [r4, #24]
    ddae:	f104 0549 	add.w	r5, r4, #73	; 0x49
    ddb2:	b120      	cbz	r0, ddbe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    ddb4:	b11e      	cbz	r6, ddbe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    ddb6:	7e60      	ldrb	r0, [r4, #25]
    ddb8:	f7f7 fc00 	bl	55bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ddbc:	b1a0      	cbz	r0, dde8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    ddbe:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    ddc2:	2800      	cmp	r0, #0
    ddc4:	d024      	beq.n	de10 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    ddc6:	7ea0      	ldrb	r0, [r4, #26]
    ddc8:	2800      	cmp	r0, #0
    ddca:	d021      	beq.n	de10 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    ddcc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    ddd0:	4629      	mov	r1, r5
    ddd2:	f7ff fe8a 	bl	daea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    ddd6:	b1a8      	cbz	r0, de04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    ddd8:	f7f7 fbec 	bl	55b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    dddc:	463a      	mov	r2, r7
    ddde:	4629      	mov	r1, r5
    dde0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dde4:	f7ff b86f 	b.w	cec6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    dde8:	2001      	movs	r0, #1
    ddea:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    ddee:	463a      	mov	r2, r7
    ddf0:	4629      	mov	r1, r5
    ddf2:	4630      	mov	r0, r6
    ddf4:	f7ff f867 	bl	cec6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ddf8:	7e61      	ldrb	r1, [r4, #25]
    ddfa:	4628      	mov	r0, r5
    ddfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de00:	f7f7 bbf4 	b.w	55ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    de04:	4639      	mov	r1, r7
    de06:	4628      	mov	r0, r5
    de08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de0c:	f7ff b84a 	b.w	cea4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de14:	b510      	push	{r4, lr}
    de16:	4604      	mov	r4, r0
    de18:	4608      	mov	r0, r1
    de1a:	f7fd f853 	bl	aec4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    de1e:	7921      	ldrb	r1, [r4, #4]
    de20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de24:	2025      	movs	r0, #37	; 0x25
    de26:	f001 bc5f 	b.w	f6e8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    de2a:	b510      	push	{r4, lr}
    de2c:	4604      	mov	r4, r0
    de2e:	3026      	adds	r0, #38	; 0x26
    de30:	f7fc fffa 	bl	ae28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    de34:	2800      	cmp	r0, #0
    de36:	d102      	bne.n	de3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    de38:	207f      	movs	r0, #127	; 0x7f
    de3a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    de3e:	bd10      	pop	{r4, pc}
    de40:	7802      	ldrb	r2, [r0, #0]
    de42:	2320      	movs	r3, #32
    de44:	f022 0220 	bic.w	r2, r2, #32
    de48:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    de4c:	430a      	orrs	r2, r1
    de4e:	7002      	strb	r2, [r0, #0]
    de50:	4770      	bx	lr

0000de52 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    de52:	b570      	push	{r4, r5, r6, lr}
    de54:	7001      	strb	r1, [r0, #0]
    de56:	7042      	strb	r2, [r0, #1]
    de58:	4614      	mov	r4, r2
    de5a:	460d      	mov	r5, r1
    de5c:	7880      	ldrb	r0, [r0, #2]
    de5e:	f000 f87f 	bl	df60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    de62:	fb10 f005 	smulbb	r0, r0, r5
    de66:	4360      	muls	r0, r4
    de68:	28ff      	cmp	r0, #255	; 0xff
    de6a:	d303      	bcc.n	de74 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    de6c:	215c      	movs	r1, #92	; 0x5c
    de6e:	202e      	movs	r0, #46	; 0x2e
    de70:	f7f5 ff50 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de74:	bd70      	pop	{r4, r5, r6, pc}

0000de76 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    de76:	b510      	push	{r4, lr}
    de78:	4604      	mov	r4, r0
    de7a:	7880      	ldrb	r0, [r0, #2]
    de7c:	f000 f870 	bl	df60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    de80:	7861      	ldrb	r1, [r4, #1]
    de82:	7822      	ldrb	r2, [r4, #0]
    de84:	fb11 f102 	smulbb	r1, r1, r2
    de88:	4348      	muls	r0, r1
    de8a:	b2c0      	uxtb	r0, r0
    de8c:	bd10      	pop	{r4, pc}

0000de8e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    de8e:	b510      	push	{r4, lr}
    de90:	4604      	mov	r4, r0
    de92:	f000 f84d 	bl	df30 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    de96:	7961      	ldrb	r1, [r4, #5]
    de98:	1c49      	adds	r1, r1, #1
    de9a:	b2c9      	uxtb	r1, r1
    de9c:	7161      	strb	r1, [r4, #5]
    de9e:	7862      	ldrb	r2, [r4, #1]
    dea0:	4291      	cmp	r1, r2
    dea2:	d10b      	bne.n	debc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    dea4:	2200      	movs	r2, #0
    dea6:	7162      	strb	r2, [r4, #5]
    dea8:	78e1      	ldrb	r1, [r4, #3]
    deaa:	4301      	orrs	r1, r0
    deac:	70e1      	strb	r1, [r4, #3]
    deae:	78a3      	ldrb	r3, [r4, #2]
    deb0:	4299      	cmp	r1, r3
    deb2:	d103      	bne.n	debc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    deb4:	70e2      	strb	r2, [r4, #3]
    deb6:	7921      	ldrb	r1, [r4, #4]
    deb8:	1c49      	adds	r1, r1, #1
    deba:	7121      	strb	r1, [r4, #4]
    debc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dec0:	f000 b825 	b.w	df0e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000dec4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    dec4:	7081      	strb	r1, [r0, #2]
    dec6:	4770      	bx	lr

0000dec8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    dec8:	b570      	push	{r4, r5, r6, lr}
    deca:	4604      	mov	r4, r0
    decc:	7880      	ldrb	r0, [r0, #2]
    dece:	f000 f847 	bl	df60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ded2:	7861      	ldrb	r1, [r4, #1]
    ded4:	fb11 f500 	smulbb	r5, r1, r0
    ded8:	78e0      	ldrb	r0, [r4, #3]
    deda:	f000 f841 	bl	df60 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dede:	7861      	ldrb	r1, [r4, #1]
    dee0:	7962      	ldrb	r2, [r4, #5]
    dee2:	fb10 2001 	smlabb	r0, r0, r1, r2
    dee6:	7821      	ldrb	r1, [r4, #0]
    dee8:	7922      	ldrb	r2, [r4, #4]
    deea:	1a89      	subs	r1, r1, r2
    deec:	fb11 f105 	smulbb	r1, r1, r5
    def0:	1a08      	subs	r0, r1, r0
    def2:	b2c0      	uxtb	r0, r0
    def4:	bd70      	pop	{r4, r5, r6, pc}

0000def6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    def6:	2100      	movs	r1, #0
    def8:	6001      	str	r1, [r0, #0]
    defa:	8081      	strh	r1, [r0, #4]
    defc:	2101      	movs	r1, #1
    defe:	7041      	strb	r1, [r0, #1]
    df00:	7001      	strb	r1, [r0, #0]
    df02:	4770      	bx	lr

0000df04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    df04:	2100      	movs	r1, #0
    df06:	70c1      	strb	r1, [r0, #3]
    df08:	7141      	strb	r1, [r0, #5]
    df0a:	7101      	strb	r1, [r0, #4]
    df0c:	4770      	bx	lr
    df0e:	b510      	push	{r4, lr}
    df10:	2801      	cmp	r0, #1
    df12:	d007      	beq.n	df24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    df14:	2802      	cmp	r0, #2
    df16:	d007      	beq.n	df28 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    df18:	2804      	cmp	r0, #4
    df1a:	d007      	beq.n	df2c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    df1c:	2139      	movs	r1, #57	; 0x39
    df1e:	202e      	movs	r0, #46	; 0x2e
    df20:	f7f5 fef8 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df24:	2025      	movs	r0, #37	; 0x25
    df26:	bd10      	pop	{r4, pc}
    df28:	2026      	movs	r0, #38	; 0x26
    df2a:	bd10      	pop	{r4, pc}
    df2c:	2027      	movs	r0, #39	; 0x27
    df2e:	bd10      	pop	{r4, pc}
    df30:	4601      	mov	r1, r0
    df32:	2000      	movs	r0, #0
    df34:	788a      	ldrb	r2, [r1, #2]
    df36:	07d3      	lsls	r3, r2, #31
    df38:	d002      	beq.n	df40 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    df3a:	78cb      	ldrb	r3, [r1, #3]
    df3c:	07db      	lsls	r3, r3, #31
    df3e:	d006      	beq.n	df4e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    df40:	0793      	lsls	r3, r2, #30
    df42:	d506      	bpl.n	df52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    df44:	78cb      	ldrb	r3, [r1, #3]
    df46:	079b      	lsls	r3, r3, #30
    df48:	d403      	bmi.n	df52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    df4a:	2002      	movs	r0, #2
    df4c:	4770      	bx	lr
    df4e:	2001      	movs	r0, #1
    df50:	4770      	bx	lr
    df52:	0752      	lsls	r2, r2, #29
    df54:	d5fc      	bpl.n	df50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    df56:	78c9      	ldrb	r1, [r1, #3]
    df58:	0749      	lsls	r1, r1, #29
    df5a:	d4f9      	bmi.n	df50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    df5c:	2004      	movs	r0, #4
    df5e:	4770      	bx	lr
    df60:	f3c0 0180 	ubfx	r1, r0, #2, #1
    df64:	f3c0 0240 	ubfx	r2, r0, #1, #1
    df68:	4411      	add	r1, r2
    df6a:	f000 0001 	and.w	r0, r0, #1
    df6e:	4408      	add	r0, r1
    df70:	4770      	bx	lr

0000df72 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    df72:	f240 315a 	movw	r1, #858	; 0x35a
    df76:	4348      	muls	r0, r1
    df78:	4770      	bx	lr

0000df7a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    df7a:	f240 20ef 	movw	r0, #751	; 0x2ef
    df7e:	4770      	bx	lr
    df80:	041c020e 	.word	0x041c020e
    df84:	0c600630 	.word	0x0c600630
    df88:	06b4035a 	.word	0x06b4035a
    df8c:	0bf505c5 	.word	0x0bf505c5
    df90:	01a31225 	.word	0x01a31225
    df94:	05bf03b1 	.word	0x05bf03b1
    df98:	064902ef 	.word	0x064902ef
    df9c:	09a3      	.short	0x09a3

0000df9e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    df9e:	b510      	push	{r4, lr}
    dfa0:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    dfa4:	b109      	cbz	r1, dfaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    dfa6:	2000      	movs	r0, #0
    dfa8:	bd10      	pop	{r4, pc}
    dfaa:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    dfae:	b949      	cbnz	r1, dfc4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dfb0:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    dfb4:	b131      	cbz	r1, dfc4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dfb6:	e9d0 1230 	ldrd	r1, r2, [r0, #192]	; 0xc0
    dfba:	428a      	cmp	r2, r1
    dfbc:	d902      	bls.n	dfc4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dfbe:	f7ff fe94 	bl	dcea <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dfc2:	e7f0      	b.n	dfa6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    dfc4:	2001      	movs	r0, #1
    dfc6:	bd10      	pop	{r4, pc}

0000dfc8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    dfc8:	b510      	push	{r4, lr}
    dfca:	b131      	cbz	r1, dfda <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    dfcc:	2901      	cmp	r1, #1
    dfce:	d008      	beq.n	dfe2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    dfd0:	f240 71a3 	movw	r1, #1955	; 0x7a3
    dfd4:	2030      	movs	r0, #48	; 0x30
    dfd6:	f7f5 fe9d 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfde:	f000 b999 	b.w	e314 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    dfe2:	2100      	movs	r1, #0
    dfe4:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    dfe8:	f000 f95d 	bl	e2a6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    dfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dff0:	f7fb bdec 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>

0000dff4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    dff4:	b510      	push	{r4, lr}
    dff6:	4604      	mov	r4, r0
    dff8:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    dffc:	2800      	cmp	r0, #0
    dffe:	d019      	beq.n	e034 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    e000:	2001      	movs	r0, #1
    e002:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
    e006:	4601      	mov	r1, r0
    e008:	4620      	mov	r0, r4
    e00a:	f7ff fe6b 	bl	dce4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e00e:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e012:	b170      	cbz	r0, e032 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    e014:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    e018:	f7f3 ff62 	bl	1ee0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e01c:	7820      	ldrb	r0, [r4, #0]
    e01e:	f7f4 f89d 	bl	215c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e022:	f814 09b4 	ldrb.w	r0, [r4], #-180
    e026:	f7f4 f877 	bl	2118 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e02a:	b120      	cbz	r0, e036 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    e02c:	2000      	movs	r0, #0
    e02e:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    e032:	2000      	movs	r0, #0
    e034:	bd10      	pop	{r4, pc}
    e036:	f240 2117 	movw	r1, #535	; 0x217
    e03a:	2030      	movs	r0, #48	; 0x30
    e03c:	f7f5 fe6a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e040 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    e040:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    e044:	4770      	bx	lr

0000e046 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    e046:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e04a:	4770      	bx	lr

0000e04c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    e04c:	b50e      	push	{r1, r2, r3, lr}
    e04e:	4669      	mov	r1, sp
    e050:	2001      	movs	r0, #1
    e052:	f7fe feb4 	bl	cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e056:	b138      	cbz	r0, e068 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    e058:	f240 1145 	movw	r1, #325	; 0x145
    e05c:	2030      	movs	r0, #48	; 0x30
    e05e:	f7f5 fe59 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e062:	9802      	ldr	r0, [sp, #8]
    e064:	f7ff ffc6 	bl	dff4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    e068:	4668      	mov	r0, sp
    e06a:	f7f6 f8a5 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e06e:	2800      	cmp	r0, #0
    e070:	d0f7      	beq.n	e062 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    e072:	f7f9 f8f1 	bl	7258 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    e076:	2000      	movs	r0, #0
    e078:	bd0e      	pop	{r1, r2, r3, pc}

0000e07a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    e07a:	b50e      	push	{r1, r2, r3, lr}
    e07c:	4669      	mov	r1, sp
    e07e:	2001      	movs	r0, #1
    e080:	f7fe fe9d 	bl	cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e084:	b150      	cbz	r0, e09c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e086:	f240 71ae 	movw	r1, #1966	; 0x7ae
    e08a:	2030      	movs	r0, #48	; 0x30
    e08c:	f7f5 fe42 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e090:	9802      	ldr	r0, [sp, #8]
    e092:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e096:	b108      	cbz	r0, e09c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e098:	2000      	movs	r0, #0
    e09a:	bd0e      	pop	{r1, r2, r3, pc}
    e09c:	4668      	mov	r0, sp
    e09e:	f7f6 f88b 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e0a2:	2800      	cmp	r0, #0
    e0a4:	d0f4      	beq.n	e090 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    e0a6:	2000      	movs	r0, #0
    e0a8:	f7fe fe6d 	bl	cd86 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    e0ac:	f080 0001 	eor.w	r0, r0, #1
    e0b0:	bd0e      	pop	{r1, r2, r3, pc}

0000e0b2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e0b2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e0b4:	4604      	mov	r4, r0
    e0b6:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    e0ba:	2800      	cmp	r0, #0
    e0bc:	d153      	bne.n	e166 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0be:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e0c2:	2803      	cmp	r0, #3
    e0c4:	d14f      	bne.n	e166 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0c6:	f7fd fcdb 	bl	ba80 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e0ca:	4601      	mov	r1, r0
    e0cc:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    e0d0:	f7f3 faae 	bl	1630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e0d4:	2800      	cmp	r0, #0
    e0d6:	dd46      	ble.n	e166 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0d8:	6861      	ldr	r1, [r4, #4]
    e0da:	b111      	cbz	r1, e0e2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e0dc:	fbb0 f0f1 	udiv	r0, r0, r1
    e0e0:	e000      	b.n	e0e4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e0e2:	2000      	movs	r0, #0
    e0e4:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e0e8:	1c40      	adds	r0, r0, #1
    e0ea:	4408      	add	r0, r1
    e0ec:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e0f0:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e0f4:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    e0f8:	1a08      	subs	r0, r1, r0
    e0fa:	b200      	sxth	r0, r0
    e0fc:	2800      	cmp	r0, #0
    e0fe:	dd32      	ble.n	e166 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e100:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e104:	f7f3 feec 	bl	1ee0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e108:	2800      	cmp	r0, #0
    e10a:	d02c      	beq.n	e166 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e10c:	2001      	movs	r0, #1
    e10e:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    e112:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    e116:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    e11a:	ae01      	add	r6, sp, #4
    e11c:	1a40      	subs	r0, r0, r1
    e11e:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e122:	1e40      	subs	r0, r0, #1
    e124:	4408      	add	r0, r1
    e126:	b285      	uxth	r5, r0
    e128:	e017      	b.n	e15a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e12a:	9600      	str	r6, [sp, #0]
    e12c:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    e130:	2300      	movs	r3, #0
    e132:	2201      	movs	r2, #1
    e134:	4620      	mov	r0, r4
    e136:	f7f9 f9c1 	bl	74bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    e13a:	2800      	cmp	r0, #0
    e13c:	d013      	beq.n	e166 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e13e:	2801      	cmp	r0, #1
    e140:	d004      	beq.n	e14c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e142:	f240 6115 	movw	r1, #1557	; 0x615
    e146:	2030      	movs	r0, #48	; 0x30
    e148:	f7f5 fde4 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e14c:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e150:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e154:	4408      	add	r0, r1
    e156:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e15a:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e15e:	1a28      	subs	r0, r5, r0
    e160:	b200      	sxth	r0, r0
    e162:	2800      	cmp	r0, #0
    e164:	dae1      	bge.n	e12a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e166:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e168:	2000      	movs	r0, #0
    e16a:	4770      	bx	lr
    e16c:	b570      	push	{r4, r5, r6, lr}
    e16e:	4604      	mov	r4, r0
    e170:	2601      	movs	r6, #1
    e172:	f000 f8b3 	bl	e2dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    e176:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    e17a:	2000      	movs	r0, #0
    e17c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    e180:	2001      	movs	r0, #1
    e182:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    e186:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e18a:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    e18e:	b160      	cbz	r0, e1aa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    e190:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e194:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e198:	f7f3 fa18 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e19c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    e1a0:	2100      	movs	r1, #0
    e1a2:	4628      	mov	r0, r5
    e1a4:	f7ff f81d 	bl	d1e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e1a8:	e00f      	b.n	e1ca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    e1aa:	4620      	mov	r0, r4
    e1ac:	f7ff fd0d 	bl	dbca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e1b0:	4606      	mov	r6, r0
    e1b2:	4631      	mov	r1, r6
    e1b4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e1b8:	f7f3 fa08 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e1bc:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    e1c0:	4631      	mov	r1, r6
    e1c2:	4628      	mov	r0, r5
    e1c4:	f7ff f80d 	bl	d1e2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e1c8:	1c46      	adds	r6, r0, #1
    e1ca:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    e1ce:	1c41      	adds	r1, r0, #1
    e1d0:	290a      	cmp	r1, #10
    e1d2:	d202      	bcs.n	e1da <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    e1d4:	4430      	add	r0, r6
    e1d6:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    e1da:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    e1de:	b130      	cbz	r0, e1ee <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e1e0:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    e1e4:	1c40      	adds	r0, r0, #1
    e1e6:	280a      	cmp	r0, #10
    e1e8:	d301      	bcc.n	e1ee <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e1ea:	2002      	movs	r0, #2
    e1ec:	e000      	b.n	e1f0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    e1ee:	2003      	movs	r0, #3
    e1f0:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    e1f4:	2100      	movs	r1, #0
    e1f6:	4620      	mov	r0, r4
    e1f8:	f000 f824 	bl	e244 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    e1fc:	b130      	cbz	r0, e20c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x15a>
    e1fe:	4620      	mov	r0, r4
    e200:	f000 f811 	bl	e226 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    e204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e208:	f7fb bce0 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e20c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e210:	4629      	mov	r1, r5
    e212:	f000 f861 	bl	e2d8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    e216:	2800      	cmp	r0, #0
    e218:	d104      	bne.n	e224 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x172>
    e21a:	f240 61b6 	movw	r1, #1718	; 0x6b6
    e21e:	2030      	movs	r0, #48	; 0x30
    e220:	f7f5 fd78 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e224:	bd70      	pop	{r4, r5, r6, pc}
    e226:	b510      	push	{r4, lr}
    e228:	4604      	mov	r4, r0
    e22a:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    e22e:	f7f3 ff73 	bl	2118 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e232:	2000      	movs	r0, #0
    e234:	7520      	strb	r0, [r4, #20]
    e236:	bd10      	pop	{r4, pc}
    e238:	b510      	push	{r4, lr}
    e23a:	f7ff fcca 	bl	dbd2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e23e:	f200 1007 	addw	r0, r0, #263	; 0x107
    e242:	bd10      	pop	{r4, pc}
    e244:	b570      	push	{r4, r5, r6, lr}
    e246:	4604      	mov	r4, r0
    e248:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    e24c:	460d      	mov	r5, r1
    e24e:	b108      	cbz	r0, e254 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a2>
    e250:	2001      	movs	r0, #1
    e252:	bd70      	pop	{r4, r5, r6, pc}
    e254:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e258:	b1a8      	cbz	r0, e286 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    e25a:	4620      	mov	r0, r4
    e25c:	f7ff fcb5 	bl	dbca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e260:	4405      	add	r5, r0
    e262:	4620      	mov	r0, r4
    e264:	f7ff ffe8 	bl	e238 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    e268:	1941      	adds	r1, r0, r5
    e26a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e26e:	4288      	cmp	r0, r1
    e270:	d206      	bcs.n	e280 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    e272:	2001      	movs	r0, #1
    e274:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e278:	4620      	mov	r0, r4
    e27a:	f7ff fd36 	bl	dcea <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e27e:	e7e7      	b.n	e250 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    e280:	1b40      	subs	r0, r0, r5
    e282:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e286:	2000      	movs	r0, #0
    e288:	bd70      	pop	{r4, r5, r6, pc}
    e28a:	b510      	push	{r4, lr}
    e28c:	4604      	mov	r4, r0
    e28e:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    e292:	f000 f94b 	bl	e52c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x47a>
    e296:	4602      	mov	r2, r0
    e298:	4620      	mov	r0, r4
    e29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e29e:	f240 1117 	movw	r1, #279	; 0x117
    e2a2:	f7ff bb88 	b.w	d9b6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e2a6:	b510      	push	{r4, lr}
    e2a8:	f7fc fc50 	bl	ab4c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2b0:	f7f4 b884 	b.w	23bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e2b4:	b570      	push	{r4, r5, r6, lr}
    e2b6:	460c      	mov	r4, r1
    e2b8:	4605      	mov	r5, r0
    e2ba:	f001 fa05 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e2be:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e2c2:	4408      	add	r0, r1
    e2c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e2c8:	fbb0 f6f1 	udiv	r6, r0, r1
    e2cc:	4628      	mov	r0, r5
    e2ce:	f001 f9ed 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e2d2:	4430      	add	r0, r6
    e2d4:	4420      	add	r0, r4
    e2d6:	bd70      	pop	{r4, r5, r6, pc}
    e2d8:	f7f3 baec 	b.w	18b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e2dc:	b510      	push	{r4, lr}
    e2de:	4604      	mov	r4, r0
    e2e0:	f7ff fca4 	bl	dc2c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e2e4:	b1a0      	cbz	r0, e310 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25e>
    e2e6:	4620      	mov	r0, r4
    e2e8:	f7ff fc98 	bl	dc1c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e2ec:	b918      	cbnz	r0, e2f6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x244>
    e2ee:	4620      	mov	r0, r4
    e2f0:	f7ff fc9e 	bl	dc30 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e2f4:	b120      	cbz	r0, e300 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x24e>
    e2f6:	2449      	movs	r4, #73	; 0x49
    e2f8:	f001 f9a4 	bl	f644 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e2fc:	b928      	cbnz	r0, e30a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x258>
    e2fe:	e001      	b.n	e304 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x252>
    e300:	2442      	movs	r4, #66	; 0x42
    e302:	e7f9      	b.n	e2f8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x246>
    e304:	f001 f994 	bl	f630 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e308:	b100      	cbz	r0, e30c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25a>
    e30a:	1de4      	adds	r4, r4, #7
    e30c:	4620      	mov	r0, r4
    e30e:	bd10      	pop	{r4, pc}
    e310:	206b      	movs	r0, #107	; 0x6b
    e312:	bd10      	pop	{r4, pc}
    e314:	b570      	push	{r4, r5, r6, lr}
    e316:	4604      	mov	r4, r0
    e318:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
    e31c:	2500      	movs	r5, #0
    e31e:	b118      	cbz	r0, e328 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x276>
    e320:	2001      	movs	r0, #1
    e322:	f000 f88a 	bl	e43a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    e326:	4605      	mov	r5, r0
    e328:	4620      	mov	r0, r4
    e32a:	f7ff fc4e 	bl	dbca <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e32e:	1941      	adds	r1, r0, r5
    e330:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e334:	34cc      	adds	r4, #204	; 0xcc
    e336:	f7f3 f949 	bl	15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e33a:	2600      	movs	r6, #0
    e33c:	60e0      	str	r0, [r4, #12]
    e33e:	f804 6b0b 	strb.w	r6, [r4], #11
    e342:	2001      	movs	r0, #1
    e344:	f804 0901 	strb.w	r0, [r4], #-1
    e348:	2003      	movs	r0, #3
    e34a:	f804 09d6 	strb.w	r0, [r4], #-214
    e34e:	4620      	mov	r0, r4
    e350:	f7ff ffc4 	bl	e2dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    e354:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    e358:	4629      	mov	r1, r5
    e35a:	4620      	mov	r0, r4
    e35c:	f7ff ff72 	bl	e244 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    e360:	b930      	cbnz	r0, e370 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2be>
    e362:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e366:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    e36a:	f7ff ffb5 	bl	e2d8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    e36e:	b138      	cbz	r0, e380 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2ce>
    e370:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
    e374:	f7ff ff97 	bl	e2a6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    e378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e37c:	f7fb bc26 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e380:	f240 7104 	movw	r1, #1796	; 0x704
    e384:	2030      	movs	r0, #48	; 0x30
    e386:	f7f5 fcc5 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e38a:	b510      	push	{r4, lr}
    e38c:	4604      	mov	r4, r0
    e38e:	2000      	movs	r0, #0
    e390:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e394:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e398:	f7f3 febe 	bl	2118 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e39c:	2020      	movs	r0, #32
    e39e:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
    e3a2:	bd10      	pop	{r4, pc}
    e3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e3a8:	2500      	movs	r5, #0
    e3aa:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    e3ae:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
    e3b2:	4688      	mov	r8, r1
    e3b4:	4604      	mov	r4, r0
    e3b6:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    e3ba:	2701      	movs	r7, #1
    e3bc:	f880 70c9 	strb.w	r7, [r0, #201]	; 0xc9
    e3c0:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    e3c4:	4639      	mov	r1, r7
    e3c6:	34b4      	adds	r4, #180	; 0xb4
    e3c8:	f7f7 fbb6 	bl	5b38 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e3cc:	6860      	ldr	r0, [r4, #4]
    e3ce:	f8c0 6154 	str.w	r6, [r0, #340]	; 0x154
    e3d2:	6861      	ldr	r1, [r4, #4]
    e3d4:	7820      	ldrb	r0, [r4, #0]
    e3d6:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    e3da:	6861      	ldr	r1, [r4, #4]
    e3dc:	f8c1 8164 	str.w	r8, [r1, #356]	; 0x164
    e3e0:	6860      	ldr	r0, [r4, #4]
    e3e2:	f8c0 6158 	str.w	r6, [r0, #344]	; 0x158
    e3e6:	6864      	ldr	r4, [r4, #4]
    e3e8:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    e3ec:	2300      	movs	r3, #0
    e3ee:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
    e3f2:	461a      	mov	r2, r3
    e3f4:	4619      	mov	r1, r3
    e3f6:	4620      	mov	r0, r4
    e3f8:	9500      	str	r5, [sp, #0]
    e3fa:	f7f9 f85f 	bl	74bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    e3fe:	b120      	cbz	r0, e40a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x358>
    e400:	f240 212b 	movw	r1, #555	; 0x22b
    e404:	2030      	movs	r0, #48	; 0x30
    e406:	f7f5 fc85 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e40a:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e40e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    e412:	f884 712c 	strb.w	r7, [r4, #300]	; 0x12c
    e416:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    e41a:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    e41e:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    e422:	f834 0f6c 	ldrh.w	r0, [r4, #108]!
    e426:	1e40      	subs	r0, r0, #1
    e428:	f824 0bbc 	strh.w	r0, [r4], #188
    e42c:	86e5      	strh	r5, [r4, #54]	; 0x36
    e42e:	f7ff ff3a 	bl	e2a6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    e432:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e436:	f7fb bbc9 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e43a:	b508      	push	{r3, lr}
    e43c:	2800      	cmp	r0, #0
    e43e:	f04f 0101 	mov.w	r1, #1
    e442:	4668      	mov	r0, sp
    e444:	d002      	beq.n	e44c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39a>
    e446:	f7f5 fcfd 	bl	3e44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e44a:	e001      	b.n	e450 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39e>
    e44c:	f7f5 fd08 	bl	3e60 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e450:	f89d 0000 	ldrb.w	r0, [sp]
    e454:	f242 7110 	movw	r1, #10000	; 0x2710
    e458:	0200      	lsls	r0, r0, #8
    e45a:	fbb0 f2f1 	udiv	r2, r0, r1
    e45e:	fb01 0012 	mls	r0, r1, r2, r0
    e462:	bd08      	pop	{r3, pc}
    e464:	b510      	push	{r4, lr}
    e466:	0004      	movs	r4, r0
    e468:	d008      	beq.n	e47c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3ca>
    e46a:	2909      	cmp	r1, #9
    e46c:	d25c      	bcs.n	e528 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    e46e:	e8df f001 	tbb	[pc, r1]
    e472:	3607      	.short	0x3607
    e474:	5b3a3e3e 	.word	0x5b3a3e3e
    e478:	00574a43 	.word	0x00574a43
    e47c:	219e      	movs	r1, #158	; 0x9e
    e47e:	e050      	b.n	e522 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    e480:	2100      	movs	r1, #0
    e482:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    e486:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    e48a:	4620      	mov	r0, r4
    e48c:	b189      	cbz	r1, e4b2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x400>
    e48e:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    e492:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    e496:	428a      	cmp	r2, r1
    e498:	d106      	bne.n	e4a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3f6>
    e49a:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    e49e:	1a51      	subs	r1, r2, r1
    e4a0:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    e4a4:	4611      	mov	r1, r2
    e4a6:	e00d      	b.n	e4c4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    e4a8:	1a51      	subs	r1, r2, r1
    e4aa:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    e4ae:	b291      	uxth	r1, r2
    e4b0:	e008      	b.n	e4c4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    e4b2:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    e4b6:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    e4ba:	1a89      	subs	r1, r1, r2
    e4bc:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    e4c0:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    e4c4:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    e4c8:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    e4cc:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    e4d0:	f7f9 fcfa 	bl	7ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e4d4:	4620      	mov	r0, r4
    e4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4da:	f7f9 ba5f 	b.w	799c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f4>
    e4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4e2:	f000 b879 	b.w	e5d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4ea:	f7fc bcf1 	b.w	aed0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e4ee:	4620      	mov	r0, r4
    e4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4f4:	f7f9 ba88 	b.w	7a08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x860>
    e4f8:	2001      	movs	r0, #1
    e4fa:	f7f2 ff95 	bl	1428 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e502:	f7fe bd15 	b.w	cf30 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    e506:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e50a:	2804      	cmp	r0, #4
    e50c:	d001      	beq.n	e512 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x460>
    e50e:	21c0      	movs	r1, #192	; 0xc0
    e510:	e007      	b.n	e522 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    e512:	4620      	mov	r0, r4
    e514:	f7ff ff39 	bl	e38a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    e518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e51c:	f7fb bb56 	b.w	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e520:	21c9      	movs	r1, #201	; 0xc9
    e522:	2030      	movs	r0, #48	; 0x30
    e524:	f7f5 fbf6 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e528:	21cd      	movs	r1, #205	; 0xcd
    e52a:	e7fa      	b.n	e522 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    e52c:	b510      	push	{r4, lr}
    e52e:	f001 f8cb 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e532:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e536:	4408      	add	r0, r1
    e538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e53c:	fbb0 f0f1 	udiv	r0, r0, r1
    e540:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    e544:	bd10      	pop	{r4, pc}
    e546:	01f4      	.short	0x01f4
    e548:	009600fa 	.word	0x009600fa
    e54c:	004b0064 	.word	0x004b0064
    e550:	001e0032 	.word	0x001e0032
    e554:	000a0014 	.word	0x000a0014
    e558:	00020005 	.word	0x00020005
    e55c:	0001      	.short	0x0001
    e55e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e562:	f001 0307 	and.w	r3, r1, #7
    e566:	7802      	ldrb	r2, [r0, #0]
    e568:	2101      	movs	r1, #1
    e56a:	4099      	lsls	r1, r3
    e56c:	438a      	bics	r2, r1
    e56e:	7002      	strb	r2, [r0, #0]
    e570:	4770      	bx	lr

0000e572 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    e572:	b510      	push	{r4, lr}
    e574:	4604      	mov	r4, r0
    e576:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    e57a:	6861      	ldr	r1, [r4, #4]
    e57c:	4288      	cmp	r0, r1
    e57e:	d109      	bne.n	e594 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e580:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    e584:	8922      	ldrh	r2, [r4, #8]
    e586:	4291      	cmp	r1, r2
    e588:	d104      	bne.n	e594 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e58a:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    e58e:	8962      	ldrh	r2, [r4, #10]
    e590:	4291      	cmp	r1, r2
    e592:	d013      	beq.n	e5bc <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    e594:	8821      	ldrh	r1, [r4, #0]
    e596:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    e59a:	f7fe fd50 	bl	d03e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e59e:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    e5a2:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    e5a6:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    e5aa:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    e5ae:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    e5b2:	2001      	movs	r0, #1
    e5b4:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    e5b8:	f7fb fb08 	bl	9bcc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e5bc:	2102      	movs	r1, #2
    e5be:	4620      	mov	r0, r4
    e5c0:	f7f7 faba 	bl	5b38 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e5c4:	2000      	movs	r0, #0
    e5c6:	f804 0f76 	strb.w	r0, [r4, #118]!
    e5ca:	2003      	movs	r0, #3
    e5cc:	70e0      	strb	r0, [r4, #3]
    e5ce:	bd10      	pop	{r4, pc}

0000e5d0 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e5d0:	f7f5 bf60 	b.w	4494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e5d4 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e5d4:	2000      	movs	r0, #0
    e5d6:	4770      	bx	lr

0000e5d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e5d8:	f7f6 bc2e 	b.w	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e5dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e5dc:	2100      	movs	r1, #0
    e5de:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    e5e2:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    e5e6:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    e5ea:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    e5ee:	b109      	cbz	r1, e5f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e5f0:	2102      	movs	r1, #2
    e5f2:	e000      	b.n	e5f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e5f4:	2103      	movs	r1, #3
    e5f6:	f7f8 bdd7 	b.w	71a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e5fa:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    e5fe:	28fe      	cmp	r0, #254	; 0xfe
    e600:	d001      	beq.n	e606 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e602:	2001      	movs	r0, #1
    e604:	4770      	bx	lr
    e606:	2000      	movs	r0, #0
    e608:	4770      	bx	lr
    e60a:	b510      	push	{r4, lr}
    e60c:	2801      	cmp	r0, #1
    e60e:	d006      	beq.n	e61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e610:	2802      	cmp	r0, #2
    e612:	d004      	beq.n	e61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e614:	f240 2173 	movw	r1, #627	; 0x273
    e618:	2006      	movs	r0, #6
    e61a:	f7f5 fb7b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e61e:	bd10      	pop	{r4, pc}
    e620:	2801      	cmp	r0, #1
    e622:	d002      	beq.n	e62a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e624:	2802      	cmp	r0, #2
    e626:	d105      	bne.n	e634 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e628:	e002      	b.n	e630 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e62a:	2901      	cmp	r1, #1
    e62c:	d004      	beq.n	e638 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e62e:	e001      	b.n	e634 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e630:	2902      	cmp	r1, #2
    e632:	d001      	beq.n	e638 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e634:	2000      	movs	r0, #0
    e636:	4770      	bx	lr
    e638:	2001      	movs	r0, #1
    e63a:	4770      	bx	lr
    e63c:	1a40      	subs	r0, r0, r1
    e63e:	b200      	sxth	r0, r0
    e640:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e644:	4288      	cmp	r0, r1
    e646:	dc01      	bgt.n	e64c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e648:	2800      	cmp	r0, #0
    e64a:	dc01      	bgt.n	e650 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e64c:	2001      	movs	r0, #1
    e64e:	4770      	bx	lr
    e650:	2000      	movs	r0, #0
    e652:	4770      	bx	lr
    e654:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e658:	f001 0107 	and.w	r1, r1, #7
    e65c:	7800      	ldrb	r0, [r0, #0]
    e65e:	2201      	movs	r2, #1
    e660:	408a      	lsls	r2, r1
    e662:	4010      	ands	r0, r2
    e664:	40c8      	lsrs	r0, r1
    e666:	4770      	bx	lr
    e668:	b118      	cbz	r0, e672 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e66a:	2802      	cmp	r0, #2
    e66c:	d001      	beq.n	e672 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e66e:	2001      	movs	r0, #1
    e670:	4770      	bx	lr
    e672:	2000      	movs	r0, #0
    e674:	4770      	bx	lr

0000e676 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e676:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e67a:	7881      	ldrb	r1, [r0, #2]
    e67c:	4604      	mov	r4, r0
    e67e:	291a      	cmp	r1, #26
    e680:	d025      	beq.n	e6ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e682:	dc0e      	bgt.n	e6a2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e684:	2916      	cmp	r1, #22
    e686:	d22e      	bcs.n	e6e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e688:	e8df f001 	tbb	[pc, r1]
    e68c:	2d2d2d2d 	.word	0x2d2d2d2d
    e690:	2d2d212d 	.word	0x2d2d212d
    e694:	2d2d2d2d 	.word	0x2d2d2d2d
    e698:	2d2d2d2d 	.word	0x2d2d2d2d
    e69c:	212d2d2d 	.word	0x212d2d2d
    e6a0:	2121      	.short	0x2121
    e6a2:	292a      	cmp	r1, #42	; 0x2a
    e6a4:	d01f      	beq.n	e6e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e6a6:	dc0b      	bgt.n	e6c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e6a8:	f1a1 011e 	sub.w	r1, r1, #30
    e6ac:	290c      	cmp	r1, #12
    e6ae:	d21a      	bcs.n	e6e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e6b0:	e8df f001 	tbb	[pc, r1]
    e6b4:	19191919 	.word	0x19191919
    e6b8:	19191919 	.word	0x19191919
    e6bc:	0d191919 	.word	0x0d191919
    e6c0:	393a      	subs	r1, #58	; 0x3a
    e6c2:	2904      	cmp	r1, #4
    e6c4:	d20f      	bcs.n	e6e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e6c6:	e8df f001 	tbb	[pc, r1]
    e6ca:	020e      	.short	0x020e
    e6cc:	020e      	.short	0x020e
    e6ce:	8820      	ldrh	r0, [r4, #0]
    e6d0:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e6d4:	d207      	bcs.n	e6e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e6d6:	2701      	movs	r7, #1
    e6d8:	4669      	mov	r1, sp
    e6da:	f7fe fc9f 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e6de:	b120      	cbz	r0, e6ea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e6e0:	2002      	movs	r0, #2
    e6e2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e6e6:	2012      	movs	r0, #18
    e6e8:	e7fb      	b.n	e6e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e6ea:	9d01      	ldr	r5, [sp, #4]
    e6ec:	4668      	mov	r0, sp
    e6ee:	462e      	mov	r6, r5
    e6f0:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e6f4:	f206 1671 	addw	r6, r6, #369	; 0x171
    e6f8:	f000 fe66 	bl	f3c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    e6fc:	b108      	cbz	r0, e702 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e6fe:	7828      	ldrb	r0, [r5, #0]
    e700:	b108      	cbz	r0, e706 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e702:	200c      	movs	r0, #12
    e704:	e7ed      	b.n	e6e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e706:	702f      	strb	r7, [r5, #0]
    e708:	78a0      	ldrb	r0, [r4, #2]
    e70a:	7030      	strb	r0, [r6, #0]
    e70c:	4668      	mov	r0, sp
    e70e:	f7ff f83e 	bl	d78e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e712:	2000      	movs	r0, #0
    e714:	e7e5      	b.n	e6e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e716 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e716:	b510      	push	{r4, lr}
    e718:	4604      	mov	r4, r0
    e71a:	7800      	ldrb	r0, [r0, #0]
    e71c:	b118      	cbz	r0, e726 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e71e:	2801      	cmp	r0, #1
    e720:	d001      	beq.n	e726 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e722:	2012      	movs	r0, #18
    e724:	bd10      	pop	{r4, pc}
    e726:	f000 fe03 	bl	f330 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e72a:	b120      	cbz	r0, e736 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e72c:	f7f6 ffbe 	bl	56ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e730:	b108      	cbz	r0, e736 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e732:	200c      	movs	r0, #12
    e734:	bd10      	pop	{r4, pc}
    e736:	7820      	ldrb	r0, [r4, #0]
    e738:	f7ff ff96 	bl	e668 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e73c:	1de2      	adds	r2, r4, #7
    e73e:	f104 0317 	add.w	r3, r4, #23
    e742:	1c61      	adds	r1, r4, #1
    e744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e748:	f7f6 bfe2 	b.w	5710 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e74c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e74c:	b510      	push	{r4, lr}
    e74e:	4604      	mov	r4, r0
    e750:	f000 fecb 	bl	f4ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e754:	b108      	cbz	r0, e75a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e756:	200c      	movs	r0, #12
    e758:	bd10      	pop	{r4, pc}
    e75a:	7820      	ldrb	r0, [r4, #0]
    e75c:	b118      	cbz	r0, e766 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e75e:	2801      	cmp	r0, #1
    e760:	d001      	beq.n	e766 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e762:	2012      	movs	r0, #18
    e764:	bd10      	pop	{r4, pc}
    e766:	f7ff ff7f 	bl	e668 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e76a:	1c61      	adds	r1, r4, #1
    e76c:	f7f7 f848 	bl	5800 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e770:	b108      	cbz	r0, e776 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e772:	2000      	movs	r0, #0
    e774:	bd10      	pop	{r4, pc}
    e776:	2007      	movs	r0, #7
    e778:	bd10      	pop	{r4, pc}

0000e77a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e77a:	b510      	push	{r4, lr}
    e77c:	f000 fdd8 	bl	f330 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e780:	b120      	cbz	r0, e78c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e782:	f7f6 ff93 	bl	56ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e786:	b108      	cbz	r0, e78c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e788:	200c      	movs	r0, #12
    e78a:	bd10      	pop	{r4, pc}
    e78c:	f7f7 f806 	bl	579c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e790:	2000      	movs	r0, #0
    e792:	bd10      	pop	{r4, pc}

0000e794 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e794:	b510      	push	{r4, lr}
    e796:	f000 fea8 	bl	f4ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e79a:	b108      	cbz	r0, e7a0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e79c:	200c      	movs	r0, #12
    e79e:	bd10      	pop	{r4, pc}
    e7a0:	f7f7 f856 	bl	5850 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e7a4:	2000      	movs	r0, #0
    e7a6:	bd10      	pop	{r4, pc}

0000e7a8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e7a8:	b510      	push	{r4, lr}
    e7aa:	460b      	mov	r3, r1
    e7ac:	2201      	movs	r2, #1
    e7ae:	f100 0110 	add.w	r1, r0, #16
    e7b2:	f7fe fc15 	bl	cfe0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e7b6:	2000      	movs	r0, #0
    e7b8:	bd10      	pop	{r4, pc}

0000e7ba <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e7ba:	b510      	push	{r4, lr}
    e7bc:	8800      	ldrh	r0, [r0, #0]
    e7be:	2100      	movs	r1, #0
    e7c0:	f7fe faf3 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e7c4:	b118      	cbz	r0, e7ce <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e7c6:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e7ca:	b111      	cbz	r1, e7d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e7cc:	e007      	b.n	e7de <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e7ce:	2002      	movs	r0, #2
    e7d0:	bd10      	pop	{r4, pc}
    e7d2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    e7d6:	2914      	cmp	r1, #20
    e7d8:	d003      	beq.n	e7e2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e7da:	2915      	cmp	r1, #21
    e7dc:	d001      	beq.n	e7e2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e7de:	200c      	movs	r0, #12
    e7e0:	bd10      	pop	{r4, pc}
    e7e2:	2102      	movs	r1, #2
    e7e4:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e7e8:	2000      	movs	r0, #0
    e7ea:	bd10      	pop	{r4, pc}

0000e7ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e7ec:	b538      	push	{r3, r4, r5, lr}
    e7ee:	4605      	mov	r5, r0
    e7f0:	8800      	ldrh	r0, [r0, #0]
    e7f2:	2100      	movs	r1, #0
    e7f4:	f7fe fad9 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e7f8:	0004      	movs	r4, r0
    e7fa:	d003      	beq.n	e804 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e7fc:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e800:	b110      	cbz	r0, e808 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e802:	e010      	b.n	e826 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e804:	2002      	movs	r0, #2
    e806:	bd38      	pop	{r3, r4, r5, pc}
    e808:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    e80c:	2814      	cmp	r0, #20
    e80e:	d001      	beq.n	e814 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e810:	2815      	cmp	r0, #21
    e812:	d108      	bne.n	e826 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e814:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e818:	f88d 0000 	strb.w	r0, [sp]
    e81c:	9800      	ldr	r0, [sp, #0]
    e81e:	9000      	str	r0, [sp, #0]
    e820:	f89d 0000 	ldrb.w	r0, [sp]
    e824:	b108      	cbz	r0, e82a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e826:	200c      	movs	r0, #12
    e828:	bd38      	pop	{r3, r4, r5, pc}
    e82a:	2210      	movs	r2, #16
    e82c:	1ca9      	adds	r1, r5, #2
    e82e:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e832:	f7fd faa5 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e836:	2001      	movs	r0, #1
    e838:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e83c:	2000      	movs	r0, #0
    e83e:	bd38      	pop	{r3, r4, r5, pc}

0000e840 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e840:	b510      	push	{r4, lr}
    e842:	2108      	movs	r1, #8
    e844:	f7f5 fb1a 	bl	3e7c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e848:	2000      	movs	r0, #0
    e84a:	bd10      	pop	{r4, pc}

0000e84c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e84c:	b510      	push	{r4, lr}
    e84e:	4604      	mov	r4, r0
    e850:	f000 fdd1 	bl	f3f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e854:	f7ff f9f0 	bl	dc38 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e858:	7020      	strb	r0, [r4, #0]
    e85a:	2000      	movs	r0, #0
    e85c:	bd10      	pop	{r4, pc}

0000e85e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e85e:	b510      	push	{r4, lr}
    e860:	4604      	mov	r4, r0
    e862:	f000 fdab 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e866:	b140      	cbz	r0, e87a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e868:	20fb      	movs	r0, #251	; 0xfb
    e86a:	8020      	strh	r0, [r4, #0]
    e86c:	f640 0148 	movw	r1, #2120	; 0x848
    e870:	8061      	strh	r1, [r4, #2]
    e872:	80a0      	strh	r0, [r4, #4]
    e874:	80e1      	strh	r1, [r4, #6]
    e876:	2000      	movs	r0, #0
    e878:	bd10      	pop	{r4, pc}
    e87a:	2001      	movs	r0, #1
    e87c:	bd10      	pop	{r4, pc}

0000e87e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e87e:	2108      	movs	r1, #8
    e880:	7001      	strb	r1, [r0, #0]
    e882:	2000      	movs	r0, #0
    e884:	4770      	bx	lr

0000e886 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e886:	b510      	push	{r4, lr}
    e888:	4604      	mov	r4, r0
    e88a:	20d8      	movs	r0, #216	; 0xd8
    e88c:	7020      	strb	r0, [r4, #0]
    e88e:	f000 fd76 	bl	f37e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    e892:	7060      	strb	r0, [r4, #1]
    e894:	2000      	movs	r0, #0
    e896:	bd10      	pop	{r4, pc}

0000e898 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e898:	2108      	movs	r1, #8
    e89a:	7001      	strb	r1, [r0, #0]
    e89c:	2000      	movs	r0, #0
    e89e:	4770      	bx	lr

0000e8a0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e8a0:	b510      	push	{r4, lr}
    e8a2:	4604      	mov	r4, r0
    e8a4:	7800      	ldrb	r0, [r0, #0]
    e8a6:	b108      	cbz	r0, e8ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e8a8:	2801      	cmp	r0, #1
    e8aa:	d110      	bne.n	e8ce <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e8ac:	f000 fd40 	bl	f330 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e8b0:	b120      	cbz	r0, e8bc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e8b2:	f7f6 fefb 	bl	56ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e8b6:	b108      	cbz	r0, e8bc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e8b8:	200c      	movs	r0, #12
    e8ba:	bd10      	pop	{r4, pc}
    e8bc:	7820      	ldrb	r0, [r4, #0]
    e8be:	f7ff fed3 	bl	e668 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e8c2:	1c61      	adds	r1, r4, #1
    e8c4:	f7fe fb72 	bl	cfac <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e8c8:	b108      	cbz	r0, e8ce <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e8ca:	2000      	movs	r0, #0
    e8cc:	bd10      	pop	{r4, pc}
    e8ce:	2012      	movs	r0, #18
    e8d0:	bd10      	pop	{r4, pc}

0000e8d2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e8d2:	b510      	push	{r4, lr}
    e8d4:	4604      	mov	r4, r0
    e8d6:	f000 fe08 	bl	f4ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e8da:	b108      	cbz	r0, e8e0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e8dc:	200c      	movs	r0, #12
    e8de:	bd10      	pop	{r4, pc}
    e8e0:	7820      	ldrb	r0, [r4, #0]
    e8e2:	b108      	cbz	r0, e8e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e8e4:	2801      	cmp	r0, #1
    e8e6:	d107      	bne.n	e8f8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e8e8:	f7ff febe 	bl	e668 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e8ec:	1c61      	adds	r1, r4, #1
    e8ee:	f7fe fb6c 	bl	cfca <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e8f2:	b108      	cbz	r0, e8f8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e8f4:	2000      	movs	r0, #0
    e8f6:	bd10      	pop	{r4, pc}
    e8f8:	2012      	movs	r0, #18
    e8fa:	bd10      	pop	{r4, pc}

0000e8fc <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e8fc:	b510      	push	{r4, lr}
    e8fe:	4604      	mov	r4, r0
    e900:	f000 fd16 	bl	f330 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e904:	b108      	cbz	r0, e90a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e906:	200c      	movs	r0, #12
    e908:	bd10      	pop	{r4, pc}
    e90a:	7820      	ldrb	r0, [r4, #0]
    e90c:	f000 0001 	and.w	r0, r0, #1
    e910:	f7f6 fec6 	bl	56a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e914:	2000      	movs	r0, #0
    e916:	bd10      	pop	{r4, pc}

0000e918 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    e918:	b570      	push	{r4, r5, r6, lr}
    e91a:	b086      	sub	sp, #24
    e91c:	4605      	mov	r5, r0
    e91e:	f000 fd6a 	bl	f3f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e922:	4604      	mov	r4, r0
    e924:	4669      	mov	r1, sp
    e926:	f7ff f99f 	bl	dc68 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    e92a:	b118      	cbz	r0, e934 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x1c>
    e92c:	4669      	mov	r1, sp
    e92e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e930:	f7fe fa81 	bl	ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e934:	2200      	movs	r2, #0
    e936:	a804      	add	r0, sp, #16
    e938:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e93a:	f7f5 fe4d 	bl	45d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e93e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e942:	e9cd 0100 	strd	r0, r1, [sp]
    e946:	b168      	cbz	r0, e964 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    e948:	7829      	ldrb	r1, [r5, #0]
    e94a:	466a      	mov	r2, sp
    e94c:	1c68      	adds	r0, r5, #1
    e94e:	f000 fbf5 	bl	f13c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    e952:	0006      	movs	r6, r0
    e954:	d00c      	beq.n	e970 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>
    e956:	4669      	mov	r1, sp
    e958:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e95a:	f7fe fa6c 	bl	ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e95e:	4630      	mov	r0, r6
    e960:	b006      	add	sp, #24
    e962:	bd70      	pop	{r4, r5, r6, pc}
    e964:	4669      	mov	r1, sp
    e966:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e968:	f7fe fa65 	bl	ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e96c:	2007      	movs	r0, #7
    e96e:	e7f7      	b.n	e960 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>
    e970:	4669      	mov	r1, sp
    e972:	4620      	mov	r0, r4
    e974:	f7ff f98f 	bl	dc96 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e978:	9800      	ldr	r0, [sp, #0]
    e97a:	9003      	str	r0, [sp, #12]
    e97c:	7828      	ldrb	r0, [r5, #0]
    e97e:	f8ad 000a 	strh.w	r0, [sp, #10]
    e982:	2000      	movs	r0, #0
    e984:	f88d 0008 	strb.w	r0, [sp, #8]
    e988:	a802      	add	r0, sp, #8
    e98a:	f000 fa35 	bl	edf8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    e98e:	e7e7      	b.n	e960 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>

0000e990 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e990:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e992:	4605      	mov	r5, r0
    e994:	f000 fd2f 	bl	f3f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e998:	4606      	mov	r6, r0
    e99a:	7828      	ldrb	r0, [r5, #0]
    e99c:	2400      	movs	r4, #0
    e99e:	b160      	cbz	r0, e9ba <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e9a0:	f88d 4000 	strb.w	r4, [sp]
    e9a4:	2001      	movs	r0, #1
    e9a6:	f10d 0101 	add.w	r1, sp, #1
    e9aa:	f7f6 f875 	bl	4a98 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e9ae:	b120      	cbz	r0, e9ba <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e9b0:	4668      	mov	r0, sp
    e9b2:	f000 f894 	bl	eade <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e9b6:	2800      	cmp	r0, #0
    e9b8:	d112      	bne.n	e9e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e9ba:	f88d 400c 	strb.w	r4, [sp, #12]
    e9be:	4630      	mov	r0, r6
    e9c0:	f7ff f930 	bl	dc24 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e9c4:	b118      	cbz	r0, e9ce <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    e9c6:	2080      	movs	r0, #128	; 0x80
    e9c8:	f8ad 000d 	strh.w	r0, [sp, #13]
    e9cc:	e001      	b.n	e9d2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    e9ce:	f8ad 400d 	strh.w	r4, [sp, #13]
    e9d2:	f88d 400f 	strb.w	r4, [sp, #15]
    e9d6:	7828      	ldrb	r0, [r5, #0]
    e9d8:	2801      	cmp	r0, #1
    e9da:	d003      	beq.n	e9e4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    e9dc:	b138      	cbz	r0, e9ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    e9de:	2012      	movs	r0, #18
    e9e0:	b004      	add	sp, #16
    e9e2:	bd70      	pop	{r4, r5, r6, pc}
    e9e4:	a903      	add	r1, sp, #12
    e9e6:	4630      	mov	r0, r6
    e9e8:	f7fb fa9a 	bl	9f20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e9ec:	e7f8      	b.n	e9e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e9ee:	4630      	mov	r0, r6
    e9f0:	f000 fd19 	bl	f426 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    e9f4:	e7f4      	b.n	e9e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000e9f6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e9f6:	b530      	push	{r4, r5, lr}
    e9f8:	b08b      	sub	sp, #44	; 0x2c
    e9fa:	4604      	mov	r4, r0
    e9fc:	f000 fcfb 	bl	f3f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    ea00:	4602      	mov	r2, r0
    ea02:	8860      	ldrh	r0, [r4, #2]
    ea04:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    ea08:	d902      	bls.n	ea10 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    ea0a:	2012      	movs	r0, #18
    ea0c:	b00b      	add	sp, #44	; 0x2c
    ea0e:	bd30      	pop	{r4, r5, pc}
    ea10:	2500      	movs	r5, #0
    ea12:	f88d 5004 	strb.w	r5, [sp, #4]
    ea16:	7921      	ldrb	r1, [r4, #4]
    ea18:	9500      	str	r5, [sp, #0]
    ea1a:	f89d 0000 	ldrb.w	r0, [sp]
    ea1e:	2905      	cmp	r1, #5
    ea20:	f040 0010 	orr.w	r0, r0, #16
    ea24:	f88d 0000 	strb.w	r0, [sp]
    ea28:	d254      	bcs.n	ead4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xde>
    ea2a:	e8df f001 	tbb	[pc, r1]
    ea2e:	0803      	.short	0x0803
    ea30:	000b1105 	.word	0x000b1105
    ea34:	f040 0001 	orr.w	r0, r0, #1
    ea38:	f040 0002 	orr.w	r0, r0, #2
    ea3c:	e006      	b.n	ea4c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    ea3e:	f040 0009 	orr.w	r0, r0, #9
    ea42:	e001      	b.n	ea48 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    ea44:	f040 0001 	orr.w	r0, r0, #1
    ea48:	f040 0004 	orr.w	r0, r0, #4
    ea4c:	f88d 0000 	strb.w	r0, [sp]
    ea50:	f8bd 0000 	ldrh.w	r0, [sp]
    ea54:	9000      	str	r0, [sp, #0]
    ea56:	f8bd 0000 	ldrh.w	r0, [sp]
    ea5a:	f8ad 0005 	strh.w	r0, [sp, #5]
    ea5e:	8821      	ldrh	r1, [r4, #0]
    ea60:	f8dd 0006 	ldr.w	r0, [sp, #6]
    ea64:	f361 201f 	bfi	r0, r1, #8, #24
    ea68:	f8cd 0006 	str.w	r0, [sp, #6]
    ea6c:	8861      	ldrh	r1, [r4, #2]
    ea6e:	f8dd 0009 	ldr.w	r0, [sp, #9]
    ea72:	f361 201f 	bfi	r0, r1, #8, #24
    ea76:	f8cd 0009 	str.w	r0, [sp, #9]
    ea7a:	7b60      	ldrb	r0, [r4, #13]
    ea7c:	f88d 000d 	strb.w	r0, [sp, #13]
    ea80:	7960      	ldrb	r0, [r4, #5]
    ea82:	f88d 000e 	strb.w	r0, [sp, #14]
    ea86:	79a0      	ldrb	r0, [r4, #6]
    ea88:	f88d 000f 	strb.w	r0, [sp, #15]
    ea8c:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ea90:	9004      	str	r0, [sp, #16]
    ea92:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ea96:	f8ad 0014 	strh.w	r0, [sp, #20]
    ea9a:	7ba0      	ldrb	r0, [r4, #14]
    ea9c:	f88d 0016 	strb.w	r0, [sp, #22]
    eaa0:	207f      	movs	r0, #127	; 0x7f
    eaa2:	f88d 0017 	strb.w	r0, [sp, #23]
    eaa6:	2001      	movs	r0, #1
    eaa8:	f88d 0018 	strb.w	r0, [sp, #24]
    eaac:	f88d 5019 	strb.w	r5, [sp, #25]
    eab0:	f88d 001a 	strb.w	r0, [sp, #26]
    eab4:	f88d 501b 	strb.w	r5, [sp, #27]
    eab8:	4610      	mov	r0, r2
    eaba:	f7ff f8cf 	bl	dc5c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    eabe:	f88d 001c 	strb.w	r0, [sp, #28]
    eac2:	f88d 501d 	strb.w	r5, [sp, #29]
    eac6:	f88d 501e 	strb.w	r5, [sp, #30]
    eaca:	a909      	add	r1, sp, #36	; 0x24
    eacc:	a801      	add	r0, sp, #4
    eace:	f000 f8ff 	bl	ecd0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ead2:	e79b      	b.n	ea0c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    ead4:	f241 01a9 	movw	r1, #4265	; 0x10a9
    ead8:	2039      	movs	r0, #57	; 0x39
    eada:	f7f5 f91b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eade <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    eade:	b570      	push	{r4, r5, r6, lr}
    eae0:	4604      	mov	r4, r0
    eae2:	7800      	ldrb	r0, [r0, #0]
    eae4:	2101      	movs	r1, #1
    eae6:	f7fe f960 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eaea:	0005      	movs	r5, r0
    eaec:	d007      	beq.n	eafe <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    eaee:	f7ff faaa 	bl	e046 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eaf2:	b160      	cbz	r0, eb0e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    eaf4:	4628      	mov	r0, r5
    eaf6:	f7ff f89b 	bl	dc30 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eafa:	b110      	cbz	r0, eb02 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    eafc:	e005      	b.n	eb0a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    eafe:	2042      	movs	r0, #66	; 0x42
    eb00:	bd70      	pop	{r4, r5, r6, pc}
    eb02:	4628      	mov	r0, r5
    eb04:	f7ff f88a 	bl	dc1c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eb08:	b108      	cbz	r0, eb0e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    eb0a:	200c      	movs	r0, #12
    eb0c:	bd70      	pop	{r4, r5, r6, pc}
    eb0e:	1c61      	adds	r1, r4, #1
    eb10:	4628      	mov	r0, r5
    eb12:	f7ff f89b 	bl	dc4c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    eb16:	2000      	movs	r0, #0
    eb18:	bd70      	pop	{r4, r5, r6, pc}

0000eb1a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    eb1a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eb1c:	460d      	mov	r5, r1
    eb1e:	4604      	mov	r4, r0
    eb20:	f000 fc4c 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    eb24:	b130      	cbz	r0, eb34 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    eb26:	88a2      	ldrh	r2, [r4, #4]
    eb28:	f244 2090 	movw	r0, #17040	; 0x4290
    eb2c:	4282      	cmp	r2, r0
    eb2e:	d903      	bls.n	eb38 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    eb30:	2012      	movs	r0, #18
    eb32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eb34:	2001      	movs	r0, #1
    eb36:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eb38:	f640 0048 	movw	r0, #2120	; 0x848
    eb3c:	4282      	cmp	r2, r0
    eb3e:	d300      	bcc.n	eb42 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    eb40:	4602      	mov	r2, r0
    eb42:	8820      	ldrh	r0, [r4, #0]
    eb44:	f8ad 0000 	strh.w	r0, [sp]
    eb48:	8860      	ldrh	r0, [r4, #2]
    eb4a:	f8ad 0002 	strh.w	r0, [sp, #2]
    eb4e:	f8ad 2004 	strh.w	r2, [sp, #4]
    eb52:	8860      	ldrh	r0, [r4, #2]
    eb54:	f8ad 0006 	strh.w	r0, [sp, #6]
    eb58:	f8ad 2008 	strh.w	r2, [sp, #8]
    eb5c:	8820      	ldrh	r0, [r4, #0]
    eb5e:	8028      	strh	r0, [r5, #0]
    eb60:	4668      	mov	r0, sp
    eb62:	f7fb faab 	bl	a0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    eb66:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eb68 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    eb68:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eb6a:	4604      	mov	r4, r0
    eb6c:	f7fb fbf6 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eb70:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eb74:	b1b0      	cbz	r0, eba4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    eb76:	f10d 0007 	add.w	r0, sp, #7
    eb7a:	9000      	str	r0, [sp, #0]
    eb7c:	7922      	ldrb	r2, [r4, #4]
    eb7e:	78e1      	ldrb	r1, [r4, #3]
    eb80:	78a0      	ldrb	r0, [r4, #2]
    eb82:	f10d 0306 	add.w	r3, sp, #6
    eb86:	f000 fc74 	bl	f472 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    eb8a:	2800      	cmp	r0, #0
    eb8c:	d109      	bne.n	eba2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    eb8e:	8820      	ldrh	r0, [r4, #0]
    eb90:	f8ad 0004 	strh.w	r0, [sp, #4]
    eb94:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    eb98:	f8ad 0008 	strh.w	r0, [sp, #8]
    eb9c:	a801      	add	r0, sp, #4
    eb9e:	f000 f97c 	bl	ee9a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    eba2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eba4:	2001      	movs	r0, #1
    eba6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eba8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    eba8:	b510      	push	{r4, lr}
    ebaa:	4604      	mov	r4, r0
    ebac:	f000 fbc0 	bl	f330 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    ebb0:	b120      	cbz	r0, ebbc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ebb2:	f7f6 fd7b 	bl	56ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ebb6:	b108      	cbz	r0, ebbc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ebb8:	200c      	movs	r0, #12
    ebba:	bd10      	pop	{r4, pc}
    ebbc:	7820      	ldrb	r0, [r4, #0]
    ebbe:	f7ff fd53 	bl	e668 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ebc2:	79e2      	ldrb	r2, [r4, #7]
    ebc4:	1c61      	adds	r1, r4, #1
    ebc6:	f7f6 fd1f 	bl	5608 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ebca:	b108      	cbz	r0, ebd0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ebcc:	2000      	movs	r0, #0
    ebce:	bd10      	pop	{r4, pc}
    ebd0:	2002      	movs	r0, #2
    ebd2:	bd10      	pop	{r4, pc}

0000ebd4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ebd4:	b510      	push	{r4, lr}
    ebd6:	4604      	mov	r4, r0
    ebd8:	2001      	movs	r0, #1
    ebda:	f000 fa9d 	bl	f118 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ebde:	b128      	cbz	r0, ebec <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ebe0:	4621      	mov	r1, r4
    ebe2:	2001      	movs	r0, #1
    ebe4:	f7f5 ff70 	bl	4ac8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ebe8:	2000      	movs	r0, #0
    ebea:	bd10      	pop	{r4, pc}
    ebec:	200c      	movs	r0, #12
    ebee:	bd10      	pop	{r4, pc}

0000ebf0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ebf0:	b510      	push	{r4, lr}
    ebf2:	8800      	ldrh	r0, [r0, #0]
    ebf4:	f7f6 fde8 	bl	57c8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ebf8:	b108      	cbz	r0, ebfe <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ebfa:	2000      	movs	r0, #0
    ebfc:	bd10      	pop	{r4, pc}
    ebfe:	2030      	movs	r0, #48	; 0x30
    ec00:	bd10      	pop	{r4, pc}

0000ec02 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ec02:	b530      	push	{r4, r5, lr}
    ec04:	b087      	sub	sp, #28
    ec06:	4605      	mov	r5, r0
    ec08:	f000 fbf5 	bl	f3f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    ec0c:	4604      	mov	r4, r0
    ec0e:	4669      	mov	r1, sp
    ec10:	f7ff f849 	bl	dca6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    ec14:	b118      	cbz	r0, ec1e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x1c>
    ec16:	4669      	mov	r1, sp
    ec18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec1a:	f7fe f90c 	bl	ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ec1e:	2200      	movs	r2, #0
    ec20:	a805      	add	r0, sp, #20
    ec22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ec24:	f7f5 fcd8 	bl	45d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ec28:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    ec2c:	e9cd 0100 	strd	r0, r1, [sp]
    ec30:	7829      	ldrb	r1, [r5, #0]
    ec32:	466a      	mov	r2, sp
    ec34:	1c68      	adds	r0, r5, #1
    ec36:	f000 fa81 	bl	f13c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    ec3a:	0005      	movs	r5, r0
    ec3c:	d006      	beq.n	ec4c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4a>
    ec3e:	4669      	mov	r1, sp
    ec40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec42:	f7fe f8f8 	bl	ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ec46:	4628      	mov	r0, r5
    ec48:	b007      	add	sp, #28
    ec4a:	bd30      	pop	{r4, r5, pc}
    ec4c:	4669      	mov	r1, sp
    ec4e:	4620      	mov	r0, r4
    ec50:	f7ff f840 	bl	dcd4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    ec54:	2000      	movs	r0, #0
    ec56:	f88d 000c 	strb.w	r0, [sp, #12]
    ec5a:	9800      	ldr	r0, [sp, #0]
    ec5c:	9004      	str	r0, [sp, #16]
    ec5e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ec62:	f8ad 000e 	strh.w	r0, [sp, #14]
    ec66:	a803      	add	r0, sp, #12
    ec68:	f000 f8ef 	bl	ee4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ec6c:	e7ec      	b.n	ec48 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x46>

0000ec6e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ec6e:	b51c      	push	{r2, r3, r4, lr}
    ec70:	4604      	mov	r4, r0
    ec72:	f000 fba3 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    ec76:	b178      	cbz	r0, ec98 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    ec78:	8820      	ldrh	r0, [r4, #0]
    ec7a:	f8ad 0000 	strh.w	r0, [sp]
    ec7e:	8860      	ldrh	r0, [r4, #2]
    ec80:	f8ad 0002 	strh.w	r0, [sp, #2]
    ec84:	8820      	ldrh	r0, [r4, #0]
    ec86:	f8ad 0004 	strh.w	r0, [sp, #4]
    ec8a:	8860      	ldrh	r0, [r4, #2]
    ec8c:	f8ad 0006 	strh.w	r0, [sp, #6]
    ec90:	4668      	mov	r0, sp
    ec92:	f7fb fa97 	bl	a1c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    ec96:	bd1c      	pop	{r2, r3, r4, pc}
    ec98:	2001      	movs	r0, #1
    ec9a:	bd1c      	pop	{r2, r3, r4, pc}

0000ec9c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ec9c:	b510      	push	{r4, lr}
    ec9e:	f7f5 ff37 	bl	4b10 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    eca2:	2000      	movs	r0, #0
    eca4:	bd10      	pop	{r4, pc}

0000eca6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    eca6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eca8:	460c      	mov	r4, r1
    ecaa:	4605      	mov	r5, r0
    ecac:	f000 fb86 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    ecb0:	b160      	cbz	r0, eccc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    ecb2:	4669      	mov	r1, sp
    ecb4:	4628      	mov	r0, r5
    ecb6:	f7fe f9b1 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ecba:	2800      	cmp	r0, #0
    ecbc:	d105      	bne.n	ecca <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    ecbe:	2100      	movs	r1, #0
    ecc0:	4622      	mov	r2, r4
    ecc2:	9801      	ldr	r0, [sp, #4]
    ecc4:	f000 fafe 	bl	f2c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    ecc8:	2000      	movs	r0, #0
    ecca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eccc:	2001      	movs	r0, #1
    ecce:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ecd0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    ecd0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ecd4:	460f      	mov	r7, r1
    ecd6:	4605      	mov	r5, r0
    ecd8:	7806      	ldrb	r6, [r0, #0]
    ecda:	f000 fa7f 	bl	f1dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    ecde:	2800      	cmp	r0, #0
    ece0:	d10a      	bne.n	ecf8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ece2:	4628      	mov	r0, r5
    ece4:	f000 fa5e 	bl	f1a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    ece8:	2800      	cmp	r0, #0
    ecea:	d105      	bne.n	ecf8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ecec:	2001      	movs	r0, #1
    ecee:	f7f5 fa17 	bl	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ecf2:	4286      	cmp	r6, r0
    ecf4:	d302      	bcc.n	ecfc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    ecf6:	2007      	movs	r0, #7
    ecf8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ecfc:	2101      	movs	r1, #1
    ecfe:	4630      	mov	r0, r6
    ed00:	f7fe f853 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed04:	0004      	movs	r4, r0
    ed06:	d004      	beq.n	ed12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    ed08:	f7ff f99d 	bl	e046 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ed0c:	b158      	cbz	r0, ed26 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    ed0e:	200c      	movs	r0, #12
    ed10:	e7f2      	b.n	ecf8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ed12:	2200      	movs	r2, #0
    ed14:	2101      	movs	r1, #1
    ed16:	4630      	mov	r0, r6
    ed18:	f7fe f82b 	bl	cd72 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    ed1c:	0004      	movs	r4, r0
    ed1e:	d010      	beq.n	ed42 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    ed20:	4631      	mov	r1, r6
    ed22:	f7fe ff29 	bl	db78 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    ed26:	4620      	mov	r0, r4
    ed28:	f7fe ff86 	bl	dc38 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    ed2c:	7038      	strb	r0, [r7, #0]
    ed2e:	74e8      	strb	r0, [r5, #19]
    ed30:	4629      	mov	r1, r5
    ed32:	4620      	mov	r0, r4
    ed34:	f7f7 faec 	bl	6310 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    ed38:	4606      	mov	r6, r0
    ed3a:	7e68      	ldrb	r0, [r5, #25]
    ed3c:	b360      	cbz	r0, ed98 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    ed3e:	b12e      	cbz	r6, ed4c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    ed40:	e02a      	b.n	ed98 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    ed42:	f241 212b 	movw	r1, #4651	; 0x122b
    ed46:	2039      	movs	r0, #57	; 0x39
    ed48:	f7f4 ffe4 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed4c:	4669      	mov	r1, sp
    ed4e:	4620      	mov	r0, r4
    ed50:	f7fe ff8a 	bl	dc68 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    ed54:	b118      	cbz	r0, ed5e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8e>
    ed56:	4669      	mov	r1, sp
    ed58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed5a:	f7fe f86c 	bl	ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ed5e:	4669      	mov	r1, sp
    ed60:	4620      	mov	r0, r4
    ed62:	f7fe ffa0 	bl	dca6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    ed66:	b118      	cbz	r0, ed70 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    ed68:	4669      	mov	r1, sp
    ed6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed6c:	f7fe f863 	bl	ce36 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ed70:	2000      	movs	r0, #0
    ed72:	f8ad 0004 	strh.w	r0, [sp, #4]
    ed76:	9000      	str	r0, [sp, #0]
    ed78:	f8ad 0006 	strh.w	r0, [sp, #6]
    ed7c:	4669      	mov	r1, sp
    ed7e:	4620      	mov	r0, r4
    ed80:	f7fe ff89 	bl	dc96 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    ed84:	4669      	mov	r1, sp
    ed86:	4620      	mov	r0, r4
    ed88:	f7fe ffa4 	bl	dcd4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    ed8c:	4620      	mov	r0, r4
    ed8e:	f7fe ff79 	bl	dc84 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    ed92:	4620      	mov	r0, r4
    ed94:	f7fe ff95 	bl	dcc2 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    ed98:	4630      	mov	r0, r6
    ed9a:	e7ad      	b.n	ecf8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000ed9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ed9c:	b510      	push	{r4, lr}
    ed9e:	4604      	mov	r4, r0
    eda0:	2000      	movs	r0, #0
    eda2:	f000 f9b9 	bl	f118 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    eda6:	b128      	cbz	r0, edb4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    eda8:	4621      	mov	r1, r4
    edaa:	2000      	movs	r0, #0
    edac:	f7f5 fe8c 	bl	4ac8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    edb0:	2000      	movs	r0, #0
    edb2:	bd10      	pop	{r4, pc}
    edb4:	200c      	movs	r0, #12
    edb6:	bd10      	pop	{r4, pc}

0000edb8 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    edb8:	b510      	push	{r4, lr}
    edba:	4604      	mov	r4, r0
    edbc:	f7ff f95d 	bl	e07a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    edc0:	b120      	cbz	r0, edcc <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    edc2:	7820      	ldrb	r0, [r4, #0]
    edc4:	f7f8 f9b0 	bl	7128 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    edc8:	2000      	movs	r0, #0
    edca:	bd10      	pop	{r4, pc}
    edcc:	200c      	movs	r0, #12
    edce:	bd10      	pop	{r4, pc}

0000edd0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    edd0:	b510      	push	{r4, lr}
    edd2:	7800      	ldrb	r0, [r0, #0]
    edd4:	f000 0001 	and.w	r0, r0, #1
    edd8:	f7f8 f9ac 	bl	7134 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    eddc:	2000      	movs	r0, #0
    edde:	bd10      	pop	{r4, pc}

0000ede0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ede0:	b510      	push	{r4, lr}
    ede2:	4604      	mov	r4, r0
    ede4:	f000 faea 	bl	f3bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    ede8:	b120      	cbz	r0, edf4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    edea:	4620      	mov	r0, r4
    edec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edf0:	f7fb b964 	b.w	a0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    edf4:	2001      	movs	r0, #1
    edf6:	bd10      	pop	{r4, pc}

0000edf8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    edf8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    edfa:	4605      	mov	r5, r0
    edfc:	7800      	ldrb	r0, [r0, #0]
    edfe:	2101      	movs	r1, #1
    ee00:	f7fd ffd3 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee04:	0006      	movs	r6, r0
    ee06:	d01e      	beq.n	ee46 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4e>
    ee08:	2201      	movs	r2, #1
    ee0a:	8869      	ldrh	r1, [r5, #2]
    ee0c:	f000 f9ab 	bl	f166 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    ee10:	2800      	cmp	r0, #0
    ee12:	d117      	bne.n	ee44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4c>
    ee14:	4630      	mov	r0, r6
    ee16:	f7fe fece 	bl	dbb6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ee1a:	4604      	mov	r4, r0
    ee1c:	8868      	ldrh	r0, [r5, #2]
    ee1e:	42a0      	cmp	r0, r4
    ee20:	d800      	bhi.n	ee24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    ee22:	4604      	mov	r4, r0
    ee24:	4669      	mov	r1, sp
    ee26:	4630      	mov	r0, r6
    ee28:	f7fe ff30 	bl	dc8c <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>
    ee2c:	6868      	ldr	r0, [r5, #4]
    ee2e:	9000      	str	r0, [sp, #0]
    ee30:	f8ad 4004 	strh.w	r4, [sp, #4]
    ee34:	4669      	mov	r1, sp
    ee36:	4630      	mov	r0, r6
    ee38:	f7fe ff2d 	bl	dc96 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    ee3c:	4630      	mov	r0, r6
    ee3e:	f7fe ff21 	bl	dc84 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    ee42:	2000      	movs	r0, #0
    ee44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee46:	2042      	movs	r0, #66	; 0x42
    ee48:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ee4a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ee4c:	4604      	mov	r4, r0
    ee4e:	7800      	ldrb	r0, [r0, #0]
    ee50:	2101      	movs	r1, #1
    ee52:	f7fd ffaa 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee56:	0005      	movs	r5, r0
    ee58:	d00b      	beq.n	ee72 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    ee5a:	2201      	movs	r2, #1
    ee5c:	8861      	ldrh	r1, [r4, #2]
    ee5e:	f000 f982 	bl	f166 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    ee62:	2800      	cmp	r0, #0
    ee64:	d106      	bne.n	ee74 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    ee66:	8866      	ldrh	r6, [r4, #2]
    ee68:	4628      	mov	r0, r5
    ee6a:	f7fe fee1 	bl	dc30 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ee6e:	b110      	cbz	r0, ee76 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    ee70:	e002      	b.n	ee78 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    ee72:	2042      	movs	r0, #66	; 0x42
    ee74:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee76:	2600      	movs	r6, #0
    ee78:	4669      	mov	r1, sp
    ee7a:	4628      	mov	r0, r5
    ee7c:	f7fe ff25 	bl	dcca <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>
    ee80:	6860      	ldr	r0, [r4, #4]
    ee82:	9000      	str	r0, [sp, #0]
    ee84:	f8ad 6004 	strh.w	r6, [sp, #4]
    ee88:	4669      	mov	r1, sp
    ee8a:	4628      	mov	r0, r5
    ee8c:	f7fe ff22 	bl	dcd4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    ee90:	4628      	mov	r0, r5
    ee92:	f7fe ff16 	bl	dcc2 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    ee96:	2000      	movs	r0, #0
    ee98:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee9a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ee9a:	b510      	push	{r4, lr}
    ee9c:	4604      	mov	r4, r0
    ee9e:	8880      	ldrh	r0, [r0, #4]
    eea0:	b128      	cbz	r0, eeae <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eea2:	2801      	cmp	r0, #1
    eea4:	d003      	beq.n	eeae <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eea6:	2802      	cmp	r0, #2
    eea8:	d001      	beq.n	eeae <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    eeaa:	2012      	movs	r0, #18
    eeac:	bd10      	pop	{r4, pc}
    eeae:	78e0      	ldrb	r0, [r4, #3]
    eeb0:	f000 f9e5 	bl	f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    eeb4:	b148      	cbz	r0, eeca <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eeb6:	78a0      	ldrb	r0, [r4, #2]
    eeb8:	f000 f9e1 	bl	f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    eebc:	b128      	cbz	r0, eeca <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eebe:	4620      	mov	r0, r4
    eec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eec4:	2101      	movs	r1, #1
    eec6:	f000 b883 	b.w	efd0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    eeca:	2011      	movs	r0, #17
    eecc:	bd10      	pop	{r4, pc}

0000eece <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    eece:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eed0:	460c      	mov	r4, r1
    eed2:	4605      	mov	r5, r0
    eed4:	8800      	ldrh	r0, [r0, #0]
    eed6:	4669      	mov	r1, sp
    eed8:	f7fe f8a0 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eedc:	2800      	cmp	r0, #0
    eede:	d106      	bne.n	eeee <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    eee0:	9801      	ldr	r0, [sp, #4]
    eee2:	8829      	ldrh	r1, [r5, #0]
    eee4:	8021      	strh	r1, [r4, #0]
    eee6:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    eeea:	8060      	strh	r0, [r4, #2]
    eeec:	2000      	movs	r0, #0
    eeee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eef0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    eef0:	b510      	push	{r4, lr}
    eef2:	4604      	mov	r4, r0
    eef4:	4601      	mov	r1, r0
    eef6:	2000      	movs	r0, #0
    eef8:	f7f5 fdce 	bl	4a98 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    eefc:	b910      	cbnz	r0, ef04 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    eefe:	2000      	movs	r0, #0
    ef00:	6020      	str	r0, [r4, #0]
    ef02:	80a0      	strh	r0, [r4, #4]
    ef04:	2000      	movs	r0, #0
    ef06:	bd10      	pop	{r4, pc}

0000ef08 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ef08:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef0a:	8800      	ldrh	r0, [r0, #0]
    ef0c:	4669      	mov	r1, sp
    ef0e:	f7fe f885 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef12:	b958      	cbnz	r0, ef2c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef14:	4668      	mov	r0, sp
    ef16:	f000 fa57 	bl	f3c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    ef1a:	b138      	cbz	r0, ef2c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef1c:	9c01      	ldr	r4, [sp, #4]
    ef1e:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    ef22:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    ef26:	3468      	adds	r4, #104	; 0x68
    ef28:	b929      	cbnz	r1, ef36 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    ef2a:	e001      	b.n	ef30 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef2c:	2002      	movs	r0, #2
    ef2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ef34:	b109      	cbz	r1, ef3a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ef36:	203a      	movs	r0, #58	; 0x3a
    ef38:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef3a:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    ef3e:	f04f 0501 	mov.w	r5, #1
    ef42:	0789      	lsls	r1, r1, #30
    ef44:	d103      	bne.n	ef4e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    ef46:	7005      	strb	r5, [r0, #0]
    ef48:	4668      	mov	r0, sp
    ef4a:	f7fe fc20 	bl	d78e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ef4e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    ef52:	2000      	movs	r0, #0
    ef54:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef56 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ef56:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef58:	460c      	mov	r4, r1
    ef5a:	4605      	mov	r5, r0
    ef5c:	8800      	ldrh	r0, [r0, #0]
    ef5e:	4669      	mov	r1, sp
    ef60:	f7fe f85c 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef64:	b108      	cbz	r0, ef6a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ef66:	2002      	movs	r0, #2
    ef68:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef6a:	78a8      	ldrb	r0, [r5, #2]
    ef6c:	b130      	cbz	r0, ef7c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ef6e:	f000 fa06 	bl	f37e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    ef72:	70a0      	strb	r0, [r4, #2]
    ef74:	8828      	ldrh	r0, [r5, #0]
    ef76:	8020      	strh	r0, [r4, #0]
    ef78:	2000      	movs	r0, #0
    ef7a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef7c:	9801      	ldr	r0, [sp, #4]
    ef7e:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    ef82:	e7f6      	b.n	ef72 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ef84 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ef84:	b510      	push	{r4, lr}
    ef86:	f7fb f957 	bl	a238 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ef8a:	2000      	movs	r0, #0
    ef8c:	bd10      	pop	{r4, pc}

0000ef8e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    ef8e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ef92:	4604      	mov	r4, r0
    ef94:	8840      	ldrh	r0, [r0, #2]
    ef96:	460d      	mov	r5, r1
    ef98:	b1b0      	cbz	r0, efc8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    ef9a:	8820      	ldrh	r0, [r4, #0]
    ef9c:	4669      	mov	r1, sp
    ef9e:	f7fe f83d 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efa2:	2800      	cmp	r0, #0
    efa4:	d10e      	bne.n	efc4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    efa6:	8820      	ldrh	r0, [r4, #0]
    efa8:	8028      	strh	r0, [r5, #0]
    efaa:	9e01      	ldr	r6, [sp, #4]
    efac:	1d35      	adds	r5, r6, #4
    efae:	3668      	adds	r6, #104	; 0x68
    efb0:	682f      	ldr	r7, [r5, #0]
    efb2:	8862      	ldrh	r2, [r4, #2]
    efb4:	4639      	mov	r1, r7
    efb6:	4630      	mov	r0, r6
    efb8:	f7fe f970 	bl	d29c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    efbc:	6828      	ldr	r0, [r5, #0]
    efbe:	42b8      	cmp	r0, r7
    efc0:	d1f6      	bne.n	efb0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    efc2:	2000      	movs	r0, #0
    efc4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    efc8:	2012      	movs	r0, #18
    efca:	e7fb      	b.n	efc4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000efcc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    efcc:	f7fa bef4 	b.w	9db8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000efd0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    efd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efd4:	b086      	sub	sp, #24
    efd6:	468a      	mov	sl, r1
    efd8:	4606      	mov	r6, r0
    efda:	8800      	ldrh	r0, [r0, #0]
    efdc:	a901      	add	r1, sp, #4
    efde:	f7fe f81d 	bl	d01c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efe2:	2800      	cmp	r0, #0
    efe4:	d138      	bne.n	f058 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    efe6:	9802      	ldr	r0, [sp, #8]
    efe8:	f04f 0800 	mov.w	r8, #0
    efec:	4601      	mov	r1, r0
    efee:	4689      	mov	r9, r1
    eff0:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    eff4:	f88d 1000 	strb.w	r1, [sp]
    eff8:	9900      	ldr	r1, [sp, #0]
    effa:	9100      	str	r1, [sp, #0]
    effc:	f89d 5000 	ldrb.w	r5, [sp]
    f000:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    f004:	3068      	adds	r0, #104	; 0x68
    f006:	2921      	cmp	r1, #33	; 0x21
    f008:	d100      	bne.n	f00c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f00a:	b13d      	cbz	r5, f01c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f00c:	2400      	movs	r4, #0
    f00e:	304c      	adds	r0, #76	; 0x4c
    f010:	2108      	movs	r1, #8
    f012:	4607      	mov	r7, r0
    f014:	f7ff fb1e 	bl	e654 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f018:	b110      	cbz	r0, f020 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f01a:	e007      	b.n	f02c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f01c:	2401      	movs	r4, #1
    f01e:	e7f6      	b.n	f00e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f020:	210b      	movs	r1, #11
    f022:	4638      	mov	r0, r7
    f024:	f7ff fb16 	bl	e654 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f028:	b900      	cbnz	r0, f02c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f02a:	b1a4      	cbz	r4, f056 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f02c:	a804      	add	r0, sp, #16
    f02e:	9000      	str	r0, [sp, #0]
    f030:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f034:	ab03      	add	r3, sp, #12
    f036:	4632      	mov	r2, r6
    f038:	4649      	mov	r1, r9
    f03a:	f000 f980 	bl	f33e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    f03e:	0007      	movs	r7, r0
    f040:	d10a      	bne.n	f058 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f042:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f046:	9c02      	ldr	r4, [sp, #8]
    f048:	b148      	cbz	r0, f05e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f04a:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    f04e:	2001      	movs	r0, #1
    f050:	7060      	strb	r0, [r4, #1]
    f052:	b94d      	cbnz	r5, f068 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f054:	e006      	b.n	f064 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f056:	201a      	movs	r0, #26
    f058:	b006      	add	sp, #24
    f05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f05e:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    f062:	e7f4      	b.n	f04e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f064:	7820      	ldrb	r0, [r4, #0]
    f066:	b108      	cbz	r0, f06c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f068:	273a      	movs	r7, #58	; 0x3a
    f06a:	e012      	b.n	f092 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f06c:	f884 a000 	strb.w	sl, [r4]
    f070:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f074:	70a0      	strb	r0, [r4, #2]
    f076:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f07a:	70e1      	strb	r1, [r4, #3]
    f07c:	f88d 0000 	strb.w	r0, [sp]
    f080:	f88d 1001 	strb.w	r1, [sp, #1]
    f084:	88b0      	ldrh	r0, [r6, #4]
    f086:	f8ad 0002 	strh.w	r0, [sp, #2]
    f08a:	4669      	mov	r1, sp
    f08c:	4648      	mov	r0, r9
    f08e:	f7fe f884 	bl	d19a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f092:	f884 8001 	strb.w	r8, [r4, #1]
    f096:	4638      	mov	r0, r7
    f098:	e7de      	b.n	f058 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f09a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f09a:	b510      	push	{r4, lr}
    f09c:	2008      	movs	r0, #8
    f09e:	f7fb f953 	bl	a348 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0a6:	f7f8 bef7 	b.w	7e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f0aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f0ae:	4288      	cmp	r0, r1
    f0b0:	d303      	bcc.n	f0ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f0b2:	f640 0148 	movw	r1, #2120	; 0x848
    f0b6:	4288      	cmp	r0, r1
    f0b8:	d300      	bcc.n	f0bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f0ba:	4608      	mov	r0, r1
    f0bc:	4770      	bx	lr
    f0be:	07c1      	lsls	r1, r0, #31
    f0c0:	d001      	beq.n	f0c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f0c2:	2001      	movs	r0, #1
    f0c4:	4770      	bx	lr
    f0c6:	0780      	lsls	r0, r0, #30
    f0c8:	d501      	bpl.n	f0ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f0ca:	2002      	movs	r0, #2
    f0cc:	4770      	bx	lr
    f0ce:	2000      	movs	r0, #0
    f0d0:	4770      	bx	lr
    f0d2:	b510      	push	{r4, lr}
    f0d4:	2801      	cmp	r0, #1
    f0d6:	d006      	beq.n	f0e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f0d8:	2802      	cmp	r0, #2
    f0da:	d004      	beq.n	f0e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f0dc:	f240 2173 	movw	r1, #627	; 0x273
    f0e0:	2006      	movs	r0, #6
    f0e2:	f7f4 fe17 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0e6:	bd10      	pop	{r4, pc}
    f0e8:	b50e      	push	{r1, r2, r3, lr}
    f0ea:	4669      	mov	r1, sp
    f0ec:	2001      	movs	r0, #1
    f0ee:	f7fd fe66 	bl	cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f0f2:	b150      	cbz	r0, f10a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f0f4:	f240 1131 	movw	r1, #305	; 0x131
    f0f8:	2039      	movs	r0, #57	; 0x39
    f0fa:	f7f4 fe0b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0fe:	9802      	ldr	r0, [sp, #8]
    f100:	f7fe ffa1 	bl	e046 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f104:	b108      	cbz	r0, f10a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f106:	2001      	movs	r0, #1
    f108:	bd0e      	pop	{r1, r2, r3, pc}
    f10a:	4668      	mov	r0, sp
    f10c:	f7f5 f854 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f110:	2800      	cmp	r0, #0
    f112:	d0f4      	beq.n	f0fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f114:	2000      	movs	r0, #0
    f116:	bd0e      	pop	{r1, r2, r3, pc}
    f118:	b510      	push	{r4, lr}
    f11a:	f7ff ffe5 	bl	f0e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f11e:	b158      	cbz	r0, f138 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f120:	f000 f969 	bl	f3f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f124:	4604      	mov	r4, r0
    f126:	f7fe fd83 	bl	dc30 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f12a:	b918      	cbnz	r0, f134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f12c:	4620      	mov	r0, r4
    f12e:	f7fe fd75 	bl	dc1c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f132:	b108      	cbz	r0, f138 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f134:	2000      	movs	r0, #0
    f136:	bd10      	pop	{r4, pc}
    f138:	2001      	movs	r0, #1
    f13a:	bd10      	pop	{r4, pc}
    f13c:	b570      	push	{r4, r5, r6, lr}
    f13e:	460d      	mov	r5, r1
    f140:	4614      	mov	r4, r2
    f142:	4601      	mov	r1, r0
    f144:	8890      	ldrh	r0, [r2, #4]
    f146:	88e3      	ldrh	r3, [r4, #6]
    f148:	1942      	adds	r2, r0, r5
    f14a:	429a      	cmp	r2, r3
    f14c:	d901      	bls.n	f152 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    f14e:	2007      	movs	r0, #7
    f150:	bd70      	pop	{r4, r5, r6, pc}
    f152:	6822      	ldr	r2, [r4, #0]
    f154:	4410      	add	r0, r2
    f156:	462a      	mov	r2, r5
    f158:	f7fc fe12 	bl	bd80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f15c:	88a0      	ldrh	r0, [r4, #4]
    f15e:	4428      	add	r0, r5
    f160:	80a0      	strh	r0, [r4, #4]
    f162:	2000      	movs	r0, #0
    f164:	bd70      	pop	{r4, r5, r6, pc}
    f166:	b570      	push	{r4, r5, r6, lr}
    f168:	460c      	mov	r4, r1
    f16a:	4605      	mov	r5, r0
    f16c:	b112      	cbz	r2, f174 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xda>
    f16e:	291f      	cmp	r1, #31
    f170:	d807      	bhi.n	f182 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f172:	e011      	b.n	f198 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f174:	2cff      	cmp	r4, #255	; 0xff
    f176:	d804      	bhi.n	f182 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f178:	f7fe fd58 	bl	dc2c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f17c:	b118      	cbz	r0, f186 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f17e:	2c1f      	cmp	r4, #31
    f180:	d901      	bls.n	f186 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f182:	2012      	movs	r0, #18
    f184:	bd70      	pop	{r4, r5, r6, pc}
    f186:	4628      	mov	r0, r5
    f188:	f7fe fd59 	bl	dc3e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f18c:	b130      	cbz	r0, f19c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x102>
    f18e:	4621      	mov	r1, r4
    f190:	4628      	mov	r0, r5
    f192:	f7fe fd1c 	bl	dbce <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f196:	b118      	cbz	r0, f1a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x106>
    f198:	2000      	movs	r0, #0
    f19a:	bd70      	pop	{r4, r5, r6, pc}
    f19c:	2042      	movs	r0, #66	; 0x42
    f19e:	bd70      	pop	{r4, r5, r6, pc}
    f1a0:	2045      	movs	r0, #69	; 0x45
    f1a2:	bd70      	pop	{r4, r5, r6, pc}
    f1a4:	b510      	push	{r4, lr}
    f1a6:	4604      	mov	r4, r0
    f1a8:	7840      	ldrb	r0, [r0, #1]
    f1aa:	06c1      	lsls	r1, r0, #27
    f1ac:	d512      	bpl.n	f1d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f1ae:	07c0      	lsls	r0, r0, #31
    f1b0:	d00b      	beq.n	f1ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f1b2:	f7fb f87f 	bl	a2b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f1b6:	b168      	cbz	r0, f1d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f1b8:	7860      	ldrb	r0, [r4, #1]
    f1ba:	06c1      	lsls	r1, r0, #27
    f1bc:	d405      	bmi.n	f1ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f1be:	0700      	lsls	r0, r0, #28
    f1c0:	d503      	bpl.n	f1ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f1c2:	7d20      	ldrb	r0, [r4, #20]
    f1c4:	2802      	cmp	r0, #2
    f1c6:	d105      	bne.n	f1d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f1c8:	e006      	b.n	f1d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f1ca:	7d20      	ldrb	r0, [r4, #20]
    f1cc:	2802      	cmp	r0, #2
    f1ce:	d003      	beq.n	f1d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f1d0:	7ea0      	ldrb	r0, [r4, #26]
    f1d2:	b108      	cbz	r0, f1d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f1d4:	2011      	movs	r0, #17
    f1d6:	bd10      	pop	{r4, pc}
    f1d8:	2000      	movs	r0, #0
    f1da:	bd10      	pop	{r4, pc}
    f1dc:	b538      	push	{r3, r4, r5, lr}
    f1de:	4604      	mov	r4, r0
    f1e0:	7800      	ldrb	r0, [r0, #0]
    f1e2:	28ef      	cmp	r0, #239	; 0xef
    f1e4:	d847      	bhi.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f1e6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f1ea:	f8ad 0000 	strh.w	r0, [sp]
    f1ee:	9800      	ldr	r0, [sp, #0]
    f1f0:	f000 f956 	bl	f4a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    f1f4:	b3c0      	cbz	r0, f268 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    f1f6:	7861      	ldrb	r1, [r4, #1]
    f1f8:	0708      	lsls	r0, r1, #28
    f1fa:	d40f      	bmi.n	f21c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x182>
    f1fc:	f8d4 2002 	ldr.w	r2, [r4, #2]
    f200:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f204:	0a13      	lsrs	r3, r2, #8
    f206:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    f20a:	d834      	bhi.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f20c:	2320      	movs	r3, #32
    f20e:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    f212:	d830      	bhi.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f214:	025a      	lsls	r2, r3, #9
    f216:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f21a:	d32c      	bcc.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f21c:	7a60      	ldrb	r0, [r4, #9]
    f21e:	b318      	cbz	r0, f268 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    f220:	2807      	cmp	r0, #7
    f222:	d828      	bhi.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f224:	7aa0      	ldrb	r0, [r4, #10]
    f226:	b128      	cbz	r0, f234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f228:	2801      	cmp	r0, #1
    f22a:	d003      	beq.n	f234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f22c:	2802      	cmp	r0, #2
    f22e:	d001      	beq.n	f234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f230:	2803      	cmp	r0, #3
    f232:	d120      	bne.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f234:	074a      	lsls	r2, r1, #29
    f236:	d403      	bmi.n	f240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    f238:	2802      	cmp	r0, #2
    f23a:	d001      	beq.n	f240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    f23c:	2803      	cmp	r0, #3
    f23e:	d105      	bne.n	f24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b2>
    f240:	7ae0      	ldrb	r0, [r4, #11]
    f242:	b108      	cbz	r0, f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f244:	2801      	cmp	r0, #1
    f246:	d116      	bne.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f248:	0748      	lsls	r0, r1, #29
    f24a:	d407      	bmi.n	f25c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f24c:	7ca0      	ldrb	r0, [r4, #18]
    f24e:	b128      	cbz	r0, f25c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f250:	2801      	cmp	r0, #1
    f252:	d003      	beq.n	f25c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f254:	2802      	cmp	r0, #2
    f256:	d001      	beq.n	f25c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f258:	2803      	cmp	r0, #3
    f25a:	d10c      	bne.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f25c:	06c8      	lsls	r0, r1, #27
    f25e:	7d20      	ldrb	r0, [r4, #20]
    f260:	d503      	bpl.n	f26a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f262:	2801      	cmp	r0, #1
    f264:	d107      	bne.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f266:	e002      	b.n	f26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f268:	e005      	b.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f26a:	2802      	cmp	r0, #2
    f26c:	d003      	beq.n	f276 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f26e:	7e20      	ldrb	r0, [r4, #24]
    f270:	b118      	cbz	r0, f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f272:	2801      	cmp	r0, #1
    f274:	d001      	beq.n	f27a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f276:	2012      	movs	r0, #18
    f278:	bd38      	pop	{r3, r4, r5, pc}
    f27a:	2000      	movs	r0, #0
    f27c:	bd38      	pop	{r3, r4, r5, pc}
    f27e:	b510      	push	{r4, lr}
    f280:	0004      	movs	r4, r0
    f282:	d005      	beq.n	f290 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f284:	f7fb f870 	bl	a368 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f288:	4384      	bics	r4, r0
    f28a:	d001      	beq.n	f290 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f28c:	2000      	movs	r0, #0
    f28e:	bd10      	pop	{r4, pc}
    f290:	2001      	movs	r0, #1
    f292:	bd10      	pop	{r4, pc}
    f294:	28fb      	cmp	r0, #251	; 0xfb
    f296:	d803      	bhi.n	f2a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x206>
    f298:	f640 0048 	movw	r0, #2120	; 0x848
    f29c:	4281      	cmp	r1, r0
    f29e:	d901      	bls.n	f2a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20a>
    f2a0:	2011      	movs	r0, #17
    f2a2:	4770      	bx	lr
    f2a4:	2000      	movs	r0, #0
    f2a6:	4770      	bx	lr
    f2a8:	381b      	subs	r0, #27
    f2aa:	28e1      	cmp	r0, #225	; 0xe1
    f2ac:	d206      	bcs.n	f2bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    f2ae:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f2b2:	d303      	bcc.n	f2bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    f2b4:	f244 2090 	movw	r0, #17040	; 0x4290
    f2b8:	4281      	cmp	r1, r0
    f2ba:	d901      	bls.n	f2c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x226>
    f2bc:	2012      	movs	r0, #18
    f2be:	4770      	bx	lr
    f2c0:	2000      	movs	r0, #0
    f2c2:	4770      	bx	lr
    f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2c8:	4606      	mov	r6, r0
    f2ca:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
    f2ce:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    f2d2:	4615      	mov	r5, r2
    f2d4:	3024      	adds	r0, #36	; 0x24
    f2d6:	f7f7 ff33 	bl	7140 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    f2da:	4680      	mov	r8, r0
    f2dc:	2102      	movs	r1, #2
    f2de:	f7fd ff2d 	bl	d13c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f2e2:	4287      	cmp	r7, r0
    f2e4:	d200      	bcs.n	f2e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24e>
    f2e6:	4638      	mov	r0, r7
    f2e8:	4607      	mov	r7, r0
    f2ea:	2102      	movs	r1, #2
    f2ec:	4640      	mov	r0, r8
    f2ee:	f7fd ff25 	bl	d13c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f2f2:	4284      	cmp	r4, r0
    f2f4:	d200      	bcs.n	f2f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x25e>
    f2f6:	4620      	mov	r0, r4
    f2f8:	8831      	ldrh	r1, [r6, #0]
    f2fa:	8029      	strh	r1, [r5, #0]
    f2fc:	2f1b      	cmp	r7, #27
    f2fe:	d913      	bls.n	f328 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    f300:	2ffb      	cmp	r7, #251	; 0xfb
    f302:	d300      	bcc.n	f306 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    f304:	27fb      	movs	r7, #251	; 0xfb
    f306:	806f      	strh	r7, [r5, #2]
    f308:	281b      	cmp	r0, #27
    f30a:	d90f      	bls.n	f32c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x292>
    f30c:	28fb      	cmp	r0, #251	; 0xfb
    f30e:	d300      	bcc.n	f312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    f310:	20fb      	movs	r0, #251	; 0xfb
    f312:	80e8      	strh	r0, [r5, #6]
    f314:	4640      	mov	r0, r8
    f316:	f7ff fec8 	bl	f0aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f31a:	80a8      	strh	r0, [r5, #4]
    f31c:	4640      	mov	r0, r8
    f31e:	f7ff fec4 	bl	f0aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f322:	8128      	strh	r0, [r5, #8]
    f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f328:	271b      	movs	r7, #27
    f32a:	e7ec      	b.n	f306 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    f32c:	201b      	movs	r0, #27
    f32e:	e7f0      	b.n	f312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    f330:	b510      	push	{r4, lr}
    f332:	f7ff fed9 	bl	f0e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f336:	2800      	cmp	r0, #0
    f338:	d000      	beq.n	f33c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    f33a:	2001      	movs	r0, #1
    f33c:	bd10      	pop	{r4, pc}
    f33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f342:	7890      	ldrb	r0, [r2, #2]
    f344:	9e06      	ldr	r6, [sp, #24]
    f346:	461d      	mov	r5, r3
    f348:	4614      	mov	r4, r2
    f34a:	b908      	cbnz	r0, f350 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    f34c:	f7fb f80c 	bl	a368 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f350:	78e4      	ldrb	r4, [r4, #3]
    f352:	4607      	mov	r7, r0
    f354:	b914      	cbnz	r4, f35c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    f356:	f7fb f807 	bl	a368 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f35a:	4604      	mov	r4, r0
    f35c:	b16f      	cbz	r7, f37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f35e:	b164      	cbz	r4, f37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f360:	4638      	mov	r0, r7
    f362:	f7ff feac 	bl	f0be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f366:	4620      	mov	r0, r4
    f368:	f7ff fea9 	bl	f0be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f36c:	b12f      	cbz	r7, f37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f36e:	b124      	cbz	r4, f37a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f370:	702f      	strb	r7, [r5, #0]
    f372:	7034      	strb	r4, [r6, #0]
    f374:	2000      	movs	r0, #0
    f376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f37a:	2009      	movs	r0, #9
    f37c:	e7fb      	b.n	f376 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    f37e:	b510      	push	{r4, lr}
    f380:	f7fc fca2 	bl	bcc8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f384:	b928      	cbnz	r0, f392 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    f386:	f7fc fcd5 	bl	bd34 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f38a:	b910      	cbnz	r0, f392 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    f38c:	f7fc fcdc 	bl	bd48 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f390:	b108      	cbz	r0, f396 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    f392:	2008      	movs	r0, #8
    f394:	bd10      	pop	{r4, pc}
    f396:	f7fc fc6c 	bl	bc72 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f39a:	b940      	cbnz	r0, f3ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    f39c:	f7fc fc73 	bl	bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f3a0:	b928      	cbnz	r0, f3ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    f3a2:	f7fc fc87 	bl	bcb4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f3a6:	b910      	cbnz	r0, f3ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    f3a8:	f7fc fc98 	bl	bcdc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f3ac:	b108      	cbz	r0, f3b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    f3ae:	2004      	movs	r0, #4
    f3b0:	bd10      	pop	{r4, pc}
    f3b2:	f240 5197 	movw	r1, #1431	; 0x597
    f3b6:	2039      	movs	r0, #57	; 0x39
    f3b8:	f7f4 fcac 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3bc:	b510      	push	{r4, lr}
    f3be:	f7fa ffcd 	bl	a35c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f3c2:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f3c6:	bd10      	pop	{r4, pc}
    f3c8:	6840      	ldr	r0, [r0, #4]
    f3ca:	f000 b800 	b.w	f3ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    f3ce:	b508      	push	{r3, lr}
    f3d0:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f3d4:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    f3d8:	f88d 0000 	strb.w	r0, [sp]
    f3dc:	9800      	ldr	r0, [sp, #0]
    f3de:	9000      	str	r0, [sp, #0]
    f3e0:	f89d 0000 	ldrb.w	r0, [sp]
    f3e4:	1e40      	subs	r0, r0, #1
    f3e6:	4208      	tst	r0, r1
    f3e8:	d003      	beq.n	f3f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    f3ea:	2904      	cmp	r1, #4
    f3ec:	d001      	beq.n	f3f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    f3ee:	2001      	movs	r0, #1
    f3f0:	bd08      	pop	{r3, pc}
    f3f2:	2000      	movs	r0, #0
    f3f4:	bd08      	pop	{r3, pc}
    f3f6:	b510      	push	{r4, lr}
    f3f8:	2101      	movs	r1, #1
    f3fa:	2000      	movs	r0, #0
    f3fc:	f7fd fcd5 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f400:	0004      	movs	r4, r0
    f402:	d109      	bne.n	f418 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37e>
    f404:	2200      	movs	r2, #0
    f406:	2101      	movs	r1, #1
    f408:	4610      	mov	r0, r2
    f40a:	f7fd fcb2 	bl	cd72 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f40e:	0004      	movs	r4, r0
    f410:	d004      	beq.n	f41c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x382>
    f412:	2100      	movs	r1, #0
    f414:	f7fe fbb0 	bl	db78 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f418:	4620      	mov	r0, r4
    f41a:	bd10      	pop	{r4, pc}
    f41c:	f240 2126 	movw	r1, #550	; 0x226
    f420:	2039      	movs	r0, #57	; 0x39
    f422:	f7f4 fc77 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f426:	b570      	push	{r4, r5, r6, lr}
    f428:	4605      	mov	r5, r0
    f42a:	f7fe fc08 	bl	dc3e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f42e:	b170      	cbz	r0, f44e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b4>
    f430:	4628      	mov	r0, r5
    f432:	f7fe fe08 	bl	e046 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f436:	2800      	cmp	r0, #0
    f438:	d008      	beq.n	f44c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b2>
    f43a:	4628      	mov	r0, r5
    f43c:	f7fe fe00 	bl	e040 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    f440:	4604      	mov	r4, r0
    f442:	4628      	mov	r0, r5
    f444:	f7fe fdd6 	bl	dff4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    f448:	b118      	cbz	r0, f452 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
    f44a:	200c      	movs	r0, #12
    f44c:	bd70      	pop	{r4, r5, r6, pc}
    f44e:	2042      	movs	r0, #66	; 0x42
    f450:	bd70      	pop	{r4, r5, r6, pc}
    f452:	b164      	cbz	r4, f46e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    f454:	8820      	ldrh	r0, [r4, #0]
    f456:	f7fd fd21 	bl	ce9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f45a:	8820      	ldrh	r0, [r4, #0]
    f45c:	2100      	movs	r1, #0
    f45e:	f7f4 fefb 	bl	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f462:	b120      	cbz	r0, f46e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    f464:	f241 417a 	movw	r1, #5242	; 0x147a
    f468:	2039      	movs	r0, #57	; 0x39
    f46a:	f7f4 fc53 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f46e:	2000      	movs	r0, #0
    f470:	bd70      	pop	{r4, r5, r6, pc}
    f472:	b530      	push	{r4, r5, lr}
    f474:	f340 0400 	sbfx	r4, r0, #0, #1
    f478:	f340 0040 	sbfx	r0, r0, #1, #1
    f47c:	1c40      	adds	r0, r0, #1
    f47e:	9d03      	ldr	r5, [sp, #12]
    f480:	1c64      	adds	r4, r4, #1
    f482:	d000      	beq.n	f486 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ec>
    f484:	b119      	cbz	r1, f48e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    f486:	b100      	cbz	r0, f48a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    f488:	b10a      	cbz	r2, f48e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    f48a:	b91c      	cbnz	r4, f494 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fa>
    f48c:	e001      	b.n	f492 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    f48e:	2011      	movs	r0, #17
    f490:	bd30      	pop	{r4, r5, pc}
    f492:	2100      	movs	r1, #0
    f494:	7019      	strb	r1, [r3, #0]
    f496:	b900      	cbnz	r0, f49a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    f498:	2200      	movs	r2, #0
    f49a:	702a      	strb	r2, [r5, #0]
    f49c:	2000      	movs	r0, #0
    f49e:	bd30      	pop	{r4, r5, pc}
    f4a0:	b2c0      	uxtb	r0, r0
    f4a2:	06c1      	lsls	r1, r0, #27
    f4a4:	d40c      	bmi.n	f4c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x426>
    f4a6:	0681      	lsls	r1, r0, #26
    f4a8:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    f4ac:	d503      	bpl.n	f4b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
    f4ae:	b9d1      	cbnz	r1, f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4b0:	0781      	lsls	r1, r0, #30
    f4b2:	d418      	bmi.n	f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4b4:	e001      	b.n	f4ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    f4b6:	2900      	cmp	r1, #0
    f4b8:	d1fa      	bne.n	f4b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x416>
    f4ba:	0700      	lsls	r0, r0, #28
    f4bc:	d413      	bmi.n	f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4be:	e010      	b.n	f4e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    f4c0:	0641      	lsls	r1, r0, #25
    f4c2:	d410      	bmi.n	f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4c4:	0681      	lsls	r1, r0, #26
    f4c6:	d40e      	bmi.n	f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4c8:	07c1      	lsls	r1, r0, #31
    f4ca:	ea4f 7180 	mov.w	r1, r0, lsl #30
    f4ce:	d004      	beq.n	f4da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    f4d0:	2900      	cmp	r1, #0
    f4d2:	db02      	blt.n	f4da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    f4d4:	0740      	lsls	r0, r0, #29
    f4d6:	d404      	bmi.n	f4e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    f4d8:	e005      	b.n	f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4da:	0701      	lsls	r1, r0, #28
    f4dc:	d403      	bmi.n	f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4de:	0740      	lsls	r0, r0, #29
    f4e0:	d401      	bmi.n	f4e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4e2:	2001      	movs	r0, #1
    f4e4:	4770      	bx	lr
    f4e6:	2000      	movs	r0, #0
    f4e8:	4770      	bx	lr
    f4ea:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4ec:	4669      	mov	r1, sp
    f4ee:	2001      	movs	r0, #1
    f4f0:	f7fd fc65 	bl	cdbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f4f4:	b178      	cbz	r0, f516 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    f4f6:	f240 114f 	movw	r1, #335	; 0x14f
    f4fa:	2039      	movs	r0, #57	; 0x39
    f4fc:	f7f4 fc0a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f500:	9c02      	ldr	r4, [sp, #8]
    f502:	4620      	mov	r0, r4
    f504:	f7fe fd9f 	bl	e046 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f508:	b128      	cbz	r0, f516 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    f50a:	4620      	mov	r0, r4
    f50c:	f7fe fbff 	bl	dd0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f510:	b108      	cbz	r0, f516 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    f512:	2001      	movs	r0, #1
    f514:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f516:	4668      	mov	r0, sp
    f518:	f7f4 fe4e 	bl	41b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f51c:	2800      	cmp	r0, #0
    f51e:	d0ef      	beq.n	f500 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f520:	2000      	movs	r0, #0
    f522:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f524 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f524:	6802      	ldr	r2, [r0, #0]
    f526:	b912      	cbnz	r2, f52e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f528:	6001      	str	r1, [r0, #0]
    f52a:	4770      	bx	lr
    f52c:	4602      	mov	r2, r0
    f52e:	6850      	ldr	r0, [r2, #4]
    f530:	b108      	cbz	r0, f536 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f532:	428a      	cmp	r2, r1
    f534:	d1fa      	bne.n	f52c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f536:	428a      	cmp	r2, r1
    f538:	d0f7      	beq.n	f52a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f53a:	6051      	str	r1, [r2, #4]
    f53c:	4770      	bx	lr
    f53e:	b510      	push	{r4, lr}
    f540:	f7fe fd84 	bl	e04c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    f544:	b108      	cbz	r0, f54a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f546:	21d8      	movs	r1, #216	; 0xd8
    f548:	e003      	b.n	f552 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    f54a:	f7f6 ffaf 	bl	64ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    f54e:	b118      	cbz	r0, f558 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    f550:	21dd      	movs	r1, #221	; 0xdd
    f552:	2001      	movs	r0, #1
    f554:	f7f4 fbde 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f55c:	2001      	movs	r0, #1
    f55e:	f7f4 bdc3 	b.w	40e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f562:	b510      	push	{r4, lr}
    f564:	4604      	mov	r4, r0
    f566:	e002      	b.n	f56e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    f568:	6820      	ldr	r0, [r4, #0]
    f56a:	4780      	blx	r0
    f56c:	6864      	ldr	r4, [r4, #4]
    f56e:	2c00      	cmp	r4, #0
    f570:	d1fa      	bne.n	f568 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    f572:	bd10      	pop	{r4, pc}
    f574:	b510      	push	{r4, lr}
    f576:	2000      	movs	r0, #0
    f578:	f7f4 fdb6 	bl	40e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f57c:	f7f4 ffea 	bl	4554 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f580:	f7f5 fa6c 	bl	4a5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f584:	f7f5 fc4a 	bl	4e1c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f588:	2800      	cmp	r0, #0
    f58a:	d003      	beq.n	f594 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    f58c:	21b5      	movs	r1, #181	; 0xb5
    f58e:	2001      	movs	r0, #1
    f590:	f7f4 fbc0 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f594:	bd10      	pop	{r4, pc}
    f596:	b510      	push	{r4, lr}
    f598:	f7ff ffd1 	bl	f53e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    f59c:	f7ff f81a 	bl	e5d4 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    f5a0:	2800      	cmp	r0, #0
    f5a2:	d003      	beq.n	f5ac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    f5a4:	21f6      	movs	r1, #246	; 0xf6
    f5a6:	2001      	movs	r0, #1
    f5a8:	f7f4 fbb4 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5ac:	bd10      	pop	{r4, pc}

0000f5ae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f5ae:	b510      	push	{r4, lr}
    f5b0:	f7fb fa56 	bl	aa60 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f5b4:	f000 f850 	bl	f658 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f5b8:	f7fa ff2a 	bl	a410 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5c0:	f7fb b820 	b.w	a604 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f5c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f5c4:	b510      	push	{r4, lr}
    f5c6:	24c8      	movs	r4, #200	; 0xc8
    f5c8:	1e64      	subs	r4, r4, #1
    f5ca:	b2e4      	uxtb	r4, r4
    f5cc:	f7fa ff3e 	bl	a44c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f5d0:	2802      	cmp	r0, #2
    f5d2:	d003      	beq.n	f5dc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f5d4:	2801      	cmp	r0, #1
    f5d6:	d000      	beq.n	f5da <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f5d8:	2000      	movs	r0, #0
    f5da:	bd10      	pop	{r4, pc}
    f5dc:	2c00      	cmp	r4, #0
    f5de:	d1f3      	bne.n	f5c8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f5e0:	218f      	movs	r1, #143	; 0x8f
    f5e2:	203b      	movs	r0, #59	; 0x3b
    f5e4:	f7f4 fb96 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f5e8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f5e8:	b510      	push	{r4, lr}
    f5ea:	f7f4 fa73 	bl	3ad4 <mpsl_fem_lna_configuration_clear>
    f5ee:	2800      	cmp	r0, #0
    f5f0:	d005      	beq.n	f5fe <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f5f2:	1c40      	adds	r0, r0, #1
    f5f4:	d003      	beq.n	f5fe <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f5f6:	2150      	movs	r1, #80	; 0x50
    f5f8:	2040      	movs	r0, #64	; 0x40
    f5fa:	f7f4 fb8b 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5fe:	bd10      	pop	{r4, pc}

0000f600 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f600:	b510      	push	{r4, lr}
    f602:	f7f4 fa73 	bl	3aec <mpsl_fem_pa_configuration_clear>
    f606:	2800      	cmp	r0, #0
    f608:	d005      	beq.n	f616 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f60a:	1c40      	adds	r0, r0, #1
    f60c:	d003      	beq.n	f616 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f60e:	2149      	movs	r1, #73	; 0x49
    f610:	2040      	movs	r0, #64	; 0x40
    f612:	f7f4 fb7f 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f616:	bd10      	pop	{r4, pc}

0000f618 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f618:	b510      	push	{r4, lr}
    f61a:	f7f4 fa55 	bl	3ac8 <mpsl_fem_disable>
    f61e:	2800      	cmp	r0, #0
    f620:	d005      	beq.n	f62e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f622:	1c40      	adds	r0, r0, #1
    f624:	d003      	beq.n	f62e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f626:	2157      	movs	r1, #87	; 0x57
    f628:	2040      	movs	r0, #64	; 0x40
    f62a:	f7f4 fb73 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f62e:	bd10      	pop	{r4, pc}

0000f630 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f630:	b510      	push	{r4, lr}
    f632:	2100      	movs	r1, #0
    f634:	4608      	mov	r0, r1
    f636:	f7f4 fa53 	bl	3ae0 <mpsl_fem_lna_configuration_set>
    f63a:	b108      	cbz	r0, f640 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f63c:	2000      	movs	r0, #0
    f63e:	bd10      	pop	{r4, pc}
    f640:	2001      	movs	r0, #1
    f642:	bd10      	pop	{r4, pc}

0000f644 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f644:	b508      	push	{r3, lr}
    f646:	4668      	mov	r0, sp
    f648:	f7f4 fa5c 	bl	3b04 <mpsl_fem_pa_is_configured>
    f64c:	f89d 0000 	ldrb.w	r0, [sp]
    f650:	2800      	cmp	r0, #0
    f652:	d000      	beq.n	f656 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f654:	2001      	movs	r0, #1
    f656:	bd08      	pop	{r3, pc}

0000f658 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f658:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f65c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f660:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f664:	f3bf 8f4f 	dsb	sy
    f668:	f3bf 8f6f 	isb	sy
    f66c:	f7fb b84c 	b.w	a708 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f670:	2800      	cmp	r0, #0
    f672:	db09      	blt.n	f688 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f674:	f000 021f 	and.w	r2, r0, #31
    f678:	2101      	movs	r1, #1
    f67a:	4091      	lsls	r1, r2
    f67c:	0940      	lsrs	r0, r0, #5
    f67e:	0080      	lsls	r0, r0, #2
    f680:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f684:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f688:	4770      	bx	lr
    f68a:	2800      	cmp	r0, #0
    f68c:	db0d      	blt.n	f6aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f68e:	f000 021f 	and.w	r2, r0, #31
    f692:	2101      	movs	r1, #1
    f694:	4091      	lsls	r1, r2
    f696:	0940      	lsrs	r0, r0, #5
    f698:	0080      	lsls	r0, r0, #2
    f69a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f69e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f6a2:	f3bf 8f4f 	dsb	sy
    f6a6:	f3bf 8f6f 	isb	sy
    f6aa:	4770      	bx	lr

0000f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f6ac:	b510      	push	{r4, lr}
    f6ae:	2801      	cmp	r0, #1
    f6b0:	d006      	beq.n	f6c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f6b2:	2802      	cmp	r0, #2
    f6b4:	d006      	beq.n	f6c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f6b6:	f640 31c5 	movw	r1, #3013	; 0xbc5
    f6ba:	203e      	movs	r0, #62	; 0x3e
    f6bc:	f7f4 fb2a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6c0:	2028      	movs	r0, #40	; 0x28
    f6c2:	bd10      	pop	{r4, pc}
    f6c4:	2018      	movs	r0, #24
    f6c6:	bd10      	pop	{r4, pc}

0000f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f6c8:	b510      	push	{r4, lr}
    f6ca:	2801      	cmp	r0, #1
    f6cc:	d006      	beq.n	f6dc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f6ce:	2802      	cmp	r0, #2
    f6d0:	d007      	beq.n	f6e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f6d2:	f640 31d9 	movw	r1, #3033	; 0xbd9
    f6d6:	203e      	movs	r0, #62	; 0x3e
    f6d8:	f7f4 fb1c 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6dc:	f641 6014 	movw	r0, #7700	; 0x1e14
    f6e0:	bd10      	pop	{r4, pc}
    f6e2:	f241 1030 	movw	r0, #4400	; 0x1130
    f6e6:	bd10      	pop	{r4, pc}

0000f6e8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f6e8:	f7fb bf5a 	b.w	b5a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    f6ec:	b510      	push	{r4, lr}
    f6ee:	460a      	mov	r2, r1
    f6f0:	b130      	cbz	r0, f700 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f6f2:	2801      	cmp	r0, #1
    f6f4:	d00b      	beq.n	f70e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f6f6:	f240 614f 	movw	r1, #1615	; 0x64f
    f6fa:	203e      	movs	r0, #62	; 0x3e
    f6fc:	f7f4 fb0a 	bl	3d14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f704:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f708:	4610      	mov	r0, r2
    f70a:	f7fa bef3 	b.w	a4f4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f712:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f716:	4610      	mov	r0, r2
    f718:	f7fa bed6 	b.w	a4c8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f71c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f71c:	b570      	push	{r4, r5, r6, lr}
    f71e:	4605      	mov	r5, r0
    f720:	4614      	mov	r4, r2
    f722:	4608      	mov	r0, r1
    f724:	f7ff ffd0 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f728:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f72c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f730:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f734:	4620      	mov	r0, r4
    f736:	f7ff ffc7 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f73a:	4428      	add	r0, r5
    f73c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f740:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f744:	fbb0 f5f1 	udiv	r5, r0, r1
    f748:	4620      	mov	r0, r4
    f74a:	f7ff ffaf 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f74e:	4428      	add	r0, r5
    f750:	1d40      	adds	r0, r0, #5
    f752:	bd70      	pop	{r4, r5, r6, pc}

0000f754 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f758:	4607      	mov	r7, r0
    f75a:	461d      	mov	r5, r3
    f75c:	460e      	mov	r6, r1
    f75e:	4614      	mov	r4, r2
    f760:	4610      	mov	r0, r2
    f762:	f7ff ffb1 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f766:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f76a:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f76e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f776:	2e02      	cmp	r6, #2
    f778:	d00e      	beq.n	f798 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f77a:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f77e:	4411      	add	r1, r2
    f780:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f784:	fbb1 f6f0 	udiv	r6, r1, r0
    f788:	4620      	mov	r0, r4
    f78a:	f7ff ff8f 	bl	f6ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f78e:	4430      	add	r0, r6
    f790:	4428      	add	r0, r5
    f792:	1d40      	adds	r0, r0, #5
    f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f798:	4602      	mov	r2, r0
    f79a:	e7f0      	b.n	f77e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f79c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f79c:	b510      	push	{r4, lr}
    f79e:	4604      	mov	r4, r0
    f7a0:	4608      	mov	r0, r1
    f7a2:	f7ff ff91 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7aa:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f7ae:	fbb0 f0f1 	udiv	r0, r0, r1
    f7b2:	1a20      	subs	r0, r4, r0
    f7b4:	1e80      	subs	r0, r0, #2
    f7b6:	bd10      	pop	{r4, pc}

0000f7b8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f7b8:	b510      	push	{r4, lr}
    f7ba:	4604      	mov	r4, r0
    f7bc:	4608      	mov	r0, r1
    f7be:	f7ff ff83 	bl	f6c8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7c6:	fbb0 f0f1 	udiv	r0, r0, r1
    f7ca:	1a20      	subs	r0, r4, r0
    f7cc:	bd10      	pop	{r4, pc}

0000f7ce <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f7ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f7d2:	2902      	cmp	r1, #2
    f7d4:	d008      	beq.n	f7e8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f7d6:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f7da:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f7de:	fbb1 f1f2 	udiv	r1, r1, r2
    f7e2:	4408      	add	r0, r1
    f7e4:	1e80      	subs	r0, r0, #2
    f7e6:	4770      	bx	lr
    f7e8:	4611      	mov	r1, r2
    f7ea:	e7f6      	b.n	f7da <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f7ec <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f7ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f7f0:	2902      	cmp	r1, #2
    f7f2:	d007      	beq.n	f804 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f7f4:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f7f8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f7fc:	fbb1 f1f2 	udiv	r1, r1, r2
    f800:	4408      	add	r0, r1
    f802:	4770      	bx	lr
    f804:	4611      	mov	r1, r2
    f806:	e7f7      	b.n	f7f8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f808:	1702080c 	.word	0x1702080c
    f80c:	0201010d 	.word	0x0201010d
    f810:	01010909 	.word	0x01010909
    f814:	18090206 	.word	0x18090206
    f818:	01010318 	.word	0x01010318
    f81c:	03030909 	.word	0x03030909
    f820:	00000005 	.word	0x00000005
    f824:	00000000 	.word	0x00000000

0000f828 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    f828:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f82a:	4d43      	ldr	r5, [pc, #268]	; (f938 <bt_init+0x110>)
    f82c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    f830:	6899      	ldr	r1, [r3, #8]
    f832:	f011 0101 	ands.w	r1, r1, #1
{
    f836:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f838:	d121      	bne.n	f87e <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f83a:	aa03      	add	r2, sp, #12
    f83c:	f640 4003 	movw	r0, #3075	; 0xc03
    f840:	f006 fd72 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
    f844:	4604      	mov	r4, r0
    f846:	2800      	cmp	r0, #0
    f848:	d173      	bne.n	f932 <bt_init+0x10a>
		hci_reset_complete(rsp);
    f84a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
    f84c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f84e:	781b      	ldrb	r3, [r3, #0]
    f850:	b993      	cbnz	r3, f878 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f852:	f3bf 8f5b 	dmb	ish
    f856:	462b      	mov	r3, r5
    f858:	f853 2f98 	ldr.w	r2, [r3, #152]!
    f85c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f860:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f864:	f3bf 8f5b 	dmb	ish
    f868:	e853 1f00 	ldrex	r1, [r3]
    f86c:	e843 2000 	strex	r0, r2, [r3]
    f870:	2800      	cmp	r0, #0
    f872:	d1f9      	bne.n	f868 <bt_init+0x40>
    f874:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    f878:	9803      	ldr	r0, [sp, #12]
    f87a:	f00d fde3 	bl	1d444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f87e:	aa03      	add	r2, sp, #12
    f880:	2100      	movs	r1, #0
    f882:	f241 0003 	movw	r0, #4099	; 0x1003
    f886:	f006 fd4f 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    f88a:	4604      	mov	r4, r0
    f88c:	2800      	cmp	r0, #0
    f88e:	d150      	bne.n	f932 <bt_init+0x10a>
	read_local_features_complete(rsp);
    f890:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f892:	482a      	ldr	r0, [pc, #168]	; (f93c <bt_init+0x114>)
    f894:	6899      	ldr	r1, [r3, #8]
    f896:	2208      	movs	r2, #8
    f898:	3101      	adds	r1, #1
    f89a:	f01a f8de 	bl	29a5a <memcpy>
	net_buf_unref(rsp);
    f89e:	9803      	ldr	r0, [sp, #12]
    f8a0:	f00d fdd0 	bl	1d444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f8a4:	4621      	mov	r1, r4
    f8a6:	aa03      	add	r2, sp, #12
    f8a8:	f241 0001 	movw	r0, #4097	; 0x1001
    f8ac:	f006 fd3c 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    f8b0:	4604      	mov	r4, r0
    f8b2:	2800      	cmp	r0, #0
    f8b4:	d13d      	bne.n	f932 <bt_init+0x10a>
	read_local_ver_complete(rsp);
    f8b6:	9803      	ldr	r0, [sp, #12]
    f8b8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f8ba:	785a      	ldrb	r2, [r3, #1]
    f8bc:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f8c0:	78d9      	ldrb	r1, [r3, #3]
    f8c2:	789a      	ldrb	r2, [r3, #2]
    f8c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f8c8:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f8ca:	791a      	ldrb	r2, [r3, #4]
    f8cc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f8d0:	7a19      	ldrb	r1, [r3, #8]
    f8d2:	79da      	ldrb	r2, [r3, #7]
    f8d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f8d8:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f8da:	795a      	ldrb	r2, [r3, #5]
    f8dc:	799b      	ldrb	r3, [r3, #6]
    f8de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f8e2:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f8e4:	f00d fdae 	bl	1d444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f8e8:	4621      	mov	r1, r4
    f8ea:	aa03      	add	r2, sp, #12
    f8ec:	f241 0002 	movw	r0, #4098	; 0x1002
    f8f0:	f006 fd1a 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    f8f4:	4604      	mov	r4, r0
    f8f6:	b9e0      	cbnz	r0, f932 <bt_init+0x10a>
	read_supported_commands_complete(rsp);
    f8f8:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    f8fa:	4811      	ldr	r0, [pc, #68]	; (f940 <bt_init+0x118>)
    f8fc:	6899      	ldr	r1, [r3, #8]
    f8fe:	2240      	movs	r2, #64	; 0x40
    f900:	3101      	adds	r1, #1
    f902:	f01a f8aa 	bl	29a5a <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    f906:	480e      	ldr	r0, [pc, #56]	; (f940 <bt_init+0x118>)
    f908:	f01a f93d 	bl	29b86 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    f90c:	9803      	ldr	r0, [sp, #12]
    f90e:	f00d fd99 	bl	1d444 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f912:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f916:	065a      	lsls	r2, r3, #25
    f918:	d41a      	bmi.n	f950 <bt_init+0x128>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    f91a:	4b0a      	ldr	r3, [pc, #40]	; (f944 <bt_init+0x11c>)
    f91c:	490a      	ldr	r1, [pc, #40]	; (f948 <bt_init+0x120>)
		BT_ERR("Non-LE capable controller detected!");
    f91e:	480b      	ldr	r0, [pc, #44]	; (f94c <bt_init+0x124>)
    f920:	1ac9      	subs	r1, r1, r3
    f922:	08c9      	lsrs	r1, r1, #3
    f924:	0189      	lsls	r1, r1, #6
    f926:	f041 0101 	orr.w	r1, r1, #1
    f92a:	f018 f8b7 	bl	27a9c <log_0>
		return -ENODEV;
    f92e:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    f932:	4620      	mov	r0, r4
    f934:	b008      	add	sp, #32
    f936:	bd70      	pop	{r4, r5, r6, pc}
    f938:	200002b8 	.word	0x200002b8
    f93c:	200002f4 	.word	0x200002f4
    f940:	200002fc 	.word	0x200002fc
    f944:	0002ccb8 	.word	0x0002ccb8
    f948:	0002cce8 	.word	0x0002cce8
    f94c:	0002f771 	.word	0x0002f771
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f950:	4621      	mov	r1, r4
    f952:	aa03      	add	r2, sp, #12
    f954:	f242 0003 	movw	r0, #8195	; 0x2003
    f958:	f006 fce6 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    f95c:	4604      	mov	r4, r0
    f95e:	2800      	cmp	r0, #0
    f960:	d1e7      	bne.n	f932 <bt_init+0x10a>
	read_le_features_complete(rsp);
    f962:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f964:	48a4      	ldr	r0, [pc, #656]	; (fbf8 <bt_init+0x3d0>)
    f966:	6899      	ldr	r1, [r3, #8]
    f968:	2208      	movs	r2, #8
    f96a:	3101      	adds	r1, #1
    f96c:	f01a f875 	bl	29a5a <memcpy>
	net_buf_unref(rsp);
    f970:	9803      	ldr	r0, [sp, #12]
    f972:	f00d fd67 	bl	1d444 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f976:	4621      	mov	r1, r4
    f978:	aa03      	add	r2, sp, #12
    f97a:	f242 0002 	movw	r0, #8194	; 0x2002
    f97e:	f006 fcd3 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
    f982:	4604      	mov	r4, r0
    f984:	2800      	cmp	r0, #0
    f986:	d1d4      	bne.n	f932 <bt_init+0x10a>
		le_read_buffer_size_complete(rsp);
    f988:	9b03      	ldr	r3, [sp, #12]
    f98a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f98c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f990:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    f994:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    f996:	b121      	cbz	r1, f9a2 <bt_init+0x17a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f998:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    f99a:	4898      	ldr	r0, [pc, #608]	; (fbfc <bt_init+0x3d4>)
    f99c:	4611      	mov	r1, r2
    f99e:	f01c fe6c 	bl	2c67a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f9a2:	9803      	ldr	r0, [sp, #12]
    f9a4:	f00d fd4e 	bl	1d444 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f9a8:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f9ac:	f016 0620 	ands.w	r6, r6, #32
    f9b0:	f000 80fe 	beq.w	fbb0 <bt_init+0x388>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f9b4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f9b8:	071b      	lsls	r3, r3, #28
    f9ba:	d511      	bpl.n	f9e0 <bt_init+0x1b8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f9bc:	aa03      	add	r2, sp, #12
    f9be:	2100      	movs	r1, #0
    f9c0:	f242 001c 	movw	r0, #8220	; 0x201c
    f9c4:	f006 fcb0 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
    f9c8:	4604      	mov	r4, r0
    f9ca:	2800      	cmp	r0, #0
    f9cc:	d1b1      	bne.n	f932 <bt_init+0x10a>
		le_read_supp_states_complete(rsp);
    f9ce:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f9d0:	6883      	ldr	r3, [r0, #8]
    f9d2:	f853 2f01 	ldr.w	r2, [r3, #1]!
    f9d6:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f9d8:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    f9dc:	f00d fd32 	bl	1d444 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f9e0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    f9e4:	069e      	lsls	r6, r3, #26
    f9e6:	d523      	bpl.n	fa30 <bt_init+0x208>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f9e8:	a902      	add	r1, sp, #8
    f9ea:	f10d 0006 	add.w	r0, sp, #6
    f9ee:	f006 fd13 	bl	16418 <hci_le_read_max_data_len>
		if (err) {
    f9f2:	4604      	mov	r4, r0
    f9f4:	2800      	cmp	r0, #0
    f9f6:	d19c      	bne.n	f932 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f9f8:	2104      	movs	r1, #4
    f9fa:	f242 0024 	movw	r0, #8228	; 0x2024
    f9fe:	f006 fb27 	bl	16050 <bt_hci_cmd_create>
		if (!buf) {
    fa02:	4606      	mov	r6, r0
    fa04:	2800      	cmp	r0, #0
    fa06:	f000 80da 	beq.w	fbbe <bt_init+0x396>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    fa0a:	2104      	movs	r1, #4
    fa0c:	3008      	adds	r0, #8
    fa0e:	f00d fe49 	bl	1d6a4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    fa12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fa16:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    fa18:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    fa1c:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    fa1e:	4622      	mov	r2, r4
    fa20:	4631      	mov	r1, r6
    fa22:	f242 0024 	movw	r0, #8228	; 0x2024
    fa26:	f006 fc7f 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
    fa2a:	4604      	mov	r4, r0
    fa2c:	2800      	cmp	r0, #0
    fa2e:	d180      	bne.n	f932 <bt_init+0x10a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    fa30:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    fa34:	065c      	lsls	r4, r3, #25
    fa36:	d510      	bpl.n	fa5a <bt_init+0x232>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    fa38:	aa03      	add	r2, sp, #12
    fa3a:	2100      	movs	r1, #0
    fa3c:	f242 002a 	movw	r0, #8234	; 0x202a
    fa40:	f006 fc72 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
    fa44:	4604      	mov	r4, r0
    fa46:	2800      	cmp	r0, #0
    fa48:	f47f af73 	bne.w	f932 <bt_init+0x10a>
		le_read_resolving_list_size_complete(rsp);
    fa4c:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    fa4e:	6883      	ldr	r3, [r0, #8]
    fa50:	785b      	ldrb	r3, [r3, #1]
    fa52:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
    fa56:	f00d fcf5 	bl	1d444 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    fa5a:	2108      	movs	r1, #8
    fa5c:	f242 0001 	movw	r0, #8193	; 0x2001
    fa60:	f006 faf6 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
    fa64:	4604      	mov	r4, r0
    fa66:	2800      	cmp	r0, #0
    fa68:	f000 80a9 	beq.w	fbbe <bt_init+0x396>
    fa6c:	2108      	movs	r1, #8
    fa6e:	4408      	add	r0, r1
    fa70:	f00d fe18 	bl	1d6a4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    fa74:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    fa78:	f011 0f40 	tst.w	r1, #64	; 0x40
    fa7c:	4602      	mov	r2, r0
    fa7e:	f240 2302 	movw	r3, #514	; 0x202
    fa82:	bf08      	it	eq
    fa84:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    fa86:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    fa88:	bf4c      	ite	mi
    fa8a:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    fa8e:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    fa92:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    fa94:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    fa98:	bf48      	it	mi
    fa9a:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    fa9e:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    faa2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    faa6:	bf18      	it	ne
    faa8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    faac:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    fab0:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    fab2:	bf48      	it	mi
    fab4:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    fab8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    faba:	bf08      	it	eq
    fabc:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    fac0:	2100      	movs	r1, #0
    fac2:	f01a f931 	bl	29d28 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    fac6:	4621      	mov	r1, r4
    fac8:	2200      	movs	r2, #0
    faca:	f242 0001 	movw	r0, #8193	; 0x2001
    face:	f006 fc2b 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    fad2:	4604      	mov	r4, r0
    fad4:	2800      	cmp	r0, #0
    fad6:	f47f af2c 	bne.w	f932 <bt_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    fada:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    fade:	0698      	lsls	r0, r3, #26
    fae0:	d41e      	bmi.n	fb20 <bt_init+0x2f8>
	if (bt_dev.le.acl_mtu) {
    fae2:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    fae6:	b9d9      	cbnz	r1, fb20 <bt_init+0x2f8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    fae8:	aa03      	add	r2, sp, #12
    faea:	f241 0005 	movw	r0, #4101	; 0x1005
    faee:	f006 fc1b 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    faf2:	4604      	mov	r4, r0
    faf4:	2800      	cmp	r0, #0
    faf6:	f47f af1c 	bne.w	f932 <bt_init+0x10a>
	if (bt_dev.le.acl_mtu) {
    fafa:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    fafe:	b963      	cbnz	r3, fb1a <bt_init+0x2f2>
	read_buffer_size_complete(rsp);
    fb00:	9b03      	ldr	r3, [sp, #12]
    fb02:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    fb04:	785a      	ldrb	r2, [r3, #1]
    fb06:	7899      	ldrb	r1, [r3, #2]
    fb08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb0c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    fb10:	889a      	ldrh	r2, [r3, #4]
    fb12:	483a      	ldr	r0, [pc, #232]	; (fbfc <bt_init+0x3d4>)
    fb14:	4611      	mov	r1, r2
    fb16:	f01c fdb0 	bl	2c67a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    fb1a:	9803      	ldr	r0, [sp, #12]
    fb1c:	f00d fc92 	bl	1d444 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    fb20:	2108      	movs	r1, #8
    fb22:	f640 4001 	movw	r0, #3073	; 0xc01
    fb26:	f006 fa93 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
    fb2a:	4604      	mov	r4, r0
    fb2c:	2800      	cmp	r0, #0
    fb2e:	d046      	beq.n	fbbe <bt_init+0x396>
    fb30:	2108      	movs	r1, #8
    fb32:	4408      	add	r0, r1
    fb34:	f00d fdb6 	bl	1d6a4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    fb38:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    fb3c:	07d9      	lsls	r1, r3, #31
    fb3e:	4602      	mov	r2, r0
    fb40:	d552      	bpl.n	fbe8 <bt_init+0x3c0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    fb42:	a12b      	add	r1, pc, #172	; (adr r1, fbf0 <bt_init+0x3c8>)
    fb44:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    fb48:	f01a f8ee 	bl	29d28 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    fb4c:	4621      	mov	r1, r4
    fb4e:	2200      	movs	r2, #0
    fb50:	f640 4001 	movw	r0, #3073	; 0xc01
    fb54:	f006 fbe8 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    fb58:	4604      	mov	r4, r0
    fb5a:	2800      	cmp	r0, #0
    fb5c:	f47f aee9 	bne.w	f932 <bt_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    fb60:	4601      	mov	r1, r0
    fb62:	aa02      	add	r2, sp, #8
    fb64:	f64f 4001 	movw	r0, #64513	; 0xfc01
    fb68:	f006 fbde 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    fb6c:	4e24      	ldr	r6, [pc, #144]	; (fc00 <bt_init+0x3d8>)
    fb6e:	4b25      	ldr	r3, [pc, #148]	; (fc04 <bt_init+0x3dc>)
    fb70:	1af6      	subs	r6, r6, r3
    fb72:	08f6      	lsrs	r6, r6, #3
    fb74:	01b6      	lsls	r6, r6, #6
    fb76:	2800      	cmp	r0, #0
    fb78:	d04c      	beq.n	fc14 <bt_init+0x3ec>
		BT_WARN("Vendor HCI extensions not available");
    fb7a:	4823      	ldr	r0, [pc, #140]	; (fc08 <bt_init+0x3e0>)
    fb7c:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    fb80:	f017 ff8c 	bl	27a9c <log_0>
	err = bt_id_init();
    fb84:	f01a fa54 	bl	2a030 <bt_id_init>
	if (err) {
    fb88:	4604      	mov	r4, r0
    fb8a:	2800      	cmp	r0, #0
    fb8c:	f47f aed1 	bne.w	f932 <bt_init+0x10a>
		err = bt_conn_init();
    fb90:	f008 fe04 	bl	1879c <bt_conn_init>
		if (err) {
    fb94:	4604      	mov	r4, r0
    fb96:	2800      	cmp	r0, #0
    fb98:	f47f aecb 	bne.w	f932 <bt_init+0x10a>
		if (!bt_dev.id_count) {
    fb9c:	79eb      	ldrb	r3, [r5, #7]
    fb9e:	2b00      	cmp	r3, #0
    fba0:	f040 80a5 	bne.w	fcee <bt_init+0x4c6>
			BT_INFO("No ID address. App must call settings_load()");
    fba4:	4819      	ldr	r0, [pc, #100]	; (fc0c <bt_init+0x3e4>)
    fba6:	f046 0103 	orr.w	r1, r6, #3
    fbaa:	f017 ff77 	bl	27a9c <log_0>
			return 0;
    fbae:	e6c0      	b.n	f932 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    fbb0:	2102      	movs	r1, #2
    fbb2:	f640 406d 	movw	r0, #3181	; 0xc6d
    fbb6:	f006 fa4b 	bl	16050 <bt_hci_cmd_create>
		if (!buf) {
    fbba:	4604      	mov	r4, r0
    fbbc:	b910      	cbnz	r0, fbc4 <bt_init+0x39c>
		return -ENOBUFS;
    fbbe:	f06f 0468 	mvn.w	r4, #104	; 0x68
    fbc2:	e6b6      	b.n	f932 <bt_init+0x10a>
    fbc4:	2102      	movs	r1, #2
    fbc6:	3008      	adds	r0, #8
    fbc8:	f00d fd6c 	bl	1d6a4 <net_buf_simple_add>
		cp_le->le = 0x01;
    fbcc:	2301      	movs	r3, #1
    fbce:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    fbd0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    fbd2:	4621      	mov	r1, r4
    fbd4:	4632      	mov	r2, r6
    fbd6:	f640 406d 	movw	r0, #3181	; 0xc6d
    fbda:	f006 fba5 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
    fbde:	4604      	mov	r4, r0
    fbe0:	2800      	cmp	r0, #0
    fbe2:	f43f aee7 	beq.w	f9b4 <bt_init+0x18c>
    fbe6:	e6a4      	b.n	f932 <bt_init+0x10a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    fbe8:	4809      	ldr	r0, [pc, #36]	; (fc10 <bt_init+0x3e8>)
    fbea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    fbee:	e7ab      	b.n	fb48 <bt_init+0x320>
    fbf0:	02008890 	.word	0x02008890
    fbf4:	20008000 	.word	0x20008000
    fbf8:	20000358 	.word	0x20000358
    fbfc:	20000388 	.word	0x20000388
    fc00:	0002cce8 	.word	0x0002cce8
    fc04:	0002ccb8 	.word	0x0002ccb8
    fc08:	0002f795 	.word	0x0002f795
    fc0c:	0002f869 	.word	0x0002f869
    fc10:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    fc14:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    fc16:	4839      	ldr	r0, [pc, #228]	; (fcfc <bt_init+0x4d4>)
	rp.info = (void *)rsp->data;
    fc18:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    fc1a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    fc1e:	2a03      	cmp	r2, #3
		return plat_str[platform];
    fc20:	bf96      	itet	ls
    fc22:	4937      	ldrls	r1, [pc, #220]	; (fd00 <bt_init+0x4d8>)
	return "unknown";
    fc24:	4937      	ldrhi	r1, [pc, #220]	; (fd04 <bt_init+0x4dc>)
		return plat_str[platform];
    fc26:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    fc2a:	f046 0303 	orr.w	r3, r6, #3
    fc2e:	f017 ff56 	bl	27ade <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    fc32:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    fc36:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    fc3a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    fc3c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    fc40:	d12e      	bne.n	fca0 <bt_init+0x478>
	if (variant < ARRAY_SIZE(nordic_str)) {
    fc42:	2a03      	cmp	r2, #3
    fc44:	d82c      	bhi.n	fca0 <bt_init+0x478>
		return nordic_str[variant];
    fc46:	4930      	ldr	r1, [pc, #192]	; (fd08 <bt_init+0x4e0>)
    fc48:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    fc4c:	482f      	ldr	r0, [pc, #188]	; (fd0c <bt_init+0x4e4>)
    fc4e:	f017 ff46 	bl	27ade <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    fc52:	7962      	ldrb	r2, [r4, #5]
    fc54:	482e      	ldr	r0, [pc, #184]	; (fd10 <bt_init+0x4e8>)
	if (variant < ARRAY_SIZE(var_str)) {
    fc56:	2a03      	cmp	r2, #3
		return var_str[variant];
    fc58:	bf96      	itet	ls
    fc5a:	492e      	ldrls	r1, [pc, #184]	; (fd14 <bt_init+0x4ec>)
	return "unknown";
    fc5c:	4929      	ldrhi	r1, [pc, #164]	; (fd04 <bt_init+0x4dc>)
		return var_str[variant];
    fc5e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    fc62:	e9cd 1203 	strd	r1, r2, [sp, #12]
    fc66:	79a2      	ldrb	r2, [r4, #6]
    fc68:	9205      	str	r2, [sp, #20]
    fc6a:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    fc6e:	9206      	str	r2, [sp, #24]
    fc70:	f8d4 2009 	ldr.w	r2, [r4, #9]
    fc74:	9207      	str	r2, [sp, #28]
    fc76:	f046 0303 	orr.w	r3, r6, #3
    fc7a:	2205      	movs	r2, #5
    fc7c:	a903      	add	r1, sp, #12
    fc7e:	f017 ff63 	bl	27b48 <log_n>
	net_buf_unref(rsp);
    fc82:	9802      	ldr	r0, [sp, #8]
    fc84:	f00d fbde 	bl	1d444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    fc88:	aa02      	add	r2, sp, #8
    fc8a:	2100      	movs	r1, #0
    fc8c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    fc90:	f006 fb4a 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
    fc94:	4604      	mov	r4, r0
    fc96:	b128      	cbz	r0, fca4 <bt_init+0x47c>
		BT_WARN("Failed to read supported vendor commands");
    fc98:	481f      	ldr	r0, [pc, #124]	; (fd18 <bt_init+0x4f0>)
    fc9a:	f046 0102 	orr.w	r1, r6, #2
    fc9e:	e76f      	b.n	fb80 <bt_init+0x358>
		return "unknown";
    fca0:	4918      	ldr	r1, [pc, #96]	; (fd04 <bt_init+0x4dc>)
    fca2:	e7d3      	b.n	fc4c <bt_init+0x424>
	rp.cmds = (void *)rsp->data;
    fca4:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    fca6:	481d      	ldr	r0, [pc, #116]	; (fd1c <bt_init+0x4f4>)
    fca8:	6899      	ldr	r1, [r3, #8]
    fcaa:	2202      	movs	r2, #2
    fcac:	3101      	adds	r1, #1
    fcae:	f019 fed4 	bl	29a5a <memcpy>
	net_buf_unref(rsp);
    fcb2:	9802      	ldr	r0, [sp, #8]
    fcb4:	f00d fbc6 	bl	1d444 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    fcb8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    fcbc:	075b      	lsls	r3, r3, #29
    fcbe:	f57f af61 	bpl.w	fb84 <bt_init+0x35c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    fcc2:	aa02      	add	r2, sp, #8
    fcc4:	4621      	mov	r1, r4
    fcc6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    fcca:	f006 fb2d 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
    fcce:	b118      	cbz	r0, fcd8 <bt_init+0x4b0>
			BT_WARN("Failed to read supported vendor features");
    fcd0:	4813      	ldr	r0, [pc, #76]	; (fd20 <bt_init+0x4f8>)
    fcd2:	f046 0102 	orr.w	r1, r6, #2
    fcd6:	e753      	b.n	fb80 <bt_init+0x358>
		rp.feat = (void *)rsp->data;
    fcd8:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    fcda:	4812      	ldr	r0, [pc, #72]	; (fd24 <bt_init+0x4fc>)
    fcdc:	6899      	ldr	r1, [r3, #8]
    fcde:	2201      	movs	r2, #1
    fce0:	4411      	add	r1, r2
    fce2:	f019 feba 	bl	29a5a <memcpy>
		net_buf_unref(rsp);
    fce6:	9802      	ldr	r0, [sp, #8]
    fce8:	f00d fbac 	bl	1d444 <net_buf_unref>
    fcec:	e74a      	b.n	fb84 <bt_init+0x35c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fcee:	2104      	movs	r1, #4
    fcf0:	480d      	ldr	r0, [pc, #52]	; (fd28 <bt_init+0x500>)
    fcf2:	f01a f80a 	bl	29d0a <atomic_or>
	bt_finalize_init();
    fcf6:	f006 fe4d 	bl	16994 <bt_finalize_init>
	return 0;
    fcfa:	e61a      	b.n	f932 <bt_init+0x10a>
    fcfc:	0002f7b9 	.word	0x0002f7b9
    fd00:	0002d320 	.word	0x0002d320
    fd04:	0002f2a6 	.word	0x0002f2a6
    fd08:	0002d2e0 	.word	0x0002d2e0
    fd0c:	0002f7d2 	.word	0x0002f7d2
    fd10:	0002f7ea 	.word	0x0002f7ea
    fd14:	0002d358 	.word	0x0002d358
    fd18:	0002f817 	.word	0x0002f817
    fd1c:	2000033d 	.word	0x2000033d
    fd20:	0002f840 	.word	0x0002f840
    fd24:	2000033c 	.word	0x2000033c
    fd28:	20000350 	.word	0x20000350

0000fd2c <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    fd2c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    fd2e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    fd30:	b08a      	sub	sp, #40	; 0x28
    fd32:	4604      	mov	r4, r0
    fd34:	460e      	mov	r6, r1
    fd36:	ad07      	add	r5, sp, #28
    fd38:	2b03      	cmp	r3, #3
    fd3a:	d820      	bhi.n	fd7e <bt_addr_le_to_str.constprop.0+0x52>
    fd3c:	e8df f003 	tbb	[pc, r3]
    fd40:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fd44:	4911      	ldr	r1, [pc, #68]	; (fd8c <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    fd46:	4628      	mov	r0, r5
    fd48:	f019 fe18 	bl	2997c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fd4c:	7863      	ldrb	r3, [r4, #1]
    fd4e:	9304      	str	r3, [sp, #16]
    fd50:	78a3      	ldrb	r3, [r4, #2]
    fd52:	9303      	str	r3, [sp, #12]
    fd54:	78e3      	ldrb	r3, [r4, #3]
    fd56:	9302      	str	r3, [sp, #8]
    fd58:	7923      	ldrb	r3, [r4, #4]
    fd5a:	9301      	str	r3, [sp, #4]
    fd5c:	7963      	ldrb	r3, [r4, #5]
    fd5e:	9300      	str	r3, [sp, #0]
    fd60:	4a0b      	ldr	r2, [pc, #44]	; (fd90 <bt_addr_le_to_str.constprop.0+0x64>)
    fd62:	79a3      	ldrb	r3, [r4, #6]
    fd64:	9505      	str	r5, [sp, #20]
    fd66:	211e      	movs	r1, #30
    fd68:	4630      	mov	r0, r6
    fd6a:	f017 fbd1 	bl	27510 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    fd6e:	b00a      	add	sp, #40	; 0x28
    fd70:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fd72:	4908      	ldr	r1, [pc, #32]	; (fd94 <bt_addr_le_to_str.constprop.0+0x68>)
    fd74:	e7e7      	b.n	fd46 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    fd76:	4908      	ldr	r1, [pc, #32]	; (fd98 <bt_addr_le_to_str.constprop.0+0x6c>)
    fd78:	e7e5      	b.n	fd46 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    fd7a:	4908      	ldr	r1, [pc, #32]	; (fd9c <bt_addr_le_to_str.constprop.0+0x70>)
    fd7c:	e7e3      	b.n	fd46 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fd7e:	4a08      	ldr	r2, [pc, #32]	; (fda0 <bt_addr_le_to_str.constprop.0+0x74>)
    fd80:	210a      	movs	r1, #10
    fd82:	4628      	mov	r0, r5
    fd84:	f017 fbc4 	bl	27510 <snprintk>
		break;
    fd88:	e7e0      	b.n	fd4c <bt_addr_le_to_str.constprop.0+0x20>
    fd8a:	bf00      	nop
    fd8c:	0002d8db 	.word	0x0002d8db
    fd90:	0002d8fd 	.word	0x0002d8fd
    fd94:	0002d8e2 	.word	0x0002d8e2
    fd98:	0002d8e9 	.word	0x0002d8e9
    fd9c:	0002d8f3 	.word	0x0002d8f3
    fda0:	00030943 	.word	0x00030943

0000fda4 <connected>:

	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
}

static void connected(struct bt_conn *conn, uint8_t err)
{
    fda4:	b530      	push	{r4, r5, lr}
    fda6:	4a13      	ldr	r2, [pc, #76]	; (fdf4 <connected+0x50>)
    fda8:	4c13      	ldr	r4, [pc, #76]	; (fdf8 <connected+0x54>)
    fdaa:	1aa4      	subs	r4, r4, r2
    fdac:	08e4      	lsrs	r4, r4, #3
    fdae:	b089      	sub	sp, #36	; 0x24
    fdb0:	4605      	mov	r5, r0
    fdb2:	01a4      	lsls	r4, r4, #6
	char addr[BT_ADDR_LE_STR_LEN];

	if (err) {
    fdb4:	b131      	cbz	r1, fdc4 <connected+0x20>
		LOG_ERR("Connection failed (err %u)", err);
    fdb6:	4811      	ldr	r0, [pc, #68]	; (fdfc <connected+0x58>)
    fdb8:	f044 0201 	orr.w	r2, r4, #1
    fdbc:	f017 fe7b 	bl	27ab6 <log_1>
	LOG_INF("Connected %s", log_strdup(addr));

	current_conn = bt_conn_ref(conn);

	dk_set_led_on(CON_STATUS_LED);
}
    fdc0:	b009      	add	sp, #36	; 0x24
    fdc2:	bd30      	pop	{r4, r5, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fdc4:	f01a fb07 	bl	2a3d6 <bt_conn_get_dst>
    fdc8:	4669      	mov	r1, sp
    fdca:	f7ff ffaf 	bl	fd2c <bt_addr_le_to_str.constprop.0>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    fdce:	4668      	mov	r0, sp
    fdd0:	f001 fe20 	bl	11a14 <z_log_strdup>
	LOG_INF("Connected %s", log_strdup(addr));
    fdd4:	f044 0403 	orr.w	r4, r4, #3
    fdd8:	4601      	mov	r1, r0
    fdda:	4622      	mov	r2, r4
    fddc:	4808      	ldr	r0, [pc, #32]	; (fe00 <connected+0x5c>)
    fdde:	f017 fe6a 	bl	27ab6 <log_1>
	current_conn = bt_conn_ref(conn);
    fde2:	4628      	mov	r0, r5
    fde4:	f01a fa38 	bl	2a258 <bt_conn_ref>
    fde8:	4b06      	ldr	r3, [pc, #24]	; (fe04 <connected+0x60>)
    fdea:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
    fdec:	2001      	movs	r0, #1
    fdee:	f01c fae6 	bl	2c3be <dk_set_led_on>
    fdf2:	e7e5      	b.n	fdc0 <connected+0x1c>
    fdf4:	0002ccb8 	.word	0x0002ccb8
    fdf8:	0002cd88 	.word	0x0002cd88
    fdfc:	0002d920 	.word	0x0002d920
    fe00:	0002d93b 	.word	0x0002d93b
    fe04:	20002960 	.word	0x20002960

0000fe08 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    fe08:	b530      	push	{r4, r5, lr}
    fe0a:	b089      	sub	sp, #36	; 0x24
    fe0c:	460d      	mov	r5, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fe0e:	f01a fae2 	bl	2a3d6 <bt_conn_get_dst>
    fe12:	4669      	mov	r1, sp
    fe14:	f7ff ff8a 	bl	fd2c <bt_addr_le_to_str.constprop.0>
    fe18:	4c11      	ldr	r4, [pc, #68]	; (fe60 <disconnected+0x58>)
    fe1a:	4b12      	ldr	r3, [pc, #72]	; (fe64 <disconnected+0x5c>)
    fe1c:	1ae4      	subs	r4, r4, r3
    fe1e:	08e4      	lsrs	r4, r4, #3
    fe20:	4668      	mov	r0, sp
    fe22:	f001 fdf7 	bl	11a14 <z_log_strdup>

	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr), reason);
    fe26:	01a4      	lsls	r4, r4, #6
    fe28:	f044 0403 	orr.w	r4, r4, #3
    fe2c:	4623      	mov	r3, r4

	if (auth_conn) {
    fe2e:	4c0e      	ldr	r4, [pc, #56]	; (fe68 <disconnected+0x60>)
    fe30:	4601      	mov	r1, r0
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr), reason);
    fe32:	462a      	mov	r2, r5
    fe34:	480d      	ldr	r0, [pc, #52]	; (fe6c <disconnected+0x64>)
    fe36:	f017 fe52 	bl	27ade <log_2>
	if (auth_conn) {
    fe3a:	6820      	ldr	r0, [r4, #0]
    fe3c:	b118      	cbz	r0, fe46 <disconnected+0x3e>
		bt_conn_unref(auth_conn);
    fe3e:	f008 f8a1 	bl	17f84 <bt_conn_unref>
		auth_conn = NULL;
    fe42:	2300      	movs	r3, #0
    fe44:	6023      	str	r3, [r4, #0]
	}

	if (current_conn) {
    fe46:	4c0a      	ldr	r4, [pc, #40]	; (fe70 <disconnected+0x68>)
    fe48:	6820      	ldr	r0, [r4, #0]
    fe4a:	b130      	cbz	r0, fe5a <disconnected+0x52>
		bt_conn_unref(current_conn);
    fe4c:	f008 f89a 	bl	17f84 <bt_conn_unref>
		current_conn = NULL;
    fe50:	2300      	movs	r3, #0
		dk_set_led_off(CON_STATUS_LED);
    fe52:	2001      	movs	r0, #1
		current_conn = NULL;
    fe54:	6023      	str	r3, [r4, #0]
		dk_set_led_off(CON_STATUS_LED);
    fe56:	f01c fab5 	bl	2c3c4 <dk_set_led_off>
	}
}
    fe5a:	b009      	add	sp, #36	; 0x24
    fe5c:	bd30      	pop	{r4, r5, pc}
    fe5e:	bf00      	nop
    fe60:	0002cd88 	.word	0x0002cd88
    fe64:	0002ccb8 	.word	0x0002ccb8
    fe68:	20002958 	.word	0x20002958
    fe6c:	0002d948 	.word	0x0002d948
    fe70:	20002960 	.word	0x20002960

0000fe74 <security_changed>:

#ifdef CONFIG_BT_NUS_SECURITY_ENABLED
static void security_changed(struct bt_conn *conn, bt_security_t level,
			     enum bt_security_err err)
{
    fe74:	b570      	push	{r4, r5, r6, lr}
    fe76:	b08a      	sub	sp, #40	; 0x28
    fe78:	460d      	mov	r5, r1
    fe7a:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fe7c:	f01a faab 	bl	2a3d6 <bt_conn_get_dst>
    fe80:	a902      	add	r1, sp, #8
    fe82:	f7ff ff53 	bl	fd2c <bt_addr_le_to_str.constprop.0>

	if (!err) {
    fe86:	4810      	ldr	r0, [pc, #64]	; (fec8 <security_changed+0x54>)
    fe88:	4b10      	ldr	r3, [pc, #64]	; (fecc <security_changed+0x58>)
    fe8a:	1ac0      	subs	r0, r0, r3
    fe8c:	08c0      	lsrs	r0, r0, #3
    fe8e:	0180      	lsls	r0, r0, #6
    fe90:	b966      	cbnz	r6, feac <security_changed+0x38>
		LOG_INF("Security changed: %s level %u", log_strdup(addr),
    fe92:	f040 0403 	orr.w	r4, r0, #3
    fe96:	a802      	add	r0, sp, #8
    fe98:	f001 fdbc 	bl	11a14 <z_log_strdup>
    fe9c:	4623      	mov	r3, r4
    fe9e:	4601      	mov	r1, r0
    fea0:	462a      	mov	r2, r5
    fea2:	480b      	ldr	r0, [pc, #44]	; (fed0 <security_changed+0x5c>)
    fea4:	f017 fe1b 	bl	27ade <log_2>
			level);
	} else {
		LOG_WRN("Security failed: %s level %u err %d", log_strdup(addr),
			level, err);
	}
}
    fea8:	b00a      	add	sp, #40	; 0x28
    feaa:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", log_strdup(addr),
    feac:	f040 0402 	orr.w	r4, r0, #2
    feb0:	a802      	add	r0, sp, #8
    feb2:	f001 fdaf 	bl	11a14 <z_log_strdup>
    feb6:	f8ad 4000 	strh.w	r4, [sp]
    feba:	4601      	mov	r1, r0
    febc:	4633      	mov	r3, r6
    febe:	4805      	ldr	r0, [pc, #20]	; (fed4 <security_changed+0x60>)
    fec0:	462a      	mov	r2, r5
    fec2:	f017 fe25 	bl	27b10 <log_3>
}
    fec6:	e7ef      	b.n	fea8 <security_changed+0x34>
    fec8:	0002cd88 	.word	0x0002cd88
    fecc:	0002ccb8 	.word	0x0002ccb8
    fed0:	0002d965 	.word	0x0002d965
    fed4:	0002d983 	.word	0x0002d983

0000fed8 <auth_passkey_confirm>:

	LOG_INF("Passkey for %s: %06u", log_strdup(addr), passkey);
}

static void auth_passkey_confirm(struct bt_conn *conn, unsigned int passkey)
{
    fed8:	b530      	push	{r4, r5, lr}
    feda:	b089      	sub	sp, #36	; 0x24
    fedc:	460d      	mov	r5, r1
    fede:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	auth_conn = bt_conn_ref(conn);
    fee0:	f01a f9ba 	bl	2a258 <bt_conn_ref>
    fee4:	4b0e      	ldr	r3, [pc, #56]	; (ff20 <auth_passkey_confirm+0x48>)
    fee6:	6018      	str	r0, [r3, #0]

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fee8:	4620      	mov	r0, r4
    feea:	f01a fa74 	bl	2a3d6 <bt_conn_get_dst>
    feee:	4669      	mov	r1, sp
    fef0:	f7ff ff1c 	bl	fd2c <bt_addr_le_to_str.constprop.0>
    fef4:	4c0b      	ldr	r4, [pc, #44]	; (ff24 <auth_passkey_confirm+0x4c>)
    fef6:	4b0c      	ldr	r3, [pc, #48]	; (ff28 <auth_passkey_confirm+0x50>)
    fef8:	4668      	mov	r0, sp
    fefa:	1ae4      	subs	r4, r4, r3
    fefc:	08e4      	lsrs	r4, r4, #3
    fefe:	f001 fd89 	bl	11a14 <z_log_strdup>

	LOG_INF("Passkey for %s: %06u", log_strdup(addr), passkey);
    ff02:	01a4      	lsls	r4, r4, #6
    ff04:	f044 0403 	orr.w	r4, r4, #3
    ff08:	4601      	mov	r1, r0
    ff0a:	4623      	mov	r3, r4
    ff0c:	462a      	mov	r2, r5
    ff0e:	4807      	ldr	r0, [pc, #28]	; (ff2c <auth_passkey_confirm+0x54>)
    ff10:	f017 fde5 	bl	27ade <log_2>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    ff14:	4806      	ldr	r0, [pc, #24]	; (ff30 <auth_passkey_confirm+0x58>)
    ff16:	4621      	mov	r1, r4
    ff18:	f017 fdc0 	bl	27a9c <log_0>
}
    ff1c:	b009      	add	sp, #36	; 0x24
    ff1e:	bd30      	pop	{r4, r5, pc}
    ff20:	20002958 	.word	0x20002958
    ff24:	0002cd88 	.word	0x0002cd88
    ff28:	0002ccb8 	.word	0x0002ccb8
    ff2c:	0002d9a7 	.word	0x0002d9a7
    ff30:	0002d9bc 	.word	0x0002d9bc

0000ff34 <pairing_confirm>:
	LOG_INF("Pairing cancelled: %s", log_strdup(addr));
}


static void pairing_confirm(struct bt_conn *conn)
{
    ff34:	b510      	push	{r4, lr}
    ff36:	b088      	sub	sp, #32
    ff38:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ff3a:	f01a fa4c 	bl	2a3d6 <bt_conn_get_dst>
    ff3e:	4669      	mov	r1, sp
    ff40:	f7ff fef4 	bl	fd2c <bt_addr_le_to_str.constprop.0>

	bt_conn_auth_pairing_confirm(conn);
    ff44:	4620      	mov	r0, r4
    ff46:	f008 fc1b 	bl	18780 <bt_conn_auth_pairing_confirm>
    ff4a:	4c08      	ldr	r4, [pc, #32]	; (ff6c <pairing_confirm+0x38>)
    ff4c:	4a08      	ldr	r2, [pc, #32]	; (ff70 <pairing_confirm+0x3c>)
    ff4e:	4668      	mov	r0, sp
    ff50:	1aa4      	subs	r4, r4, r2
    ff52:	08e4      	lsrs	r4, r4, #3
    ff54:	f001 fd5e 	bl	11a14 <z_log_strdup>

	LOG_INF("Pairing confirmed: %s", log_strdup(addr));
    ff58:	01a4      	lsls	r4, r4, #6
    ff5a:	f044 0403 	orr.w	r4, r4, #3
    ff5e:	4601      	mov	r1, r0
    ff60:	4622      	mov	r2, r4
    ff62:	4804      	ldr	r0, [pc, #16]	; (ff74 <pairing_confirm+0x40>)
    ff64:	f017 fda7 	bl	27ab6 <log_1>
}
    ff68:	b008      	add	sp, #32
    ff6a:	bd10      	pop	{r4, pc}
    ff6c:	0002cd88 	.word	0x0002cd88
    ff70:	0002ccb8 	.word	0x0002ccb8
    ff74:	0002d9eb 	.word	0x0002d9eb

0000ff78 <auth_passkey_display>:
{
    ff78:	b530      	push	{r4, r5, lr}
    ff7a:	b089      	sub	sp, #36	; 0x24
    ff7c:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ff7e:	f01a fa2a 	bl	2a3d6 <bt_conn_get_dst>
    ff82:	4669      	mov	r1, sp
    ff84:	f7ff fed2 	bl	fd2c <bt_addr_le_to_str.constprop.0>
    ff88:	4c08      	ldr	r4, [pc, #32]	; (ffac <auth_passkey_display+0x34>)
    ff8a:	4b09      	ldr	r3, [pc, #36]	; (ffb0 <auth_passkey_display+0x38>)
    ff8c:	4668      	mov	r0, sp
    ff8e:	1ae4      	subs	r4, r4, r3
    ff90:	08e4      	lsrs	r4, r4, #3
    ff92:	f001 fd3f 	bl	11a14 <z_log_strdup>
	LOG_INF("Passkey for %s: %06u", log_strdup(addr), passkey);
    ff96:	01a4      	lsls	r4, r4, #6
    ff98:	f044 0403 	orr.w	r4, r4, #3
    ff9c:	4601      	mov	r1, r0
    ff9e:	4623      	mov	r3, r4
    ffa0:	4804      	ldr	r0, [pc, #16]	; (ffb4 <auth_passkey_display+0x3c>)
    ffa2:	462a      	mov	r2, r5
    ffa4:	f017 fd9b 	bl	27ade <log_2>
}
    ffa8:	b009      	add	sp, #36	; 0x24
    ffaa:	bd30      	pop	{r4, r5, pc}
    ffac:	0002cd88 	.word	0x0002cd88
    ffb0:	0002ccb8 	.word	0x0002ccb8
    ffb4:	0002d9a7 	.word	0x0002d9a7

0000ffb8 <pairing_complete>:


static void pairing_complete(struct bt_conn *conn, bool bonded)
{
    ffb8:	b530      	push	{r4, r5, lr}
    ffba:	b089      	sub	sp, #36	; 0x24
    ffbc:	460d      	mov	r5, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ffbe:	f01a fa0a 	bl	2a3d6 <bt_conn_get_dst>
    ffc2:	4669      	mov	r1, sp
    ffc4:	f7ff feb2 	bl	fd2c <bt_addr_le_to_str.constprop.0>
    ffc8:	4c08      	ldr	r4, [pc, #32]	; (ffec <pairing_complete+0x34>)
    ffca:	4b09      	ldr	r3, [pc, #36]	; (fff0 <pairing_complete+0x38>)
    ffcc:	4668      	mov	r0, sp
    ffce:	1ae4      	subs	r4, r4, r3
    ffd0:	08e4      	lsrs	r4, r4, #3
    ffd2:	f001 fd1f 	bl	11a14 <z_log_strdup>

	LOG_INF("Pairing completed: %s, bonded: %d", log_strdup(addr),
    ffd6:	01a4      	lsls	r4, r4, #6
    ffd8:	f044 0403 	orr.w	r4, r4, #3
    ffdc:	4601      	mov	r1, r0
    ffde:	4623      	mov	r3, r4
    ffe0:	4804      	ldr	r0, [pc, #16]	; (fff4 <pairing_complete+0x3c>)
    ffe2:	462a      	mov	r2, r5
    ffe4:	f017 fd7b 	bl	27ade <log_2>
		bonded);
}
    ffe8:	b009      	add	sp, #36	; 0x24
    ffea:	bd30      	pop	{r4, r5, pc}
    ffec:	0002cd88 	.word	0x0002cd88
    fff0:	0002ccb8 	.word	0x0002ccb8
    fff4:	0002da01 	.word	0x0002da01

0000fff8 <pairing_failed>:


static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
    fff8:	b530      	push	{r4, r5, lr}
    fffa:	b089      	sub	sp, #36	; 0x24
    fffc:	460d      	mov	r5, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fffe:	f01a f9ea 	bl	2a3d6 <bt_conn_get_dst>
   10002:	4669      	mov	r1, sp
   10004:	f7ff fe92 	bl	fd2c <bt_addr_le_to_str.constprop.0>
   10008:	4c08      	ldr	r4, [pc, #32]	; (1002c <pairing_failed+0x34>)
   1000a:	4b09      	ldr	r3, [pc, #36]	; (10030 <pairing_failed+0x38>)
   1000c:	4668      	mov	r0, sp
   1000e:	1ae4      	subs	r4, r4, r3
   10010:	08e4      	lsrs	r4, r4, #3
   10012:	f001 fcff 	bl	11a14 <z_log_strdup>

	LOG_INF("Pairing failed conn: %s, reason %d", log_strdup(addr),
   10016:	01a4      	lsls	r4, r4, #6
   10018:	f044 0403 	orr.w	r4, r4, #3
   1001c:	4601      	mov	r1, r0
   1001e:	4623      	mov	r3, r4
   10020:	4804      	ldr	r0, [pc, #16]	; (10034 <pairing_failed+0x3c>)
   10022:	462a      	mov	r2, r5
   10024:	f017 fd5b 	bl	27ade <log_2>
		reason);
}
   10028:	b009      	add	sp, #36	; 0x24
   1002a:	bd30      	pop	{r4, r5, pc}
   1002c:	0002cd88 	.word	0x0002cd88
   10030:	0002ccb8 	.word	0x0002ccb8
   10034:	0002da23 	.word	0x0002da23

00010038 <auth_cancel>:
{
   10038:	b510      	push	{r4, lr}
   1003a:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1003c:	f01a f9cb 	bl	2a3d6 <bt_conn_get_dst>
   10040:	4669      	mov	r1, sp
   10042:	f7ff fe73 	bl	fd2c <bt_addr_le_to_str.constprop.0>
   10046:	4c08      	ldr	r4, [pc, #32]	; (10068 <auth_cancel+0x30>)
   10048:	4a08      	ldr	r2, [pc, #32]	; (1006c <auth_cancel+0x34>)
   1004a:	4668      	mov	r0, sp
   1004c:	1aa4      	subs	r4, r4, r2
   1004e:	08e4      	lsrs	r4, r4, #3
   10050:	f001 fce0 	bl	11a14 <z_log_strdup>
	LOG_INF("Pairing cancelled: %s", log_strdup(addr));
   10054:	01a4      	lsls	r4, r4, #6
   10056:	f044 0403 	orr.w	r4, r4, #3
   1005a:	4601      	mov	r1, r0
   1005c:	4622      	mov	r2, r4
   1005e:	4804      	ldr	r0, [pc, #16]	; (10070 <auth_cancel+0x38>)
   10060:	f017 fd29 	bl	27ab6 <log_1>
}
   10064:	b008      	add	sp, #32
   10066:	bd10      	pop	{r4, pc}
   10068:	0002cd88 	.word	0x0002cd88
   1006c:	0002ccb8 	.word	0x0002ccb8
   10070:	0002da46 	.word	0x0002da46

00010074 <ble_write_thread>:
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}

void ble_write_thread(void)
{
   10074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   10078:	f04f 33ff 	mov.w	r3, #4294967295
   1007c:	4815      	ldr	r0, [pc, #84]	; (100d4 <ble_write_thread+0x60>)
   1007e:	4c16      	ldr	r4, [pc, #88]	; (100d8 <ble_write_thread+0x64>)
	return z_impl_k_queue_get(queue, timeout);
   10080:	f8df 8064 	ldr.w	r8, [pc, #100]	; 100e8 <ble_write_thread+0x74>
	return z_impl_k_sem_take(sem, timeout);
   10084:	f04f 32ff 	mov.w	r2, #4294967295
   10088:	f011 fc9c 	bl	219c4 <z_impl_k_sem_take>
   1008c:	4b13      	ldr	r3, [pc, #76]	; (100dc <ble_write_thread+0x68>)
   1008e:	1ae4      	subs	r4, r4, r3
   10090:	08e4      	lsrs	r4, r4, #3
		/* Wait indefinitely for data to be sent over bluetooth */
		struct uart_data_t *buf = k_fifo_get(&fifo_uart_rx_data,
						     K_FOREVER);

		int32_t ret = bt_nus_send(NULL, buf->data, buf->len);
		LOG_INF("%d",ret);
   10092:	01a4      	lsls	r4, r4, #6
   10094:	f044 0703 	orr.w	r7, r4, #3
	return z_impl_k_queue_get(queue, timeout);
   10098:	f04f 32ff 	mov.w	r2, #4294967295
   1009c:	f04f 33ff 	mov.w	r3, #4294967295
   100a0:	4640      	mov	r0, r8
   100a2:	f011 fbdf 	bl	21864 <z_impl_k_queue_get>
		int32_t ret = bt_nus_send(NULL, buf->data, buf->len);
   100a6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   100a8:	1d01      	adds	r1, r0, #4
   100aa:	4605      	mov	r5, r0
   100ac:	2000      	movs	r0, #0
   100ae:	f003 fde9 	bl	13c84 <bt_nus_send>
		LOG_INF("%d",ret);
   100b2:	463a      	mov	r2, r7
		int32_t ret = bt_nus_send(NULL, buf->data, buf->len);
   100b4:	4606      	mov	r6, r0
		LOG_INF("%d",ret);
   100b6:	4601      	mov	r1, r0
   100b8:	4809      	ldr	r0, [pc, #36]	; (100e0 <ble_write_thread+0x6c>)
   100ba:	f017 fcfc 	bl	27ab6 <log_1>
		if (ret) {
   100be:	b126      	cbz	r6, 100ca <ble_write_thread+0x56>
			LOG_WRN("Failed to send data over BLE connection");
   100c0:	4808      	ldr	r0, [pc, #32]	; (100e4 <ble_write_thread+0x70>)
   100c2:	f044 0102 	orr.w	r1, r4, #2
   100c6:	f017 fce9 	bl	27a9c <log_0>
		}

		k_free(buf);
   100ca:	4628      	mov	r0, r5
   100cc:	f01c fc03 	bl	2c8d6 <k_free>
	for (;;) {
   100d0:	e7e2      	b.n	10098 <ble_write_thread+0x24>
   100d2:	bf00      	nop
   100d4:	20000844 	.word	0x20000844
   100d8:	0002cd88 	.word	0x0002cd88
   100dc:	0002ccb8 	.word	0x0002ccb8
   100e0:	000314f0 	.word	0x000314f0
   100e4:	0002da5c 	.word	0x0002da5c
   100e8:	200008d4 	.word	0x200008d4

000100ec <bt_receive_cb>:
{
   100ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   100f0:	2400      	movs	r4, #0
{
   100f2:	b08b      	sub	sp, #44	; 0x2c
   100f4:	4605      	mov	r5, r0
   100f6:	4688      	mov	r8, r1
   100f8:	4617      	mov	r7, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   100fa:	4621      	mov	r1, r4
   100fc:	221a      	movs	r2, #26
   100fe:	a803      	add	r0, sp, #12
   10100:	9402      	str	r4, [sp, #8]
   10102:	f019 fcb5 	bl	29a70 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
   10106:	4628      	mov	r0, r5
   10108:	f01a f965 	bl	2a3d6 <bt_conn_get_dst>
   1010c:	a902      	add	r1, sp, #8
   1010e:	f7ff fe0d 	bl	fd2c <bt_addr_le_to_str.constprop.0>
   10112:	4e29      	ldr	r6, [pc, #164]	; (101b8 <bt_receive_cb+0xcc>)
   10114:	4b29      	ldr	r3, [pc, #164]	; (101bc <bt_receive_cb+0xd0>)
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   10116:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 101c8 <bt_receive_cb+0xdc>
			k_fifo_put(&fifo_uart_tx_data, tx);
   1011a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 101cc <bt_receive_cb+0xe0>
   1011e:	1af6      	subs	r6, r6, r3
   10120:	08f6      	lsrs	r6, r6, #3
	LOG_INF("Received data from: %s", log_strdup(addr));
   10122:	01b3      	lsls	r3, r6, #6
   10124:	a802      	add	r0, sp, #8
   10126:	f043 0503 	orr.w	r5, r3, #3
   1012a:	9301      	str	r3, [sp, #4]
   1012c:	f001 fc72 	bl	11a14 <z_log_strdup>
   10130:	462a      	mov	r2, r5
   10132:	4601      	mov	r1, r0
   10134:	4822      	ldr	r0, [pc, #136]	; (101c0 <bt_receive_cb+0xd4>)
   10136:	f017 fcbe 	bl	27ab6 <log_1>
	for (uint16_t pos = 0; pos != len;) {
   1013a:	42a7      	cmp	r7, r4
   1013c:	d00a      	beq.n	10154 <bt_receive_cb+0x68>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   1013e:	2030      	movs	r0, #48	; 0x30
   10140:	f01c fbd0 	bl	2c8e4 <k_malloc>
		if (!tx) {
   10144:	4605      	mov	r5, r0
   10146:	b940      	cbnz	r0, 1015a <bt_receive_cb+0x6e>
			LOG_WRN("Not able to allocate UART send data buffer");
   10148:	9b01      	ldr	r3, [sp, #4]
   1014a:	481e      	ldr	r0, [pc, #120]	; (101c4 <bt_receive_cb+0xd8>)
   1014c:	f043 0102 	orr.w	r1, r3, #2
   10150:	f017 fca4 	bl	27a9c <log_0>
}
   10154:	b00b      	add	sp, #44	; 0x2c
   10156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((len - pos) > tx_data_size) {
   1015a:	1b3a      	subs	r2, r7, r4
   1015c:	2a27      	cmp	r2, #39	; 0x27
			tx->len = (len - pos);
   1015e:	bf94      	ite	ls
   10160:	b292      	uxthls	r2, r2
			tx->len = tx_data_size;
   10162:	2227      	movhi	r2, #39	; 0x27
		memcpy(tx->data, &data[pos], tx->len);
   10164:	f100 0904 	add.w	r9, r0, #4
   10168:	8582      	strh	r2, [r0, #44]	; 0x2c
   1016a:	eb08 0104 	add.w	r1, r8, r4
   1016e:	4648      	mov	r0, r9
   10170:	f019 fc73 	bl	29a5a <memcpy>
		pos += tx->len;
   10174:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10176:	441c      	add	r4, r3
   10178:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
   1017a:	42bc      	cmp	r4, r7
   1017c:	d10a      	bne.n	10194 <bt_receive_cb+0xa8>
   1017e:	eb08 0204 	add.w	r2, r8, r4
   10182:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   10186:	2a0d      	cmp	r2, #13
   10188:	d104      	bne.n	10194 <bt_receive_cb+0xa8>
			tx->data[tx->len] = '\n';
   1018a:	18ea      	adds	r2, r5, r3
   1018c:	210a      	movs	r1, #10
			tx->len++;
   1018e:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
   10190:	7111      	strb	r1, [r2, #4]
			tx->len++;
   10192:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   10194:	f8db 0000 	ldr.w	r0, [fp]
   10198:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
   1019a:	6883      	ldr	r3, [r0, #8]
   1019c:	685b      	ldr	r3, [r3, #4]
   1019e:	4649      	mov	r1, r9
   101a0:	461e      	mov	r6, r3
   101a2:	f04f 33ff 	mov.w	r3, #4294967295
   101a6:	47b0      	blx	r6
		if (err) {
   101a8:	2800      	cmp	r0, #0
   101aa:	d0c6      	beq.n	1013a <bt_receive_cb+0x4e>
			k_fifo_put(&fifo_uart_tx_data, tx);
   101ac:	4629      	mov	r1, r5
   101ae:	4650      	mov	r0, sl
   101b0:	f01c fa4e 	bl	2c650 <k_queue_append>
   101b4:	e7c1      	b.n	1013a <bt_receive_cb+0x4e>
   101b6:	bf00      	nop
   101b8:	0002cd88 	.word	0x0002cd88
   101bc:	0002ccb8 	.word	0x0002ccb8
   101c0:	0002da84 	.word	0x0002da84
   101c4:	0002da9b 	.word	0x0002da9b
   101c8:	20002964 	.word	0x20002964
   101cc:	200008f0 	.word	0x200008f0

000101d0 <uart_work_handler>:
{
   101d0:	b510      	push	{r4, lr}
	buf = k_malloc(sizeof(*buf));
   101d2:	2030      	movs	r0, #48	; 0x30
   101d4:	f01c fb86 	bl	2c8e4 <k_malloc>
	if (buf) {
   101d8:	4601      	mov	r1, r0
   101da:	b160      	cbz	r0, 101f6 <uart_work_handler+0x26>
		buf->len = 0;
   101dc:	2300      	movs	r3, #0
   101de:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   101e0:	4b0e      	ldr	r3, [pc, #56]	; (1021c <uart_work_handler+0x4c>)
   101e2:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
   101e4:	6883      	ldr	r3, [r0, #8]
   101e6:	68dc      	ldr	r4, [r3, #12]
   101e8:	2228      	movs	r2, #40	; 0x28
   101ea:	46a4      	mov	ip, r4
   101ec:	2332      	movs	r3, #50	; 0x32
}
   101ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101f2:	3104      	adds	r1, #4
   101f4:	4760      	bx	ip
   101f6:	4b0a      	ldr	r3, [pc, #40]	; (10220 <uart_work_handler+0x50>)
   101f8:	490a      	ldr	r1, [pc, #40]	; (10224 <uart_work_handler+0x54>)
		LOG_WRN("Not able to allocate UART receive buffer");
   101fa:	480b      	ldr	r0, [pc, #44]	; (10228 <uart_work_handler+0x58>)
   101fc:	1ac9      	subs	r1, r1, r3
   101fe:	08c9      	lsrs	r1, r1, #3
   10200:	0189      	lsls	r1, r1, #6
   10202:	f041 0102 	orr.w	r1, r1, #2
   10206:	f017 fc49 	bl	27a9c <log_0>
}
   1020a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   1020e:	4807      	ldr	r0, [pc, #28]	; (1022c <uart_work_handler+0x5c>)
   10210:	f240 6267 	movw	r2, #1639	; 0x667
   10214:	2300      	movs	r3, #0
   10216:	f012 b8cd 	b.w	223b4 <k_work_reschedule>
   1021a:	bf00      	nop
   1021c:	20002964 	.word	0x20002964
   10220:	0002ccb8 	.word	0x0002ccb8
   10224:	0002cd88 	.word	0x0002cd88
   10228:	0002dac6 	.word	0x0002dac6
   1022c:	200015e8 	.word	0x200015e8

00010230 <uart_cb>:
{
   10230:	b570      	push	{r4, r5, r6, lr}
   10232:	780b      	ldrb	r3, [r1, #0]
   10234:	460c      	mov	r4, r1
   10236:	2b05      	cmp	r3, #5
   10238:	f200 80aa 	bhi.w	10390 <uart_cb+0x160>
   1023c:	e8df f003 	tbb	[pc, r3]
   10240:	8134a903 	.word	0x8134a903
   10244:	5d9a      	.short	0x5d9a
		if ((evt->data.tx.len == 0) ||
   10246:	688b      	ldr	r3, [r1, #8]
   10248:	2b00      	cmp	r3, #0
   1024a:	f000 80a1 	beq.w	10390 <uart_cb+0x160>
		    (!evt->data.tx.buf)) {
   1024e:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
   10250:	2800      	cmp	r0, #0
   10252:	f000 809d 	beq.w	10390 <uart_cb+0x160>
		if (aborted_buf) {
   10256:	4a59      	ldr	r2, [pc, #356]	; (103bc <uart_cb+0x18c>)
   10258:	6813      	ldr	r3, [r2, #0]
   1025a:	b31b      	cbz	r3, 102a4 <uart_cb+0x74>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   1025c:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
   1025e:	2300      	movs	r3, #0
   10260:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   10262:	4a57      	ldr	r2, [pc, #348]	; (103c0 <uart_cb+0x190>)
   10264:	6013      	str	r3, [r2, #0]
		k_free(buf);
   10266:	f01c fb36 	bl	2c8d6 <k_free>
   1026a:	4856      	ldr	r0, [pc, #344]	; (103c4 <uart_cb+0x194>)
   1026c:	2200      	movs	r2, #0
   1026e:	2300      	movs	r3, #0
   10270:	f011 faf8 	bl	21864 <z_impl_k_queue_get>
		if (!buf) {
   10274:	2800      	cmp	r0, #0
   10276:	f000 808b 	beq.w	10390 <uart_cb+0x160>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   1027a:	4b53      	ldr	r3, [pc, #332]	; (103c8 <uart_cb+0x198>)
   1027c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1027e:	1d01      	adds	r1, r0, #4
   10280:	6818      	ldr	r0, [r3, #0]
   10282:	f017 f889 	bl	27398 <uart_tx.constprop.0>
   10286:	2800      	cmp	r0, #0
   10288:	f000 8082 	beq.w	10390 <uart_cb+0x160>
   1028c:	494f      	ldr	r1, [pc, #316]	; (103cc <uart_cb+0x19c>)
   1028e:	4b50      	ldr	r3, [pc, #320]	; (103d0 <uart_cb+0x1a0>)
			LOG_WRN("Failed to send data over UART");
   10290:	4850      	ldr	r0, [pc, #320]	; (103d4 <uart_cb+0x1a4>)
   10292:	1ac9      	subs	r1, r1, r3
   10294:	08c9      	lsrs	r1, r1, #3
   10296:	0189      	lsls	r1, r1, #6
   10298:	f041 0102 	orr.w	r1, r1, #2
}
   1029c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_WRN("Not able to allocate UART receive buffer");
   102a0:	f017 bbfc 	b.w	27a9c <log_0>
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
   102a4:	3804      	subs	r0, #4
   102a6:	e7de      	b.n	10266 <uart_cb+0x36>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   102a8:	6848      	ldr	r0, [r1, #4]
		buf->len += evt->data.rx.len;
   102aa:	68e2      	ldr	r2, [r4, #12]
   102ac:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   102ae:	4413      	add	r3, r2
   102b0:	b29b      	uxth	r3, r3
		buf_release = false;
   102b2:	4a49      	ldr	r2, [pc, #292]	; (103d8 <uart_cb+0x1a8>)
		buf->len += evt->data.rx.len;
   102b4:	8503      	strh	r3, [r0, #40]	; 0x28
		buf_release = false;
   102b6:	2500      	movs	r5, #0
		if (buf->len == UART_BUF_SIZE) {
   102b8:	2b28      	cmp	r3, #40	; 0x28
		buf_release = false;
   102ba:	7015      	strb	r5, [r2, #0]
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   102bc:	f1a0 0104 	sub.w	r1, r0, #4
		if (buf->len == UART_BUF_SIZE) {
   102c0:	4615      	mov	r5, r2
   102c2:	d104      	bne.n	102ce <uart_cb+0x9e>
}
   102c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
   102c8:	4844      	ldr	r0, [pc, #272]	; (103dc <uart_cb+0x1ac>)
   102ca:	f01c b9c1 	b.w	2c650 <k_queue_append>
		} else if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
   102ce:	4403      	add	r3, r0
   102d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   102d4:	2b0a      	cmp	r3, #10
   102d6:	d001      	beq.n	102dc <uart_cb+0xac>
   102d8:	2b0d      	cmp	r3, #13
   102da:	d159      	bne.n	10390 <uart_cb+0x160>
			k_fifo_put(&fifo_uart_rx_data, buf);
   102dc:	483f      	ldr	r0, [pc, #252]	; (103dc <uart_cb+0x1ac>)
   102de:	f01c f9b7 	bl	2c650 <k_queue_append>
			current_buf = evt->data.rx.buf;
   102e2:	4b3f      	ldr	r3, [pc, #252]	; (103e0 <uart_cb+0x1b0>)
   102e4:	6862      	ldr	r2, [r4, #4]
   102e6:	601a      	str	r2, [r3, #0]
			buf_release = true;
   102e8:	2301      	movs	r3, #1
   102ea:	702b      	strb	r3, [r5, #0]
			uart_rx_disable(uart);
   102ec:	4b36      	ldr	r3, [pc, #216]	; (103c8 <uart_cb+0x198>)
   102ee:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   102f0:	6883      	ldr	r3, [r0, #8]
}
   102f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   102f6:	695b      	ldr	r3, [r3, #20]
   102f8:	4718      	bx	r3
		buf = k_malloc(sizeof(*buf));
   102fa:	2030      	movs	r0, #48	; 0x30
   102fc:	f01c faf2 	bl	2c8e4 <k_malloc>
		if (buf) {
   10300:	4601      	mov	r1, r0
   10302:	b160      	cbz	r0, 1031e <uart_cb+0xee>
			buf->len = 0;
   10304:	2300      	movs	r3, #0
   10306:	8583      	strh	r3, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   10308:	4b2f      	ldr	r3, [pc, #188]	; (103c8 <uart_cb+0x198>)
   1030a:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   1030c:	6883      	ldr	r3, [r0, #8]
   1030e:	68dc      	ldr	r4, [r3, #12]
   10310:	2228      	movs	r2, #40	; 0x28
   10312:	46a4      	mov	ip, r4
   10314:	2332      	movs	r3, #50	; 0x32
}
   10316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1031a:	3104      	adds	r1, #4
   1031c:	4760      	bx	ip
   1031e:	4b2c      	ldr	r3, [pc, #176]	; (103d0 <uart_cb+0x1a0>)
   10320:	492a      	ldr	r1, [pc, #168]	; (103cc <uart_cb+0x19c>)
			LOG_WRN("Not able to allocate UART receive buffer");
   10322:	4830      	ldr	r0, [pc, #192]	; (103e4 <uart_cb+0x1b4>)
   10324:	1ac9      	subs	r1, r1, r3
   10326:	08c9      	lsrs	r1, r1, #3
   10328:	0189      	lsls	r1, r1, #6
   1032a:	f041 0102 	orr.w	r1, r1, #2
   1032e:	f017 fbb5 	bl	27a9c <log_0>
}
   10332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   10336:	482c      	ldr	r0, [pc, #176]	; (103e8 <uart_cb+0x1b8>)
   10338:	f240 6267 	movw	r2, #1639	; 0x667
   1033c:	2300      	movs	r3, #0
   1033e:	f012 b839 	b.w	223b4 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
   10342:	2030      	movs	r0, #48	; 0x30
   10344:	f01c face 	bl	2c8e4 <k_malloc>
		if (buf) {
   10348:	4601      	mov	r1, r0
   1034a:	b150      	cbz	r0, 10362 <uart_cb+0x132>
			buf->len = 0;
   1034c:	2300      	movs	r3, #0
   1034e:	8583      	strh	r3, [r0, #44]	; 0x2c
			uart_rx_buf_rsp(uart, buf->data, sizeof(buf->data));
   10350:	4b1d      	ldr	r3, [pc, #116]	; (103c8 <uart_cb+0x198>)
   10352:	6818      	ldr	r0, [r3, #0]
	return api->rx_buf_rsp(dev, buf, len);
   10354:	6883      	ldr	r3, [r0, #8]
}
   10356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1035a:	691b      	ldr	r3, [r3, #16]
   1035c:	2228      	movs	r2, #40	; 0x28
   1035e:	3104      	adds	r1, #4
   10360:	4718      	bx	r3
   10362:	491a      	ldr	r1, [pc, #104]	; (103cc <uart_cb+0x19c>)
   10364:	4b1a      	ldr	r3, [pc, #104]	; (103d0 <uart_cb+0x1a0>)
			LOG_WRN("Not able to allocate UART receive buffer");
   10366:	481f      	ldr	r0, [pc, #124]	; (103e4 <uart_cb+0x1b4>)
   10368:	1ac9      	subs	r1, r1, r3
   1036a:	08c9      	lsrs	r1, r1, #3
   1036c:	0189      	lsls	r1, r1, #6
   1036e:	f041 0102 	orr.w	r1, r1, #2
   10372:	e793      	b.n	1029c <uart_cb+0x6c>
		if (buf_release && (current_buf != evt->data.rx_buf.buf)) {
   10374:	4d18      	ldr	r5, [pc, #96]	; (103d8 <uart_cb+0x1a8>)
   10376:	782b      	ldrb	r3, [r5, #0]
   10378:	b153      	cbz	r3, 10390 <uart_cb+0x160>
   1037a:	4c19      	ldr	r4, [pc, #100]	; (103e0 <uart_cb+0x1b0>)
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
   1037c:	6848      	ldr	r0, [r1, #4]
		if (buf_release && (current_buf != evt->data.rx_buf.buf)) {
   1037e:	6823      	ldr	r3, [r4, #0]
   10380:	4298      	cmp	r0, r3
   10382:	d005      	beq.n	10390 <uart_cb+0x160>
			k_free(buf);
   10384:	3804      	subs	r0, #4
   10386:	f01c faa6 	bl	2c8d6 <k_free>
			buf_release = false;
   1038a:	2300      	movs	r3, #0
   1038c:	702b      	strb	r3, [r5, #0]
			current_buf = NULL;
   1038e:	6023      	str	r3, [r4, #0]
}
   10390:	bd70      	pop	{r4, r5, r6, pc}
			if (!aborted_buf) {
   10392:	4a0a      	ldr	r2, [pc, #40]	; (103bc <uart_cb+0x18c>)
   10394:	6813      	ldr	r3, [r2, #0]
   10396:	b90b      	cbnz	r3, 1039c <uart_cb+0x16c>
				aborted_buf = (uint8_t *)evt->data.tx.buf;
   10398:	684b      	ldr	r3, [r1, #4]
   1039a:	6013      	str	r3, [r2, #0]
			aborted_len += evt->data.tx.len;
   1039c:	4808      	ldr	r0, [pc, #32]	; (103c0 <uart_cb+0x190>)
   1039e:	68a3      	ldr	r3, [r4, #8]
   103a0:	6801      	ldr	r1, [r0, #0]
   103a2:	440b      	add	r3, r1
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   103a4:	6811      	ldr	r1, [r2, #0]
			aborted_len += evt->data.tx.len;
   103a6:	6003      	str	r3, [r0, #0]
				buf->len - aborted_len, SYS_FOREVER_MS);
   103a8:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
			uart_tx(uart, &buf->data[aborted_len],
   103aa:	4419      	add	r1, r3
   103ac:	1ad2      	subs	r2, r2, r3
   103ae:	4b06      	ldr	r3, [pc, #24]	; (103c8 <uart_cb+0x198>)
}
   103b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			uart_tx(uart, &buf->data[aborted_len],
   103b4:	6818      	ldr	r0, [r3, #0]
   103b6:	f016 bfef 	b.w	27398 <uart_tx.constprop.0>
   103ba:	bf00      	nop
   103bc:	20002950 	.word	0x20002950
   103c0:	20002954 	.word	0x20002954
   103c4:	200008f0 	.word	0x200008f0
   103c8:	20002964 	.word	0x20002964
   103cc:	0002cd88 	.word	0x0002cd88
   103d0:	0002ccb8 	.word	0x0002ccb8
   103d4:	0002daef 	.word	0x0002daef
   103d8:	20003d58 	.word	0x20003d58
   103dc:	200008d4 	.word	0x200008d4
   103e0:	2000295c 	.word	0x2000295c
   103e4:	0002dac6 	.word	0x0002dac6
   103e8:	200015e8 	.word	0x200015e8

000103ec <button_changed>:
{
   103ec:	b538      	push	{r3, r4, r5, lr}
	if (auth_conn) {
   103ee:	4c18      	ldr	r4, [pc, #96]	; (10450 <button_changed+0x64>)
{
   103f0:	4603      	mov	r3, r0
	if (auth_conn) {
   103f2:	6820      	ldr	r0, [r4, #0]
   103f4:	b350      	cbz	r0, 1044c <button_changed+0x60>
	uint32_t buttons = button_state & has_changed;
   103f6:	ea03 0501 	and.w	r5, r3, r1
		if (buttons & KEY_PASSKEY_ACCEPT) {
   103fa:	07ea      	lsls	r2, r5, #31
   103fc:	d511      	bpl.n	10422 <button_changed+0x36>
		bt_conn_auth_passkey_confirm(auth_conn);
   103fe:	f008 f9a3 	bl	18748 <bt_conn_auth_passkey_confirm>
   10402:	4b14      	ldr	r3, [pc, #80]	; (10454 <button_changed+0x68>)
   10404:	4a14      	ldr	r2, [pc, #80]	; (10458 <button_changed+0x6c>)
		LOG_INF("Numeric Match, conn %p", (void *)auth_conn);
   10406:	6821      	ldr	r1, [r4, #0]
   10408:	4814      	ldr	r0, [pc, #80]	; (1045c <button_changed+0x70>)
   1040a:	1ad2      	subs	r2, r2, r3
   1040c:	08d2      	lsrs	r2, r2, #3
   1040e:	0192      	lsls	r2, r2, #6
   10410:	f042 0203 	orr.w	r2, r2, #3
   10414:	f017 fb4f 	bl	27ab6 <log_1>
	bt_conn_unref(auth_conn);
   10418:	6820      	ldr	r0, [r4, #0]
   1041a:	f007 fdb3 	bl	17f84 <bt_conn_unref>
	auth_conn = NULL;
   1041e:	2300      	movs	r3, #0
   10420:	6023      	str	r3, [r4, #0]
		if (buttons & KEY_PASSKEY_REJECT) {
   10422:	07ab      	lsls	r3, r5, #30
   10424:	d512      	bpl.n	1044c <button_changed+0x60>
		bt_conn_auth_cancel(auth_conn);
   10426:	6820      	ldr	r0, [r4, #0]
   10428:	f008 f99c 	bl	18764 <bt_conn_auth_cancel>
   1042c:	4b09      	ldr	r3, [pc, #36]	; (10454 <button_changed+0x68>)
   1042e:	4a0a      	ldr	r2, [pc, #40]	; (10458 <button_changed+0x6c>)
		LOG_INF("Numeric Reject, conn %p", (void *)auth_conn);
   10430:	6821      	ldr	r1, [r4, #0]
   10432:	480b      	ldr	r0, [pc, #44]	; (10460 <button_changed+0x74>)
   10434:	1ad2      	subs	r2, r2, r3
   10436:	08d2      	lsrs	r2, r2, #3
   10438:	0192      	lsls	r2, r2, #6
   1043a:	f042 0203 	orr.w	r2, r2, #3
   1043e:	f017 fb3a 	bl	27ab6 <log_1>
	bt_conn_unref(auth_conn);
   10442:	6820      	ldr	r0, [r4, #0]
   10444:	f007 fd9e 	bl	17f84 <bt_conn_unref>
	auth_conn = NULL;
   10448:	2300      	movs	r3, #0
   1044a:	6023      	str	r3, [r4, #0]
}
   1044c:	bd38      	pop	{r3, r4, r5, pc}
   1044e:	bf00      	nop
   10450:	20002958 	.word	0x20002958
   10454:	0002ccb8 	.word	0x0002ccb8
   10458:	0002cd88 	.word	0x0002cd88
   1045c:	0002db0d 	.word	0x0002db0d
   10460:	0002db24 	.word	0x0002db24

00010464 <main>:
{
   10464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	err = dk_buttons_init(button_changed);
   10468:	4863      	ldr	r0, [pc, #396]	; (105f8 <main+0x194>)
   1046a:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 10650 <main+0x1ec>
   1046e:	4c63      	ldr	r4, [pc, #396]	; (105fc <main+0x198>)
{
   10470:	b088      	sub	sp, #32
	err = dk_buttons_init(button_changed);
   10472:	f00e fda7 	bl	1efc4 <dk_buttons_init>
	if (err) {
   10476:	4601      	mov	r1, r0
   10478:	b140      	cbz	r0, 1048c <main+0x28>
   1047a:	eba8 0204 	sub.w	r2, r8, r4
   1047e:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Cannot init buttons (err: %d)", err);
   10480:	0192      	lsls	r2, r2, #6
   10482:	485f      	ldr	r0, [pc, #380]	; (10600 <main+0x19c>)
   10484:	f042 0201 	orr.w	r2, r2, #1
   10488:	f017 fb15 	bl	27ab6 <log_1>
	err = dk_leds_init();
   1048c:	f00e fd46 	bl	1ef1c <dk_leds_init>
	if (err) {
   10490:	4601      	mov	r1, r0
   10492:	b140      	cbz	r0, 104a6 <main+0x42>
   10494:	eba8 0204 	sub.w	r2, r8, r4
   10498:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Cannot init LEDs (err: %d)", err);
   1049a:	0192      	lsls	r2, r2, #6
   1049c:	4859      	ldr	r0, [pc, #356]	; (10604 <main+0x1a0>)
   1049e:	f042 0201 	orr.w	r2, r2, #1
   104a2:	f017 fb08 	bl	27ab6 <log_1>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   104a6:	4858      	ldr	r0, [pc, #352]	; (10608 <main+0x1a4>)
	uart = device_get_binding(CONFIG_BT_NUS_UART_DEV);
   104a8:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 10654 <main+0x1f0>
   104ac:	f010 f9f6 	bl	2089c <z_impl_device_get_binding>
   104b0:	f8c9 0000 	str.w	r0, [r9]
	if (!uart) {
   104b4:	b1d8      	cbz	r0, 104ee <main+0x8a>
	rx = k_malloc(sizeof(*rx));
   104b6:	2030      	movs	r0, #48	; 0x30
   104b8:	f01c fa14 	bl	2c8e4 <k_malloc>
	if (rx) {
   104bc:	4607      	mov	r7, r0
   104be:	b1b0      	cbz	r0, 104ee <main+0x8a>
		rx->len = 0;
   104c0:	2500      	movs	r5, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
   104c2:	4952      	ldr	r1, [pc, #328]	; (1060c <main+0x1a8>)
		rx->len = 0;
   104c4:	8585      	strh	r5, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
   104c6:	4852      	ldr	r0, [pc, #328]	; (10610 <main+0x1ac>)
   104c8:	f011 fe50 	bl	2216c <k_work_init_delayable>
	err = uart_callback_set(uart, uart_cb, NULL);
   104cc:	f8d9 0000 	ldr.w	r0, [r9]
	return api->callback_set(dev, callback, user_data);
   104d0:	4950      	ldr	r1, [pc, #320]	; (10614 <main+0x1b0>)
   104d2:	6883      	ldr	r3, [r0, #8]
   104d4:	462a      	mov	r2, r5
   104d6:	681b      	ldr	r3, [r3, #0]
   104d8:	4798      	blx	r3
	if (err) {
   104da:	b150      	cbz	r0, 104f2 <main+0x8e>
   104dc:	eba8 0104 	sub.w	r1, r8, r4
   104e0:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("Cannot initialize UART callback");
   104e2:	0189      	lsls	r1, r1, #6
   104e4:	484c      	ldr	r0, [pc, #304]	; (10618 <main+0x1b4>)
   104e6:	f041 0101 	orr.w	r1, r1, #1
   104ea:	f017 fad7 	bl	27a9c <log_0>
		error();
   104ee:	f016 ff5b 	bl	273a8 <error>
	tx = k_malloc(sizeof(*tx));
   104f2:	2030      	movs	r0, #48	; 0x30
   104f4:	f01c f9f6 	bl	2c8e4 <k_malloc>
	if (tx) {
   104f8:	4606      	mov	r6, r0
   104fa:	2800      	cmp	r0, #0
   104fc:	d0f7      	beq.n	104ee <main+0x8a>
		pos = snprintf(tx->data, sizeof(tx->data),
   104fe:	f100 0a04 	add.w	sl, r0, #4
   10502:	4a46      	ldr	r2, [pc, #280]	; (1061c <main+0x1b8>)
   10504:	2128      	movs	r1, #40	; 0x28
   10506:	4650      	mov	r0, sl
   10508:	f004 fc2c 	bl	14d64 <snprintf>
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   1050c:	2827      	cmp	r0, #39	; 0x27
		pos = snprintf(tx->data, sizeof(tx->data),
   1050e:	4605      	mov	r5, r0
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   10510:	d90d      	bls.n	1052e <main+0xca>
			k_free(tx);
   10512:	4630      	mov	r0, r6
   10514:	f01c f9df 	bl	2c8d6 <k_free>
   10518:	eba8 0204 	sub.w	r2, r8, r4
   1051c:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("snprintf returned %d", pos);
   1051e:	0192      	lsls	r2, r2, #6
   10520:	483f      	ldr	r0, [pc, #252]	; (10620 <main+0x1bc>)
   10522:	f042 0201 	orr.w	r2, r2, #1
   10526:	4629      	mov	r1, r5
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   10528:	f017 fac5 	bl	27ab6 <log_1>
		return err;
   1052c:	e7df      	b.n	104ee <main+0x8a>
		tx->len = pos;
   1052e:	85b0      	strh	r0, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   10530:	4602      	mov	r2, r0
   10532:	4651      	mov	r1, sl
   10534:	f8d9 0000 	ldr.w	r0, [r9]
   10538:	f016 ff2e 	bl	27398 <uart_tx.constprop.0>
	if (err) {
   1053c:	4601      	mov	r1, r0
   1053e:	b138      	cbz	r0, 10550 <main+0xec>
   10540:	eba8 0204 	sub.w	r2, r8, r4
   10544:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   10546:	0192      	lsls	r2, r2, #6
   10548:	4836      	ldr	r0, [pc, #216]	; (10624 <main+0x1c0>)
   1054a:	f042 0201 	orr.w	r2, r2, #1
   1054e:	e7eb      	b.n	10528 <main+0xc4>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
   10550:	f8d9 0000 	ldr.w	r0, [r9]
	return api->rx_enable(dev, buf, len, timeout);
   10554:	6883      	ldr	r3, [r0, #8]
   10556:	2228      	movs	r2, #40	; 0x28
   10558:	68dd      	ldr	r5, [r3, #12]
   1055a:	1d39      	adds	r1, r7, #4
   1055c:	2332      	movs	r3, #50	; 0x32
   1055e:	47a8      	blx	r5
	if (err) {
   10560:	4605      	mov	r5, r0
   10562:	2800      	cmp	r0, #0
   10564:	d1c3      	bne.n	104ee <main+0x8a>
	bt_conn_cb_register(&conn_callbacks);
   10566:	4830      	ldr	r0, [pc, #192]	; (10628 <main+0x1c4>)
   10568:	f007 fee8 	bl	1833c <bt_conn_cb_register>
		bt_conn_auth_cb_register(&conn_auth_callbacks);
   1056c:	482f      	ldr	r0, [pc, #188]	; (1062c <main+0x1c8>)
   1056e:	f008 f8cf 	bl	18710 <bt_conn_auth_cb_register>
	err = bt_enable(NULL);
   10572:	4628      	mov	r0, r5
   10574:	f006 fa86 	bl	16a84 <bt_enable>
	if (err) {
   10578:	2800      	cmp	r0, #0
   1057a:	d1b8      	bne.n	104ee <main+0x8a>
   1057c:	eba8 0404 	sub.w	r4, r8, r4
   10580:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Bluetooth initialized");
   10582:	01a4      	lsls	r4, r4, #6
   10584:	482a      	ldr	r0, [pc, #168]	; (10630 <main+0x1cc>)
   10586:	f044 0103 	orr.w	r1, r4, #3
   1058a:	f017 fa87 	bl	27a9c <log_0>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1058e:	4829      	ldr	r0, [pc, #164]	; (10634 <main+0x1d0>)
   10590:	f011 f9d4 	bl	2193c <z_impl_k_sem_give>
		settings_load();
   10594:	f017 ff4c 	bl	28430 <settings_load>
	err = bt_nus_init(&nus_cb);
   10598:	4827      	ldr	r0, [pc, #156]	; (10638 <main+0x1d4>)
   1059a:	f003 fb67 	bl	13c6c <bt_nus_init>
	if (err) {
   1059e:	4601      	mov	r1, r0
   105a0:	b138      	cbz	r0, 105b2 <main+0x14e>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   105a2:	4826      	ldr	r0, [pc, #152]	; (1063c <main+0x1d8>)
   105a4:	f044 0201 	orr.w	r2, r4, #1
		LOG_ERR("Advertising failed to start (err %d)", err);
   105a8:	f017 fa85 	bl	27ab6 <log_1>
}
   105ac:	b008      	add	sp, #32
   105ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
   105b2:	4e23      	ldr	r6, [pc, #140]	; (10640 <main+0x1dc>)
   105b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   105b6:	ad03      	add	r5, sp, #12
   105b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   105ba:	6833      	ldr	r3, [r6, #0]
   105bc:	602b      	str	r3, [r5, #0]
   105be:	2301      	movs	r3, #1
   105c0:	9300      	str	r3, [sp, #0]
   105c2:	4920      	ldr	r1, [pc, #128]	; (10644 <main+0x1e0>)
   105c4:	4b20      	ldr	r3, [pc, #128]	; (10648 <main+0x1e4>)
   105c6:	2202      	movs	r2, #2
   105c8:	a803      	add	r0, sp, #12
   105ca:	f007 f8b5 	bl	17738 <bt_le_adv_start>
	if (err) {
   105ce:	4605      	mov	r5, r0
   105d0:	b120      	cbz	r0, 105dc <main+0x178>
		LOG_ERR("Advertising failed to start (err %d)", err);
   105d2:	4601      	mov	r1, r0
   105d4:	f044 0201 	orr.w	r2, r4, #1
   105d8:	481c      	ldr	r0, [pc, #112]	; (1064c <main+0x1e8>)
   105da:	e7e5      	b.n	105a8 <main+0x144>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   105dc:	3501      	adds	r5, #1
   105de:	f005 0101 	and.w	r1, r5, #1
   105e2:	bf48      	it	mi
   105e4:	4249      	negmi	r1, r1
   105e6:	2000      	movs	r0, #0
   105e8:	f00e fda4 	bl	1f134 <dk_set_led>
	return z_impl_k_sleep(timeout);
   105ec:	2100      	movs	r1, #0
   105ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   105f2:	f013 f8a9 	bl	23748 <z_impl_k_sleep>
	for (;;) {
   105f6:	e7f1      	b.n	105dc <main+0x178>
   105f8:	000103ed 	.word	0x000103ed
   105fc:	0002ccb8 	.word	0x0002ccb8
   10600:	0002db3c 	.word	0x0002db3c
   10604:	0002db5a 	.word	0x0002db5a
   10608:	0002db75 	.word	0x0002db75
   1060c:	000101d1 	.word	0x000101d1
   10610:	200015e8 	.word	0x200015e8
   10614:	00010231 	.word	0x00010231
   10618:	0002db7c 	.word	0x0002db7c
   1061c:	0002db9c 	.word	0x0002db9c
   10620:	0002dbc3 	.word	0x0002dbc3
   10624:	0002dbd8 	.word	0x0002dbd8
   10628:	20000424 	.word	0x20000424
   1062c:	20000400 	.word	0x20000400
   10630:	0002dc01 	.word	0x0002dc01
   10634:	20000844 	.word	0x20000844
   10638:	20000440 	.word	0x20000440
   1063c:	0002dc17 	.word	0x0002dc17
   10640:	0002ce30 	.word	0x0002ce30
   10644:	0002cf28 	.word	0x0002cf28
   10648:	0002cf38 	.word	0x0002cf38
   1064c:	0002dc43 	.word	0x0002dc43
   10650:	0002cd88 	.word	0x0002cd88
   10654:	20002964 	.word	0x20002964

00010658 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   10658:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1065a:	4c0a      	ldr	r4, [pc, #40]	; (10684 <crc8_ccitt+0x2c>)
   1065c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1065e:	4291      	cmp	r1, r2
   10660:	d100      	bne.n	10664 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   10662:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   10664:	f811 3b01 	ldrb.w	r3, [r1], #1
   10668:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1066a:	0903      	lsrs	r3, r0, #4
   1066c:	5ce3      	ldrb	r3, [r4, r3]
   1066e:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   10672:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10674:	f3c3 1303 	ubfx	r3, r3, #4, #4
   10678:	5ce0      	ldrb	r0, [r4, r3]
   1067a:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1067e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   10680:	e7ed      	b.n	1065e <crc8_ccitt+0x6>
   10682:	bf00      	nop
   10684:	0002dca0 	.word	0x0002dca0

00010688 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10688:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   1068a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1068e:	2b02      	cmp	r3, #2
{
   10690:	b570      	push	{r4, r5, r6, lr}
   10692:	4604      	mov	r4, r0
   10694:	460e      	mov	r6, r1
	notify->result = res;
   10696:	6081      	str	r1, [r0, #8]
	switch (method) {
   10698:	d010      	beq.n	106bc <sys_notify_finalize+0x34>
   1069a:	2b03      	cmp	r3, #3
   1069c:	d004      	beq.n	106a8 <sys_notify_finalize+0x20>
   1069e:	2b01      	cmp	r3, #1
   106a0:	d10f      	bne.n	106c2 <sys_notify_finalize+0x3a>
   106a2:	2500      	movs	r5, #0
   106a4:	4628      	mov	r0, r5
   106a6:	e001      	b.n	106ac <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   106a8:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   106aa:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   106ac:	2300      	movs	r3, #0
   106ae:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   106b0:	b110      	cbz	r0, 106b8 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   106b2:	4631      	mov	r1, r6
   106b4:	f014 f93e 	bl	24934 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   106b8:	4628      	mov	r0, r5
   106ba:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   106bc:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   106be:	2500      	movs	r5, #0
		break;
   106c0:	e7f4      	b.n	106ac <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   106c2:	4a06      	ldr	r2, [pc, #24]	; (106dc <sys_notify_finalize+0x54>)
   106c4:	4906      	ldr	r1, [pc, #24]	; (106e0 <sys_notify_finalize+0x58>)
   106c6:	4807      	ldr	r0, [pc, #28]	; (106e4 <sys_notify_finalize+0x5c>)
   106c8:	2345      	movs	r3, #69	; 0x45
   106ca:	f016 ff14 	bl	274f6 <printk>
   106ce:	4803      	ldr	r0, [pc, #12]	; (106dc <sys_notify_finalize+0x54>)
   106d0:	2145      	movs	r1, #69	; 0x45
   106d2:	f017 f9b5 	bl	27a40 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   106d6:	2500      	movs	r5, #0
   106d8:	e7e7      	b.n	106aa <sys_notify_finalize+0x22>
   106da:	bf00      	nop
   106dc:	0002dcb0 	.word	0x0002dcb0
   106e0:	00032142 	.word	0x00032142
   106e4:	0002dcd3 	.word	0x0002dcd3

000106e8 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   106e8:	4b01      	ldr	r3, [pc, #4]	; (106f0 <__printk_hook_install+0x8>)
   106ea:	6018      	str	r0, [r3, #0]
}
   106ec:	4770      	bx	lr
   106ee:	bf00      	nop
   106f0:	2000044c 	.word	0x2000044c

000106f4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   106f4:	b530      	push	{r4, r5, lr}
   106f6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   106f8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   106fc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   106fe:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   10700:	a901      	add	r1, sp, #4
   10702:	4805      	ldr	r0, [pc, #20]	; (10718 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   10704:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   10706:	f000 fc51 	bl	10fac <cbvprintf>

	if (ctx.count < ctx.max) {
   1070a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1070e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10710:	bfb8      	it	lt
   10712:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10714:	b005      	add	sp, #20
   10716:	bd30      	pop	{r4, r5, pc}
   10718:	000274d1 	.word	0x000274d1

0001071c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10720:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   10724:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10726:	f019 0f08 	tst.w	r9, #8
{
   1072a:	4604      	mov	r4, r0
   1072c:	9203      	str	r2, [sp, #12]
	if (processing) {
   1072e:	d022      	beq.n	10776 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   10730:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10732:	bf0c      	ite	eq
   10734:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10738:	f049 0920 	orrne.w	r9, r9, #32
   1073c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   10740:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10742:	4620      	mov	r0, r4
   10744:	f010 fd8a 	bl	2125c <z_spin_unlock_valid>
   10748:	b968      	cbnz	r0, 10766 <process_event+0x4a>
   1074a:	4a9f      	ldr	r2, [pc, #636]	; (109c8 <process_event+0x2ac>)
   1074c:	499f      	ldr	r1, [pc, #636]	; (109cc <process_event+0x2b0>)
   1074e:	48a0      	ldr	r0, [pc, #640]	; (109d0 <process_event+0x2b4>)
   10750:	23ac      	movs	r3, #172	; 0xac
   10752:	f016 fed0 	bl	274f6 <printk>
   10756:	489f      	ldr	r0, [pc, #636]	; (109d4 <process_event+0x2b8>)
   10758:	4621      	mov	r1, r4
   1075a:	f016 fecc 	bl	274f6 <printk>
   1075e:	489a      	ldr	r0, [pc, #616]	; (109c8 <process_event+0x2ac>)
   10760:	21ac      	movs	r1, #172	; 0xac
   10762:	f017 f96d 	bl	27a40 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10766:	9b03      	ldr	r3, [sp, #12]
   10768:	f383 8811 	msr	BASEPRI, r3
   1076c:	f3bf 8f6f 	isb	sy
}
   10770:	b005      	add	sp, #20
   10772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   10776:	4f98      	ldr	r7, [pc, #608]	; (109d8 <process_event+0x2bc>)
   10778:	f8df 8254 	ldr.w	r8, [pc, #596]	; 109d0 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1077c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10780:	2902      	cmp	r1, #2
   10782:	d106      	bne.n	10792 <process_event+0x76>
			evt = process_recheck(mgr);
   10784:	4620      	mov	r0, r4
   10786:	f016 fed0 	bl	2752a <process_recheck>
		if (evt == EVT_NOP) {
   1078a:	2800      	cmp	r0, #0
   1078c:	d0d8      	beq.n	10740 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   1078e:	2801      	cmp	r0, #1
   10790:	d168      	bne.n	10864 <process_event+0x148>
			res = mgr->last_res;
   10792:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10796:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   10798:	f1bb 0f00 	cmp.w	fp, #0
   1079c:	da0a      	bge.n	107b4 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1079e:	2600      	movs	r6, #0
		*clients = mgr->clients;
   107a0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   107a2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   107a6:	e9c4 6600 	strd	r6, r6, [r4]
   107aa:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   107ae:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   107b0:	9601      	str	r6, [sp, #4]
   107b2:	e027      	b.n	10804 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107b4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   107b8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   107ba:	2901      	cmp	r1, #1
   107bc:	d834      	bhi.n	10828 <process_event+0x10c>
	list->head = NULL;
   107be:	2100      	movs	r1, #0
   107c0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   107c4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   107c6:	6825      	ldr	r5, [r4, #0]
   107c8:	b29b      	uxth	r3, r3
	list->tail = NULL;
   107ca:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   107ce:	d10c      	bne.n	107ea <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   107d0:	428d      	cmp	r5, r1
   107d2:	462a      	mov	r2, r5
   107d4:	bf38      	it	cc
   107d6:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   107d8:	b12a      	cbz	r2, 107e6 <process_event+0xca>
				mgr->refs += 1U;
   107da:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   107dc:	6812      	ldr	r2, [r2, #0]
   107de:	3101      	adds	r1, #1
   107e0:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   107e2:	2a00      	cmp	r2, #0
   107e4:	d1f8      	bne.n	107d8 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   107e6:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   107ea:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   107ec:	4620      	mov	r0, r4
   107ee:	f016 fe9c 	bl	2752a <process_recheck>
   107f2:	4606      	mov	r6, r0
   107f4:	2800      	cmp	r0, #0
   107f6:	d0db      	beq.n	107b0 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   107f8:	8ba3      	ldrh	r3, [r4, #28]
   107fa:	f043 0320 	orr.w	r3, r3, #32
   107fe:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   10800:	2300      	movs	r3, #0
   10802:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10804:	8ba3      	ldrh	r3, [r4, #28]
   10806:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1080a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1080c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   1080e:	d003      	beq.n	10818 <process_event+0xfc>
		if (do_monitors
   10810:	68a2      	ldr	r2, [r4, #8]
   10812:	2a00      	cmp	r2, #0
   10814:	f040 80f0 	bne.w	109f8 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   10818:	b91d      	cbnz	r5, 10822 <process_event+0x106>
		    || (transit != NULL)) {
   1081a:	9a01      	ldr	r2, [sp, #4]
   1081c:	2a00      	cmp	r2, #0
   1081e:	f000 8136 	beq.w	10a8e <process_event+0x372>
   10822:	f04f 0900 	mov.w	r9, #0
   10826:	e0e9      	b.n	109fc <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10828:	2a04      	cmp	r2, #4
   1082a:	d10e      	bne.n	1084a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1082c:	f023 0307 	bic.w	r3, r3, #7
   10830:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10832:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   10834:	4620      	mov	r0, r4
   10836:	f016 fe78 	bl	2752a <process_recheck>
   1083a:	4605      	mov	r5, r0
   1083c:	b118      	cbz	r0, 10846 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1083e:	f042 0220 	orr.w	r2, r2, #32
   10842:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   10844:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10846:	9501      	str	r5, [sp, #4]
   10848:	e7dc      	b.n	10804 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   1084a:	4640      	mov	r0, r8
   1084c:	4963      	ldr	r1, [pc, #396]	; (109dc <process_event+0x2c0>)
   1084e:	f240 131b 	movw	r3, #283	; 0x11b
   10852:	463a      	mov	r2, r7
   10854:	f016 fe4f 	bl	274f6 <printk>
   10858:	f240 111b 	movw	r1, #283	; 0x11b
   1085c:	4638      	mov	r0, r7
   1085e:	f017 f8ef 	bl	27a40 <assert_post_action>
   10862:	e7ef      	b.n	10844 <process_event+0x128>
		} else if (evt == EVT_START) {
   10864:	2803      	cmp	r0, #3
   10866:	d135      	bne.n	108d4 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10868:	f1b9 0f00 	cmp.w	r9, #0
   1086c:	d00b      	beq.n	10886 <process_event+0x16a>
   1086e:	495c      	ldr	r1, [pc, #368]	; (109e0 <process_event+0x2c4>)
   10870:	4640      	mov	r0, r8
   10872:	f44f 73ab 	mov.w	r3, #342	; 0x156
   10876:	463a      	mov	r2, r7
   10878:	f016 fe3d 	bl	274f6 <printk>
   1087c:	f44f 71ab 	mov.w	r1, #342	; 0x156
   10880:	4638      	mov	r0, r7
   10882:	f017 f8dd 	bl	27a40 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10886:	6823      	ldr	r3, [r4, #0]
   10888:	b95b      	cbnz	r3, 108a2 <process_event+0x186>
   1088a:	4956      	ldr	r1, [pc, #344]	; (109e4 <process_event+0x2c8>)
   1088c:	4640      	mov	r0, r8
   1088e:	f240 1357 	movw	r3, #343	; 0x157
   10892:	463a      	mov	r2, r7
   10894:	f016 fe2f 	bl	274f6 <printk>
   10898:	f240 1157 	movw	r1, #343	; 0x157
   1089c:	4638      	mov	r0, r7
   1089e:	f017 f8cf 	bl	27a40 <assert_post_action>
			transit = mgr->transitions->start;
   108a2:	6923      	ldr	r3, [r4, #16]
   108a4:	681b      	ldr	r3, [r3, #0]
   108a6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   108a8:	b95b      	cbnz	r3, 108c2 <process_event+0x1a6>
   108aa:	494f      	ldr	r1, [pc, #316]	; (109e8 <process_event+0x2cc>)
   108ac:	4640      	mov	r0, r8
   108ae:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   108b2:	463a      	mov	r2, r7
   108b4:	f016 fe1f 	bl	274f6 <printk>
   108b8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   108bc:	4638      	mov	r0, r7
   108be:	f017 f8bf 	bl	27a40 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108c2:	8ba3      	ldrh	r3, [r4, #28]
   108c4:	f023 0307 	bic.w	r3, r3, #7
   108c8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   108cc:	83a3      	strh	r3, [r4, #28]
}
   108ce:	2500      	movs	r5, #0
		res = 0;
   108d0:	46ab      	mov	fp, r5
}
   108d2:	e797      	b.n	10804 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   108d4:	2804      	cmp	r0, #4
   108d6:	d132      	bne.n	1093e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   108d8:	f1b9 0f02 	cmp.w	r9, #2
   108dc:	d00b      	beq.n	108f6 <process_event+0x1da>
   108de:	4943      	ldr	r1, [pc, #268]	; (109ec <process_event+0x2d0>)
   108e0:	4640      	mov	r0, r8
   108e2:	f240 135d 	movw	r3, #349	; 0x15d
   108e6:	463a      	mov	r2, r7
   108e8:	f016 fe05 	bl	274f6 <printk>
   108ec:	f240 115d 	movw	r1, #349	; 0x15d
   108f0:	4638      	mov	r0, r7
   108f2:	f017 f8a5 	bl	27a40 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   108f6:	8be3      	ldrh	r3, [r4, #30]
   108f8:	b15b      	cbz	r3, 10912 <process_event+0x1f6>
   108fa:	493d      	ldr	r1, [pc, #244]	; (109f0 <process_event+0x2d4>)
   108fc:	4640      	mov	r0, r8
   108fe:	f44f 73af 	mov.w	r3, #350	; 0x15e
   10902:	463a      	mov	r2, r7
   10904:	f016 fdf7 	bl	274f6 <printk>
   10908:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1090c:	4638      	mov	r0, r7
   1090e:	f017 f897 	bl	27a40 <assert_post_action>
			transit = mgr->transitions->stop;
   10912:	6923      	ldr	r3, [r4, #16]
   10914:	685b      	ldr	r3, [r3, #4]
   10916:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10918:	b95b      	cbnz	r3, 10932 <process_event+0x216>
   1091a:	4933      	ldr	r1, [pc, #204]	; (109e8 <process_event+0x2cc>)
   1091c:	4640      	mov	r0, r8
   1091e:	f240 1361 	movw	r3, #353	; 0x161
   10922:	463a      	mov	r2, r7
   10924:	f016 fde7 	bl	274f6 <printk>
   10928:	f240 1161 	movw	r1, #353	; 0x161
   1092c:	4638      	mov	r0, r7
   1092e:	f017 f887 	bl	27a40 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10932:	8ba3      	ldrh	r3, [r4, #28]
   10934:	f023 0307 	bic.w	r3, r3, #7
   10938:	f043 0304 	orr.w	r3, r3, #4
   1093c:	e7c6      	b.n	108cc <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   1093e:	2805      	cmp	r0, #5
   10940:	d132      	bne.n	109a8 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10942:	f1b9 0f01 	cmp.w	r9, #1
   10946:	d00b      	beq.n	10960 <process_event+0x244>
   10948:	492a      	ldr	r1, [pc, #168]	; (109f4 <process_event+0x2d8>)
   1094a:	4640      	mov	r0, r8
   1094c:	f44f 73b2 	mov.w	r3, #356	; 0x164
   10950:	463a      	mov	r2, r7
   10952:	f016 fdd0 	bl	274f6 <printk>
   10956:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1095a:	4638      	mov	r0, r7
   1095c:	f017 f870 	bl	27a40 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10960:	6823      	ldr	r3, [r4, #0]
   10962:	b95b      	cbnz	r3, 1097c <process_event+0x260>
   10964:	491f      	ldr	r1, [pc, #124]	; (109e4 <process_event+0x2c8>)
   10966:	4640      	mov	r0, r8
   10968:	f240 1365 	movw	r3, #357	; 0x165
   1096c:	463a      	mov	r2, r7
   1096e:	f016 fdc2 	bl	274f6 <printk>
   10972:	f240 1165 	movw	r1, #357	; 0x165
   10976:	4638      	mov	r0, r7
   10978:	f017 f862 	bl	27a40 <assert_post_action>
			transit = mgr->transitions->reset;
   1097c:	6923      	ldr	r3, [r4, #16]
   1097e:	689b      	ldr	r3, [r3, #8]
   10980:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10982:	b95b      	cbnz	r3, 1099c <process_event+0x280>
   10984:	4918      	ldr	r1, [pc, #96]	; (109e8 <process_event+0x2cc>)
   10986:	4640      	mov	r0, r8
   10988:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1098c:	463a      	mov	r2, r7
   1098e:	f016 fdb2 	bl	274f6 <printk>
   10992:	f44f 71b4 	mov.w	r1, #360	; 0x168
   10996:	4638      	mov	r0, r7
   10998:	f017 f852 	bl	27a40 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1099c:	8ba3      	ldrh	r3, [r4, #28]
   1099e:	f023 0307 	bic.w	r3, r3, #7
   109a2:	f043 0305 	orr.w	r3, r3, #5
   109a6:	e791      	b.n	108cc <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   109a8:	490c      	ldr	r1, [pc, #48]	; (109dc <process_event+0x2c0>)
   109aa:	f240 136b 	movw	r3, #363	; 0x16b
   109ae:	463a      	mov	r2, r7
   109b0:	4640      	mov	r0, r8
   109b2:	f016 fda0 	bl	274f6 <printk>
   109b6:	2500      	movs	r5, #0
   109b8:	f240 116b 	movw	r1, #363	; 0x16b
   109bc:	4638      	mov	r0, r7
   109be:	f017 f83f 	bl	27a40 <assert_post_action>
		onoff_transition_fn transit = NULL;
   109c2:	9501      	str	r5, [sp, #4]
   109c4:	e784      	b.n	108d0 <process_event+0x1b4>
   109c6:	bf00      	nop
   109c8:	0002dd93 	.word	0x0002dd93
   109cc:	0002ddb9 	.word	0x0002ddb9
   109d0:	0002dcd3 	.word	0x0002dcd3
   109d4:	0002ddd0 	.word	0x0002ddd0
   109d8:	0002dcf0 	.word	0x0002dcf0
   109dc:	00032142 	.word	0x00032142
   109e0:	0002dd12 	.word	0x0002dd12
   109e4:	0002dd1e 	.word	0x0002dd1e
   109e8:	0002dd41 	.word	0x0002dd41
   109ec:	0002dd58 	.word	0x0002dd58
   109f0:	0002dd6e 	.word	0x0002dd6e
   109f4:	0002dd7d 	.word	0x0002dd7d
				   && !sys_slist_is_empty(&mgr->monitors);
   109f8:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   109fc:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   10a00:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   10a04:	83a3      	strh	r3, [r4, #28]
   10a06:	4650      	mov	r0, sl
   10a08:	f010 fc28 	bl	2125c <z_spin_unlock_valid>
   10a0c:	b968      	cbnz	r0, 10a2a <process_event+0x30e>
   10a0e:	4a3a      	ldr	r2, [pc, #232]	; (10af8 <process_event+0x3dc>)
   10a10:	493a      	ldr	r1, [pc, #232]	; (10afc <process_event+0x3e0>)
   10a12:	23ac      	movs	r3, #172	; 0xac
   10a14:	4640      	mov	r0, r8
   10a16:	f016 fd6e 	bl	274f6 <printk>
   10a1a:	4839      	ldr	r0, [pc, #228]	; (10b00 <process_event+0x3e4>)
   10a1c:	4651      	mov	r1, sl
   10a1e:	f016 fd6a 	bl	274f6 <printk>
   10a22:	4835      	ldr	r0, [pc, #212]	; (10af8 <process_event+0x3dc>)
   10a24:	21ac      	movs	r1, #172	; 0xac
   10a26:	f017 f80b 	bl	27a40 <assert_post_action>
   10a2a:	9b03      	ldr	r3, [sp, #12]
   10a2c:	f383 8811 	msr	BASEPRI, r3
   10a30:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10a34:	f1b9 0f00 	cmp.w	r9, #0
   10a38:	d138      	bne.n	10aac <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   10a3a:	2d00      	cmp	r5, #0
   10a3c:	d14b      	bne.n	10ad6 <process_event+0x3ba>
			if (transit != NULL) {
   10a3e:	9b01      	ldr	r3, [sp, #4]
   10a40:	b113      	cbz	r3, 10a48 <process_event+0x32c>
				transit(mgr, transition_complete);
   10a42:	4930      	ldr	r1, [pc, #192]	; (10b04 <process_event+0x3e8>)
   10a44:	4620      	mov	r0, r4
   10a46:	4798      	blx	r3
	__asm__ volatile(
   10a48:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a4c:	f3ef 8b11 	mrs	fp, BASEPRI
   10a50:	f383 8811 	msr	BASEPRI, r3
   10a54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a58:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   10a5a:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a5e:	f010 fbef 	bl	21240 <z_spin_lock_valid>
   10a62:	b968      	cbnz	r0, 10a80 <process_event+0x364>
   10a64:	4a24      	ldr	r2, [pc, #144]	; (10af8 <process_event+0x3dc>)
   10a66:	4928      	ldr	r1, [pc, #160]	; (10b08 <process_event+0x3ec>)
   10a68:	2381      	movs	r3, #129	; 0x81
   10a6a:	4640      	mov	r0, r8
   10a6c:	f016 fd43 	bl	274f6 <printk>
   10a70:	4826      	ldr	r0, [pc, #152]	; (10b0c <process_event+0x3f0>)
   10a72:	4651      	mov	r1, sl
   10a74:	f016 fd3f 	bl	274f6 <printk>
   10a78:	481f      	ldr	r0, [pc, #124]	; (10af8 <process_event+0x3dc>)
   10a7a:	2181      	movs	r1, #129	; 0x81
   10a7c:	f016 ffe0 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   10a80:	4650      	mov	r0, sl
   10a82:	f010 fbfb 	bl	2127c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10a86:	8ba3      	ldrh	r3, [r4, #28]
   10a88:	f023 0308 	bic.w	r3, r3, #8
   10a8c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10a8e:	8ba3      	ldrh	r3, [r4, #28]
   10a90:	06da      	lsls	r2, r3, #27
   10a92:	d528      	bpl.n	10ae6 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10a94:	f023 0310 	bic.w	r3, r3, #16
   10a98:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   10a9a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10a9c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   10aa0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10aa4:	2900      	cmp	r1, #0
   10aa6:	f47f ae6b 	bne.w	10780 <process_event+0x64>
out:
   10aaa:	e649      	b.n	10740 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10aac:	68a1      	ldr	r1, [r4, #8]
   10aae:	2900      	cmp	r1, #0
   10ab0:	d0c3      	beq.n	10a3a <process_event+0x31e>
	return node->next;
   10ab2:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   10ab4:	9a02      	ldr	r2, [sp, #8]
   10ab6:	2b00      	cmp	r3, #0
   10ab8:	bf38      	it	cc
   10aba:	2300      	movcc	r3, #0
   10abc:	4699      	mov	r9, r3
   10abe:	684b      	ldr	r3, [r1, #4]
   10ac0:	4620      	mov	r0, r4
   10ac2:	461e      	mov	r6, r3
   10ac4:	465b      	mov	r3, fp
   10ac6:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10ac8:	f1b9 0f00 	cmp.w	r9, #0
   10acc:	d0b5      	beq.n	10a3a <process_event+0x31e>
   10ace:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10ad2:	4649      	mov	r1, r9
   10ad4:	e7ee      	b.n	10ab4 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10ad6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10ad8:	9a02      	ldr	r2, [sp, #8]
   10ada:	682d      	ldr	r5, [r5, #0]
   10adc:	465b      	mov	r3, fp
   10ade:	4620      	mov	r0, r4
   10ae0:	f016 fd3f 	bl	27562 <notify_one>
   10ae4:	e7a9      	b.n	10a3a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10ae6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10aea:	bf1e      	ittt	ne
   10aec:	f023 0320 	bicne.w	r3, r3, #32
   10af0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   10af2:	2102      	movne	r1, #2
   10af4:	e7d2      	b.n	10a9c <process_event+0x380>
   10af6:	bf00      	nop
   10af8:	0002dd93 	.word	0x0002dd93
   10afc:	0002ddb9 	.word	0x0002ddb9
   10b00:	0002ddd0 	.word	0x0002ddd0
   10b04:	00010b11 	.word	0x00010b11
   10b08:	0002dde5 	.word	0x0002dde5
   10b0c:	0002ddfa 	.word	0x0002ddfa

00010b10 <transition_complete>:
{
   10b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b12:	4604      	mov	r4, r0
   10b14:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10b16:	f100 0614 	add.w	r6, r0, #20
   10b1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b1e:	f3ef 8711 	mrs	r7, BASEPRI
   10b22:	f383 8811 	msr	BASEPRI, r3
   10b26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b2a:	4630      	mov	r0, r6
   10b2c:	f010 fb88 	bl	21240 <z_spin_lock_valid>
   10b30:	b968      	cbnz	r0, 10b4e <transition_complete+0x3e>
   10b32:	4a0c      	ldr	r2, [pc, #48]	; (10b64 <transition_complete+0x54>)
   10b34:	490c      	ldr	r1, [pc, #48]	; (10b68 <transition_complete+0x58>)
   10b36:	480d      	ldr	r0, [pc, #52]	; (10b6c <transition_complete+0x5c>)
   10b38:	2381      	movs	r3, #129	; 0x81
   10b3a:	f016 fcdc 	bl	274f6 <printk>
   10b3e:	480c      	ldr	r0, [pc, #48]	; (10b70 <transition_complete+0x60>)
   10b40:	4631      	mov	r1, r6
   10b42:	f016 fcd8 	bl	274f6 <printk>
   10b46:	4807      	ldr	r0, [pc, #28]	; (10b64 <transition_complete+0x54>)
   10b48:	2181      	movs	r1, #129	; 0x81
   10b4a:	f016 ff79 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   10b4e:	4630      	mov	r0, r6
   10b50:	f010 fb94 	bl	2127c <z_spin_lock_set_owner>
	mgr->last_res = res;
   10b54:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10b56:	463a      	mov	r2, r7
   10b58:	4620      	mov	r0, r4
   10b5a:	2101      	movs	r1, #1
}
   10b5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   10b60:	f7ff bddc 	b.w	1071c <process_event>
   10b64:	0002dd93 	.word	0x0002dd93
   10b68:	0002dde5 	.word	0x0002dde5
   10b6c:	0002dcd3 	.word	0x0002dcd3
   10b70:	0002ddfa 	.word	0x0002ddfa

00010b74 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b78:	4604      	mov	r4, r0
   10b7a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10b7c:	f016 fd07 	bl	2758e <validate_args>

	if (rv < 0) {
   10b80:	1e05      	subs	r5, r0, #0
   10b82:	db5e      	blt.n	10c42 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10b84:	f104 0914 	add.w	r9, r4, #20
   10b88:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b8c:	f3ef 8a11 	mrs	sl, BASEPRI
   10b90:	f383 8811 	msr	BASEPRI, r3
   10b94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b98:	4648      	mov	r0, r9
   10b9a:	f010 fb51 	bl	21240 <z_spin_lock_valid>
   10b9e:	b968      	cbnz	r0, 10bbc <onoff_request+0x48>
   10ba0:	4a38      	ldr	r2, [pc, #224]	; (10c84 <onoff_request+0x110>)
   10ba2:	4939      	ldr	r1, [pc, #228]	; (10c88 <onoff_request+0x114>)
   10ba4:	4839      	ldr	r0, [pc, #228]	; (10c8c <onoff_request+0x118>)
   10ba6:	2381      	movs	r3, #129	; 0x81
   10ba8:	f016 fca5 	bl	274f6 <printk>
   10bac:	4838      	ldr	r0, [pc, #224]	; (10c90 <onoff_request+0x11c>)
   10bae:	4649      	mov	r1, r9
   10bb0:	f016 fca1 	bl	274f6 <printk>
   10bb4:	4833      	ldr	r0, [pc, #204]	; (10c84 <onoff_request+0x110>)
   10bb6:	2181      	movs	r1, #129	; 0x81
   10bb8:	f016 ff42 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   10bbc:	4648      	mov	r0, r9
   10bbe:	f010 fb5d 	bl	2127c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10bc2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10bc4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   10bc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10bca:	428b      	cmp	r3, r1
   10bcc:	f002 0607 	and.w	r6, r2, #7
   10bd0:	d050      	beq.n	10c74 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10bd2:	2e02      	cmp	r6, #2
   10bd4:	d124      	bne.n	10c20 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   10bd6:	3301      	adds	r3, #1
   10bd8:	83e3      	strh	r3, [r4, #30]
	rv = state;
   10bda:	4635      	mov	r5, r6
		notify = true;
   10bdc:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10be0:	4648      	mov	r0, r9
   10be2:	f010 fb3b 	bl	2125c <z_spin_unlock_valid>
   10be6:	b968      	cbnz	r0, 10c04 <onoff_request+0x90>
   10be8:	4a26      	ldr	r2, [pc, #152]	; (10c84 <onoff_request+0x110>)
   10bea:	492a      	ldr	r1, [pc, #168]	; (10c94 <onoff_request+0x120>)
   10bec:	4827      	ldr	r0, [pc, #156]	; (10c8c <onoff_request+0x118>)
   10bee:	23ac      	movs	r3, #172	; 0xac
   10bf0:	f016 fc81 	bl	274f6 <printk>
   10bf4:	4828      	ldr	r0, [pc, #160]	; (10c98 <onoff_request+0x124>)
   10bf6:	4649      	mov	r1, r9
   10bf8:	f016 fc7d 	bl	274f6 <printk>
   10bfc:	4821      	ldr	r0, [pc, #132]	; (10c84 <onoff_request+0x110>)
   10bfe:	21ac      	movs	r1, #172	; 0xac
   10c00:	f016 ff1e 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   10c04:	f38a 8811 	msr	BASEPRI, sl
   10c08:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   10c0c:	f1b8 0f00 	cmp.w	r8, #0
   10c10:	d017      	beq.n	10c42 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   10c12:	2300      	movs	r3, #0
   10c14:	4632      	mov	r2, r6
   10c16:	4639      	mov	r1, r7
   10c18:	4620      	mov	r0, r4
   10c1a:	f016 fca2 	bl	27562 <notify_one>
   10c1e:	e010      	b.n	10c42 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   10c20:	0793      	lsls	r3, r2, #30
   10c22:	d001      	beq.n	10c28 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   10c24:	2e06      	cmp	r6, #6
   10c26:	d10f      	bne.n	10c48 <onoff_request+0xd4>
	parent->next = child;
   10c28:	2300      	movs	r3, #0
   10c2a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   10c2c:	6863      	ldr	r3, [r4, #4]
   10c2e:	b9f3      	cbnz	r3, 10c6e <onoff_request+0xfa>
	list->head = node;
   10c30:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   10c34:	4635      	mov	r5, r6
   10c36:	b9fe      	cbnz	r6, 10c78 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   10c38:	4652      	mov	r2, sl
   10c3a:	2102      	movs	r1, #2
   10c3c:	4620      	mov	r0, r4
   10c3e:	f7ff fd6d 	bl	1071c <process_event>
		}
	}

	return rv;
}
   10c42:	4628      	mov	r0, r5
   10c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   10c48:	2e05      	cmp	r6, #5
   10c4a:	d018      	beq.n	10c7e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10c4c:	2e01      	cmp	r6, #1
   10c4e:	d00b      	beq.n	10c68 <onoff_request+0xf4>
   10c50:	4912      	ldr	r1, [pc, #72]	; (10c9c <onoff_request+0x128>)
   10c52:	480e      	ldr	r0, [pc, #56]	; (10c8c <onoff_request+0x118>)
   10c54:	4a12      	ldr	r2, [pc, #72]	; (10ca0 <onoff_request+0x12c>)
   10c56:	f240 13c9 	movw	r3, #457	; 0x1c9
   10c5a:	f016 fc4c 	bl	274f6 <printk>
   10c5e:	4810      	ldr	r0, [pc, #64]	; (10ca0 <onoff_request+0x12c>)
   10c60:	f240 11c9 	movw	r1, #457	; 0x1c9
   10c64:	f016 feec 	bl	27a40 <assert_post_action>
		rv = -EIO;
   10c68:	f06f 0504 	mvn.w	r5, #4
   10c6c:	e004      	b.n	10c78 <onoff_request+0x104>
	parent->next = child;
   10c6e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   10c70:	6067      	str	r7, [r4, #4]
}
   10c72:	e7df      	b.n	10c34 <onoff_request+0xc0>
		rv = -EAGAIN;
   10c74:	f06f 050a 	mvn.w	r5, #10
   10c78:	f04f 0800 	mov.w	r8, #0
   10c7c:	e7b0      	b.n	10be0 <onoff_request+0x6c>
		rv = -ENOTSUP;
   10c7e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   10c82:	e7f9      	b.n	10c78 <onoff_request+0x104>
   10c84:	0002dd93 	.word	0x0002dd93
   10c88:	0002dde5 	.word	0x0002dde5
   10c8c:	0002dcd3 	.word	0x0002dcd3
   10c90:	0002ddfa 	.word	0x0002ddfa
   10c94:	0002ddb9 	.word	0x0002ddb9
   10c98:	0002ddd0 	.word	0x0002ddd0
   10c9c:	0002dd7d 	.word	0x0002dd7d
   10ca0:	0002dcf0 	.word	0x0002dcf0

00010ca4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   10ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   10ca6:	460e      	mov	r6, r1
   10ca8:	2900      	cmp	r1, #0
   10caa:	d043      	beq.n	10d34 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   10cac:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   10cae:	68ab      	ldr	r3, [r5, #8]
   10cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10cb4:	bf2c      	ite	cs
   10cb6:	2408      	movcs	r4, #8
   10cb8:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10cba:	1b0c      	subs	r4, r1, r4
   10cbc:	1b64      	subs	r4, r4, r5
   10cbe:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   10cc0:	2201      	movs	r2, #1
   10cc2:	4621      	mov	r1, r4
   10cc4:	4628      	mov	r0, r5
   10cc6:	f016 fc8e 	bl	275e6 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   10cca:	07c3      	lsls	r3, r0, #31
   10ccc:	d40d      	bmi.n	10cea <sys_heap_free+0x46>
   10cce:	4a1a      	ldr	r2, [pc, #104]	; (10d38 <sys_heap_free+0x94>)
   10cd0:	491a      	ldr	r1, [pc, #104]	; (10d3c <sys_heap_free+0x98>)
   10cd2:	481b      	ldr	r0, [pc, #108]	; (10d40 <sys_heap_free+0x9c>)
   10cd4:	239a      	movs	r3, #154	; 0x9a
   10cd6:	f016 fc0e 	bl	274f6 <printk>
   10cda:	481a      	ldr	r0, [pc, #104]	; (10d44 <sys_heap_free+0xa0>)
   10cdc:	4631      	mov	r1, r6
   10cde:	f016 fc0a 	bl	274f6 <printk>
   10ce2:	4815      	ldr	r0, [pc, #84]	; (10d38 <sys_heap_free+0x94>)
   10ce4:	219a      	movs	r1, #154	; 0x9a
   10ce6:	f016 feab 	bl	27a40 <assert_post_action>
	return c + chunk_size(h, c);
   10cea:	4621      	mov	r1, r4
   10cec:	4628      	mov	r0, r5
   10cee:	f016 fc90 	bl	27612 <chunk_size>
   10cf2:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   10cf4:	4639      	mov	r1, r7
   10cf6:	2200      	movs	r2, #0
   10cf8:	4628      	mov	r0, r5
   10cfa:	f016 fc74 	bl	275e6 <chunk_field>
   10cfe:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10d00:	42bc      	cmp	r4, r7
   10d02:	d00d      	beq.n	10d20 <sys_heap_free+0x7c>
   10d04:	4a0c      	ldr	r2, [pc, #48]	; (10d38 <sys_heap_free+0x94>)
   10d06:	4910      	ldr	r1, [pc, #64]	; (10d48 <sys_heap_free+0xa4>)
   10d08:	480d      	ldr	r0, [pc, #52]	; (10d40 <sys_heap_free+0x9c>)
   10d0a:	23a2      	movs	r3, #162	; 0xa2
   10d0c:	f016 fbf3 	bl	274f6 <printk>
   10d10:	480e      	ldr	r0, [pc, #56]	; (10d4c <sys_heap_free+0xa8>)
   10d12:	4631      	mov	r1, r6
   10d14:	f016 fbef 	bl	274f6 <printk>
   10d18:	4807      	ldr	r0, [pc, #28]	; (10d38 <sys_heap_free+0x94>)
   10d1a:	21a2      	movs	r1, #162	; 0xa2
   10d1c:	f016 fe90 	bl	27a40 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   10d20:	4621      	mov	r1, r4
   10d22:	4628      	mov	r0, r5
   10d24:	2200      	movs	r2, #0
   10d26:	f016 fc7a 	bl	2761e <set_chunk_used>
	free_chunk(h, c);
   10d2a:	4621      	mov	r1, r4
}
   10d2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   10d30:	f016 bdb0 	b.w	27894 <free_chunk>
}
   10d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d36:	bf00      	nop
   10d38:	0002de12 	.word	0x0002de12
   10d3c:	0002de33 	.word	0x0002de33
   10d40:	0002dcd3 	.word	0x0002dcd3
   10d44:	0002de44 	.word	0x0002de44
   10d48:	0002de7c 	.word	0x0002de7c
   10d4c:	0002dea2 	.word	0x0002dea2

00010d50 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   10d54:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   10d56:	68b3      	ldr	r3, [r6, #8]
{
   10d58:	4614      	mov	r4, r2
	return big_heap(h) ? 8 : 4;
   10d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	rew = align & -align;
   10d5e:	f1c1 0200 	rsb	r2, r1, #0
   10d62:	ea02 0701 	and.w	r7, r2, r1
   10d66:	bf2c      	ite	cs
   10d68:	2508      	movcs	r5, #8
   10d6a:	2504      	movcc	r5, #4
	if (align != rew) {
   10d6c:	ea31 0202 	bics.w	r2, r1, r2
   10d70:	d01e      	beq.n	10db0 <sys_heap_aligned_alloc+0x60>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   10d72:	42bd      	cmp	r5, r7
   10d74:	bf28      	it	cs
   10d76:	463d      	movcs	r5, r7
   10d78:	46b9      	mov	r9, r7
		align -= rew;
   10d7a:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10d7c:	f107 3aff 	add.w	sl, r7, #4294967295
   10d80:	ea1a 0f07 	tst.w	sl, r7
   10d84:	d00e      	beq.n	10da4 <sys_heap_aligned_alloc+0x54>
   10d86:	4936      	ldr	r1, [pc, #216]	; (10e60 <sys_heap_aligned_alloc+0x110>)
   10d88:	4a36      	ldr	r2, [pc, #216]	; (10e64 <sys_heap_aligned_alloc+0x114>)
   10d8a:	4837      	ldr	r0, [pc, #220]	; (10e68 <sys_heap_aligned_alloc+0x118>)
   10d8c:	f240 130d 	movw	r3, #269	; 0x10d
   10d90:	f016 fbb1 	bl	274f6 <printk>
   10d94:	4835      	ldr	r0, [pc, #212]	; (10e6c <sys_heap_aligned_alloc+0x11c>)
   10d96:	f016 fbae 	bl	274f6 <printk>
   10d9a:	4832      	ldr	r0, [pc, #200]	; (10e64 <sys_heap_aligned_alloc+0x114>)
   10d9c:	f240 110d 	movw	r1, #269	; 0x10d
   10da0:	f016 fe4e 	bl	27a40 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   10da4:	b974      	cbnz	r4, 10dc4 <sys_heap_aligned_alloc+0x74>
		return NULL;
   10da6:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   10daa:	4648      	mov	r0, r9
   10dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   10db0:	42a9      	cmp	r1, r5
   10db2:	d804      	bhi.n	10dbe <sys_heap_aligned_alloc+0x6e>
			return sys_heap_alloc(heap, bytes);
   10db4:	4621      	mov	r1, r4
}
   10db6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   10dba:	f016 bdad 	b.w	27918 <sys_heap_alloc>
		rew = 0;
   10dbe:	f04f 0900 	mov.w	r9, #0
   10dc2:	e7db      	b.n	10d7c <sys_heap_aligned_alloc+0x2c>
	if (bytes == 0 || size_too_big(h, bytes)) {
   10dc4:	68b3      	ldr	r3, [r6, #8]
   10dc6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   10dca:	d9ec      	bls.n	10da6 <sys_heap_aligned_alloc+0x56>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   10dcc:	1939      	adds	r1, r7, r4
   10dce:	1b49      	subs	r1, r1, r5
   10dd0:	4630      	mov	r0, r6
   10dd2:	f016 fc40 	bl	27656 <bytes_to_chunksz>
   10dd6:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   10dd8:	4630      	mov	r0, r6
   10dda:	f016 fcc6 	bl	2776a <alloc_chunk>
	if (c0 == 0) {
   10dde:	4680      	mov	r8, r0
   10de0:	2800      	cmp	r0, #0
   10de2:	d0e0      	beq.n	10da6 <sys_heap_aligned_alloc+0x56>
	return big_heap(h) ? 8 : 4;
   10de4:	68b3      	ldr	r3, [r6, #8]
   10de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10dea:	bf2c      	ite	cs
   10dec:	2308      	movcs	r3, #8
   10dee:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   10df0:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   10df4:	441d      	add	r5, r3
   10df6:	4435      	add	r5, r6
   10df8:	4455      	add	r5, sl
   10dfa:	427f      	negs	r7, r7
   10dfc:	402f      	ands	r7, r5
   10dfe:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10e02:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10e04:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10e08:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10e0a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10e0c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   10e10:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   10e12:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10e16:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   10e1a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   10e1e:	d208      	bcs.n	10e32 <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c0, c);
   10e20:	4601      	mov	r1, r0
   10e22:	463a      	mov	r2, r7
   10e24:	4630      	mov	r0, r6
   10e26:	f016 fc4a 	bl	276be <split_chunks>
		free_list_add(h, c0);
   10e2a:	4641      	mov	r1, r8
   10e2c:	4630      	mov	r0, r6
   10e2e:	f016 fcd5 	bl	277dc <free_list_add>
	return c + chunk_size(h, c);
   10e32:	4639      	mov	r1, r7
   10e34:	4630      	mov	r0, r6
   10e36:	f016 fbec 	bl	27612 <chunk_size>
   10e3a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   10e3c:	4284      	cmp	r4, r0
   10e3e:	d208      	bcs.n	10e52 <sys_heap_aligned_alloc+0x102>
		split_chunks(h, c, c_end);
   10e40:	4639      	mov	r1, r7
   10e42:	4630      	mov	r0, r6
   10e44:	4622      	mov	r2, r4
   10e46:	f016 fc3a 	bl	276be <split_chunks>
		free_list_add(h, c_end);
   10e4a:	4621      	mov	r1, r4
   10e4c:	4630      	mov	r0, r6
   10e4e:	f016 fcc5 	bl	277dc <free_list_add>
	set_chunk_used(h, c, true);
   10e52:	2201      	movs	r2, #1
   10e54:	4639      	mov	r1, r7
   10e56:	4630      	mov	r0, r6
   10e58:	f016 fbe1 	bl	2761e <set_chunk_used>
	return mem;
   10e5c:	e7a5      	b.n	10daa <sys_heap_aligned_alloc+0x5a>
   10e5e:	bf00      	nop
   10e60:	0002dede 	.word	0x0002dede
   10e64:	0002de12 	.word	0x0002de12
   10e68:	0002dcd3 	.word	0x0002dcd3
   10e6c:	0002def9 	.word	0x0002def9

00010e70 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   10e70:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e76:	4607      	mov	r7, r0
   10e78:	460d      	mov	r5, r1
   10e7a:	4616      	mov	r6, r2
   10e7c:	d212      	bcs.n	10ea4 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10e7e:	2a04      	cmp	r2, #4
   10e80:	d80e      	bhi.n	10ea0 <sys_heap_init+0x30>
   10e82:	4944      	ldr	r1, [pc, #272]	; (10f94 <sys_heap_init+0x124>)
   10e84:	4a44      	ldr	r2, [pc, #272]	; (10f98 <sys_heap_init+0x128>)
   10e86:	4845      	ldr	r0, [pc, #276]	; (10f9c <sys_heap_init+0x12c>)
   10e88:	f44f 73c1 	mov.w	r3, #386	; 0x182
   10e8c:	f016 fb33 	bl	274f6 <printk>
   10e90:	4843      	ldr	r0, [pc, #268]	; (10fa0 <sys_heap_init+0x130>)
   10e92:	f016 fb30 	bl	274f6 <printk>
   10e96:	4840      	ldr	r0, [pc, #256]	; (10f98 <sys_heap_init+0x128>)
   10e98:	f44f 71c1 	mov.w	r1, #386	; 0x182
   10e9c:	f016 fdd0 	bl	27a40 <assert_post_action>
   10ea0:	2204      	movs	r2, #4
   10ea2:	e000      	b.n	10ea6 <sys_heap_init+0x36>
   10ea4:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   10ea6:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10ea8:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10eaa:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10eac:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10eb0:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10eb4:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10eb6:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10eb8:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10ebc:	d80e      	bhi.n	10edc <sys_heap_init+0x6c>
   10ebe:	4939      	ldr	r1, [pc, #228]	; (10fa4 <sys_heap_init+0x134>)
   10ec0:	4a35      	ldr	r2, [pc, #212]	; (10f98 <sys_heap_init+0x128>)
   10ec2:	4836      	ldr	r0, [pc, #216]	; (10f9c <sys_heap_init+0x12c>)
   10ec4:	f240 138b 	movw	r3, #395	; 0x18b
   10ec8:	f016 fb15 	bl	274f6 <printk>
   10ecc:	4834      	ldr	r0, [pc, #208]	; (10fa0 <sys_heap_init+0x130>)
   10ece:	f016 fb12 	bl	274f6 <printk>
   10ed2:	4831      	ldr	r0, [pc, #196]	; (10f98 <sys_heap_init+0x128>)
   10ed4:	f240 118b 	movw	r1, #395	; 0x18b
   10ed8:	f016 fdb2 	bl	27a40 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   10edc:	2300      	movs	r3, #0
	heap->heap = h;
   10ede:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10ee0:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   10ee2:	60e3      	str	r3, [r4, #12]
	h->end_chunk = heap_sz;
   10ee4:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10ee6:	4620      	mov	r0, r4
   10ee8:	f016 fbbf 	bl	2766a <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   10eec:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10eee:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10ef0:	1c47      	adds	r7, r0, #1
   10ef2:	4620      	mov	r0, r4
   10ef4:	f016 fbaf 	bl	27656 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10ef8:	351b      	adds	r5, #27
   10efa:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10efc:	4428      	add	r0, r5
   10efe:	42b0      	cmp	r0, r6
   10f00:	d90e      	bls.n	10f20 <sys_heap_init+0xb0>
   10f02:	4929      	ldr	r1, [pc, #164]	; (10fa8 <sys_heap_init+0x138>)
   10f04:	4a24      	ldr	r2, [pc, #144]	; (10f98 <sys_heap_init+0x128>)
   10f06:	4825      	ldr	r0, [pc, #148]	; (10f9c <sys_heap_init+0x12c>)
   10f08:	f44f 73cb 	mov.w	r3, #406	; 0x196
   10f0c:	f016 faf3 	bl	274f6 <printk>
   10f10:	4823      	ldr	r0, [pc, #140]	; (10fa0 <sys_heap_init+0x130>)
   10f12:	f016 faf0 	bl	274f6 <printk>
   10f16:	4820      	ldr	r0, [pc, #128]	; (10f98 <sys_heap_init+0x128>)
   10f18:	f44f 71cb 	mov.w	r1, #406	; 0x196
   10f1c:	f016 fd90 	bl	27a40 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   10f20:	2300      	movs	r3, #0
   10f22:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   10f26:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
   10f28:	42bb      	cmp	r3, r7
   10f2a:	db2f      	blt.n	10f8c <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   10f2c:	462a      	mov	r2, r5
   10f2e:	4620      	mov	r0, r4
   10f30:	2100      	movs	r1, #0
   10f32:	f016 fb8c 	bl	2764e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   10f36:	2300      	movs	r3, #0
   10f38:	461a      	mov	r2, r3
   10f3a:	4619      	mov	r1, r3
   10f3c:	4620      	mov	r0, r4
   10f3e:	f016 fb5d 	bl	275fc <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10f42:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   10f44:	4620      	mov	r0, r4
   10f46:	2201      	movs	r2, #1
   10f48:	2100      	movs	r1, #0
   10f4a:	f016 fb68 	bl	2761e <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10f4e:	463a      	mov	r2, r7
   10f50:	4629      	mov	r1, r5
   10f52:	f016 fb7c 	bl	2764e <set_chunk_size>
   10f56:	462b      	mov	r3, r5
   10f58:	4629      	mov	r1, r5
   10f5a:	4620      	mov	r0, r4
   10f5c:	2200      	movs	r2, #0
   10f5e:	f016 fb4d 	bl	275fc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   10f62:	4631      	mov	r1, r6
   10f64:	4620      	mov	r0, r4
   10f66:	2200      	movs	r2, #0
   10f68:	f016 fb71 	bl	2764e <set_chunk_size>
   10f6c:	463b      	mov	r3, r7
   10f6e:	4631      	mov	r1, r6
   10f70:	4620      	mov	r0, r4
   10f72:	2200      	movs	r2, #0
   10f74:	f016 fb42 	bl	275fc <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   10f78:	4631      	mov	r1, r6
   10f7a:	4620      	mov	r0, r4
   10f7c:	2201      	movs	r2, #1
   10f7e:	f016 fb4e 	bl	2761e <set_chunk_used>

	free_list_add(h, chunk0_size);
   10f82:	4629      	mov	r1, r5
}
   10f84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   10f88:	f016 bc28 	b.w	277dc <free_list_add>
		h->buckets[i].next = 0;
   10f8c:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   10f90:	3301      	adds	r3, #1
   10f92:	e7c9      	b.n	10f28 <sys_heap_init+0xb8>
   10f94:	0002df16 	.word	0x0002df16
   10f98:	0002de12 	.word	0x0002de12
   10f9c:	0002dcd3 	.word	0x0002dcd3
   10fa0:	0002df37 	.word	0x0002df37
   10fa4:	0002df50 	.word	0x0002df50
   10fa8:	0002df79 	.word	0x0002df79

00010fac <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fb0:	b091      	sub	sp, #68	; 0x44
   10fb2:	468b      	mov	fp, r1
   10fb4:	9002      	str	r0, [sp, #8]
   10fb6:	4692      	mov	sl, r2
   10fb8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10fba:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10fbc:	f89a 0000 	ldrb.w	r0, [sl]
   10fc0:	b908      	cbnz	r0, 10fc6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10fc2:	4628      	mov	r0, r5
   10fc4:	e35e      	b.n	11684 <cbvprintf+0x6d8>
		if (*fp != '%') {
   10fc6:	2825      	cmp	r0, #37	; 0x25
   10fc8:	f10a 0701 	add.w	r7, sl, #1
   10fcc:	d007      	beq.n	10fde <cbvprintf+0x32>
			OUTC('%');
   10fce:	9b02      	ldr	r3, [sp, #8]
   10fd0:	4659      	mov	r1, fp
   10fd2:	4798      	blx	r3
   10fd4:	2800      	cmp	r0, #0
   10fd6:	f2c0 8355 	blt.w	11684 <cbvprintf+0x6d8>
   10fda:	3501      	adds	r5, #1
			break;
   10fdc:	e210      	b.n	11400 <cbvprintf+0x454>
		} state = {
   10fde:	2218      	movs	r2, #24
   10fe0:	2100      	movs	r1, #0
   10fe2:	a80a      	add	r0, sp, #40	; 0x28
   10fe4:	f018 fd44 	bl	29a70 <memset>
	if (*sp == '%') {
   10fe8:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10fec:	2b25      	cmp	r3, #37	; 0x25
   10fee:	d078      	beq.n	110e2 <cbvprintf+0x136>
   10ff0:	2200      	movs	r2, #0
   10ff2:	4694      	mov	ip, r2
   10ff4:	4616      	mov	r6, r2
   10ff6:	4696      	mov	lr, r2
   10ff8:	4610      	mov	r0, r2
   10ffa:	4639      	mov	r1, r7
		switch (*sp) {
   10ffc:	f817 3b01 	ldrb.w	r3, [r7], #1
   11000:	2b2b      	cmp	r3, #43	; 0x2b
   11002:	f000 809d 	beq.w	11140 <cbvprintf+0x194>
   11006:	f200 8094 	bhi.w	11132 <cbvprintf+0x186>
   1100a:	2b20      	cmp	r3, #32
   1100c:	f000 809b 	beq.w	11146 <cbvprintf+0x19a>
   11010:	2b23      	cmp	r3, #35	; 0x23
   11012:	f000 809a 	beq.w	1114a <cbvprintf+0x19e>
   11016:	b128      	cbz	r0, 11024 <cbvprintf+0x78>
   11018:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1101c:	f040 0004 	orr.w	r0, r0, #4
   11020:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11024:	f1be 0f00 	cmp.w	lr, #0
   11028:	d005      	beq.n	11036 <cbvprintf+0x8a>
   1102a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1102e:	f040 0008 	orr.w	r0, r0, #8
   11032:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11036:	b12e      	cbz	r6, 11044 <cbvprintf+0x98>
   11038:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1103c:	f040 0010 	orr.w	r0, r0, #16
   11040:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11044:	f1bc 0f00 	cmp.w	ip, #0
   11048:	d005      	beq.n	11056 <cbvprintf+0xaa>
   1104a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1104e:	f040 0020 	orr.w	r0, r0, #32
   11052:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11056:	b12a      	cbz	r2, 11064 <cbvprintf+0xb8>
   11058:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1105c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11060:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   11064:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11068:	f002 0044 	and.w	r0, r2, #68	; 0x44
   1106c:	2844      	cmp	r0, #68	; 0x44
   1106e:	d103      	bne.n	11078 <cbvprintf+0xcc>
		conv->flag_zero = false;
   11070:	f36f 1286 	bfc	r2, #6, #1
   11074:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11078:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1107c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1107e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11082:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11086:	d17b      	bne.n	11180 <cbvprintf+0x1d4>
		conv->width_star = true;
   11088:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1108c:	f042 0201 	orr.w	r2, r2, #1
   11090:	1c4b      	adds	r3, r1, #1
   11092:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   11096:	781a      	ldrb	r2, [r3, #0]
   11098:	2a2e      	cmp	r2, #46	; 0x2e
   1109a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1109e:	bf0c      	ite	eq
   110a0:	2101      	moveq	r1, #1
   110a2:	2100      	movne	r1, #0
   110a4:	f361 0241 	bfi	r2, r1, #1, #1
   110a8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   110ac:	d174      	bne.n	11198 <cbvprintf+0x1ec>
	if (*sp == '*') {
   110ae:	785a      	ldrb	r2, [r3, #1]
   110b0:	2a2a      	cmp	r2, #42	; 0x2a
   110b2:	d06a      	beq.n	1118a <cbvprintf+0x1de>
   110b4:	3301      	adds	r3, #1
	size_t val = 0;
   110b6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   110b8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   110ba:	4618      	mov	r0, r3
   110bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   110c0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   110c4:	2f09      	cmp	r7, #9
   110c6:	f240 808e 	bls.w	111e6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   110ca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   110ce:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   110d0:	f3c2 0040 	ubfx	r0, r2, #1, #1
   110d4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   110d8:	f361 0241 	bfi	r2, r1, #1, #1
   110dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   110e0:	e05a      	b.n	11198 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   110e2:	f10a 0702 	add.w	r7, sl, #2
   110e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   110ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   110ee:	07d9      	lsls	r1, r3, #31
   110f0:	f140 8149 	bpl.w	11386 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   110f4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   110f8:	f1b9 0f00 	cmp.w	r9, #0
   110fc:	da07      	bge.n	1110e <cbvprintf+0x162>
				conv->flag_dash = true;
   110fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11102:	f042 0204 	orr.w	r2, r2, #4
   11106:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1110a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1110e:	075a      	lsls	r2, r3, #29
   11110:	f140 8142 	bpl.w	11398 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   11114:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   11118:	f1b8 0f00 	cmp.w	r8, #0
   1111c:	f280 8141 	bge.w	113a2 <cbvprintf+0x3f6>
				conv->prec_present = false;
   11120:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11124:	f36f 0341 	bfc	r3, #1, #1
   11128:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1112c:	f04f 38ff 	mov.w	r8, #4294967295
   11130:	e137      	b.n	113a2 <cbvprintf+0x3f6>
		switch (*sp) {
   11132:	2b2d      	cmp	r3, #45	; 0x2d
   11134:	d00c      	beq.n	11150 <cbvprintf+0x1a4>
   11136:	2b30      	cmp	r3, #48	; 0x30
   11138:	f47f af6d 	bne.w	11016 <cbvprintf+0x6a>
			conv->flag_zero = true;
   1113c:	2201      	movs	r2, #1
	} while (loop);
   1113e:	e75c      	b.n	10ffa <cbvprintf+0x4e>
			conv->flag_plus = true;
   11140:	f04f 0e01 	mov.w	lr, #1
   11144:	e759      	b.n	10ffa <cbvprintf+0x4e>
			conv->flag_space = true;
   11146:	2601      	movs	r6, #1
   11148:	e757      	b.n	10ffa <cbvprintf+0x4e>
			conv->flag_hash = true;
   1114a:	f04f 0c01 	mov.w	ip, #1
   1114e:	e754      	b.n	10ffa <cbvprintf+0x4e>
		switch (*sp) {
   11150:	2001      	movs	r0, #1
   11152:	e752      	b.n	10ffa <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   11154:	fb0c 0202 	mla	r2, ip, r2, r0
   11158:	3a30      	subs	r2, #48	; 0x30
   1115a:	4633      	mov	r3, r6
   1115c:	461e      	mov	r6, r3
   1115e:	f816 0b01 	ldrb.w	r0, [r6], #1
   11162:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11166:	2f09      	cmp	r7, #9
   11168:	d9f4      	bls.n	11154 <cbvprintf+0x1a8>
	if (sp != wp) {
   1116a:	4299      	cmp	r1, r3
   1116c:	d093      	beq.n	11096 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1116e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   11172:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   11174:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   11176:	f362 0141 	bfi	r1, r2, #1, #1
   1117a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1117e:	e78a      	b.n	11096 <cbvprintf+0xea>
   11180:	460b      	mov	r3, r1
	size_t val = 0;
   11182:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11184:	f04f 0c0a 	mov.w	ip, #10
   11188:	e7e8      	b.n	1115c <cbvprintf+0x1b0>
		conv->prec_star = true;
   1118a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1118e:	f042 0204 	orr.w	r2, r2, #4
   11192:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   11196:	3302      	adds	r3, #2
	switch (*sp) {
   11198:	461f      	mov	r7, r3
   1119a:	f817 2b01 	ldrb.w	r2, [r7], #1
   1119e:	2a6c      	cmp	r2, #108	; 0x6c
   111a0:	d041      	beq.n	11226 <cbvprintf+0x27a>
   111a2:	d825      	bhi.n	111f0 <cbvprintf+0x244>
   111a4:	2a68      	cmp	r2, #104	; 0x68
   111a6:	d02b      	beq.n	11200 <cbvprintf+0x254>
   111a8:	2a6a      	cmp	r2, #106	; 0x6a
   111aa:	d046      	beq.n	1123a <cbvprintf+0x28e>
   111ac:	2a4c      	cmp	r2, #76	; 0x4c
   111ae:	d04c      	beq.n	1124a <cbvprintf+0x29e>
   111b0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   111b2:	f817 2b01 	ldrb.w	r2, [r7], #1
   111b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   111ba:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   111be:	2a78      	cmp	r2, #120	; 0x78
   111c0:	f200 80d9 	bhi.w	11376 <cbvprintf+0x3ca>
   111c4:	2a57      	cmp	r2, #87	; 0x57
   111c6:	d84d      	bhi.n	11264 <cbvprintf+0x2b8>
   111c8:	2a41      	cmp	r2, #65	; 0x41
   111ca:	d003      	beq.n	111d4 <cbvprintf+0x228>
   111cc:	3a45      	subs	r2, #69	; 0x45
   111ce:	2a02      	cmp	r2, #2
   111d0:	f200 80d1 	bhi.w	11376 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   111d4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   111d8:	2204      	movs	r2, #4
   111da:	f362 0302 	bfi	r3, r2, #0, #3
   111de:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   111e2:	2301      	movs	r3, #1
			break;
   111e4:	e09e      	b.n	11324 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   111e6:	fb06 2101 	mla	r1, r6, r1, r2
   111ea:	3930      	subs	r1, #48	; 0x30
   111ec:	4603      	mov	r3, r0
   111ee:	e764      	b.n	110ba <cbvprintf+0x10e>
	switch (*sp) {
   111f0:	2a74      	cmp	r2, #116	; 0x74
   111f2:	d026      	beq.n	11242 <cbvprintf+0x296>
   111f4:	2a7a      	cmp	r2, #122	; 0x7a
   111f6:	d1db      	bne.n	111b0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   111f8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   111fc:	2206      	movs	r2, #6
   111fe:	e00d      	b.n	1121c <cbvprintf+0x270>
		if (*++sp == 'h') {
   11200:	785a      	ldrb	r2, [r3, #1]
   11202:	2a68      	cmp	r2, #104	; 0x68
   11204:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11208:	d106      	bne.n	11218 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   1120a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1120c:	f361 02c6 	bfi	r2, r1, #3, #4
   11210:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   11214:	1c9f      	adds	r7, r3, #2
   11216:	e7cc      	b.n	111b2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   11218:	4613      	mov	r3, r2
   1121a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1121c:	f362 03c6 	bfi	r3, r2, #3, #4
   11220:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   11224:	e7c5      	b.n	111b2 <cbvprintf+0x206>
		if (*++sp == 'l') {
   11226:	785a      	ldrb	r2, [r3, #1]
   11228:	2a6c      	cmp	r2, #108	; 0x6c
   1122a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1122e:	d101      	bne.n	11234 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   11230:	2104      	movs	r1, #4
   11232:	e7eb      	b.n	1120c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   11234:	4613      	mov	r3, r2
   11236:	2203      	movs	r2, #3
   11238:	e7f0      	b.n	1121c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1123a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1123e:	2205      	movs	r2, #5
   11240:	e7ec      	b.n	1121c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   11242:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11246:	2207      	movs	r2, #7
   11248:	e7e8      	b.n	1121c <cbvprintf+0x270>
		conv->unsupported = true;
   1124a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1124e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   11252:	f023 0302 	bic.w	r3, r3, #2
   11256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1125a:	f043 0302 	orr.w	r3, r3, #2
   1125e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   11262:	e7a6      	b.n	111b2 <cbvprintf+0x206>
   11264:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11268:	2920      	cmp	r1, #32
   1126a:	f200 8084 	bhi.w	11376 <cbvprintf+0x3ca>
   1126e:	a001      	add	r0, pc, #4	; (adr r0, 11274 <cbvprintf+0x2c8>)
   11270:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11274:	00011339 	.word	0x00011339
   11278:	00011377 	.word	0x00011377
   1127c:	00011377 	.word	0x00011377
   11280:	00011377 	.word	0x00011377
   11284:	00011377 	.word	0x00011377
   11288:	00011377 	.word	0x00011377
   1128c:	00011377 	.word	0x00011377
   11290:	00011377 	.word	0x00011377
   11294:	00011377 	.word	0x00011377
   11298:	000111d5 	.word	0x000111d5
   1129c:	00011377 	.word	0x00011377
   112a0:	00011339 	.word	0x00011339
   112a4:	000112f9 	.word	0x000112f9
   112a8:	000111d5 	.word	0x000111d5
   112ac:	000111d5 	.word	0x000111d5
   112b0:	000111d5 	.word	0x000111d5
   112b4:	00011377 	.word	0x00011377
   112b8:	000112f9 	.word	0x000112f9
   112bc:	00011377 	.word	0x00011377
   112c0:	00011377 	.word	0x00011377
   112c4:	00011377 	.word	0x00011377
   112c8:	00011377 	.word	0x00011377
   112cc:	00011341 	.word	0x00011341
   112d0:	00011339 	.word	0x00011339
   112d4:	0001135d 	.word	0x0001135d
   112d8:	00011377 	.word	0x00011377
   112dc:	00011377 	.word	0x00011377
   112e0:	0001135d 	.word	0x0001135d
   112e4:	00011377 	.word	0x00011377
   112e8:	00011339 	.word	0x00011339
   112ec:	00011377 	.word	0x00011377
   112f0:	00011377 	.word	0x00011377
   112f4:	00011339 	.word	0x00011339
		conv->specifier_cat = SPECIFIER_SINT;
   112f8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   112fc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   112fe:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11302:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11306:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11308:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1130c:	bf02      	ittt	eq
   1130e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   11312:	f041 0101 	orreq.w	r1, r1, #1
   11316:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1131a:	2a63      	cmp	r2, #99	; 0x63
   1131c:	d131      	bne.n	11382 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1131e:	3b00      	subs	r3, #0
   11320:	bf18      	it	ne
   11322:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   11324:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11328:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1132c:	430b      	orrs	r3, r1
   1132e:	f363 0241 	bfi	r2, r3, #1, #1
   11332:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11336:	e6d8      	b.n	110ea <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   11338:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1133c:	2002      	movs	r0, #2
   1133e:	e7de      	b.n	112fe <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   11340:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11344:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11348:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1134c:	2103      	movs	r1, #3
   1134e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11352:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11354:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11358:	4143      	adcs	r3, r0
   1135a:	e7e3      	b.n	11324 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   1135c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11360:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   11362:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11366:	f361 0202 	bfi	r2, r1, #0, #3
   1136a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1136e:	bf14      	ite	ne
   11370:	2301      	movne	r3, #1
   11372:	2300      	moveq	r3, #0
   11374:	e7d6      	b.n	11324 <cbvprintf+0x378>
		conv->invalid = true;
   11376:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1137a:	f043 0301 	orr.w	r3, r3, #1
   1137e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   11382:	2300      	movs	r3, #0
   11384:	e7ce      	b.n	11324 <cbvprintf+0x378>
		} else if (conv->width_present) {
   11386:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1138a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1138c:	bfb4      	ite	lt
   1138e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   11392:	f04f 39ff 	movge.w	r9, #4294967295
   11396:	e6ba      	b.n	1110e <cbvprintf+0x162>
		} else if (conv->prec_present) {
   11398:	079b      	lsls	r3, r3, #30
   1139a:	f57f aec7 	bpl.w	1112c <cbvprintf+0x180>
			precision = conv->prec_value;
   1139e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   113a2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   113a6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   113a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   113ac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   113b0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   113b4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   113b6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   113ba:	d136      	bne.n	1142a <cbvprintf+0x47e>
			switch (length_mod) {
   113bc:	1ed3      	subs	r3, r2, #3
   113be:	2b04      	cmp	r3, #4
   113c0:	d820      	bhi.n	11404 <cbvprintf+0x458>
   113c2:	e8df f003 	tbb	[pc, r3]
   113c6:	0703      	.short	0x0703
   113c8:	1f07      	.short	0x1f07
   113ca:	1f          	.byte	0x1f
   113cb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   113cc:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   113d0:	17c1      	asrs	r1, r0, #31
   113d2:	e004      	b.n	113de <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   113d4:	3407      	adds	r4, #7
   113d6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   113da:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   113de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   113e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   113e6:	f013 0603 	ands.w	r6, r3, #3
   113ea:	d054      	beq.n	11496 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   113ec:	9802      	ldr	r0, [sp, #8]
   113ee:	463b      	mov	r3, r7
   113f0:	4652      	mov	r2, sl
   113f2:	4659      	mov	r1, fp
   113f4:	f016 fb0e 	bl	27a14 <outs>
   113f8:	2800      	cmp	r0, #0
   113fa:	f2c0 8143 	blt.w	11684 <cbvprintf+0x6d8>
   113fe:	4405      	add	r5, r0
			continue;
   11400:	46ba      	mov	sl, r7
   11402:	e5db      	b.n	10fbc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11404:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   11408:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1140a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1140e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11412:	d105      	bne.n	11420 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   11414:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   11418:	930a      	str	r3, [sp, #40]	; 0x28
   1141a:	2300      	movs	r3, #0
   1141c:	930b      	str	r3, [sp, #44]	; 0x2c
   1141e:	e7e0      	b.n	113e2 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   11420:	2a02      	cmp	r2, #2
   11422:	d1de      	bne.n	113e2 <cbvprintf+0x436>
				value->sint = (short)value->sint;
   11424:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   11428:	e7d2      	b.n	113d0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1142a:	2b02      	cmp	r3, #2
   1142c:	d123      	bne.n	11476 <cbvprintf+0x4ca>
			switch (length_mod) {
   1142e:	1ed3      	subs	r3, r2, #3
   11430:	2b04      	cmp	r3, #4
   11432:	d813      	bhi.n	1145c <cbvprintf+0x4b0>
   11434:	e8df f003 	tbb	[pc, r3]
   11438:	120a0a03 	.word	0x120a0a03
   1143c:	12          	.byte	0x12
   1143d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1143e:	6820      	ldr	r0, [r4, #0]
   11440:	900a      	str	r0, [sp, #40]	; 0x28
   11442:	2100      	movs	r1, #0
   11444:	1d23      	adds	r3, r4, #4
   11446:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   11448:	461c      	mov	r4, r3
   1144a:	e7ca      	b.n	113e2 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   1144c:	3407      	adds	r4, #7
   1144e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   11452:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   11456:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1145a:	e7f5      	b.n	11448 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   1145c:	f854 3b04 	ldr.w	r3, [r4], #4
   11460:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11462:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   11464:	f04f 0300 	mov.w	r3, #0
   11468:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1146a:	d0d3      	beq.n	11414 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   1146c:	2a02      	cmp	r2, #2
   1146e:	d1b8      	bne.n	113e2 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   11470:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11474:	e7d0      	b.n	11418 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   11476:	2b04      	cmp	r3, #4
   11478:	d107      	bne.n	1148a <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   1147a:	3407      	adds	r4, #7
   1147c:	f024 0407 	bic.w	r4, r4, #7
   11480:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   11484:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11488:	e7ab      	b.n	113e2 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1148a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1148c:	bf04      	itt	eq
   1148e:	f854 3b04 	ldreq.w	r3, [r4], #4
   11492:	930a      	streq	r3, [sp, #40]	; 0x28
   11494:	e7a5      	b.n	113e2 <cbvprintf+0x436>
		switch (conv->specifier) {
   11496:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1149a:	2878      	cmp	r0, #120	; 0x78
   1149c:	d8b0      	bhi.n	11400 <cbvprintf+0x454>
   1149e:	2862      	cmp	r0, #98	; 0x62
   114a0:	d822      	bhi.n	114e8 <cbvprintf+0x53c>
   114a2:	2825      	cmp	r0, #37	; 0x25
   114a4:	f43f ad93 	beq.w	10fce <cbvprintf+0x22>
   114a8:	2858      	cmp	r0, #88	; 0x58
   114aa:	d1a9      	bne.n	11400 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   114ac:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   114b0:	9300      	str	r3, [sp, #0]
   114b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   114b6:	ab04      	add	r3, sp, #16
   114b8:	aa0c      	add	r2, sp, #48	; 0x30
   114ba:	f016 fa60 	bl	2797e <encode_uint>
   114be:	4682      	mov	sl, r0
			if (precision >= 0) {
   114c0:	f1b8 0f00 	cmp.w	r8, #0
   114c4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   114c8:	db0c      	blt.n	114e4 <cbvprintf+0x538>
				conv->flag_zero = false;
   114ca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   114ce:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   114d2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   114d6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   114d8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   114dc:	d902      	bls.n	114e4 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   114de:	eba8 0303 	sub.w	r3, r8, r3
   114e2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   114e4:	4680      	mov	r8, r0
   114e6:	e03d      	b.n	11564 <cbvprintf+0x5b8>
   114e8:	3863      	subs	r0, #99	; 0x63
   114ea:	2815      	cmp	r0, #21
   114ec:	d888      	bhi.n	11400 <cbvprintf+0x454>
   114ee:	a101      	add	r1, pc, #4	; (adr r1, 114f4 <cbvprintf+0x548>)
   114f0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   114f4:	00011575 	.word	0x00011575
   114f8:	000115d9 	.word	0x000115d9
   114fc:	00011401 	.word	0x00011401
   11500:	00011401 	.word	0x00011401
   11504:	00011401 	.word	0x00011401
   11508:	00011401 	.word	0x00011401
   1150c:	000115d9 	.word	0x000115d9
   11510:	00011401 	.word	0x00011401
   11514:	00011401 	.word	0x00011401
   11518:	00011401 	.word	0x00011401
   1151c:	00011401 	.word	0x00011401
   11520:	00011637 	.word	0x00011637
   11524:	00011605 	.word	0x00011605
   11528:	00011609 	.word	0x00011609
   1152c:	00011401 	.word	0x00011401
   11530:	00011401 	.word	0x00011401
   11534:	0001154d 	.word	0x0001154d
   11538:	00011401 	.word	0x00011401
   1153c:	00011605 	.word	0x00011605
   11540:	00011401 	.word	0x00011401
   11544:	00011401 	.word	0x00011401
   11548:	00011605 	.word	0x00011605
			if (precision >= 0) {
   1154c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   11550:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   11554:	db0a      	blt.n	1156c <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   11556:	4641      	mov	r1, r8
   11558:	4650      	mov	r0, sl
   1155a:	f018 fa33 	bl	299c4 <strnlen>
			bpe = bps + len;
   1155e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   11562:	2600      	movs	r6, #0
		if (bps == NULL) {
   11564:	f1ba 0f00 	cmp.w	sl, #0
   11568:	d10c      	bne.n	11584 <cbvprintf+0x5d8>
   1156a:	e749      	b.n	11400 <cbvprintf+0x454>
				len = strlen(bps);
   1156c:	4650      	mov	r0, sl
   1156e:	f018 fa22 	bl	299b6 <strlen>
   11572:	e7f4      	b.n	1155e <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11576:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   1157a:	2600      	movs	r6, #0
			bpe = buf + 1;
   1157c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   11580:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   11584:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   11588:	b106      	cbz	r6, 1158c <cbvprintf+0x5e0>
			nj_len += 1U;
   1158a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1158c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11590:	06d0      	lsls	r0, r2, #27
   11592:	d56b      	bpl.n	1166c <cbvprintf+0x6c0>
			nj_len += 2U;
   11594:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   11596:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   11598:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   1159a:	bf48      	it	mi
   1159c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1159e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   115a0:	bf48      	it	mi
   115a2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   115a4:	f1b9 0f00 	cmp.w	r9, #0
   115a8:	dd79      	ble.n	1169e <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   115aa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   115ae:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   115b2:	f3c2 0380 	ubfx	r3, r2, #2, #1
   115b6:	9303      	str	r3, [sp, #12]
   115b8:	0753      	lsls	r3, r2, #29
   115ba:	d470      	bmi.n	1169e <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   115bc:	0650      	lsls	r0, r2, #25
   115be:	d564      	bpl.n	1168a <cbvprintf+0x6de>
					if (sign != 0) {
   115c0:	b146      	cbz	r6, 115d4 <cbvprintf+0x628>
						OUTC(sign);
   115c2:	9b02      	ldr	r3, [sp, #8]
   115c4:	4659      	mov	r1, fp
   115c6:	4630      	mov	r0, r6
   115c8:	4798      	blx	r3
   115ca:	2800      	cmp	r0, #0
   115cc:	db5a      	blt.n	11684 <cbvprintf+0x6d8>
						sign = 0;
   115ce:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   115d0:	3501      	adds	r5, #1
						sign = 0;
   115d2:	461e      	mov	r6, r3
					pad = '0';
   115d4:	2330      	movs	r3, #48	; 0x30
   115d6:	e059      	b.n	1168c <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   115d8:	071e      	lsls	r6, r3, #28
   115da:	d411      	bmi.n	11600 <cbvprintf+0x654>
				sign = ' ';
   115dc:	f013 0610 	ands.w	r6, r3, #16
   115e0:	bf18      	it	ne
   115e2:	2620      	movne	r6, #32
			sint = value->sint;
   115e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   115e8:	2a00      	cmp	r2, #0
   115ea:	f173 0100 	sbcs.w	r1, r3, #0
   115ee:	f6bf af5d 	bge.w	114ac <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   115f2:	4252      	negs	r2, r2
   115f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   115f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   115fc:	262d      	movs	r6, #45	; 0x2d
   115fe:	e755      	b.n	114ac <cbvprintf+0x500>
				sign = '+';
   11600:	262b      	movs	r6, #43	; 0x2b
   11602:	e7ef      	b.n	115e4 <cbvprintf+0x638>
		switch (conv->specifier) {
   11604:	2600      	movs	r6, #0
   11606:	e751      	b.n	114ac <cbvprintf+0x500>
			if (value->ptr != NULL) {
   11608:	980a      	ldr	r0, [sp, #40]	; 0x28
   1160a:	b348      	cbz	r0, 11660 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1160c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11610:	9300      	str	r3, [sp, #0]
   11612:	aa0c      	add	r2, sp, #48	; 0x30
   11614:	ab04      	add	r3, sp, #16
   11616:	2100      	movs	r1, #0
   11618:	f016 f9b1 	bl	2797e <encode_uint>
				conv->altform_0c = true;
   1161c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11620:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11624:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11628:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1162c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1162e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   11632:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11634:	e744      	b.n	114c0 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   11636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   11638:	2a07      	cmp	r2, #7
   1163a:	f63f aee1 	bhi.w	11400 <cbvprintf+0x454>
   1163e:	e8df f002 	tbb	[pc, r2]
   11642:	040d      	.short	0x040d
   11644:	08080d06 	.word	0x08080d06
   11648:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1164a:	701d      	strb	r5, [r3, #0]
		break;
   1164c:	e6d8      	b.n	11400 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1164e:	801d      	strh	r5, [r3, #0]
		break;
   11650:	e6d6      	b.n	11400 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   11652:	4628      	mov	r0, r5
   11654:	17e9      	asrs	r1, r5, #31
   11656:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1165a:	e6d1      	b.n	11400 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1165c:	601d      	str	r5, [r3, #0]
		break;
   1165e:	e6cf      	b.n	11400 <cbvprintf+0x454>
			bpe = bps + 5;
   11660:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 11728 <cbvprintf+0x77c>
   11664:	4606      	mov	r6, r0
			bps = "(nil)";
   11666:	f1a8 0a05 	sub.w	sl, r8, #5
   1166a:	e78b      	b.n	11584 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   1166c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1166e:	bf48      	it	mi
   11670:	3301      	addmi	r3, #1
   11672:	e790      	b.n	11596 <cbvprintf+0x5ea>
					OUTC(pad);
   11674:	4618      	mov	r0, r3
   11676:	9303      	str	r3, [sp, #12]
   11678:	4659      	mov	r1, fp
   1167a:	9b02      	ldr	r3, [sp, #8]
   1167c:	4798      	blx	r3
   1167e:	2800      	cmp	r0, #0
   11680:	9b03      	ldr	r3, [sp, #12]
   11682:	da04      	bge.n	1168e <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   11684:	b011      	add	sp, #68	; 0x44
   11686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1168a:	2320      	movs	r3, #32
   1168c:	444d      	add	r5, r9
   1168e:	464a      	mov	r2, r9
				while (width-- > 0) {
   11690:	2a00      	cmp	r2, #0
   11692:	eba5 0109 	sub.w	r1, r5, r9
   11696:	f109 39ff 	add.w	r9, r9, #4294967295
   1169a:	dceb      	bgt.n	11674 <cbvprintf+0x6c8>
   1169c:	460d      	mov	r5, r1
		if (sign != 0) {
   1169e:	b136      	cbz	r6, 116ae <cbvprintf+0x702>
			OUTC(sign);
   116a0:	9b02      	ldr	r3, [sp, #8]
   116a2:	4659      	mov	r1, fp
   116a4:	4630      	mov	r0, r6
   116a6:	4798      	blx	r3
   116a8:	2800      	cmp	r0, #0
   116aa:	dbeb      	blt.n	11684 <cbvprintf+0x6d8>
   116ac:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   116ae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   116b2:	06d9      	lsls	r1, r3, #27
   116b4:	d401      	bmi.n	116ba <cbvprintf+0x70e>
   116b6:	071a      	lsls	r2, r3, #28
   116b8:	d506      	bpl.n	116c8 <cbvprintf+0x71c>
				OUTC('0');
   116ba:	9b02      	ldr	r3, [sp, #8]
   116bc:	4659      	mov	r1, fp
   116be:	2030      	movs	r0, #48	; 0x30
   116c0:	4798      	blx	r3
   116c2:	2800      	cmp	r0, #0
   116c4:	dbde      	blt.n	11684 <cbvprintf+0x6d8>
   116c6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   116c8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   116cc:	06db      	lsls	r3, r3, #27
   116ce:	d507      	bpl.n	116e0 <cbvprintf+0x734>
				OUTC(conv->specifier);
   116d0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   116d4:	9b02      	ldr	r3, [sp, #8]
   116d6:	4659      	mov	r1, fp
   116d8:	4798      	blx	r3
   116da:	2800      	cmp	r0, #0
   116dc:	dbd2      	blt.n	11684 <cbvprintf+0x6d8>
   116de:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   116e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   116e2:	442e      	add	r6, r5
   116e4:	1b73      	subs	r3, r6, r5
   116e6:	2b00      	cmp	r3, #0
   116e8:	dc16      	bgt.n	11718 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   116ea:	9802      	ldr	r0, [sp, #8]
   116ec:	4643      	mov	r3, r8
   116ee:	4652      	mov	r2, sl
   116f0:	4659      	mov	r1, fp
   116f2:	f016 f98f 	bl	27a14 <outs>
   116f6:	2800      	cmp	r0, #0
   116f8:	dbc4      	blt.n	11684 <cbvprintf+0x6d8>
   116fa:	4405      	add	r5, r0
		while (width > 0) {
   116fc:	44a9      	add	r9, r5
   116fe:	eba9 0305 	sub.w	r3, r9, r5
   11702:	2b00      	cmp	r3, #0
   11704:	f77f ae7c 	ble.w	11400 <cbvprintf+0x454>
			OUTC(' ');
   11708:	9b02      	ldr	r3, [sp, #8]
   1170a:	4659      	mov	r1, fp
   1170c:	2020      	movs	r0, #32
   1170e:	4798      	blx	r3
   11710:	2800      	cmp	r0, #0
   11712:	dbb7      	blt.n	11684 <cbvprintf+0x6d8>
   11714:	3501      	adds	r5, #1
			--width;
   11716:	e7f2      	b.n	116fe <cbvprintf+0x752>
				OUTC('0');
   11718:	9b02      	ldr	r3, [sp, #8]
   1171a:	4659      	mov	r1, fp
   1171c:	2030      	movs	r0, #48	; 0x30
   1171e:	4798      	blx	r3
   11720:	2800      	cmp	r0, #0
   11722:	dbaf      	blt.n	11684 <cbvprintf+0x6d8>
   11724:	3501      	adds	r5, #1
   11726:	e7dd      	b.n	116e4 <cbvprintf+0x738>
   11728:	0002dfa9 	.word	0x0002dfa9

0001172c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1172c:	b508      	push	{r3, lr}
   1172e:	4604      	mov	r4, r0
	__asm__ volatile(
   11730:	f04f 0240 	mov.w	r2, #64	; 0x40
   11734:	f3ef 8311 	mrs	r3, BASEPRI
   11738:	f382 8811 	msr	BASEPRI, r2
   1173c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   11740:	f016 ffcc 	bl	286dc <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11744:	4620      	mov	r0, r4
   11746:	f003 fb3d 	bl	14dc4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1174a:	4803      	ldr	r0, [pc, #12]	; (11758 <sys_reboot+0x2c>)
   1174c:	f015 fed3 	bl	274f6 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11750:	f002 fe38 	bl	143c4 <arch_cpu_idle>
   11754:	e7fc      	b.n	11750 <sys_reboot+0x24>
   11756:	bf00      	nop
   11758:	0002dfaa 	.word	0x0002dfaa

0001175c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1175c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1175e:	4910      	ldr	r1, [pc, #64]	; (117a0 <enable_logger+0x44>)
   11760:	4810      	ldr	r0, [pc, #64]	; (117a4 <enable_logger+0x48>)
{
   11762:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   11764:	2200      	movs	r2, #0
   11766:	f01b f84a 	bl	2c7fe <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1176a:	4d0f      	ldr	r5, [pc, #60]	; (117a8 <enable_logger+0x4c>)
   1176c:	490f      	ldr	r1, [pc, #60]	; (117ac <enable_logger+0x50>)
   1176e:	2200      	movs	r2, #0
   11770:	2300      	movs	r3, #0
   11772:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11776:	2400      	movs	r4, #0
   11778:	230e      	movs	r3, #14
   1177a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1177e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11782:	4b0b      	ldr	r3, [pc, #44]	; (117b0 <enable_logger+0x54>)
   11784:	9400      	str	r4, [sp, #0]
   11786:	f44f 7240 	mov.w	r2, #768	; 0x300
   1178a:	4628      	mov	r0, r5
   1178c:	f00f fc7a 	bl	21084 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11790:	4908      	ldr	r1, [pc, #32]	; (117b4 <enable_logger+0x58>)
   11792:	4628      	mov	r0, r5
   11794:	f01a ff2e 	bl	2c5f4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   11798:	4620      	mov	r0, r4
   1179a:	b009      	add	sp, #36	; 0x24
   1179c:	bd30      	pop	{r4, r5, pc}
   1179e:	bf00      	nop
   117a0:	000117b9 	.word	0x000117b9
   117a4:	20001618 	.word	0x20001618
   117a8:	20001650 	.word	0x20001650
   117ac:	20005020 	.word	0x20005020
   117b0:	00011cc9 	.word	0x00011cc9
   117b4:	0002dfd3 	.word	0x0002dfd3

000117b8 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   117b8:	4801      	ldr	r0, [pc, #4]	; (117c0 <log_process_thread_timer_expiry_fn+0x8>)
   117ba:	f010 b8bf 	b.w	2193c <z_impl_k_sem_give>
   117be:	bf00      	nop
   117c0:	20000874 	.word	0x20000874

000117c4 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   117c4:	2920      	cmp	r1, #32
{
   117c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117c8:	4605      	mov	r5, r0
   117ca:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   117cc:	d909      	bls.n	117e2 <z_log_get_s_mask+0x1e>
   117ce:	4914      	ldr	r1, [pc, #80]	; (11820 <z_log_get_s_mask+0x5c>)
   117d0:	4814      	ldr	r0, [pc, #80]	; (11824 <z_log_get_s_mask+0x60>)
   117d2:	4a15      	ldr	r2, [pc, #84]	; (11828 <z_log_get_s_mask+0x64>)
   117d4:	2380      	movs	r3, #128	; 0x80
   117d6:	f015 fe8e 	bl	274f6 <printk>
   117da:	4813      	ldr	r0, [pc, #76]	; (11828 <z_log_get_s_mask+0x64>)
   117dc:	2180      	movs	r1, #128	; 0x80
   117de:	f016 f92f 	bl	27a40 <assert_post_action>
			arm = false;
   117e2:	2000      	movs	r0, #0
   117e4:	4603      	mov	r3, r0
   117e6:	4602      	mov	r2, r0
				mask |= BIT(arg);
   117e8:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   117ea:	f815 1b01 	ldrb.w	r1, [r5], #1
   117ee:	b109      	cbz	r1, 117f4 <z_log_get_s_mask+0x30>
   117f0:	42a3      	cmp	r3, r4
   117f2:	d300      	bcc.n	117f6 <z_log_get_s_mask+0x32>
}
   117f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   117f6:	2925      	cmp	r1, #37	; 0x25
   117f8:	d102      	bne.n	11800 <z_log_get_s_mask+0x3c>
			arm = !arm;
   117fa:	f082 0201 	eor.w	r2, r2, #1
   117fe:	e7f4      	b.n	117ea <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
   11800:	2a00      	cmp	r2, #0
   11802:	d0f2      	beq.n	117ea <z_log_get_s_mask+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   11804:	f041 0620 	orr.w	r6, r1, #32
   11808:	3e61      	subs	r6, #97	; 0x61
   1180a:	2e19      	cmp	r6, #25
   1180c:	d8ed      	bhi.n	117ea <z_log_get_s_mask+0x26>
			if (curr == 's') {
   1180e:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   11810:	bf04      	itt	eq
   11812:	fa07 f203 	lsleq.w	r2, r7, r3
   11816:	4310      	orreq	r0, r2
			arg++;
   11818:	3301      	adds	r3, #1
			arm = false;
   1181a:	2200      	movs	r2, #0
   1181c:	e7e5      	b.n	117ea <z_log_get_s_mask+0x26>
   1181e:	bf00      	nop
   11820:	0002e008 	.word	0x0002e008
   11824:	0002dcd3 	.word	0x0002dcd3
   11828:	0002dfdb 	.word	0x0002dfdb

0001182c <log_core_init>:
{
   1182c:	b510      	push	{r4, lr}
	panic_mode = false;
   1182e:	4b0b      	ldr	r3, [pc, #44]	; (1185c <log_core_init+0x30>)
   11830:	2200      	movs	r2, #0
   11832:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   11834:	4b0a      	ldr	r3, [pc, #40]	; (11860 <log_core_init+0x34>)
   11836:	4a0b      	ldr	r2, [pc, #44]	; (11864 <log_core_init+0x38>)
   11838:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1183a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1183e:	f000 fdb9 	bl	123b4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   11842:	f000 fabf 	bl	11dc4 <log_msg_pool_init>
		log_list_init(&list);
   11846:	4808      	ldr	r0, [pc, #32]	; (11868 <log_core_init+0x3c>)
   11848:	f016 f902 	bl	27a50 <log_list_init>
}
   1184c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   11850:	4906      	ldr	r1, [pc, #24]	; (1186c <log_core_init+0x40>)
   11852:	4807      	ldr	r0, [pc, #28]	; (11870 <log_core_init+0x44>)
   11854:	2308      	movs	r3, #8
   11856:	2248      	movs	r2, #72	; 0x48
   11858:	f01a beaa 	b.w	2c5b0 <k_mem_slab_init>
   1185c:	20003d5a 	.word	0x20003d5a
   11860:	20000450 	.word	0x20000450
   11864:	00027a95 	.word	0x00027a95
   11868:	20002974 	.word	0x20002974
   1186c:	20008a18 	.word	0x20008a18
   11870:	2000297c 	.word	0x2000297c

00011874 <get_msg>:
{
   11874:	b510      	push	{r4, lr}
   11876:	f04f 0340 	mov.w	r3, #64	; 0x40
   1187a:	f3ef 8411 	mrs	r4, BASEPRI
   1187e:	f383 8811 	msr	BASEPRI, r3
   11882:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11886:	4804      	ldr	r0, [pc, #16]	; (11898 <get_msg+0x24>)
   11888:	f016 f8f2 	bl	27a70 <log_list_head_get>
	__asm__ volatile(
   1188c:	f384 8811 	msr	BASEPRI, r4
   11890:	f3bf 8f6f 	isb	sy
}
   11894:	bd10      	pop	{r4, pc}
   11896:	bf00      	nop
   11898:	20002974 	.word	0x20002974

0001189c <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1189c:	4b06      	ldr	r3, [pc, #24]	; (118b8 <z_log_dropped+0x1c>)
   1189e:	f3bf 8f5b 	dmb	ish
   118a2:	e853 2f00 	ldrex	r2, [r3]
   118a6:	3201      	adds	r2, #1
   118a8:	e843 2100 	strex	r1, r2, [r3]
   118ac:	2900      	cmp	r1, #0
   118ae:	d1f8      	bne.n	118a2 <z_log_dropped+0x6>
   118b0:	f3bf 8f5b 	dmb	ish
}
   118b4:	4770      	bx	lr
   118b6:	bf00      	nop
   118b8:	2000296c 	.word	0x2000296c

000118bc <z_log_dropped_read_and_clear>:
}
   118bc:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   118be:	4b06      	ldr	r3, [pc, #24]	; (118d8 <z_log_dropped_read_and_clear+0x1c>)
   118c0:	f3bf 8f5b 	dmb	ish
   118c4:	4602      	mov	r2, r0
   118c6:	e853 0f00 	ldrex	r0, [r3]
   118ca:	e843 2100 	strex	r1, r2, [r3]
   118ce:	2900      	cmp	r1, #0
   118d0:	d1f9      	bne.n	118c6 <z_log_dropped_read_and_clear+0xa>
   118d2:	f3bf 8f5b 	dmb	ish
   118d6:	4770      	bx	lr
   118d8:	2000296c 	.word	0x2000296c

000118dc <dropped_notify>:
{
   118dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   118de:	f7ff ffed 	bl	118bc <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   118e2:	4c0b      	ldr	r4, [pc, #44]	; (11910 <dropped_notify+0x34>)
   118e4:	4d0b      	ldr	r5, [pc, #44]	; (11914 <dropped_notify+0x38>)
   118e6:	1b2d      	subs	r5, r5, r4
   118e8:	4607      	mov	r7, r0
   118ea:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   118ec:	2600      	movs	r6, #0
   118ee:	42ae      	cmp	r6, r5
   118f0:	db00      	blt.n	118f4 <dropped_notify+0x18>
}
   118f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   118f4:	4620      	mov	r0, r4
   118f6:	f016 f8c1 	bl	27a7c <log_backend_is_active>
   118fa:	b128      	cbz	r0, 11908 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   118fc:	6823      	ldr	r3, [r4, #0]
   118fe:	691b      	ldr	r3, [r3, #16]
   11900:	b113      	cbz	r3, 11908 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   11902:	4639      	mov	r1, r7
   11904:	4620      	mov	r0, r4
   11906:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11908:	3601      	adds	r6, #1
   1190a:	3410      	adds	r4, #16
   1190c:	e7ef      	b.n	118ee <dropped_notify+0x12>
   1190e:	bf00      	nop
   11910:	0002cdc8 	.word	0x0002cdc8
   11914:	0002cdd8 	.word	0x0002cdd8

00011918 <log_source_name_get>:
   11918:	4a04      	ldr	r2, [pc, #16]	; (1192c <log_source_name_get+0x14>)
   1191a:	4b05      	ldr	r3, [pc, #20]	; (11930 <log_source_name_get+0x18>)
   1191c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1191e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   11922:	bf34      	ite	cc
   11924:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   11928:	2000      	movcs	r0, #0
}
   1192a:	4770      	bx	lr
   1192c:	0002ccb8 	.word	0x0002ccb8
   11930:	0002cdc8 	.word	0x0002cdc8

00011934 <log_backend_enable>:
{
   11934:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   11936:	4c10      	ldr	r4, [pc, #64]	; (11978 <log_backend_enable+0x44>)
   11938:	1b04      	subs	r4, r0, r4
   1193a:	1124      	asrs	r4, r4, #4
   1193c:	3401      	adds	r4, #1
{
   1193e:	4605      	mov	r5, r0
   11940:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   11942:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   11944:	b948      	cbnz	r0, 1195a <log_backend_enable+0x26>
   11946:	490d      	ldr	r1, [pc, #52]	; (1197c <log_backend_enable+0x48>)
   11948:	480d      	ldr	r0, [pc, #52]	; (11980 <log_backend_enable+0x4c>)
   1194a:	4a0e      	ldr	r2, [pc, #56]	; (11984 <log_backend_enable+0x50>)
   1194c:	23d1      	movs	r3, #209	; 0xd1
   1194e:	f015 fdd2 	bl	274f6 <printk>
   11952:	480c      	ldr	r0, [pc, #48]	; (11984 <log_backend_enable+0x50>)
   11954:	21d1      	movs	r1, #209	; 0xd1
   11956:	f016 f873 	bl	27a40 <assert_post_action>
	backend->cb->id = id;
   1195a:	686b      	ldr	r3, [r5, #4]
   1195c:	711c      	strb	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1195e:	4c0a      	ldr	r4, [pc, #40]	; (11988 <log_backend_enable+0x54>)
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
   11960:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   11962:	2201      	movs	r2, #1
   11964:	715a      	strb	r2, [r3, #5]
   11966:	7822      	ldrb	r2, [r4, #0]
   11968:	b912      	cbnz	r2, 11970 <log_backend_enable+0x3c>
   1196a:	4808      	ldr	r0, [pc, #32]	; (1198c <log_backend_enable+0x58>)
   1196c:	f00f ffe6 	bl	2193c <z_impl_k_sem_give>
	backend_attached = true;
   11970:	2301      	movs	r3, #1
   11972:	7023      	strb	r3, [r4, #0]
}
   11974:	bd70      	pop	{r4, r5, r6, pc}
   11976:	bf00      	nop
   11978:	0002cdc8 	.word	0x0002cdc8
   1197c:	0002e051 	.word	0x0002e051
   11980:	0002dcd3 	.word	0x0002dcd3
   11984:	0002e020 	.word	0x0002e020
   11988:	20003d59 	.word	0x20003d59
   1198c:	20000874 	.word	0x20000874

00011990 <log_init>:
	return __log_backends_end - __log_backends_start;
   11990:	4b1a      	ldr	r3, [pc, #104]	; (119fc <log_init+0x6c>)
   11992:	4a1b      	ldr	r2, [pc, #108]	; (11a00 <log_init+0x70>)
   11994:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   11996:	2b9f      	cmp	r3, #159	; 0x9f
{
   11998:	b570      	push	{r4, r5, r6, lr}
   1199a:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1199e:	d90b      	bls.n	119b8 <log_init+0x28>
   119a0:	4918      	ldr	r1, [pc, #96]	; (11a04 <log_init+0x74>)
   119a2:	4819      	ldr	r0, [pc, #100]	; (11a08 <log_init+0x78>)
   119a4:	4a19      	ldr	r2, [pc, #100]	; (11a0c <log_init+0x7c>)
   119a6:	f44f 7315 	mov.w	r3, #596	; 0x254
   119aa:	f015 fda4 	bl	274f6 <printk>
   119ae:	4817      	ldr	r0, [pc, #92]	; (11a0c <log_init+0x7c>)
   119b0:	f44f 7115 	mov.w	r1, #596	; 0x254
   119b4:	f016 f844 	bl	27a40 <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   119b8:	f3bf 8f5b 	dmb	ish
   119bc:	4b14      	ldr	r3, [pc, #80]	; (11a10 <log_init+0x80>)
   119be:	e853 5f00 	ldrex	r5, [r3]
   119c2:	1c6a      	adds	r2, r5, #1
   119c4:	e843 2100 	strex	r1, r2, [r3]
   119c8:	2900      	cmp	r1, #0
   119ca:	d1f8      	bne.n	119be <log_init+0x2e>
   119cc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   119d0:	b915      	cbnz	r5, 119d8 <log_init+0x48>
   119d2:	4c0b      	ldr	r4, [pc, #44]	; (11a00 <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
   119d4:	42b5      	cmp	r5, r6
   119d6:	db00      	blt.n	119da <log_init+0x4a>
}
   119d8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   119da:	7b23      	ldrb	r3, [r4, #12]
   119dc:	b153      	cbz	r3, 119f4 <log_init+0x64>
			if (backend->api->init != NULL) {
   119de:	6823      	ldr	r3, [r4, #0]
   119e0:	699b      	ldr	r3, [r3, #24]
   119e2:	b10b      	cbz	r3, 119e8 <log_init+0x58>
				backend->api->init(backend);
   119e4:	4620      	mov	r0, r4
   119e6:	4798      	blx	r3
			log_backend_enable(backend,
   119e8:	6863      	ldr	r3, [r4, #4]
   119ea:	2204      	movs	r2, #4
   119ec:	6819      	ldr	r1, [r3, #0]
   119ee:	4620      	mov	r0, r4
   119f0:	f7ff ffa0 	bl	11934 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   119f4:	3501      	adds	r5, #1
   119f6:	3410      	adds	r4, #16
   119f8:	e7ec      	b.n	119d4 <log_init+0x44>
   119fa:	bf00      	nop
   119fc:	0002cdd8 	.word	0x0002cdd8
   11a00:	0002cdc8 	.word	0x0002cdc8
   11a04:	0002e068 	.word	0x0002e068
   11a08:	0002dcd3 	.word	0x0002dcd3
   11a0c:	0002dfdb 	.word	0x0002dfdb
   11a10:	20002970 	.word	0x20002970

00011a14 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   11a14:	4b16      	ldr	r3, [pc, #88]	; (11a70 <z_log_strdup+0x5c>)
   11a16:	4298      	cmp	r0, r3
{
   11a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11a1a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11a1c:	d302      	bcc.n	11a24 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   11a1e:	4b15      	ldr	r3, [pc, #84]	; (11a74 <z_log_strdup+0x60>)
   11a20:	4298      	cmp	r0, r3
   11a22:	d320      	bcc.n	11a66 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11a24:	4814      	ldr	r0, [pc, #80]	; (11a78 <z_log_strdup+0x64>)
   11a26:	2200      	movs	r2, #0
   11a28:	2300      	movs	r3, #0
   11a2a:	a901      	add	r1, sp, #4
   11a2c:	f00f f9f6 	bl	20e1c <k_mem_slab_alloc>
	if (err != 0) {
   11a30:	4605      	mov	r5, r0
   11a32:	b9d8      	cbnz	r0, 11a6c <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11a34:	2201      	movs	r2, #1
   11a36:	9b01      	ldr	r3, [sp, #4]
   11a38:	f3bf 8f5b 	dmb	ish
   11a3c:	e853 1f00 	ldrex	r1, [r3]
   11a40:	e843 2000 	strex	r0, r2, [r3]
   11a44:	2800      	cmp	r0, #0
   11a46:	d1f9      	bne.n	11a3c <z_log_strdup+0x28>
   11a48:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11a4c:	9801      	ldr	r0, [sp, #4]
   11a4e:	4621      	mov	r1, r4
   11a50:	2241      	movs	r2, #65	; 0x41
   11a52:	3004      	adds	r0, #4
   11a54:	f017 ff9c 	bl	29990 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11a58:	9c01      	ldr	r4, [sp, #4]
   11a5a:	237e      	movs	r3, #126	; 0x7e
   11a5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   11a60:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   11a64:	3404      	adds	r4, #4
}
   11a66:	4620      	mov	r0, r4
   11a68:	b003      	add	sp, #12
   11a6a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   11a6c:	4c03      	ldr	r4, [pc, #12]	; (11a7c <z_log_strdup+0x68>)
   11a6e:	e7fa      	b.n	11a66 <z_log_strdup+0x52>
   11a70:	0002c8fc 	.word	0x0002c8fc
   11a74:	000321a8 	.word	0x000321a8
   11a78:	2000297c 	.word	0x2000297c
   11a7c:	0002e08c 	.word	0x0002e08c

00011a80 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   11a80:	b150      	cbz	r0, 11a98 <log_is_strdup+0x18>
   11a82:	4b06      	ldr	r3, [pc, #24]	; (11a9c <log_is_strdup+0x1c>)
   11a84:	4298      	cmp	r0, r3
   11a86:	d306      	bcc.n	11a96 <log_is_strdup+0x16>
   11a88:	f503 7310 	add.w	r3, r3, #576	; 0x240
   11a8c:	4298      	cmp	r0, r3
   11a8e:	bf2c      	ite	cs
   11a90:	2000      	movcs	r0, #0
   11a92:	2001      	movcc	r0, #1
   11a94:	4770      	bx	lr
   11a96:	2000      	movs	r0, #0
}
   11a98:	4770      	bx	lr
   11a9a:	bf00      	nop
   11a9c:	20008a18 	.word	0x20008a18

00011aa0 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   11aa0:	4b48      	ldr	r3, [pc, #288]	; (11bc4 <z_impl_log_process+0x124>)
   11aa2:	781b      	ldrb	r3, [r3, #0]
{
   11aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aa8:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   11aaa:	b903      	cbnz	r3, 11aae <z_impl_log_process+0xe>
   11aac:	b300      	cbz	r0, 11af0 <z_impl_log_process+0x50>
	msg = get_msg();
   11aae:	f7ff fee1 	bl	11874 <get_msg>
	if (msg.msg) {
   11ab2:	4605      	mov	r5, r0
   11ab4:	b178      	cbz	r0, 11ad6 <z_impl_log_process+0x36>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11ab6:	f3bf 8f5b 	dmb	ish
   11aba:	4b43      	ldr	r3, [pc, #268]	; (11bc8 <z_impl_log_process+0x128>)
   11abc:	e853 2f00 	ldrex	r2, [r3]
   11ac0:	3a01      	subs	r2, #1
   11ac2:	e843 2100 	strex	r1, r2, [r3]
   11ac6:	2900      	cmp	r1, #0
   11ac8:	d1f8      	bne.n	11abc <z_impl_log_process+0x1c>
   11aca:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   11ace:	b19c      	cbz	r4, 11af8 <z_impl_log_process+0x58>
			log_msg_put(msg.msg);
   11ad0:	4628      	mov	r0, r5
   11ad2:	f016 f8ec 	bl	27cae <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   11ad6:	b92c      	cbnz	r4, 11ae4 <z_impl_log_process+0x44>
	return dropped_cnt > 0;
   11ad8:	4b3c      	ldr	r3, [pc, #240]	; (11bcc <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
   11ada:	681b      	ldr	r3, [r3, #0]
   11adc:	2b00      	cmp	r3, #0
   11ade:	dd01      	ble.n	11ae4 <z_impl_log_process+0x44>
		dropped_notify();
   11ae0:	f7ff fefc 	bl	118dc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   11ae4:	483a      	ldr	r0, [pc, #232]	; (11bd0 <z_impl_log_process+0x130>)
   11ae6:	f015 ffc1 	bl	27a6c <log_list_head_peek>
   11aea:	1e04      	subs	r4, r0, #0
   11aec:	bf18      	it	ne
   11aee:	2401      	movne	r4, #1
}
   11af0:	4620      	mov	r0, r4
   11af2:	b003      	add	sp, #12
   11af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   11af8:	4b36      	ldr	r3, [pc, #216]	; (11bd4 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   11afa:	781b      	ldrb	r3, [r3, #0]
   11afc:	b9b3      	cbnz	r3, 11b2c <z_impl_log_process+0x8c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11afe:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   11b00:	07db      	lsls	r3, r3, #31
   11b02:	d413      	bmi.n	11b2c <z_impl_log_process+0x8c>
	msg_str = log_msg_str_get(msg);
   11b04:	f016 f8e6 	bl	27cd4 <log_msg_str_get>
   11b08:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11b0a:	4628      	mov	r0, r5
   11b0c:	f016 f8ad 	bl	27c6a <log_msg_nargs_get>
   11b10:	4601      	mov	r1, r0
   11b12:	4648      	mov	r0, r9
   11b14:	f7ff fe56 	bl	117c4 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   11b18:	4a2f      	ldr	r2, [pc, #188]	; (11bd8 <z_impl_log_process+0x138>)
   11b1a:	4b30      	ldr	r3, [pc, #192]	; (11bdc <z_impl_log_process+0x13c>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11b1c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 11c00 <z_impl_log_process+0x160>
   11b20:	9201      	str	r2, [sp, #4]
   11b22:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11b24:	4607      	mov	r7, r0
   11b26:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	while (mask) {
   11b2a:	b937      	cbnz	r7, 11b3a <z_impl_log_process+0x9a>
   11b2c:	4e2c      	ldr	r6, [pc, #176]	; (11be0 <z_impl_log_process+0x140>)
   11b2e:	4f2d      	ldr	r7, [pc, #180]	; (11be4 <z_impl_log_process+0x144>)
   11b30:	1bbf      	subs	r7, r7, r6
   11b32:	113f      	asrs	r7, r7, #4
   11b34:	f04f 0800 	mov.w	r8, #0
   11b38:	e040      	b.n	11bbc <z_impl_log_process+0x11c>
		idx = 31 - __builtin_clz(mask);
   11b3a:	fab7 f887 	clz	r8, r7
   11b3e:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   11b42:	4641      	mov	r1, r8
   11b44:	4628      	mov	r0, r5
   11b46:	f016 f893 	bl	27c70 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   11b4a:	4b27      	ldr	r3, [pc, #156]	; (11be8 <z_impl_log_process+0x148>)
   11b4c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   11b4e:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11b50:	d302      	bcc.n	11b58 <z_impl_log_process+0xb8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11b52:	4b26      	ldr	r3, [pc, #152]	; (11bec <z_impl_log_process+0x14c>)
   11b54:	4298      	cmp	r0, r3
   11b56:	d31f      	bcc.n	11b98 <z_impl_log_process+0xf8>
   11b58:	4610      	mov	r0, r2
   11b5a:	f7ff ff91 	bl	11a80 <log_is_strdup>
   11b5e:	4606      	mov	r6, r0
   11b60:	b9d0      	cbnz	r0, 11b98 <z_impl_log_process+0xf8>
   11b62:	4b23      	ldr	r3, [pc, #140]	; (11bf0 <z_impl_log_process+0x150>)
   11b64:	429a      	cmp	r2, r3
   11b66:	d017      	beq.n	11b98 <z_impl_log_process+0xf8>
	return msg->hdr.ids.source_id;
   11b68:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11b6a:	4922      	ldr	r1, [pc, #136]	; (11bf4 <z_impl_log_process+0x154>)
   11b6c:	4822      	ldr	r0, [pc, #136]	; (11bf8 <z_impl_log_process+0x158>)
   11b6e:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   11b72:	455b      	cmp	r3, fp
	return __log_const_start[source_id].name;
   11b74:	bf3c      	itt	cc
   11b76:	9a01      	ldrcc	r2, [sp, #4]
   11b78:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11b7c:	23d1      	movs	r3, #209	; 0xd1
   11b7e:	4652      	mov	r2, sl
   11b80:	f015 fcb9 	bl	274f6 <printk>
   11b84:	481d      	ldr	r0, [pc, #116]	; (11bfc <z_impl_log_process+0x15c>)
   11b86:	4641      	mov	r1, r8
   11b88:	464b      	mov	r3, r9
   11b8a:	4632      	mov	r2, r6
   11b8c:	f015 fcb3 	bl	274f6 <printk>
   11b90:	21d1      	movs	r1, #209	; 0xd1
   11b92:	4650      	mov	r0, sl
   11b94:	f015 ff54 	bl	27a40 <assert_post_action>
		mask &= ~BIT(idx);
   11b98:	2301      	movs	r3, #1
   11b9a:	fa03 f808 	lsl.w	r8, r3, r8
   11b9e:	ea27 0708 	bic.w	r7, r7, r8
   11ba2:	e7c2      	b.n	11b2a <z_impl_log_process+0x8a>
			if (log_backend_is_active(backend) &&
   11ba4:	4630      	mov	r0, r6
   11ba6:	f015 ff69 	bl	27a7c <log_backend_is_active>
   11baa:	b120      	cbz	r0, 11bb6 <z_impl_log_process+0x116>
	backend->api->put(backend, msg);
   11bac:	6833      	ldr	r3, [r6, #0]
   11bae:	4629      	mov	r1, r5
   11bb0:	685b      	ldr	r3, [r3, #4]
   11bb2:	4630      	mov	r0, r6
   11bb4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   11bb6:	f108 0801 	add.w	r8, r8, #1
   11bba:	3610      	adds	r6, #16
   11bbc:	45b8      	cmp	r8, r7
   11bbe:	dbf1      	blt.n	11ba4 <z_impl_log_process+0x104>
   11bc0:	e786      	b.n	11ad0 <z_impl_log_process+0x30>
   11bc2:	bf00      	nop
   11bc4:	20003d59 	.word	0x20003d59
   11bc8:	20002968 	.word	0x20002968
   11bcc:	2000296c 	.word	0x2000296c
   11bd0:	20002974 	.word	0x20002974
   11bd4:	20003d5a 	.word	0x20003d5a
   11bd8:	0002ccb8 	.word	0x0002ccb8
   11bdc:	0002cdc8 	.word	0x0002cdc8
   11be0:	0002cdc8 	.word	0x0002cdc8
   11be4:	0002cdd8 	.word	0x0002cdd8
   11be8:	0002c8fc 	.word	0x0002c8fc
   11bec:	000321a8 	.word	0x000321a8
   11bf0:	0002e08c 	.word	0x0002e08c
   11bf4:	00032142 	.word	0x00032142
   11bf8:	0002dcd3 	.word	0x0002dcd3
   11bfc:	0002e0a6 	.word	0x0002e0a6
   11c00:	0002dfdb 	.word	0x0002dfdb

00011c04 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   11c04:	4b29      	ldr	r3, [pc, #164]	; (11cac <msg_finalize+0xa8>)
{
   11c06:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   11c08:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   11c0a:	8141      	strh	r1, [r0, #10]
{
   11c0c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   11c0e:	4798      	blx	r3
   11c10:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11c12:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c16:	f3ef 8511 	mrs	r5, BASEPRI
   11c1a:	f383 8811 	msr	BASEPRI, r3
   11c1e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11c22:	4823      	ldr	r0, [pc, #140]	; (11cb0 <msg_finalize+0xac>)
   11c24:	4621      	mov	r1, r4
   11c26:	f015 ff17 	bl	27a58 <log_list_add_tail>
	__asm__ volatile(
   11c2a:	f385 8811 	msr	BASEPRI, r5
   11c2e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11c32:	f3bf 8f5b 	dmb	ish
   11c36:	4b1f      	ldr	r3, [pc, #124]	; (11cb4 <msg_finalize+0xb0>)
   11c38:	e853 2f00 	ldrex	r2, [r3]
   11c3c:	3201      	adds	r2, #1
   11c3e:	e843 2100 	strex	r1, r2, [r3]
   11c42:	2900      	cmp	r1, #0
   11c44:	d1f8      	bne.n	11c38 <msg_finalize+0x34>
   11c46:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   11c4a:	4a1b      	ldr	r2, [pc, #108]	; (11cb8 <msg_finalize+0xb4>)
   11c4c:	7812      	ldrb	r2, [r2, #0]
   11c4e:	b182      	cbz	r2, 11c72 <msg_finalize+0x6e>
	__asm__ volatile(
   11c50:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c54:	f3ef 8411 	mrs	r4, BASEPRI
   11c58:	f383 8811 	msr	BASEPRI, r3
   11c5c:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11c60:	2000      	movs	r0, #0
   11c62:	f7ff ff1d 	bl	11aa0 <z_impl_log_process>
	__asm__ volatile(
   11c66:	f384 8811 	msr	BASEPRI, r4
   11c6a:	f3bf 8f6f 	isb	sy
}
   11c6e:	b003      	add	sp, #12
   11c70:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   11c72:	4a12      	ldr	r2, [pc, #72]	; (11cbc <msg_finalize+0xb8>)
   11c74:	681b      	ldr	r3, [r3, #0]
   11c76:	6812      	ldr	r2, [r2, #0]
   11c78:	2a00      	cmp	r2, #0
   11c7a:	d0f8      	beq.n	11c6e <msg_finalize+0x6a>
   11c7c:	2b01      	cmp	r3, #1
   11c7e:	d10a      	bne.n	11c96 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   11c80:	2200      	movs	r2, #0
   11c82:	2300      	movs	r3, #0
   11c84:	e9cd 2300 	strd	r2, r3, [sp]
   11c88:	480d      	ldr	r0, [pc, #52]	; (11cc0 <msg_finalize+0xbc>)
   11c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11c8e:	2300      	movs	r3, #0
   11c90:	f012 fa2e 	bl	240f0 <z_impl_k_timer_start>
   11c94:	e7eb      	b.n	11c6e <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11c96:	2b0a      	cmp	r3, #10
   11c98:	d1e9      	bne.n	11c6e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   11c9a:	4809      	ldr	r0, [pc, #36]	; (11cc0 <msg_finalize+0xbc>)
   11c9c:	f01a fdbb 	bl	2c816 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11ca0:	4808      	ldr	r0, [pc, #32]	; (11cc4 <msg_finalize+0xc0>)
}
   11ca2:	b003      	add	sp, #12
   11ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   11ca8:	f00f be48 	b.w	2193c <z_impl_k_sem_give>
   11cac:	20000450 	.word	0x20000450
   11cb0:	20002974 	.word	0x20002974
   11cb4:	20002968 	.word	0x20002968
   11cb8:	20003d5a 	.word	0x20003d5a
   11cbc:	2000299c 	.word	0x2000299c
   11cc0:	20001618 	.word	0x20001618
   11cc4:	20000874 	.word	0x20000874

00011cc8 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   11cc8:	4b16      	ldr	r3, [pc, #88]	; (11d24 <log_process_thread_func+0x5c>)
   11cca:	4a17      	ldr	r2, [pc, #92]	; (11d28 <log_process_thread_func+0x60>)
   11ccc:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   11cce:	2b00      	cmp	r3, #0
{
   11cd0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   11cd2:	dc0b      	bgt.n	11cec <log_process_thread_func+0x24>
   11cd4:	4915      	ldr	r1, [pc, #84]	; (11d2c <log_process_thread_func+0x64>)
   11cd6:	4816      	ldr	r0, [pc, #88]	; (11d30 <log_process_thread_func+0x68>)
   11cd8:	4a16      	ldr	r2, [pc, #88]	; (11d34 <log_process_thread_func+0x6c>)
   11cda:	f240 5374 	movw	r3, #1396	; 0x574
   11cde:	f015 fc0a 	bl	274f6 <printk>
   11ce2:	4814      	ldr	r0, [pc, #80]	; (11d34 <log_process_thread_func+0x6c>)
   11ce4:	f240 5174 	movw	r1, #1396	; 0x574
   11ce8:	f015 feaa 	bl	27a40 <assert_post_action>
	log_init();
   11cec:	f7ff fe50 	bl	11990 <log_init>
	return z_impl_k_current_get();
   11cf0:	f011 fd62 	bl	237b8 <z_impl_k_current_get>
	proc_tid = process_tid;
   11cf4:	4b10      	ldr	r3, [pc, #64]	; (11d38 <log_process_thread_func+0x70>)
   11cf6:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   11cf8:	b130      	cbz	r0, 11d08 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11cfa:	4b10      	ldr	r3, [pc, #64]	; (11d3c <log_process_thread_func+0x74>)
	    process_tid &&
   11cfc:	681b      	ldr	r3, [r3, #0]
   11cfe:	2b09      	cmp	r3, #9
   11d00:	dd02      	ble.n	11d08 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   11d02:	480f      	ldr	r0, [pc, #60]	; (11d40 <log_process_thread_func+0x78>)
   11d04:	f00f fe1a 	bl	2193c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   11d08:	4c0d      	ldr	r4, [pc, #52]	; (11d40 <log_process_thread_func+0x78>)
   11d0a:	2000      	movs	r0, #0
   11d0c:	f7ff fec8 	bl	11aa0 <z_impl_log_process>
		if (log_process(false) == false) {
   11d10:	2800      	cmp	r0, #0
   11d12:	d1fa      	bne.n	11d0a <log_process_thread_func+0x42>
   11d14:	f04f 32ff 	mov.w	r2, #4294967295
   11d18:	f04f 33ff 	mov.w	r3, #4294967295
   11d1c:	4620      	mov	r0, r4
   11d1e:	f00f fe51 	bl	219c4 <z_impl_k_sem_take>
   11d22:	e7f2      	b.n	11d0a <log_process_thread_func+0x42>
   11d24:	0002cdd8 	.word	0x0002cdd8
   11d28:	0002cdc8 	.word	0x0002cdc8
   11d2c:	0002e0e7 	.word	0x0002e0e7
   11d30:	0002dcd3 	.word	0x0002dcd3
   11d34:	0002dfdb 	.word	0x0002dfdb
   11d38:	2000299c 	.word	0x2000299c
   11d3c:	20002968 	.word	0x20002968
   11d40:	20000874 	.word	0x20000874

00011d44 <z_impl_log_panic>:
{
   11d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   11d46:	4f0f      	ldr	r7, [pc, #60]	; (11d84 <z_impl_log_panic+0x40>)
   11d48:	783d      	ldrb	r5, [r7, #0]
   11d4a:	b975      	cbnz	r5, 11d6a <z_impl_log_panic+0x26>
   11d4c:	4c0e      	ldr	r4, [pc, #56]	; (11d88 <z_impl_log_panic+0x44>)
   11d4e:	4e0f      	ldr	r6, [pc, #60]	; (11d8c <z_impl_log_panic+0x48>)
	log_init();
   11d50:	f7ff fe1e 	bl	11990 <log_init>
   11d54:	1b36      	subs	r6, r6, r4
   11d56:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11d58:	42b5      	cmp	r5, r6
   11d5a:	db07      	blt.n	11d6c <z_impl_log_panic+0x28>
   11d5c:	2000      	movs	r0, #0
   11d5e:	f7ff fe9f 	bl	11aa0 <z_impl_log_process>
		while (log_process(false) == true) {
   11d62:	2800      	cmp	r0, #0
   11d64:	d1fa      	bne.n	11d5c <z_impl_log_panic+0x18>
	panic_mode = true;
   11d66:	2301      	movs	r3, #1
   11d68:	703b      	strb	r3, [r7, #0]
}
   11d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   11d6c:	4620      	mov	r0, r4
   11d6e:	f015 fe85 	bl	27a7c <log_backend_is_active>
   11d72:	b118      	cbz	r0, 11d7c <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   11d74:	6823      	ldr	r3, [r4, #0]
   11d76:	4620      	mov	r0, r4
   11d78:	695b      	ldr	r3, [r3, #20]
   11d7a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11d7c:	3501      	adds	r5, #1
   11d7e:	3410      	adds	r4, #16
   11d80:	e7ea      	b.n	11d58 <z_impl_log_panic+0x14>
   11d82:	bf00      	nop
   11d84:	20003d5a 	.word	0x20003d5a
   11d88:	0002cdc8 	.word	0x0002cdc8
   11d8c:	0002cdd8 	.word	0x0002cdd8

00011d90 <log_free>:
{
   11d90:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   11d92:	3804      	subs	r0, #4
   11d94:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11d96:	f3bf 8f5b 	dmb	ish
   11d9a:	e850 3f00 	ldrex	r3, [r0]
   11d9e:	1e5a      	subs	r2, r3, #1
   11da0:	e840 2100 	strex	r1, r2, [r0]
   11da4:	2900      	cmp	r1, #0
   11da6:	d1f8      	bne.n	11d9a <log_free+0xa>
   11da8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   11dac:	2b01      	cmp	r3, #1
   11dae:	d103      	bne.n	11db8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   11db0:	4803      	ldr	r0, [pc, #12]	; (11dc0 <log_free+0x30>)
   11db2:	a901      	add	r1, sp, #4
   11db4:	f00f f89e 	bl	20ef4 <k_mem_slab_free>
}
   11db8:	b003      	add	sp, #12
   11dba:	f85d fb04 	ldr.w	pc, [sp], #4
   11dbe:	bf00      	nop
   11dc0:	2000297c 	.word	0x2000297c

00011dc4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   11dc4:	2320      	movs	r3, #32
   11dc6:	4902      	ldr	r1, [pc, #8]	; (11dd0 <log_msg_pool_init+0xc>)
   11dc8:	4802      	ldr	r0, [pc, #8]	; (11dd4 <log_msg_pool_init+0x10>)
   11dca:	461a      	mov	r2, r3
   11dcc:	f01a bbf0 	b.w	2c5b0 <k_mem_slab_init>
   11dd0:	20008c58 	.word	0x20008c58
   11dd4:	200029a0 	.word	0x200029a0

00011dd8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   11dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   11dda:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   11ddc:	4d09      	ldr	r5, [pc, #36]	; (11e04 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   11dde:	9301      	str	r3, [sp, #4]
   11de0:	2001      	movs	r0, #1
   11de2:	f7ff fe5d 	bl	11aa0 <z_impl_log_process>
   11de6:	4604      	mov	r4, r0
			z_log_dropped();
   11de8:	f7ff fd58 	bl	1189c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11dec:	2200      	movs	r2, #0
   11dee:	2300      	movs	r3, #0
   11df0:	a901      	add	r1, sp, #4
   11df2:	4628      	mov	r0, r5
   11df4:	f00f f812 	bl	20e1c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   11df8:	b108      	cbz	r0, 11dfe <log_msg_no_space_handle+0x26>
   11dfa:	2c00      	cmp	r4, #0
   11dfc:	d1f0      	bne.n	11de0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   11dfe:	9801      	ldr	r0, [sp, #4]
   11e00:	b003      	add	sp, #12
   11e02:	bd30      	pop	{r4, r5, pc}
   11e04:	200029a0 	.word	0x200029a0

00011e08 <log_msg_chunk_alloc>:
{
   11e08:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   11e0a:	2300      	movs	r3, #0
   11e0c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11e0e:	4807      	ldr	r0, [pc, #28]	; (11e2c <log_msg_chunk_alloc+0x24>)
   11e10:	2200      	movs	r2, #0
   11e12:	2300      	movs	r3, #0
   11e14:	a901      	add	r1, sp, #4
   11e16:	f00f f801 	bl	20e1c <k_mem_slab_alloc>
	if (err != 0) {
   11e1a:	b110      	cbz	r0, 11e22 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   11e1c:	f7ff ffdc 	bl	11dd8 <log_msg_no_space_handle>
   11e20:	9001      	str	r0, [sp, #4]
}
   11e22:	9801      	ldr	r0, [sp, #4]
   11e24:	b003      	add	sp, #12
   11e26:	f85d fb04 	ldr.w	pc, [sp], #4
   11e2a:	bf00      	nop
   11e2c:	200029a0 	.word	0x200029a0

00011e30 <msg_free>:
{
   11e30:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11e32:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   11e34:	7a45      	ldrb	r5, [r0, #9]
{
   11e36:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   11e38:	092d      	lsrs	r5, r5, #4
{
   11e3a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   11e3c:	07d8      	lsls	r0, r3, #31
   11e3e:	d41c      	bmi.n	11e7a <msg_free+0x4a>
   11e40:	b1dd      	cbz	r5, 11e7a <msg_free+0x4a>
		uint32_t smask = 0U;
   11e42:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   11e44:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   11e46:	9801      	ldr	r0, [sp, #4]
   11e48:	4631      	mov	r1, r6
   11e4a:	f015 ff11 	bl	27c70 <log_msg_arg_get>
   11e4e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   11e50:	f7ff fe16 	bl	11a80 <log_is_strdup>
   11e54:	b170      	cbz	r0, 11e74 <msg_free+0x44>
				if (smask == 0U) {
   11e56:	b934      	cbnz	r4, 11e66 <msg_free+0x36>
					smask = z_log_get_s_mask(
   11e58:	9b01      	ldr	r3, [sp, #4]
   11e5a:	4629      	mov	r1, r5
   11e5c:	6918      	ldr	r0, [r3, #16]
   11e5e:	f7ff fcb1 	bl	117c4 <z_log_get_s_mask>
					if (smask == 0U) {
   11e62:	4604      	mov	r4, r0
   11e64:	b148      	cbz	r0, 11e7a <msg_free+0x4a>
				if (smask & BIT(i)) {
   11e66:	fa24 f306 	lsr.w	r3, r4, r6
   11e6a:	07d9      	lsls	r1, r3, #31
   11e6c:	d502      	bpl.n	11e74 <msg_free+0x44>
					log_free(buf);
   11e6e:	4638      	mov	r0, r7
   11e70:	f7ff ff8e 	bl	11d90 <log_free>
		for (i = 0U; i < nargs; i++) {
   11e74:	3601      	adds	r6, #1
   11e76:	42ae      	cmp	r6, r5
   11e78:	d3e5      	bcc.n	11e46 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   11e7a:	9b01      	ldr	r3, [sp, #4]
   11e7c:	7a1a      	ldrb	r2, [r3, #8]
   11e7e:	0792      	lsls	r2, r2, #30
   11e80:	d504      	bpl.n	11e8c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   11e82:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11e84:	4c08      	ldr	r4, [pc, #32]	; (11ea8 <msg_free+0x78>)
   11e86:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   11e88:	9b03      	ldr	r3, [sp, #12]
   11e8a:	b92b      	cbnz	r3, 11e98 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   11e8c:	4806      	ldr	r0, [pc, #24]	; (11ea8 <msg_free+0x78>)
   11e8e:	a901      	add	r1, sp, #4
   11e90:	f00f f830 	bl	20ef4 <k_mem_slab_free>
}
   11e94:	b005      	add	sp, #20
   11e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   11e98:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11e9a:	a903      	add	r1, sp, #12
   11e9c:	4620      	mov	r0, r4
   11e9e:	f00f f829 	bl	20ef4 <k_mem_slab_free>
		cont = next;
   11ea2:	9503      	str	r5, [sp, #12]
   11ea4:	e7f0      	b.n	11e88 <msg_free+0x58>
   11ea6:	bf00      	nop
   11ea8:	200029a0 	.word	0x200029a0

00011eac <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   11eac:	2a0e      	cmp	r2, #14
{
   11eae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb2:	4681      	mov	r9, r0
   11eb4:	4688      	mov	r8, r1
   11eb6:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   11eb8:	d90b      	bls.n	11ed2 <log_msg_create_n+0x26>
   11eba:	492d      	ldr	r1, [pc, #180]	; (11f70 <log_msg_create_n+0xc4>)
   11ebc:	482d      	ldr	r0, [pc, #180]	; (11f74 <log_msg_create_n+0xc8>)
   11ebe:	4a2e      	ldr	r2, [pc, #184]	; (11f78 <log_msg_create_n+0xcc>)
   11ec0:	f240 133b 	movw	r3, #315	; 0x13b
   11ec4:	f015 fb17 	bl	274f6 <printk>
   11ec8:	482b      	ldr	r0, [pc, #172]	; (11f78 <log_msg_create_n+0xcc>)
   11eca:	f240 113b 	movw	r1, #315	; 0x13b
   11ece:	f015 fdb7 	bl	27a40 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11ed2:	f7ff ff99 	bl	11e08 <log_msg_chunk_alloc>

	if (msg != NULL) {
   11ed6:	4604      	mov	r4, r0
   11ed8:	b330      	cbz	r0, 11f28 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   11eda:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   11edc:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11ede:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   11ee0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11ee2:	8107      	strh	r7, [r0, #8]
   11ee4:	d909      	bls.n	11efa <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   11ee6:	2202      	movs	r2, #2
   11ee8:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   11eea:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   11eee:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   11ef2:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   11ef4:	f1ba 0f00 	cmp.w	sl, #0
   11ef8:	dc0e      	bgt.n	11f18 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   11efa:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   11efc:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   11f00:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   11f04:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   11f06:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   11f08:	d818      	bhi.n	11f3c <log_msg_create_n+0x90>
		(void)memcpy(msg->payload.single.args, args,
   11f0a:	00aa      	lsls	r2, r5, #2
   11f0c:	4641      	mov	r1, r8
   11f0e:	f104 0014 	add.w	r0, r4, #20
   11f12:	f017 fda2 	bl	29a5a <memcpy>
	while (nargs != 0U) {
   11f16:	e007      	b.n	11f28 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   11f18:	f7ff ff76 	bl	11e08 <log_msg_chunk_alloc>
		if (cont == NULL) {
   11f1c:	4606      	mov	r6, r0
   11f1e:	b930      	cbnz	r0, 11f2e <log_msg_create_n+0x82>
			msg_free(msg);
   11f20:	4620      	mov	r0, r4
   11f22:	f7ff ff85 	bl	11e30 <msg_free>
			return NULL;
   11f26:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   11f28:	4620      	mov	r0, r4
   11f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   11f2e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   11f32:	f1aa 0a07 	sub.w	sl, sl, #7
   11f36:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   11f38:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   11f3a:	e7db      	b.n	11ef4 <log_msg_create_n+0x48>
		(void)memcpy(msg->payload.ext.data.args, args,
   11f3c:	4641      	mov	r1, r8
   11f3e:	2208      	movs	r2, #8
   11f40:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   11f44:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   11f46:	f017 fd88 	bl	29a5a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   11f4a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   11f4c:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   11f50:	2d07      	cmp	r5, #7
   11f52:	462e      	mov	r6, r5
   11f54:	bf28      	it	cs
   11f56:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   11f58:	ea4f 0986 	mov.w	r9, r6, lsl #2
   11f5c:	4641      	mov	r1, r8
   11f5e:	1d38      	adds	r0, r7, #4
   11f60:	464a      	mov	r2, r9
   11f62:	f017 fd7a 	bl	29a5a <memcpy>
	while (nargs != 0U) {
   11f66:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   11f68:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   11f6a:	44c8      	add	r8, r9
	while (nargs != 0U) {
   11f6c:	d1f0      	bne.n	11f50 <log_msg_create_n+0xa4>
   11f6e:	e7db      	b.n	11f28 <log_msg_create_n+0x7c>
   11f70:	0002e133 	.word	0x0002e133
   11f74:	0002dcd3 	.word	0x0002dcd3
   11f78:	0002e107 	.word	0x0002e107

00011f7c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   11f7c:	b40e      	push	{r1, r2, r3}
   11f7e:	b503      	push	{r0, r1, lr}
   11f80:	ab03      	add	r3, sp, #12
   11f82:	4601      	mov	r1, r0
   11f84:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   11f88:	4804      	ldr	r0, [pc, #16]	; (11f9c <print_formatted+0x20>)
	va_start(args, fmt);
   11f8a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   11f8c:	f7ff f80e 	bl	10fac <cbvprintf>
	va_end(args);

	return length;
}
   11f90:	b002      	add	sp, #8
   11f92:	f85d eb04 	ldr.w	lr, [sp], #4
   11f96:	b003      	add	sp, #12
   11f98:	4770      	bx	lr
   11f9a:	bf00      	nop
   11f9c:	000121d9 	.word	0x000121d9

00011fa0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   11fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa4:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   11fa6:	f011 0602 	ands.w	r6, r1, #2
{
   11faa:	9205      	str	r2, [sp, #20]
   11fac:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   11fb0:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
   11fb4:	4607      	mov	r7, r0
   11fb6:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   11fb8:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   11fbc:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   11fc0:	d006      	beq.n	11fd0 <prefix_print+0x30>
	if (!format) {
   11fc2:	f011 0f44 	tst.w	r1, #68	; 0x44
   11fc6:	d138      	bne.n	1203a <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   11fc8:	4932      	ldr	r1, [pc, #200]	; (12094 <prefix_print+0xf4>)
   11fca:	f7ff ffd7 	bl	11f7c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   11fce:	4606      	mov	r6, r0
	if (color) {
   11fd0:	f1ba 0f00 	cmp.w	sl, #0
   11fd4:	d00a      	beq.n	11fec <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   11fd6:	4b30      	ldr	r3, [pc, #192]	; (12098 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   11fd8:	4930      	ldr	r1, [pc, #192]	; (1209c <prefix_print+0xfc>)
		const char *log_color = start && (colors[level] != NULL) ?
   11fda:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   11fde:	4b30      	ldr	r3, [pc, #192]	; (120a0 <prefix_print+0x100>)
   11fe0:	4638      	mov	r0, r7
   11fe2:	2a00      	cmp	r2, #0
   11fe4:	bf08      	it	eq
   11fe6:	461a      	moveq	r2, r3
   11fe8:	f7ff ffc8 	bl	11f7c <print_formatted>
	if (level_on) {
   11fec:	b13d      	cbz	r5, 11ffe <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   11fee:	4b2d      	ldr	r3, [pc, #180]	; (120a4 <prefix_print+0x104>)
   11ff0:	492d      	ldr	r1, [pc, #180]	; (120a8 <prefix_print+0x108>)
   11ff2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   11ff6:	4638      	mov	r0, r7
   11ff8:	f7ff ffc0 	bl	11f7c <print_formatted>
   11ffc:	4605      	mov	r5, r0
	if (source_id >= 0) {
   11ffe:	f1b9 0f00 	cmp.w	r9, #0
   12002:	db16      	blt.n	12032 <prefix_print+0x92>
		total += print_formatted(output,
   12004:	9b05      	ldr	r3, [sp, #20]
   12006:	2b00      	cmp	r3, #0
   12008:	d041      	beq.n	1208e <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1200a:	2301      	movs	r3, #1
   1200c:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   12010:	4b26      	ldr	r3, [pc, #152]	; (120ac <prefix_print+0x10c>)
   12012:	4c27      	ldr	r4, [pc, #156]	; (120b0 <prefix_print+0x110>)
   12014:	f018 0f10 	tst.w	r8, #16
   12018:	bf18      	it	ne
   1201a:	461c      	movne	r4, r3
   1201c:	4649      	mov	r1, r9
   1201e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   12022:	f7ff fc79 	bl	11918 <log_source_name_get>
   12026:	4621      	mov	r1, r4
   12028:	4602      	mov	r2, r0
   1202a:	4638      	mov	r0, r7
   1202c:	f7ff ffa6 	bl	11f7c <print_formatted>
   12030:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   12032:	19a8      	adds	r0, r5, r6
   12034:	b007      	add	sp, #28
   12036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1203a:	4b1e      	ldr	r3, [pc, #120]	; (120b4 <prefix_print+0x114>)
   1203c:	6819      	ldr	r1, [r3, #0]
   1203e:	b321      	cbz	r1, 1208a <prefix_print+0xea>
		timestamp /= timestamp_div;
   12040:	4b1d      	ldr	r3, [pc, #116]	; (120b8 <prefix_print+0x118>)
   12042:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   12046:	681b      	ldr	r3, [r3, #0]
   12048:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
   1204c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		total_seconds = timestamp / freq;
   12050:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   12054:	fbb4 f2fc 	udiv	r2, r4, ip
   12058:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   1205c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   12060:	4374      	muls	r4, r6
		mins = seconds / 60U;
   12062:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12066:	fbb4 fbf1 	udiv	fp, r4, r1
   1206a:	fb01 441b 	mls	r4, r1, fp, r4
   1206e:	4374      	muls	r4, r6
		mins = seconds / 60U;
   12070:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12074:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   12078:	e9cd b101 	strd	fp, r1, [sp, #4]
   1207c:	fb0e c113 	mls	r1, lr, r3, ip
   12080:	9100      	str	r1, [sp, #0]
   12082:	490e      	ldr	r1, [pc, #56]	; (120bc <prefix_print+0x11c>)
   12084:	f7ff ff7a 	bl	11f7c <print_formatted>
   12088:	e7a1      	b.n	11fce <prefix_print+0x2e>
		length = 0;
   1208a:	4608      	mov	r0, r1
   1208c:	e79f      	b.n	11fce <prefix_print+0x2e>
		total += print_formatted(output,
   1208e:	4c08      	ldr	r4, [pc, #32]	; (120b0 <prefix_print+0x110>)
   12090:	e7c4      	b.n	1201c <prefix_print+0x7c>
   12092:	bf00      	nop
   12094:	0002e14c 	.word	0x0002e14c
   12098:	0002cf40 	.word	0x0002cf40
   1209c:	0002f709 	.word	0x0002f709
   120a0:	0002e13e 	.word	0x0002e13e
   120a4:	0002cf54 	.word	0x0002cf54
   120a8:	0002e171 	.word	0x0002e171
   120ac:	0002e148 	.word	0x0002e148
   120b0:	0002e143 	.word	0x0002e143
   120b4:	200029c0 	.word	0x200029c0
   120b8:	200029c4 	.word	0x200029c4
   120bc:	0002e155 	.word	0x0002e155

000120c0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   120c0:	b538      	push	{r3, r4, r5, lr}
   120c2:	460c      	mov	r4, r1
	if (color) {
   120c4:	07e1      	lsls	r1, r4, #31
{
   120c6:	4605      	mov	r5, r0
	if (color) {
   120c8:	d503      	bpl.n	120d2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   120ca:	4a08      	ldr	r2, [pc, #32]	; (120ec <postfix_print+0x2c>)
   120cc:	4908      	ldr	r1, [pc, #32]	; (120f0 <postfix_print+0x30>)
   120ce:	f7ff ff55 	bl	11f7c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   120d2:	06e2      	lsls	r2, r4, #27
   120d4:	d408      	bmi.n	120e8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   120d6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   120d8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   120da:	bf4c      	ite	mi
   120dc:	4905      	ldrmi	r1, [pc, #20]	; (120f4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   120de:	4906      	ldrpl	r1, [pc, #24]	; (120f8 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   120e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   120e4:	f7ff bf4a 	b.w	11f7c <print_formatted>
}
   120e8:	bd38      	pop	{r3, r4, r5, pc}
   120ea:	bf00      	nop
   120ec:	0002e13e 	.word	0x0002e13e
   120f0:	0002f709 	.word	0x0002f709
   120f4:	00030be7 	.word	0x00030be7
   120f8:	0002dbc0 	.word	0x0002dbc0

000120fc <hexdump_line_print>:
{
   120fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12100:	461d      	mov	r5, r3
   12102:	9b08      	ldr	r3, [sp, #32]
   12104:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12106:	06da      	lsls	r2, r3, #27
{
   12108:	4604      	mov	r4, r0
   1210a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1210c:	d405      	bmi.n	1211a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1210e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12110:	bf4c      	ite	mi
   12112:	492a      	ldrmi	r1, [pc, #168]	; (121bc <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   12114:	492a      	ldrpl	r1, [pc, #168]	; (121c0 <hexdump_line_print+0xc4>)
   12116:	f7ff ff31 	bl	11f7c <print_formatted>
		print_formatted(output, " ");
   1211a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 121c8 <hexdump_line_print+0xcc>
{
   1211e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   12122:	45a8      	cmp	r8, r5
   12124:	db2a      	blt.n	1217c <hexdump_line_print+0x80>
			print_formatted(output, "   ");
   12126:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 121cc <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   1212a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 121d0 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   1212e:	f8df a098 	ldr.w	sl, [pc, #152]	; 121c8 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12132:	2500      	movs	r5, #0
		if (i < length) {
   12134:	42bd      	cmp	r5, r7
   12136:	d22f      	bcs.n	12198 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   12138:	5d72      	ldrb	r2, [r6, r5]
   1213a:	4649      	mov	r1, r9
   1213c:	4620      	mov	r0, r4
   1213e:	f7ff ff1d 	bl	11f7c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12142:	3501      	adds	r5, #1
   12144:	2d10      	cmp	r5, #16
   12146:	d120      	bne.n	1218a <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   12148:	491e      	ldr	r1, [pc, #120]	; (121c4 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
   1214a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 121c8 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   1214e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 121d4 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   12152:	4620      	mov	r0, r4
   12154:	f7ff ff12 	bl	11f7c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12158:	2500      	movs	r5, #0
		if (i < length) {
   1215a:	42af      	cmp	r7, r5
   1215c:	d928      	bls.n	121b0 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   1215e:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   12160:	f1a2 0320 	sub.w	r3, r2, #32
   12164:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   12166:	bf28      	it	cs
   12168:	222e      	movcs	r2, #46	; 0x2e
   1216a:	4649      	mov	r1, r9
   1216c:	4620      	mov	r0, r4
   1216e:	f7ff ff05 	bl	11f7c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12172:	3501      	adds	r5, #1
   12174:	2d10      	cmp	r5, #16
   12176:	d114      	bne.n	121a2 <hexdump_line_print+0xa6>
}
   12178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   1217c:	4649      	mov	r1, r9
   1217e:	4620      	mov	r0, r4
   12180:	f7ff fefc 	bl	11f7c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12184:	f108 0801 	add.w	r8, r8, #1
   12188:	e7cb      	b.n	12122 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   1218a:	076a      	lsls	r2, r5, #29
   1218c:	d1d2      	bne.n	12134 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   1218e:	4651      	mov	r1, sl
   12190:	4620      	mov	r0, r4
   12192:	f7ff fef3 	bl	11f7c <print_formatted>
   12196:	e7cd      	b.n	12134 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   12198:	4641      	mov	r1, r8
   1219a:	4620      	mov	r0, r4
   1219c:	f7ff feee 	bl	11f7c <print_formatted>
   121a0:	e7cf      	b.n	12142 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   121a2:	076b      	lsls	r3, r5, #29
   121a4:	d1d9      	bne.n	1215a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   121a6:	4641      	mov	r1, r8
   121a8:	4620      	mov	r0, r4
   121aa:	f7ff fee7 	bl	11f7c <print_formatted>
   121ae:	e7d4      	b.n	1215a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   121b0:	4641      	mov	r1, r8
   121b2:	4620      	mov	r0, r4
   121b4:	f7ff fee2 	bl	11f7c <print_formatted>
   121b8:	e7db      	b.n	12172 <hexdump_line_print+0x76>
   121ba:	bf00      	nop
   121bc:	00030be7 	.word	0x00030be7
   121c0:	0002dbc0 	.word	0x0002dbc0
   121c4:	0002e181 	.word	0x0002e181
   121c8:	0002e17f 	.word	0x0002e17f
   121cc:	0002e17d 	.word	0x0002e17d
   121d0:	0002e177 	.word	0x0002e177
   121d4:	0002e183 	.word	0x0002e183

000121d8 <out_func>:
{
   121d8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   121da:	684b      	ldr	r3, [r1, #4]
   121dc:	681a      	ldr	r2, [r3, #0]
   121de:	68cb      	ldr	r3, [r1, #12]
   121e0:	429a      	cmp	r2, r3
{
   121e2:	4605      	mov	r5, r0
   121e4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   121e6:	d102      	bne.n	121ee <out_func+0x16>
		log_output_flush(out_ctx);
   121e8:	4608      	mov	r0, r1
   121ea:	f015 ff39 	bl	28060 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   121ee:	6863      	ldr	r3, [r4, #4]
   121f0:	f3bf 8f5b 	dmb	ish
   121f4:	e853 2f00 	ldrex	r2, [r3]
   121f8:	1c51      	adds	r1, r2, #1
   121fa:	e843 1000 	strex	r0, r1, [r3]
   121fe:	2800      	cmp	r0, #0
   12200:	d1f8      	bne.n	121f4 <out_func+0x1c>
   12202:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   12206:	68a3      	ldr	r3, [r4, #8]
   12208:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1220a:	6863      	ldr	r3, [r4, #4]
   1220c:	681a      	ldr	r2, [r3, #0]
   1220e:	68e3      	ldr	r3, [r4, #12]
   12210:	429a      	cmp	r2, r3
   12212:	d909      	bls.n	12228 <out_func+0x50>
   12214:	4905      	ldr	r1, [pc, #20]	; (1222c <out_func+0x54>)
   12216:	4806      	ldr	r0, [pc, #24]	; (12230 <out_func+0x58>)
   12218:	4a06      	ldr	r2, [pc, #24]	; (12234 <out_func+0x5c>)
   1221a:	2373      	movs	r3, #115	; 0x73
   1221c:	f015 f96b 	bl	274f6 <printk>
   12220:	4804      	ldr	r0, [pc, #16]	; (12234 <out_func+0x5c>)
   12222:	2173      	movs	r1, #115	; 0x73
   12224:	f015 fc0c 	bl	27a40 <assert_post_action>
}
   12228:	2000      	movs	r0, #0
   1222a:	bd38      	pop	{r3, r4, r5, pc}
   1222c:	0002e1b5 	.word	0x0002e1b5
   12230:	0002dcd3 	.word	0x0002dcd3
   12234:	0002e186 	.word	0x0002e186

00012238 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   12238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   1223c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   1223e:	f013 0707 	ands.w	r7, r3, #7
{
   12242:	4616      	mov	r6, r2
   12244:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12246:	7a0a      	ldrb	r2, [r1, #8]
   12248:	4604      	mov	r4, r0
   1224a:	460d      	mov	r5, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   1224c:	d020      	beq.n	12290 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
   1224e:	8949      	ldrh	r1, [r1, #10]
   12250:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12254:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12258:	43d2      	mvns	r2, r2
   1225a:	e9cd 7300 	strd	r7, r3, [sp]
   1225e:	9102      	str	r1, [sp, #8]
   12260:	68eb      	ldr	r3, [r5, #12]
   12262:	f002 0201 	and.w	r2, r2, #1
   12266:	4631      	mov	r1, r6
   12268:	f7ff fe9a 	bl	11fa0 <prefix_print>
   1226c:	4681      	mov	r9, r0
   1226e:	7a2b      	ldrb	r3, [r5, #8]
   12270:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   12272:	f013 0801 	ands.w	r8, r3, #1
   12276:	d00d      	beq.n	12294 <log_output_msg_process+0x5c>
		std_print(msg, output);
   12278:	4621      	mov	r1, r4
   1227a:	4628      	mov	r0, r5
   1227c:	f015 fd93 	bl	27da6 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   12280:	2f00      	cmp	r7, #0
   12282:	d03c      	beq.n	122fe <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   12284:	463a      	mov	r2, r7
   12286:	4631      	mov	r1, r6
   12288:	4620      	mov	r0, r4
   1228a:	f7ff ff19 	bl	120c0 <postfix_print>
   1228e:	e036      	b.n	122fe <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   12290:	46b9      	mov	r9, r7
   12292:	e7ec      	b.n	1226e <log_output_msg_process+0x36>
	} else if (raw_string) {
   12294:	2f00      	cmp	r7, #0
   12296:	d138      	bne.n	1230a <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   12298:	68e3      	ldr	r3, [r4, #12]
   1229a:	b95b      	cbnz	r3, 122b4 <log_output_msg_process+0x7c>
   1229c:	492a      	ldr	r1, [pc, #168]	; (12348 <log_output_msg_process+0x110>)
   1229e:	482b      	ldr	r0, [pc, #172]	; (1234c <log_output_msg_process+0x114>)
   122a0:	4a2b      	ldr	r2, [pc, #172]	; (12350 <log_output_msg_process+0x118>)
   122a2:	f240 13cf 	movw	r3, #463	; 0x1cf
   122a6:	f015 f926 	bl	274f6 <printk>
   122aa:	4829      	ldr	r0, [pc, #164]	; (12350 <log_output_msg_process+0x118>)
   122ac:	f240 11cf 	movw	r1, #463	; 0x1cf
   122b0:	f015 fbc6 	bl	27a40 <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   122b4:	2600      	movs	r6, #0
		length = output->size;
   122b6:	68e3      	ldr	r3, [r4, #12]
   122b8:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   122ba:	aa06      	add	r2, sp, #24
   122bc:	4633      	mov	r3, r6
   122be:	68a1      	ldr	r1, [r4, #8]
   122c0:	4628      	mov	r0, r5
   122c2:	f015 fd5c 	bl	27d7e <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   122c6:	9a06      	ldr	r2, [sp, #24]
   122c8:	6863      	ldr	r3, [r4, #4]
   122ca:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   122cc:	b14a      	cbz	r2, 122e2 <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   122ce:	68a3      	ldr	r3, [r4, #8]
   122d0:	4413      	add	r3, r2
   122d2:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   122d6:	f1a8 030a 	sub.w	r3, r8, #10
   122da:	f1d3 0800 	rsbs	r8, r3, #0
   122de:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   122e2:	4620      	mov	r0, r4
   122e4:	f015 febc 	bl	28060 <log_output_flush>
		offset += length;
   122e8:	9b06      	ldr	r3, [sp, #24]
   122ea:	441e      	add	r6, r3
	} while (length > 0);
   122ec:	2b00      	cmp	r3, #0
   122ee:	d1e2      	bne.n	122b6 <log_output_msg_process+0x7e>
	if (eol) {
   122f0:	f1b8 0f00 	cmp.w	r8, #0
   122f4:	d003      	beq.n	122fe <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   122f6:	4917      	ldr	r1, [pc, #92]	; (12354 <log_output_msg_process+0x11c>)
   122f8:	4620      	mov	r0, r4
   122fa:	f7ff fe3f 	bl	11f7c <print_formatted>
	}

	log_output_flush(output);
   122fe:	4620      	mov	r0, r4
   12300:	f015 feae 	bl	28060 <log_output_flush>
}
   12304:	b00a      	add	sp, #40	; 0x28
   12306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   1230a:	4628      	mov	r0, r5
   1230c:	f015 fce2 	bl	27cd4 <log_msg_str_get>
   12310:	4911      	ldr	r1, [pc, #68]	; (12358 <log_output_msg_process+0x120>)
   12312:	4602      	mov	r2, r0
   12314:	4620      	mov	r0, r4
   12316:	f7ff fe31 	bl	11f7c <print_formatted>
		length = sizeof(buf);
   1231a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1231e:	aa05      	add	r2, sp, #20
   12320:	4643      	mov	r3, r8
   12322:	a906      	add	r1, sp, #24
   12324:	4628      	mov	r0, r5
		length = sizeof(buf);
   12326:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1232a:	f015 fd28 	bl	27d7e <log_msg_hexdump_data_get>
		if (length) {
   1232e:	9a05      	ldr	r2, [sp, #20]
   12330:	2a00      	cmp	r2, #0
   12332:	d0a7      	beq.n	12284 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   12334:	464b      	mov	r3, r9
   12336:	9600      	str	r6, [sp, #0]
   12338:	a906      	add	r1, sp, #24
   1233a:	4620      	mov	r0, r4
   1233c:	f7ff fede 	bl	120fc <hexdump_line_print>
			offset += length;
   12340:	9b05      	ldr	r3, [sp, #20]
   12342:	4498      	add	r8, r3
		length = sizeof(buf);
   12344:	e7eb      	b.n	1231e <log_output_msg_process+0xe6>
   12346:	bf00      	nop
   12348:	0002e1e5 	.word	0x0002e1e5
   1234c:	0002dcd3 	.word	0x0002dcd3
   12350:	0002e186 	.word	0x0002e186
   12354:	0002e1f2 	.word	0x0002e1f2
   12358:	0002f709 	.word	0x0002f709

0001235c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   1235c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1235e:	f242 730f 	movw	r3, #9999	; 0x270f
   12362:	428b      	cmp	r3, r1
   12364:	bf28      	it	cs
   12366:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   12368:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1236a:	4a0f      	ldr	r2, [pc, #60]	; (123a8 <log_output_dropped_process+0x4c>)
{
   1236c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1236e:	2105      	movs	r1, #5
   12370:	4668      	mov	r0, sp
   12372:	f015 f8cd 	bl	27510 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12376:	6863      	ldr	r3, [r4, #4]
   12378:	490c      	ldr	r1, [pc, #48]	; (123ac <log_output_dropped_process+0x50>)
   1237a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1237c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1237e:	220b      	movs	r2, #11
   12380:	4628      	mov	r0, r5
   12382:	f015 fd03 	bl	27d8c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   12386:	6863      	ldr	r3, [r4, #4]
   12388:	4632      	mov	r2, r6
   1238a:	4669      	mov	r1, sp
   1238c:	4628      	mov	r0, r5
   1238e:	685b      	ldr	r3, [r3, #4]
   12390:	f015 fcfc 	bl	27d8c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   12394:	6863      	ldr	r3, [r4, #4]
   12396:	4906      	ldr	r1, [pc, #24]	; (123b0 <log_output_dropped_process+0x54>)
   12398:	685b      	ldr	r3, [r3, #4]
   1239a:	221b      	movs	r2, #27
   1239c:	4628      	mov	r0, r5
   1239e:	f015 fcf5 	bl	27d8c <buffer_write>
		     output->control_block->ctx);
}
   123a2:	b002      	add	sp, #8
   123a4:	bd70      	pop	{r4, r5, r6, pc}
   123a6:	bf00      	nop
   123a8:	000314f0 	.word	0x000314f0
   123ac:	0002e230 	.word	0x0002e230
   123b0:	0002e214 	.word	0x0002e214

000123b4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   123b4:	4a08      	ldr	r2, [pc, #32]	; (123d8 <log_output_timestamp_freq_set+0x24>)
{
   123b6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   123b8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   123ba:	4c08      	ldr	r4, [pc, #32]	; (123dc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   123bc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   123be:	2100      	movs	r1, #0
   123c0:	42a0      	cmp	r0, r4
   123c2:	d804      	bhi.n	123ce <log_output_timestamp_freq_set+0x1a>
   123c4:	b101      	cbz	r1, 123c8 <log_output_timestamp_freq_set+0x14>
   123c6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   123c8:	4b05      	ldr	r3, [pc, #20]	; (123e0 <log_output_timestamp_freq_set+0x2c>)
   123ca:	6018      	str	r0, [r3, #0]
}
   123cc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   123ce:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   123d0:	005b      	lsls	r3, r3, #1
   123d2:	2101      	movs	r1, #1
   123d4:	e7f4      	b.n	123c0 <log_output_timestamp_freq_set+0xc>
   123d6:	bf00      	nop
   123d8:	200029c4 	.word	0x200029c4
   123dc:	000f4240 	.word	0x000f4240
   123e0:	200029c0 	.word	0x200029c0

000123e4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   123e4:	4b01      	ldr	r3, [pc, #4]	; (123ec <log_backend_rtt_init+0x8>)
   123e6:	2201      	movs	r2, #1
   123e8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   123ea:	4770      	bx	lr
   123ec:	20003d6b 	.word	0x20003d6b

000123f0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   123f0:	4b02      	ldr	r3, [pc, #8]	; (123fc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   123f2:	4803      	ldr	r0, [pc, #12]	; (12400 <panic+0x10>)
   123f4:	2201      	movs	r2, #1
   123f6:	701a      	strb	r2, [r3, #0]
   123f8:	f015 be32 	b.w	28060 <log_output_flush>
   123fc:	20003d6c 	.word	0x20003d6c
   12400:	0002cf84 	.word	0x0002cf84

00012404 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12404:	4801      	ldr	r0, [pc, #4]	; (1240c <dropped+0x8>)
   12406:	f7ff bfa9 	b.w	1235c <log_output_dropped_process>
   1240a:	bf00      	nop
   1240c:	0002cf84 	.word	0x0002cf84

00012410 <put>:
{
   12410:	b510      	push	{r4, lr}
	log_msg_get(msg);
   12412:	4608      	mov	r0, r1
   12414:	460c      	mov	r4, r1
   12416:	f015 fc1b 	bl	27c50 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1241a:	4805      	ldr	r0, [pc, #20]	; (12430 <put+0x20>)
   1241c:	4621      	mov	r1, r4
   1241e:	220f      	movs	r2, #15
   12420:	f7ff ff0a 	bl	12238 <log_output_msg_process>
	log_msg_put(msg);
   12424:	4620      	mov	r0, r4
}
   12426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1242a:	f015 bc40 	b.w	27cae <log_msg_put>
   1242e:	bf00      	nop
   12430:	0002cf84 	.word	0x0002cf84

00012434 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12434:	4b05      	ldr	r3, [pc, #20]	; (1244c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   12436:	781b      	ldrb	r3, [r3, #0]
   12438:	b11b      	cbz	r3, 12442 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   1243a:	f241 3088 	movw	r0, #5000	; 0x1388
   1243e:	f01a b9b1 	b.w	2c7a4 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   12442:	20a4      	movs	r0, #164	; 0xa4
   12444:	2100      	movs	r1, #0
   12446:	f011 b97f 	b.w	23748 <z_impl_k_sleep>
   1244a:	bf00      	nop
   1244c:	20003d6c 	.word	0x20003d6c

00012450 <data_out_block_mode>:
{
   12450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12454:	f8df 9094 	ldr.w	r9, [pc, #148]	; 124ec <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   12458:	f8df a094 	ldr.w	sl, [pc, #148]	; 124f0 <data_out_block_mode+0xa0>
{
   1245c:	4680      	mov	r8, r0
   1245e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   12460:	2404      	movs	r4, #4
   12462:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   12464:	f899 5000 	ldrb.w	r5, [r9]
   12468:	b9cd      	cbnz	r5, 1249e <data_out_block_mode+0x4e>
   1246a:	f04f 33ff 	mov.w	r3, #4294967295
   1246e:	f04f 32ff 	mov.w	r2, #4294967295
   12472:	4650      	mov	r0, sl
   12474:	f00e ff36 	bl	212e4 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12478:	463a      	mov	r2, r7
   1247a:	4641      	mov	r1, r8
   1247c:	4628      	mov	r0, r5
   1247e:	f00e f963 	bl	20748 <SEGGER_RTT_WriteSkipNoLock>
   12482:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   12484:	4650      	mov	r0, sl
   12486:	f00f f82d 	bl	214e4 <z_impl_k_mutex_unlock>
		if (ret) {
   1248a:	4d17      	ldr	r5, [pc, #92]	; (124e8 <data_out_block_mode+0x98>)
   1248c:	b1fe      	cbz	r6, 124ce <data_out_block_mode+0x7e>
	host_present = true;
   1248e:	2301      	movs	r3, #1
   12490:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   12492:	f89b 3000 	ldrb.w	r3, [fp]
   12496:	b96b      	cbnz	r3, 124b4 <data_out_block_mode+0x64>
}
   12498:	4638      	mov	r0, r7
   1249a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1249e:	463a      	mov	r2, r7
   124a0:	4641      	mov	r1, r8
   124a2:	2000      	movs	r0, #0
   124a4:	f00e f950 	bl	20748 <SEGGER_RTT_WriteSkipNoLock>
   124a8:	4606      	mov	r6, r0
   124aa:	e7ee      	b.n	1248a <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   124ac:	b95c      	cbnz	r4, 124c6 <data_out_block_mode+0x76>
		host_present = false;
   124ae:	702c      	strb	r4, [r5, #0]
   124b0:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   124b4:	2000      	movs	r0, #0
   124b6:	f00e f9c7 	bl	20848 <SEGGER_RTT_HasDataUp>
   124ba:	2800      	cmp	r0, #0
   124bc:	d0ec      	beq.n	12498 <data_out_block_mode+0x48>
   124be:	782b      	ldrb	r3, [r5, #0]
   124c0:	2b00      	cmp	r3, #0
   124c2:	d1f3      	bne.n	124ac <data_out_block_mode+0x5c>
   124c4:	e7e8      	b.n	12498 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   124c6:	3c01      	subs	r4, #1
   124c8:	f7ff ffb4 	bl	12434 <on_failed_write.part.0>
   124cc:	e7f2      	b.n	124b4 <data_out_block_mode+0x64>
		} else if (host_present) {
   124ce:	782b      	ldrb	r3, [r5, #0]
   124d0:	b113      	cbz	r3, 124d8 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   124d2:	3c01      	subs	r4, #1
   124d4:	d104      	bne.n	124e0 <data_out_block_mode+0x90>
		host_present = false;
   124d6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   124d8:	782b      	ldrb	r3, [r5, #0]
   124da:	2b00      	cmp	r3, #0
   124dc:	d1c2      	bne.n	12464 <data_out_block_mode+0x14>
   124de:	e7db      	b.n	12498 <data_out_block_mode+0x48>
   124e0:	f7ff ffa8 	bl	12434 <on_failed_write.part.0>
   124e4:	e7f8      	b.n	124d8 <data_out_block_mode+0x88>
   124e6:	bf00      	nop
   124e8:	20003d6b 	.word	0x20003d6b
   124ec:	20003d6c 	.word	0x20003d6c
   124f0:	20000808 	.word	0x20000808

000124f4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   124f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   124f8:	460f      	mov	r7, r1
   124fa:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   124fc:	2108      	movs	r1, #8
   124fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12500:	f015 fe77 	bl	281f2 <nvs_al_size.isra.0>

	*addr -= ate_size;
   12504:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   12506:	4b13      	ldr	r3, [pc, #76]	; (12554 <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   12508:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1250a:	4680      	mov	r8, r0
	*addr -= ate_size;
   1250c:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1250e:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   12512:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   12514:	42ac      	cmp	r4, r5
   12516:	d803      	bhi.n	12520 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   12518:	2000      	movs	r0, #0
}
   1251a:	b003      	add	sp, #12
   1251c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12520:	2308      	movs	r3, #8
   12522:	466a      	mov	r2, sp
   12524:	4621      	mov	r1, r4
   12526:	4630      	mov	r0, r6
   12528:	f015 fdc6 	bl	280b8 <nvs_flash_rd>
		if (rc) {
   1252c:	2800      	cmp	r0, #0
   1252e:	d1f4      	bne.n	1251a <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   12530:	4669      	mov	r1, sp
   12532:	4630      	mov	r0, r6
   12534:	f015 fe67 	bl	28206 <nvs_ate_valid>
   12538:	b140      	cbz	r0, 1254c <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   1253a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1253e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   12542:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   12544:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   12548:	4413      	add	r3, r2
   1254a:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   1254c:	eba4 0408 	sub.w	r4, r4, r8
   12550:	e7e0      	b.n	12514 <nvs_recover_last_ate+0x20>
   12552:	bf00      	nop
   12554:	ffff0000 	.word	0xffff0000

00012558 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   12558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1255c:	4604      	mov	r4, r0
   1255e:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12560:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12562:	2108      	movs	r1, #8
   12564:	f015 fe45 	bl	281f2 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   12568:	6863      	ldr	r3, [r4, #4]
   1256a:	0c1b      	lsrs	r3, r3, #16
   1256c:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1256e:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   12570:	a903      	add	r1, sp, #12
   12572:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   12574:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   12576:	f015 fe60 	bl	2823a <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1257a:	9b03      	ldr	r3, [sp, #12]
   1257c:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1257e:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12580:	4419      	add	r1, r3
   12582:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12584:	4632      	mov	r2, r6
   12586:	2308      	movs	r3, #8
   12588:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1258a:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1258c:	f015 fd94 	bl	280b8 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   12590:	1e02      	subs	r2, r0, #0
   12592:	f2c0 80ab 	blt.w	126ec <nvs_gc+0x194>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   12596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12598:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1259a:	2300      	movs	r3, #0
		if (data8[i] != value) {
   1259c:	5cf1      	ldrb	r1, [r6, r3]
   1259e:	4291      	cmp	r1, r2
   125a0:	f040 8092 	bne.w	126c8 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   125a4:	3301      	adds	r3, #1
   125a6:	2b08      	cmp	r3, #8
   125a8:	d1f8      	bne.n	1259c <nvs_gc+0x44>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   125aa:	68a0      	ldr	r0, [r4, #8]
   125ac:	6863      	ldr	r3, [r4, #4]
   125ae:	4428      	add	r0, r5
   125b0:	4283      	cmp	r3, r0
   125b2:	f080 8081 	bcs.w	126b8 <nvs_gc+0x160>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   125b6:	9903      	ldr	r1, [sp, #12]
   125b8:	4620      	mov	r0, r4
   125ba:	f015 fdda 	bl	28172 <nvs_flash_erase_sector>
   125be:	4602      	mov	r2, r0
	if (rc) {
   125c0:	e094      	b.n	126ec <nvs_gc+0x194>
		gc_addr &= ADDR_SECT_MASK;
   125c2:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   125c4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   125c8:	0c1b      	lsrs	r3, r3, #16
   125ca:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   125cc:	4413      	add	r3, r2
   125ce:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   125d0:	f8df b120 	ldr.w	fp, [pc, #288]	; 126f4 <nvs_gc+0x19c>
		gc_prev_addr = gc_addr;
   125d4:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   125d8:	aa08      	add	r2, sp, #32
   125da:	a904      	add	r1, sp, #16
   125dc:	4620      	mov	r0, r4
   125de:	f015 feb0 	bl	28342 <nvs_prev_ate>
		if (rc) {
   125e2:	4602      	mov	r2, r0
   125e4:	2800      	cmp	r0, #0
   125e6:	f040 8081 	bne.w	126ec <nvs_gc+0x194>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   125ea:	a908      	add	r1, sp, #32
   125ec:	4620      	mov	r0, r4
   125ee:	f015 fe0a 	bl	28206 <nvs_ate_valid>
   125f2:	2800      	cmp	r0, #0
   125f4:	d036      	beq.n	12664 <nvs_gc+0x10c>
		wlk_addr = fs->ate_wra;
   125f6:	6863      	ldr	r3, [r4, #4]
   125f8:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   125fa:	aa0a      	add	r2, sp, #40	; 0x28
   125fc:	a905      	add	r1, sp, #20
   125fe:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   12600:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12602:	f015 fe9e 	bl	28342 <nvs_prev_ate>
			if (rc) {
   12606:	4602      	mov	r2, r0
   12608:	2800      	cmp	r0, #0
   1260a:	d16f      	bne.n	126ec <nvs_gc+0x194>
			if ((wlk_ate.id == gc_ate.id) &&
   1260c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   12610:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12614:	429a      	cmp	r2, r3
   12616:	d028      	beq.n	1266a <nvs_gc+0x112>
		} while (wlk_addr != fs->ate_wra);
   12618:	6862      	ldr	r2, [r4, #4]
   1261a:	9b05      	ldr	r3, [sp, #20]
   1261c:	429a      	cmp	r2, r3
   1261e:	d1ec      	bne.n	125fa <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   12620:	4556      	cmp	r6, sl
   12622:	d11f      	bne.n	12664 <nvs_gc+0x10c>
   12624:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   12628:	b1e3      	cbz	r3, 12664 <nvs_gc+0x10c>
			data_addr += gc_ate.offset;
   1262a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1262e:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   12632:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   12634:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12636:	68a3      	ldr	r3, [r4, #8]
   12638:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   1263c:	f015 fdd0 	bl	281e0 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   12642:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12646:	681e      	ldr	r6, [r3, #0]
   12648:	4276      	negs	r6, r6
	block_size =
   1264a:	f006 0320 	and.w	r3, r6, #32
   1264e:	9301      	str	r3, [sp, #4]
	while (len) {
   12650:	f1b8 0f00 	cmp.w	r8, #0
   12654:	d110      	bne.n	12678 <nvs_gc+0x120>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   12656:	a908      	add	r1, sp, #32
   12658:	4620      	mov	r0, r4
   1265a:	f015 fe4c 	bl	282f6 <nvs_flash_ate_wrt>
			if (rc) {
   1265e:	4602      	mov	r2, r0
   12660:	2800      	cmp	r0, #0
   12662:	d143      	bne.n	126ec <nvs_gc+0x194>
	} while (gc_prev_addr != stop_addr);
   12664:	45ca      	cmp	sl, r9
   12666:	d1b5      	bne.n	125d4 <nvs_gc+0x7c>
gc_done:
   12668:	e79f      	b.n	125aa <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1266a:	a90a      	add	r1, sp, #40	; 0x28
   1266c:	4620      	mov	r0, r4
   1266e:	f015 fdca 	bl	28206 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   12672:	2800      	cmp	r0, #0
   12674:	d0d0      	beq.n	12618 <nvs_gc+0xc0>
   12676:	e7d3      	b.n	12620 <nvs_gc+0xc8>
		bytes_to_copy = MIN(block_size, len);
   12678:	9b01      	ldr	r3, [sp, #4]
   1267a:	4543      	cmp	r3, r8
   1267c:	bf28      	it	cs
   1267e:	4643      	movcs	r3, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   12680:	aa0c      	add	r2, sp, #48	; 0x30
   12682:	4639      	mov	r1, r7
   12684:	4620      	mov	r0, r4
		bytes_to_copy = MIN(block_size, len);
   12686:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   12688:	f015 fd16 	bl	280b8 <nvs_flash_rd>
		if (rc) {
   1268c:	4602      	mov	r2, r0
   1268e:	bb68      	cbnz	r0, 126ec <nvs_gc+0x194>
	if (!len) {
   12690:	b136      	cbz	r6, 126a0 <nvs_gc+0x148>
   12692:	aa0c      	add	r2, sp, #48	; 0x30
   12694:	68a1      	ldr	r1, [r4, #8]
   12696:	4633      	mov	r3, r6
   12698:	4620      	mov	r0, r4
   1269a:	f015 fdf7 	bl	2828c <nvs_flash_al_wrt.part.0>
   1269e:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   126a0:	4631      	mov	r1, r6
   126a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   126a4:	f015 fda5 	bl	281f2 <nvs_al_size.isra.0>
   126a8:	68a1      	ldr	r1, [r4, #8]
   126aa:	4401      	add	r1, r0
   126ac:	60a1      	str	r1, [r4, #8]
		if (rc) {
   126ae:	b9ea      	cbnz	r2, 126ec <nvs_gc+0x194>
		len -= bytes_to_copy;
   126b0:	eba8 0806 	sub.w	r8, r8, r6
		addr += bytes_to_copy;
   126b4:	4437      	add	r7, r6
   126b6:	e7cb      	b.n	12650 <nvs_gc+0xf8>
		rc = nvs_add_gc_done_ate(fs);
   126b8:	4620      	mov	r0, r4
   126ba:	f015 fe2d 	bl	28318 <nvs_add_gc_done_ate>
		if (rc) {
   126be:	4602      	mov	r2, r0
   126c0:	2800      	cmp	r0, #0
   126c2:	f43f af78 	beq.w	125b6 <nvs_gc+0x5e>
   126c6:	e011      	b.n	126ec <nvs_gc+0x194>
	stop_addr = gc_addr - ate_size;
   126c8:	9b04      	ldr	r3, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   126ca:	4631      	mov	r1, r6
   126cc:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   126ce:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   126d2:	f015 fdbd 	bl	28250 <nvs_close_ate_valid>
   126d6:	2800      	cmp	r0, #0
   126d8:	f47f af73 	bne.w	125c2 <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   126dc:	a904      	add	r1, sp, #16
   126de:	4620      	mov	r0, r4
   126e0:	f7ff ff08 	bl	124f4 <nvs_recover_last_ate>
		if (rc) {
   126e4:	4602      	mov	r2, r0
   126e6:	2800      	cmp	r0, #0
   126e8:	f43f af72 	beq.w	125d0 <nvs_gc+0x78>
		return rc;
	}
	return 0;
}
   126ec:	4610      	mov	r0, r2
   126ee:	b015      	add	sp, #84	; 0x54
   126f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f4:	ffff0000 	.word	0xffff0000

000126f8 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   126f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126fc:	4604      	mov	r4, r0
   126fe:	b088      	sub	sp, #32
   12700:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   12702:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   12706:	4638      	mov	r0, r7
   12708:	f019 ff82 	bl	2c610 <z_impl_k_mutex_init>
   1270c:	4628      	mov	r0, r5
   1270e:	f00e f8c5 	bl	2089c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   12712:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   12714:	b978      	cbnz	r0, 12736 <nvs_init+0x3e>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12716:	4baa      	ldr	r3, [pc, #680]	; (129c0 <nvs_init+0x2c8>)
   12718:	49aa      	ldr	r1, [pc, #680]	; (129c4 <nvs_init+0x2cc>)
		LOG_ERR("No valid flash device found");
   1271a:	48ab      	ldr	r0, [pc, #684]	; (129c8 <nvs_init+0x2d0>)
   1271c:	1ac9      	subs	r1, r1, r3
   1271e:	08c9      	lsrs	r1, r1, #3
   12720:	0189      	lsls	r1, r1, #6
   12722:	f041 0101 	orr.w	r1, r1, #1
   12726:	f015 f9b9 	bl	27a9c <log_0>
		return -ENXIO;
   1272a:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1272e:	4628      	mov	r0, r5
   12730:	b008      	add	sp, #32
   12732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   12736:	6883      	ldr	r3, [r0, #8]
   12738:	691b      	ldr	r3, [r3, #16]
   1273a:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1273c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1273e:	b960      	cbnz	r0, 1275a <nvs_init+0x62>
   12740:	49a0      	ldr	r1, [pc, #640]	; (129c4 <nvs_init+0x2cc>)
   12742:	4b9f      	ldr	r3, [pc, #636]	; (129c0 <nvs_init+0x2c8>)
		LOG_ERR("Could not obtain flash parameters");
   12744:	48a1      	ldr	r0, [pc, #644]	; (129cc <nvs_init+0x2d4>)
   12746:	1ac9      	subs	r1, r1, r3
   12748:	08c9      	lsrs	r1, r1, #3
   1274a:	0189      	lsls	r1, r1, #6
   1274c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
   12750:	f015 f9a4 	bl	27a9c <log_0>
		return -EINVAL;
   12754:	f06f 0515 	mvn.w	r5, #21
   12758:	e7e9      	b.n	1272e <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   1275a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   1275c:	6883      	ldr	r3, [r0, #8]
   1275e:	691b      	ldr	r3, [r3, #16]
   12760:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   12762:	6803      	ldr	r3, [r0, #0]
   12764:	3b01      	subs	r3, #1
   12766:	2b1f      	cmp	r3, #31
   12768:	d908      	bls.n	1277c <nvs_init+0x84>
   1276a:	4996      	ldr	r1, [pc, #600]	; (129c4 <nvs_init+0x2cc>)
   1276c:	4b94      	ldr	r3, [pc, #592]	; (129c0 <nvs_init+0x2c8>)
		LOG_ERR("Unsupported write block size");
   1276e:	4898      	ldr	r0, [pc, #608]	; (129d0 <nvs_init+0x2d8>)
   12770:	1ac9      	subs	r1, r1, r3
   12772:	08c9      	lsrs	r1, r1, #3
   12774:	0189      	lsls	r1, r1, #6
   12776:	f041 0101 	orr.w	r1, r1, #1
   1277a:	e7e9      	b.n	12750 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   1277c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1277e:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   12780:	aa05      	add	r2, sp, #20
   12782:	f019 fa2f 	bl	2bbe4 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   12786:	b140      	cbz	r0, 1279a <nvs_init+0xa2>
   12788:	498e      	ldr	r1, [pc, #568]	; (129c4 <nvs_init+0x2cc>)
   1278a:	4b8d      	ldr	r3, [pc, #564]	; (129c0 <nvs_init+0x2c8>)
		LOG_ERR("Unable to get page info");
   1278c:	4891      	ldr	r0, [pc, #580]	; (129d4 <nvs_init+0x2dc>)
   1278e:	1ac9      	subs	r1, r1, r3
   12790:	08c9      	lsrs	r1, r1, #3
   12792:	0189      	lsls	r1, r1, #6
   12794:	f041 0101 	orr.w	r1, r1, #1
   12798:	e7da      	b.n	12750 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1279a:	89a3      	ldrh	r3, [r4, #12]
   1279c:	b12b      	cbz	r3, 127aa <nvs_init+0xb2>
   1279e:	9a06      	ldr	r2, [sp, #24]
   127a0:	fbb3 f5f2 	udiv	r5, r3, r2
   127a4:	fb02 3515 	mls	r5, r2, r5, r3
   127a8:	b145      	cbz	r5, 127bc <nvs_init+0xc4>
   127aa:	4986      	ldr	r1, [pc, #536]	; (129c4 <nvs_init+0x2cc>)
   127ac:	4b84      	ldr	r3, [pc, #528]	; (129c0 <nvs_init+0x2c8>)
		LOG_ERR("Invalid sector size");
   127ae:	488a      	ldr	r0, [pc, #552]	; (129d8 <nvs_init+0x2e0>)
   127b0:	1ac9      	subs	r1, r1, r3
   127b2:	08c9      	lsrs	r1, r1, #3
   127b4:	0189      	lsls	r1, r1, #6
   127b6:	f041 0101 	orr.w	r1, r1, #1
   127ba:	e7c9      	b.n	12750 <nvs_init+0x58>
	if (fs->sector_count < 2) {
   127bc:	89e3      	ldrh	r3, [r4, #14]
   127be:	2b01      	cmp	r3, #1
   127c0:	d808      	bhi.n	127d4 <nvs_init+0xdc>
   127c2:	4980      	ldr	r1, [pc, #512]	; (129c4 <nvs_init+0x2cc>)
   127c4:	4b7e      	ldr	r3, [pc, #504]	; (129c0 <nvs_init+0x2c8>)
		LOG_ERR("Configuration error - sector count");
   127c6:	4885      	ldr	r0, [pc, #532]	; (129dc <nvs_init+0x2e4>)
   127c8:	1ac9      	subs	r1, r1, r3
   127ca:	08c9      	lsrs	r1, r1, #3
   127cc:	0189      	lsls	r1, r1, #6
   127ce:	f041 0101 	orr.w	r1, r1, #1
   127d2:	e7bd      	b.n	12750 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   127d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   127d6:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   127d8:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   127dc:	f04f 32ff 	mov.w	r2, #4294967295
   127e0:	f04f 33ff 	mov.w	r3, #4294967295
   127e4:	4638      	mov	r0, r7
   127e6:	f00e fd7d 	bl	212e4 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   127ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   127ec:	2108      	movs	r1, #8
   127ee:	f015 fd00 	bl	281f2 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   127f2:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   127f4:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   127f6:	89e3      	ldrh	r3, [r4, #14]
   127f8:	fa1f fa85 	uxth.w	sl, r5
   127fc:	4553      	cmp	r3, sl
   127fe:	d844      	bhi.n	1288a <nvs_init+0x192>
	if (closed_sectors == fs->sector_count) {
   12800:	89e3      	ldrh	r3, [r4, #14]
   12802:	454b      	cmp	r3, r9
   12804:	f000 80f0 	beq.w	129e8 <nvs_init+0x2f0>
	if (i == fs->sector_count) {
   12808:	459a      	cmp	sl, r3
   1280a:	d10b      	bne.n	12824 <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1280c:	9900      	ldr	r1, [sp, #0]
   1280e:	2308      	movs	r3, #8
   12810:	4642      	mov	r2, r8
   12812:	1b89      	subs	r1, r1, r6
   12814:	4620      	mov	r0, r4
   12816:	f015 fc87 	bl	28128 <nvs_flash_cmp_const>
		if (!rc) {
   1281a:	b918      	cbnz	r0, 12824 <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
   1281c:	89e0      	ldrh	r0, [r4, #14]
   1281e:	4669      	mov	r1, sp
   12820:	f015 fd0b 	bl	2823a <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   12824:	4669      	mov	r1, sp
   12826:	4620      	mov	r0, r4
   12828:	f7ff fe64 	bl	124f4 <nvs_recover_last_ate>
	if (rc) {
   1282c:	4605      	mov	r5, r0
   1282e:	2800      	cmp	r0, #0
   12830:	f040 80dc 	bne.w	129ec <nvs_init+0x2f4>
	fs->ate_wra = addr;
   12834:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12836:	4a6a      	ldr	r2, [pc, #424]	; (129e0 <nvs_init+0x2e8>)
	fs->ate_wra = addr;
   12838:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1283a:	4013      	ands	r3, r2
   1283c:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   1283e:	4691      	mov	r9, r2
	while (fs->ate_wra >= fs->data_wra) {
   12840:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12844:	4299      	cmp	r1, r3
   12846:	d30e      	bcc.n	12866 <nvs_init+0x16e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12848:	2308      	movs	r3, #8
   1284a:	aa01      	add	r2, sp, #4
   1284c:	4620      	mov	r0, r4
   1284e:	f015 fc33 	bl	280b8 <nvs_flash_rd>
		if (rc) {
   12852:	b9c0      	cbnz	r0, 12886 <nvs_init+0x18e>
   12854:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   12856:	f813 2b01 	ldrb.w	r2, [r3], #1
   1285a:	4590      	cmp	r8, r2
   1285c:	f040 8101 	bne.w	12a62 <nvs_init+0x36a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12860:	3001      	adds	r0, #1
   12862:	2808      	cmp	r0, #8
   12864:	d1f7      	bne.n	12856 <nvs_init+0x15e>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12866:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   12868:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1286a:	0c1b      	lsrs	r3, r3, #16
   1286c:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   1286e:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12870:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   12872:	f015 fce2 	bl	2823a <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   12876:	89a3      	ldrh	r3, [r4, #12]
   12878:	9900      	ldr	r1, [sp, #0]
   1287a:	4642      	mov	r2, r8
   1287c:	4620      	mov	r0, r4
   1287e:	f015 fc53 	bl	28128 <nvs_flash_cmp_const>
	if (rc < 0) {
   12882:	2800      	cmp	r0, #0
   12884:	da25      	bge.n	128d2 <nvs_init+0x1da>
   12886:	4605      	mov	r5, r0
   12888:	e0b0      	b.n	129ec <nvs_init+0x2f4>
		       (uint16_t)(fs->sector_size - ate_size);
   1288a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1288c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   1288e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   12890:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12894:	4642      	mov	r2, r8
   12896:	2308      	movs	r3, #8
   12898:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1289a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1289c:	f015 fc44 	bl	28128 <nvs_flash_cmp_const>
		if (rc) {
   128a0:	b178      	cbz	r0, 128c2 <nvs_init+0x1ca>
			nvs_sector_advance(fs, &addr);
   128a2:	89e0      	ldrh	r0, [r4, #14]
   128a4:	4669      	mov	r1, sp
   128a6:	f015 fcc8 	bl	2823a <nvs_sector_advance.isra.0>
			closed_sectors++;
   128aa:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   128ae:	9900      	ldr	r1, [sp, #0]
   128b0:	2308      	movs	r3, #8
   128b2:	4642      	mov	r2, r8
   128b4:	4620      	mov	r0, r4
			closed_sectors++;
   128b6:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   128ba:	f015 fc35 	bl	28128 <nvs_flash_cmp_const>
			if (!rc) {
   128be:	2800      	cmp	r0, #0
   128c0:	d09e      	beq.n	12800 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
   128c2:	3501      	adds	r5, #1
   128c4:	e797      	b.n	127f6 <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   128c6:	2a00      	cmp	r2, #0
   128c8:	f000 80e3 	beq.w	12a92 <nvs_init+0x39a>
				rc = -ESPIPE;
   128cc:	f06f 051c 	mvn.w	r5, #28
   128d0:	e08c      	b.n	129ec <nvs_init+0x2f4>
	if (rc) {
   128d2:	d050      	beq.n	12976 <nvs_init+0x27e>
		addr = fs->ate_wra + ate_size;
   128d4:	6863      	ldr	r3, [r4, #4]
   128d6:	4433      	add	r3, r6
   128d8:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   128da:	f64f 78ff 	movw	r8, #65535	; 0xffff
   128de:	9900      	ldr	r1, [sp, #0]
   128e0:	89a3      	ldrh	r3, [r4, #12]
   128e2:	b28a      	uxth	r2, r1
   128e4:	1b9b      	subs	r3, r3, r6
   128e6:	429a      	cmp	r2, r3
   128e8:	d320      	bcc.n	1292c <nvs_init+0x234>
   128ea:	4b35      	ldr	r3, [pc, #212]	; (129c0 <nvs_init+0x2c8>)
   128ec:	4935      	ldr	r1, [pc, #212]	; (129c4 <nvs_init+0x2cc>)
		LOG_INF("No GC Done marker found: restarting gc");
   128ee:	483d      	ldr	r0, [pc, #244]	; (129e4 <nvs_init+0x2ec>)
   128f0:	1ac9      	subs	r1, r1, r3
   128f2:	08c9      	lsrs	r1, r1, #3
   128f4:	0189      	lsls	r1, r1, #6
   128f6:	f041 0103 	orr.w	r1, r1, #3
   128fa:	f015 f8cf 	bl	27a9c <log_0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   128fe:	6861      	ldr	r1, [r4, #4]
   12900:	4620      	mov	r0, r4
   12902:	f015 fc36 	bl	28172 <nvs_flash_erase_sector>
		if (rc) {
   12906:	2800      	cmp	r0, #0
   12908:	d1bd      	bne.n	12886 <nvs_init+0x18e>
		fs->ate_wra &= ADDR_SECT_MASK;
   1290a:	6862      	ldr	r2, [r4, #4]
   1290c:	4934      	ldr	r1, [pc, #208]	; (129e0 <nvs_init+0x2e8>)
   1290e:	ea02 0301 	and.w	r3, r2, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12912:	89a2      	ldrh	r2, [r4, #12]
   12914:	4413      	add	r3, r2
   12916:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1291a:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   1291c:	400b      	ands	r3, r1
   1291e:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12920:	4620      	mov	r0, r4
   12922:	f7ff fe19 	bl	12558 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12926:	2800      	cmp	r0, #0
   12928:	d040      	beq.n	129ac <nvs_init+0x2b4>
   1292a:	e7ac      	b.n	12886 <nvs_init+0x18e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1292c:	2308      	movs	r3, #8
   1292e:	aa03      	add	r2, sp, #12
   12930:	4620      	mov	r0, r4
   12932:	f015 fbc1 	bl	280b8 <nvs_flash_rd>
			if (rc) {
   12936:	2800      	cmp	r0, #0
   12938:	d1a5      	bne.n	12886 <nvs_init+0x18e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1293a:	a903      	add	r1, sp, #12
   1293c:	4620      	mov	r0, r4
   1293e:	f015 fc62 	bl	28206 <nvs_ate_valid>
   12942:	b138      	cbz	r0, 12954 <nvs_init+0x25c>
   12944:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12948:	4543      	cmp	r3, r8
   1294a:	d103      	bne.n	12954 <nvs_init+0x25c>
			    (gc_done_ate.id == 0xffff) &&
   1294c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12950:	2b00      	cmp	r3, #0
   12952:	d06f      	beq.n	12a34 <nvs_init+0x33c>
			addr += ate_size;
   12954:	9b00      	ldr	r3, [sp, #0]
   12956:	4433      	add	r3, r6
   12958:	9300      	str	r3, [sp, #0]
   1295a:	e7c0      	b.n	128de <nvs_init+0x1e6>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   1295c:	1a5b      	subs	r3, r3, r1
   1295e:	4642      	mov	r2, r8
   12960:	4620      	mov	r0, r4
   12962:	f015 fbe1 	bl	28128 <nvs_flash_cmp_const>
		if (rc < 0) {
   12966:	2800      	cmp	r0, #0
   12968:	db8d      	blt.n	12886 <nvs_init+0x18e>
		if (!rc) {
   1296a:	d008      	beq.n	1297e <nvs_init+0x286>
		fs->data_wra += fs->flash_parameters->write_block_size;
   1296c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1296e:	68a3      	ldr	r3, [r4, #8]
   12970:	6812      	ldr	r2, [r2, #0]
   12972:	4413      	add	r3, r2
   12974:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   12976:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1297a:	428b      	cmp	r3, r1
   1297c:	d8ee      	bhi.n	1295c <nvs_init+0x264>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1297e:	6861      	ldr	r1, [r4, #4]
   12980:	89a3      	ldrh	r3, [r4, #12]
   12982:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   12986:	429a      	cmp	r2, r3
   12988:	d1cd      	bne.n	12926 <nvs_init+0x22e>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1298a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 129e0 <nvs_init+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1298e:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12990:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12994:	4293      	cmp	r3, r2
   12996:	d0c6      	beq.n	12926 <nvs_init+0x22e>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12998:	4620      	mov	r0, r4
   1299a:	f015 fbea 	bl	28172 <nvs_flash_erase_sector>
		if (rc) {
   1299e:	2800      	cmp	r0, #0
   129a0:	f47f af71 	bne.w	12886 <nvs_init+0x18e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   129a4:	6863      	ldr	r3, [r4, #4]
   129a6:	ea03 0308 	and.w	r3, r3, r8
   129aa:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   129ac:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   129ae:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   129b0:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   129b4:	42b3      	cmp	r3, r6
   129b6:	d119      	bne.n	129ec <nvs_init+0x2f4>
		rc = nvs_add_gc_done_ate(fs);
   129b8:	4620      	mov	r0, r4
   129ba:	f015 fcad 	bl	28318 <nvs_add_gc_done_ate>
   129be:	e762      	b.n	12886 <nvs_init+0x18e>
   129c0:	0002ccb8 	.word	0x0002ccb8
   129c4:	0002cd58 	.word	0x0002cd58
   129c8:	0002e260 	.word	0x0002e260
   129cc:	0002e27c 	.word	0x0002e27c
   129d0:	0002e29e 	.word	0x0002e29e
   129d4:	0002e2bb 	.word	0x0002e2bb
   129d8:	0002e2d3 	.word	0x0002e2d3
   129dc:	0002e2e7 	.word	0x0002e2e7
   129e0:	ffff0000 	.word	0xffff0000
   129e4:	0002e359 	.word	0x0002e359
		rc = -EDEADLK;
   129e8:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   129ec:	4638      	mov	r0, r7
   129ee:	f00e fd79 	bl	214e4 <z_impl_k_mutex_unlock>
	if (rc) {
   129f2:	2d00      	cmp	r5, #0
   129f4:	f47f ae9b 	bne.w	1272e <nvs_init+0x36>
	fs->ready = true;
   129f8:	2301      	movs	r3, #1
   129fa:	7423      	strb	r3, [r4, #16]
   129fc:	4e27      	ldr	r6, [pc, #156]	; (12a9c <nvs_init+0x3a4>)
   129fe:	4b28      	ldr	r3, [pc, #160]	; (12aa0 <nvs_init+0x3a8>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   12a00:	89a2      	ldrh	r2, [r4, #12]
   12a02:	89e1      	ldrh	r1, [r4, #14]
   12a04:	4827      	ldr	r0, [pc, #156]	; (12aa4 <nvs_init+0x3ac>)
   12a06:	1af6      	subs	r6, r6, r3
   12a08:	08f6      	lsrs	r6, r6, #3
   12a0a:	01b6      	lsls	r6, r6, #6
   12a0c:	f046 0603 	orr.w	r6, r6, #3
   12a10:	4633      	mov	r3, r6
   12a12:	f015 f864 	bl	27ade <log_2>
	LOG_INF("alloc wra: %d, %x",
   12a16:	6861      	ldr	r1, [r4, #4]
   12a18:	4823      	ldr	r0, [pc, #140]	; (12aa8 <nvs_init+0x3b0>)
   12a1a:	4633      	mov	r3, r6
   12a1c:	b28a      	uxth	r2, r1
   12a1e:	0c09      	lsrs	r1, r1, #16
   12a20:	f015 f85d 	bl	27ade <log_2>
	LOG_INF("data wra: %d, %x",
   12a24:	68a1      	ldr	r1, [r4, #8]
   12a26:	4821      	ldr	r0, [pc, #132]	; (12aac <nvs_init+0x3b4>)
   12a28:	b28a      	uxth	r2, r1
   12a2a:	4633      	mov	r3, r6
   12a2c:	0c09      	lsrs	r1, r1, #16
   12a2e:	f015 f856 	bl	27ade <log_2>
	return 0;
   12a32:	e67c      	b.n	1272e <nvs_init+0x36>
   12a34:	4b1a      	ldr	r3, [pc, #104]	; (12aa0 <nvs_init+0x3a8>)
   12a36:	4919      	ldr	r1, [pc, #100]	; (12a9c <nvs_init+0x3a4>)
			LOG_INF("GC Done marker found");
   12a38:	481d      	ldr	r0, [pc, #116]	; (12ab0 <nvs_init+0x3b8>)
   12a3a:	1ac9      	subs	r1, r1, r3
   12a3c:	08c9      	lsrs	r1, r1, #3
   12a3e:	0189      	lsls	r1, r1, #6
   12a40:	f041 0103 	orr.w	r1, r1, #3
   12a44:	f015 f82a 	bl	27a9c <log_0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12a48:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   12a4a:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12a4c:	0c1b      	lsrs	r3, r3, #16
   12a4e:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   12a50:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12a52:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   12a54:	f015 fbf1 	bl	2823a <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   12a58:	9900      	ldr	r1, [sp, #0]
   12a5a:	4620      	mov	r0, r4
   12a5c:	f015 fb89 	bl	28172 <nvs_flash_erase_sector>
			goto end;
   12a60:	e761      	b.n	12926 <nvs_init+0x22e>
		if (nvs_ate_valid(fs, &last_ate)) {
   12a62:	a901      	add	r1, sp, #4
   12a64:	4620      	mov	r0, r4
   12a66:	f015 fbce 	bl	28206 <nvs_ate_valid>
   12a6a:	f8d4 a004 	ldr.w	sl, [r4, #4]
   12a6e:	b180      	cbz	r0, 12a92 <nvs_init+0x39a>
			fs->data_wra = addr & ADDR_SECT_MASK;
   12a70:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12a72:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12a76:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   12a7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   12a7c:	ea03 0309 	and.w	r3, r3, r9
   12a80:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12a82:	4411      	add	r1, r2
   12a84:	f015 fbb5 	bl	281f2 <nvs_al_size.isra.0>
   12a88:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12a8a:	4553      	cmp	r3, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12a8c:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12a8e:	f43f af1a 	beq.w	128c6 <nvs_init+0x1ce>
		fs->ate_wra -= ate_size;
   12a92:	ebaa 0306 	sub.w	r3, sl, r6
   12a96:	6063      	str	r3, [r4, #4]
   12a98:	e6d2      	b.n	12840 <nvs_init+0x148>
   12a9a:	bf00      	nop
   12a9c:	0002cd58 	.word	0x0002cd58
   12aa0:	0002ccb8 	.word	0x0002ccb8
   12aa4:	0002e30a 	.word	0x0002e30a
   12aa8:	0002e321 	.word	0x0002e321
   12aac:	0002e333 	.word	0x0002e333
   12ab0:	0002e344 	.word	0x0002e344

00012ab4 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   12ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab8:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   12aba:	7c03      	ldrb	r3, [r0, #16]
{
   12abc:	b089      	sub	sp, #36	; 0x24
   12abe:	4604      	mov	r4, r0
   12ac0:	4689      	mov	r9, r1
   12ac2:	4690      	mov	r8, r2
	if (!fs->ready) {
   12ac4:	b97b      	cbnz	r3, 12ae6 <nvs_write+0x32>
   12ac6:	4b68      	ldr	r3, [pc, #416]	; (12c68 <nvs_write+0x1b4>)
   12ac8:	4968      	ldr	r1, [pc, #416]	; (12c6c <nvs_write+0x1b8>)
		LOG_ERR("NVS not initialized");
   12aca:	4869      	ldr	r0, [pc, #420]	; (12c70 <nvs_write+0x1bc>)
   12acc:	1ac9      	subs	r1, r1, r3
   12ace:	08c9      	lsrs	r1, r1, #3
   12ad0:	0189      	lsls	r1, r1, #6
   12ad2:	f041 0101 	orr.w	r1, r1, #1
   12ad6:	f014 ffe1 	bl	27a9c <log_0>
		return -EACCES;
   12ada:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   12ade:	4628      	mov	r0, r5
   12ae0:	b009      	add	sp, #36	; 0x24
   12ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12ae8:	2108      	movs	r1, #8
   12aea:	4618      	mov	r0, r3
   12aec:	f015 fb81 	bl	281f2 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   12af0:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12af2:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   12af4:	4618      	mov	r0, r3
   12af6:	f015 fb7c 	bl	281f2 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12afa:	89a3      	ldrh	r3, [r4, #12]
   12afc:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   12b00:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   12b02:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12b04:	f200 80ab 	bhi.w	12c5e <nvs_write+0x1aa>
   12b08:	b116      	cbz	r6, 12b10 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   12b0a:	2a00      	cmp	r2, #0
   12b0c:	f000 80a7 	beq.w	12c5e <nvs_write+0x1aa>
	wlk_addr = fs->ate_wra;
   12b10:	6863      	ldr	r3, [r4, #4]
   12b12:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12b14:	aa04      	add	r2, sp, #16
   12b16:	a903      	add	r1, sp, #12
   12b18:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12b1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12b1e:	f015 fc10 	bl	28342 <nvs_prev_ate>
		if (rc) {
   12b22:	4605      	mov	r5, r0
   12b24:	2800      	cmp	r0, #0
   12b26:	d1da      	bne.n	12ade <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12b28:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12b2c:	454b      	cmp	r3, r9
   12b2e:	d005      	beq.n	12b3c <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
   12b30:	6862      	ldr	r2, [r4, #4]
   12b32:	9b03      	ldr	r3, [sp, #12]
   12b34:	429a      	cmp	r2, r3
   12b36:	d1ed      	bne.n	12b14 <nvs_write+0x60>
		if (len == 0) {
   12b38:	b9e6      	cbnz	r6, 12b74 <nvs_write+0xc0>
   12b3a:	e7d0      	b.n	12ade <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12b3c:	a904      	add	r1, sp, #16
   12b3e:	4620      	mov	r0, r4
   12b40:	f015 fb61 	bl	28206 <nvs_ate_valid>
   12b44:	2800      	cmp	r0, #0
   12b46:	d0f3      	beq.n	12b30 <nvs_write+0x7c>
		if (len == 0) {
   12b48:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12b4c:	b186      	cbz	r6, 12b70 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
   12b4e:	429e      	cmp	r6, r3
   12b50:	d110      	bne.n	12b74 <nvs_write+0xc0>
		rd_addr += wlk_ate.offset;
   12b52:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   12b56:	ea4f 411b 	mov.w	r1, fp, lsr #16
   12b5a:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   12b5c:	4401      	add	r1, r0
   12b5e:	4633      	mov	r3, r6
   12b60:	4642      	mov	r2, r8
   12b62:	4620      	mov	r0, r4
   12b64:	f015 fab6 	bl	280d4 <nvs_flash_block_cmp>
			if (rc <= 0) {
   12b68:	2800      	cmp	r0, #0
   12b6a:	dc03      	bgt.n	12b74 <nvs_write+0xc0>
   12b6c:	4605      	mov	r5, r0
   12b6e:	e7b6      	b.n	12ade <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   12b70:	2b00      	cmp	r3, #0
   12b72:	d0b4      	beq.n	12ade <nvs_write+0x2a>
	if (data_size) {
   12b74:	2f00      	cmp	r7, #0
   12b76:	d13f      	bne.n	12bf8 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   12b78:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   12b7c:	f04f 32ff 	mov.w	r2, #4294967295
   12b80:	f04f 33ff 	mov.w	r3, #4294967295
   12b84:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   12b86:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 12c74 <nvs_write+0x1c0>
   12b8a:	f00e fbab 	bl	212e4 <z_impl_k_mutex_lock>
	gc_count = 0;
   12b8e:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
   12b90:	89e3      	ldrh	r3, [r4, #14]
   12b92:	429a      	cmp	r2, r3
   12b94:	d060      	beq.n	12c58 <nvs_write+0x1a4>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   12b96:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   12b9a:	1878      	adds	r0, r7, r1
   12b9c:	4283      	cmp	r3, r0
   12b9e:	d32e      	bcc.n	12bfe <nvs_write+0x14a>
	entry.part = 0xff;
   12ba0:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   12ba2:	a806      	add	r0, sp, #24
	entry.id = id;
   12ba4:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12ba8:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   12bac:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   12bb0:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   12bb4:	f015 fb14 	bl	281e0 <nvs_ate_crc8_update>
	if (!len) {
   12bb8:	b136      	cbz	r6, 12bc8 <nvs_write+0x114>
   12bba:	68a1      	ldr	r1, [r4, #8]
   12bbc:	4633      	mov	r3, r6
   12bbe:	4642      	mov	r2, r8
   12bc0:	4620      	mov	r0, r4
   12bc2:	f015 fb63 	bl	2828c <nvs_flash_al_wrt.part.0>
   12bc6:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   12bc8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12bca:	4631      	mov	r1, r6
   12bcc:	f015 fb11 	bl	281f2 <nvs_al_size.isra.0>
   12bd0:	68a3      	ldr	r3, [r4, #8]
   12bd2:	4403      	add	r3, r0
   12bd4:	60a3      	str	r3, [r4, #8]
	if (rc) {
   12bd6:	2d00      	cmp	r5, #0
   12bd8:	d144      	bne.n	12c64 <nvs_write+0x1b0>
	rc = nvs_flash_ate_wrt(fs, &entry);
   12bda:	a906      	add	r1, sp, #24
   12bdc:	4620      	mov	r0, r4
   12bde:	f015 fb8a 	bl	282f6 <nvs_flash_ate_wrt>
	if (rc) {
   12be2:	4605      	mov	r5, r0
   12be4:	2800      	cmp	r0, #0
   12be6:	d13d      	bne.n	12c64 <nvs_write+0x1b0>
	rc = len;
   12be8:	4633      	mov	r3, r6
   12bea:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   12bec:	4650      	mov	r0, sl
   12bee:	f00e fc79 	bl	214e4 <z_impl_k_mutex_unlock>
	return rc;
   12bf2:	9b01      	ldr	r3, [sp, #4]
   12bf4:	461d      	mov	r5, r3
   12bf6:	e772      	b.n	12ade <nvs_write+0x2a>
		required_space = data_size + ate_size;
   12bf8:	4457      	add	r7, sl
   12bfa:	b2bf      	uxth	r7, r7
   12bfc:	e7bc      	b.n	12b78 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12bfe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12c00:	9201      	str	r2, [sp, #4]
   12c02:	2108      	movs	r1, #8
   12c04:	f015 faf5 	bl	281f2 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   12c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12c0c:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   12c10:	2100      	movs	r1, #0
   12c12:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   12c16:	1819      	adds	r1, r3, r0
   12c18:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   12c1c:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   12c1e:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   12c22:	440b      	add	r3, r1
   12c24:	1a18      	subs	r0, r3, r0
   12c26:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   12c28:	a806      	add	r0, sp, #24
   12c2a:	f015 fad9 	bl	281e0 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   12c2e:	a906      	add	r1, sp, #24
   12c30:	4620      	mov	r0, r4
   12c32:	f015 fb60 	bl	282f6 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   12c36:	89e0      	ldrh	r0, [r4, #14]
   12c38:	1d21      	adds	r1, r4, #4
   12c3a:	f015 fafe 	bl	2823a <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12c3e:	6863      	ldr	r3, [r4, #4]
   12c40:	ea03 030b 	and.w	r3, r3, fp
   12c44:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12c46:	4620      	mov	r0, r4
   12c48:	f7ff fc86 	bl	12558 <nvs_gc>
		if (rc) {
   12c4c:	4603      	mov	r3, r0
   12c4e:	2800      	cmp	r0, #0
   12c50:	d1cb      	bne.n	12bea <nvs_write+0x136>
		gc_count++;
   12c52:	9a01      	ldr	r2, [sp, #4]
   12c54:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   12c56:	e79b      	b.n	12b90 <nvs_write+0xdc>
			rc = -ENOSPC;
   12c58:	f06f 031b 	mvn.w	r3, #27
   12c5c:	e7c5      	b.n	12bea <nvs_write+0x136>
		return -EINVAL;
   12c5e:	f06f 0515 	mvn.w	r5, #21
   12c62:	e73c      	b.n	12ade <nvs_write+0x2a>
			if (rc) {
   12c64:	462b      	mov	r3, r5
   12c66:	e7c0      	b.n	12bea <nvs_write+0x136>
   12c68:	0002ccb8 	.word	0x0002ccb8
   12c6c:	0002cd58 	.word	0x0002cd58
   12c70:	0002e24c 	.word	0x0002e24c
   12c74:	ffff0000 	.word	0xffff0000

00012c78 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   12c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12c7c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   12c7e:	7c03      	ldrb	r3, [r0, #16]
{
   12c80:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   12c84:	4604      	mov	r4, r0
   12c86:	460f      	mov	r7, r1
   12c88:	4690      	mov	r8, r2
	if (!fs->ready) {
   12c8a:	b973      	cbnz	r3, 12caa <nvs_read_hist+0x32>
   12c8c:	4b2b      	ldr	r3, [pc, #172]	; (12d3c <nvs_read_hist+0xc4>)
   12c8e:	492c      	ldr	r1, [pc, #176]	; (12d40 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
   12c90:	482c      	ldr	r0, [pc, #176]	; (12d44 <nvs_read_hist+0xcc>)
   12c92:	1ac9      	subs	r1, r1, r3
   12c94:	08c9      	lsrs	r1, r1, #3
   12c96:	0189      	lsls	r1, r1, #6
   12c98:	f041 0101 	orr.w	r1, r1, #1
   12c9c:	f014 fefe 	bl	27a9c <log_0>
		return -EACCES;
   12ca0:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   12ca4:	b004      	add	sp, #16
   12ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12caa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12cac:	2108      	movs	r1, #8
   12cae:	f015 faa0 	bl	281f2 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   12cb2:	89a3      	ldrh	r3, [r4, #12]
   12cb4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   12cb8:	429e      	cmp	r6, r3
   12cba:	d83c      	bhi.n	12d36 <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
   12cbc:	6863      	ldr	r3, [r4, #4]
   12cbe:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   12cc0:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12cc4:	aa02      	add	r2, sp, #8
   12cc6:	a901      	add	r1, sp, #4
   12cc8:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12cca:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12ccc:	f015 fb39 	bl	28342 <nvs_prev_ate>
		if (rc) {
   12cd0:	2800      	cmp	r0, #0
   12cd2:	d1e7      	bne.n	12ca4 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   12cd4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12cd8:	42bb      	cmp	r3, r7
   12cda:	d108      	bne.n	12cee <nvs_read_hist+0x76>
   12cdc:	a902      	add	r1, sp, #8
   12cde:	4620      	mov	r0, r4
   12ce0:	f015 fa91 	bl	28206 <nvs_ate_valid>
   12ce4:	b118      	cbz	r0, 12cee <nvs_read_hist+0x76>
			cnt_his++;
   12ce6:	f10a 0a01 	add.w	sl, sl, #1
   12cea:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   12cee:	6862      	ldr	r2, [r4, #4]
   12cf0:	9b01      	ldr	r3, [sp, #4]
   12cf2:	429a      	cmp	r2, r3
   12cf4:	d018      	beq.n	12d28 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
   12cf6:	45d1      	cmp	r9, sl
   12cf8:	d2e4      	bcs.n	12cc4 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12cfa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12cfe:	b1bb      	cbz	r3, 12d30 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12d00:	45d1      	cmp	r9, sl
   12d02:	d815      	bhi.n	12d30 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
   12d04:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   12d08:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12d0a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   12d0c:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12d10:	bf28      	it	cs
   12d12:	4633      	movcs	r3, r6
   12d14:	4642      	mov	r2, r8
   12d16:	4429      	add	r1, r5
   12d18:	4620      	mov	r0, r4
   12d1a:	f015 f9cd 	bl	280b8 <nvs_flash_rd>
	if (rc) {
   12d1e:	2800      	cmp	r0, #0
   12d20:	d1c0      	bne.n	12ca4 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   12d22:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   12d26:	e7bd      	b.n	12ca4 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12d28:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12d2c:	42bb      	cmp	r3, r7
   12d2e:	d0e4      	beq.n	12cfa <nvs_read_hist+0x82>
		return -ENOENT;
   12d30:	f06f 0001 	mvn.w	r0, #1
   12d34:	e7b6      	b.n	12ca4 <nvs_read_hist+0x2c>
		return -EINVAL;
   12d36:	f06f 0015 	mvn.w	r0, #21
   12d3a:	e7b3      	b.n	12ca4 <nvs_read_hist+0x2c>
   12d3c:	0002ccb8 	.word	0x0002ccb8
   12d40:	0002cd58 	.word	0x0002cd58
   12d44:	0002e24c 	.word	0x0002e24c

00012d48 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   12d48:	4b09      	ldr	r3, [pc, #36]	; (12d70 <get_flash_area_from_id+0x28>)
{
   12d4a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   12d4c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   12d4e:	4b09      	ldr	r3, [pc, #36]	; (12d74 <get_flash_area_from_id+0x2c>)
{
   12d50:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
   12d52:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   12d54:	2300      	movs	r3, #0
   12d56:	429d      	cmp	r5, r3
   12d58:	dc01      	bgt.n	12d5e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   12d5a:	2000      	movs	r0, #0
}
   12d5c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   12d5e:	0119      	lsls	r1, r3, #4
   12d60:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   12d64:	5c61      	ldrb	r1, [r4, r1]
   12d66:	4291      	cmp	r1, r2
   12d68:	d0f8      	beq.n	12d5c <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
   12d6a:	3301      	adds	r3, #1
   12d6c:	e7f3      	b.n	12d56 <get_flash_area_from_id+0xe>
   12d6e:	bf00      	nop
   12d70:	0002cfe4 	.word	0x0002cfe4
   12d74:	20000454 	.word	0x20000454

00012d78 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   12d78:	4b08      	ldr	r3, [pc, #32]	; (12d9c <flash_area_open+0x24>)
   12d7a:	681b      	ldr	r3, [r3, #0]
{
   12d7c:	b510      	push	{r4, lr}
   12d7e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   12d80:	b12b      	cbz	r3, 12d8e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   12d82:	f7ff ffe1 	bl	12d48 <get_flash_area_from_id>
	if (area == NULL) {
   12d86:	b128      	cbz	r0, 12d94 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   12d88:	6020      	str	r0, [r4, #0]
	return 0;
   12d8a:	2000      	movs	r0, #0
}
   12d8c:	bd10      	pop	{r4, pc}
		return -EACCES;
   12d8e:	f06f 000c 	mvn.w	r0, #12
   12d92:	e7fb      	b.n	12d8c <flash_area_open+0x14>
		return -ENOENT;
   12d94:	f06f 0001 	mvn.w	r0, #1
   12d98:	e7f8      	b.n	12d8c <flash_area_open+0x14>
   12d9a:	bf00      	nop
   12d9c:	20000454 	.word	0x20000454

00012da0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   12da0:	b530      	push	{r4, r5, lr}
   12da2:	b089      	sub	sp, #36	; 0x24
   12da4:	460c      	mov	r4, r1
   12da6:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   12da8:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   12daa:	f7ff ffcd 	bl	12d48 <get_flash_area_from_id>
	if (fa == NULL) {
   12dae:	b1b8      	cbz	r0, 12de0 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   12db0:	6843      	ldr	r3, [r0, #4]
   12db2:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   12db4:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   12db6:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   12db8:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   12dba:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   12dbe:	2300      	movs	r3, #0
	cb_data->status = 0;
   12dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   12dc4:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   12dc6:	f015 fb13 	bl	283f0 <device_get_binding>
	if (flash_dev == NULL) {
   12dca:	b160      	cbz	r0, 12de6 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   12dcc:	4907      	ldr	r1, [pc, #28]	; (12dec <flash_area_get_sectors+0x4c>)
   12dce:	aa01      	add	r2, sp, #4
   12dd0:	f018 ff0c 	bl	2bbec <flash_page_foreach>
	if (cb_data->status == 0) {
   12dd4:	9807      	ldr	r0, [sp, #28]
   12dd6:	b908      	cbnz	r0, 12ddc <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   12dd8:	9b05      	ldr	r3, [sp, #20]
   12dda:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   12ddc:	b009      	add	sp, #36	; 0x24
   12dde:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   12de0:	f06f 0015 	mvn.w	r0, #21
   12de4:	e7fa      	b.n	12ddc <flash_area_get_sectors+0x3c>
		return -ENODEV;
   12de6:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   12dea:	e7f7      	b.n	12ddc <flash_area_get_sectors+0x3c>
   12dec:	000283f5 	.word	0x000283f5

00012df0 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   12df0:	4b10      	ldr	r3, [pc, #64]	; (12e34 <settings_save_one+0x44>)
{
   12df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   12df6:	681c      	ldr	r4, [r3, #0]
{
   12df8:	4605      	mov	r5, r0
   12dfa:	460e      	mov	r6, r1
   12dfc:	4617      	mov	r7, r2
	if (!cs) {
   12dfe:	b1ac      	cbz	r4, 12e2c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   12e00:	f04f 32ff 	mov.w	r2, #4294967295
   12e04:	f04f 33ff 	mov.w	r3, #4294967295
   12e08:	480b      	ldr	r0, [pc, #44]	; (12e38 <settings_save_one+0x48>)
   12e0a:	f00e fa6b 	bl	212e4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   12e0e:	6863      	ldr	r3, [r4, #4]
   12e10:	4632      	mov	r2, r6
   12e12:	f8d3 8008 	ldr.w	r8, [r3, #8]
   12e16:	4629      	mov	r1, r5
   12e18:	463b      	mov	r3, r7
   12e1a:	4620      	mov	r0, r4
   12e1c:	47c0      	blx	r8
   12e1e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12e20:	4805      	ldr	r0, [pc, #20]	; (12e38 <settings_save_one+0x48>)
   12e22:	f00e fb5f 	bl	214e4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   12e26:	4620      	mov	r0, r4
   12e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   12e2c:	f06f 0401 	mvn.w	r4, #1
   12e30:	e7f9      	b.n	12e26 <settings_save_one+0x36>
   12e32:	bf00      	nop
   12e34:	200029e4 	.word	0x200029e4
   12e38:	2000081c 	.word	0x2000081c

00012e3c <settings_src_register>:
	parent->next = child;
   12e3c:	2300      	movs	r3, #0
   12e3e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   12e40:	4b04      	ldr	r3, [pc, #16]	; (12e54 <settings_src_register+0x18>)
   12e42:	685a      	ldr	r2, [r3, #4]
   12e44:	b912      	cbnz	r2, 12e4c <settings_src_register+0x10>
	list->head = node;
   12e46:	e9c3 0000 	strd	r0, r0, [r3]
}
   12e4a:	4770      	bx	lr
	parent->next = child;
   12e4c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   12e4e:	6058      	str	r0, [r3, #4]
}
   12e50:	4770      	bx	lr
   12e52:	bf00      	nop
   12e54:	200029dc 	.word	0x200029dc

00012e58 <settings_dst_register>:
	settings_save_dst = cs;
   12e58:	4b01      	ldr	r3, [pc, #4]	; (12e60 <settings_dst_register+0x8>)
   12e5a:	6018      	str	r0, [r3, #0]
}
   12e5c:	4770      	bx	lr
   12e5e:	bf00      	nop
   12e60:	200029e4 	.word	0x200029e4

00012e64 <settings_load_subtree>:
{
   12e64:	b530      	push	{r4, r5, lr}
   12e66:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   12e68:	2300      	movs	r3, #0
{
   12e6a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   12e6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   12e70:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12e72:	f04f 33ff 	mov.w	r3, #4294967295
   12e76:	480e      	ldr	r0, [pc, #56]	; (12eb0 <settings_load_subtree+0x4c>)
   12e78:	f04f 32ff 	mov.w	r2, #4294967295
   12e7c:	f00e fa32 	bl	212e4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12e80:	4b0c      	ldr	r3, [pc, #48]	; (12eb4 <settings_load_subtree+0x50>)
   12e82:	681c      	ldr	r4, [r3, #0]
   12e84:	2c00      	cmp	r4, #0
   12e86:	bf38      	it	cc
   12e88:	2400      	movcc	r4, #0
   12e8a:	b13c      	cbz	r4, 12e9c <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   12e8c:	6863      	ldr	r3, [r4, #4]
   12e8e:	4620      	mov	r0, r4
   12e90:	681b      	ldr	r3, [r3, #0]
   12e92:	a901      	add	r1, sp, #4
   12e94:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12e96:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12e98:	2c00      	cmp	r4, #0
   12e9a:	d1f6      	bne.n	12e8a <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   12e9c:	4628      	mov	r0, r5
   12e9e:	f000 f8f1 	bl	13084 <settings_commit_subtree>
   12ea2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12ea4:	4802      	ldr	r0, [pc, #8]	; (12eb0 <settings_load_subtree+0x4c>)
   12ea6:	f00e fb1d 	bl	214e4 <z_impl_k_mutex_unlock>
}
   12eaa:	4620      	mov	r0, r4
   12eac:	b005      	add	sp, #20
   12eae:	bd30      	pop	{r4, r5, pc}
   12eb0:	2000081c 	.word	0x2000081c
   12eb4:	200029dc 	.word	0x200029dc

00012eb8 <settings_load_subtree_direct>:
{
   12eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   12eba:	e9cd 0101 	strd	r0, r1, [sp, #4]
   12ebe:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   12ec0:	f04f 33ff 	mov.w	r3, #4294967295
   12ec4:	480c      	ldr	r0, [pc, #48]	; (12ef8 <settings_load_subtree_direct+0x40>)
   12ec6:	f04f 32ff 	mov.w	r2, #4294967295
   12eca:	f00e fa0b 	bl	212e4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12ece:	4b0b      	ldr	r3, [pc, #44]	; (12efc <settings_load_subtree_direct+0x44>)
   12ed0:	681c      	ldr	r4, [r3, #0]
   12ed2:	2c00      	cmp	r4, #0
   12ed4:	bf38      	it	cc
   12ed6:	2400      	movcc	r4, #0
   12ed8:	b13c      	cbz	r4, 12eea <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   12eda:	6863      	ldr	r3, [r4, #4]
   12edc:	4620      	mov	r0, r4
   12ede:	681b      	ldr	r3, [r3, #0]
   12ee0:	a901      	add	r1, sp, #4
   12ee2:	4798      	blx	r3
   12ee4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12ee6:	2c00      	cmp	r4, #0
   12ee8:	d1f6      	bne.n	12ed8 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   12eea:	4803      	ldr	r0, [pc, #12]	; (12ef8 <settings_load_subtree_direct+0x40>)
   12eec:	f00e fafa 	bl	214e4 <z_impl_k_mutex_unlock>
}
   12ef0:	2000      	movs	r0, #0
   12ef2:	b004      	add	sp, #16
   12ef4:	bd10      	pop	{r4, pc}
   12ef6:	bf00      	nop
   12ef8:	2000081c 	.word	0x2000081c
   12efc:	200029dc 	.word	0x200029dc

00012f00 <settings_store_init>:
	list->head = NULL;
   12f00:	4b02      	ldr	r3, [pc, #8]	; (12f0c <settings_store_init+0xc>)
   12f02:	2200      	movs	r2, #0
	list->tail = NULL;
   12f04:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   12f08:	4770      	bx	lr
   12f0a:	bf00      	nop
   12f0c:	200029dc 	.word	0x200029dc

00012f10 <settings_init>:
	list->head = NULL;
   12f10:	4b02      	ldr	r3, [pc, #8]	; (12f1c <settings_init+0xc>)
   12f12:	2200      	movs	r2, #0
	list->tail = NULL;
   12f14:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   12f18:	f7ff bff2 	b.w	12f00 <settings_store_init>
   12f1c:	200029e8 	.word	0x200029e8

00012f20 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   12f20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12f24:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   12f26:	460e      	mov	r6, r1
   12f28:	b109      	cbz	r1, 12f2e <settings_parse_and_lookup+0xe>
		*next = NULL;
   12f2a:	2300      	movs	r3, #0
   12f2c:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12f2e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 12fe0 <settings_parse_and_lookup+0xc0>
   12f32:	4c26      	ldr	r4, [pc, #152]	; (12fcc <settings_parse_and_lookup+0xac>)
   12f34:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 12fe4 <settings_parse_and_lookup+0xc4>
   12f38:	2500      	movs	r5, #0
   12f3a:	46c2      	mov	sl, r8
   12f3c:	4544      	cmp	r4, r8
   12f3e:	d90c      	bls.n	12f5a <settings_parse_and_lookup+0x3a>
   12f40:	4923      	ldr	r1, [pc, #140]	; (12fd0 <settings_parse_and_lookup+0xb0>)
   12f42:	4824      	ldr	r0, [pc, #144]	; (12fd4 <settings_parse_and_lookup+0xb4>)
   12f44:	2394      	movs	r3, #148	; 0x94
   12f46:	464a      	mov	r2, r9
   12f48:	f014 fad5 	bl	274f6 <printk>
   12f4c:	4822      	ldr	r0, [pc, #136]	; (12fd8 <settings_parse_and_lookup+0xb8>)
   12f4e:	f014 fad2 	bl	274f6 <printk>
   12f52:	2194      	movs	r1, #148	; 0x94
   12f54:	4648      	mov	r0, r9
   12f56:	f014 fd73 	bl	27a40 <assert_post_action>
   12f5a:	4554      	cmp	r4, sl
   12f5c:	d308      	bcc.n	12f70 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12f5e:	4b1f      	ldr	r3, [pc, #124]	; (12fdc <settings_parse_and_lookup+0xbc>)
   12f60:	681c      	ldr	r4, [r3, #0]
   12f62:	b10c      	cbz	r4, 12f68 <settings_parse_and_lookup+0x48>
   12f64:	3c14      	subs	r4, #20
   12f66:	b9c4      	cbnz	r4, 12f9a <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   12f68:	4628      	mov	r0, r5
   12f6a:	b002      	add	sp, #8
   12f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   12f70:	6821      	ldr	r1, [r4, #0]
   12f72:	aa01      	add	r2, sp, #4
   12f74:	4638      	mov	r0, r7
   12f76:	f015 fa62 	bl	2843e <settings_name_steq>
   12f7a:	b160      	cbz	r0, 12f96 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   12f7c:	b925      	cbnz	r5, 12f88 <settings_parse_and_lookup+0x68>
			if (next) {
   12f7e:	b10e      	cbz	r6, 12f84 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   12f80:	9b01      	ldr	r3, [sp, #4]
   12f82:	6033      	str	r3, [r6, #0]
   12f84:	4625      	mov	r5, r4
   12f86:	e006      	b.n	12f96 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   12f88:	6829      	ldr	r1, [r5, #0]
   12f8a:	6820      	ldr	r0, [r4, #0]
   12f8c:	2200      	movs	r2, #0
   12f8e:	f015 fa56 	bl	2843e <settings_name_steq>
   12f92:	2800      	cmp	r0, #0
   12f94:	d1f3      	bne.n	12f7e <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12f96:	3414      	adds	r4, #20
   12f98:	e7d0      	b.n	12f3c <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   12f9a:	6821      	ldr	r1, [r4, #0]
   12f9c:	aa01      	add	r2, sp, #4
   12f9e:	4638      	mov	r0, r7
   12fa0:	f015 fa4d 	bl	2843e <settings_name_steq>
   12fa4:	b160      	cbz	r0, 12fc0 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   12fa6:	b925      	cbnz	r5, 12fb2 <settings_parse_and_lookup+0x92>
			if (next) {
   12fa8:	b10e      	cbz	r6, 12fae <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   12faa:	9b01      	ldr	r3, [sp, #4]
   12fac:	6033      	str	r3, [r6, #0]
   12fae:	4625      	mov	r5, r4
   12fb0:	e006      	b.n	12fc0 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   12fb2:	6829      	ldr	r1, [r5, #0]
   12fb4:	6820      	ldr	r0, [r4, #0]
   12fb6:	2200      	movs	r2, #0
   12fb8:	f015 fa41 	bl	2843e <settings_name_steq>
   12fbc:	2800      	cmp	r0, #0
   12fbe:	d1f3      	bne.n	12fa8 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12fc0:	f114 0f14 	cmn.w	r4, #20
   12fc4:	d0d0      	beq.n	12f68 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12fc6:	6964      	ldr	r4, [r4, #20]
   12fc8:	e7cb      	b.n	12f62 <settings_parse_and_lookup+0x42>
   12fca:	bf00      	nop
   12fcc:	0002cc40 	.word	0x0002cc40
   12fd0:	0002e3cc 	.word	0x0002e3cc
   12fd4:	0002dcd3 	.word	0x0002dcd3
   12fd8:	0002e3f4 	.word	0x0002e3f4
   12fdc:	200029e8 	.word	0x200029e8
   12fe0:	0002ccb8 	.word	0x0002ccb8
   12fe4:	0002e39a 	.word	0x0002e39a

00012fe8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   12fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12fec:	b085      	sub	sp, #20
   12fee:	4605      	mov	r5, r0
   12ff0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   12ff4:	9003      	str	r0, [sp, #12]
{
   12ff6:	460c      	mov	r4, r1
   12ff8:	4616      	mov	r6, r2
   12ffa:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   12ffc:	f1b8 0f00 	cmp.w	r8, #0
   13000:	d018      	beq.n	13034 <settings_call_set_handler+0x4c>
   13002:	f8d8 1000 	ldr.w	r1, [r8]
   13006:	b181      	cbz	r1, 1302a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   13008:	aa03      	add	r2, sp, #12
   1300a:	f015 fa18 	bl	2843e <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1300e:	b960      	cbnz	r0, 1302a <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   13010:	2000      	movs	r0, #0
   13012:	e007      	b.n	13024 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13014:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13018:	9300      	str	r3, [sp, #0]
   1301a:	9803      	ldr	r0, [sp, #12]
   1301c:	463b      	mov	r3, r7
   1301e:	4632      	mov	r2, r6
   13020:	4621      	mov	r1, r4
   13022:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   13024:	b005      	add	sp, #20
   13026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   1302a:	f8d8 9004 	ldr.w	r9, [r8, #4]
   1302e:	f1b9 0f00 	cmp.w	r9, #0
   13032:	d1ef      	bne.n	13014 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   13034:	a903      	add	r1, sp, #12
   13036:	4628      	mov	r0, r5
   13038:	f7ff ff72 	bl	12f20 <settings_parse_and_lookup>
		if (!ch) {
   1303c:	2800      	cmp	r0, #0
   1303e:	d0e7      	beq.n	13010 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   13040:	f8d0 8008 	ldr.w	r8, [r0, #8]
   13044:	9803      	ldr	r0, [sp, #12]
   13046:	4632      	mov	r2, r6
   13048:	463b      	mov	r3, r7
   1304a:	4621      	mov	r1, r4
   1304c:	47c0      	blx	r8
		if (rc != 0) {
   1304e:	4606      	mov	r6, r0
   13050:	2800      	cmp	r0, #0
   13052:	d0dd      	beq.n	13010 <settings_call_set_handler+0x28>
   13054:	4b08      	ldr	r3, [pc, #32]	; (13078 <settings_call_set_handler+0x90>)
   13056:	4c09      	ldr	r4, [pc, #36]	; (1307c <settings_call_set_handler+0x94>)
   13058:	4628      	mov	r0, r5
   1305a:	1ae4      	subs	r4, r4, r3
   1305c:	08e4      	lsrs	r4, r4, #3
   1305e:	f7fe fcd9 	bl	11a14 <z_log_strdup>
			LOG_ERR("set-value failure. key: %s error(%d)",
   13062:	01a4      	lsls	r4, r4, #6
   13064:	f044 0401 	orr.w	r4, r4, #1
   13068:	4601      	mov	r1, r0
   1306a:	4623      	mov	r3, r4
   1306c:	4804      	ldr	r0, [pc, #16]	; (13080 <settings_call_set_handler+0x98>)
   1306e:	4632      	mov	r2, r6
   13070:	f014 fd35 	bl	27ade <log_2>
   13074:	e7cc      	b.n	13010 <settings_call_set_handler+0x28>
   13076:	bf00      	nop
   13078:	0002ccb8 	.word	0x0002ccb8
   1307c:	0002cdb0 	.word	0x0002cdb0
   13080:	0002e413 	.word	0x0002e413

00013084 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   13084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13088:	4f23      	ldr	r7, [pc, #140]	; (13118 <settings_commit_subtree+0x94>)
   1308a:	4c24      	ldr	r4, [pc, #144]	; (1311c <settings_commit_subtree+0x98>)
   1308c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 13130 <settings_commit_subtree+0xac>
{
   13090:	4606      	mov	r6, r0
	rc = 0;
   13092:	2500      	movs	r5, #0
   13094:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13096:	42bc      	cmp	r4, r7
   13098:	d90c      	bls.n	130b4 <settings_commit_subtree+0x30>
   1309a:	4921      	ldr	r1, [pc, #132]	; (13120 <settings_commit_subtree+0x9c>)
   1309c:	4821      	ldr	r0, [pc, #132]	; (13124 <settings_commit_subtree+0xa0>)
   1309e:	23f4      	movs	r3, #244	; 0xf4
   130a0:	4642      	mov	r2, r8
   130a2:	f014 fa28 	bl	274f6 <printk>
   130a6:	4820      	ldr	r0, [pc, #128]	; (13128 <settings_commit_subtree+0xa4>)
   130a8:	f014 fa25 	bl	274f6 <printk>
   130ac:	21f4      	movs	r1, #244	; 0xf4
   130ae:	4640      	mov	r0, r8
   130b0:	f014 fcc6 	bl	27a40 <assert_post_action>
   130b4:	454c      	cmp	r4, r9
   130b6:	d307      	bcc.n	130c8 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   130b8:	4b1c      	ldr	r3, [pc, #112]	; (1312c <settings_commit_subtree+0xa8>)
   130ba:	681c      	ldr	r4, [r3, #0]
   130bc:	b10c      	cbz	r4, 130c2 <settings_commit_subtree+0x3e>
   130be:	3c14      	subs	r4, #20
   130c0:	b9a4      	cbnz	r4, 130ec <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   130c2:	4628      	mov	r0, r5
   130c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   130c8:	b91e      	cbnz	r6, 130d2 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   130ca:	68e3      	ldr	r3, [r4, #12]
   130cc:	b94b      	cbnz	r3, 130e2 <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   130ce:	3414      	adds	r4, #20
   130d0:	e7e1      	b.n	13096 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   130d2:	6820      	ldr	r0, [r4, #0]
   130d4:	2200      	movs	r2, #0
   130d6:	4631      	mov	r1, r6
   130d8:	f015 f9b1 	bl	2843e <settings_name_steq>
   130dc:	2800      	cmp	r0, #0
   130de:	d1f4      	bne.n	130ca <settings_commit_subtree+0x46>
   130e0:	e7f5      	b.n	130ce <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   130e2:	4798      	blx	r3
				rc = rc2;
   130e4:	2d00      	cmp	r5, #0
   130e6:	bf08      	it	eq
   130e8:	4605      	moveq	r5, r0
   130ea:	e7f0      	b.n	130ce <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   130ec:	b936      	cbnz	r6, 130fc <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   130ee:	68e3      	ldr	r3, [r4, #12]
   130f0:	b963      	cbnz	r3, 1310c <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   130f2:	f114 0f14 	cmn.w	r4, #20
   130f6:	d0e4      	beq.n	130c2 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   130f8:	6964      	ldr	r4, [r4, #20]
   130fa:	e7df      	b.n	130bc <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   130fc:	6820      	ldr	r0, [r4, #0]
   130fe:	2200      	movs	r2, #0
   13100:	4631      	mov	r1, r6
   13102:	f015 f99c 	bl	2843e <settings_name_steq>
   13106:	2800      	cmp	r0, #0
   13108:	d1f1      	bne.n	130ee <settings_commit_subtree+0x6a>
   1310a:	e7f2      	b.n	130f2 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   1310c:	4798      	blx	r3
				rc = rc2;
   1310e:	2d00      	cmp	r5, #0
   13110:	bf08      	it	eq
   13112:	4605      	moveq	r5, r0
   13114:	e7ed      	b.n	130f2 <settings_commit_subtree+0x6e>
   13116:	bf00      	nop
   13118:	0002ccb8 	.word	0x0002ccb8
   1311c:	0002cc40 	.word	0x0002cc40
   13120:	0002e3cc 	.word	0x0002e3cc
   13124:	0002dcd3 	.word	0x0002dcd3
   13128:	0002e3f4 	.word	0x0002e3f4
   1312c:	200029e8 	.word	0x200029e8
   13130:	0002e39a 	.word	0x0002e39a

00013134 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13134:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   13136:	4c06      	ldr	r4, [pc, #24]	; (13150 <settings_subsys_init+0x1c>)
   13138:	7823      	ldrb	r3, [r4, #0]
   1313a:	b93b      	cbnz	r3, 1314c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   1313c:	f7ff fee8 	bl	12f10 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   13140:	f000 f864 	bl	1320c <settings_backend_init>

	if (!err) {
   13144:	b908      	cbnz	r0, 1314a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   13146:	2301      	movs	r3, #1
   13148:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   1314a:	bd10      	pop	{r4, pc}
		return 0;
   1314c:	2000      	movs	r0, #0
   1314e:	e7fc      	b.n	1314a <settings_subsys_init+0x16>
   13150:	20003d6d 	.word	0x20003d6d

00013154 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13158:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   1315a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 13208 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   1315e:	3401      	adds	r4, #1
{
   13160:	b098      	sub	sp, #96	; 0x60
   13162:	4680      	mov	r8, r0
   13164:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   13166:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13168:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   1316c:	1e65      	subs	r5, r4, #1
   1316e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   13170:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   13174:	d045      	beq.n	13202 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13176:	234a      	movs	r3, #74	; 0x4a
   13178:	aa05      	add	r2, sp, #20
   1317a:	4629      	mov	r1, r5
   1317c:	4630      	mov	r0, r6
   1317e:	f015 f930 	bl	283e2 <nvs_read>
   13182:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   13186:	343f      	adds	r4, #63	; 0x3f
   13188:	b2a4      	uxth	r4, r4
   1318a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1318c:	4621      	mov	r1, r4
   1318e:	2301      	movs	r3, #1
   13190:	f10d 020b 	add.w	r2, sp, #11
   13194:	4630      	mov	r0, r6
   13196:	f015 f924 	bl	283e2 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1319a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1319c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1319e:	dc03      	bgt.n	131a8 <settings_nvs_load+0x54>
   131a0:	2800      	cmp	r0, #0
   131a2:	dc03      	bgt.n	131ac <settings_nvs_load+0x58>
{
   131a4:	462c      	mov	r4, r5
   131a6:	e7e1      	b.n	1316c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   131a8:	2800      	cmp	r0, #0
   131aa:	dc16      	bgt.n	131da <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   131ac:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   131b0:	42ab      	cmp	r3, r5
   131b2:	d109      	bne.n	131c8 <settings_nvs_load+0x74>
				cf->last_name_id--;
   131b4:	4642      	mov	r2, r8
   131b6:	1e6b      	subs	r3, r5, #1
   131b8:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   131bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   131c0:	2302      	movs	r3, #2
   131c2:	4630      	mov	r0, r6
   131c4:	f7ff fc76 	bl	12ab4 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   131c8:	4629      	mov	r1, r5
   131ca:	4630      	mov	r0, r6
   131cc:	f015 f905 	bl	283da <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   131d0:	4621      	mov	r1, r4
   131d2:	4630      	mov	r0, r6
   131d4:	f015 f901 	bl	283da <nvs_delete>
			continue;
   131d8:	e7e4      	b.n	131a4 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   131da:	ab18      	add	r3, sp, #96	; 0x60
   131dc:	441f      	add	r7, r3
   131de:	2300      	movs	r3, #0
   131e0:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   131e4:	4652      	mov	r2, sl
   131e6:	f8cd 9000 	str.w	r9, [sp]
   131ea:	ab03      	add	r3, sp, #12
   131ec:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   131ee:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   131f0:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   131f4:	f7ff fef8 	bl	12fe8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   131f8:	2800      	cmp	r0, #0
   131fa:	d0d3      	beq.n	131a4 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   131fc:	b018      	add	sp, #96	; 0x60
   131fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13202:	2000      	movs	r0, #0
	return ret;
   13204:	e7fa      	b.n	131fc <settings_nvs_load+0xa8>
   13206:	bf00      	nop
   13208:	000284b1 	.word	0x000284b1

0001320c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1320c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1320e:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   13210:	4669      	mov	r1, sp
   13212:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   13214:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   13216:	f7ff fdaf 	bl	12d78 <flash_area_open>
	if (rc) {
   1321a:	4604      	mov	r4, r0
   1321c:	2800      	cmp	r0, #0
   1321e:	d136      	bne.n	1328e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   13220:	aa02      	add	r2, sp, #8
   13222:	a901      	add	r1, sp, #4
   13224:	2004      	movs	r0, #4
   13226:	f7ff fdbb 	bl	12da0 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   1322a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   1322e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   13230:	d02d      	beq.n	1328e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   13232:	b138      	cbz	r0, 13244 <settings_backend_init+0x38>
   13234:	340c      	adds	r4, #12
   13236:	d005      	beq.n	13244 <settings_backend_init+0x38>
		k_panic();
   13238:	4040      	eors	r0, r0
   1323a:	f380 8811 	msr	BASEPRI, r0
   1323e:	f04f 0004 	mov.w	r0, #4
   13242:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   13244:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   13246:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   1324a:	d223      	bcs.n	13294 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   1324c:	9a00      	ldr	r2, [sp, #0]
   1324e:	2300      	movs	r3, #0
   13250:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   13252:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   13254:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   13256:	4285      	cmp	r5, r0
   13258:	b29c      	uxth	r4, r3
   1325a:	d303      	bcc.n	13264 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   1325c:	3301      	adds	r3, #1
   1325e:	2b08      	cmp	r3, #8
   13260:	d1f8      	bne.n	13254 <settings_backend_init+0x48>
   13262:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13264:	4d0d      	ldr	r5, [pc, #52]	; (1329c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   13266:	6853      	ldr	r3, [r2, #4]
   13268:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   1326a:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   1326c:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   1326e:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13270:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   13272:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   13274:	f015 f9b3 	bl	285de <settings_nvs_backend_init>
	if (rc) {
   13278:	4604      	mov	r4, r0
   1327a:	b940      	cbnz	r0, 1328e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1327c:	4e08      	ldr	r6, [pc, #32]	; (132a0 <settings_backend_init+0x94>)
   1327e:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   13280:	4628      	mov	r0, r5
   13282:	f7ff fddb 	bl	12e3c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   13286:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13288:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1328a:	f7ff fde5 	bl	12e58 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   1328e:	4620      	mov	r0, r4
   13290:	b004      	add	sp, #16
   13292:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   13294:	f06f 0420 	mvn.w	r4, #32
   13298:	e7f9      	b.n	1328e <settings_backend_init+0x82>
   1329a:	bf00      	nop
   1329c:	200029f0 	.word	0x200029f0
   132a0:	20000458 	.word	0x20000458

000132a4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   132a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132a6:	4605      	mov	r5, r0
	__asm__ volatile(
   132a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   132ac:	f3ef 8611 	mrs	r6, BASEPRI
   132b0:	f383 8811 	msr	BASEPRI, r3
   132b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   132b8:	481e      	ldr	r0, [pc, #120]	; (13334 <pm_state_notify+0x90>)
   132ba:	f00d ffc1 	bl	21240 <z_spin_lock_valid>
   132be:	b968      	cbnz	r0, 132dc <pm_state_notify+0x38>
   132c0:	4a1d      	ldr	r2, [pc, #116]	; (13338 <pm_state_notify+0x94>)
   132c2:	491e      	ldr	r1, [pc, #120]	; (1333c <pm_state_notify+0x98>)
   132c4:	481e      	ldr	r0, [pc, #120]	; (13340 <pm_state_notify+0x9c>)
   132c6:	2381      	movs	r3, #129	; 0x81
   132c8:	f014 f915 	bl	274f6 <printk>
   132cc:	4919      	ldr	r1, [pc, #100]	; (13334 <pm_state_notify+0x90>)
   132ce:	481d      	ldr	r0, [pc, #116]	; (13344 <pm_state_notify+0xa0>)
   132d0:	f014 f911 	bl	274f6 <printk>
   132d4:	4818      	ldr	r0, [pc, #96]	; (13338 <pm_state_notify+0x94>)
   132d6:	2181      	movs	r1, #129	; 0x81
   132d8:	f014 fbb2 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   132dc:	4815      	ldr	r0, [pc, #84]	; (13334 <pm_state_notify+0x90>)
   132de:	f00d ffcd 	bl	2127c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   132e2:	4b19      	ldr	r3, [pc, #100]	; (13348 <pm_state_notify+0xa4>)
   132e4:	681c      	ldr	r4, [r3, #0]
   132e6:	2c00      	cmp	r4, #0
   132e8:	bf38      	it	cc
   132ea:	2400      	movcc	r4, #0
   132ec:	b15c      	cbz	r4, 13306 <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   132ee:	4f17      	ldr	r7, [pc, #92]	; (1334c <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   132f0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   132f4:	2d00      	cmp	r5, #0
   132f6:	bf08      	it	eq
   132f8:	4613      	moveq	r3, r2
		if (callback) {
   132fa:	b10b      	cbz	r3, 13300 <pm_state_notify+0x5c>
			callback(z_power_state.state);
   132fc:	7838      	ldrb	r0, [r7, #0]
   132fe:	4798      	blx	r3
   13300:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13302:	2c00      	cmp	r4, #0
   13304:	d1f4      	bne.n	132f0 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13306:	480b      	ldr	r0, [pc, #44]	; (13334 <pm_state_notify+0x90>)
   13308:	f00d ffa8 	bl	2125c <z_spin_unlock_valid>
   1330c:	b968      	cbnz	r0, 1332a <pm_state_notify+0x86>
   1330e:	4a0a      	ldr	r2, [pc, #40]	; (13338 <pm_state_notify+0x94>)
   13310:	490f      	ldr	r1, [pc, #60]	; (13350 <pm_state_notify+0xac>)
   13312:	480b      	ldr	r0, [pc, #44]	; (13340 <pm_state_notify+0x9c>)
   13314:	23ac      	movs	r3, #172	; 0xac
   13316:	f014 f8ee 	bl	274f6 <printk>
   1331a:	4906      	ldr	r1, [pc, #24]	; (13334 <pm_state_notify+0x90>)
   1331c:	480d      	ldr	r0, [pc, #52]	; (13354 <pm_state_notify+0xb0>)
   1331e:	f014 f8ea 	bl	274f6 <printk>
   13322:	4805      	ldr	r0, [pc, #20]	; (13338 <pm_state_notify+0x94>)
   13324:	21ac      	movs	r1, #172	; 0xac
   13326:	f014 fb8b 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   1332a:	f386 8811 	msr	BASEPRI, r6
   1332e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13334:	20002a30 	.word	0x20002a30
   13338:	0002dd93 	.word	0x0002dd93
   1333c:	0002dde5 	.word	0x0002dde5
   13340:	0002dcd3 	.word	0x0002dcd3
   13344:	0002ddfa 	.word	0x0002ddfa
   13348:	20002a34 	.word	0x20002a34
   1334c:	20002a3c 	.word	0x20002a3c
   13350:	0002ddb9 	.word	0x0002ddb9
   13354:	0002ddd0 	.word	0x0002ddd0

00013358 <pm_system_resume>:

void pm_system_resume(void)
{
   13358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   1335a:	4b0f      	ldr	r3, [pc, #60]	; (13398 <pm_system_resume+0x40>)
   1335c:	681a      	ldr	r2, [r3, #0]
   1335e:	b9ba      	cbnz	r2, 13390 <pm_system_resume+0x38>
		post_ops_done = 1;
   13360:	2201      	movs	r2, #1
   13362:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   13364:	4a0d      	ldr	r2, [pc, #52]	; (1339c <pm_system_resume+0x44>)
   13366:	ca07      	ldmia	r2, {r0, r1, r2}
   13368:	ab01      	add	r3, sp, #4
   1336a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1336e:	4a0c      	ldr	r2, [pc, #48]	; (133a0 <pm_system_resume+0x48>)
   13370:	b14a      	cbz	r2, 13386 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   13372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13376:	f016 fba7 	bl	29ac8 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   1337a:	2000      	movs	r0, #0
	}
}
   1337c:	b005      	add	sp, #20
   1337e:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   13382:	f7ff bf8f 	b.w	132a4 <pm_state_notify>
   13386:	f382 8811 	msr	BASEPRI, r2
   1338a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1338e:	e7f4      	b.n	1337a <pm_system_resume+0x22>
}
   13390:	b005      	add	sp, #20
   13392:	f85d fb04 	ldr.w	pc, [sp], #4
   13396:	bf00      	nop
   13398:	20000468 	.word	0x20000468
   1339c:	20002a3c 	.word	0x20002a3c
   133a0:	00029ac9 	.word	0x00029ac9

000133a4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   133a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   133a6:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   133a8:	466e      	mov	r6, sp
   133aa:	4601      	mov	r1, r0
{
   133ac:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   133ae:	4630      	mov	r0, r6
   133b0:	f015 f931 	bl	28616 <pm_policy_next_state>
   133b4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   133b8:	4c1f      	ldr	r4, [pc, #124]	; (13438 <pm_system_suspend+0x94>)
   133ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   133be:	7820      	ldrb	r0, [r4, #0]
   133c0:	2800      	cmp	r0, #0
   133c2:	d037      	beq.n	13434 <pm_system_suspend+0x90>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   133c4:	4b1d      	ldr	r3, [pc, #116]	; (1343c <pm_system_suspend+0x98>)
   133c6:	2000      	movs	r0, #0
   133c8:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   133ca:	1c6b      	adds	r3, r5, #1
   133cc:	d01d      	beq.n	1340a <pm_system_suspend+0x66>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   133ce:	4291      	cmp	r1, r2
   133d0:	d20c      	bcs.n	133ec <pm_system_suspend+0x48>
   133d2:	491b      	ldr	r1, [pc, #108]	; (13440 <pm_system_suspend+0x9c>)
   133d4:	4a1b      	ldr	r2, [pc, #108]	; (13444 <pm_system_suspend+0xa0>)
   133d6:	481c      	ldr	r0, [pc, #112]	; (13448 <pm_system_suspend+0xa4>)
   133d8:	23cb      	movs	r3, #203	; 0xcb
   133da:	f014 f88c 	bl	274f6 <printk>
   133de:	481b      	ldr	r0, [pc, #108]	; (1344c <pm_system_suspend+0xa8>)
   133e0:	f014 f889 	bl	274f6 <printk>
   133e4:	4817      	ldr	r0, [pc, #92]	; (13444 <pm_system_suspend+0xa0>)
   133e6:	21cb      	movs	r1, #203	; 0xcb
   133e8:	f014 fb2a 	bl	27a40 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   133ec:	68a7      	ldr	r7, [r4, #8]
   133ee:	4818      	ldr	r0, [pc, #96]	; (13450 <pm_system_suspend+0xac>)
   133f0:	4a18      	ldr	r2, [pc, #96]	; (13454 <pm_system_suspend+0xb0>)
   133f2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   133f6:	2100      	movs	r1, #0
   133f8:	2300      	movs	r3, #0
   133fa:	fbe6 0107 	umlal	r0, r1, r6, r7
   133fe:	f7ec fe7f 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13402:	2101      	movs	r1, #1
   13404:	1a28      	subs	r0, r5, r0
   13406:	f010 fcdf 	bl	23dc8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1340a:	f00f f9d9 	bl	227c0 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   1340e:	2001      	movs	r0, #1
   13410:	f7ff ff48 	bl	132a4 <pm_state_notify>
	pm_state_set(z_power_state);
   13414:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   13418:	ab05      	add	r3, sp, #20
   1341a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   1341e:	4a0e      	ldr	r2, [pc, #56]	; (13458 <pm_system_suspend+0xb4>)
   13420:	b11a      	cbz	r2, 1342a <pm_system_suspend+0x86>
		pm_power_state_set(info);
   13422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13426:	f016 fb3c 	bl	29aa2 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   1342a:	f7ff ff95 	bl	13358 <pm_system_resume>
	k_sched_unlock();
   1342e:	f00f fc5b 	bl	22ce8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   13432:	7820      	ldrb	r0, [r4, #0]
}
   13434:	b009      	add	sp, #36	; 0x24
   13436:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13438:	20002a3c 	.word	0x20002a3c
   1343c:	20000468 	.word	0x20000468
   13440:	0002e4ae 	.word	0x0002e4ae
   13444:	0002e438 	.word	0x0002e438
   13448:	0002dcd3 	.word	0x0002dcd3
   1344c:	0002e4ee 	.word	0x0002e4ee
   13450:	000f423f 	.word	0x000f423f
   13454:	000f4240 	.word	0x000f4240
   13458:	00029aa3 	.word	0x00029aa3

0001345c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1345c:	b510      	push	{r4, lr}
   1345e:	4807      	ldr	r0, [pc, #28]	; (1347c <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   13460:	4c07      	ldr	r4, [pc, #28]	; (13480 <uart_console_init+0x24>)
   13462:	f00d fa1b 	bl	2089c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13466:	4b07      	ldr	r3, [pc, #28]	; (13484 <uart_console_init+0x28>)
   13468:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   1346a:	4620      	mov	r0, r4
   1346c:	f001 fc74 	bl	14d58 <__stdout_hook_install>
	__printk_hook_install(console_out);
   13470:	4620      	mov	r0, r4
   13472:	f7fd f939 	bl	106e8 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   13476:	2000      	movs	r0, #0
   13478:	bd10      	pop	{r4, pc}
   1347a:	bf00      	nop
   1347c:	0002db75 	.word	0x0002db75
   13480:	00013489 	.word	0x00013489
   13484:	20002a48 	.word	0x20002a48

00013488 <console_out>:
	if ('\n' == c) {
   13488:	280a      	cmp	r0, #10
{
   1348a:	b538      	push	{r3, r4, r5, lr}
   1348c:	4d07      	ldr	r5, [pc, #28]	; (134ac <console_out+0x24>)
   1348e:	4604      	mov	r4, r0
	if ('\n' == c) {
   13490:	d104      	bne.n	1349c <console_out+0x14>
   13492:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13494:	6883      	ldr	r3, [r0, #8]
   13496:	210d      	movs	r1, #13
   13498:	69db      	ldr	r3, [r3, #28]
   1349a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1349c:	6828      	ldr	r0, [r5, #0]
   1349e:	6883      	ldr	r3, [r0, #8]
   134a0:	b2e1      	uxtb	r1, r4
   134a2:	69db      	ldr	r3, [r3, #28]
   134a4:	4798      	blx	r3
}
   134a6:	4620      	mov	r0, r4
   134a8:	bd38      	pop	{r3, r4, r5, pc}
   134aa:	bf00      	nop
   134ac:	20002a48 	.word	0x20002a48

000134b0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   134b0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   134b2:	4c04      	ldr	r4, [pc, #16]	; (134c4 <rtt_console_init+0x14>)
   134b4:	4620      	mov	r0, r4
   134b6:	f7fd f917 	bl	106e8 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   134ba:	4620      	mov	r0, r4
   134bc:	f001 fc4c 	bl	14d58 <__stdout_hook_install>

	return 0;
}
   134c0:	2000      	movs	r0, #0
   134c2:	bd10      	pop	{r4, pc}
   134c4:	000134c9 	.word	0x000134c9

000134c8 <rtt_console_out>:
{
   134c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   134cc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 13530 <rtt_console_out+0x68>
   134d0:	4e16      	ldr	r6, [pc, #88]	; (1352c <rtt_console_out+0x64>)
	char c = (char)character;
   134d2:	f88d 0007 	strb.w	r0, [sp, #7]
{
   134d6:	4604      	mov	r4, r0
	char c = (char)character;
   134d8:	2503      	movs	r5, #3
   134da:	f04f 33ff 	mov.w	r3, #4294967295
   134de:	f04f 32ff 	mov.w	r2, #4294967295
   134e2:	4640      	mov	r0, r8
   134e4:	f00d fefe 	bl	212e4 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   134e8:	2201      	movs	r2, #1
   134ea:	f10d 0107 	add.w	r1, sp, #7
   134ee:	2000      	movs	r0, #0
   134f0:	f00d f976 	bl	207e0 <SEGGER_RTT_WriteNoLock>
   134f4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   134f6:	4640      	mov	r0, r8
   134f8:	f00d fff4 	bl	214e4 <z_impl_k_mutex_unlock>
		if (cnt) {
   134fc:	b12f      	cbz	r7, 1350a <rtt_console_out+0x42>
			host_present = true;
   134fe:	2301      	movs	r3, #1
   13500:	7033      	strb	r3, [r6, #0]
}
   13502:	4620      	mov	r0, r4
   13504:	b002      	add	sp, #8
   13506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   1350a:	7833      	ldrb	r3, [r6, #0]
   1350c:	2b00      	cmp	r3, #0
   1350e:	d0f8      	beq.n	13502 <rtt_console_out+0x3a>
			if (max_cnt) {
   13510:	3d01      	subs	r5, #1
   13512:	d008      	beq.n	13526 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   13514:	f019 f868 	bl	2c5e8 <k_is_in_isr>
   13518:	2800      	cmp	r0, #0
   1351a:	d1de      	bne.n	134da <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   1351c:	2100      	movs	r1, #0
   1351e:	2042      	movs	r0, #66	; 0x42
   13520:	f010 f912 	bl	23748 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13524:	e7d9      	b.n	134da <rtt_console_out+0x12>
				host_present = false;
   13526:	7035      	strb	r5, [r6, #0]
   13528:	e7eb      	b.n	13502 <rtt_console_out+0x3a>
   1352a:	bf00      	nop
   1352c:	20003d6e 	.word	0x20003d6e
   13530:	20000808 	.word	0x20000808

00013534 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13538:	4c0e      	ldr	r4, [pc, #56]	; (13574 <onoff_start+0x40>)
   1353a:	1b05      	subs	r5, r0, r4
   1353c:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   13540:	250c      	movs	r5, #12
   13542:	435d      	muls	r5, r3
{
   13544:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   13546:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   1354a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1354c:	4420      	add	r0, r4
   1354e:	2140      	movs	r1, #64	; 0x40
   13550:	f015 f866 	bl	28620 <set_starting_state>
	if (err < 0) {
   13554:	1e01      	subs	r1, r0, #0
   13556:	db08      	blt.n	1356a <onoff_start+0x36>
	subdata->cb = cb;
   13558:	4b07      	ldr	r3, [pc, #28]	; (13578 <onoff_start+0x44>)
   1355a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1355c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   13560:	4b06      	ldr	r3, [pc, #24]	; (1357c <onoff_start+0x48>)
   13562:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   13564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   13568:	4718      	bx	r3
		notify(mgr, err);
   1356a:	4638      	mov	r0, r7
   1356c:	4633      	mov	r3, r6
}
   1356e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   13572:	4718      	bx	r3
   13574:	20002a60 	.word	0x20002a60
   13578:	00028683 	.word	0x00028683
   1357c:	0002cffc 	.word	0x0002cffc

00013580 <get_status>:
{
   13580:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13582:	b2cc      	uxtb	r4, r1
   13584:	2c01      	cmp	r4, #1
{
   13586:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13588:	d909      	bls.n	1359e <get_status+0x1e>
   1358a:	4909      	ldr	r1, [pc, #36]	; (135b0 <get_status+0x30>)
   1358c:	4809      	ldr	r0, [pc, #36]	; (135b4 <get_status+0x34>)
   1358e:	4a0a      	ldr	r2, [pc, #40]	; (135b8 <get_status+0x38>)
   13590:	237e      	movs	r3, #126	; 0x7e
   13592:	f013 ffb0 	bl	274f6 <printk>
   13596:	4808      	ldr	r0, [pc, #32]	; (135b8 <get_status+0x38>)
   13598:	217e      	movs	r1, #126	; 0x7e
   1359a:	f014 fa51 	bl	27a40 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1359e:	692b      	ldr	r3, [r5, #16]
   135a0:	210c      	movs	r1, #12
   135a2:	fb04 3401 	mla	r4, r4, r1, r3
   135a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   135a8:	f000 0007 	and.w	r0, r0, #7
   135ac:	bd38      	pop	{r3, r4, r5, pc}
   135ae:	bf00      	nop
   135b0:	0002e556 	.word	0x0002e556
   135b4:	0002dcd3 	.word	0x0002dcd3
   135b8:	0002e519 	.word	0x0002e519

000135bc <stop>:
{
   135bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135be:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   135c0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   135c2:	6907      	ldr	r7, [r0, #16]
{
   135c4:	4605      	mov	r5, r0
   135c6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   135c8:	d90b      	bls.n	135e2 <stop+0x26>
   135ca:	4919      	ldr	r1, [pc, #100]	; (13630 <stop+0x74>)
   135cc:	4819      	ldr	r0, [pc, #100]	; (13634 <stop+0x78>)
   135ce:	4a1a      	ldr	r2, [pc, #104]	; (13638 <stop+0x7c>)
   135d0:	f240 1353 	movw	r3, #339	; 0x153
   135d4:	f013 ff8f 	bl	274f6 <printk>
   135d8:	4817      	ldr	r0, [pc, #92]	; (13638 <stop+0x7c>)
   135da:	f240 1153 	movw	r1, #339	; 0x153
   135de:	f014 fa2f 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   135e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   135e6:	f3ef 8211 	mrs	r2, BASEPRI
   135ea:	f383 8811 	msr	BASEPRI, r3
   135ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   135f2:	230c      	movs	r3, #12
   135f4:	fb03 7104 	mla	r1, r3, r4, r7
   135f8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   135fa:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   135fe:	d001      	beq.n	13604 <stop+0x48>
   13600:	428e      	cmp	r6, r1
   13602:	d111      	bne.n	13628 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13604:	fb03 7304 	mla	r3, r3, r4, r7
   13608:	2101      	movs	r1, #1
   1360a:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   1360c:	2000      	movs	r0, #0
	__asm__ volatile(
   1360e:	f382 8811 	msr	BASEPRI, r2
   13612:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13616:	b930      	cbnz	r0, 13626 <stop+0x6a>
	get_sub_config(dev, type)->stop();
   13618:	6869      	ldr	r1, [r5, #4]
   1361a:	230c      	movs	r3, #12
   1361c:	fb03 1404 	mla	r4, r3, r4, r1
   13620:	6863      	ldr	r3, [r4, #4]
   13622:	4798      	blx	r3
	return 0;
   13624:	2000      	movs	r0, #0
}
   13626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   13628:	f04f 30ff 	mov.w	r0, #4294967295
   1362c:	e7ef      	b.n	1360e <stop+0x52>
   1362e:	bf00      	nop
   13630:	0002e556 	.word	0x0002e556
   13634:	0002dcd3 	.word	0x0002dcd3
   13638:	0002e519 	.word	0x0002e519

0001363c <onoff_stop>:
{
   1363c:	b570      	push	{r4, r5, r6, lr}
   1363e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13640:	4906      	ldr	r1, [pc, #24]	; (1365c <onoff_stop+0x20>)
   13642:	1a41      	subs	r1, r0, r1
{
   13644:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13646:	1149      	asrs	r1, r1, #5
   13648:	4805      	ldr	r0, [pc, #20]	; (13660 <onoff_stop+0x24>)
   1364a:	2240      	movs	r2, #64	; 0x40
   1364c:	f7ff ffb6 	bl	135bc <stop>
	notify(mgr, res);
   13650:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13652:	4601      	mov	r1, r0
	notify(mgr, res);
   13654:	4620      	mov	r0, r4
}
   13656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1365a:	4718      	bx	r3
   1365c:	20002a60 	.word	0x20002a60
   13660:	0002c9ac 	.word	0x0002c9ac

00013664 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13664:	2200      	movs	r2, #0
{
   13666:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13668:	2101      	movs	r1, #1
{
   1366a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1366c:	4610      	mov	r0, r2
   1366e:	f000 fe11 	bl	14294 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   13672:	2000      	movs	r0, #0
   13674:	f000 fddc 	bl	14230 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13678:	480f      	ldr	r0, [pc, #60]	; (136b8 <clk_init+0x54>)
   1367a:	f00c fc9d 	bl	1ffb8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1367e:	4b0f      	ldr	r3, [pc, #60]	; (136bc <clk_init+0x58>)
   13680:	4298      	cmp	r0, r3
   13682:	d115      	bne.n	136b0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13684:	f018 fef0 	bl	2c468 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   13688:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1368a:	490d      	ldr	r1, [pc, #52]	; (136c0 <clk_init+0x5c>)
   1368c:	4630      	mov	r0, r6
   1368e:	f013 ff8d 	bl	275ac <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13692:	2800      	cmp	r0, #0
   13694:	db0b      	blt.n	136ae <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13696:	2501      	movs	r5, #1
   13698:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   1369a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1369c:	4908      	ldr	r1, [pc, #32]	; (136c0 <clk_init+0x5c>)
   1369e:	f104 0020 	add.w	r0, r4, #32
   136a2:	f013 ff83 	bl	275ac <onoff_manager_init>
		if (err < 0) {
   136a6:	2800      	cmp	r0, #0
   136a8:	db01      	blt.n	136ae <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   136aa:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   136ac:	2000      	movs	r0, #0
}
   136ae:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   136b0:	f06f 0004 	mvn.w	r0, #4
   136b4:	e7fb      	b.n	136ae <clk_init+0x4a>
   136b6:	bf00      	nop
   136b8:	000136f9 	.word	0x000136f9
   136bc:	0bad0000 	.word	0x0bad0000
   136c0:	0002d014 	.word	0x0002d014

000136c4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   136c4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   136c6:	230c      	movs	r3, #12
   136c8:	4809      	ldr	r0, [pc, #36]	; (136f0 <clkstarted_handle.constprop.0+0x2c>)
   136ca:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   136cc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   136ce:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   136d0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   136d4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   136d6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   136d8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   136da:	4418      	add	r0, r3
   136dc:	f014 ffbe 	bl	2865c <set_on_state>
	if (callback) {
   136e0:	b12d      	cbz	r5, 136ee <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   136e2:	4632      	mov	r2, r6
   136e4:	462b      	mov	r3, r5
   136e6:	4803      	ldr	r0, [pc, #12]	; (136f4 <clkstarted_handle.constprop.0+0x30>)
}
   136e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   136ec:	4718      	bx	r3
}
   136ee:	bd70      	pop	{r4, r5, r6, pc}
   136f0:	20002a60 	.word	0x20002a60
   136f4:	0002c9ac 	.word	0x0002c9ac

000136f8 <clock_event_handler>:
	switch (event) {
   136f8:	2801      	cmp	r0, #1
{
   136fa:	b508      	push	{r3, lr}
	switch (event) {
   136fc:	d006      	beq.n	1370c <clock_event_handler+0x14>
   136fe:	2803      	cmp	r0, #3
   13700:	d008      	beq.n	13714 <clock_event_handler+0x1c>
   13702:	b9a8      	cbnz	r0, 13730 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13704:	4b10      	ldr	r3, [pc, #64]	; (13748 <clock_event_handler+0x50>)
   13706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13708:	075b      	lsls	r3, r3, #29
   1370a:	d11b      	bne.n	13744 <clock_event_handler+0x4c>
}
   1370c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13710:	f7ff bfd8 	b.w	136c4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   13714:	490d      	ldr	r1, [pc, #52]	; (1374c <clock_event_handler+0x54>)
   13716:	4a0e      	ldr	r2, [pc, #56]	; (13750 <clock_event_handler+0x58>)
   13718:	480e      	ldr	r0, [pc, #56]	; (13754 <clock_event_handler+0x5c>)
   1371a:	f240 2366 	movw	r3, #614	; 0x266
   1371e:	f013 feea 	bl	274f6 <printk>
   13722:	f240 2166 	movw	r1, #614	; 0x266
}
   13726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1372a:	4809      	ldr	r0, [pc, #36]	; (13750 <clock_event_handler+0x58>)
   1372c:	f014 b988 	b.w	27a40 <assert_post_action>
   13730:	4906      	ldr	r1, [pc, #24]	; (1374c <clock_event_handler+0x54>)
   13732:	4a07      	ldr	r2, [pc, #28]	; (13750 <clock_event_handler+0x58>)
   13734:	4807      	ldr	r0, [pc, #28]	; (13754 <clock_event_handler+0x5c>)
   13736:	f240 236a 	movw	r3, #618	; 0x26a
   1373a:	f013 fedc 	bl	274f6 <printk>
   1373e:	f240 216a 	movw	r1, #618	; 0x26a
   13742:	e7f0      	b.n	13726 <clock_event_handler+0x2e>
}
   13744:	bd08      	pop	{r3, pc}
   13746:	bf00      	nop
   13748:	20002a60 	.word	0x20002a60
   1374c:	00032142 	.word	0x00032142
   13750:	0002e519 	.word	0x0002e519
   13754:	0002dcd3 	.word	0x0002dcd3

00013758 <generic_hfclk_start>:
{
   13758:	b508      	push	{r3, lr}
	__asm__ volatile(
   1375a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1375e:	f3ef 8111 	mrs	r1, BASEPRI
   13762:	f383 8811 	msr	BASEPRI, r3
   13766:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1376a:	4a12      	ldr	r2, [pc, #72]	; (137b4 <generic_hfclk_start+0x5c>)
   1376c:	6813      	ldr	r3, [r2, #0]
   1376e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   13772:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   13776:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13778:	d00c      	beq.n	13794 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1377a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1377e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13782:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13786:	f013 0301 	ands.w	r3, r3, #1
   1378a:	d003      	beq.n	13794 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1378c:	480a      	ldr	r0, [pc, #40]	; (137b8 <generic_hfclk_start+0x60>)
   1378e:	f014 ff65 	bl	2865c <set_on_state>
			already_started = true;
   13792:	2301      	movs	r3, #1
	__asm__ volatile(
   13794:	f381 8811 	msr	BASEPRI, r1
   13798:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1379c:	b123      	cbz	r3, 137a8 <generic_hfclk_start+0x50>
}
   1379e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   137a2:	2000      	movs	r0, #0
   137a4:	f7ff bf8e 	b.w	136c4 <clkstarted_handle.constprop.0>
}
   137a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   137ac:	2001      	movs	r0, #1
   137ae:	f00c bbb9 	b.w	1ff24 <nrfx_clock_start>
   137b2:	bf00      	nop
   137b4:	20002ab8 	.word	0x20002ab8
   137b8:	20002aa8 	.word	0x20002aa8

000137bc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   137bc:	4b09      	ldr	r3, [pc, #36]	; (137e4 <generic_hfclk_stop+0x28>)
   137be:	f3bf 8f5b 	dmb	ish
   137c2:	e853 2f00 	ldrex	r2, [r3]
   137c6:	f022 0102 	bic.w	r1, r2, #2
   137ca:	e843 1000 	strex	r0, r1, [r3]
   137ce:	2800      	cmp	r0, #0
   137d0:	d1f7      	bne.n	137c2 <generic_hfclk_stop+0x6>
   137d2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   137d6:	07d3      	lsls	r3, r2, #31
   137d8:	d402      	bmi.n	137e0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   137da:	2001      	movs	r0, #1
   137dc:	f00c bbcc 	b.w	1ff78 <nrfx_clock_stop>
}
   137e0:	4770      	bx	lr
   137e2:	bf00      	nop
   137e4:	20002ab8 	.word	0x20002ab8

000137e8 <api_blocking_start>:
{
   137e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   137ea:	2200      	movs	r2, #0
   137ec:	2301      	movs	r3, #1
   137ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   137f2:	ab04      	add	r3, sp, #16
   137f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   137f8:	4a09      	ldr	r2, [pc, #36]	; (13820 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   137fa:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   137fe:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   13800:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   13804:	f014 ff4f 	bl	286a6 <api_start>
	if (err < 0) {
   13808:	2800      	cmp	r0, #0
   1380a:	db05      	blt.n	13818 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1380c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13810:	2300      	movs	r3, #0
   13812:	4668      	mov	r0, sp
   13814:	f00e f8d6 	bl	219c4 <z_impl_k_sem_take>
}
   13818:	b007      	add	sp, #28
   1381a:	f85d fb04 	ldr.w	pc, [sp], #4
   1381e:	bf00      	nop
   13820:	000286a1 	.word	0x000286a1

00013824 <z_nrf_clock_control_lf_on>:
{
   13824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13828:	4949      	ldr	r1, [pc, #292]	; (13950 <z_nrf_clock_control_lf_on+0x12c>)
   1382a:	f3bf 8f5b 	dmb	ish
   1382e:	4605      	mov	r5, r0
   13830:	2201      	movs	r2, #1
   13832:	e851 3f00 	ldrex	r3, [r1]
   13836:	e841 2000 	strex	r0, r2, [r1]
   1383a:	2800      	cmp	r0, #0
   1383c:	d1f9      	bne.n	13832 <z_nrf_clock_control_lf_on+0xe>
   1383e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   13842:	b9a3      	cbnz	r3, 1386e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   13844:	4943      	ldr	r1, [pc, #268]	; (13954 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   13846:	4844      	ldr	r0, [pc, #272]	; (13958 <z_nrf_clock_control_lf_on+0x134>)
   13848:	604b      	str	r3, [r1, #4]
   1384a:	60cb      	str	r3, [r1, #12]
   1384c:	608a      	str	r2, [r1, #8]
   1384e:	f7fd f991 	bl	10b74 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   13852:	2800      	cmp	r0, #0
   13854:	da0b      	bge.n	1386e <z_nrf_clock_control_lf_on+0x4a>
   13856:	4941      	ldr	r1, [pc, #260]	; (1395c <z_nrf_clock_control_lf_on+0x138>)
   13858:	4841      	ldr	r0, [pc, #260]	; (13960 <z_nrf_clock_control_lf_on+0x13c>)
   1385a:	4a42      	ldr	r2, [pc, #264]	; (13964 <z_nrf_clock_control_lf_on+0x140>)
   1385c:	f240 2326 	movw	r3, #550	; 0x226
   13860:	f013 fe49 	bl	274f6 <printk>
   13864:	483f      	ldr	r0, [pc, #252]	; (13964 <z_nrf_clock_control_lf_on+0x140>)
   13866:	f240 2126 	movw	r1, #550	; 0x226
   1386a:	f014 f8e9 	bl	27a40 <assert_post_action>
	switch (start_mode) {
   1386e:	b3ad      	cbz	r5, 138dc <z_nrf_clock_control_lf_on+0xb8>
   13870:	1e6b      	subs	r3, r5, #1
   13872:	2b01      	cmp	r3, #1
   13874:	d856      	bhi.n	13924 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13876:	2d01      	cmp	r5, #1
   13878:	d107      	bne.n	1388a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1387a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1387e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   13882:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   13886:	2b01      	cmp	r3, #1
   13888:	d028      	beq.n	138dc <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1388a:	f018 fead 	bl	2c5e8 <k_is_in_isr>
   1388e:	4604      	mov	r4, r0
   13890:	b918      	cbnz	r0, 1389a <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
   13892:	4b35      	ldr	r3, [pc, #212]	; (13968 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   13894:	781b      	ldrb	r3, [r3, #0]
   13896:	2b00      	cmp	r3, #0
   13898:	d152      	bne.n	13940 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   1389a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1389e:	f3ef 8611 	mrs	r6, BASEPRI
   138a2:	f383 8811 	msr	BASEPRI, r3
   138a6:	f3bf 8f6f 	isb	sy
   138aa:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   138ac:	4f2f      	ldr	r7, [pc, #188]	; (1396c <z_nrf_clock_control_lf_on+0x148>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   138ae:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13974 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   138b2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 13978 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   138b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   138ba:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   138be:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   138c2:	03d2      	lsls	r2, r2, #15
   138c4:	d50c      	bpl.n	138e0 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   138c6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   138ca:	2b01      	cmp	r3, #1
   138cc:	d001      	beq.n	138d2 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   138ce:	2d01      	cmp	r5, #1
   138d0:	d106      	bne.n	138e0 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   138d2:	b30c      	cbz	r4, 13918 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   138d4:	f386 8811 	msr	BASEPRI, r6
   138d8:	f3bf 8f6f 	isb	sy
}
   138dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   138e0:	b1ac      	cbz	r4, 1390e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   138e2:	4630      	mov	r0, r6
   138e4:	f000 fd7c 	bl	143e0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   138e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   138ec:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   138f0:	2b00      	cmp	r3, #0
   138f2:	d1e0      	bne.n	138b6 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   138f4:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   138f6:	2900      	cmp	r1, #0
   138f8:	d0dd      	beq.n	138b6 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138fa:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   138fc:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   138fe:	2301      	movs	r3, #1
   13900:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   13904:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13908:	f8c9 3000 	str.w	r3, [r9]
}
   1390c:	e7d3      	b.n	138b6 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   1390e:	2100      	movs	r1, #0
   13910:	2021      	movs	r0, #33	; 0x21
   13912:	f00f ff19 	bl	23748 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13916:	e7e7      	b.n	138e8 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   13918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1391c:	2202      	movs	r2, #2
   1391e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13922:	e7db      	b.n	138dc <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   13924:	4912      	ldr	r1, [pc, #72]	; (13970 <z_nrf_clock_control_lf_on+0x14c>)
   13926:	480e      	ldr	r0, [pc, #56]	; (13960 <z_nrf_clock_control_lf_on+0x13c>)
   13928:	4a0e      	ldr	r2, [pc, #56]	; (13964 <z_nrf_clock_control_lf_on+0x140>)
   1392a:	f44f 730e 	mov.w	r3, #568	; 0x238
   1392e:	f013 fde2 	bl	274f6 <printk>
}
   13932:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   13936:	480b      	ldr	r0, [pc, #44]	; (13964 <z_nrf_clock_control_lf_on+0x140>)
   13938:	f44f 710e 	mov.w	r1, #568	; 0x238
   1393c:	f014 b880 	b.w	27a40 <assert_post_action>
    p_reg->INTENCLR = mask;
   13940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13944:	2202      	movs	r2, #2
   13946:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1394a:	4606      	mov	r6, r0
}
   1394c:	e7ae      	b.n	138ac <z_nrf_clock_control_lf_on+0x88>
   1394e:	bf00      	nop
   13950:	20002abc 	.word	0x20002abc
   13954:	20002a50 	.word	0x20002a50
   13958:	20002a80 	.word	0x20002a80
   1395c:	0002e57a 	.word	0x0002e57a
   13960:	0002dcd3 	.word	0x0002dcd3
   13964:	0002e519 	.word	0x0002e519
   13968:	20004a3b 	.word	0x20004a3b
   1396c:	40000104 	.word	0x40000104
   13970:	00032142 	.word	0x00032142
   13974:	e000e100 	.word	0xe000e100
   13978:	40000008 	.word	0x40000008

0001397c <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   1397c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1397e:	4c06      	ldr	r4, [pc, #24]	; (13998 <sys_clock_isr+0x1c>)
   13980:	4906      	ldr	r1, [pc, #24]	; (1399c <sys_clock_isr+0x20>)
   13982:	4807      	ldr	r0, [pc, #28]	; (139a0 <sys_clock_isr+0x24>)
   13984:	4622      	mov	r2, r4
   13986:	2317      	movs	r3, #23
   13988:	f013 fdb5 	bl	274f6 <printk>
   1398c:	4620      	mov	r0, r4
   1398e:	2117      	movs	r1, #23
}
   13990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   13994:	f014 b854 	b.w	27a40 <assert_post_action>
   13998:	0002e5a3 	.word	0x0002e5a3
   1399c:	00032142 	.word	0x00032142
   139a0:	0002dcd3 	.word	0x0002dcd3

000139a4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   139a4:	4a04      	ldr	r2, [pc, #16]	; (139b8 <sys_clock_timeout_handler+0x14>)
   139a6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   139a8:	1ac8      	subs	r0, r1, r3
   139aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   139ae:	4403      	add	r3, r0
   139b0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   139b2:	f010 ba59 	b.w	23e68 <sys_clock_announce>
   139b6:	bf00      	nop
   139b8:	20002ad0 	.word	0x20002ad0

000139bc <set_absolute_alarm>:
{
   139bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139c0:	0086      	lsls	r6, r0, #2
   139c2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   139c6:	f100 0450 	add.w	r4, r0, #80	; 0x50
   139ca:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   139ce:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   139d0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13a50 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   139d4:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   139d8:	b2a4      	uxth	r4, r4
   139da:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   139de:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   139e2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   139e6:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   139ea:	4087      	lsls	r7, r0
   139ec:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   139ee:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   139f2:	eba3 030a 	sub.w	r3, r3, sl
   139f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   139fa:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   139fe:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   13a00:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   13a04:	d102      	bne.n	13a0c <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   13a06:	2013      	movs	r0, #19
   13a08:	f018 fecc 	bl	2c7a4 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   13a0c:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   13a10:	1aab      	subs	r3, r5, r2
   13a12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   13a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   13a1a:	bf88      	it	hi
   13a1c:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a1e:	2300      	movs	r3, #0
   13a20:	6023      	str	r3, [r4, #0]
   13a22:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13a24:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13a28:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13a2c:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   13a30:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   13a34:	459a      	cmp	sl, r3
   13a36:	d006      	beq.n	13a46 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   13a38:	1aeb      	subs	r3, r5, r3
   13a3a:	3b02      	subs	r3, #2
   13a3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   13a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   13a44:	d801      	bhi.n	13a4a <set_absolute_alarm+0x8e>
}
   13a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   13a4a:	462b      	mov	r3, r5
   13a4c:	e7cf      	b.n	139ee <set_absolute_alarm+0x32>
   13a4e:	bf00      	nop
   13a50:	40011000 	.word	0x40011000

00013a54 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   13a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   13a56:	4c15      	ldr	r4, [pc, #84]	; (13aac <rtc_nrf_isr+0x58>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13a58:	4f15      	ldr	r7, [pc, #84]	; (13ab0 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13a5a:	2600      	movs	r6, #0
   13a5c:	4b15      	ldr	r3, [pc, #84]	; (13ab4 <rtc_nrf_isr+0x60>)
   13a5e:	2000      	movs	r0, #0
   13a60:	681d      	ldr	r5, [r3, #0]
   13a62:	469c      	mov	ip, r3
   13a64:	b106      	cbz	r6, 13a68 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   13a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   13a68:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   13a6c:	03d2      	lsls	r2, r2, #15
   13a6e:	d5fa      	bpl.n	13a66 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13a70:	683a      	ldr	r2, [r7, #0]
   13a72:	2a00      	cmp	r2, #0
   13a74:	d0f7      	beq.n	13a66 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a76:	603e      	str	r6, [r7, #0]
   13a78:	683a      	ldr	r2, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   13a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13a7e:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   13a82:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   13a86:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13a8a:	1a72      	subs	r2, r6, r1
   13a8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
   13a90:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   13a94:	bf88      	it	hi
   13a96:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13a98:	2601      	movs	r6, #1
			if (handler) {
   13a9a:	b11d      	cbz	r5, 13aa4 <rtc_nrf_isr+0x50>
				handler(chan, cc_val,
   13a9c:	685a      	ldr	r2, [r3, #4]
   13a9e:	6018      	str	r0, [r3, #0]
   13aa0:	47a8      	blx	r5
   13aa2:	e7db      	b.n	13a5c <rtc_nrf_isr+0x8>
   13aa4:	f8cc 5000 	str.w	r5, [ip]
}
   13aa8:	e7dd      	b.n	13a66 <rtc_nrf_isr+0x12>
   13aaa:	bf00      	nop
   13aac:	40011000 	.word	0x40011000
   13ab0:	40011140 	.word	0x40011140
   13ab4:	20002ac4 	.word	0x20002ac4

00013ab8 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   13ab8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   13aba:	4d10      	ldr	r5, [pc, #64]	; (13afc <sys_clock_driver_init+0x44>)
   13abc:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   13abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   13ac2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   13ac6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   13aca:	4b0d      	ldr	r3, [pc, #52]	; (13b00 <sys_clock_driver_init+0x48>)
   13acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13ad0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13ad4:	2101      	movs	r1, #1
   13ad6:	4622      	mov	r2, r4
   13ad8:	2011      	movs	r0, #17
   13ada:	f000 fbdb 	bl	14294 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   13ade:	2011      	movs	r0, #17
   13ae0:	f000 fba6 	bl	14230 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13ae4:	4a07      	ldr	r2, [pc, #28]	; (13b04 <sys_clock_driver_init+0x4c>)
   13ae6:	2301      	movs	r3, #1
   13ae8:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13aea:	4a07      	ldr	r2, [pc, #28]	; (13b08 <sys_clock_driver_init+0x50>)
   13aec:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   13aee:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   13af0:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   13af2:	f7ff fe97 	bl	13824 <z_nrf_clock_control_lf_on>

	return 0;
}
   13af6:	4620      	mov	r0, r4
   13af8:	bd38      	pop	{r3, r4, r5, pc}
   13afa:	bf00      	nop
   13afc:	40011000 	.word	0x40011000
   13b00:	e000e100 	.word	0xe000e100
   13b04:	40011008 	.word	0x40011008
   13b08:	20002acc 	.word	0x20002acc

00013b0c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13b0c:	4b13      	ldr	r3, [pc, #76]	; (13b5c <sys_clock_set_timeout+0x50>)
   13b0e:	f1b0 3fff 	cmp.w	r0, #4294967295
   13b12:	bf08      	it	eq
   13b14:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13b16:	3801      	subs	r0, #1
   13b18:	2800      	cmp	r0, #0
   13b1a:	dd1c      	ble.n	13b56 <sys_clock_set_timeout+0x4a>
   13b1c:	4298      	cmp	r0, r3
   13b1e:	bfa8      	it	ge
   13b20:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   13b22:	4b0f      	ldr	r3, [pc, #60]	; (13b60 <sys_clock_set_timeout+0x54>)
   13b24:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   13b28:	4b0e      	ldr	r3, [pc, #56]	; (13b64 <sys_clock_set_timeout+0x58>)
   13b2a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   13b2c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   13b2e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   13b32:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   13b36:	bf18      	it	ne
   13b38:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   13b3a:	4a0b      	ldr	r2, [pc, #44]	; (13b68 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13b3c:	3301      	adds	r3, #1
   13b3e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   13b40:	480a      	ldr	r0, [pc, #40]	; (13b6c <sys_clock_set_timeout+0x60>)
   13b42:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   13b44:	2000      	movs	r0, #0
   13b46:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   13b48:	4a04      	ldr	r2, [pc, #16]	; (13b5c <sys_clock_set_timeout+0x50>)
   13b4a:	4293      	cmp	r3, r2
   13b4c:	bf94      	ite	ls
   13b4e:	18c9      	addls	r1, r1, r3
   13b50:	1889      	addhi	r1, r1, r2
   13b52:	f7ff bf33 	b.w	139bc <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13b56:	2000      	movs	r0, #0
   13b58:	e7e3      	b.n	13b22 <sys_clock_set_timeout+0x16>
   13b5a:	bf00      	nop
   13b5c:	007fffff 	.word	0x007fffff
   13b60:	40011000 	.word	0x40011000
   13b64:	20002ad0 	.word	0x20002ad0
   13b68:	20002ac4 	.word	0x20002ac4
   13b6c:	000139a5 	.word	0x000139a5

00013b70 <sys_clock_elapsed>:
   13b70:	4b04      	ldr	r3, [pc, #16]	; (13b84 <sys_clock_elapsed+0x14>)
   13b72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   13b76:	4b04      	ldr	r3, [pc, #16]	; (13b88 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   13b78:	681b      	ldr	r3, [r3, #0]
   13b7a:	1ac0      	subs	r0, r0, r3
}
   13b7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13b80:	4770      	bx	lr
   13b82:	bf00      	nop
   13b84:	40011000 	.word	0x40011000
   13b88:	20002ad0 	.word	0x20002ad0

00013b8c <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   13b8c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13b8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13b92:	f3ef 8511 	mrs	r5, BASEPRI
   13b96:	f383 8811 	msr	BASEPRI, r3
   13b9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13b9e:	481b      	ldr	r0, [pc, #108]	; (13c0c <sys_clock_cycle_get_32+0x80>)
   13ba0:	f00d fb4e 	bl	21240 <z_spin_lock_valid>
   13ba4:	b968      	cbnz	r0, 13bc2 <sys_clock_cycle_get_32+0x36>
   13ba6:	4a1a      	ldr	r2, [pc, #104]	; (13c10 <sys_clock_cycle_get_32+0x84>)
   13ba8:	491a      	ldr	r1, [pc, #104]	; (13c14 <sys_clock_cycle_get_32+0x88>)
   13baa:	481b      	ldr	r0, [pc, #108]	; (13c18 <sys_clock_cycle_get_32+0x8c>)
   13bac:	2381      	movs	r3, #129	; 0x81
   13bae:	f013 fca2 	bl	274f6 <printk>
   13bb2:	4916      	ldr	r1, [pc, #88]	; (13c0c <sys_clock_cycle_get_32+0x80>)
   13bb4:	4819      	ldr	r0, [pc, #100]	; (13c1c <sys_clock_cycle_get_32+0x90>)
   13bb6:	f013 fc9e 	bl	274f6 <printk>
   13bba:	4815      	ldr	r0, [pc, #84]	; (13c10 <sys_clock_cycle_get_32+0x84>)
   13bbc:	2181      	movs	r1, #129	; 0x81
   13bbe:	f013 ff3f 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   13bc2:	4812      	ldr	r0, [pc, #72]	; (13c0c <sys_clock_cycle_get_32+0x80>)
   13bc4:	f00d fb5a 	bl	2127c <z_spin_lock_set_owner>
   13bc8:	4b15      	ldr	r3, [pc, #84]	; (13c20 <sys_clock_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13bca:	4810      	ldr	r0, [pc, #64]	; (13c0c <sys_clock_cycle_get_32+0x80>)
   13bcc:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   13bd0:	4b14      	ldr	r3, [pc, #80]	; (13c24 <sys_clock_cycle_get_32+0x98>)
   13bd2:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   13bd4:	1ae4      	subs	r4, r4, r3
   13bd6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   13bda:	441c      	add	r4, r3
   13bdc:	f00d fb3e 	bl	2125c <z_spin_unlock_valid>
   13be0:	b968      	cbnz	r0, 13bfe <sys_clock_cycle_get_32+0x72>
   13be2:	4a0b      	ldr	r2, [pc, #44]	; (13c10 <sys_clock_cycle_get_32+0x84>)
   13be4:	4910      	ldr	r1, [pc, #64]	; (13c28 <sys_clock_cycle_get_32+0x9c>)
   13be6:	480c      	ldr	r0, [pc, #48]	; (13c18 <sys_clock_cycle_get_32+0x8c>)
   13be8:	23ac      	movs	r3, #172	; 0xac
   13bea:	f013 fc84 	bl	274f6 <printk>
   13bee:	4907      	ldr	r1, [pc, #28]	; (13c0c <sys_clock_cycle_get_32+0x80>)
   13bf0:	480e      	ldr	r0, [pc, #56]	; (13c2c <sys_clock_cycle_get_32+0xa0>)
   13bf2:	f013 fc80 	bl	274f6 <printk>
   13bf6:	4806      	ldr	r0, [pc, #24]	; (13c10 <sys_clock_cycle_get_32+0x84>)
   13bf8:	21ac      	movs	r1, #172	; 0xac
   13bfa:	f013 ff21 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   13bfe:	f385 8811 	msr	BASEPRI, r5
   13c02:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   13c06:	4620      	mov	r0, r4
   13c08:	bd38      	pop	{r3, r4, r5, pc}
   13c0a:	bf00      	nop
   13c0c:	20002ad4 	.word	0x20002ad4
   13c10:	0002dd93 	.word	0x0002dd93
   13c14:	0002dde5 	.word	0x0002dde5
   13c18:	0002dcd3 	.word	0x0002dcd3
   13c1c:	0002ddfa 	.word	0x0002ddfa
   13c20:	40011000 	.word	0x40011000
   13c24:	20002ad0 	.word	0x20002ad0
   13c28:	0002ddb9 	.word	0x0002ddb9
   13c2c:	0002ddd0 	.word	0x0002ddd0

00013c30 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   13c30:	4b03      	ldr	r3, [pc, #12]	; (13c40 <nus_ccc_cfg_changed+0x10>)
   13c32:	689b      	ldr	r3, [r3, #8]
   13c34:	b11b      	cbz	r3, 13c3e <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   13c36:	1e48      	subs	r0, r1, #1
   13c38:	bf18      	it	ne
   13c3a:	2001      	movne	r0, #1
   13c3c:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   13c3e:	4770      	bx	lr
   13c40:	20002ad8 	.word	0x20002ad8

00013c44 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   13c44:	b510      	push	{r4, lr}
   13c46:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   13c48:	4b03      	ldr	r3, [pc, #12]	; (13c58 <on_receive+0x14>)
   13c4a:	681b      	ldr	r3, [r3, #0]
{
   13c4c:	4611      	mov	r1, r2
	if (nus_cb.received) {
   13c4e:	b10b      	cbz	r3, 13c54 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   13c50:	4622      	mov	r2, r4
   13c52:	4798      	blx	r3
}
	return len;
}
   13c54:	4620      	mov	r0, r4
   13c56:	bd10      	pop	{r4, pc}
   13c58:	20002ad8 	.word	0x20002ad8

00013c5c <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   13c5c:	4b02      	ldr	r3, [pc, #8]	; (13c68 <on_sent+0xc>)
   13c5e:	685b      	ldr	r3, [r3, #4]
   13c60:	b103      	cbz	r3, 13c64 <on_sent+0x8>
		nus_cb.sent(conn);
   13c62:	4718      	bx	r3
	}
}
   13c64:	4770      	bx	lr
   13c66:	bf00      	nop
   13c68:	20002ad8 	.word	0x20002ad8

00013c6c <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   13c6c:	b130      	cbz	r0, 13c7c <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   13c6e:	4b04      	ldr	r3, [pc, #16]	; (13c80 <bt_nus_init+0x14>)
   13c70:	6802      	ldr	r2, [r0, #0]
   13c72:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   13c74:	6842      	ldr	r2, [r0, #4]
   13c76:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   13c78:	6882      	ldr	r2, [r0, #8]
   13c7a:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   13c7c:	2000      	movs	r0, #0
   13c7e:	4770      	bx	lr
   13c80:	20002ad8 	.word	0x20002ad8

00013c84 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   13c84:	b570      	push	{r4, r5, r6, lr}
   13c86:	b086      	sub	sp, #24
   13c88:	460e      	mov	r6, r1
   13c8a:	4615      	mov	r5, r2
	struct bt_gatt_notify_params params = {0};
   13c8c:	2100      	movs	r1, #0
{
   13c8e:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {0};
   13c90:	2218      	movs	r2, #24
   13c92:	4668      	mov	r0, sp
   13c94:	f015 feec 	bl	29a70 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   13c98:	490b      	ldr	r1, [pc, #44]	; (13cc8 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   13c9a:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <bt_nus_send+0x48>)
	params.len = len;
   13c9c:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.data = data;
   13ca0:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.func = on_sent;
   13ca4:	9304      	str	r3, [sp, #16]

	if (!conn) {
   13ca6:	b92c      	cbnz	r4, 13cb4 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   13ca8:	4669      	mov	r1, sp
   13caa:	4620      	mov	r0, r4
   13cac:	f007 f886 	bl	1adbc <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   13cb0:	b006      	add	sp, #24
   13cb2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   13cb4:	2201      	movs	r2, #1
   13cb6:	4620      	mov	r0, r4
   13cb8:	f007 fa38 	bl	1b12c <bt_gatt_is_subscribed>
   13cbc:	2800      	cmp	r0, #0
   13cbe:	d1f3      	bne.n	13ca8 <bt_nus_send+0x24>
		return -EINVAL;
   13cc0:	f06f 0015 	mvn.w	r0, #21
   13cc4:	e7f4      	b.n	13cb0 <bt_nus_send+0x2c>
   13cc6:	bf00      	nop
   13cc8:	0002d048 	.word	0x0002d048
   13ccc:	00013c5d 	.word	0x00013c5d

00013cd0 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   13cd0:	4b01      	ldr	r3, [pc, #4]	; (13cd8 <uECC_get_rng+0x8>)
   13cd2:	6818      	ldr	r0, [r3, #0]
   13cd4:	4770      	bx	lr
   13cd6:	bf00      	nop
   13cd8:	20000494 	.word	0x20000494

00013cdc <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   13cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13cde:	2208      	movs	r2, #8
{
   13ce0:	b089      	sub	sp, #36	; 0x24
   13ce2:	460c      	mov	r4, r1
   13ce4:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13ce6:	f014 febc 	bl	28a62 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   13cea:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13cec:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   13cee:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   13cf0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   13cf2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   13cf4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   13cf6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   13cf8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   13cfa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   13cfc:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   13cfe:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13d00:	2308      	movs	r3, #8
   13d02:	466a      	mov	r2, sp
   13d04:	4669      	mov	r1, sp
   13d06:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   13d08:	e9cd 7701 	strd	r7, r7, [sp, #4]
   13d0c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13d0e:	f014 fdaa 	bl	28866 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d12:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13d14:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d16:	466a      	mov	r2, sp
   13d18:	4631      	mov	r1, r6
   13d1a:	4630      	mov	r0, r6
   13d1c:	f014 fda3 	bl	28866 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   13d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13d22:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   13d24:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13d26:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   13d28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13d2a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   13d2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d2e:	4405      	add	r5, r0
	tmp[7] = 0;
   13d30:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13d34:	466a      	mov	r2, sp
   13d36:	2308      	movs	r3, #8
   13d38:	4669      	mov	r1, sp
   13d3a:	4668      	mov	r0, sp
   13d3c:	f014 fd93 	bl	28866 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d40:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13d42:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d44:	2308      	movs	r3, #8
   13d46:	466a      	mov	r2, sp
   13d48:	4630      	mov	r0, r6
   13d4a:	f014 fd8c 	bl	28866 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   13d4e:	6a23      	ldr	r3, [r4, #32]
   13d50:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   13d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13d54:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   13d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13d58:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   13d5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13d5c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   13d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13d60:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d62:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d64:	2308      	movs	r3, #8
   13d66:	466a      	mov	r2, sp
   13d68:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   13d6a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   13d6e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d70:	f014 fd79 	bl	28866 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   13d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13d76:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   13d78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   13d7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   13d7c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   13d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13d80:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   13d82:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   13d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   13d86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   13d88:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   13d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   13d8e:	6a23      	ldr	r3, [r4, #32]
   13d90:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d92:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13d94:	2308      	movs	r3, #8
   13d96:	466a      	mov	r2, sp
   13d98:	4630      	mov	r0, r6
   13d9a:	f014 fd64 	bl	28866 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   13d9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13da0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   13da2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13da4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   13da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13da8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   13daa:	6a23      	ldr	r3, [r4, #32]
   13dac:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   13dae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13db0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13db2:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13db4:	2308      	movs	r3, #8
   13db6:	466a      	mov	r2, sp
   13db8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   13dba:	e9cd 7704 	strd	r7, r7, [sp, #16]
   13dbe:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13dc0:	f014 fe85 	bl	28ace <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   13dc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13dc6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   13dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13dca:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   13dcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13dce:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   13dd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13dd2:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   13dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13dd6:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   13dd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13dda:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13ddc:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13dde:	2308      	movs	r3, #8
   13de0:	466a      	mov	r2, sp
   13de2:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   13de4:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13de8:	f014 fe71 	bl	28ace <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   13dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13dee:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   13df0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13df2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   13df4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13df6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   13df8:	6a23      	ldr	r3, [r4, #32]
   13dfa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   13dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13dfe:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   13e00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   13e02:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   13e06:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13e08:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13e0a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13e0c:	2308      	movs	r3, #8
   13e0e:	466a      	mov	r2, sp
   13e10:	4630      	mov	r0, r6
   13e12:	f014 fe5c 	bl	28ace <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   13e16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13e18:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   13e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   13e1c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   13e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13e22:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   13e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13e26:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   13e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   13e2a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   13e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13e30:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13e32:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13e34:	2308      	movs	r3, #8
   13e36:	466a      	mov	r2, sp
   13e38:	4630      	mov	r0, r6
   13e3a:	f014 fe48 	bl	28ace <uECC_vli_sub>

	if (carry < 0) {
   13e3e:	1a2d      	subs	r5, r5, r0
   13e40:	d410      	bmi.n	13e64 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   13e42:	4c0d      	ldr	r4, [pc, #52]	; (13e78 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   13e44:	b935      	cbnz	r5, 13e54 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   13e46:	2208      	movs	r2, #8
   13e48:	4631      	mov	r1, r6
   13e4a:	4620      	mov	r0, r4
   13e4c:	f014 fe15 	bl	28a7a <uECC_vli_cmp_unsafe>
		while (carry || 
   13e50:	2801      	cmp	r0, #1
   13e52:	d00f      	beq.n	13e74 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13e54:	2308      	movs	r3, #8
   13e56:	4622      	mov	r2, r4
   13e58:	4631      	mov	r1, r6
   13e5a:	4630      	mov	r0, r6
   13e5c:	f014 fe37 	bl	28ace <uECC_vli_sub>
   13e60:	1a2d      	subs	r5, r5, r0
   13e62:	e7ef      	b.n	13e44 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13e64:	4a04      	ldr	r2, [pc, #16]	; (13e78 <vli_mmod_fast_secp256r1+0x19c>)
   13e66:	2308      	movs	r3, #8
   13e68:	4631      	mov	r1, r6
   13e6a:	4630      	mov	r0, r6
   13e6c:	f014 fcfb 	bl	28866 <uECC_vli_add>
		while (carry < 0);
   13e70:	182d      	adds	r5, r5, r0
   13e72:	d4f8      	bmi.n	13e66 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   13e74:	b009      	add	sp, #36	; 0x24
   13e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e78:	0002d09c 	.word	0x0002d09c

00013e7c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   13e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13e7e:	4e26      	ldr	r6, [pc, #152]	; (13f18 <tc_aes128_set_encrypt_key+0x9c>)
{
   13e80:	4607      	mov	r7, r0
   13e82:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13e84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13e86:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13e88:	ad01      	add	r5, sp, #4
   13e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e90:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13e94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   13e98:	4638      	mov	r0, r7
   13e9a:	2f00      	cmp	r7, #0
   13e9c:	d038      	beq.n	13f10 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   13e9e:	2c00      	cmp	r4, #0
   13ea0:	d038      	beq.n	13f14 <tc_aes128_set_encrypt_key+0x98>
   13ea2:	1f38      	subs	r0, r7, #4
   13ea4:	4621      	mov	r1, r4
   13ea6:	4602      	mov	r2, r0
   13ea8:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13eaa:	784b      	ldrb	r3, [r1, #1]
   13eac:	780d      	ldrb	r5, [r1, #0]
   13eae:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13eb0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13eb4:	78cd      	ldrb	r5, [r1, #3]
   13eb6:	432b      	orrs	r3, r5
   13eb8:	788d      	ldrb	r5, [r1, #2]
   13eba:	3104      	adds	r1, #4
   13ebc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13ec0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13ec2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   13ec6:	d1f0      	bne.n	13eaa <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13ec8:	4c14      	ldr	r4, [pc, #80]	; (13f1c <tc_aes128_set_encrypt_key+0xa0>)
   13eca:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13ecc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13ece:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13ed0:	d116      	bne.n	13f00 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13ed2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13ed6:	5ca5      	ldrb	r5, [r4, r2]
   13ed8:	0e1a      	lsrs	r2, r3, #24
   13eda:	5ca2      	ldrb	r2, [r4, r2]
   13edc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13ee0:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13ee4:	b2db      	uxtb	r3, r3
   13ee6:	5d65      	ldrb	r5, [r4, r5]
   13ee8:	5ce3      	ldrb	r3, [r4, r3]
   13eea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13eee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13ef2:	ad0c      	add	r5, sp, #48	; 0x30
   13ef4:	f021 0303 	bic.w	r3, r1, #3
   13ef8:	442b      	add	r3, r5
   13efa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13efe:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   13f00:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13f04:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13f06:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13f08:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13f0a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13f0c:	d1de      	bne.n	13ecc <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   13f0e:	2001      	movs	r0, #1
}
   13f10:	b00d      	add	sp, #52	; 0x34
   13f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13f14:	4620      	mov	r0, r4
   13f16:	e7fb      	b.n	13f10 <tc_aes128_set_encrypt_key+0x94>
   13f18:	0002ce44 	.word	0x0002ce44
   13f1c:	0002e626 	.word	0x0002e626

00013f20 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   13f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f24:	4615      	mov	r5, r2
   13f26:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13f28:	4606      	mov	r6, r0
   13f2a:	2800      	cmp	r0, #0
   13f2c:	d058      	beq.n	13fe0 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   13f2e:	2900      	cmp	r1, #0
   13f30:	d059      	beq.n	13fe6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   13f32:	2a00      	cmp	r2, #0
   13f34:	d059      	beq.n	13fea <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13f36:	2310      	movs	r3, #16
   13f38:	460a      	mov	r2, r1
   13f3a:	4668      	mov	r0, sp
   13f3c:	4619      	mov	r1, r3
   13f3e:	f014 fbce 	bl	286de <_copy>
	add_round_key(state, s->words);
   13f42:	4629      	mov	r1, r5
   13f44:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   13f46:	4c2a      	ldr	r4, [pc, #168]	; (13ff0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   13f48:	f015 fad3 	bl	294f2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   13f4c:	f105 0710 	add.w	r7, r5, #16
   13f50:	46a1      	mov	r9, r4
   13f52:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   13f54:	46e8      	mov	r8, sp
{
   13f56:	466a      	mov	r2, sp
   13f58:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   13f5a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13f5c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   13f5e:	5c61      	ldrb	r1, [r4, r1]
   13f60:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13f64:	d1f9      	bne.n	13f5a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   13f66:	4668      	mov	r0, sp
   13f68:	f015 fb08 	bl	2957c <shift_rows>
	mult_row_column(t, s);
   13f6c:	4669      	mov	r1, sp
   13f6e:	a804      	add	r0, sp, #16
   13f70:	f015 fb3d 	bl	295ee <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   13f74:	a901      	add	r1, sp, #4
   13f76:	a805      	add	r0, sp, #20
   13f78:	f015 fb39 	bl	295ee <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   13f7c:	a902      	add	r1, sp, #8
   13f7e:	a806      	add	r0, sp, #24
   13f80:	f015 fb35 	bl	295ee <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   13f84:	a903      	add	r1, sp, #12
   13f86:	a807      	add	r0, sp, #28
   13f88:	f015 fb31 	bl	295ee <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   13f8c:	2310      	movs	r3, #16
   13f8e:	4619      	mov	r1, r3
   13f90:	eb0d 0203 	add.w	r2, sp, r3
   13f94:	4668      	mov	r0, sp
   13f96:	f014 fba2 	bl	286de <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   13f9a:	4639      	mov	r1, r7
   13f9c:	4668      	mov	r0, sp
   13f9e:	3710      	adds	r7, #16
   13fa0:	f015 faa7 	bl	294f2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   13fa4:	42af      	cmp	r7, r5
   13fa6:	d1d5      	bne.n	13f54 <tc_aes_encrypt+0x34>
   13fa8:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   13faa:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   13fae:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   13fb0:	f819 3003 	ldrb.w	r3, [r9, r3]
   13fb4:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13fb8:	d1f7      	bne.n	13faa <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   13fba:	4668      	mov	r0, sp
   13fbc:	f015 fade 	bl	2957c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   13fc0:	4629      	mov	r1, r5
   13fc2:	4668      	mov	r0, sp
   13fc4:	f015 fa95 	bl	294f2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   13fc8:	2310      	movs	r3, #16
   13fca:	4619      	mov	r1, r3
   13fcc:	466a      	mov	r2, sp
   13fce:	4630      	mov	r0, r6
   13fd0:	f014 fb85 	bl	286de <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   13fd4:	4668      	mov	r0, sp
   13fd6:	2210      	movs	r2, #16
   13fd8:	4621      	mov	r1, r4
   13fda:	f014 fb8d 	bl	286f8 <_set>

	return TC_CRYPTO_SUCCESS;
   13fde:	2001      	movs	r0, #1
}
   13fe0:	b009      	add	sp, #36	; 0x24
   13fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   13fe6:	4608      	mov	r0, r1
   13fe8:	e7fa      	b.n	13fe0 <tc_aes_encrypt+0xc0>
   13fea:	4610      	mov	r0, r2
   13fec:	e7f8      	b.n	13fe0 <tc_aes_encrypt+0xc0>
   13fee:	bf00      	nop
   13ff0:	0002e626 	.word	0x0002e626

00013ff4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   13ff4:	4801      	ldr	r0, [pc, #4]	; (13ffc <nrf_cc3xx_platform_abort_init+0x8>)
   13ff6:	f010 bde1 	b.w	24bbc <nrf_cc3xx_platform_set_abort>
   13ffa:	bf00      	nop
   13ffc:	0002d148 	.word	0x0002d148

00014000 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14000:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14002:	b1d0      	cbz	r0, 1403a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14004:	6843      	ldr	r3, [r0, #4]
   14006:	2b04      	cmp	r3, #4
   14008:	d111      	bne.n	1402e <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1400a:	2200      	movs	r2, #0
   1400c:	6803      	ldr	r3, [r0, #0]
   1400e:	f3bf 8f5b 	dmb	ish
   14012:	e853 1f00 	ldrex	r1, [r3]
   14016:	2901      	cmp	r1, #1
   14018:	d103      	bne.n	14022 <mutex_unlock_platform+0x22>
   1401a:	e843 2000 	strex	r0, r2, [r3]
   1401e:	2800      	cmp	r0, #0
   14020:	d1f7      	bne.n	14012 <mutex_unlock_platform+0x12>
   14022:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14026:	4807      	ldr	r0, [pc, #28]	; (14044 <mutex_unlock_platform+0x44>)
   14028:	bf08      	it	eq
   1402a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   1402c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1402e:	b13b      	cbz	r3, 14040 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14030:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14032:	f00d fa57 	bl	214e4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14036:	2000      	movs	r0, #0
   14038:	e7f8      	b.n	1402c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1403a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1403e:	e7f5      	b.n	1402c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14040:	4801      	ldr	r0, [pc, #4]	; (14048 <mutex_unlock_platform+0x48>)
   14042:	e7f3      	b.n	1402c <mutex_unlock_platform+0x2c>
   14044:	ffff8fe9 	.word	0xffff8fe9
   14048:	ffff8fea 	.word	0xffff8fea

0001404c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1404c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1404e:	4604      	mov	r4, r0
   14050:	b918      	cbnz	r0, 1405a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   14052:	4b0d      	ldr	r3, [pc, #52]	; (14088 <mutex_free_platform+0x3c>)
   14054:	480d      	ldr	r0, [pc, #52]	; (1408c <mutex_free_platform+0x40>)
   14056:	685b      	ldr	r3, [r3, #4]
   14058:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1405a:	6861      	ldr	r1, [r4, #4]
   1405c:	2908      	cmp	r1, #8
   1405e:	d00d      	beq.n	1407c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14060:	f031 0304 	bics.w	r3, r1, #4
   14064:	d00a      	beq.n	1407c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14066:	f011 0102 	ands.w	r1, r1, #2
   1406a:	d008      	beq.n	1407e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1406c:	4808      	ldr	r0, [pc, #32]	; (14090 <mutex_free_platform+0x44>)
   1406e:	4621      	mov	r1, r4
   14070:	f00c ff40 	bl	20ef4 <k_mem_slab_free>
        mutex->mutex = NULL;
   14074:	2300      	movs	r3, #0
   14076:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14078:	2300      	movs	r3, #0
   1407a:	6063      	str	r3, [r4, #4]
}
   1407c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1407e:	6820      	ldr	r0, [r4, #0]
   14080:	2214      	movs	r2, #20
   14082:	f015 fcf5 	bl	29a70 <memset>
   14086:	e7f7      	b.n	14078 <mutex_free_platform+0x2c>
   14088:	200005cc 	.word	0x200005cc
   1408c:	0002e726 	.word	0x0002e726
   14090:	20002ae4 	.word	0x20002ae4

00014094 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14094:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14096:	4604      	mov	r4, r0
   14098:	b918      	cbnz	r0, 140a2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1409a:	4b16      	ldr	r3, [pc, #88]	; (140f4 <mutex_init_platform+0x60>)
   1409c:	4816      	ldr	r0, [pc, #88]	; (140f8 <mutex_init_platform+0x64>)
   1409e:	685b      	ldr	r3, [r3, #4]
   140a0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   140a2:	6863      	ldr	r3, [r4, #4]
   140a4:	2b04      	cmp	r3, #4
   140a6:	d023      	beq.n	140f0 <mutex_init_platform+0x5c>
   140a8:	2b08      	cmp	r3, #8
   140aa:	d021      	beq.n	140f0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   140ac:	b9cb      	cbnz	r3, 140e2 <mutex_init_platform+0x4e>
   140ae:	6823      	ldr	r3, [r4, #0]
   140b0:	b9bb      	cbnz	r3, 140e2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   140b2:	4812      	ldr	r0, [pc, #72]	; (140fc <mutex_init_platform+0x68>)
   140b4:	f04f 32ff 	mov.w	r2, #4294967295
   140b8:	f04f 33ff 	mov.w	r3, #4294967295
   140bc:	4621      	mov	r1, r4
   140be:	f00c fead 	bl	20e1c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   140c2:	b908      	cbnz	r0, 140c8 <mutex_init_platform+0x34>
   140c4:	6823      	ldr	r3, [r4, #0]
   140c6:	b91b      	cbnz	r3, 140d0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   140c8:	4b0a      	ldr	r3, [pc, #40]	; (140f4 <mutex_init_platform+0x60>)
   140ca:	480d      	ldr	r0, [pc, #52]	; (14100 <mutex_init_platform+0x6c>)
   140cc:	685b      	ldr	r3, [r3, #4]
   140ce:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   140d0:	6820      	ldr	r0, [r4, #0]
   140d2:	2214      	movs	r2, #20
   140d4:	2100      	movs	r1, #0
   140d6:	f015 fccb 	bl	29a70 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   140da:	6863      	ldr	r3, [r4, #4]
   140dc:	f043 0302 	orr.w	r3, r3, #2
   140e0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   140e2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   140e4:	f018 fa94 	bl	2c610 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   140e8:	6863      	ldr	r3, [r4, #4]
   140ea:	f043 0301 	orr.w	r3, r3, #1
   140ee:	6063      	str	r3, [r4, #4]
}
   140f0:	bd10      	pop	{r4, pc}
   140f2:	bf00      	nop
   140f4:	200005cc 	.word	0x200005cc
   140f8:	0002e726 	.word	0x0002e726
   140fc:	20002ae4 	.word	0x20002ae4
   14100:	0002e74c 	.word	0x0002e74c

00014104 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14104:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   14106:	b308      	cbz	r0, 1414c <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   14108:	6843      	ldr	r3, [r0, #4]
   1410a:	2b04      	cmp	r3, #4
   1410c:	d110      	bne.n	14130 <mutex_lock_platform+0x2c>
   1410e:	2201      	movs	r2, #1
   14110:	6803      	ldr	r3, [r0, #0]
   14112:	f3bf 8f5b 	dmb	ish
   14116:	e853 1f00 	ldrex	r1, [r3]
   1411a:	2900      	cmp	r1, #0
   1411c:	d103      	bne.n	14126 <mutex_lock_platform+0x22>
   1411e:	e843 2000 	strex	r0, r2, [r3]
   14122:	2800      	cmp	r0, #0
   14124:	d1f7      	bne.n	14116 <mutex_lock_platform+0x12>
   14126:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1412a:	d10b      	bne.n	14144 <mutex_lock_platform+0x40>
   1412c:	2000      	movs	r0, #0
}
   1412e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14130:	b153      	cbz	r3, 14148 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14132:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14134:	f04f 32ff 	mov.w	r2, #4294967295
   14138:	f04f 33ff 	mov.w	r3, #4294967295
   1413c:	f00d f8d2 	bl	212e4 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14140:	2800      	cmp	r0, #0
   14142:	d0f3      	beq.n	1412c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14144:	4803      	ldr	r0, [pc, #12]	; (14154 <mutex_lock_platform+0x50>)
   14146:	e7f2      	b.n	1412e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14148:	4803      	ldr	r0, [pc, #12]	; (14158 <mutex_lock_platform+0x54>)
   1414a:	e7f0      	b.n	1412e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1414c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14150:	e7ed      	b.n	1412e <mutex_lock_platform+0x2a>
   14152:	bf00      	nop
   14154:	ffff8fe9 	.word	0xffff8fe9
   14158:	ffff8fea 	.word	0xffff8fea

0001415c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1415c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1415e:	4906      	ldr	r1, [pc, #24]	; (14178 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14160:	4806      	ldr	r0, [pc, #24]	; (1417c <nrf_cc3xx_platform_mutex_init+0x20>)
   14162:	2340      	movs	r3, #64	; 0x40
   14164:	2214      	movs	r2, #20
   14166:	f018 fa23 	bl	2c5b0 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1416e:	4904      	ldr	r1, [pc, #16]	; (14180 <nrf_cc3xx_platform_mutex_init+0x24>)
   14170:	4804      	ldr	r0, [pc, #16]	; (14184 <nrf_cc3xx_platform_mutex_init+0x28>)
   14172:	f010 bddb 	b.w	24d2c <nrf_cc3xx_platform_set_mutexes>
   14176:	bf00      	nop
   14178:	20002b04 	.word	0x20002b04
   1417c:	20002ae4 	.word	0x20002ae4
   14180:	0002d160 	.word	0x0002d160
   14184:	0002d150 	.word	0x0002d150

00014188 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14188:	4a09      	ldr	r2, [pc, #36]	; (141b0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1418a:	490a      	ldr	r1, [pc, #40]	; (141b4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1418c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1418e:	6809      	ldr	r1, [r1, #0]
   14190:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14192:	4909      	ldr	r1, [pc, #36]	; (141b8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14194:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14196:	684b      	ldr	r3, [r1, #4]
   14198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1419c:	604b      	str	r3, [r1, #4]
   1419e:	2300      	movs	r3, #0
   141a0:	f383 8811 	msr	BASEPRI, r3
   141a4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   141a8:	6893      	ldr	r3, [r2, #8]
}
   141aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   141ac:	4770      	bx	lr
   141ae:	bf00      	nop
   141b0:	200033dc 	.word	0x200033dc
   141b4:	0002d73c 	.word	0x0002d73c
   141b8:	e000ed00 	.word	0xe000ed00

000141bc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   141bc:	4912      	ldr	r1, [pc, #72]	; (14208 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   141be:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   141c0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   141c4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   141c6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   141ca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   141ce:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   141d0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   141d4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   141d8:	4f0c      	ldr	r7, [pc, #48]	; (1420c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   141da:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   141de:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   141e0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   141e2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   141e4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   141e6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   141e8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   141ea:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   141ee:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   141f0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   141f2:	f000 fc7b 	bl	14aec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   141f6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   141fa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   141fe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14202:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14206:	4770      	bx	lr
    ldr r1, =_kernel
   14208:	200033dc 	.word	0x200033dc
    ldr v4, =_SCS_ICSR
   1420c:	e000ed04 	.word	0xe000ed04

00014210 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   14210:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14214:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14216:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1421a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1421e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14220:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14224:	2902      	cmp	r1, #2
    beq _oops
   14226:	d0ff      	beq.n	14228 <_oops>

00014228 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14228:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1422a:	f015 fb26 	bl	2987a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1422e:	bd01      	pop	{r0, pc}

00014230 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14230:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   14232:	2b00      	cmp	r3, #0
   14234:	db08      	blt.n	14248 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14236:	2201      	movs	r2, #1
   14238:	f000 001f 	and.w	r0, r0, #31
   1423c:	fa02 f000 	lsl.w	r0, r2, r0
   14240:	095b      	lsrs	r3, r3, #5
   14242:	4a02      	ldr	r2, [pc, #8]	; (1424c <arch_irq_enable+0x1c>)
   14244:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   14248:	4770      	bx	lr
   1424a:	bf00      	nop
   1424c:	e000e100 	.word	0xe000e100

00014250 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14250:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   14252:	2b00      	cmp	r3, #0
   14254:	db0d      	blt.n	14272 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14256:	2201      	movs	r2, #1
   14258:	095b      	lsrs	r3, r3, #5
   1425a:	f000 001f 	and.w	r0, r0, #31
   1425e:	fa02 f000 	lsl.w	r0, r2, r0
   14262:	3320      	adds	r3, #32
   14264:	4a03      	ldr	r2, [pc, #12]	; (14274 <arch_irq_disable+0x24>)
   14266:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1426a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1426e:	f3bf 8f6f 	isb	sy
}
   14272:	4770      	bx	lr
   14274:	e000e100 	.word	0xe000e100

00014278 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14278:	4b05      	ldr	r3, [pc, #20]	; (14290 <arch_irq_is_enabled+0x18>)
   1427a:	0942      	lsrs	r2, r0, #5
   1427c:	f000 001f 	and.w	r0, r0, #31
   14280:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14284:	2301      	movs	r3, #1
   14286:	fa03 f000 	lsl.w	r0, r3, r0
}
   1428a:	4010      	ands	r0, r2
   1428c:	4770      	bx	lr
   1428e:	bf00      	nop
   14290:	e000e100 	.word	0xe000e100

00014294 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14294:	07d3      	lsls	r3, r2, #31
{
   14296:	b570      	push	{r4, r5, r6, lr}
   14298:	4605      	mov	r5, r0
   1429a:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1429c:	d425      	bmi.n	142ea <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1429e:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   142a0:	2c07      	cmp	r4, #7
   142a2:	d90f      	bls.n	142c4 <z_arm_irq_priority_set+0x30>
   142a4:	4a12      	ldr	r2, [pc, #72]	; (142f0 <z_arm_irq_priority_set+0x5c>)
   142a6:	4913      	ldr	r1, [pc, #76]	; (142f4 <z_arm_irq_priority_set+0x60>)
   142a8:	4813      	ldr	r0, [pc, #76]	; (142f8 <z_arm_irq_priority_set+0x64>)
   142aa:	2358      	movs	r3, #88	; 0x58
   142ac:	f013 f923 	bl	274f6 <printk>
   142b0:	4812      	ldr	r0, [pc, #72]	; (142fc <z_arm_irq_priority_set+0x68>)
   142b2:	4631      	mov	r1, r6
   142b4:	2306      	movs	r3, #6
   142b6:	462a      	mov	r2, r5
   142b8:	f013 f91d 	bl	274f6 <printk>
   142bc:	480c      	ldr	r0, [pc, #48]	; (142f0 <z_arm_irq_priority_set+0x5c>)
   142be:	2158      	movs	r1, #88	; 0x58
   142c0:	f013 fbbe 	bl	27a40 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   142c4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   142c6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   142c8:	bfac      	ite	ge
   142ca:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   142ce:	4b0c      	ldrlt	r3, [pc, #48]	; (14300 <z_arm_irq_priority_set+0x6c>)
   142d0:	ea4f 1444 	mov.w	r4, r4, lsl #5
   142d4:	bfb8      	it	lt
   142d6:	f005 050f 	andlt.w	r5, r5, #15
   142da:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   142dc:	bfaa      	itet	ge
   142de:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   142e2:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   142e4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   142e8:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   142ea:	2400      	movs	r4, #0
   142ec:	e7ea      	b.n	142c4 <z_arm_irq_priority_set+0x30>
   142ee:	bf00      	nop
   142f0:	0002e779 	.word	0x0002e779
   142f4:	0002e7af 	.word	0x0002e7af
   142f8:	0002dcd3 	.word	0x0002dcd3
   142fc:	0002e7ca 	.word	0x0002e7ca
   14300:	e000ed14 	.word	0xe000ed14

00014304 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14304:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14306:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14308:	4b04      	ldr	r3, [pc, #16]	; (1431c <_arch_isr_direct_pm+0x18>)
   1430a:	6a18      	ldr	r0, [r3, #32]
   1430c:	b118      	cbz	r0, 14316 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1430e:	2200      	movs	r2, #0
   14310:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   14312:	f018 f976 	bl	2c602 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14316:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14318:	bd08      	pop	{r3, pc}
   1431a:	bf00      	nop
   1431c:	200033dc 	.word	0x200033dc

00014320 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14320:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14324:	9b00      	ldr	r3, [sp, #0]
   14326:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1432a:	490a      	ldr	r1, [pc, #40]	; (14354 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1432c:	9b01      	ldr	r3, [sp, #4]
   1432e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14332:	9b02      	ldr	r3, [sp, #8]
   14334:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14338:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1433c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14340:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14344:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14348:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1434a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1434c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1434e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14350:	4770      	bx	lr
   14352:	bf00      	nop
   14354:	000275d3 	.word	0x000275d3

00014358 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14358:	4a0b      	ldr	r2, [pc, #44]	; (14388 <z_check_thread_stack_fail+0x30>)
{
   1435a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1435c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1435e:	b190      	cbz	r0, 14386 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14360:	f113 0f16 	cmn.w	r3, #22
   14364:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14366:	d005      	beq.n	14374 <z_check_thread_stack_fail+0x1c>
   14368:	f1a0 0220 	sub.w	r2, r0, #32
   1436c:	429a      	cmp	r2, r3
   1436e:	d806      	bhi.n	1437e <z_check_thread_stack_fail+0x26>
   14370:	4283      	cmp	r3, r0
   14372:	d204      	bcs.n	1437e <z_check_thread_stack_fail+0x26>
   14374:	4281      	cmp	r1, r0
   14376:	bf2c      	ite	cs
   14378:	2100      	movcs	r1, #0
   1437a:	2101      	movcc	r1, #1
   1437c:	e000      	b.n	14380 <z_check_thread_stack_fail+0x28>
   1437e:	2100      	movs	r1, #0
   14380:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   14382:	bf08      	it	eq
   14384:	2000      	moveq	r0, #0
}
   14386:	4770      	bx	lr
   14388:	200033dc 	.word	0x200033dc

0001438c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1438c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1438e:	4b09      	ldr	r3, [pc, #36]	; (143b4 <arch_switch_to_main_thread+0x28>)
   14390:	6098      	str	r0, [r3, #8]
{
   14392:	460d      	mov	r5, r1
   14394:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14396:	f000 fba9 	bl	14aec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1439a:	4620      	mov	r0, r4
   1439c:	f385 8809 	msr	PSP, r5
   143a0:	2100      	movs	r1, #0
   143a2:	b663      	cpsie	if
   143a4:	f381 8811 	msr	BASEPRI, r1
   143a8:	f3bf 8f6f 	isb	sy
   143ac:	2200      	movs	r2, #0
   143ae:	2300      	movs	r3, #0
   143b0:	f013 f90f 	bl	275d2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   143b4:	200033dc 	.word	0x200033dc

000143b8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   143b8:	4901      	ldr	r1, [pc, #4]	; (143c0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   143ba:	2210      	movs	r2, #16
	str	r2, [r1]
   143bc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   143be:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   143c0:	e000ed10 	.word	0xe000ed10

000143c4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   143c4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   143c6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   143c8:	f380 8811 	msr	BASEPRI, r0
	isb
   143cc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   143d0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   143d4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   143d6:	b662      	cpsie	i
	isb
   143d8:	f3bf 8f6f 	isb	sy

	bx	lr
   143dc:	4770      	bx	lr
   143de:	bf00      	nop

000143e0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   143e0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   143e2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   143e4:	f381 8811 	msr	BASEPRI, r1

	wfe
   143e8:	bf20      	wfe

	msr	BASEPRI, r0
   143ea:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   143ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   143f0:	4770      	bx	lr
   143f2:	bf00      	nop

000143f4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   143f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   143f6:	4606      	mov	r6, r0

	if (esf != NULL) {
   143f8:	460c      	mov	r4, r1
   143fa:	b301      	cbz	r1, 1443e <z_arm_fatal_error+0x4a>
   143fc:	4b13      	ldr	r3, [pc, #76]	; (1444c <z_arm_fatal_error+0x58>)
   143fe:	4d14      	ldr	r5, [pc, #80]	; (14450 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14400:	4814      	ldr	r0, [pc, #80]	; (14454 <z_arm_fatal_error+0x60>)
   14402:	1aed      	subs	r5, r5, r3
   14404:	08ed      	lsrs	r5, r5, #3
   14406:	01ad      	lsls	r5, r5, #6
   14408:	f045 0501 	orr.w	r5, r5, #1
   1440c:	f8ad 5000 	strh.w	r5, [sp]
   14410:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   14414:	6809      	ldr	r1, [r1, #0]
   14416:	f013 fb7b 	bl	27b10 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1441a:	f8ad 5000 	strh.w	r5, [sp]
   1441e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14422:	68e1      	ldr	r1, [r4, #12]
   14424:	480c      	ldr	r0, [pc, #48]	; (14458 <z_arm_fatal_error+0x64>)
   14426:	f013 fb73 	bl	27b10 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1442a:	69e1      	ldr	r1, [r4, #28]
   1442c:	480b      	ldr	r0, [pc, #44]	; (1445c <z_arm_fatal_error+0x68>)
   1442e:	462a      	mov	r2, r5
   14430:	f013 fb41 	bl	27ab6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14434:	69a1      	ldr	r1, [r4, #24]
   14436:	480a      	ldr	r0, [pc, #40]	; (14460 <z_arm_fatal_error+0x6c>)
   14438:	462a      	mov	r2, r5
   1443a:	f013 fb3c 	bl	27ab6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1443e:	4621      	mov	r1, r4
   14440:	4630      	mov	r0, r6
}
   14442:	b002      	add	sp, #8
   14444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   14448:	f00c ba5a 	b.w	20900 <z_fatal_error>
   1444c:	0002ccb8 	.word	0x0002ccb8
   14450:	0002cd80 	.word	0x0002cd80
   14454:	0002e80a 	.word	0x0002e80a
   14458:	0002e839 	.word	0x0002e839
   1445c:	0002e868 	.word	0x0002e868
   14460:	0002e877 	.word	0x0002e877

00014464 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14464:	bf30      	wfi
    b z_SysNmiOnReset
   14466:	f7ff bffd 	b.w	14464 <z_SysNmiOnReset>
   1446a:	bf00      	nop

0001446c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1446c:	4a0b      	ldr	r2, [pc, #44]	; (1449c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1446e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14470:	4b0b      	ldr	r3, [pc, #44]	; (144a0 <z_arm_prep_c+0x34>)
   14472:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14476:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14478:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1447c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14480:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14484:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1448c:	f00c faae 	bl	209ec <z_bss_zero>
	z_data_copy();
   14490:	f00f fac6 	bl	23a20 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14494:	f000 fb00 	bl	14a98 <z_arm_interrupt_init>
	z_cstart();
   14498:	f00c facc 	bl	20a34 <z_cstart>
   1449c:	00000000 	.word	0x00000000
   144a0:	e000ed00 	.word	0xe000ed00

000144a4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   144a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   144a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   144a8:	4a0b      	ldr	r2, [pc, #44]	; (144d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   144aa:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   144ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   144ae:	bf1e      	ittt	ne
	movne	r1, #0
   144b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   144b2:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   144b4:	f018 f8a5 	blne	2c602 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   144b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   144ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   144be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   144c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   144c6:	4905      	ldr	r1, [pc, #20]	; (144dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   144c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   144ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   144cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   144ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   144d2:	4903      	ldr	r1, [pc, #12]	; (144e0 <_isr_wrapper+0x3c>)
	bx r1
   144d4:	4708      	bx	r1
   144d6:	0000      	.short	0x0000
	ldr r2, =_kernel
   144d8:	200033dc 	.word	0x200033dc
	ldr r1, =_sw_isr_table
   144dc:	0002ca84 	.word	0x0002ca84
	ldr r1, =z_arm_int_exit
   144e0:	000149f9 	.word	0x000149f9

000144e4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   144e4:	2000      	movs	r0, #0
    msr CONTROL, r0
   144e6:	f380 8814 	msr	CONTROL, r0
    isb
   144ea:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   144ee:	f018 f9ff 	bl	2c8f0 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   144f2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   144f4:	490d      	ldr	r1, [pc, #52]	; (1452c <__start+0x48>)
    str r0, [r1]
   144f6:	6008      	str	r0, [r1, #0]
    dsb
   144f8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   144fc:	480c      	ldr	r0, [pc, #48]	; (14530 <__start+0x4c>)
    msr msp, r0
   144fe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14502:	f000 fa97 	bl	14a34 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14506:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14508:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1450c:	4809      	ldr	r0, [pc, #36]	; (14534 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1450e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   14512:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14514:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14518:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1451c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1451e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14520:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14524:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14528:	f7ff ffa0 	bl	1446c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1452c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14530:	20007700 	.word	0x20007700
    ldr r0, =z_interrupt_stacks
   14534:	20007880 	.word	0x20007880

00014538 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14538:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1453c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14540:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14542:	4672      	mov	r2, lr
	bl z_arm_fault
   14544:	f000 f96a 	bl	1481c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14548:	bd01      	pop	{r0, pc}
   1454a:	bf00      	nop

0001454c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14550:	4b3f      	ldr	r3, [pc, #252]	; (14650 <mem_manage_fault+0x104>)
   14552:	4c40      	ldr	r4, [pc, #256]	; (14654 <mem_manage_fault+0x108>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14554:	4d40      	ldr	r5, [pc, #256]	; (14658 <mem_manage_fault+0x10c>)
   14556:	1ae4      	subs	r4, r4, r3
   14558:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1455a:	01a4      	lsls	r4, r4, #6
   1455c:	f044 0901 	orr.w	r9, r4, #1
{
   14560:	4607      	mov	r7, r0
   14562:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14564:	483d      	ldr	r0, [pc, #244]	; (1465c <mem_manage_fault+0x110>)
   14566:	4649      	mov	r1, r9
{
   14568:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1456a:	f013 fa97 	bl	27a9c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1456e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14570:	06d3      	lsls	r3, r2, #27
   14572:	d503      	bpl.n	1457c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14574:	483a      	ldr	r0, [pc, #232]	; (14660 <mem_manage_fault+0x114>)
   14576:	4649      	mov	r1, r9
   14578:	f013 fa90 	bl	27a9c <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1457c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1457e:	0718      	lsls	r0, r3, #28
   14580:	d504      	bpl.n	1458c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   14582:	4838      	ldr	r0, [pc, #224]	; (14664 <mem_manage_fault+0x118>)
   14584:	f044 0101 	orr.w	r1, r4, #1
   14588:	f013 fa88 	bl	27a9c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1458c:	4d32      	ldr	r5, [pc, #200]	; (14658 <mem_manage_fault+0x10c>)
   1458e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14590:	0799      	lsls	r1, r3, #30
   14592:	d424      	bmi.n	145de <mem_manage_fault+0x92>
	uint32_t mmfar = -EINVAL;
   14594:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14598:	4d2f      	ldr	r5, [pc, #188]	; (14658 <mem_manage_fault+0x10c>)
   1459a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1459c:	07d3      	lsls	r3, r2, #31
   1459e:	d504      	bpl.n	145aa <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   145a0:	4831      	ldr	r0, [pc, #196]	; (14668 <mem_manage_fault+0x11c>)
   145a2:	f044 0101 	orr.w	r1, r4, #1
   145a6:	f013 fa79 	bl	27a9c <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   145aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   145ac:	069d      	lsls	r5, r3, #26
   145ae:	d504      	bpl.n	145ba <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   145b0:	482e      	ldr	r0, [pc, #184]	; (1466c <mem_manage_fault+0x120>)
   145b2:	f044 0101 	orr.w	r1, r4, #1
   145b6:	f013 fa71 	bl	27a9c <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   145ba:	4d27      	ldr	r5, [pc, #156]	; (14658 <mem_manage_fault+0x10c>)
   145bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   145be:	06d8      	lsls	r0, r3, #27
   145c0:	d425      	bmi.n	1460e <mem_manage_fault+0xc2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   145c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   145c4:	0799      	lsls	r1, r3, #30
   145c6:	d422      	bmi.n	1460e <mem_manage_fault+0xc2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   145c8:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   145ca:	4a23      	ldr	r2, [pc, #140]	; (14658 <mem_manage_fault+0x10c>)
   145cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   145ce:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   145d2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   145d4:	2300      	movs	r3, #0
   145d6:	7033      	strb	r3, [r6, #0]

	return reason;
}
   145d8:	4620      	mov	r0, r4
   145da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   145de:	f044 0a01 	orr.w	sl, r4, #1
   145e2:	4823      	ldr	r0, [pc, #140]	; (14670 <mem_manage_fault+0x124>)
   145e4:	4651      	mov	r1, sl
   145e6:	f013 fa59 	bl	27a9c <log_0>
		uint32_t temp = SCB->MMFAR;
   145ea:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   145ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   145f0:	061a      	lsls	r2, r3, #24
   145f2:	d5cf      	bpl.n	14594 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   145f4:	481f      	ldr	r0, [pc, #124]	; (14674 <mem_manage_fault+0x128>)
   145f6:	4652      	mov	r2, sl
   145f8:	4649      	mov	r1, r9
   145fa:	f013 fa5c 	bl	27ab6 <log_1>
			if (from_hard_fault != 0) {
   145fe:	f1b8 0f00 	cmp.w	r8, #0
   14602:	d0c9      	beq.n	14598 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14604:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1460a:	62ab      	str	r3, [r5, #40]	; 0x28
   1460c:	e7c4      	b.n	14598 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1460e:	686b      	ldr	r3, [r5, #4]
   14610:	051a      	lsls	r2, r3, #20
   14612:	d5d9      	bpl.n	145c8 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14614:	4639      	mov	r1, r7
   14616:	4648      	mov	r0, r9
   14618:	f7ff fe9e 	bl	14358 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1461c:	4604      	mov	r4, r0
   1461e:	b118      	cbz	r0, 14628 <mem_manage_fault+0xdc>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14620:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   14624:	2402      	movs	r4, #2
   14626:	e7d0      	b.n	145ca <mem_manage_fault+0x7e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   14628:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1462a:	06db      	lsls	r3, r3, #27
   1462c:	d5cc      	bpl.n	145c8 <mem_manage_fault+0x7c>
   1462e:	4a12      	ldr	r2, [pc, #72]	; (14678 <mem_manage_fault+0x12c>)
   14630:	4912      	ldr	r1, [pc, #72]	; (1467c <mem_manage_fault+0x130>)
   14632:	4813      	ldr	r0, [pc, #76]	; (14680 <mem_manage_fault+0x134>)
   14634:	f240 1349 	movw	r3, #329	; 0x149
   14638:	f012 ff5d 	bl	274f6 <printk>
   1463c:	4811      	ldr	r0, [pc, #68]	; (14684 <mem_manage_fault+0x138>)
   1463e:	f012 ff5a 	bl	274f6 <printk>
   14642:	480d      	ldr	r0, [pc, #52]	; (14678 <mem_manage_fault+0x12c>)
   14644:	f240 1149 	movw	r1, #329	; 0x149
   14648:	f013 f9fa 	bl	27a40 <assert_post_action>
   1464c:	e7bd      	b.n	145ca <mem_manage_fault+0x7e>
   1464e:	bf00      	nop
   14650:	0002ccb8 	.word	0x0002ccb8
   14654:	0002cd80 	.word	0x0002cd80
   14658:	e000ed00 	.word	0xe000ed00
   1465c:	0002e8a5 	.word	0x0002e8a5
   14660:	0002e8bb 	.word	0x0002e8bb
   14664:	0002e8ee 	.word	0x0002e8ee
   14668:	0002e92f 	.word	0x0002e92f
   1466c:	0002e94e 	.word	0x0002e94e
   14670:	0002e901 	.word	0x0002e901
   14674:	0002e919 	.word	0x0002e919
   14678:	0002e97d 	.word	0x0002e97d
   1467c:	0002e9b7 	.word	0x0002e9b7
   14680:	0002dcd3 	.word	0x0002dcd3
   14684:	0002ea01 	.word	0x0002ea01

00014688 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14688:	b570      	push	{r4, r5, r6, lr}
   1468a:	4b23      	ldr	r3, [pc, #140]	; (14718 <usage_fault.isra.0+0x90>)
   1468c:	4c23      	ldr	r4, [pc, #140]	; (1471c <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1468e:	4d24      	ldr	r5, [pc, #144]	; (14720 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14690:	4824      	ldr	r0, [pc, #144]	; (14724 <usage_fault.isra.0+0x9c>)
   14692:	1ae4      	subs	r4, r4, r3
   14694:	08e4      	lsrs	r4, r4, #3
   14696:	01a4      	lsls	r4, r4, #6
   14698:	f044 0601 	orr.w	r6, r4, #1
   1469c:	4631      	mov	r1, r6
   1469e:	f013 f9fd 	bl	27a9c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   146a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   146a4:	0193      	lsls	r3, r2, #6
   146a6:	d503      	bpl.n	146b0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   146a8:	481f      	ldr	r0, [pc, #124]	; (14728 <usage_fault.isra.0+0xa0>)
   146aa:	4631      	mov	r1, r6
   146ac:	f013 f9f6 	bl	27a9c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   146b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   146b2:	01dd      	lsls	r5, r3, #7
   146b4:	d504      	bpl.n	146c0 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   146b6:	481d      	ldr	r0, [pc, #116]	; (1472c <usage_fault.isra.0+0xa4>)
   146b8:	f044 0101 	orr.w	r1, r4, #1
   146bc:	f013 f9ee 	bl	27a9c <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   146c0:	4d17      	ldr	r5, [pc, #92]	; (14720 <usage_fault.isra.0+0x98>)
   146c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   146c4:	0310      	lsls	r0, r2, #12
   146c6:	d504      	bpl.n	146d2 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   146c8:	4819      	ldr	r0, [pc, #100]	; (14730 <usage_fault.isra.0+0xa8>)
   146ca:	f044 0101 	orr.w	r1, r4, #1
   146ce:	f013 f9e5 	bl	27a9c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   146d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   146d4:	0359      	lsls	r1, r3, #13
   146d6:	d504      	bpl.n	146e2 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   146d8:	4816      	ldr	r0, [pc, #88]	; (14734 <usage_fault.isra.0+0xac>)
   146da:	f044 0101 	orr.w	r1, r4, #1
   146de:	f013 f9dd 	bl	27a9c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   146e2:	4d0f      	ldr	r5, [pc, #60]	; (14720 <usage_fault.isra.0+0x98>)
   146e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   146e6:	0392      	lsls	r2, r2, #14
   146e8:	d504      	bpl.n	146f4 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   146ea:	4813      	ldr	r0, [pc, #76]	; (14738 <usage_fault.isra.0+0xb0>)
   146ec:	f044 0101 	orr.w	r1, r4, #1
   146f0:	f013 f9d4 	bl	27a9c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   146f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   146f6:	03db      	lsls	r3, r3, #15
   146f8:	d504      	bpl.n	14704 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   146fa:	4810      	ldr	r0, [pc, #64]	; (1473c <usage_fault.isra.0+0xb4>)
   146fc:	f044 0101 	orr.w	r1, r4, #1
   14700:	f013 f9cc 	bl	27a9c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14704:	4a06      	ldr	r2, [pc, #24]	; (14720 <usage_fault.isra.0+0x98>)
   14706:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14708:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1470c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14710:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   14712:	2000      	movs	r0, #0
   14714:	bd70      	pop	{r4, r5, r6, pc}
   14716:	bf00      	nop
   14718:	0002ccb8 	.word	0x0002ccb8
   1471c:	0002cd80 	.word	0x0002cd80
   14720:	e000ed00 	.word	0xe000ed00
   14724:	0002ea24 	.word	0x0002ea24
   14728:	0002ea3c 	.word	0x0002ea3c
   1472c:	0002ea4f 	.word	0x0002ea4f
   14730:	0002ea69 	.word	0x0002ea69
   14734:	0002ea87 	.word	0x0002ea87
   14738:	0002eaac 	.word	0x0002eaac
   1473c:	0002eac6 	.word	0x0002eac6

00014740 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14744:	4b2a      	ldr	r3, [pc, #168]	; (147f0 <bus_fault.isra.0+0xb0>)
   14746:	4c2b      	ldr	r4, [pc, #172]	; (147f4 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14748:	4d2b      	ldr	r5, [pc, #172]	; (147f8 <bus_fault.isra.0+0xb8>)
   1474a:	1ae4      	subs	r4, r4, r3
   1474c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   1474e:	01a4      	lsls	r4, r4, #6
   14750:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14754:	4607      	mov	r7, r0
   14756:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14758:	4828      	ldr	r0, [pc, #160]	; (147fc <bus_fault.isra.0+0xbc>)
   1475a:	4641      	mov	r1, r8
   1475c:	f013 f99e 	bl	27a9c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14760:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14762:	04d1      	lsls	r1, r2, #19
   14764:	d503      	bpl.n	1476e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   14766:	4826      	ldr	r0, [pc, #152]	; (14800 <bus_fault.isra.0+0xc0>)
   14768:	4641      	mov	r1, r8
   1476a:	f013 f997 	bl	27a9c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1476e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14770:	051a      	lsls	r2, r3, #20
   14772:	d504      	bpl.n	1477e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14774:	4823      	ldr	r0, [pc, #140]	; (14804 <bus_fault.isra.0+0xc4>)
   14776:	f044 0101 	orr.w	r1, r4, #1
   1477a:	f013 f98f 	bl	27a9c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1477e:	4d1e      	ldr	r5, [pc, #120]	; (147f8 <bus_fault.isra.0+0xb8>)
   14780:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14782:	059b      	lsls	r3, r3, #22
   14784:	d512      	bpl.n	147ac <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   14786:	f044 0801 	orr.w	r8, r4, #1
   1478a:	481f      	ldr	r0, [pc, #124]	; (14808 <bus_fault.isra.0+0xc8>)
   1478c:	4641      	mov	r1, r8
   1478e:	f013 f985 	bl	27a9c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14792:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14794:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14796:	0418      	lsls	r0, r3, #16
   14798:	d508      	bpl.n	147ac <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1479a:	481c      	ldr	r0, [pc, #112]	; (1480c <bus_fault.isra.0+0xcc>)
   1479c:	4642      	mov	r2, r8
   1479e:	f013 f98a 	bl	27ab6 <log_1>
			if (from_hard_fault != 0) {
   147a2:	b11f      	cbz	r7, 147ac <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   147a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   147aa:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   147ac:	4d12      	ldr	r5, [pc, #72]	; (147f8 <bus_fault.isra.0+0xb8>)
   147ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147b0:	0559      	lsls	r1, r3, #21
   147b2:	d504      	bpl.n	147be <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   147b4:	4816      	ldr	r0, [pc, #88]	; (14810 <bus_fault.isra.0+0xd0>)
   147b6:	f044 0101 	orr.w	r1, r4, #1
   147ba:	f013 f96f 	bl	27a9c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   147be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147c0:	05da      	lsls	r2, r3, #23
   147c2:	d50d      	bpl.n	147e0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   147c4:	4813      	ldr	r0, [pc, #76]	; (14814 <bus_fault.isra.0+0xd4>)
   147c6:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   147ca:	f013 f967 	bl	27a9c <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   147ce:	4a0a      	ldr	r2, [pc, #40]	; (147f8 <bus_fault.isra.0+0xb8>)
   147d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   147d2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   147d4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   147d8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   147da:	7030      	strb	r0, [r6, #0]
}
   147dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   147e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147e2:	049b      	lsls	r3, r3, #18
   147e4:	d5f3      	bpl.n	147ce <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   147e6:	480c      	ldr	r0, [pc, #48]	; (14818 <bus_fault.isra.0+0xd8>)
   147e8:	f044 0101 	orr.w	r1, r4, #1
   147ec:	e7ed      	b.n	147ca <bus_fault.isra.0+0x8a>
   147ee:	bf00      	nop
   147f0:	0002ccb8 	.word	0x0002ccb8
   147f4:	0002cd80 	.word	0x0002cd80
   147f8:	e000ed00 	.word	0xe000ed00
   147fc:	0002eaf1 	.word	0x0002eaf1
   14800:	0002eb07 	.word	0x0002eb07
   14804:	0002e8ee 	.word	0x0002e8ee
   14808:	0002eb18 	.word	0x0002eb18
   1480c:	0002eb31 	.word	0x0002eb31
   14810:	0002eb46 	.word	0x0002eb46
   14814:	0002eb61 	.word	0x0002eb61
   14818:	0002e94e 	.word	0x0002e94e

0001481c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14820:	4b5f      	ldr	r3, [pc, #380]	; (149a0 <z_arm_fault+0x184>)
   14822:	685d      	ldr	r5, [r3, #4]
{
   14824:	b08a      	sub	sp, #40	; 0x28
   14826:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14828:	f3c5 0408 	ubfx	r4, r5, #0, #9
   1482c:	2700      	movs	r7, #0
   1482e:	f387 8811 	msr	BASEPRI, r7
   14832:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14836:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1483a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1483e:	d10d      	bne.n	1485c <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14840:	f002 030c 	and.w	r3, r2, #12
   14844:	2b08      	cmp	r3, #8
   14846:	d11a      	bne.n	1487e <z_arm_fault+0x62>
   14848:	4956      	ldr	r1, [pc, #344]	; (149a4 <z_arm_fault+0x188>)
   1484a:	4b57      	ldr	r3, [pc, #348]	; (149a8 <z_arm_fault+0x18c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   1484c:	4857      	ldr	r0, [pc, #348]	; (149ac <z_arm_fault+0x190>)
   1484e:	1ac9      	subs	r1, r1, r3
   14850:	08c9      	lsrs	r1, r1, #3
   14852:	0189      	lsls	r1, r1, #6
   14854:	f041 0101 	orr.w	r1, r1, #1
   14858:	f013 f920 	bl	27a9c <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1485c:	4a54      	ldr	r2, [pc, #336]	; (149b0 <z_arm_fault+0x194>)
   1485e:	4955      	ldr	r1, [pc, #340]	; (149b4 <z_arm_fault+0x198>)
   14860:	4855      	ldr	r0, [pc, #340]	; (149b8 <z_arm_fault+0x19c>)
   14862:	f240 33e1 	movw	r3, #993	; 0x3e1
   14866:	f012 fe46 	bl	274f6 <printk>
   1486a:	4854      	ldr	r0, [pc, #336]	; (149bc <z_arm_fault+0x1a0>)
   1486c:	f012 fe43 	bl	274f6 <printk>
   14870:	484f      	ldr	r0, [pc, #316]	; (149b0 <z_arm_fault+0x194>)
   14872:	f240 31e1 	movw	r1, #993	; 0x3e1
   14876:	f013 f8e3 	bl	27a40 <assert_post_action>
   1487a:	2600      	movs	r6, #0
   1487c:	e005      	b.n	1488a <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1487e:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   14880:	bf5c      	itt	pl
   14882:	4606      	movpl	r6, r0
			*nested_exc = true;
   14884:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
   14886:	2e00      	cmp	r6, #0
   14888:	d0e8      	beq.n	1485c <z_arm_fault+0x40>
	*recoverable = false;
   1488a:	2300      	movs	r3, #0
   1488c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14890:	1ee3      	subs	r3, r4, #3
   14892:	2b09      	cmp	r3, #9
   14894:	d86b      	bhi.n	1496e <z_arm_fault+0x152>
   14896:	e8df f003 	tbb	[pc, r3]
   1489a:	5905      	.short	0x5905
   1489c:	6a6a3d5d 	.word	0x6a6a3d5d
   148a0:	616a6a6a 	.word	0x616a6a6a
   148a4:	4b40      	ldr	r3, [pc, #256]	; (149a8 <z_arm_fault+0x18c>)
   148a6:	4d3f      	ldr	r5, [pc, #252]	; (149a4 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   148a8:	4845      	ldr	r0, [pc, #276]	; (149c0 <z_arm_fault+0x1a4>)
   148aa:	1aed      	subs	r5, r5, r3
   148ac:	08ed      	lsrs	r5, r5, #3
   148ae:	01ad      	lsls	r5, r5, #6
   148b0:	f045 0501 	orr.w	r5, r5, #1
   148b4:	4629      	mov	r1, r5
   148b6:	f013 f8f1 	bl	27a9c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   148ba:	4b39      	ldr	r3, [pc, #228]	; (149a0 <z_arm_fault+0x184>)
   148bc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   148be:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   148c2:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   148c6:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   148ca:	d005      	beq.n	148d8 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
   148cc:	483d      	ldr	r0, [pc, #244]	; (149c4 <z_arm_fault+0x1a8>)
   148ce:	4629      	mov	r1, r5
	PR_FAULT_INFO(
   148d0:	f013 f8e4 	bl	27a9c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   148d4:	2400      	movs	r4, #0
}
   148d6:	e020      	b.n	1491a <z_arm_fault+0xfe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   148d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   148da:	005b      	lsls	r3, r3, #1
   148dc:	d51d      	bpl.n	1491a <z_arm_fault+0xfe>
		PR_EXC("  Fault escalation (see below)");
   148de:	483a      	ldr	r0, [pc, #232]	; (149c8 <z_arm_fault+0x1ac>)
   148e0:	4629      	mov	r1, r5
   148e2:	f013 f8db 	bl	27a9c <log_0>
		if (SCB_MMFSR != 0) {
   148e6:	4b39      	ldr	r3, [pc, #228]	; (149cc <z_arm_fault+0x1b0>)
   148e8:	781b      	ldrb	r3, [r3, #0]
   148ea:	b133      	cbz	r3, 148fa <z_arm_fault+0xde>
			reason = mem_manage_fault(esf, 1, recoverable);
   148ec:	f10d 0207 	add.w	r2, sp, #7
   148f0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   148f2:	4630      	mov	r0, r6
   148f4:	f7ff fe2a 	bl	1454c <mem_manage_fault>
   148f8:	e00e      	b.n	14918 <z_arm_fault+0xfc>
		} else if (SCB_BFSR != 0) {
   148fa:	4b35      	ldr	r3, [pc, #212]	; (149d0 <z_arm_fault+0x1b4>)
   148fc:	781b      	ldrb	r3, [r3, #0]
   148fe:	b12b      	cbz	r3, 1490c <z_arm_fault+0xf0>
			reason = bus_fault(esf, 1, recoverable);
   14900:	f10d 0107 	add.w	r1, sp, #7
   14904:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14906:	f7ff ff1b 	bl	14740 <bus_fault.isra.0>
   1490a:	e005      	b.n	14918 <z_arm_fault+0xfc>
		} else if (SCB_UFSR != 0) {
   1490c:	4b31      	ldr	r3, [pc, #196]	; (149d4 <z_arm_fault+0x1b8>)
   1490e:	881b      	ldrh	r3, [r3, #0]
   14910:	b29b      	uxth	r3, r3
   14912:	b113      	cbz	r3, 1491a <z_arm_fault+0xfe>
			reason = usage_fault(esf);
   14914:	f7ff feb8 	bl	14688 <usage_fault.isra.0>
   14918:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1491a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1491e:	b993      	cbnz	r3, 14946 <z_arm_fault+0x12a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14920:	2220      	movs	r2, #32
   14922:	4631      	mov	r1, r6
   14924:	a802      	add	r0, sp, #8
   14926:	f015 f898 	bl	29a5a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1492a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1492c:	b39f      	cbz	r7, 14996 <z_arm_fault+0x17a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1492e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14932:	b922      	cbnz	r2, 1493e <z_arm_fault+0x122>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14934:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14938:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1493c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1493e:	a902      	add	r1, sp, #8
   14940:	4620      	mov	r0, r4
   14942:	f7ff fd57 	bl	143f4 <z_arm_fatal_error>
}
   14946:	b00a      	add	sp, #40	; 0x28
   14948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1494c:	f10d 0207 	add.w	r2, sp, #7
   14950:	2100      	movs	r1, #0
   14952:	e7ce      	b.n	148f2 <z_arm_fault+0xd6>
		reason = bus_fault(esf, 0, recoverable);
   14954:	f10d 0107 	add.w	r1, sp, #7
   14958:	2000      	movs	r0, #0
   1495a:	e7d4      	b.n	14906 <z_arm_fault+0xea>
   1495c:	4911      	ldr	r1, [pc, #68]	; (149a4 <z_arm_fault+0x188>)
   1495e:	4b12      	ldr	r3, [pc, #72]	; (149a8 <z_arm_fault+0x18c>)
	PR_FAULT_INFO(
   14960:	481d      	ldr	r0, [pc, #116]	; (149d8 <z_arm_fault+0x1bc>)
   14962:	1ac9      	subs	r1, r1, r3
   14964:	08c9      	lsrs	r1, r1, #3
   14966:	0189      	lsls	r1, r1, #6
   14968:	f041 0101 	orr.w	r1, r1, #1
   1496c:	e7b0      	b.n	148d0 <z_arm_fault+0xb4>
   1496e:	4a0e      	ldr	r2, [pc, #56]	; (149a8 <z_arm_fault+0x18c>)
   14970:	4b0c      	ldr	r3, [pc, #48]	; (149a4 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** %s %d) *****",
   14972:	481a      	ldr	r0, [pc, #104]	; (149dc <z_arm_fault+0x1c0>)
   14974:	491a      	ldr	r1, [pc, #104]	; (149e0 <z_arm_fault+0x1c4>)
   14976:	1a9b      	subs	r3, r3, r2
   14978:	08db      	lsrs	r3, r3, #3
   1497a:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
   1497e:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14982:	bf18      	it	ne
   14984:	4601      	movne	r1, r0
   14986:	f043 0301 	orr.w	r3, r3, #1
   1498a:	4816      	ldr	r0, [pc, #88]	; (149e4 <z_arm_fault+0x1c8>)
   1498c:	f1a4 0210 	sub.w	r2, r4, #16
   14990:	f013 f8a5 	bl	27ade <log_2>
   14994:	e79e      	b.n	148d4 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14996:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1499a:	f023 0301 	bic.w	r3, r3, #1
   1499e:	e7cd      	b.n	1493c <z_arm_fault+0x120>
   149a0:	e000ed00 	.word	0xe000ed00
   149a4:	0002cd80 	.word	0x0002cd80
   149a8:	0002ccb8 	.word	0x0002ccb8
   149ac:	0002eb79 	.word	0x0002eb79
   149b0:	0002e97d 	.word	0x0002e97d
   149b4:	0002eba4 	.word	0x0002eba4
   149b8:	0002dcd3 	.word	0x0002dcd3
   149bc:	0002ebb7 	.word	0x0002ebb7
   149c0:	0002ebf5 	.word	0x0002ebf5
   149c4:	0002ec0c 	.word	0x0002ec0c
   149c8:	0002ec2d 	.word	0x0002ec2d
   149cc:	e000ed28 	.word	0xe000ed28
   149d0:	e000ed29 	.word	0xe000ed29
   149d4:	e000ed2a 	.word	0xe000ed2a
   149d8:	0002ec4c 	.word	0x0002ec4c
   149dc:	0002ec85 	.word	0x0002ec85
   149e0:	0002ec70 	.word	0x0002ec70
   149e4:	0002ec9e 	.word	0x0002ec9e

000149e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   149e8:	4a02      	ldr	r2, [pc, #8]	; (149f4 <z_arm_fault_init+0xc>)
   149ea:	6953      	ldr	r3, [r2, #20]
   149ec:	f043 0310 	orr.w	r3, r3, #16
   149f0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   149f2:	4770      	bx	lr
   149f4:	e000ed00 	.word	0xe000ed00

000149f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   149f8:	4b04      	ldr	r3, [pc, #16]	; (14a0c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   149fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   149fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   149fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14a00:	d003      	beq.n	14a0a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14a02:	4903      	ldr	r1, [pc, #12]	; (14a10 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14a08:	600a      	str	r2, [r1, #0]

00014a0a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14a0a:	4770      	bx	lr
	ldr r3, =_kernel
   14a0c:	200033dc 	.word	0x200033dc
	ldr r1, =_SCS_ICSR
   14a10:	e000ed04 	.word	0xe000ed04

00014a14 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14a14:	4a06      	ldr	r2, [pc, #24]	; (14a30 <z_arm_clear_arm_mpu_config+0x1c>)
   14a16:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   14a18:	2300      	movs	r3, #0
	int num_regions =
   14a1a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14a1e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   14a20:	428b      	cmp	r3, r1
   14a22:	d100      	bne.n	14a26 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   14a24:	4770      	bx	lr
  MPU->RNR = rnr;
   14a26:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   14a28:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   14a2a:	3301      	adds	r3, #1
   14a2c:	e7f8      	b.n	14a20 <z_arm_clear_arm_mpu_config+0xc>
   14a2e:	bf00      	nop
   14a30:	e000ed90 	.word	0xe000ed90

00014a34 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14a34:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   14a36:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14a38:	2300      	movs	r3, #0
   14a3a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14a3e:	f7ff ffe9 	bl	14a14 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   14a42:	4b14      	ldr	r3, [pc, #80]	; (14a94 <z_arm_init_arch_hw_at_boot+0x60>)
   14a44:	f04f 32ff 	mov.w	r2, #4294967295
   14a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14a5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14a60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14a64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14a68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14a6c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14a70:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14a74:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14a78:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14a7c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14a80:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14a84:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14a88:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   14a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14a8e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14a92:	bd08      	pop	{r3, pc}
   14a94:	e000e100 	.word	0xe000e100

00014a98 <z_arm_interrupt_init>:
   14a98:	4804      	ldr	r0, [pc, #16]	; (14aac <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14a9a:	2300      	movs	r3, #0
   14a9c:	2140      	movs	r1, #64	; 0x40
   14a9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14aa0:	3301      	adds	r3, #1
   14aa2:	2b30      	cmp	r3, #48	; 0x30
   14aa4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14aa8:	d1f9      	bne.n	14a9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14aaa:	4770      	bx	lr
   14aac:	e000e100 	.word	0xe000e100

00014ab0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14ab0:	4b06      	ldr	r3, [pc, #24]	; (14acc <z_impl_k_thread_abort+0x1c>)
   14ab2:	689b      	ldr	r3, [r3, #8]
   14ab4:	4283      	cmp	r3, r0
   14ab6:	d107      	bne.n	14ac8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14ab8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14abc:	b123      	cbz	r3, 14ac8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14abe:	4a04      	ldr	r2, [pc, #16]	; (14ad0 <z_impl_k_thread_abort+0x20>)
   14ac0:	6853      	ldr	r3, [r2, #4]
   14ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14ac6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   14ac8:	f00e be8c 	b.w	237e4 <z_thread_abort>
   14acc:	200033dc 	.word	0x200033dc
   14ad0:	e000ed00 	.word	0xe000ed00

00014ad4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14ad4:	4b02      	ldr	r3, [pc, #8]	; (14ae0 <z_arm_configure_static_mpu_regions+0xc>)
   14ad6:	4a03      	ldr	r2, [pc, #12]	; (14ae4 <z_arm_configure_static_mpu_regions+0x10>)
   14ad8:	4803      	ldr	r0, [pc, #12]	; (14ae8 <z_arm_configure_static_mpu_regions+0x14>)
   14ada:	2101      	movs	r1, #1
   14adc:	f000 b884 	b.w	14be8 <arm_core_mpu_configure_static_mpu_regions>
   14ae0:	20040000 	.word	0x20040000
   14ae4:	20000000 	.word	0x20000000
   14ae8:	0002d174 	.word	0x0002d174

00014aec <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14aec:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14aee:	4b05      	ldr	r3, [pc, #20]	; (14b04 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14af0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   14af2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14af4:	4a04      	ldr	r2, [pc, #16]	; (14b08 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14af6:	2120      	movs	r1, #32
   14af8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14afc:	4618      	mov	r0, r3
   14afe:	2101      	movs	r1, #1
   14b00:	f000 b89a 	b.w	14c38 <arm_core_mpu_configure_dynamic_mpu_regions>
   14b04:	20003004 	.word	0x20003004
   14b08:	150b0000 	.word	0x150b0000

00014b0c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   14b0e:	4f28      	ldr	r7, [pc, #160]	; (14bb0 <mpu_configure_regions+0xa4>)
   14b10:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   14b12:	2100      	movs	r1, #0
   14b14:	42b1      	cmp	r1, r6
   14b16:	da14      	bge.n	14b42 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   14b18:	6844      	ldr	r4, [r0, #4]
   14b1a:	2c00      	cmp	r4, #0
   14b1c:	d045      	beq.n	14baa <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14b1e:	b1c3      	cbz	r3, 14b52 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14b20:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   14b24:	ea14 0f0c 	tst.w	r4, ip
   14b28:	d00d      	beq.n	14b46 <mpu_configure_regions+0x3a>
   14b2a:	4a22      	ldr	r2, [pc, #136]	; (14bb4 <mpu_configure_regions+0xa8>)
   14b2c:	4b22      	ldr	r3, [pc, #136]	; (14bb8 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14b2e:	4823      	ldr	r0, [pc, #140]	; (14bbc <mpu_configure_regions+0xb0>)
   14b30:	1ad2      	subs	r2, r2, r3
   14b32:	08d2      	lsrs	r2, r2, #3
   14b34:	0192      	lsls	r2, r2, #6
   14b36:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14b3a:	f012 ffbc 	bl	27ab6 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14b3e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14b42:	4610      	mov	r0, r2
   14b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   14b46:	2c1f      	cmp	r4, #31
   14b48:	d9ef      	bls.n	14b2a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   14b4a:	6805      	ldr	r5, [r0, #0]
		&&
   14b4c:	ea1c 0f05 	tst.w	ip, r5
   14b50:	d1eb      	bne.n	14b2a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14b52:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14b54:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   14b56:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   14b5a:	6802      	ldr	r2, [r0, #0]
   14b5c:	d916      	bls.n	14b8c <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   14b5e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14b62:	d815      	bhi.n	14b90 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14b64:	3c01      	subs	r4, #1
   14b66:	fab4 f484 	clz	r4, r4
   14b6a:	f1c4 041f 	rsb	r4, r4, #31
   14b6e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14b70:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14b72:	ea4c 0404 	orr.w	r4, ip, r4
   14b76:	d90d      	bls.n	14b94 <mpu_configure_regions+0x88>
   14b78:	4a0e      	ldr	r2, [pc, #56]	; (14bb4 <mpu_configure_regions+0xa8>)
   14b7a:	4b0f      	ldr	r3, [pc, #60]	; (14bb8 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14b7c:	4810      	ldr	r0, [pc, #64]	; (14bc0 <mpu_configure_regions+0xb4>)
   14b7e:	1ad2      	subs	r2, r2, r3
   14b80:	08d2      	lsrs	r2, r2, #3
   14b82:	0192      	lsls	r2, r2, #6
   14b84:	f042 0201 	orr.w	r2, r2, #1
   14b88:	4629      	mov	r1, r5
   14b8a:	e7d6      	b.n	14b3a <mpu_configure_regions+0x2e>
		return REGION_32B;
   14b8c:	2408      	movs	r4, #8
   14b8e:	e7ef      	b.n	14b70 <mpu_configure_regions+0x64>
		return REGION_4G;
   14b90:	243e      	movs	r4, #62	; 0x3e
   14b92:	e7ed      	b.n	14b70 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14b94:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   14b98:	432a      	orrs	r2, r5
   14b9a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14b9e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   14ba2:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14ba4:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14ba6:	613c      	str	r4, [r7, #16]
		reg_index++;
   14ba8:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   14baa:	3101      	adds	r1, #1
   14bac:	300c      	adds	r0, #12
   14bae:	e7b1      	b.n	14b14 <mpu_configure_regions+0x8>
   14bb0:	e000ed90 	.word	0xe000ed90
   14bb4:	0002cd70 	.word	0x0002cd70
   14bb8:	0002ccb8 	.word	0x0002ccb8
   14bbc:	0002ecb5 	.word	0x0002ecb5
   14bc0:	0002ecd8 	.word	0x0002ecd8

00014bc4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14bc4:	4b03      	ldr	r3, [pc, #12]	; (14bd4 <arm_core_mpu_enable+0x10>)
   14bc6:	2205      	movs	r2, #5
   14bc8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14bca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14bce:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14bd2:	4770      	bx	lr
   14bd4:	e000ed90 	.word	0xe000ed90

00014bd8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   14bd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14bdc:	4b01      	ldr	r3, [pc, #4]	; (14be4 <arm_core_mpu_disable+0xc>)
   14bde:	2200      	movs	r2, #0
   14be0:	605a      	str	r2, [r3, #4]
}
   14be2:	4770      	bx	lr
   14be4:	e000ed90 	.word	0xe000ed90

00014be8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14be8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14bea:	4d0e      	ldr	r5, [pc, #56]	; (14c24 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14bec:	2301      	movs	r3, #1
   14bee:	782a      	ldrb	r2, [r5, #0]
   14bf0:	460c      	mov	r4, r1
   14bf2:	f7ff ff8b 	bl	14b0c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14bf6:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14bf8:	3016      	adds	r0, #22
   14bfa:	d111      	bne.n	14c20 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14bfc:	f240 1305 	movw	r3, #261	; 0x105
   14c00:	4a09      	ldr	r2, [pc, #36]	; (14c28 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   14c02:	490a      	ldr	r1, [pc, #40]	; (14c2c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   14c04:	480a      	ldr	r0, [pc, #40]	; (14c30 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   14c06:	f012 fc76 	bl	274f6 <printk>
   14c0a:	4621      	mov	r1, r4
   14c0c:	4809      	ldr	r0, [pc, #36]	; (14c34 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   14c0e:	f012 fc72 	bl	274f6 <printk>
			regions_num);
	}
}
   14c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14c16:	4804      	ldr	r0, [pc, #16]	; (14c28 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   14c18:	f240 1105 	movw	r1, #261	; 0x105
   14c1c:	f012 bf10 	b.w	27a40 <assert_post_action>
}
   14c20:	bd38      	pop	{r3, r4, r5, pc}
   14c22:	bf00      	nop
   14c24:	20003d6f 	.word	0x20003d6f
   14c28:	0002ecfe 	.word	0x0002ecfe
   14c2c:	00032142 	.word	0x00032142
   14c30:	0002dcd3 	.word	0x0002dcd3
   14c34:	0002ed35 	.word	0x0002ed35

00014c38 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14c38:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14c3a:	4a12      	ldr	r2, [pc, #72]	; (14c84 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14c3c:	2300      	movs	r3, #0
   14c3e:	7812      	ldrb	r2, [r2, #0]
   14c40:	460c      	mov	r4, r1
   14c42:	f7ff ff63 	bl	14b0c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14c46:	f110 0f16 	cmn.w	r0, #22
   14c4a:	d008      	beq.n	14c5e <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   14c4c:	4b0e      	ldr	r3, [pc, #56]	; (14c88 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   14c4e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14c50:	2807      	cmp	r0, #7
   14c52:	dd00      	ble.n	14c56 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14c54:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   14c56:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   14c58:	611a      	str	r2, [r3, #16]
   14c5a:	3001      	adds	r0, #1
   14c5c:	e7f8      	b.n	14c50 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14c5e:	4a0b      	ldr	r2, [pc, #44]	; (14c8c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   14c60:	490b      	ldr	r1, [pc, #44]	; (14c90 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   14c62:	480c      	ldr	r0, [pc, #48]	; (14c94 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   14c64:	f44f 7392 	mov.w	r3, #292	; 0x124
   14c68:	f012 fc45 	bl	274f6 <printk>
   14c6c:	4621      	mov	r1, r4
   14c6e:	480a      	ldr	r0, [pc, #40]	; (14c98 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   14c70:	f012 fc41 	bl	274f6 <printk>
}
   14c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14c78:	4804      	ldr	r0, [pc, #16]	; (14c8c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   14c7a:	f44f 7192 	mov.w	r1, #292	; 0x124
   14c7e:	f012 bedf 	b.w	27a40 <assert_post_action>
   14c82:	bf00      	nop
   14c84:	20003d6f 	.word	0x20003d6f
   14c88:	e000ed90 	.word	0xe000ed90
   14c8c:	0002ecfe 	.word	0x0002ecfe
   14c90:	00032142 	.word	0x00032142
   14c94:	0002dcd3 	.word	0x0002dcd3
   14c98:	0002ed61 	.word	0x0002ed61

00014c9c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14c9c:	4925      	ldr	r1, [pc, #148]	; (14d34 <z_arm_mpu_init+0x98>)
{
   14c9e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14ca0:	680c      	ldr	r4, [r1, #0]
   14ca2:	2c08      	cmp	r4, #8
   14ca4:	d913      	bls.n	14cce <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   14ca6:	f44f 739e 	mov.w	r3, #316	; 0x13c
   14caa:	4a23      	ldr	r2, [pc, #140]	; (14d38 <z_arm_mpu_init+0x9c>)
   14cac:	4923      	ldr	r1, [pc, #140]	; (14d3c <z_arm_mpu_init+0xa0>)
   14cae:	4824      	ldr	r0, [pc, #144]	; (14d40 <z_arm_mpu_init+0xa4>)
   14cb0:	f012 fc21 	bl	274f6 <printk>
   14cb4:	4823      	ldr	r0, [pc, #140]	; (14d44 <z_arm_mpu_init+0xa8>)
   14cb6:	2208      	movs	r2, #8
   14cb8:	4621      	mov	r1, r4
   14cba:	f012 fc1c 	bl	274f6 <printk>
   14cbe:	481e      	ldr	r0, [pc, #120]	; (14d38 <z_arm_mpu_init+0x9c>)
   14cc0:	f44f 719e 	mov.w	r1, #316	; 0x13c
   14cc4:	f012 febc 	bl	27a40 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   14cc8:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14ccc:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   14cce:	f7ff ff83 	bl	14bd8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14cd2:	6848      	ldr	r0, [r1, #4]
   14cd4:	491c      	ldr	r1, [pc, #112]	; (14d48 <z_arm_mpu_init+0xac>)
   14cd6:	2200      	movs	r2, #0
   14cd8:	4294      	cmp	r4, r2
   14cda:	f100 000c 	add.w	r0, r0, #12
   14cde:	d119      	bne.n	14d14 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   14ce0:	4b1a      	ldr	r3, [pc, #104]	; (14d4c <z_arm_mpu_init+0xb0>)
   14ce2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   14ce4:	f7ff ff6e 	bl	14bc4 <arm_core_mpu_enable>
	__ASSERT(
   14ce8:	680b      	ldr	r3, [r1, #0]
   14cea:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14cee:	2b08      	cmp	r3, #8
   14cf0:	d00e      	beq.n	14d10 <z_arm_mpu_init+0x74>
   14cf2:	4917      	ldr	r1, [pc, #92]	; (14d50 <z_arm_mpu_init+0xb4>)
   14cf4:	4a10      	ldr	r2, [pc, #64]	; (14d38 <z_arm_mpu_init+0x9c>)
   14cf6:	4812      	ldr	r0, [pc, #72]	; (14d40 <z_arm_mpu_init+0xa4>)
   14cf8:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   14cfc:	f012 fbfb 	bl	274f6 <printk>
   14d00:	4814      	ldr	r0, [pc, #80]	; (14d54 <z_arm_mpu_init+0xb8>)
   14d02:	f012 fbf8 	bl	274f6 <printk>
   14d06:	480c      	ldr	r0, [pc, #48]	; (14d38 <z_arm_mpu_init+0x9c>)
   14d08:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   14d0c:	f012 fe98 	bl	27a40 <assert_post_action>
	return 0;
   14d10:	2000      	movs	r0, #0
   14d12:	e7db      	b.n	14ccc <z_arm_mpu_init+0x30>
	MPU->RNR = index;
   14d14:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14d16:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   14d1a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14d1e:	4313      	orrs	r3, r2
   14d20:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14d24:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14d26:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14d2a:	f043 0301 	orr.w	r3, r3, #1
   14d2e:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14d30:	3201      	adds	r2, #1
   14d32:	e7d1      	b.n	14cd8 <z_arm_mpu_init+0x3c>
   14d34:	0002d180 	.word	0x0002d180
   14d38:	0002ecfe 	.word	0x0002ecfe
   14d3c:	00032142 	.word	0x00032142
   14d40:	0002dcd3 	.word	0x0002dcd3
   14d44:	0002ed8e 	.word	0x0002ed8e
   14d48:	e000ed90 	.word	0xe000ed90
   14d4c:	20003d6f 	.word	0x20003d6f
   14d50:	0002edc2 	.word	0x0002edc2
   14d54:	0002ee12 	.word	0x0002ee12

00014d58 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14d58:	4b01      	ldr	r3, [pc, #4]	; (14d60 <__stdout_hook_install+0x8>)
   14d5a:	6018      	str	r0, [r3, #0]
}
   14d5c:	4770      	bx	lr
   14d5e:	bf00      	nop
   14d60:	200004b8 	.word	0x200004b8

00014d64 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT str, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   14d64:	b40c      	push	{r2, r3}
   14d66:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   14d68:	b909      	cbnz	r1, 14d6e <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   14d6a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   14d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   14d72:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   14d74:	9a06      	ldr	r2, [sp, #24]
   14d76:	4806      	ldr	r0, [pc, #24]	; (14d90 <snprintf+0x2c>)
	va_start(vargs, format);
   14d78:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   14d7a:	a902      	add	r1, sp, #8
   14d7c:	f7fc f916 	bl	10fac <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   14d80:	9b02      	ldr	r3, [sp, #8]
   14d82:	2200      	movs	r2, #0
   14d84:	701a      	strb	r2, [r3, #0]
	return r;
}
   14d86:	b005      	add	sp, #20
   14d88:	f85d eb04 	ldr.w	lr, [sp], #4
   14d8c:	b002      	add	sp, #8
   14d8e:	4770      	bx	lr
   14d90:	00029a89 	.word	0x00029a89

00014d94 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14d94:	f04f 0340 	mov.w	r3, #64	; 0x40
   14d98:	f3ef 8211 	mrs	r2, BASEPRI
   14d9c:	f383 8811 	msr	BASEPRI, r3
   14da0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14da4:	4906      	ldr	r1, [pc, #24]	; (14dc0 <nordicsemi_nrf52_init+0x2c>)
   14da6:	2301      	movs	r3, #1
   14da8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14dac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14db0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14db4:	f382 8811 	msr	BASEPRI, r2
   14db8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14dbc:	2000      	movs	r0, #0
   14dbe:	4770      	bx	lr
   14dc0:	4001e000 	.word	0x4001e000

00014dc4 <sys_arch_reboot>:
    *p_gpregret = val;
   14dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14dc8:	b2c0      	uxtb	r0, r0
   14dca:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14dce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14dd2:	4905      	ldr	r1, [pc, #20]	; (14de8 <sys_arch_reboot+0x24>)
   14dd4:	4b05      	ldr	r3, [pc, #20]	; (14dec <sys_arch_reboot+0x28>)
   14dd6:	68ca      	ldr	r2, [r1, #12]
   14dd8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14ddc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14dde:	60cb      	str	r3, [r1, #12]
   14de0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14de4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14de6:	e7fd      	b.n	14de4 <sys_arch_reboot+0x20>
   14de8:	e000ed00 	.word	0xe000ed00
   14dec:	05fa0004 	.word	0x05fa0004

00014df0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14df0:	b120      	cbz	r0, 14dfc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   14df2:	4b03      	ldr	r3, [pc, #12]	; (14e00 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14df4:	0180      	lsls	r0, r0, #6
   14df6:	f043 0301 	orr.w	r3, r3, #1
   14dfa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14dfc:	4770      	bx	lr
   14dfe:	bf00      	nop
   14e00:	0002cf20 	.word	0x0002cf20

00014e04 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14e04:	4b0e      	ldr	r3, [pc, #56]	; (14e40 <bt_hex_real+0x3c>)
   14e06:	2940      	cmp	r1, #64	; 0x40
{
   14e08:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14e0a:	bf28      	it	cs
   14e0c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14e0e:	4c0d      	ldr	r4, [pc, #52]	; (14e44 <bt_hex_real+0x40>)
   14e10:	1846      	adds	r6, r0, r1
   14e12:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14e14:	42b0      	cmp	r0, r6
   14e16:	f103 0302 	add.w	r3, r3, #2
   14e1a:	d104      	bne.n	14e26 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14e1c:	2300      	movs	r3, #0
   14e1e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14e22:	4807      	ldr	r0, [pc, #28]	; (14e40 <bt_hex_real+0x3c>)
   14e24:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   14e26:	7802      	ldrb	r2, [r0, #0]
   14e28:	0912      	lsrs	r2, r2, #4
   14e2a:	5ca2      	ldrb	r2, [r4, r2]
   14e2c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14e30:	f810 2b01 	ldrb.w	r2, [r0], #1
   14e34:	f002 020f 	and.w	r2, r2, #15
   14e38:	5ca2      	ldrb	r2, [r4, r2]
   14e3a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14e3e:	e7e9      	b.n	14e14 <bt_hex_real+0x10>
   14e40:	20003d70 	.word	0x20003d70
   14e44:	0002ee46 	.word	0x0002ee46

00014e48 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14e48:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   14e4a:	7803      	ldrb	r3, [r0, #0]
   14e4c:	b08b      	sub	sp, #44	; 0x2c
   14e4e:	4604      	mov	r4, r0
   14e50:	ad07      	add	r5, sp, #28
   14e52:	2b03      	cmp	r3, #3
   14e54:	d821      	bhi.n	14e9a <bt_addr_le_str_real+0x52>
   14e56:	e8df f003 	tbb	[pc, r3]
   14e5a:	1a02      	.short	0x1a02
   14e5c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   14e5e:	4912      	ldr	r1, [pc, #72]	; (14ea8 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   14e60:	4628      	mov	r0, r5
   14e62:	f014 fd8b 	bl	2997c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   14e66:	7863      	ldrb	r3, [r4, #1]
   14e68:	9304      	str	r3, [sp, #16]
   14e6a:	78a3      	ldrb	r3, [r4, #2]
   14e6c:	9303      	str	r3, [sp, #12]
   14e6e:	78e3      	ldrb	r3, [r4, #3]
   14e70:	9302      	str	r3, [sp, #8]
   14e72:	7923      	ldrb	r3, [r4, #4]
   14e74:	9301      	str	r3, [sp, #4]
   14e76:	7963      	ldrb	r3, [r4, #5]
   14e78:	9300      	str	r3, [sp, #0]
   14e7a:	4a0c      	ldr	r2, [pc, #48]	; (14eac <bt_addr_le_str_real+0x64>)
   14e7c:	79a3      	ldrb	r3, [r4, #6]
   14e7e:	9505      	str	r5, [sp, #20]
   14e80:	211e      	movs	r1, #30
   14e82:	480b      	ldr	r0, [pc, #44]	; (14eb0 <bt_addr_le_str_real+0x68>)
   14e84:	f012 fb44 	bl	27510 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14e88:	4809      	ldr	r0, [pc, #36]	; (14eb0 <bt_addr_le_str_real+0x68>)
   14e8a:	b00b      	add	sp, #44	; 0x2c
   14e8c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14e8e:	4909      	ldr	r1, [pc, #36]	; (14eb4 <bt_addr_le_str_real+0x6c>)
   14e90:	e7e6      	b.n	14e60 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   14e92:	4909      	ldr	r1, [pc, #36]	; (14eb8 <bt_addr_le_str_real+0x70>)
   14e94:	e7e4      	b.n	14e60 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   14e96:	4909      	ldr	r1, [pc, #36]	; (14ebc <bt_addr_le_str_real+0x74>)
   14e98:	e7e2      	b.n	14e60 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14e9a:	4a09      	ldr	r2, [pc, #36]	; (14ec0 <bt_addr_le_str_real+0x78>)
   14e9c:	210a      	movs	r1, #10
   14e9e:	4628      	mov	r0, r5
   14ea0:	f012 fb36 	bl	27510 <snprintk>
		break;
   14ea4:	e7df      	b.n	14e66 <bt_addr_le_str_real+0x1e>
   14ea6:	bf00      	nop
   14ea8:	0002d8db 	.word	0x0002d8db
   14eac:	0002d8fd 	.word	0x0002d8fd
   14eb0:	20003df1 	.word	0x20003df1
   14eb4:	0002d8e2 	.word	0x0002d8e2
   14eb8:	0002d8e9 	.word	0x0002d8e9
   14ebc:	0002d8f3 	.word	0x0002d8f3
   14ec0:	00030943 	.word	0x00030943

00014ec4 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14ec4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14ec6:	b570      	push	{r4, r5, r6, lr}
   14ec8:	4604      	mov	r4, r0
   14eca:	460d      	mov	r5, r1
   14ecc:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14ed0:	d919      	bls.n	14f06 <sys_memcpy_swap.constprop.0+0x42>
   14ed2:	42b0      	cmp	r0, r6
   14ed4:	d20e      	bcs.n	14ef4 <sys_memcpy_swap.constprop.0+0x30>
   14ed6:	490e      	ldr	r1, [pc, #56]	; (14f10 <sys_memcpy_swap.constprop.0+0x4c>)
   14ed8:	4a0e      	ldr	r2, [pc, #56]	; (14f14 <sys_memcpy_swap.constprop.0+0x50>)
   14eda:	480f      	ldr	r0, [pc, #60]	; (14f18 <sys_memcpy_swap.constprop.0+0x54>)
   14edc:	f240 2317 	movw	r3, #535	; 0x217
   14ee0:	f012 fb09 	bl	274f6 <printk>
   14ee4:	480d      	ldr	r0, [pc, #52]	; (14f1c <sys_memcpy_swap.constprop.0+0x58>)
   14ee6:	f012 fb06 	bl	274f6 <printk>
   14eea:	480a      	ldr	r0, [pc, #40]	; (14f14 <sys_memcpy_swap.constprop.0+0x50>)
   14eec:	f240 2117 	movw	r1, #535	; 0x217
   14ef0:	f012 fda6 	bl	27a40 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   14ef4:	4633      	mov	r3, r6
   14ef6:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   14ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   14efc:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   14f00:	42ab      	cmp	r3, r5
   14f02:	d1f9      	bne.n	14ef8 <sys_memcpy_swap.constprop.0+0x34>
	}
}
   14f04:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14f06:	d0e6      	beq.n	14ed6 <sys_memcpy_swap.constprop.0+0x12>
   14f08:	f100 0320 	add.w	r3, r0, #32
   14f0c:	4299      	cmp	r1, r3
   14f0e:	e7e1      	b.n	14ed4 <sys_memcpy_swap.constprop.0+0x10>
   14f10:	0002ee89 	.word	0x0002ee89
   14f14:	0002ee5e 	.word	0x0002ee5e
   14f18:	0002dcd3 	.word	0x0002dcd3
   14f1c:	0002eee0 	.word	0x0002eee0

00014f20 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   14f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14f24:	4b6f      	ldr	r3, [pc, #444]	; (150e4 <ecc_thread+0x1c4>)
   14f26:	4d70      	ldr	r5, [pc, #448]	; (150e8 <ecc_thread+0x1c8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f28:	4e70      	ldr	r6, [pc, #448]	; (150ec <ecc_thread+0x1cc>)
	return z_impl_k_sem_take(sem, timeout);
   14f2a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 1511c <ecc_thread+0x1fc>
   14f2e:	1aed      	subs	r5, r5, r3
   14f30:	08ed      	lsrs	r5, r5, #3
   14f32:	4637      	mov	r7, r6
   14f34:	f04f 32ff 	mov.w	r2, #4294967295
   14f38:	f04f 33ff 	mov.w	r3, #4294967295
   14f3c:	4648      	mov	r0, r9
   14f3e:	f00c fd41 	bl	219c4 <z_impl_k_sem_take>
   14f42:	f3bf 8f5b 	dmb	ish
   14f46:	6834      	ldr	r4, [r6, #0]
   14f48:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   14f4c:	f014 0401 	ands.w	r4, r4, #1
   14f50:	d05b      	beq.n	1500a <ecc_thread+0xea>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   14f52:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 15100 <ecc_thread+0x1e0>
   14f56:	4c66      	ldr	r4, [pc, #408]	; (150f0 <ecc_thread+0x1d0>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   14f58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 15108 <ecc_thread+0x1e8>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   14f5c:	4865      	ldr	r0, [pc, #404]	; (150f4 <ecc_thread+0x1d4>)
   14f5e:	4652      	mov	r2, sl
   14f60:	4621      	mov	r1, r4
   14f62:	f013 fbd4 	bl	2870e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   14f66:	bbe8      	cbnz	r0, 14fe4 <ecc_thread+0xc4>
			BT_ERR("Failed to create ECC public/private pair");
   14f68:	01a9      	lsls	r1, r5, #6
   14f6a:	4863      	ldr	r0, [pc, #396]	; (150f8 <ecc_thread+0x1d8>)
   14f6c:	f041 0101 	orr.w	r1, r1, #1
   14f70:	f012 fd94 	bl	27a9c <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   14f74:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   14f78:	f04f 32ff 	mov.w	r2, #4294967295
   14f7c:	f04f 33ff 	mov.w	r3, #4294967295
   14f80:	2001      	movs	r0, #1
   14f82:	f000 fafd 	bl	15580 <bt_buf_get_rx>
   14f86:	f100 0808 	add.w	r8, r0, #8
   14f8a:	2102      	movs	r1, #2
   14f8c:	4604      	mov	r4, r0
   14f8e:	4640      	mov	r0, r8
   14f90:	f008 fb88 	bl	1d6a4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   14f94:	233e      	movs	r3, #62	; 0x3e
   14f96:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   14f98:	2342      	movs	r3, #66	; 0x42
   14f9a:	7043      	strb	r3, [r0, #1]
   14f9c:	2101      	movs	r1, #1
   14f9e:	4640      	mov	r0, r8
   14fa0:	f008 fb80 	bl	1d6a4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   14fa4:	2308      	movs	r3, #8
   14fa6:	7003      	strb	r3, [r0, #0]
   14fa8:	2141      	movs	r1, #65	; 0x41
   14faa:	4640      	mov	r0, r8
   14fac:	f008 fb7a 	bl	1d6a4 <net_buf_simple_add>
   14fb0:	4680      	mov	r8, r0
	evt->status = status;
   14fb2:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
   14fb6:	f1ba 0f00 	cmp.w	sl, #0
   14fba:	d01d      	beq.n	14ff8 <ecc_thread+0xd8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   14fbc:	2240      	movs	r2, #64	; 0x40
   14fbe:	2100      	movs	r1, #0
   14fc0:	f014 fd56 	bl	29a70 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14fc4:	f3bf 8f5b 	dmb	ish
   14fc8:	e857 3f00 	ldrex	r3, [r7]
   14fcc:	f023 0301 	bic.w	r3, r3, #1
   14fd0:	e847 3200 	strex	r2, r3, [r7]
   14fd4:	2a00      	cmp	r2, #0
   14fd6:	d1f7      	bne.n	14fc8 <ecc_thread+0xa8>
   14fd8:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   14fdc:	4620      	mov	r0, r4
	bt_recv(buf);
   14fde:	f001 fc91 	bl	16904 <bt_recv>
}
   14fe2:	e7a7      	b.n	14f34 <ecc_thread+0x14>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   14fe4:	2220      	movs	r2, #32
   14fe6:	4641      	mov	r1, r8
   14fe8:	4620      	mov	r0, r4
   14fea:	f014 fd0f 	bl	29a0c <memcmp>
   14fee:	2800      	cmp	r0, #0
   14ff0:	d0b4      	beq.n	14f5c <ecc_thread+0x3c>
	return 0;
   14ff2:	f04f 0a00 	mov.w	sl, #0
   14ff6:	e7bf      	b.n	14f78 <ecc_thread+0x58>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   14ff8:	493e      	ldr	r1, [pc, #248]	; (150f4 <ecc_thread+0x1d4>)
   14ffa:	f7ff ff63 	bl	14ec4 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   14ffe:	493f      	ldr	r1, [pc, #252]	; (150fc <ecc_thread+0x1dc>)
   15000:	f108 0021 	add.w	r0, r8, #33	; 0x21
   15004:	f7ff ff5e 	bl	14ec4 <sys_memcpy_swap.constprop.0>
   15008:	e7dc      	b.n	14fc4 <ecc_thread+0xa4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1500a:	f3bf 8f5b 	dmb	ish
   1500e:	6833      	ldr	r3, [r6, #0]
   15010:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   15014:	079b      	lsls	r3, r3, #30
   15016:	d557      	bpl.n	150c8 <ecc_thread+0x1a8>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   15018:	4939      	ldr	r1, [pc, #228]	; (15100 <ecc_thread+0x1e0>)
   1501a:	4836      	ldr	r0, [pc, #216]	; (150f4 <ecc_thread+0x1d4>)
   1501c:	f014 fa46 	bl	294ac <uECC_valid_public_key>
	if (ret < 0) {
   15020:	1e01      	subs	r1, r0, #0
   15022:	da38      	bge.n	15096 <ecc_thread+0x176>
		BT_ERR("public key is not valid (ret %d)", ret);
   15024:	01aa      	lsls	r2, r5, #6
   15026:	4837      	ldr	r0, [pc, #220]	; (15104 <ecc_thread+0x1e4>)
   15028:	f042 0201 	orr.w	r2, r2, #1
   1502c:	f012 fd43 	bl	27ab6 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15030:	f04f 32ff 	mov.w	r2, #4294967295
   15034:	f04f 33ff 	mov.w	r3, #4294967295
   15038:	2001      	movs	r0, #1
   1503a:	f000 faa1 	bl	15580 <bt_buf_get_rx>
   1503e:	f100 0a08 	add.w	sl, r0, #8
   15042:	2102      	movs	r1, #2
   15044:	4680      	mov	r8, r0
   15046:	4650      	mov	r0, sl
   15048:	f008 fb2c 	bl	1d6a4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1504c:	233e      	movs	r3, #62	; 0x3e
   1504e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   15050:	2322      	movs	r3, #34	; 0x22
   15052:	7043      	strb	r3, [r0, #1]
   15054:	2101      	movs	r1, #1
   15056:	4650      	mov	r0, sl
   15058:	f008 fb24 	bl	1d6a4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1505c:	2309      	movs	r3, #9
   1505e:	7003      	strb	r3, [r0, #0]
   15060:	2121      	movs	r1, #33	; 0x21
   15062:	4650      	mov	r0, sl
   15064:	f008 fb1e 	bl	1d6a4 <net_buf_simple_add>
   15068:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   1506a:	3001      	adds	r0, #1
   1506c:	bb34      	cbnz	r4, 150bc <ecc_thread+0x19c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   1506e:	221f      	movs	r2, #31
   15070:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   15072:	21ff      	movs	r1, #255	; 0xff
   15074:	2220      	movs	r2, #32
   15076:	f014 fcfb 	bl	29a70 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1507a:	f3bf 8f5b 	dmb	ish
   1507e:	e857 3f00 	ldrex	r3, [r7]
   15082:	f023 0302 	bic.w	r3, r3, #2
   15086:	e847 3200 	strex	r2, r3, [r7]
   1508a:	2a00      	cmp	r2, #0
   1508c:	d1f7      	bne.n	1507e <ecc_thread+0x15e>
   1508e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   15092:	4640      	mov	r0, r8
   15094:	e7a3      	b.n	14fde <ecc_thread+0xbe>
		ret = uECC_shared_secret(ecc.public_key_be,
   15096:	4916      	ldr	r1, [pc, #88]	; (150f0 <ecc_thread+0x1d0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15098:	f3bf 8f5b 	dmb	ish
   1509c:	6833      	ldr	r3, [r6, #0]
   1509e:	481a      	ldr	r0, [pc, #104]	; (15108 <ecc_thread+0x1e8>)
   150a0:	f3bf 8f5b 	dmb	ish
   150a4:	f013 0f04 	tst.w	r3, #4
   150a8:	f101 0220 	add.w	r2, r1, #32
   150ac:	4b14      	ldr	r3, [pc, #80]	; (15100 <ecc_thread+0x1e0>)
   150ae:	bf18      	it	ne
   150b0:	4601      	movne	r1, r0
   150b2:	4610      	mov	r0, r2
   150b4:	f013 fb7a 	bl	287ac <uECC_shared_secret>
   150b8:	4604      	mov	r4, r0
   150ba:	e7b9      	b.n	15030 <ecc_thread+0x110>
		evt->status = 0U;
   150bc:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   150be:	490d      	ldr	r1, [pc, #52]	; (150f4 <ecc_thread+0x1d4>)
		evt->status = 0U;
   150c0:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   150c2:	f7ff feff 	bl	14ec4 <sys_memcpy_swap.constprop.0>
   150c6:	e7d8      	b.n	1507a <ecc_thread+0x15a>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
   150c8:	4a10      	ldr	r2, [pc, #64]	; (1510c <ecc_thread+0x1ec>)
   150ca:	4911      	ldr	r1, [pc, #68]	; (15110 <ecc_thread+0x1f0>)
   150cc:	4811      	ldr	r0, [pc, #68]	; (15114 <ecc_thread+0x1f4>)
   150ce:	23dd      	movs	r3, #221	; 0xdd
   150d0:	f012 fa11 	bl	274f6 <printk>
   150d4:	4810      	ldr	r0, [pc, #64]	; (15118 <ecc_thread+0x1f8>)
   150d6:	f012 fa0e 	bl	274f6 <printk>
   150da:	480c      	ldr	r0, [pc, #48]	; (1510c <ecc_thread+0x1ec>)
   150dc:	21dd      	movs	r1, #221	; 0xdd
   150de:	f012 fcaf 	bl	27a40 <assert_post_action>
	while (true) {
   150e2:	e727      	b.n	14f34 <ecc_thread+0x14>
   150e4:	0002ccb8 	.word	0x0002ccb8
   150e8:	0002ccf0 	.word	0x0002ccf0
   150ec:	20003010 	.word	0x20003010
   150f0:	20003e0f 	.word	0x20003e0f
   150f4:	20003e2f 	.word	0x20003e2f
   150f8:	0002ef12 	.word	0x0002ef12
   150fc:	20003e4f 	.word	0x20003e4f
   15100:	0002d1a0 	.word	0x0002d1a0
   15104:	0002ef3b 	.word	0x0002ef3b
   15108:	0002efb9 	.word	0x0002efb9
   1510c:	0002ef5c 	.word	0x0002ef5c
   15110:	00032142 	.word	0x00032142
   15114:	0002dcd3 	.word	0x0002dcd3
   15118:	0002ef8f 	.word	0x0002ef8f
   1511c:	2000085c 	.word	0x2000085c

00015120 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   15120:	b570      	push	{r4, r5, r6, lr}
   15122:	4c21      	ldr	r4, [pc, #132]	; (151a8 <le_gen_dhkey+0x88>)
   15124:	f3bf 8f5b 	dmb	ish
   15128:	6823      	ldr	r3, [r4, #0]
   1512a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   1512e:	07da      	lsls	r2, r3, #31
{
   15130:	4606      	mov	r6, r0
   15132:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   15134:	d501      	bpl.n	1513a <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15136:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   15138:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   1513a:	2901      	cmp	r1, #1
   1513c:	d831      	bhi.n	151a2 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1513e:	f3bf 8f5b 	dmb	ish
   15142:	e854 3f00 	ldrex	r3, [r4]
   15146:	f043 0202 	orr.w	r2, r3, #2
   1514a:	e844 2100 	strex	r1, r2, [r4]
   1514e:	2900      	cmp	r1, #0
   15150:	d1f7      	bne.n	15142 <le_gen_dhkey+0x22>
   15152:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   15156:	079b      	lsls	r3, r3, #30
   15158:	d4ed      	bmi.n	15136 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   1515a:	4814      	ldr	r0, [pc, #80]	; (151ac <le_gen_dhkey+0x8c>)
   1515c:	4631      	mov	r1, r6
   1515e:	f7ff feb1 	bl	14ec4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   15162:	4813      	ldr	r0, [pc, #76]	; (151b0 <le_gen_dhkey+0x90>)
   15164:	f106 0120 	add.w	r1, r6, #32
   15168:	f7ff feac 	bl	14ec4 <sys_memcpy_swap.constprop.0>
   1516c:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   15170:	b175      	cbz	r5, 15190 <le_gen_dhkey+0x70>
   15172:	e854 3f00 	ldrex	r3, [r4]
   15176:	f043 0304 	orr.w	r3, r3, #4
   1517a:	e844 3200 	strex	r2, r3, [r4]
   1517e:	2a00      	cmp	r2, #0
   15180:	d1f7      	bne.n	15172 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15182:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   15186:	480b      	ldr	r0, [pc, #44]	; (151b4 <le_gen_dhkey+0x94>)
   15188:	f00c fbd8 	bl	2193c <z_impl_k_sem_give>
   1518c:	2000      	movs	r0, #0
   1518e:	e7d3      	b.n	15138 <le_gen_dhkey+0x18>
   15190:	e854 3f00 	ldrex	r3, [r4]
   15194:	f023 0304 	bic.w	r3, r3, #4
   15198:	e844 3200 	strex	r2, r3, [r4]
   1519c:	2a00      	cmp	r2, #0
   1519e:	d0f0      	beq.n	15182 <le_gen_dhkey+0x62>
   151a0:	e7f6      	b.n	15190 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   151a2:	2012      	movs	r0, #18
   151a4:	e7c8      	b.n	15138 <le_gen_dhkey+0x18>
   151a6:	bf00      	nop
   151a8:	20003010 	.word	0x20003010
   151ac:	20003e2f 	.word	0x20003e2f
   151b0:	20003e4f 	.word	0x20003e4f
   151b4:	2000085c 	.word	0x2000085c

000151b8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   151b8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   151ba:	7d06      	ldrb	r6, [r0, #20]
   151bc:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   151be:	b976      	cbnz	r6, 151de <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   151c0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   151c2:	881d      	ldrh	r5, [r3, #0]
   151c4:	f242 0226 	movw	r2, #8230	; 0x2026
   151c8:	4295      	cmp	r5, r2
   151ca:	d045      	beq.n	15258 <bt_hci_ecc_send+0xa0>
   151cc:	d80f      	bhi.n	151ee <bt_hci_ecc_send+0x36>
   151ce:	f242 0201 	movw	r2, #8193	; 0x2001
   151d2:	4295      	cmp	r5, r2
   151d4:	d04f      	beq.n	15276 <bt_hci_ecc_send+0xbe>
   151d6:	f242 0325 	movw	r3, #8229	; 0x2025
   151da:	429d      	cmp	r5, r3
   151dc:	d013      	beq.n	15206 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   151de:	4b2a      	ldr	r3, [pc, #168]	; (15288 <bt_hci_ecc_send+0xd0>)
   151e0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   151e4:	4620      	mov	r0, r4
   151e6:	691b      	ldr	r3, [r3, #16]
}
   151e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   151ec:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   151ee:	f242 035e 	movw	r3, #8286	; 0x205e
   151f2:	429d      	cmp	r5, r3
   151f4:	d1f3      	bne.n	151de <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   151f6:	2103      	movs	r1, #3
   151f8:	3008      	adds	r0, #8
   151fa:	f008 fa11 	bl	1d620 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   151fe:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   15200:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   15204:	e02e      	b.n	15264 <bt_hci_ecc_send+0xac>
   15206:	2103      	movs	r1, #3
   15208:	3008      	adds	r0, #8
   1520a:	f008 fa09 	bl	1d620 <net_buf_simple_pull>
	net_buf_unref(buf);
   1520e:	4620      	mov	r0, r4
   15210:	f008 f918 	bl	1d444 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15214:	f3bf 8f5b 	dmb	ish
   15218:	4b1c      	ldr	r3, [pc, #112]	; (1528c <bt_hci_ecc_send+0xd4>)
   1521a:	681a      	ldr	r2, [r3, #0]
   1521c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   15220:	0792      	lsls	r2, r2, #30
   15222:	d507      	bpl.n	15234 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   15224:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   15226:	4631      	mov	r1, r6
   15228:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   1522c:	f014 fc87 	bl	29b3e <send_cmd_status>
}
   15230:	2000      	movs	r0, #0
   15232:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15234:	f3bf 8f5b 	dmb	ish
   15238:	e853 2f00 	ldrex	r2, [r3]
   1523c:	f042 0101 	orr.w	r1, r2, #1
   15240:	e843 1000 	strex	r0, r1, [r3]
   15244:	2800      	cmp	r0, #0
   15246:	d1f7      	bne.n	15238 <bt_hci_ecc_send+0x80>
   15248:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   1524c:	07d3      	lsls	r3, r2, #31
   1524e:	d4e9      	bmi.n	15224 <bt_hci_ecc_send+0x6c>
   15250:	480f      	ldr	r0, [pc, #60]	; (15290 <bt_hci_ecc_send+0xd8>)
   15252:	f00c fb73 	bl	2193c <z_impl_k_sem_give>
}
   15256:	e7e6      	b.n	15226 <bt_hci_ecc_send+0x6e>
   15258:	2103      	movs	r1, #3
   1525a:	3008      	adds	r0, #8
   1525c:	f008 f9e0 	bl	1d620 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   15260:	68a0      	ldr	r0, [r4, #8]
   15262:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   15264:	f7ff ff5c 	bl	15120 <le_gen_dhkey>
   15268:	4606      	mov	r6, r0
	net_buf_unref(buf);
   1526a:	4620      	mov	r0, r4
   1526c:	f008 f8ea 	bl	1d444 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   15270:	4631      	mov	r1, r6
   15272:	4628      	mov	r0, r5
   15274:	e7da      	b.n	1522c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   15276:	78da      	ldrb	r2, [r3, #3]
   15278:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1527c:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   1527e:	791a      	ldrb	r2, [r3, #4]
   15280:	f022 0201 	bic.w	r2, r2, #1
   15284:	711a      	strb	r2, [r3, #4]
}
   15286:	e7aa      	b.n	151de <bt_hci_ecc_send+0x26>
   15288:	200002b8 	.word	0x200002b8
   1528c:	20003010 	.word	0x20003010
   15290:	2000085c 	.word	0x2000085c

00015294 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   15294:	b510      	push	{r4, lr}
   15296:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15298:	4c0c      	ldr	r4, [pc, #48]	; (152cc <bt_hci_ecc_init+0x38>)
   1529a:	490d      	ldr	r1, [pc, #52]	; (152d0 <bt_hci_ecc_init+0x3c>)
   1529c:	2200      	movs	r2, #0
   1529e:	2300      	movs	r3, #0
   152a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   152a4:	2300      	movs	r3, #0
   152a6:	220a      	movs	r2, #10
   152a8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   152ac:	e9cd 3301 	strd	r3, r3, [sp, #4]
   152b0:	9300      	str	r3, [sp, #0]
   152b2:	f44f 628f 	mov.w	r2, #1144	; 0x478
   152b6:	4b07      	ldr	r3, [pc, #28]	; (152d4 <bt_hci_ecc_init+0x40>)
   152b8:	4620      	mov	r0, r4
   152ba:	f00b fee3 	bl	21084 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   152be:	4906      	ldr	r1, [pc, #24]	; (152d8 <bt_hci_ecc_init+0x44>)
   152c0:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   152c2:	b008      	add	sp, #32
   152c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   152c8:	f017 b994 	b.w	2c5f4 <z_impl_k_thread_name_set>
   152cc:	200016d0 	.word	0x200016d0
   152d0:	20005340 	.word	0x20005340
   152d4:	00014f21 	.word	0x00014f21
   152d8:	0002efa7 	.word	0x0002efa7

000152dc <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   152dc:	b510      	push	{r4, lr}
   152de:	4b0d      	ldr	r3, [pc, #52]	; (15314 <save_id+0x38>)
   152e0:	4c0d      	ldr	r4, [pc, #52]	; (15318 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
   152e2:	480e      	ldr	r0, [pc, #56]	; (1531c <save_id+0x40>)
   152e4:	1ae4      	subs	r4, r4, r3
   152e6:	08e4      	lsrs	r4, r4, #3
   152e8:	01a4      	lsls	r4, r4, #6
   152ea:	f044 0103 	orr.w	r1, r4, #3
   152ee:	f012 fbd5 	bl	27a9c <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   152f2:	490b      	ldr	r1, [pc, #44]	; (15320 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   152f4:	480b      	ldr	r0, [pc, #44]	; (15324 <save_id+0x48>)
   152f6:	79ca      	ldrb	r2, [r1, #7]
   152f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   152fc:	f7fd fd78 	bl	12df0 <settings_save_one>
	if (err) {
   15300:	4601      	mov	r1, r0
   15302:	b130      	cbz	r0, 15312 <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
   15304:	f044 0201 	orr.w	r2, r4, #1
   15308:	4807      	ldr	r0, [pc, #28]	; (15328 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   1530a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   1530e:	f012 bbd2 	b.w	27ab6 <log_1>
}
   15312:	bd10      	pop	{r4, pc}
   15314:	0002ccb8 	.word	0x0002ccb8
   15318:	0002cd20 	.word	0x0002cd20
   1531c:	0002efd9 	.word	0x0002efd9
   15320:	200002b8 	.word	0x200002b8
   15324:	0002efe3 	.word	0x0002efe3
   15328:	0002efe9 	.word	0x0002efe9

0001532c <set>:
{
   1532c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1532e:	4616      	mov	r6, r2
   15330:	461f      	mov	r7, r3
	if (!name) {
   15332:	4604      	mov	r4, r0
   15334:	b960      	cbnz	r0, 15350 <set+0x24>
   15336:	4925      	ldr	r1, [pc, #148]	; (153cc <set+0xa0>)
   15338:	4b25      	ldr	r3, [pc, #148]	; (153d0 <set+0xa4>)
		BT_ERR("Insufficient number of arguments");
   1533a:	4826      	ldr	r0, [pc, #152]	; (153d4 <set+0xa8>)
   1533c:	1ac9      	subs	r1, r1, r3
   1533e:	08c9      	lsrs	r1, r1, #3
   15340:	0189      	lsls	r1, r1, #6
   15342:	f041 0101 	orr.w	r1, r1, #1
   15346:	f012 fba9 	bl	27a9c <log_0>
	return -ENOENT;
   1534a:	f06f 0401 	mvn.w	r4, #1
   1534e:	e01c      	b.n	1538a <set+0x5e>
	len = settings_name_next(name, &next);
   15350:	a901      	add	r1, sp, #4
   15352:	f013 f897 	bl	28484 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   15356:	4920      	ldr	r1, [pc, #128]	; (153d8 <set+0xac>)
	len = settings_name_next(name, &next);
   15358:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   1535a:	4620      	mov	r0, r4
   1535c:	f014 fb47 	bl	299ee <strncmp>
   15360:	4604      	mov	r4, r0
   15362:	2800      	cmp	r0, #0
   15364:	d1f1      	bne.n	1534a <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15366:	f3bf 8f5b 	dmb	ish
   1536a:	4d1c      	ldr	r5, [pc, #112]	; (153dc <set+0xb0>)
   1536c:	682b      	ldr	r3, [r5, #0]
   1536e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15372:	075b      	lsls	r3, r3, #29
   15374:	d50c      	bpl.n	15390 <set+0x64>
   15376:	4915      	ldr	r1, [pc, #84]	; (153cc <set+0xa0>)
   15378:	4b15      	ldr	r3, [pc, #84]	; (153d0 <set+0xa4>)
			BT_WARN("Ignoring identities stored in flash");
   1537a:	4819      	ldr	r0, [pc, #100]	; (153e0 <set+0xb4>)
   1537c:	1ac9      	subs	r1, r1, r3
   1537e:	08c9      	lsrs	r1, r1, #3
   15380:	0189      	lsls	r1, r1, #6
   15382:	f041 0102 	orr.w	r1, r1, #2
   15386:	f012 fb89 	bl	27a9c <log_0>
}
   1538a:	4620      	mov	r0, r4
   1538c:	b003      	add	sp, #12
   1538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   15390:	3d98      	subs	r5, #152	; 0x98
   15392:	2207      	movs	r2, #7
   15394:	4629      	mov	r1, r5
   15396:	4638      	mov	r0, r7
   15398:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1539a:	2806      	cmp	r0, #6
   1539c:	d810      	bhi.n	153c0 <set+0x94>
   1539e:	4b0c      	ldr	r3, [pc, #48]	; (153d0 <set+0xa4>)
   153a0:	490a      	ldr	r1, [pc, #40]	; (153cc <set+0xa0>)
				BT_ERR("Invalid length ID address in storage");
   153a2:	4810      	ldr	r0, [pc, #64]	; (153e4 <set+0xb8>)
   153a4:	1ac9      	subs	r1, r1, r3
   153a6:	08c9      	lsrs	r1, r1, #3
   153a8:	0189      	lsls	r1, r1, #6
   153aa:	f041 0101 	orr.w	r1, r1, #1
   153ae:	f012 fb75 	bl	27a9c <log_0>
			(void)memset(bt_dev.id_addr, 0,
   153b2:	2207      	movs	r2, #7
   153b4:	4621      	mov	r1, r4
   153b6:	4628      	mov	r0, r5
   153b8:	f014 fb5a 	bl	29a70 <memset>
			bt_dev.id_count = 0U;
   153bc:	71ec      	strb	r4, [r5, #7]
   153be:	e7e4      	b.n	1538a <set+0x5e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   153c0:	2307      	movs	r3, #7
   153c2:	fbb0 f0f3 	udiv	r0, r0, r3
   153c6:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   153c8:	e7df      	b.n	1538a <set+0x5e>
   153ca:	bf00      	nop
   153cc:	0002cd20 	.word	0x0002cd20
   153d0:	0002ccb8 	.word	0x0002ccb8
   153d4:	0002f004 	.word	0x0002f004
   153d8:	0002d8f0 	.word	0x0002d8f0
   153dc:	20000350 	.word	0x20000350
   153e0:	0002f025 	.word	0x0002f025
   153e4:	0002f049 	.word	0x0002f049

000153e8 <bt_settings_encode_key>:
{
   153e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153ec:	b088      	sub	sp, #32
   153ee:	799c      	ldrb	r4, [r3, #6]
   153f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   153f4:	795d      	ldrb	r5, [r3, #5]
   153f6:	791e      	ldrb	r6, [r3, #4]
   153f8:	78df      	ldrb	r7, [r3, #3]
   153fa:	f893 c002 	ldrb.w	ip, [r3, #2]
   153fe:	f893 e001 	ldrb.w	lr, [r3, #1]
   15402:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   15404:	f1b8 0f00 	cmp.w	r8, #0
   15408:	d00e      	beq.n	15428 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   1540a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1540e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   15412:	4613      	mov	r3, r2
   15414:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15418:	e9cd 4500 	strd	r4, r5, [sp]
   1541c:	4a08      	ldr	r2, [pc, #32]	; (15440 <bt_settings_encode_key+0x58>)
   1541e:	f012 f877 	bl	27510 <snprintk>
}
   15422:	b008      	add	sp, #32
   15424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15428:	e9cd e305 	strd	lr, r3, [sp, #20]
   1542c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15430:	4613      	mov	r3, r2
   15432:	e9cd 5601 	strd	r5, r6, [sp, #4]
   15436:	4a03      	ldr	r2, [pc, #12]	; (15444 <bt_settings_encode_key+0x5c>)
   15438:	9400      	str	r4, [sp, #0]
   1543a:	f012 f869 	bl	27510 <snprintk>
}
   1543e:	e7f0      	b.n	15422 <bt_settings_encode_key+0x3a>
   15440:	0002f06e 	.word	0x0002f06e
   15444:	0002f092 	.word	0x0002f092

00015448 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15448:	4801      	ldr	r0, [pc, #4]	; (15450 <bt_settings_save_id+0x8>)
   1544a:	f00c be17 	b.w	2207c <k_work_submit>
   1544e:	bf00      	nop
   15450:	200004bc 	.word	0x200004bc

00015454 <commit>:
}

static int commit(void)
{
   15454:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   15456:	4c1a      	ldr	r4, [pc, #104]	; (154c0 <commit+0x6c>)
   15458:	79e3      	ldrb	r3, [r4, #7]
   1545a:	b99b      	cbnz	r3, 15484 <commit+0x30>
		bt_setup_public_id_addr();
   1545c:	f001 fe50 	bl	17100 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
   15460:	79e3      	ldrb	r3, [r4, #7]
   15462:	b97b      	cbnz	r3, 15484 <commit+0x30>
		int err;

		err = bt_setup_random_id_addr();
   15464:	f001 feb6 	bl	171d4 <bt_setup_random_id_addr>
		if (err) {
   15468:	4604      	mov	r4, r0
   1546a:	b158      	cbz	r0, 15484 <commit+0x30>
   1546c:	4915      	ldr	r1, [pc, #84]	; (154c4 <commit+0x70>)
   1546e:	4b16      	ldr	r3, [pc, #88]	; (154c8 <commit+0x74>)
			BT_ERR("Unable to setup an identity address");
   15470:	4816      	ldr	r0, [pc, #88]	; (154cc <commit+0x78>)
   15472:	1ac9      	subs	r1, r1, r3
   15474:	08c9      	lsrs	r1, r1, #3
   15476:	0189      	lsls	r1, r1, #6
   15478:	f041 0101 	orr.w	r1, r1, #1
   1547c:	f012 fb0e 	bl	27a9c <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   15480:	4620      	mov	r0, r4
   15482:	bd38      	pop	{r3, r4, r5, pc}
   15484:	4d12      	ldr	r5, [pc, #72]	; (154d0 <commit+0x7c>)
   15486:	f3bf 8f5b 	dmb	ish
   1548a:	682b      	ldr	r3, [r5, #0]
   1548c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15490:	079b      	lsls	r3, r3, #30
   15492:	d401      	bmi.n	15498 <commit+0x44>
		bt_finalize_init();
   15494:	f001 fa7e 	bl	16994 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15498:	f3bf 8f5b 	dmb	ish
   1549c:	e855 4f00 	ldrex	r4, [r5]
   154a0:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   154a4:	e845 3200 	strex	r2, r3, [r5]
   154a8:	2a00      	cmp	r2, #0
   154aa:	d1f7      	bne.n	1549c <commit+0x48>
   154ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   154b0:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   154b4:	d0e4      	beq.n	15480 <commit+0x2c>
		bt_settings_save_id();
   154b6:	f7ff ffc7 	bl	15448 <bt_settings_save_id>
	return 0;
   154ba:	2400      	movs	r4, #0
   154bc:	e7e0      	b.n	15480 <commit+0x2c>
   154be:	bf00      	nop
   154c0:	200002b8 	.word	0x200002b8
   154c4:	0002cd20 	.word	0x0002cd20
   154c8:	0002ccb8 	.word	0x0002ccb8
   154cc:	0002f0b3 	.word	0x0002f0b3
   154d0:	20000350 	.word	0x20000350

000154d4 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   154d4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   154d6:	f7fd fe2d 	bl	13134 <settings_subsys_init>
	if (err) {
   154da:	4604      	mov	r4, r0
   154dc:	b150      	cbz	r0, 154f4 <bt_settings_init+0x20>
   154de:	4a06      	ldr	r2, [pc, #24]	; (154f8 <bt_settings_init+0x24>)
   154e0:	4b06      	ldr	r3, [pc, #24]	; (154fc <bt_settings_init+0x28>)
   154e2:	1ad2      	subs	r2, r2, r3
   154e4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
   154e6:	0192      	lsls	r2, r2, #6
   154e8:	4601      	mov	r1, r0
   154ea:	f042 0201 	orr.w	r2, r2, #1
   154ee:	4804      	ldr	r0, [pc, #16]	; (15500 <bt_settings_init+0x2c>)
   154f0:	f012 fae1 	bl	27ab6 <log_1>
		return err;
	}

	return 0;
}
   154f4:	4620      	mov	r0, r4
   154f6:	bd10      	pop	{r4, pc}
   154f8:	0002cd20 	.word	0x0002cd20
   154fc:	0002ccb8 	.word	0x0002ccb8
   15500:	0002f0d7 	.word	0x0002f0d7

00015504 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15504:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   15506:	7802      	ldrb	r2, [r0, #0]
   15508:	2a01      	cmp	r2, #1
{
   1550a:	4604      	mov	r4, r0
   1550c:	460b      	mov	r3, r1
	switch (src->type) {
   1550e:	d016      	beq.n	1553e <uuid_to_uuid128+0x3a>
   15510:	2a02      	cmp	r2, #2
   15512:	d02c      	beq.n	1556e <uuid_to_uuid128+0x6a>
   15514:	b98a      	cbnz	r2, 1553a <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15516:	4a19      	ldr	r2, [pc, #100]	; (1557c <uuid_to_uuid128+0x78>)
   15518:	460d      	mov	r5, r1
   1551a:	f102 0710 	add.w	r7, r2, #16
   1551e:	6810      	ldr	r0, [r2, #0]
   15520:	6851      	ldr	r1, [r2, #4]
   15522:	462e      	mov	r6, r5
   15524:	c603      	stmia	r6!, {r0, r1}
   15526:	3208      	adds	r2, #8
   15528:	42ba      	cmp	r2, r7
   1552a:	4635      	mov	r5, r6
   1552c:	d1f7      	bne.n	1551e <uuid_to_uuid128+0x1a>
   1552e:	7812      	ldrb	r2, [r2, #0]
   15530:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15532:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   15534:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   15536:	0a12      	lsrs	r2, r2, #8
   15538:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1553a:	bcf0      	pop	{r4, r5, r6, r7}
   1553c:	4770      	bx	lr
		*dst = uuid128_base;
   1553e:	4a0f      	ldr	r2, [pc, #60]	; (1557c <uuid_to_uuid128+0x78>)
   15540:	460d      	mov	r5, r1
   15542:	f102 0710 	add.w	r7, r2, #16
   15546:	6810      	ldr	r0, [r2, #0]
   15548:	6851      	ldr	r1, [r2, #4]
   1554a:	462e      	mov	r6, r5
   1554c:	c603      	stmia	r6!, {r0, r1}
   1554e:	3208      	adds	r2, #8
   15550:	42ba      	cmp	r2, r7
   15552:	4635      	mov	r5, r6
   15554:	d1f7      	bne.n	15546 <uuid_to_uuid128+0x42>
   15556:	7812      	ldrb	r2, [r2, #0]
   15558:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1555a:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   1555c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1555e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15562:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   15564:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   15566:	0a12      	lsrs	r2, r2, #8
   15568:	7399      	strb	r1, [r3, #14]
   1556a:	741a      	strb	r2, [r3, #16]
}
   1556c:	e7e5      	b.n	1553a <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1556e:	4601      	mov	r1, r0
}
   15570:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   15572:	2211      	movs	r2, #17
   15574:	4618      	mov	r0, r3
   15576:	f014 ba70 	b.w	29a5a <memcpy>
   1557a:	bf00      	nop
   1557c:	0002f10b 	.word	0x0002f10b

00015580 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15580:	b570      	push	{r4, r5, r6, lr}
   15582:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15584:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   15588:	2b01      	cmp	r3, #1
{
   1558a:	4605      	mov	r5, r0
   1558c:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1558e:	d00e      	beq.n	155ae <bt_buf_get_rx+0x2e>
   15590:	2805      	cmp	r0, #5
   15592:	d00c      	beq.n	155ae <bt_buf_get_rx+0x2e>
   15594:	490d      	ldr	r1, [pc, #52]	; (155cc <bt_buf_get_rx+0x4c>)
   15596:	4a0e      	ldr	r2, [pc, #56]	; (155d0 <bt_buf_get_rx+0x50>)
   15598:	480e      	ldr	r0, [pc, #56]	; (155d4 <bt_buf_get_rx+0x54>)
   1559a:	2338      	movs	r3, #56	; 0x38
   1559c:	f011 ffab 	bl	274f6 <printk>
   155a0:	480d      	ldr	r0, [pc, #52]	; (155d8 <bt_buf_get_rx+0x58>)
   155a2:	f011 ffa8 	bl	274f6 <printk>
   155a6:	480a      	ldr	r0, [pc, #40]	; (155d0 <bt_buf_get_rx+0x50>)
   155a8:	2138      	movs	r1, #56	; 0x38
   155aa:	f012 fa49 	bl	27a40 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   155ae:	4623      	mov	r3, r4
   155b0:	480a      	ldr	r0, [pc, #40]	; (155dc <bt_buf_get_rx+0x5c>)
   155b2:	4632      	mov	r2, r6
   155b4:	f016 f9f1 	bl	2b99a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   155b8:	4604      	mov	r4, r0
   155ba:	b120      	cbz	r0, 155c6 <bt_buf_get_rx+0x46>
	net_buf_simple_reserve(&buf->b, reserve);
   155bc:	2100      	movs	r1, #0
   155be:	3008      	adds	r0, #8
   155c0:	f007 fee2 	bl	1d388 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   155c4:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   155c6:	4620      	mov	r0, r4
   155c8:	bd70      	pop	{r4, r5, r6, pc}
   155ca:	bf00      	nop
   155cc:	0002f14b 	.word	0x0002f14b
   155d0:	0002f11c 	.word	0x0002f11c
   155d4:	0002dcd3 	.word	0x0002dcd3
   155d8:	0002f190 	.word	0x0002f190
   155dc:	200009d8 	.word	0x200009d8

000155e0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   155e0:	b570      	push	{r4, r5, r6, lr}
   155e2:	4602      	mov	r2, r0
   155e4:	460b      	mov	r3, r1
	__asm__ volatile(
   155e6:	f04f 0140 	mov.w	r1, #64	; 0x40
   155ea:	f3ef 8511 	mrs	r5, BASEPRI
   155ee:	f381 8811 	msr	BASEPRI, r1
   155f2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   155f6:	480c      	ldr	r0, [pc, #48]	; (15628 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   155f8:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   155fa:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   155fe:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   15602:	f385 8811 	msr	BASEPRI, r5
   15606:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   1560a:	b924      	cbnz	r4, 15616 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1560c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15610:	2001      	movs	r0, #1
   15612:	f7ff bfb5 	b.w	15580 <bt_buf_get_rx>
   15616:	2301      	movs	r3, #1
   15618:	f104 0008 	add.w	r0, r4, #8
   1561c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   1561e:	81a1      	strh	r1, [r4, #12]
   15620:	f007 feb2 	bl	1d388 <net_buf_simple_reserve>
}
   15624:	4620      	mov	r0, r4
   15626:	bd70      	pop	{r4, r5, r6, pc}
   15628:	200002b8 	.word	0x200002b8

0001562c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1562c:	b570      	push	{r4, r5, r6, lr}
   1562e:	4604      	mov	r4, r0
	switch (evt) {
   15630:	2c0f      	cmp	r4, #15
{
   15632:	460d      	mov	r5, r1
   15634:	4610      	mov	r0, r2
   15636:	4619      	mov	r1, r3
	switch (evt) {
   15638:	d805      	bhi.n	15646 <bt_buf_get_evt+0x1a>
   1563a:	2c0d      	cmp	r4, #13
   1563c:	d912      	bls.n	15664 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1563e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15642:	f7ff bfcd 	b.w	155e0 <bt_buf_get_cmd_complete>
	switch (evt) {
   15646:	2c13      	cmp	r4, #19
   15648:	d10c      	bne.n	15664 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1564a:	480b      	ldr	r0, [pc, #44]	; (15678 <bt_buf_get_evt+0x4c>)
   1564c:	f016 f9a5 	bl	2b99a <net_buf_alloc_fixed>
			if (buf) {
   15650:	4604      	mov	r4, r0
   15652:	b128      	cbz	r0, 15660 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15654:	2100      	movs	r1, #0
   15656:	3008      	adds	r0, #8
   15658:	f007 fe96 	bl	1d388 <net_buf_simple_reserve>
   1565c:	2301      	movs	r3, #1
   1565e:	7523      	strb	r3, [r4, #20]
}
   15660:	4620      	mov	r0, r4
   15662:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15664:	4602      	mov	r2, r0
   15666:	460b      	mov	r3, r1
		if (discardable) {
   15668:	b10d      	cbz	r5, 1566e <bt_buf_get_evt+0x42>
   1566a:	4804      	ldr	r0, [pc, #16]	; (1567c <bt_buf_get_evt+0x50>)
   1566c:	e7ee      	b.n	1564c <bt_buf_get_evt+0x20>
}
   1566e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15672:	2001      	movs	r0, #1
   15674:	f7ff bf84 	b.w	15580 <bt_buf_get_rx>
   15678:	20000a04 	.word	0x20000a04
   1567c:	20000954 	.word	0x20000954

00015680 <ver_str>:
{
   15680:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15682:	4d0b      	ldr	r5, [pc, #44]	; (156b0 <ver_str+0x30>)
{
   15684:	4606      	mov	r6, r0
	const char * const str[] = {
   15686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15688:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   1568a:	ac01      	add	r4, sp, #4
   1568c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1568e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   15696:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   15698:	682b      	ldr	r3, [r5, #0]
   1569a:	6023      	str	r3, [r4, #0]
		return str[ver];
   1569c:	bf9b      	ittet	ls
   1569e:	ab0e      	addls	r3, sp, #56	; 0x38
   156a0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   156a4:	4803      	ldrhi	r0, [pc, #12]	; (156b4 <ver_str+0x34>)
		return str[ver];
   156a6:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   156aa:	b00e      	add	sp, #56	; 0x38
   156ac:	bd70      	pop	{r4, r5, r6, pc}
   156ae:	bf00      	nop
   156b0:	0002ce70 	.word	0x0002ce70
   156b4:	0002f2a6 	.word	0x0002f2a6

000156b8 <hci_data_buf_overflow>:
   156b8:	4905      	ldr	r1, [pc, #20]	; (156d0 <hci_data_buf_overflow+0x18>)
   156ba:	4a06      	ldr	r2, [pc, #24]	; (156d4 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   156bc:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   156be:	4806      	ldr	r0, [pc, #24]	; (156d8 <hci_data_buf_overflow+0x20>)
   156c0:	1a52      	subs	r2, r2, r1
   156c2:	08d2      	lsrs	r2, r2, #3
   156c4:	0192      	lsls	r2, r2, #6
   156c6:	7819      	ldrb	r1, [r3, #0]
   156c8:	f042 0202 	orr.w	r2, r2, #2
   156cc:	f012 b9f3 	b.w	27ab6 <log_1>
   156d0:	0002ccb8 	.word	0x0002ccb8
   156d4:	0002cce8 	.word	0x0002cce8
   156d8:	0002f2ae 	.word	0x0002f2ae

000156dc <hci_disconn_complete_prio>:
{
   156dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   156de:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   156e0:	781a      	ldrb	r2, [r3, #0]
   156e2:	b972      	cbnz	r2, 15702 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   156e4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   156e8:	4620      	mov	r0, r4
   156ea:	f002 fc83 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   156ee:	4605      	mov	r5, r0
   156f0:	b940      	cbnz	r0, 15704 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   156f2:	4b08      	ldr	r3, [pc, #32]	; (15714 <hci_disconn_complete_prio+0x38>)
   156f4:	881a      	ldrh	r2, [r3, #0]
   156f6:	b922      	cbnz	r2, 15702 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   156f8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   156fc:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15700:	8018      	strh	r0, [r3, #0]
}
   15702:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15704:	2101      	movs	r1, #1
   15706:	f002 fc81 	bl	1800c <bt_conn_set_state>
	bt_conn_unref(conn);
   1570a:	4628      	mov	r0, r5
}
   1570c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15710:	f002 bc38 	b.w	17f84 <bt_conn_unref>
   15714:	20003d3c 	.word	0x20003d3c

00015718 <hci_disconn_complete>:
{
   15718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1571a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1571c:	7835      	ldrb	r5, [r6, #0]
   1571e:	b9f5      	cbnz	r5, 1575e <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15720:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   15724:	4638      	mov	r0, r7
   15726:	f002 fc65 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   1572a:	4604      	mov	r4, r0
   1572c:	b960      	cbnz	r0, 15748 <hci_disconn_complete+0x30>
   1572e:	4b0c      	ldr	r3, [pc, #48]	; (15760 <hci_disconn_complete+0x48>)
   15730:	4a0c      	ldr	r2, [pc, #48]	; (15764 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   15732:	480d      	ldr	r0, [pc, #52]	; (15768 <hci_disconn_complete+0x50>)
   15734:	1ad2      	subs	r2, r2, r3
   15736:	08d2      	lsrs	r2, r2, #3
   15738:	0192      	lsls	r2, r2, #6
   1573a:	4639      	mov	r1, r7
   1573c:	f042 0201 	orr.w	r2, r2, #1
}
   15740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15744:	f012 b9b7 	b.w	27ab6 <log_1>
	conn->err = evt->reason;
   15748:	78f3      	ldrb	r3, [r6, #3]
   1574a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1574c:	4629      	mov	r1, r5
   1574e:	f002 fc5d 	bl	1800c <bt_conn_set_state>
	conn->handle = 0U;
   15752:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   15754:	4620      	mov	r0, r4
}
   15756:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1575a:	f002 bc13 	b.w	17f84 <bt_conn_unref>
}
   1575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15760:	0002ccb8 	.word	0x0002ccb8
   15764:	0002cce8 	.word	0x0002cce8
   15768:	0002f2d6 	.word	0x0002f2d6

0001576c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1576c:	6883      	ldr	r3, [r0, #8]
{
   1576e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15770:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15772:	4620      	mov	r0, r4
   15774:	f002 fc3e 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   15778:	b960      	cbnz	r0, 15794 <le_data_len_change+0x28>
   1577a:	4a08      	ldr	r2, [pc, #32]	; (1579c <le_data_len_change+0x30>)
   1577c:	4b08      	ldr	r3, [pc, #32]	; (157a0 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1577e:	4809      	ldr	r0, [pc, #36]	; (157a4 <le_data_len_change+0x38>)
   15780:	1ad2      	subs	r2, r2, r3
   15782:	08d2      	lsrs	r2, r2, #3
   15784:	0192      	lsls	r2, r2, #6
   15786:	4621      	mov	r1, r4
   15788:	f042 0201 	orr.w	r2, r2, #1
}
   1578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15790:	f012 b991 	b.w	27ab6 <log_1>
}
   15794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15798:	f002 bbf4 	b.w	17f84 <bt_conn_unref>
   1579c:	0002cce8 	.word	0x0002cce8
   157a0:	0002ccb8 	.word	0x0002ccb8
   157a4:	0002f2fc 	.word	0x0002f2fc

000157a8 <hci_hardware_error>:
{
   157a8:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   157aa:	2101      	movs	r1, #1
   157ac:	3008      	adds	r0, #8
   157ae:	f007 ff57 	bl	1d660 <net_buf_simple_pull_mem>
   157b2:	4b06      	ldr	r3, [pc, #24]	; (157cc <hci_hardware_error+0x24>)
   157b4:	4a06      	ldr	r2, [pc, #24]	; (157d0 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   157b6:	7801      	ldrb	r1, [r0, #0]
   157b8:	4806      	ldr	r0, [pc, #24]	; (157d4 <hci_hardware_error+0x2c>)
   157ba:	1ad2      	subs	r2, r2, r3
   157bc:	08d2      	lsrs	r2, r2, #3
   157be:	0192      	lsls	r2, r2, #6
}
   157c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   157c4:	f042 0201 	orr.w	r2, r2, #1
   157c8:	f012 b975 	b.w	27ab6 <log_1>
   157cc:	0002ccb8 	.word	0x0002ccb8
   157d0:	0002cce8 	.word	0x0002cce8
   157d4:	0002f320 	.word	0x0002f320

000157d8 <hci_vendor_event>:
{
   157d8:	b510      	push	{r4, lr}
   157da:	4a0a      	ldr	r2, [pc, #40]	; (15804 <hci_vendor_event+0x2c>)
   157dc:	4c0a      	ldr	r4, [pc, #40]	; (15808 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   157de:	8981      	ldrh	r1, [r0, #12]
   157e0:	6880      	ldr	r0, [r0, #8]
   157e2:	1aa4      	subs	r4, r4, r2
   157e4:	f7ff fb0e 	bl	14e04 <bt_hex_real>
   157e8:	f7fc f914 	bl	11a14 <z_log_strdup>
   157ec:	08e4      	lsrs	r4, r4, #3
   157ee:	01a4      	lsls	r4, r4, #6
   157f0:	f044 0402 	orr.w	r4, r4, #2
   157f4:	4601      	mov	r1, r0
   157f6:	4622      	mov	r2, r4
   157f8:	4804      	ldr	r0, [pc, #16]	; (1580c <hci_vendor_event+0x34>)
}
   157fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   157fe:	f012 b95a 	b.w	27ab6 <log_1>
   15802:	bf00      	nop
   15804:	0002ccb8 	.word	0x0002ccb8
   15808:	0002cce8 	.word	0x0002cce8
   1580c:	0002f342 	.word	0x0002f342

00015810 <hci_encrypt_key_refresh_complete>:
{
   15810:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   15812:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15814:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   15818:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1581a:	4630      	mov	r0, r6
   1581c:	f002 fbea 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   15820:	4604      	mov	r4, r0
   15822:	b960      	cbnz	r0, 1583e <hci_encrypt_key_refresh_complete+0x2e>
   15824:	4a1e      	ldr	r2, [pc, #120]	; (158a0 <hci_encrypt_key_refresh_complete+0x90>)
   15826:	4b1f      	ldr	r3, [pc, #124]	; (158a4 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   15828:	481f      	ldr	r0, [pc, #124]	; (158a8 <hci_encrypt_key_refresh_complete+0x98>)
   1582a:	1ad2      	subs	r2, r2, r3
   1582c:	08d2      	lsrs	r2, r2, #3
   1582e:	0192      	lsls	r2, r2, #6
   15830:	4631      	mov	r1, r6
   15832:	f042 0201 	orr.w	r2, r2, #1
}
   15836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1583a:	f012 b93c 	b.w	27ab6 <log_1>
	if (status) {
   1583e:	b165      	cbz	r5, 1585a <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
   15840:	2d29      	cmp	r5, #41	; 0x29
   15842:	bf96      	itet	ls
   15844:	4b19      	ldrls	r3, [pc, #100]	; (158ac <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   15846:	2208      	movhi	r2, #8
   15848:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   1584a:	4629      	mov	r1, r5
   1584c:	f002 fd60 	bl	18310 <bt_conn_security_changed>
	bt_conn_unref(conn);
   15850:	4620      	mov	r0, r4
}
   15852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15856:	f002 bb95 	b.w	17f84 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1585a:	7883      	ldrb	r3, [r0, #2]
   1585c:	2b01      	cmp	r3, #1
   1585e:	d107      	bne.n	15870 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
   15860:	f007 fa12 	bl	1cc88 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15864:	4620      	mov	r0, r4
   15866:	f014 fa38 	bl	29cda <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1586a:	2800      	cmp	r0, #0
   1586c:	bf08      	it	eq
   1586e:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15870:	4b0e      	ldr	r3, [pc, #56]	; (158ac <hci_encrypt_key_refresh_complete+0x9c>)
   15872:	4629      	mov	r1, r5
   15874:	5d5a      	ldrb	r2, [r3, r5]
   15876:	4620      	mov	r0, r4
   15878:	f002 fd4a 	bl	18310 <bt_conn_security_changed>
	if (status) {
   1587c:	2d00      	cmp	r5, #0
   1587e:	d0e7      	beq.n	15850 <hci_encrypt_key_refresh_complete+0x40>
   15880:	4b08      	ldr	r3, [pc, #32]	; (158a4 <hci_encrypt_key_refresh_complete+0x94>)
   15882:	4907      	ldr	r1, [pc, #28]	; (158a0 <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   15884:	480a      	ldr	r0, [pc, #40]	; (158b0 <hci_encrypt_key_refresh_complete+0xa0>)
   15886:	1ac9      	subs	r1, r1, r3
   15888:	08c9      	lsrs	r1, r1, #3
   1588a:	0189      	lsls	r1, r1, #6
   1588c:	f041 0101 	orr.w	r1, r1, #1
   15890:	f012 f904 	bl	27a9c <log_0>
		bt_conn_disconnect(conn, status);
   15894:	4629      	mov	r1, r5
   15896:	4620      	mov	r0, r4
   15898:	f014 fd24 	bl	2a2e4 <bt_conn_disconnect>
   1589c:	e7d8      	b.n	15850 <hci_encrypt_key_refresh_complete+0x40>
   1589e:	bf00      	nop
   158a0:	0002cce8 	.word	0x0002cce8
   158a4:	0002ccb8 	.word	0x0002ccb8
   158a8:	0002f2d6 	.word	0x0002f2d6
   158ac:	0002f8d7 	.word	0x0002f8d7
   158b0:	0002f366 	.word	0x0002f366

000158b4 <hci_encrypt_change>:
{
   158b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   158b6:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   158b8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   158bc:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   158be:	4638      	mov	r0, r7
   158c0:	f002 fb98 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   158c4:	4604      	mov	r4, r0
   158c6:	b960      	cbnz	r0, 158e2 <hci_encrypt_change+0x2e>
   158c8:	4b1f      	ldr	r3, [pc, #124]	; (15948 <hci_encrypt_change+0x94>)
   158ca:	4a20      	ldr	r2, [pc, #128]	; (1594c <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   158cc:	4820      	ldr	r0, [pc, #128]	; (15950 <hci_encrypt_change+0x9c>)
   158ce:	1ad2      	subs	r2, r2, r3
   158d0:	08d2      	lsrs	r2, r2, #3
   158d2:	0192      	lsls	r2, r2, #6
   158d4:	4639      	mov	r1, r7
   158d6:	f042 0201 	orr.w	r2, r2, #1
}
   158da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   158de:	f012 b8ea 	b.w	27ab6 <log_1>
	if (status) {
   158e2:	b165      	cbz	r5, 158fe <hci_encrypt_change+0x4a>
	switch (hci_err) {
   158e4:	2d29      	cmp	r5, #41	; 0x29
   158e6:	bf96      	itet	ls
   158e8:	4b1a      	ldrls	r3, [pc, #104]	; (15954 <hci_encrypt_change+0xa0>)
	if (status) {
   158ea:	2208      	movhi	r2, #8
   158ec:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   158ee:	4629      	mov	r1, r5
   158f0:	f002 fd0e 	bl	18310 <bt_conn_security_changed>
	bt_conn_unref(conn);
   158f4:	4620      	mov	r0, r4
}
   158f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   158fa:	f002 bb43 	b.w	17f84 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   158fe:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   15900:	78f3      	ldrb	r3, [r6, #3]
   15902:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   15904:	2a01      	cmp	r2, #1
   15906:	d108      	bne.n	1591a <hci_encrypt_change+0x66>
		if (conn->encrypt) {
   15908:	b10b      	cbz	r3, 1590e <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   1590a:	f007 f9bd 	bl	1cc88 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1590e:	4620      	mov	r0, r4
   15910:	f014 f9e3 	bl	29cda <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   15914:	2800      	cmp	r0, #0
   15916:	bf08      	it	eq
   15918:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1591a:	4b0e      	ldr	r3, [pc, #56]	; (15954 <hci_encrypt_change+0xa0>)
   1591c:	4629      	mov	r1, r5
   1591e:	5d5a      	ldrb	r2, [r3, r5]
   15920:	4620      	mov	r0, r4
   15922:	f002 fcf5 	bl	18310 <bt_conn_security_changed>
	if (status) {
   15926:	2d00      	cmp	r5, #0
   15928:	d0e4      	beq.n	158f4 <hci_encrypt_change+0x40>
   1592a:	4b07      	ldr	r3, [pc, #28]	; (15948 <hci_encrypt_change+0x94>)
   1592c:	4907      	ldr	r1, [pc, #28]	; (1594c <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
   1592e:	480a      	ldr	r0, [pc, #40]	; (15958 <hci_encrypt_change+0xa4>)
   15930:	1ac9      	subs	r1, r1, r3
   15932:	08c9      	lsrs	r1, r1, #3
   15934:	0189      	lsls	r1, r1, #6
   15936:	f041 0101 	orr.w	r1, r1, #1
   1593a:	f012 f8af 	bl	27a9c <log_0>
		bt_conn_disconnect(conn, status);
   1593e:	4629      	mov	r1, r5
   15940:	4620      	mov	r0, r4
   15942:	f014 fccf 	bl	2a2e4 <bt_conn_disconnect>
   15946:	e7d5      	b.n	158f4 <hci_encrypt_change+0x40>
   15948:	0002ccb8 	.word	0x0002ccb8
   1594c:	0002cce8 	.word	0x0002cce8
   15950:	0002f2d6 	.word	0x0002f2d6
   15954:	0002f8d7 	.word	0x0002f8d7
   15958:	0002f366 	.word	0x0002f366

0001595c <le_conn_update_complete>:
{
   1595c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1595e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15960:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15964:	4630      	mov	r0, r6
   15966:	f002 fb45 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   1596a:	4604      	mov	r4, r0
   1596c:	b960      	cbnz	r0, 15988 <le_conn_update_complete+0x2c>
   1596e:	4a1f      	ldr	r2, [pc, #124]	; (159ec <le_conn_update_complete+0x90>)
   15970:	4b1f      	ldr	r3, [pc, #124]	; (159f0 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15972:	4820      	ldr	r0, [pc, #128]	; (159f4 <le_conn_update_complete+0x98>)
   15974:	1ad2      	subs	r2, r2, r3
   15976:	08d2      	lsrs	r2, r2, #3
   15978:	0192      	lsls	r2, r2, #6
   1597a:	f042 0201 	orr.w	r2, r2, #1
   1597e:	4631      	mov	r1, r6
   15980:	f012 f899 	bl	27ab6 <log_1>
}
   15984:	b002      	add	sp, #8
   15986:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   15988:	782b      	ldrb	r3, [r5, #0]
   1598a:	b9bb      	cbnz	r3, 159bc <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1598c:	792a      	ldrb	r2, [r5, #4]
   1598e:	78eb      	ldrb	r3, [r5, #3]
   15990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15994:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   15998:	79aa      	ldrb	r2, [r5, #6]
   1599a:	796b      	ldrb	r3, [r5, #5]
   1599c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   159a0:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   159a4:	79eb      	ldrb	r3, [r5, #7]
   159a6:	7a2a      	ldrb	r2, [r5, #8]
   159a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   159ac:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   159b0:	f002 fc3c 	bl	1822c <notify_le_param_updated>
	bt_conn_unref(conn);
   159b4:	4620      	mov	r0, r4
   159b6:	f002 fae5 	bl	17f84 <bt_conn_unref>
   159ba:	e7e3      	b.n	15984 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   159bc:	2b1a      	cmp	r3, #26
   159be:	d1f9      	bne.n	159b4 <le_conn_update_complete+0x58>
   159c0:	78c3      	ldrb	r3, [r0, #3]
   159c2:	2b01      	cmp	r3, #1
   159c4:	d1f6      	bne.n	159b4 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   159c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   159ca:	3004      	adds	r0, #4
   159cc:	f014 f99d 	bl	29d0a <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   159d0:	0543      	lsls	r3, r0, #21
   159d2:	d4ef      	bmi.n	159b4 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   159d4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   159d8:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   159da:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   159dc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   159e0:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   159e2:	4620      	mov	r0, r4
   159e4:	f003 f888 	bl	18af8 <bt_l2cap_update_conn_param>
   159e8:	e7e4      	b.n	159b4 <le_conn_update_complete+0x58>
   159ea:	bf00      	nop
   159ec:	0002cce8 	.word	0x0002cce8
   159f0:	0002ccb8 	.word	0x0002ccb8
   159f4:	0002f2fc 	.word	0x0002f2fc

000159f8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   159f8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   159fa:	4c0c      	ldr	r4, [pc, #48]	; (15a2c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   159fc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   159fe:	2205      	movs	r2, #5
   15a00:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   15a04:	f002 fd02 	bl	1840c <bt_conn_lookup_state_le>
		if (!conn) {
   15a08:	b970      	cbnz	r0, 15a28 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   15a0a:	4b09      	ldr	r3, [pc, #36]	; (15a30 <find_pending_connect.part.0+0x38>)
   15a0c:	6818      	ldr	r0, [r3, #0]
   15a0e:	889a      	ldrh	r2, [r3, #4]
   15a10:	9000      	str	r0, [sp, #0]
   15a12:	799b      	ldrb	r3, [r3, #6]
   15a14:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15a18:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   15a1c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15a20:	2204      	movs	r2, #4
   15a22:	4669      	mov	r1, sp
   15a24:	f002 fcf2 	bl	1840c <bt_conn_lookup_state_le>
}
   15a28:	b002      	add	sp, #8
   15a2a:	bd10      	pop	{r4, pc}
   15a2c:	200002b8 	.word	0x200002b8
   15a30:	0002cea4 	.word	0x0002cea4

00015a34 <hci_cmd_done>:
{
   15a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a38:	4607      	mov	r7, r0
   15a3a:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15a3c:	7990      	ldrb	r0, [r2, #6]
   15a3e:	4e40      	ldr	r6, [pc, #256]	; (15b40 <hci_cmd_done+0x10c>)
{
   15a40:	4688      	mov	r8, r1
   15a42:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15a44:	f007 fb5e 	bl	1d104 <net_buf_pool_get>
   15a48:	4286      	cmp	r6, r0
   15a4a:	d016      	beq.n	15a7a <hci_cmd_done+0x46>
   15a4c:	4b3d      	ldr	r3, [pc, #244]	; (15b44 <hci_cmd_done+0x110>)
   15a4e:	4d3e      	ldr	r5, [pc, #248]	; (15b48 <hci_cmd_done+0x114>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   15a50:	79a0      	ldrb	r0, [r4, #6]
   15a52:	9700      	str	r7, [sp, #0]
   15a54:	1aed      	subs	r5, r5, r3
   15a56:	08ed      	lsrs	r5, r5, #3
   15a58:	9001      	str	r0, [sp, #4]
   15a5a:	f007 fb53 	bl	1d104 <net_buf_pool_get>
   15a5e:	01ad      	lsls	r5, r5, #6
   15a60:	f045 0502 	orr.w	r5, r5, #2
   15a64:	e9cd 0602 	strd	r0, r6, [sp, #8]
   15a68:	462b      	mov	r3, r5
   15a6a:	4838      	ldr	r0, [pc, #224]	; (15b4c <hci_cmd_done+0x118>)
   15a6c:	2204      	movs	r2, #4
   15a6e:	4669      	mov	r1, sp
   15a70:	f012 f86a 	bl	27b48 <log_n>
}
   15a74:	b005      	add	sp, #20
   15a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   15a7a:	4620      	mov	r0, r4
   15a7c:	f007 fb4a 	bl	1d114 <net_buf_id>
   15a80:	4d33      	ldr	r5, [pc, #204]	; (15b50 <hci_cmd_done+0x11c>)
   15a82:	f04f 090c 	mov.w	r9, #12
   15a86:	fb09 5300 	mla	r3, r9, r0, r5
   15a8a:	885b      	ldrh	r3, [r3, #2]
   15a8c:	42bb      	cmp	r3, r7
   15a8e:	d011      	beq.n	15ab4 <hci_cmd_done+0x80>
   15a90:	4b2c      	ldr	r3, [pc, #176]	; (15b44 <hci_cmd_done+0x110>)
   15a92:	4e2d      	ldr	r6, [pc, #180]	; (15b48 <hci_cmd_done+0x114>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   15a94:	4620      	mov	r0, r4
   15a96:	1af6      	subs	r6, r6, r3
   15a98:	f007 fb3c 	bl	1d114 <net_buf_id>
   15a9c:	08f6      	lsrs	r6, r6, #3
   15a9e:	fb09 5000 	mla	r0, r9, r0, r5
   15aa2:	01b6      	lsls	r6, r6, #6
   15aa4:	f046 0602 	orr.w	r6, r6, #2
   15aa8:	8842      	ldrh	r2, [r0, #2]
   15aaa:	482a      	ldr	r0, [pc, #168]	; (15b54 <hci_cmd_done+0x120>)
   15aac:	4633      	mov	r3, r6
   15aae:	4639      	mov	r1, r7
   15ab0:	f012 f815 	bl	27ade <log_2>
	if (cmd(buf)->state && !status) {
   15ab4:	4620      	mov	r0, r4
   15ab6:	f007 fb2d 	bl	1d114 <net_buf_id>
   15aba:	260c      	movs	r6, #12
   15abc:	fb06 5000 	mla	r0, r6, r0, r5
   15ac0:	6843      	ldr	r3, [r0, #4]
   15ac2:	b1ab      	cbz	r3, 15af0 <hci_cmd_done+0xbc>
   15ac4:	f1b8 0f00 	cmp.w	r8, #0
   15ac8:	d112      	bne.n	15af0 <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   15aca:	4620      	mov	r0, r4
   15acc:	f007 fb22 	bl	1d114 <net_buf_id>
   15ad0:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   15ad4:	2101      	movs	r1, #1
   15ad6:	6842      	ldr	r2, [r0, #4]
   15ad8:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (val) {
   15adc:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   15ade:	f000 061f 	and.w	r6, r0, #31
   15ae2:	40b1      	lsls	r1, r6
	if (val) {
   15ae4:	0940      	lsrs	r0, r0, #5
   15ae6:	b1da      	cbz	r2, 15b20 <hci_cmd_done+0xec>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15ae8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15aec:	f014 f90d 	bl	29d0a <atomic_or>
	if (cmd(buf)->sync) {
   15af0:	4620      	mov	r0, r4
   15af2:	f007 fb0f 	bl	1d114 <net_buf_id>
   15af6:	260c      	movs	r6, #12
   15af8:	fb06 5000 	mla	r0, r6, r0, r5
   15afc:	6883      	ldr	r3, [r0, #8]
   15afe:	2b00      	cmp	r3, #0
   15b00:	d0b8      	beq.n	15a74 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   15b02:	4620      	mov	r0, r4
   15b04:	f007 fb06 	bl	1d114 <net_buf_id>
   15b08:	4370      	muls	r0, r6
   15b0a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15b0e:	4620      	mov	r0, r4
   15b10:	f007 fb00 	bl	1d114 <net_buf_id>
   15b14:	fb06 5500 	mla	r5, r6, r0, r5
   15b18:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   15b1a:	f00b ff0f 	bl	2193c <z_impl_k_sem_give>
}
   15b1e:	e7a9      	b.n	15a74 <hci_cmd_done+0x40>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15b20:	43c9      	mvns	r1, r1
   15b22:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   15b26:	f3bf 8f5b 	dmb	ish
   15b2a:	e853 2f00 	ldrex	r2, [r3]
   15b2e:	400a      	ands	r2, r1
   15b30:	e843 2000 	strex	r0, r2, [r3]
   15b34:	2800      	cmp	r0, #0
   15b36:	d1f8      	bne.n	15b2a <hci_cmd_done+0xf6>
   15b38:	f3bf 8f5b 	dmb	ish
   15b3c:	e7d8      	b.n	15af0 <hci_cmd_done+0xbc>
   15b3e:	bf00      	nop
   15b40:	200009ac 	.word	0x200009ac
   15b44:	0002ccb8 	.word	0x0002ccb8
   15b48:	0002cce8 	.word	0x0002cce8
   15b4c:	0002f38c 	.word	0x0002f38c
   15b50:	20003014 	.word	0x20003014
   15b54:	0002f3c1 	.word	0x0002f3c1

00015b58 <handle_event>:
{
   15b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15b5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15b5e:	4605      	mov	r5, r0
   15b60:	4608      	mov	r0, r1
		if (handler->event != event) {
   15b62:	7811      	ldrb	r1, [r2, #0]
   15b64:	42a9      	cmp	r1, r5
   15b66:	d01a      	beq.n	15b9e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   15b68:	3208      	adds	r2, #8
   15b6a:	429a      	cmp	r2, r3
   15b6c:	d1f9      	bne.n	15b62 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15b6e:	8986      	ldrh	r6, [r0, #12]
   15b70:	4b16      	ldr	r3, [pc, #88]	; (15bcc <handle_event+0x74>)
   15b72:	4c17      	ldr	r4, [pc, #92]	; (15bd0 <handle_event+0x78>)
   15b74:	6880      	ldr	r0, [r0, #8]
   15b76:	4631      	mov	r1, r6
   15b78:	1ae4      	subs	r4, r4, r3
   15b7a:	f7ff f943 	bl	14e04 <bt_hex_real>
   15b7e:	f7fb ff49 	bl	11a14 <z_log_strdup>
   15b82:	08e4      	lsrs	r4, r4, #3
   15b84:	01a4      	lsls	r4, r4, #6
   15b86:	f044 0402 	orr.w	r4, r4, #2
   15b8a:	4603      	mov	r3, r0
   15b8c:	f8ad 4000 	strh.w	r4, [sp]
   15b90:	4810      	ldr	r0, [pc, #64]	; (15bd4 <handle_event+0x7c>)
   15b92:	4632      	mov	r2, r6
   15b94:	4629      	mov	r1, r5
   15b96:	f011 ffbb 	bl	27b10 <log_3>
}
   15b9a:	b002      	add	sp, #8
   15b9c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   15b9e:	8981      	ldrh	r1, [r0, #12]
   15ba0:	7853      	ldrb	r3, [r2, #1]
   15ba2:	428b      	cmp	r3, r1
   15ba4:	d90d      	bls.n	15bc2 <handle_event+0x6a>
   15ba6:	4a09      	ldr	r2, [pc, #36]	; (15bcc <handle_event+0x74>)
   15ba8:	4b09      	ldr	r3, [pc, #36]	; (15bd0 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15baa:	480b      	ldr	r0, [pc, #44]	; (15bd8 <handle_event+0x80>)
   15bac:	1a9b      	subs	r3, r3, r2
   15bae:	08db      	lsrs	r3, r3, #3
   15bb0:	019b      	lsls	r3, r3, #6
   15bb2:	f043 0301 	orr.w	r3, r3, #1
   15bb6:	462a      	mov	r2, r5
}
   15bb8:	b002      	add	sp, #8
   15bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15bbe:	f011 bf8e 	b.w	27ade <log_2>
		handler->handler(buf);
   15bc2:	6853      	ldr	r3, [r2, #4]
}
   15bc4:	b002      	add	sp, #8
   15bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   15bca:	4718      	bx	r3
   15bcc:	0002ccb8 	.word	0x0002ccb8
   15bd0:	0002cce8 	.word	0x0002cce8
   15bd4:	0002f416 	.word	0x0002f416
   15bd8:	0002f3f4 	.word	0x0002f3f4

00015bdc <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   15bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15be0:	4b47      	ldr	r3, [pc, #284]	; (15d00 <hci_rx_thread+0x124>)
   15be2:	4d48      	ldr	r5, [pc, #288]	; (15d04 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15be4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 15d24 <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15be8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 15d28 <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15bec:	4f46      	ldr	r7, [pc, #280]	; (15d08 <hci_rx_thread+0x12c>)
   15bee:	1aed      	subs	r5, r5, r3
   15bf0:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15bf2:	f04f 32ff 	mov.w	r2, #4294967295
   15bf6:	f04f 33ff 	mov.w	r3, #4294967295
   15bfa:	4640      	mov	r0, r8
   15bfc:	f007 fb90 	bl	1d320 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15c00:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   15c02:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15c04:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   15c06:	d046      	beq.n	15c96 <hci_rx_thread+0xba>
   15c08:	2903      	cmp	r1, #3
   15c0a:	d173      	bne.n	15cf4 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15c0c:	8983      	ldrh	r3, [r0, #12]
   15c0e:	2b03      	cmp	r3, #3
   15c10:	d80c      	bhi.n	15c2c <hci_rx_thread+0x50>
   15c12:	493e      	ldr	r1, [pc, #248]	; (15d0c <hci_rx_thread+0x130>)
   15c14:	483e      	ldr	r0, [pc, #248]	; (15d10 <hci_rx_thread+0x134>)
   15c16:	f240 1377 	movw	r3, #375	; 0x177
   15c1a:	463a      	mov	r2, r7
   15c1c:	f011 fc6b 	bl	274f6 <printk>
   15c20:	4040      	eors	r0, r0
   15c22:	f380 8811 	msr	BASEPRI, r0
   15c26:	f04f 0003 	mov.w	r0, #3
   15c2a:	df02      	svc	2
   15c2c:	2104      	movs	r1, #4
   15c2e:	f104 0008 	add.w	r0, r4, #8
   15c32:	f007 fd15 	bl	1d660 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15c36:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   15c38:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15c3a:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15c3e:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   15c40:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   15c44:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   15c46:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15c48:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   15c4a:	d009      	beq.n	15c60 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15c4c:	01ab      	lsls	r3, r5, #6
   15c4e:	4831      	ldr	r0, [pc, #196]	; (15d14 <hci_rx_thread+0x138>)
   15c50:	f043 0301 	orr.w	r3, r3, #1
   15c54:	f011 ff43 	bl	27ade <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   15c58:	4620      	mov	r0, r4
   15c5a:	f007 fbf3 	bl	1d444 <net_buf_unref>
			break;
   15c5e:	e017      	b.n	15c90 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15c60:	f002 f9c8 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   15c64:	4606      	mov	r6, r0
   15c66:	b938      	cbnz	r0, 15c78 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15c68:	01aa      	lsls	r2, r5, #6
   15c6a:	8ae1      	ldrh	r1, [r4, #22]
   15c6c:	482a      	ldr	r0, [pc, #168]	; (15d18 <hci_rx_thread+0x13c>)
   15c6e:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15c72:	f011 ff20 	bl	27ab6 <log_1>
   15c76:	e7ef      	b.n	15c58 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   15c78:	f002 fab2 	bl	181e0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15c7c:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   15c80:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   15c82:	4621      	mov	r1, r4
   15c84:	4630      	mov	r0, r6
   15c86:	f002 f851 	bl	17d2c <bt_conn_recv>
	bt_conn_unref(conn);
   15c8a:	4630      	mov	r0, r6
   15c8c:	f002 f97a 	bl	17f84 <bt_conn_unref>
	z_impl_k_yield();
   15c90:	f00d fc06 	bl	234a0 <z_impl_k_yield>
	while (1) {
   15c94:	e7ad      	b.n	15bf2 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15c96:	8983      	ldrh	r3, [r0, #12]
   15c98:	2b01      	cmp	r3, #1
   15c9a:	d80c      	bhi.n	15cb6 <hci_rx_thread+0xda>
   15c9c:	491b      	ldr	r1, [pc, #108]	; (15d0c <hci_rx_thread+0x130>)
   15c9e:	481c      	ldr	r0, [pc, #112]	; (15d10 <hci_rx_thread+0x134>)
   15ca0:	f640 1303 	movw	r3, #2307	; 0x903
   15ca4:	463a      	mov	r2, r7
   15ca6:	f011 fc26 	bl	274f6 <printk>
   15caa:	4040      	eors	r0, r0
   15cac:	f380 8811 	msr	BASEPRI, r0
   15cb0:	f04f 0003 	mov.w	r0, #3
   15cb4:	df02      	svc	2
   15cb6:	2102      	movs	r1, #2
   15cb8:	f104 0008 	add.w	r0, r4, #8
   15cbc:	f007 fcd0 	bl	1d660 <net_buf_simple_pull_mem>
   15cc0:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15cc2:	7800      	ldrb	r0, [r0, #0]
   15cc4:	f013 fff7 	bl	29cb6 <bt_hci_evt_get_flags>
   15cc8:	0783      	lsls	r3, r0, #30
   15cca:	d40c      	bmi.n	15ce6 <hci_rx_thread+0x10a>
   15ccc:	4913      	ldr	r1, [pc, #76]	; (15d1c <hci_rx_thread+0x140>)
   15cce:	4810      	ldr	r0, [pc, #64]	; (15d10 <hci_rx_thread+0x134>)
   15cd0:	f640 1307 	movw	r3, #2311	; 0x907
   15cd4:	463a      	mov	r2, r7
   15cd6:	f011 fc0e 	bl	274f6 <printk>
   15cda:	4040      	eors	r0, r0
   15cdc:	f380 8811 	msr	BASEPRI, r0
   15ce0:	f04f 0003 	mov.w	r0, #3
   15ce4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15ce6:	7830      	ldrb	r0, [r6, #0]
   15ce8:	2306      	movs	r3, #6
   15cea:	464a      	mov	r2, r9
   15cec:	4621      	mov	r1, r4
   15cee:	f7ff ff33 	bl	15b58 <handle_event>
	net_buf_unref(buf);
   15cf2:	e7b1      	b.n	15c58 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15cf4:	01aa      	lsls	r2, r5, #6
   15cf6:	480a      	ldr	r0, [pc, #40]	; (15d20 <hci_rx_thread+0x144>)
   15cf8:	f042 0201 	orr.w	r2, r2, #1
   15cfc:	e7b9      	b.n	15c72 <hci_rx_thread+0x96>
   15cfe:	bf00      	nop
   15d00:	0002ccb8 	.word	0x0002ccb8
   15d04:	0002cce8 	.word	0x0002cce8
   15d08:	0002f438 	.word	0x0002f438
   15d0c:	0002f46c 	.word	0x0002f46c
   15d10:	0002dcd3 	.word	0x0002dcd3
   15d14:	0002f485 	.word	0x0002f485
   15d18:	0002f4a9 	.word	0x0002f4a9
   15d1c:	0002f4cb 	.word	0x0002f4cb
   15d20:	0002f4f9 	.word	0x0002f4f9
   15d24:	200003c4 	.word	0x200003c4
   15d28:	0002d2f0 	.word	0x0002d2f0

00015d2c <hci_le_meta_event>:
{
   15d2c:	b510      	push	{r4, lr}
   15d2e:	2101      	movs	r1, #1
   15d30:	4604      	mov	r4, r0
   15d32:	3008      	adds	r0, #8
   15d34:	f007 fc94 	bl	1d660 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15d38:	4621      	mov	r1, r4
   15d3a:	4a03      	ldr	r2, [pc, #12]	; (15d48 <hci_le_meta_event+0x1c>)
   15d3c:	7800      	ldrb	r0, [r0, #0]
}
   15d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15d42:	230a      	movs	r3, #10
   15d44:	f7ff bf08 	b.w	15b58 <handle_event>
   15d48:	0002d280 	.word	0x0002d280

00015d4c <hci_num_completed_packets>:
{
   15d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d50:	4d39      	ldr	r5, [pc, #228]	; (15e38 <hci_num_completed_packets+0xec>)
   15d52:	4b3a      	ldr	r3, [pc, #232]	; (15e3c <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   15d54:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   15d58:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 15e44 <hci_num_completed_packets+0xf8>
   15d5c:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   15d5e:	2600      	movs	r6, #0
   15d60:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   15d62:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   15d64:	f898 3000 	ldrb.w	r3, [r8]
   15d68:	429e      	cmp	r6, r3
   15d6a:	db01      	blt.n	15d70 <hci_num_completed_packets+0x24>
}
   15d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   15d70:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   15d74:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   15d78:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   15d7c:	4658      	mov	r0, fp
   15d7e:	f002 f939 	bl	17ff4 <bt_conn_lookup_handle>
		if (!conn) {
   15d82:	4604      	mov	r4, r0
   15d84:	b1d8      	cbz	r0, 15dbe <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   15d86:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   15d8a:	2f00      	cmp	r7, #0
   15d8c:	d033      	beq.n	15df6 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   15d8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15d92:	f3ef 8211 	mrs	r2, BASEPRI
   15d96:	f383 8811 	msr	BASEPRI, r3
   15d9a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   15d9e:	69e3      	ldr	r3, [r4, #28]
   15da0:	b1b3      	cbz	r3, 15dd0 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   15da2:	3b01      	subs	r3, #1
   15da4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15da6:	f382 8811 	msr	BASEPRI, r2
   15daa:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   15dae:	4620      	mov	r0, r4
   15db0:	f001 ff3c 	bl	17c2c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   15db4:	3f01      	subs	r7, #1
   15db6:	f00b fdc1 	bl	2193c <z_impl_k_sem_give>
   15dba:	b2bf      	uxth	r7, r7
   15dbc:	e7e5      	b.n	15d8a <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   15dbe:	01aa      	lsls	r2, r5, #6
   15dc0:	481f      	ldr	r0, [pc, #124]	; (15e40 <hci_num_completed_packets+0xf4>)
   15dc2:	f042 0201 	orr.w	r2, r2, #1
   15dc6:	4659      	mov	r1, fp
   15dc8:	f011 fe75 	bl	27ab6 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   15dcc:	3601      	adds	r6, #1
   15dce:	e7c9      	b.n	15d64 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   15dd0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15dd2:	b12b      	cbz	r3, 15de0 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15dd4:	69a1      	ldr	r1, [r4, #24]
   15dd6:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   15dd8:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15dda:	428b      	cmp	r3, r1
	list->tail = node;
   15ddc:	bf08      	it	eq
   15dde:	61a0      	streq	r0, [r4, #24]
   15de0:	f382 8811 	msr	BASEPRI, r2
   15de4:	f3bf 8f6f 	isb	sy
			if (!node) {
   15de8:	b94b      	cbnz	r3, 15dfe <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   15dea:	01a9      	lsls	r1, r5, #6
   15dec:	f041 0101 	orr.w	r1, r1, #1
   15df0:	4650      	mov	r0, sl
   15df2:	f011 fe53 	bl	27a9c <log_0>
		bt_conn_unref(conn);
   15df6:	4620      	mov	r0, r4
   15df8:	f002 f8c4 	bl	17f84 <bt_conn_unref>
   15dfc:	e7e6      	b.n	15dcc <hci_num_completed_packets+0x80>
	__asm__ volatile(
   15dfe:	f04f 0240 	mov.w	r2, #64	; 0x40
   15e02:	f3ef 8111 	mrs	r1, BASEPRI
   15e06:	f382 8811 	msr	BASEPRI, r2
   15e0a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   15e0e:	68da      	ldr	r2, [r3, #12]
   15e10:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   15e12:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   15e16:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   15e18:	f8c3 900c 	str.w	r9, [r3, #12]
   15e1c:	b94a      	cbnz	r2, 15e32 <hci_num_completed_packets+0xe6>
	list->head = node;
   15e1e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   15e22:	f381 8811 	msr	BASEPRI, r1
   15e26:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   15e2a:	4658      	mov	r0, fp
   15e2c:	f00c f926 	bl	2207c <k_work_submit>
   15e30:	e7bd      	b.n	15dae <hci_num_completed_packets+0x62>
	parent->next = child;
   15e32:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15e34:	6263      	str	r3, [r4, #36]	; 0x24
}
   15e36:	e7f4      	b.n	15e22 <hci_num_completed_packets+0xd6>
   15e38:	0002cce8 	.word	0x0002cce8
   15e3c:	0002ccb8 	.word	0x0002ccb8
   15e40:	0002f50d 	.word	0x0002f50d
   15e44:	0002f529 	.word	0x0002f529

00015e48 <hci_tx_thread>:
{
   15e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e4c:	4d51      	ldr	r5, [pc, #324]	; (15f94 <hci_tx_thread+0x14c>)
   15e4e:	4b52      	ldr	r3, [pc, #328]	; (15f98 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   15e50:	f8df 914c 	ldr.w	r9, [pc, #332]	; 15fa0 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   15e54:	f8df a174 	ldr.w	sl, [pc, #372]	; 15fcc <hci_tx_thread+0x184>
   15e58:	1aed      	subs	r5, r5, r3
   15e5a:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   15e5c:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15e60:	484e      	ldr	r0, [pc, #312]	; (15f9c <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   15e62:	f36f 3352 	bfc	r3, #13, #6
   15e66:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15e6a:	f002 f84d 	bl	17f08 <bt_conn_prepare_events>
   15e6e:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   15e70:	484b      	ldr	r0, [pc, #300]	; (15fa0 <hci_tx_thread+0x158>)
   15e72:	f04f 32ff 	mov.w	r2, #4294967295
   15e76:	f04f 33ff 	mov.w	r3, #4294967295
   15e7a:	4639      	mov	r1, r7
   15e7c:	f00e fc4c 	bl	24718 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15e80:	b160      	cbz	r0, 15e9c <hci_tx_thread+0x54>
   15e82:	4948      	ldr	r1, [pc, #288]	; (15fa4 <hci_tx_thread+0x15c>)
   15e84:	4848      	ldr	r0, [pc, #288]	; (15fa8 <hci_tx_thread+0x160>)
   15e86:	f640 1379 	movw	r3, #2425	; 0x979
   15e8a:	4652      	mov	r2, sl
   15e8c:	f011 fb33 	bl	274f6 <printk>
   15e90:	4040      	eors	r0, r0
   15e92:	f380 8811 	msr	BASEPRI, r0
   15e96:	f04f 0003 	mov.w	r0, #3
   15e9a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   15e9c:	4e43      	ldr	r6, [pc, #268]	; (15fac <hci_tx_thread+0x164>)
{
   15e9e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 15fa0 <hci_tx_thread+0x158>
   15ea2:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
   15ea6:	b917      	cbnz	r7, 15eae <hci_tx_thread+0x66>
	z_impl_k_yield();
   15ea8:	f00d fafa 	bl	234a0 <z_impl_k_yield>
	while (1) {
   15eac:	e7d6      	b.n	15e5c <hci_tx_thread+0x14>
		switch (ev->state) {
   15eae:	f8d8 100c 	ldr.w	r1, [r8, #12]
   15eb2:	f3c1 3145 	ubfx	r1, r1, #13, #6
   15eb6:	2901      	cmp	r1, #1
   15eb8:	d959      	bls.n	15f6e <hci_tx_thread+0x126>
   15eba:	2904      	cmp	r1, #4
   15ebc:	d163      	bne.n	15f86 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15ebe:	f898 300c 	ldrb.w	r3, [r8, #12]
   15ec2:	2b00      	cmp	r3, #0
   15ec4:	d157      	bne.n	15f76 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15ec6:	483a      	ldr	r0, [pc, #232]	; (15fb0 <hci_tx_thread+0x168>)
   15ec8:	2200      	movs	r2, #0
   15eca:	2300      	movs	r3, #0
   15ecc:	f007 fa28 	bl	1d320 <net_buf_get>
	BT_ASSERT(buf);
   15ed0:	4604      	mov	r4, r0
   15ed2:	b960      	cbnz	r0, 15eee <hci_tx_thread+0xa6>
   15ed4:	4937      	ldr	r1, [pc, #220]	; (15fb4 <hci_tx_thread+0x16c>)
   15ed6:	4834      	ldr	r0, [pc, #208]	; (15fa8 <hci_tx_thread+0x160>)
   15ed8:	f640 1316 	movw	r3, #2326	; 0x916
   15edc:	4652      	mov	r2, sl
   15ede:	f011 fb0a 	bl	274f6 <printk>
   15ee2:	4040      	eors	r0, r0
   15ee4:	f380 8811 	msr	BASEPRI, r0
   15ee8:	f04f 0003 	mov.w	r0, #3
   15eec:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   15eee:	f04f 33ff 	mov.w	r3, #4294967295
   15ef2:	f04f 32ff 	mov.w	r2, #4294967295
   15ef6:	4658      	mov	r0, fp
   15ef8:	f00b fd64 	bl	219c4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15efc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   15f00:	b163      	cbz	r3, 15f1c <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   15f02:	01a9      	lsls	r1, r5, #6
   15f04:	482c      	ldr	r0, [pc, #176]	; (15fb8 <hci_tx_thread+0x170>)
   15f06:	f041 0101 	orr.w	r1, r1, #1
   15f0a:	f011 fdc7 	bl	27a9c <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   15f0e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   15f12:	f007 fa97 	bl	1d444 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15f16:	2300      	movs	r3, #0
   15f18:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   15f1c:	4620      	mov	r0, r4
   15f1e:	f007 fad7 	bl	1d4d0 <net_buf_ref>
   15f22:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   15f26:	4620      	mov	r0, r4
   15f28:	f7ff f946 	bl	151b8 <bt_hci_ecc_send>
	if (err) {
   15f2c:	4601      	mov	r1, r0
   15f2e:	b1f0      	cbz	r0, 15f6e <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   15f30:	01aa      	lsls	r2, r5, #6
   15f32:	4822      	ldr	r0, [pc, #136]	; (15fbc <hci_tx_thread+0x174>)
   15f34:	f042 0201 	orr.w	r2, r2, #1
   15f38:	f011 fdbd 	bl	27ab6 <log_1>
	z_impl_k_sem_give(sem);
   15f3c:	4820      	ldr	r0, [pc, #128]	; (15fc0 <hci_tx_thread+0x178>)
   15f3e:	f00b fcfd 	bl	2193c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15f42:	4620      	mov	r0, r4
   15f44:	f007 f8e6 	bl	1d114 <net_buf_id>
   15f48:	4b1e      	ldr	r3, [pc, #120]	; (15fc4 <hci_tx_thread+0x17c>)
   15f4a:	220c      	movs	r2, #12
   15f4c:	fb02 3000 	mla	r0, r2, r0, r3
   15f50:	211f      	movs	r1, #31
   15f52:	8840      	ldrh	r0, [r0, #2]
   15f54:	4622      	mov	r2, r4
   15f56:	f7ff fd6d 	bl	15a34 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   15f5a:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   15f5e:	f007 fa71 	bl	1d444 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15f62:	2300      	movs	r3, #0
		net_buf_unref(buf);
   15f64:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   15f66:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
   15f6a:	f007 fa6b 	bl	1d444 <net_buf_unref>
	for (; count; ev++, count--) {
   15f6e:	f108 0814 	add.w	r8, r8, #20
   15f72:	3f01      	subs	r7, #1
   15f74:	e797      	b.n	15ea6 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15f76:	2b01      	cmp	r3, #1
   15f78:	d1f9      	bne.n	15f6e <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   15f7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   15f7e:	3838      	subs	r0, #56	; 0x38
   15f80:	f002 fb5e 	bl	18640 <bt_conn_process_tx>
   15f84:	e7f3      	b.n	15f6e <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   15f86:	01aa      	lsls	r2, r5, #6
   15f88:	480f      	ldr	r0, [pc, #60]	; (15fc8 <hci_tx_thread+0x180>)
   15f8a:	f042 0202 	orr.w	r2, r2, #2
   15f8e:	f011 fd92 	bl	27ab6 <log_1>
   15f92:	e7ec      	b.n	15f6e <hci_tx_thread+0x126>
   15f94:	0002cce8 	.word	0x0002cce8
   15f98:	0002ccb8 	.word	0x0002ccb8
   15f9c:	200004e0 	.word	0x200004e0
   15fa0:	200004cc 	.word	0x200004cc
   15fa4:	0002f540 	.word	0x0002f540
   15fa8:	0002dcd3 	.word	0x0002dcd3
   15fac:	200002b8 	.word	0x200002b8
   15fb0:	200003e0 	.word	0x200003e0
   15fb4:	0002f1b3 	.word	0x0002f1b3
   15fb8:	0002f549 	.word	0x0002f549
   15fbc:	0002f564 	.word	0x0002f564
   15fc0:	200003a8 	.word	0x200003a8
   15fc4:	20003014 	.word	0x20003014
   15fc8:	0002f586 	.word	0x0002f586
   15fcc:	0002f438 	.word	0x0002f438

00015fd0 <hci_cmd_status>:
{
   15fd0:	b538      	push	{r3, r4, r5, lr}
   15fd2:	2104      	movs	r1, #4
   15fd4:	4604      	mov	r4, r0
   15fd6:	3008      	adds	r0, #8
   15fd8:	f007 fb42 	bl	1d660 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15fdc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   15fde:	7801      	ldrb	r1, [r0, #0]
   15fe0:	8840      	ldrh	r0, [r0, #2]
   15fe2:	4622      	mov	r2, r4
   15fe4:	f7ff fd26 	bl	15a34 <hci_cmd_done>
	if (ncmd) {
   15fe8:	b125      	cbz	r5, 15ff4 <hci_cmd_status+0x24>
   15fea:	4803      	ldr	r0, [pc, #12]	; (15ff8 <hci_cmd_status+0x28>)
}
   15fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15ff0:	f00b bca4 	b.w	2193c <z_impl_k_sem_give>
   15ff4:	bd38      	pop	{r3, r4, r5, pc}
   15ff6:	bf00      	nop
   15ff8:	200003a8 	.word	0x200003a8

00015ffc <hci_cmd_complete>:
{
   15ffc:	b538      	push	{r3, r4, r5, lr}
   15ffe:	2103      	movs	r1, #3
   16000:	4604      	mov	r4, r0
   16002:	3008      	adds	r0, #8
   16004:	f007 fb2c 	bl	1d660 <net_buf_simple_pull_mem>
	status = buf->data[0];
   16008:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1600a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1600c:	7819      	ldrb	r1, [r3, #0]
   1600e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16012:	4622      	mov	r2, r4
   16014:	f7ff fd0e 	bl	15a34 <hci_cmd_done>
	if (ncmd) {
   16018:	b125      	cbz	r5, 16024 <hci_cmd_complete+0x28>
   1601a:	4803      	ldr	r0, [pc, #12]	; (16028 <hci_cmd_complete+0x2c>)
}
   1601c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16020:	f00b bc8c 	b.w	2193c <z_impl_k_sem_give>
   16024:	bd38      	pop	{r3, r4, r5, pc}
   16026:	bf00      	nop
   16028:	200003a8 	.word	0x200003a8

0001602c <bt_hci_cmd_state_set_init>:
{
   1602c:	b510      	push	{r4, lr}
	state->bit = bit;
   1602e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16032:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16036:	720b      	strb	r3, [r1, #8]
{
   16038:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1603a:	f007 f86b 	bl	1d114 <net_buf_id>
   1603e:	4b03      	ldr	r3, [pc, #12]	; (1604c <bt_hci_cmd_state_set_init+0x20>)
   16040:	220c      	movs	r2, #12
   16042:	fb02 3000 	mla	r0, r2, r0, r3
   16046:	6044      	str	r4, [r0, #4]
}
   16048:	bd10      	pop	{r4, pc}
   1604a:	bf00      	nop
   1604c:	20003014 	.word	0x20003014

00016050 <bt_hci_cmd_create>:
{
   16050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16054:	f04f 32ff 	mov.w	r2, #4294967295
   16058:	4605      	mov	r5, r0
   1605a:	f04f 33ff 	mov.w	r3, #4294967295
   1605e:	481b      	ldr	r0, [pc, #108]	; (160cc <bt_hci_cmd_create+0x7c>)
   16060:	460e      	mov	r6, r1
   16062:	f015 fc9a 	bl	2b99a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   16066:	4604      	mov	r4, r0
   16068:	b948      	cbnz	r0, 1607e <bt_hci_cmd_create+0x2e>
   1606a:	4919      	ldr	r1, [pc, #100]	; (160d0 <bt_hci_cmd_create+0x80>)
   1606c:	4819      	ldr	r0, [pc, #100]	; (160d4 <bt_hci_cmd_create+0x84>)
   1606e:	4a1a      	ldr	r2, [pc, #104]	; (160d8 <bt_hci_cmd_create+0x88>)
   16070:	23e8      	movs	r3, #232	; 0xe8
   16072:	f011 fa40 	bl	274f6 <printk>
   16076:	4818      	ldr	r0, [pc, #96]	; (160d8 <bt_hci_cmd_create+0x88>)
   16078:	21e8      	movs	r1, #232	; 0xe8
   1607a:	f011 fce1 	bl	27a40 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   1607e:	f104 0b08 	add.w	fp, r4, #8
   16082:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16084:	2700      	movs	r7, #0
   16086:	4658      	mov	r0, fp
   16088:	f007 f97e 	bl	1d388 <net_buf_simple_reserve>
   1608c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1608e:	4620      	mov	r0, r4
   16090:	f007 f840 	bl	1d114 <net_buf_id>
   16094:	f8df 8044 	ldr.w	r8, [pc, #68]	; 160dc <bt_hci_cmd_create+0x8c>
   16098:	f04f 0a0c 	mov.w	sl, #12
   1609c:	fb0a 8000 	mla	r0, sl, r0, r8
   160a0:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   160a2:	4620      	mov	r0, r4
   160a4:	f007 f836 	bl	1d114 <net_buf_id>
   160a8:	fb0a 8000 	mla	r0, sl, r0, r8
   160ac:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   160ae:	4620      	mov	r0, r4
   160b0:	f007 f830 	bl	1d114 <net_buf_id>
   160b4:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   160b8:	2103      	movs	r1, #3
   160ba:	6047      	str	r7, [r0, #4]
   160bc:	4658      	mov	r0, fp
   160be:	f007 faf1 	bl	1d6a4 <net_buf_simple_add>
	hdr->param_len = param_len;
   160c2:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   160c4:	8005      	strh	r5, [r0, #0]
}
   160c6:	4620      	mov	r0, r4
   160c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160cc:	200009ac 	.word	0x200009ac
   160d0:	0002f1b3 	.word	0x0002f1b3
   160d4:	0002dcd3 	.word	0x0002dcd3
   160d8:	0002f438 	.word	0x0002f438
   160dc:	20003014 	.word	0x20003014

000160e0 <bt_hci_cmd_send>:
{
   160e0:	b538      	push	{r3, r4, r5, lr}
   160e2:	4605      	mov	r5, r0
	if (!buf) {
   160e4:	460c      	mov	r4, r1
   160e6:	b919      	cbnz	r1, 160f0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   160e8:	f7ff ffb2 	bl	16050 <bt_hci_cmd_create>
		if (!buf) {
   160ec:	4604      	mov	r4, r0
   160ee:	b1f0      	cbz	r0, 1612e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   160f0:	f640 4335 	movw	r3, #3125	; 0xc35
   160f4:	429d      	cmp	r5, r3
   160f6:	d114      	bne.n	16122 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
   160f8:	4620      	mov	r0, r4
   160fa:	f7ff f85d 	bl	151b8 <bt_hci_ecc_send>
		if (err) {
   160fe:	4605      	mov	r5, r0
   16100:	b168      	cbz	r0, 1611e <bt_hci_cmd_send+0x3e>
   16102:	4b0c      	ldr	r3, [pc, #48]	; (16134 <bt_hci_cmd_send+0x54>)
   16104:	4a0c      	ldr	r2, [pc, #48]	; (16138 <bt_hci_cmd_send+0x58>)
   16106:	1ad2      	subs	r2, r2, r3
   16108:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   1610a:	0192      	lsls	r2, r2, #6
   1610c:	4601      	mov	r1, r0
   1610e:	f042 0201 	orr.w	r2, r2, #1
   16112:	480a      	ldr	r0, [pc, #40]	; (1613c <bt_hci_cmd_send+0x5c>)
   16114:	f011 fccf 	bl	27ab6 <log_1>
			net_buf_unref(buf);
   16118:	4620      	mov	r0, r4
   1611a:	f007 f993 	bl	1d444 <net_buf_unref>
}
   1611e:	4628      	mov	r0, r5
   16120:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16122:	4807      	ldr	r0, [pc, #28]	; (16140 <bt_hci_cmd_send+0x60>)
   16124:	4621      	mov	r1, r4
   16126:	f007 f959 	bl	1d3dc <net_buf_put>
	return 0;
   1612a:	2500      	movs	r5, #0
   1612c:	e7f7      	b.n	1611e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   1612e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16132:	e7f4      	b.n	1611e <bt_hci_cmd_send+0x3e>
   16134:	0002ccb8 	.word	0x0002ccb8
   16138:	0002cce8 	.word	0x0002cce8
   1613c:	0002f564 	.word	0x0002f564
   16140:	200003e0 	.word	0x200003e0

00016144 <le_ltk_request>:
{
   16144:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16146:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16148:	882e      	ldrh	r6, [r5, #0]
   1614a:	b2b7      	uxth	r7, r6
{
   1614c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1614e:	4638      	mov	r0, r7
   16150:	f001 ff50 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   16154:	4604      	mov	r4, r0
   16156:	b960      	cbnz	r0, 16172 <le_ltk_request+0x2e>
   16158:	4a26      	ldr	r2, [pc, #152]	; (161f4 <le_ltk_request+0xb0>)
   1615a:	4b27      	ldr	r3, [pc, #156]	; (161f8 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1615c:	4827      	ldr	r0, [pc, #156]	; (161fc <le_ltk_request+0xb8>)
   1615e:	1ad2      	subs	r2, r2, r3
   16160:	08d2      	lsrs	r2, r2, #3
   16162:	0192      	lsls	r2, r2, #6
   16164:	f042 0201 	orr.w	r2, r2, #1
   16168:	4639      	mov	r1, r7
   1616a:	f011 fca4 	bl	27ab6 <log_1>
}
   1616e:	b007      	add	sp, #28
   16170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16172:	af02      	add	r7, sp, #8
   16174:	f8d5 2002 	ldr.w	r2, [r5, #2]
   16178:	f8d5 3006 	ldr.w	r3, [r5, #6]
   1617c:	9701      	str	r7, [sp, #4]
   1617e:	8969      	ldrh	r1, [r5, #10]
   16180:	9100      	str	r1, [sp, #0]
   16182:	f015 fa4d 	bl	2b620 <bt_smp_request_ltk>
   16186:	b320      	cbz	r0, 161d2 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   16188:	2112      	movs	r1, #18
   1618a:	f242 001a 	movw	r0, #8218	; 0x201a
   1618e:	f7ff ff5f 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   16192:	4605      	mov	r5, r0
   16194:	b968      	cbnz	r0, 161b2 <le_ltk_request+0x6e>
   16196:	4917      	ldr	r1, [pc, #92]	; (161f4 <le_ltk_request+0xb0>)
   16198:	4b17      	ldr	r3, [pc, #92]	; (161f8 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   1619a:	4819      	ldr	r0, [pc, #100]	; (16200 <le_ltk_request+0xbc>)
   1619c:	1ac9      	subs	r1, r1, r3
   1619e:	08c9      	lsrs	r1, r1, #3
   161a0:	0189      	lsls	r1, r1, #6
   161a2:	f041 0101 	orr.w	r1, r1, #1
   161a6:	f011 fc79 	bl	27a9c <log_0>
	bt_conn_unref(conn);
   161aa:	4620      	mov	r0, r4
   161ac:	f001 feea 	bl	17f84 <bt_conn_unref>
   161b0:	e7dd      	b.n	1616e <le_ltk_request+0x2a>
   161b2:	2112      	movs	r1, #18
   161b4:	3008      	adds	r0, #8
   161b6:	f007 fa75 	bl	1d6a4 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   161ba:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   161bc:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   161c0:	2210      	movs	r2, #16
   161c2:	f013 fc4a 	bl	29a5a <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   161c6:	4629      	mov	r1, r5
   161c8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   161cc:	f7ff ff88 	bl	160e0 <bt_hci_cmd_send>
   161d0:	e7eb      	b.n	161aa <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   161d2:	2102      	movs	r1, #2
   161d4:	f242 001b 	movw	r0, #8219	; 0x201b
   161d8:	f7ff ff3a 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   161dc:	4605      	mov	r5, r0
   161de:	2800      	cmp	r0, #0
   161e0:	d0d9      	beq.n	16196 <le_ltk_request+0x52>
   161e2:	2102      	movs	r1, #2
   161e4:	3008      	adds	r0, #8
   161e6:	f007 fa5d 	bl	1d6a4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   161ea:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   161ec:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   161ee:	f242 001b 	movw	r0, #8219	; 0x201b
   161f2:	e7eb      	b.n	161cc <le_ltk_request+0x88>
   161f4:	0002cce8 	.word	0x0002cce8
   161f8:	0002ccb8 	.word	0x0002ccb8
   161fc:	0002f2fc 	.word	0x0002f2fc
   16200:	0002f5a7 	.word	0x0002f5a7

00016204 <le_conn_param_neg_reply>:
{
   16204:	b570      	push	{r4, r5, r6, lr}
   16206:	4606      	mov	r6, r0
   16208:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1620a:	f242 0021 	movw	r0, #8225	; 0x2021
   1620e:	2103      	movs	r1, #3
   16210:	f7ff ff1e 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   16214:	4604      	mov	r4, r0
   16216:	b958      	cbnz	r0, 16230 <le_conn_param_neg_reply+0x2c>
   16218:	490c      	ldr	r1, [pc, #48]	; (1624c <le_conn_param_neg_reply+0x48>)
   1621a:	4b0d      	ldr	r3, [pc, #52]	; (16250 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   1621c:	480d      	ldr	r0, [pc, #52]	; (16254 <le_conn_param_neg_reply+0x50>)
   1621e:	1ac9      	subs	r1, r1, r3
   16220:	08c9      	lsrs	r1, r1, #3
   16222:	0189      	lsls	r1, r1, #6
}
   16224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   16228:	f041 0101 	orr.w	r1, r1, #1
   1622c:	f011 bc36 	b.w	27a9c <log_0>
   16230:	2103      	movs	r1, #3
   16232:	3008      	adds	r0, #8
   16234:	f007 fa36 	bl	1d6a4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   16238:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1623a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1623c:	4621      	mov	r1, r4
   1623e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16246:	f7ff bf4b 	b.w	160e0 <bt_hci_cmd_send>
   1624a:	bf00      	nop
   1624c:	0002cce8 	.word	0x0002cce8
   16250:	0002ccb8 	.word	0x0002ccb8
   16254:	0002f5be 	.word	0x0002f5be

00016258 <le_conn_param_req>:
{
   16258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1625a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1625c:	78d9      	ldrb	r1, [r3, #3]
   1625e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16260:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16262:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16266:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1626a:	7959      	ldrb	r1, [r3, #5]
   1626c:	791a      	ldrb	r2, [r3, #4]
   1626e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16272:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16276:	799a      	ldrb	r2, [r3, #6]
   16278:	79d9      	ldrb	r1, [r3, #7]
   1627a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1627e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16282:	7a1a      	ldrb	r2, [r3, #8]
   16284:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16286:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16288:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1628c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1628e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16292:	f001 feaf 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   16296:	4606      	mov	r6, r0
   16298:	b980      	cbnz	r0, 162bc <le_conn_param_req+0x64>
   1629a:	4b20      	ldr	r3, [pc, #128]	; (1631c <le_conn_param_req+0xc4>)
   1629c:	4a20      	ldr	r2, [pc, #128]	; (16320 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1629e:	4821      	ldr	r0, [pc, #132]	; (16324 <le_conn_param_req+0xcc>)
   162a0:	1ad2      	subs	r2, r2, r3
   162a2:	08d2      	lsrs	r2, r2, #3
   162a4:	0192      	lsls	r2, r2, #6
   162a6:	4621      	mov	r1, r4
   162a8:	f042 0201 	orr.w	r2, r2, #1
   162ac:	f011 fc03 	bl	27ab6 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   162b0:	2102      	movs	r1, #2
   162b2:	4620      	mov	r0, r4
   162b4:	f7ff ffa6 	bl	16204 <le_conn_param_neg_reply>
}
   162b8:	b003      	add	sp, #12
   162ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   162bc:	4669      	mov	r1, sp
   162be:	f001 ffed 	bl	1829c <le_param_req>
   162c2:	b938      	cbnz	r0, 162d4 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   162c4:	211e      	movs	r1, #30
   162c6:	4620      	mov	r0, r4
   162c8:	f7ff ff9c 	bl	16204 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   162cc:	4630      	mov	r0, r6
   162ce:	f001 fe59 	bl	17f84 <bt_conn_unref>
   162d2:	e7f1      	b.n	162b8 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   162d4:	210e      	movs	r1, #14
   162d6:	f242 0020 	movw	r0, #8224	; 0x2020
   162da:	f7ff feb9 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   162de:	4605      	mov	r5, r0
   162e0:	2800      	cmp	r0, #0
   162e2:	d0f3      	beq.n	162cc <le_conn_param_req+0x74>
   162e4:	210e      	movs	r1, #14
   162e6:	3008      	adds	r0, #8
   162e8:	f007 f9dc 	bl	1d6a4 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   162ec:	220e      	movs	r2, #14
   162ee:	4604      	mov	r4, r0
   162f0:	2100      	movs	r1, #0
   162f2:	f013 fbbd 	bl	29a70 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   162f6:	f8bd 3000 	ldrh.w	r3, [sp]
   162fa:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   162fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16300:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16302:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16306:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16308:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1630c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1630e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16310:	4629      	mov	r1, r5
   16312:	f242 0020 	movw	r0, #8224	; 0x2020
   16316:	f7ff fee3 	bl	160e0 <bt_hci_cmd_send>
   1631a:	e7d7      	b.n	162cc <le_conn_param_req+0x74>
   1631c:	0002ccb8 	.word	0x0002ccb8
   16320:	0002cce8 	.word	0x0002cce8
   16324:	0002f2fc 	.word	0x0002f2fc

00016328 <bt_hci_cmd_send_sync>:
{
   16328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1632c:	4607      	mov	r7, r0
   1632e:	b086      	sub	sp, #24
   16330:	4615      	mov	r5, r2
	if (!buf) {
   16332:	460c      	mov	r4, r1
   16334:	b921      	cbnz	r1, 16340 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   16336:	f7ff fe8b 	bl	16050 <bt_hci_cmd_create>
		if (!buf) {
   1633a:	4604      	mov	r4, r0
   1633c:	2800      	cmp	r0, #0
   1633e:	d055      	beq.n	163ec <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16340:	2201      	movs	r2, #1
   16342:	2100      	movs	r1, #0
   16344:	4668      	mov	r0, sp
   16346:	f016 f998 	bl	2c67a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1634a:	4620      	mov	r0, r4
   1634c:	f006 fee2 	bl	1d114 <net_buf_id>
   16350:	4e28      	ldr	r6, [pc, #160]	; (163f4 <bt_hci_cmd_send_sync+0xcc>)
   16352:	230c      	movs	r3, #12
   16354:	fb03 6000 	mla	r0, r3, r0, r6
   16358:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1635c:	4620      	mov	r0, r4
   1635e:	f007 f8b7 	bl	1d4d0 <net_buf_ref>
   16362:	4601      	mov	r1, r0
   16364:	4824      	ldr	r0, [pc, #144]	; (163f8 <bt_hci_cmd_send_sync+0xd0>)
   16366:	f007 f839 	bl	1d3dc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1636a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1636e:	2300      	movs	r3, #0
   16370:	4668      	mov	r0, sp
   16372:	f00b fb27 	bl	219c4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16376:	4680      	mov	r8, r0
   16378:	b180      	cbz	r0, 1639c <bt_hci_cmd_send_sync+0x74>
   1637a:	4a20      	ldr	r2, [pc, #128]	; (163fc <bt_hci_cmd_send_sync+0xd4>)
   1637c:	4920      	ldr	r1, [pc, #128]	; (16400 <bt_hci_cmd_send_sync+0xd8>)
   1637e:	4821      	ldr	r0, [pc, #132]	; (16404 <bt_hci_cmd_send_sync+0xdc>)
   16380:	f240 1331 	movw	r3, #305	; 0x131
   16384:	f011 f8b7 	bl	274f6 <printk>
   16388:	481f      	ldr	r0, [pc, #124]	; (16408 <bt_hci_cmd_send_sync+0xe0>)
   1638a:	4641      	mov	r1, r8
   1638c:	f011 f8b3 	bl	274f6 <printk>
   16390:	4040      	eors	r0, r0
   16392:	f380 8811 	msr	BASEPRI, r0
   16396:	f04f 0003 	mov.w	r0, #3
   1639a:	df02      	svc	2
	status = cmd(buf)->status;
   1639c:	4620      	mov	r0, r4
   1639e:	f006 feb9 	bl	1d114 <net_buf_id>
   163a2:	230c      	movs	r3, #12
   163a4:	4343      	muls	r3, r0
   163a6:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   163a8:	b1be      	cbz	r6, 163da <bt_hci_cmd_send_sync+0xb2>
   163aa:	4a18      	ldr	r2, [pc, #96]	; (1640c <bt_hci_cmd_send_sync+0xe4>)
   163ac:	4b18      	ldr	r3, [pc, #96]	; (16410 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   163ae:	4819      	ldr	r0, [pc, #100]	; (16414 <bt_hci_cmd_send_sync+0xec>)
   163b0:	1a9b      	subs	r3, r3, r2
   163b2:	08db      	lsrs	r3, r3, #3
   163b4:	019b      	lsls	r3, r3, #6
   163b6:	f043 0302 	orr.w	r3, r3, #2
   163ba:	4632      	mov	r2, r6
   163bc:	4639      	mov	r1, r7
   163be:	f011 fb8e 	bl	27ade <log_2>
		net_buf_unref(buf);
   163c2:	4620      	mov	r0, r4
   163c4:	f007 f83e 	bl	1d444 <net_buf_unref>
			return -EIO;
   163c8:	2e09      	cmp	r6, #9
   163ca:	bf0c      	ite	eq
   163cc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   163d0:	f06f 0004 	mvnne.w	r0, #4
}
   163d4:	b006      	add	sp, #24
   163d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   163da:	b115      	cbz	r5, 163e2 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   163dc:	602c      	str	r4, [r5, #0]
	return 0;
   163de:	4630      	mov	r0, r6
   163e0:	e7f8      	b.n	163d4 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   163e2:	4620      	mov	r0, r4
   163e4:	f007 f82e 	bl	1d444 <net_buf_unref>
	return 0;
   163e8:	4628      	mov	r0, r5
   163ea:	e7f3      	b.n	163d4 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   163ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
   163f0:	e7f0      	b.n	163d4 <bt_hci_cmd_send_sync+0xac>
   163f2:	bf00      	nop
   163f4:	20003014 	.word	0x20003014
   163f8:	200003e0 	.word	0x200003e0
   163fc:	0002f438 	.word	0x0002f438
   16400:	0002f540 	.word	0x0002f540
   16404:	0002dcd3 	.word	0x0002dcd3
   16408:	0002f5d8 	.word	0x0002f5d8
   1640c:	0002ccb8 	.word	0x0002ccb8
   16410:	0002cce8 	.word	0x0002cce8
   16414:	0002f5f8 	.word	0x0002f5f8

00016418 <hci_le_read_max_data_len>:
{
   16418:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1641a:	4606      	mov	r6, r0
   1641c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1641e:	aa01      	add	r2, sp, #4
   16420:	2100      	movs	r1, #0
   16422:	f242 002f 	movw	r0, #8239	; 0x202f
   16426:	f7ff ff7f 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   1642a:	4604      	mov	r4, r0
   1642c:	b160      	cbz	r0, 16448 <hci_le_read_max_data_len+0x30>
   1642e:	490c      	ldr	r1, [pc, #48]	; (16460 <hci_le_read_max_data_len+0x48>)
   16430:	4b0c      	ldr	r3, [pc, #48]	; (16464 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   16432:	480d      	ldr	r0, [pc, #52]	; (16468 <hci_le_read_max_data_len+0x50>)
   16434:	1ac9      	subs	r1, r1, r3
   16436:	08c9      	lsrs	r1, r1, #3
   16438:	0189      	lsls	r1, r1, #6
   1643a:	f041 0101 	orr.w	r1, r1, #1
   1643e:	f011 fb2d 	bl	27a9c <log_0>
}
   16442:	4620      	mov	r0, r4
   16444:	b002      	add	sp, #8
   16446:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16448:	9801      	ldr	r0, [sp, #4]
   1644a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1644c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16450:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16452:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16456:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16458:	f006 fff4 	bl	1d444 <net_buf_unref>
	return 0;
   1645c:	e7f1      	b.n	16442 <hci_le_read_max_data_len+0x2a>
   1645e:	bf00      	nop
   16460:	0002cce8 	.word	0x0002cce8
   16464:	0002ccb8 	.word	0x0002ccb8
   16468:	0002f614 	.word	0x0002f614

0001646c <conn_auto_initiate>:
{
   1646c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1646e:	7b43      	ldrb	r3, [r0, #13]
   16470:	2b07      	cmp	r3, #7
{
   16472:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16474:	d121      	bne.n	164ba <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16476:	f3bf 8f5b 	dmb	ish
   1647a:	6843      	ldr	r3, [r0, #4]
   1647c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16480:	049b      	lsls	r3, r3, #18
   16482:	f100 0604 	add.w	r6, r0, #4
   16486:	d41a      	bmi.n	164be <conn_auto_initiate+0x52>
   16488:	78c3      	ldrb	r3, [r0, #3]
   1648a:	b123      	cbz	r3, 16496 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   1648c:	4b31      	ldr	r3, [pc, #196]	; (16554 <conn_auto_initiate+0xe8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   1648e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   16492:	071d      	lsls	r5, r3, #28
   16494:	d513      	bpl.n	164be <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16496:	2102      	movs	r1, #2
   16498:	f242 0016 	movw	r0, #8214	; 0x2016
   1649c:	f7ff fdd8 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   164a0:	4605      	mov	r5, r0
   164a2:	b160      	cbz	r0, 164be <conn_auto_initiate+0x52>
   164a4:	2102      	movs	r1, #2
   164a6:	3008      	adds	r0, #8
   164a8:	f007 f8fc 	bl	1d6a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   164ac:	8823      	ldrh	r3, [r4, #0]
   164ae:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   164b0:	4629      	mov	r1, r5
   164b2:	f242 0016 	movw	r0, #8214	; 0x2016
   164b6:	f7ff fe13 	bl	160e0 <bt_hci_cmd_send>
}
   164ba:	b004      	add	sp, #16
   164bc:	bd70      	pop	{r4, r5, r6, pc}
   164be:	f3bf 8f5b 	dmb	ish
   164c2:	6863      	ldr	r3, [r4, #4]
   164c4:	4d23      	ldr	r5, [pc, #140]	; (16554 <conn_auto_initiate+0xe8>)
   164c6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   164ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   164ce:	f3c3 3100 	ubfx	r1, r3, #12, #1
   164d2:	d11a      	bne.n	1650a <conn_auto_initiate+0x9e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   164d4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   164d8:	07d8      	lsls	r0, r3, #31
   164da:	d516      	bpl.n	1650a <conn_auto_initiate+0x9e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   164dc:	2302      	movs	r3, #2
   164de:	9100      	str	r1, [sp, #0]
   164e0:	461a      	mov	r2, r3
   164e2:	4620      	mov	r0, r4
   164e4:	f013 fc68 	bl	29db8 <bt_le_set_phy>
		if (!err) {
   164e8:	4601      	mov	r1, r0
   164ea:	b920      	cbnz	r0, 164f6 <conn_auto_initiate+0x8a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   164ec:	2180      	movs	r1, #128	; 0x80
   164ee:	4630      	mov	r0, r6
   164f0:	f013 fc0b 	bl	29d0a <atomic_or>
			return;
   164f4:	e7e1      	b.n	164ba <conn_auto_initiate+0x4e>
   164f6:	4a18      	ldr	r2, [pc, #96]	; (16558 <conn_auto_initiate+0xec>)
   164f8:	4b18      	ldr	r3, [pc, #96]	; (1655c <conn_auto_initiate+0xf0>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   164fa:	4819      	ldr	r0, [pc, #100]	; (16560 <conn_auto_initiate+0xf4>)
   164fc:	1ad2      	subs	r2, r2, r3
   164fe:	08d2      	lsrs	r2, r2, #3
   16500:	0192      	lsls	r2, r2, #6
   16502:	f042 0201 	orr.w	r2, r2, #1
   16506:	f011 fad6 	bl	27ab6 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1650a:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1650e:	069a      	lsls	r2, r3, #26
   16510:	d5d3      	bpl.n	164ba <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16512:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   16516:	689b      	ldr	r3, [r3, #8]
   16518:	079b      	lsls	r3, r3, #30
   1651a:	d5ce      	bpl.n	164ba <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1651c:	f10d 010e 	add.w	r1, sp, #14
   16520:	a803      	add	r0, sp, #12
   16522:	f7ff ff79 	bl	16418 <hci_le_read_max_data_len>
			if (!err) {
   16526:	2800      	cmp	r0, #0
   16528:	d1c7      	bne.n	164ba <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   1652a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1652e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16532:	4620      	mov	r0, r4
   16534:	f013 fc23 	bl	29d7e <bt_le_set_data_len>
				if (err) {
   16538:	4601      	mov	r1, r0
   1653a:	2800      	cmp	r0, #0
   1653c:	d0bd      	beq.n	164ba <conn_auto_initiate+0x4e>
   1653e:	4b07      	ldr	r3, [pc, #28]	; (1655c <conn_auto_initiate+0xf0>)
   16540:	4a05      	ldr	r2, [pc, #20]	; (16558 <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
   16542:	4808      	ldr	r0, [pc, #32]	; (16564 <conn_auto_initiate+0xf8>)
   16544:	1ad2      	subs	r2, r2, r3
   16546:	08d2      	lsrs	r2, r2, #3
   16548:	0192      	lsls	r2, r2, #6
   1654a:	f042 0201 	orr.w	r2, r2, #1
   1654e:	f011 fab2 	bl	27ab6 <log_1>
		}
   16552:	e7b2      	b.n	164ba <conn_auto_initiate+0x4e>
   16554:	200002b8 	.word	0x200002b8
   16558:	0002cce8 	.word	0x0002cce8
   1655c:	0002ccb8 	.word	0x0002ccb8
   16560:	0002f634 	.word	0x0002f634
   16564:	0002f64e 	.word	0x0002f64e

00016568 <le_phy_update_complete>:
{
   16568:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1656a:	6883      	ldr	r3, [r0, #8]
   1656c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   16570:	4628      	mov	r0, r5
   16572:	f001 fd3f 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   16576:	4604      	mov	r4, r0
   16578:	b960      	cbnz	r0, 16594 <le_phy_update_complete+0x2c>
   1657a:	4b14      	ldr	r3, [pc, #80]	; (165cc <le_phy_update_complete+0x64>)
   1657c:	4a14      	ldr	r2, [pc, #80]	; (165d0 <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1657e:	4815      	ldr	r0, [pc, #84]	; (165d4 <le_phy_update_complete+0x6c>)
   16580:	1ad2      	subs	r2, r2, r3
   16582:	08d2      	lsrs	r2, r2, #3
   16584:	0192      	lsls	r2, r2, #6
   16586:	4629      	mov	r1, r5
   16588:	f042 0201 	orr.w	r2, r2, #1
}
   1658c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16590:	f011 ba91 	b.w	27ab6 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   16594:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16596:	f3bf 8f5b 	dmb	ish
   1659a:	e850 3f00 	ldrex	r3, [r0]
   1659e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   165a2:	e840 2100 	strex	r1, r2, [r0]
   165a6:	2900      	cmp	r1, #0
   165a8:	d1f7      	bne.n	1659a <le_phy_update_complete+0x32>
   165aa:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   165ae:	061b      	lsls	r3, r3, #24
   165b0:	d506      	bpl.n	165c0 <le_phy_update_complete+0x58>
   165b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   165b6:	f013 fba8 	bl	29d0a <atomic_or>
		conn_auto_initiate(conn);
   165ba:	4620      	mov	r0, r4
   165bc:	f7ff ff56 	bl	1646c <conn_auto_initiate>
	bt_conn_unref(conn);
   165c0:	4620      	mov	r0, r4
}
   165c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   165c6:	f001 bcdd 	b.w	17f84 <bt_conn_unref>
   165ca:	bf00      	nop
   165cc:	0002ccb8 	.word	0x0002ccb8
   165d0:	0002cce8 	.word	0x0002cce8
   165d4:	0002f2fc 	.word	0x0002f2fc

000165d8 <le_remote_feat_complete>:
{
   165d8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   165da:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   165dc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   165e0:	4630      	mov	r0, r6
   165e2:	f001 fd07 	bl	17ff4 <bt_conn_lookup_handle>
	if (!conn) {
   165e6:	4604      	mov	r4, r0
   165e8:	b960      	cbnz	r0, 16604 <le_remote_feat_complete+0x2c>
   165ea:	4a10      	ldr	r2, [pc, #64]	; (1662c <le_remote_feat_complete+0x54>)
   165ec:	4b10      	ldr	r3, [pc, #64]	; (16630 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   165ee:	4811      	ldr	r0, [pc, #68]	; (16634 <le_remote_feat_complete+0x5c>)
   165f0:	1ad2      	subs	r2, r2, r3
   165f2:	08d2      	lsrs	r2, r2, #3
   165f4:	0192      	lsls	r2, r2, #6
   165f6:	4631      	mov	r1, r6
   165f8:	f042 0201 	orr.w	r2, r2, #1
}
   165fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16600:	f011 ba59 	b.w	27ab6 <log_1>
	if (!evt->status) {
   16604:	782b      	ldrb	r3, [r5, #0]
   16606:	b923      	cbnz	r3, 16612 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   16608:	2208      	movs	r2, #8
   1660a:	1ce9      	adds	r1, r5, #3
   1660c:	30b4      	adds	r0, #180	; 0xb4
   1660e:	f013 fa24 	bl	29a5a <memcpy>
   16612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   16616:	1d20      	adds	r0, r4, #4
   16618:	f013 fb77 	bl	29d0a <atomic_or>
	conn_auto_initiate(conn);
   1661c:	4620      	mov	r0, r4
   1661e:	f7ff ff25 	bl	1646c <conn_auto_initiate>
	bt_conn_unref(conn);
   16622:	4620      	mov	r0, r4
}
   16624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16628:	f001 bcac 	b.w	17f84 <bt_conn_unref>
   1662c:	0002cce8 	.word	0x0002cce8
   16630:	0002ccb8 	.word	0x0002ccb8
   16634:	0002f2fc 	.word	0x0002f2fc

00016638 <bt_hci_le_enh_conn_complete>:
{
   16638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1663c:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16640:	4a7c      	ldr	r2, [pc, #496]	; (16834 <bt_hci_le_enh_conn_complete+0x1fc>)
	handle |= ~BT_ACL_HANDLE_MASK;
   16642:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   16646:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   16648:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   1664c:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   1664e:	b29b      	uxth	r3, r3
   16650:	4299      	cmp	r1, r3
   16652:	f04f 0800 	mov.w	r8, #0
{
   16656:	b085      	sub	sp, #20
			disconnected_handles[i] = 0;
   16658:	bf04      	itt	eq
   1665a:	f8a2 8000 	strheq.w	r8, [r2]
			return true;
   1665e:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
   16662:	f000 fb1f 	bl	16ca4 <bt_id_pending_keys_update>
	if (evt->status) {
   16666:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16668:	fa1f f789 	uxth.w	r7, r9
	if (evt->status) {
   1666c:	b3b4      	cbz	r4, 166dc <bt_hci_le_enh_conn_complete+0xa4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1666e:	2c3c      	cmp	r4, #60	; 0x3c
   16670:	d128      	bne.n	166c4 <bt_hci_le_enh_conn_complete+0x8c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16672:	f000 ff2b 	bl	174cc <bt_le_adv_lookup_legacy>
   16676:	f3bf 8f5b 	dmb	ish
   1667a:	3010      	adds	r0, #16
   1667c:	e850 3f00 	ldrex	r3, [r0]
   16680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16684:	e840 3200 	strex	r2, r3, [r0]
   16688:	2a00      	cmp	r2, #0
   1668a:	d1f7      	bne.n	1667c <bt_hci_le_enh_conn_complete+0x44>
   1668c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   16690:	2000      	movs	r0, #0
   16692:	f7ff f9b1 	bl	159f8 <find_pending_connect.part.0>
		if (!conn) {
   16696:	4605      	mov	r5, r0
   16698:	b960      	cbnz	r0, 166b4 <bt_hci_le_enh_conn_complete+0x7c>
   1669a:	4967      	ldr	r1, [pc, #412]	; (16838 <bt_hci_le_enh_conn_complete+0x200>)
   1669c:	4b67      	ldr	r3, [pc, #412]	; (1683c <bt_hci_le_enh_conn_complete+0x204>)
			BT_ERR("No pending slave connection");
   1669e:	4868      	ldr	r0, [pc, #416]	; (16840 <bt_hci_le_enh_conn_complete+0x208>)
   166a0:	1ac9      	subs	r1, r1, r3
   166a2:	08c9      	lsrs	r1, r1, #3
   166a4:	0189      	lsls	r1, r1, #6
   166a6:	f041 0101 	orr.w	r1, r1, #1
   166aa:	f011 f9f7 	bl	27a9c <log_0>
}
   166ae:	b005      	add	sp, #20
   166b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   166b4:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   166b6:	2100      	movs	r1, #0
   166b8:	f001 fca8 	bl	1800c <bt_conn_set_state>
		bt_conn_unref(conn);
   166bc:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   166be:	f001 fc61 	bl	17f84 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   166c2:	e7f4      	b.n	166ae <bt_hci_le_enh_conn_complete+0x76>
   166c4:	4b5d      	ldr	r3, [pc, #372]	; (1683c <bt_hci_le_enh_conn_complete+0x204>)
   166c6:	4a5c      	ldr	r2, [pc, #368]	; (16838 <bt_hci_le_enh_conn_complete+0x200>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   166c8:	485e      	ldr	r0, [pc, #376]	; (16844 <bt_hci_le_enh_conn_complete+0x20c>)
   166ca:	1ad2      	subs	r2, r2, r3
   166cc:	08d2      	lsrs	r2, r2, #3
   166ce:	0192      	lsls	r2, r2, #6
   166d0:	f042 0202 	orr.w	r2, r2, #2
   166d4:	4621      	mov	r1, r4
   166d6:	f011 f9ee 	bl	27ab6 <log_1>
		return;
   166da:	e7e8      	b.n	166ae <bt_hci_le_enh_conn_complete+0x76>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   166dc:	792b      	ldrb	r3, [r5, #4]
   166de:	3b02      	subs	r3, #2
   166e0:	2b01      	cmp	r3, #1
   166e2:	f105 0604 	add.w	r6, r5, #4
   166e6:	d843      	bhi.n	16770 <bt_hci_le_enh_conn_complete+0x138>
	memcpy(dst, src, sizeof(*dst));
   166e8:	2207      	movs	r2, #7
   166ea:	4631      	mov	r1, r6
   166ec:	a802      	add	r0, sp, #8
   166ee:	f013 f9b4 	bl	29a5a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   166f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   166f6:	2206      	movs	r2, #6
   166f8:	3b02      	subs	r3, #2
   166fa:	f105 0111 	add.w	r1, r5, #17
   166fe:	f10d 0001 	add.w	r0, sp, #1
   16702:	f88d 3008 	strb.w	r3, [sp, #8]
   16706:	f013 f9a8 	bl	29a5a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1670a:	2301      	movs	r3, #1
   1670c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   16710:	78eb      	ldrb	r3, [r5, #3]
   16712:	2b01      	cmp	r3, #1
   16714:	d116      	bne.n	16744 <bt_hci_le_enh_conn_complete+0x10c>
   16716:	a802      	add	r0, sp, #8
   16718:	f7ff f96e 	bl	159f8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1671c:	78eb      	ldrb	r3, [r5, #3]
   1671e:	2b01      	cmp	r3, #1
   16720:	4604      	mov	r4, r0
   16722:	d10e      	bne.n	16742 <bt_hci_le_enh_conn_complete+0x10a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16724:	f000 fed2 	bl	174cc <bt_le_adv_lookup_legacy>
   16728:	f3bf 8f5b 	dmb	ish
   1672c:	3010      	adds	r0, #16
   1672e:	e850 3f00 	ldrex	r3, [r0]
   16732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16736:	e840 3200 	strex	r2, r3, [r0]
   1673a:	2a00      	cmp	r2, #0
   1673c:	d1f7      	bne.n	1672e <bt_hci_le_enh_conn_complete+0xf6>
   1673e:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   16742:	bb54      	cbnz	r4, 1679a <bt_hci_le_enh_conn_complete+0x162>
   16744:	4a3d      	ldr	r2, [pc, #244]	; (1683c <bt_hci_le_enh_conn_complete+0x204>)
   16746:	4c3c      	ldr	r4, [pc, #240]	; (16838 <bt_hci_le_enh_conn_complete+0x200>)
		BT_ERR("No pending conn for peer %s",
   16748:	4630      	mov	r0, r6
   1674a:	1aa4      	subs	r4, r4, r2
   1674c:	f7fe fb7c 	bl	14e48 <bt_addr_le_str_real>
   16750:	f7fb f960 	bl	11a14 <z_log_strdup>
   16754:	08e4      	lsrs	r4, r4, #3
   16756:	01a4      	lsls	r4, r4, #6
   16758:	f044 0401 	orr.w	r4, r4, #1
   1675c:	4601      	mov	r1, r0
   1675e:	4622      	mov	r2, r4
   16760:	4839      	ldr	r0, [pc, #228]	; (16848 <bt_hci_le_enh_conn_complete+0x210>)
   16762:	f011 f9a8 	bl	27ab6 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16766:	211f      	movs	r1, #31
   16768:	4638      	mov	r0, r7
   1676a:	f013 faed 	bl	29d48 <bt_hci_disconnect>
		return;
   1676e:	e79e      	b.n	166ae <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   16770:	78eb      	ldrb	r3, [r5, #3]
   16772:	2b01      	cmp	r3, #1
   16774:	bf04      	itt	eq
   16776:	4b35      	ldreq	r3, [pc, #212]	; (1684c <bt_hci_le_enh_conn_complete+0x214>)
   16778:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   1677c:	4631      	mov	r1, r6
   1677e:	4620      	mov	r0, r4
   16780:	f013 fc2a 	bl	29fd8 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   16784:	2207      	movs	r2, #7
   16786:	4601      	mov	r1, r0
   16788:	a802      	add	r0, sp, #8
   1678a:	f013 f966 	bl	29a5a <memcpy>
   1678e:	2207      	movs	r2, #7
   16790:	4631      	mov	r1, r6
   16792:	4668      	mov	r0, sp
   16794:	f013 f961 	bl	29a5a <memcpy>
}
   16798:	e7ba      	b.n	16710 <bt_hci_le_enh_conn_complete+0xd8>
	conn->handle = handle;
   1679a:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1679c:	2207      	movs	r2, #7
   1679e:	f820 9b90 	strh.w	r9, [r0], #144
   167a2:	a902      	add	r1, sp, #8
   167a4:	f013 f959 	bl	29a5a <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   167a8:	7e2a      	ldrb	r2, [r5, #24]
   167aa:	7deb      	ldrb	r3, [r5, #23]
   167ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   167b0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   167b4:	7eaa      	ldrb	r2, [r5, #26]
   167b6:	7e6b      	ldrb	r3, [r5, #25]
   167b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   167bc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   167c0:	7eeb      	ldrb	r3, [r5, #27]
   167c2:	7f2a      	ldrb	r2, [r5, #28]
   167c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   167c8:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   167cc:	78eb      	ldrb	r3, [r5, #3]
   167ce:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   167d0:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   167d2:	2b01      	cmp	r3, #1
	conn->err = 0U;
   167d4:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   167d6:	d11a      	bne.n	1680e <bt_hci_le_enh_conn_complete+0x1d6>
   167d8:	2207      	movs	r2, #7
   167da:	4669      	mov	r1, sp
   167dc:	f104 0097 	add.w	r0, r4, #151	; 0x97
   167e0:	f013 f93b 	bl	29a5a <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   167e4:	f000 fe72 	bl	174cc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   167e8:	7a21      	ldrb	r1, [r4, #8]
   167ea:	4e18      	ldr	r6, [pc, #96]	; (1684c <bt_hci_le_enh_conn_complete+0x214>)
   167ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   167f0:	2207      	movs	r2, #7
   167f2:	4431      	add	r1, r6
   167f4:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   167f8:	f013 f92f 	bl	29a5a <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   167fc:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   16800:	462a      	mov	r2, r5
   16802:	f001 0340 	and.w	r3, r1, #64	; 0x40
   16806:	4313      	orrs	r3, r2
   16808:	d001      	beq.n	1680e <bt_hci_le_enh_conn_complete+0x1d6>
			bt_le_adv_resume();
   1680a:	f000 ffa3 	bl	17754 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1680e:	2107      	movs	r1, #7
   16810:	4620      	mov	r0, r4
   16812:	f001 fbfb 	bl	1800c <bt_conn_set_state>
	if (is_disconnected) {
   16816:	f1b8 0f00 	cmp.w	r8, #0
   1681a:	d003      	beq.n	16824 <bt_hci_le_enh_conn_complete+0x1ec>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1681c:	2101      	movs	r1, #1
   1681e:	4620      	mov	r0, r4
   16820:	f001 fbf4 	bl	1800c <bt_conn_set_state>
	bt_conn_connected(conn);
   16824:	4620      	mov	r0, r4
   16826:	f013 fd54 	bl	2a2d2 <bt_conn_connected>
	conn_auto_initiate(conn);
   1682a:	4620      	mov	r0, r4
   1682c:	f7ff fe1e 	bl	1646c <conn_auto_initiate>
	bt_conn_unref(conn);
   16830:	4620      	mov	r0, r4
   16832:	e744      	b.n	166be <bt_hci_le_enh_conn_complete+0x86>
   16834:	20003d3c 	.word	0x20003d3c
   16838:	0002cce8 	.word	0x0002cce8
   1683c:	0002ccb8 	.word	0x0002ccb8
   16840:	0002f66a 	.word	0x0002f66a
   16844:	0002f686 	.word	0x0002f686
   16848:	0002f69f 	.word	0x0002f69f
   1684c:	200002b8 	.word	0x200002b8

00016850 <bt_security_err_get>:
	switch (hci_err) {
   16850:	2829      	cmp	r0, #41	; 0x29
   16852:	bf9a      	itte	ls
   16854:	4b01      	ldrls	r3, [pc, #4]	; (1685c <bt_security_err_get+0xc>)
   16856:	5c18      	ldrbls	r0, [r3, r0]
{
   16858:	2008      	movhi	r0, #8
}
   1685a:	4770      	bx	lr
   1685c:	0002f8d7 	.word	0x0002f8d7

00016860 <hci_event_prio>:
{
   16860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16864:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16866:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1686a:	4630      	mov	r0, r6
   1686c:	f015 f8a2 	bl	2b9b4 <net_buf_simple_headroom>
	state->len = buf->len;
   16870:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16874:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16878:	4605      	mov	r5, r0
   1687a:	d80c      	bhi.n	16896 <hci_event_prio+0x36>
   1687c:	4a1c      	ldr	r2, [pc, #112]	; (168f0 <hci_event_prio+0x90>)
   1687e:	491d      	ldr	r1, [pc, #116]	; (168f4 <hci_event_prio+0x94>)
   16880:	481d      	ldr	r0, [pc, #116]	; (168f8 <hci_event_prio+0x98>)
   16882:	f640 5306 	movw	r3, #3334	; 0xd06
   16886:	f010 fe36 	bl	274f6 <printk>
   1688a:	4040      	eors	r0, r0
   1688c:	f380 8811 	msr	BASEPRI, r0
   16890:	f04f 0003 	mov.w	r0, #3
   16894:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16896:	2102      	movs	r1, #2
   16898:	4630      	mov	r0, r6
   1689a:	f006 fee1 	bl	1d660 <net_buf_simple_pull_mem>
   1689e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   168a0:	7800      	ldrb	r0, [r0, #0]
   168a2:	f013 fa08 	bl	29cb6 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   168a6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   168a8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   168aa:	d40c      	bmi.n	168c6 <hci_event_prio+0x66>
   168ac:	4a10      	ldr	r2, [pc, #64]	; (168f0 <hci_event_prio+0x90>)
   168ae:	4913      	ldr	r1, [pc, #76]	; (168fc <hci_event_prio+0x9c>)
   168b0:	4811      	ldr	r0, [pc, #68]	; (168f8 <hci_event_prio+0x98>)
   168b2:	f640 530a 	movw	r3, #3338	; 0xd0a
   168b6:	f010 fe1e 	bl	274f6 <printk>
   168ba:	4040      	eors	r0, r0
   168bc:	f380 8811 	msr	BASEPRI, r0
   168c0:	f04f 0003 	mov.w	r0, #3
   168c4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   168c6:	2305      	movs	r3, #5
   168c8:	4a0d      	ldr	r2, [pc, #52]	; (16900 <hci_event_prio+0xa0>)
   168ca:	7838      	ldrb	r0, [r7, #0]
   168cc:	4621      	mov	r1, r4
   168ce:	f7ff f943 	bl	15b58 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   168d2:	07b3      	lsls	r3, r6, #30
   168d4:	d507      	bpl.n	168e6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   168d6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   168d8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   168dc:	fa10 f585 	uxtah	r5, r0, r5
   168e0:	60a5      	str	r5, [r4, #8]
}
   168e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   168e6:	4620      	mov	r0, r4
}
   168e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   168ec:	f006 bdaa 	b.w	1d444 <net_buf_unref>
   168f0:	0002f438 	.word	0x0002f438
   168f4:	0002f46c 	.word	0x0002f46c
   168f8:	0002dcd3 	.word	0x0002dcd3
   168fc:	0002f6bb 	.word	0x0002f6bb
   16900:	0002d330 	.word	0x0002d330

00016904 <bt_recv>:
{
   16904:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16906:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16908:	2901      	cmp	r1, #1
{
   1690a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1690c:	d007      	beq.n	1691e <bt_recv+0x1a>
   1690e:	2903      	cmp	r1, #3
   16910:	d113      	bne.n	1693a <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   16912:	4812      	ldr	r0, [pc, #72]	; (1695c <bt_recv+0x58>)
   16914:	4629      	mov	r1, r5
   16916:	f006 fd61 	bl	1d3dc <net_buf_put>
		return 0;
   1691a:	2000      	movs	r0, #0
   1691c:	e00c      	b.n	16938 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1691e:	6883      	ldr	r3, [r0, #8]
   16920:	7818      	ldrb	r0, [r3, #0]
   16922:	f013 f9c8 	bl	29cb6 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16926:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16928:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1692a:	d502      	bpl.n	16932 <bt_recv+0x2e>
			hci_event_prio(buf);
   1692c:	4628      	mov	r0, r5
   1692e:	f7ff ff97 	bl	16860 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16932:	f014 0002 	ands.w	r0, r4, #2
   16936:	d1ec      	bne.n	16912 <bt_recv+0xe>
}
   16938:	bd38      	pop	{r3, r4, r5, pc}
   1693a:	4b09      	ldr	r3, [pc, #36]	; (16960 <bt_recv+0x5c>)
   1693c:	4a09      	ldr	r2, [pc, #36]	; (16964 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1693e:	480a      	ldr	r0, [pc, #40]	; (16968 <bt_recv+0x64>)
   16940:	1ad2      	subs	r2, r2, r3
   16942:	08d2      	lsrs	r2, r2, #3
   16944:	0192      	lsls	r2, r2, #6
   16946:	f042 0201 	orr.w	r2, r2, #1
   1694a:	f011 f8b4 	bl	27ab6 <log_1>
		net_buf_unref(buf);
   1694e:	4628      	mov	r0, r5
   16950:	f006 fd78 	bl	1d444 <net_buf_unref>
		return -EINVAL;
   16954:	f06f 0015 	mvn.w	r0, #21
   16958:	e7ee      	b.n	16938 <bt_recv+0x34>
   1695a:	bf00      	nop
   1695c:	200003c4 	.word	0x200003c4
   16960:	0002ccb8 	.word	0x0002ccb8
   16964:	0002cce8 	.word	0x0002cce8
   16968:	0002f6d4 	.word	0x0002f6d4

0001696c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1696c:	4a08      	ldr	r2, [pc, #32]	; (16990 <bt_hci_driver_register+0x24>)
{
   1696e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16970:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
   16974:	b930      	cbnz	r0, 16984 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16976:	68d9      	ldr	r1, [r3, #12]
   16978:	b139      	cbz	r1, 1698a <bt_hci_driver_register+0x1e>
   1697a:	6919      	ldr	r1, [r3, #16]
   1697c:	b129      	cbz	r1, 1698a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1697e:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	return 0;
   16982:	4770      	bx	lr
		return -EALREADY;
   16984:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16988:	4770      	bx	lr
		return -EINVAL;
   1698a:	f06f 0015 	mvn.w	r0, #21
}
   1698e:	4770      	bx	lr
   16990:	200002b8 	.word	0x200002b8

00016994 <bt_finalize_init>:
{
   16994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16998:	4c2b      	ldr	r4, [pc, #172]	; (16a48 <bt_finalize_init+0xb4>)
   1699a:	4d2c      	ldr	r5, [pc, #176]	; (16a4c <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1699c:	4e2c      	ldr	r6, [pc, #176]	; (16a50 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
   1699e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 16a68 <bt_finalize_init+0xd4>
{
   169a2:	b087      	sub	sp, #28
   169a4:	2102      	movs	r1, #2
   169a6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   169aa:	f013 f9ae 	bl	29d0a <atomic_or>
   169ae:	4b29      	ldr	r3, [pc, #164]	; (16a54 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   169b0:	4929      	ldr	r1, [pc, #164]	; (16a58 <bt_finalize_init+0xc4>)
   169b2:	1aed      	subs	r5, r5, r3
   169b4:	79e3      	ldrb	r3, [r4, #7]
   169b6:	4620      	mov	r0, r4
   169b8:	2b01      	cmp	r3, #1
   169ba:	bf88      	it	hi
   169bc:	460e      	movhi	r6, r1
   169be:	f7fe fa43 	bl	14e48 <bt_addr_le_str_real>
   169c2:	f7fb f827 	bl	11a14 <z_log_strdup>
   169c6:	08ed      	lsrs	r5, r5, #3
   169c8:	01ad      	lsls	r5, r5, #6
   169ca:	f045 0703 	orr.w	r7, r5, #3
   169ce:	4602      	mov	r2, r0
   169d0:	4631      	mov	r1, r6
   169d2:	4822      	ldr	r0, [pc, #136]	; (16a5c <bt_finalize_init+0xc8>)
   169d4:	463b      	mov	r3, r7
   169d6:	f011 f882 	bl	27ade <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   169da:	46a0      	mov	r8, r4
   169dc:	2601      	movs	r6, #1
   169de:	79e3      	ldrb	r3, [r4, #7]
   169e0:	429e      	cmp	r6, r3
   169e2:	f108 0807 	add.w	r8, r8, #7
   169e6:	db22      	blt.n	16a2e <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   169e8:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
   169ec:	4630      	mov	r0, r6
   169ee:	f7fe fe47 	bl	15680 <ver_str>
   169f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   169f4:	9304      	str	r3, [sp, #16]
   169f6:	f045 0503 	orr.w	r5, r5, #3
   169fa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   169fc:	9305      	str	r3, [sp, #20]
   169fe:	e9cd 0602 	strd	r0, r6, [sp, #8]
   16a02:	462b      	mov	r3, r5
   16a04:	a902      	add	r1, sp, #8
   16a06:	2204      	movs	r2, #4
   16a08:	4815      	ldr	r0, [pc, #84]	; (16a60 <bt_finalize_init+0xcc>)
   16a0a:	f011 f89d 	bl	27b48 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   16a0e:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
   16a12:	4630      	mov	r0, r6
   16a14:	f7fe fe34 	bl	15680 <ver_str>
   16a18:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   16a1a:	f8ad 5000 	strh.w	r5, [sp]
   16a1e:	4601      	mov	r1, r0
   16a20:	4632      	mov	r2, r6
   16a22:	4810      	ldr	r0, [pc, #64]	; (16a64 <bt_finalize_init+0xd0>)
   16a24:	f011 f874 	bl	27b10 <log_3>
}
   16a28:	b007      	add	sp, #28
   16a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   16a2e:	4640      	mov	r0, r8
   16a30:	f7fe fa0a 	bl	14e48 <bt_addr_le_str_real>
   16a34:	f7fa ffee 	bl	11a14 <z_log_strdup>
   16a38:	4631      	mov	r1, r6
   16a3a:	4602      	mov	r2, r0
   16a3c:	463b      	mov	r3, r7
   16a3e:	4648      	mov	r0, r9
   16a40:	f011 f84d 	bl	27ade <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   16a44:	3601      	adds	r6, #1
   16a46:	e7ca      	b.n	169de <bt_finalize_init+0x4a>
   16a48:	200002b8 	.word	0x200002b8
   16a4c:	0002cce8 	.word	0x0002cce8
   16a50:	00030be8 	.word	0x00030be8
   16a54:	0002ccb8 	.word	0x0002ccb8
   16a58:	0002f6e8 	.word	0x0002f6e8
   16a5c:	0002f6ec 	.word	0x0002f6ec
   16a60:	0002f70c 	.word	0x0002f70c
   16a64:	0002f74a 	.word	0x0002f74a
   16a68:	0002f6fb 	.word	0x0002f6fb

00016a6c <init_work>:
{
   16a6c:	b510      	push	{r4, lr}
	err = bt_init();
   16a6e:	f7f8 fedb 	bl	f828 <bt_init>
	if (ready_cb) {
   16a72:	4b03      	ldr	r3, [pc, #12]	; (16a80 <init_work+0x14>)
   16a74:	681b      	ldr	r3, [r3, #0]
   16a76:	b113      	cbz	r3, 16a7e <init_work+0x12>
}
   16a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16a7c:	4718      	bx	r3
}
   16a7e:	bd10      	pop	{r4, pc}
   16a80:	2000302c 	.word	0x2000302c

00016a84 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   16a84:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   16a88:	4d38      	ldr	r5, [pc, #224]	; (16b6c <bt_enable+0xe8>)
   16a8a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
{
   16a8e:	b088      	sub	sp, #32
   16a90:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16a92:	b97b      	cbnz	r3, 16ab4 <bt_enable+0x30>
   16a94:	4b36      	ldr	r3, [pc, #216]	; (16b70 <bt_enable+0xec>)
   16a96:	4937      	ldr	r1, [pc, #220]	; (16b74 <bt_enable+0xf0>)
		BT_ERR("No HCI driver registered");
   16a98:	4837      	ldr	r0, [pc, #220]	; (16b78 <bt_enable+0xf4>)
   16a9a:	1ac9      	subs	r1, r1, r3
   16a9c:	08c9      	lsrs	r1, r1, #3
   16a9e:	0189      	lsls	r1, r1, #6
   16aa0:	f041 0101 	orr.w	r1, r1, #1
   16aa4:	f010 fffa 	bl	27a9c <log_0>
		return -ENODEV;
   16aa8:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16aac:	4620      	mov	r0, r4
   16aae:	b008      	add	sp, #32
   16ab0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16ab4:	2101      	movs	r1, #1
   16ab6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16aba:	f013 f926 	bl	29d0a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16abe:	07c3      	lsls	r3, r0, #31
   16ac0:	d451      	bmi.n	16b66 <bt_enable+0xe2>
		err = bt_settings_init();
   16ac2:	f7fe fd07 	bl	154d4 <bt_settings_init>
		if (err) {
   16ac6:	4604      	mov	r4, r0
   16ac8:	2800      	cmp	r0, #0
   16aca:	d1ef      	bne.n	16aac <bt_enable+0x28>
	ready_cb = cb;
   16acc:	4b2b      	ldr	r3, [pc, #172]	; (16b7c <bt_enable+0xf8>)
   16ace:	f04f 0800 	mov.w	r8, #0
   16ad2:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   16ad4:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16ad8:	f06f 0308 	mvn.w	r3, #8
   16adc:	e9cd 0302 	strd	r0, r3, [sp, #8]
   16ae0:	e9cd 0000 	strd	r0, r0, [sp]
   16ae4:	9004      	str	r0, [sp, #16]
   16ae6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16aea:	4b25      	ldr	r3, [pc, #148]	; (16b80 <bt_enable+0xfc>)
   16aec:	4925      	ldr	r1, [pc, #148]	; (16b84 <bt_enable+0x100>)
   16aee:	4826      	ldr	r0, [pc, #152]	; (16b88 <bt_enable+0x104>)
   16af0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   16af4:	f00a fac6 	bl	21084 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16af8:	4924      	ldr	r1, [pc, #144]	; (16b8c <bt_enable+0x108>)
   16afa:	4823      	ldr	r0, [pc, #140]	; (16b88 <bt_enable+0x104>)
   16afc:	f015 fd7a 	bl	2c5f4 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16b00:	f06f 0307 	mvn.w	r3, #7
   16b04:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16b08:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16b0c:	e9cd 4400 	strd	r4, r4, [sp]
   16b10:	4b1f      	ldr	r3, [pc, #124]	; (16b90 <bt_enable+0x10c>)
   16b12:	4920      	ldr	r1, [pc, #128]	; (16b94 <bt_enable+0x110>)
   16b14:	9404      	str	r4, [sp, #16]
   16b16:	f640 0298 	movw	r2, #2200	; 0x898
   16b1a:	481f      	ldr	r0, [pc, #124]	; (16b98 <bt_enable+0x114>)
   16b1c:	f00a fab2 	bl	21084 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16b20:	491e      	ldr	r1, [pc, #120]	; (16b9c <bt_enable+0x118>)
   16b22:	481d      	ldr	r0, [pc, #116]	; (16b98 <bt_enable+0x114>)
   16b24:	f015 fd66 	bl	2c5f4 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   16b28:	f7fe fbb4 	bl	15294 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   16b2c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   16b30:	68db      	ldr	r3, [r3, #12]
   16b32:	4798      	blx	r3
	if (err) {
   16b34:	4604      	mov	r4, r0
   16b36:	b158      	cbz	r0, 16b50 <bt_enable+0xcc>
   16b38:	4b0d      	ldr	r3, [pc, #52]	; (16b70 <bt_enable+0xec>)
   16b3a:	4a0e      	ldr	r2, [pc, #56]	; (16b74 <bt_enable+0xf0>)
   16b3c:	1ad2      	subs	r2, r2, r3
   16b3e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   16b40:	0192      	lsls	r2, r2, #6
   16b42:	4601      	mov	r1, r0
   16b44:	f042 0201 	orr.w	r2, r2, #1
   16b48:	4815      	ldr	r0, [pc, #84]	; (16ba0 <bt_enable+0x11c>)
   16b4a:	f010 ffb4 	bl	27ab6 <log_1>
		return err;
   16b4e:	e7ad      	b.n	16aac <bt_enable+0x28>
	if (!cb) {
   16b50:	b926      	cbnz	r6, 16b5c <bt_enable+0xd8>
}
   16b52:	b008      	add	sp, #32
   16b54:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   16b58:	f7f8 be66 	b.w	f828 <bt_init>
	k_work_submit(&bt_dev.init);
   16b5c:	f105 0088 	add.w	r0, r5, #136	; 0x88
   16b60:	f00b fa8c 	bl	2207c <k_work_submit>
	return 0;
   16b64:	e7a2      	b.n	16aac <bt_enable+0x28>
		return -EALREADY;
   16b66:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16b6a:	e79f      	b.n	16aac <bt_enable+0x28>
   16b6c:	200002b8 	.word	0x200002b8
   16b70:	0002ccb8 	.word	0x0002ccb8
   16b74:	0002cce8 	.word	0x0002cce8
   16b78:	0002f896 	.word	0x0002f896
   16b7c:	2000302c 	.word	0x2000302c
   16b80:	00015e49 	.word	0x00015e49
   16b84:	200060a0 	.word	0x200060a0
   16b88:	200017d0 	.word	0x200017d0
   16b8c:	0002f8af 	.word	0x0002f8af
   16b90:	00015bdd 	.word	0x00015bdd
   16b94:	200057e0 	.word	0x200057e0
   16b98:	20001750 	.word	0x20001750
   16b9c:	0002f8b5 	.word	0x0002f8b5
   16ba0:	0002f8bb 	.word	0x0002f8bb

00016ba4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16ba4:	4800      	ldr	r0, [pc, #0]	; (16ba8 <bt_get_name+0x4>)
   16ba6:	4770      	bx	lr
   16ba8:	0002dc7c 	.word	0x0002dc7c

00016bac <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16bae:	4f0b      	ldr	r7, [pc, #44]	; (16bdc <id_find+0x30>)
{
   16bb0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   16bb2:	2500      	movs	r5, #0
   16bb4:	79fb      	ldrb	r3, [r7, #7]
   16bb6:	b2ec      	uxtb	r4, r5
   16bb8:	42a3      	cmp	r3, r4
   16bba:	d802      	bhi.n	16bc2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16bbc:	f06f 0401 	mvn.w	r4, #1
   16bc0:	e009      	b.n	16bd6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   16bc2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   16bc6:	2207      	movs	r2, #7
   16bc8:	4439      	add	r1, r7
   16bca:	4630      	mov	r0, r6
   16bcc:	f012 ff1e 	bl	29a0c <memcmp>
   16bd0:	3501      	adds	r5, #1
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d1ee      	bne.n	16bb4 <id_find+0x8>
}
   16bd6:	4620      	mov	r0, r4
   16bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bda:	bf00      	nop
   16bdc:	200002b8 	.word	0x200002b8

00016be0 <set_random_address>:
{
   16be0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   16be2:	4914      	ldr	r1, [pc, #80]	; (16c34 <set_random_address+0x54>)
   16be4:	2206      	movs	r2, #6
   16be6:	4605      	mov	r5, r0
   16be8:	f012 ff10 	bl	29a0c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16bec:	4604      	mov	r4, r0
   16bee:	b1e0      	cbz	r0, 16c2a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16bf0:	2106      	movs	r1, #6
   16bf2:	f242 0005 	movw	r0, #8197	; 0x2005
   16bf6:	f7ff fa2b 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   16bfa:	4604      	mov	r4, r0
   16bfc:	b1b8      	cbz	r0, 16c2e <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16bfe:	2206      	movs	r2, #6
   16c00:	4629      	mov	r1, r5
   16c02:	3008      	adds	r0, #8
   16c04:	f014 fee2 	bl	2b9cc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16c08:	4621      	mov	r1, r4
   16c0a:	2200      	movs	r2, #0
   16c0c:	f242 0005 	movw	r0, #8197	; 0x2005
   16c10:	f7ff fb8a 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   16c14:	4604      	mov	r4, r0
   16c16:	b940      	cbnz	r0, 16c2a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   16c18:	2206      	movs	r2, #6
   16c1a:	4806      	ldr	r0, [pc, #24]	; (16c34 <set_random_address+0x54>)
   16c1c:	4629      	mov	r1, r5
   16c1e:	f012 ff1c 	bl	29a5a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   16c22:	4b05      	ldr	r3, [pc, #20]	; (16c38 <set_random_address+0x58>)
   16c24:	2201      	movs	r2, #1
   16c26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   16c2a:	4620      	mov	r0, r4
   16c2c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   16c2e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16c32:	e7fa      	b.n	16c2a <set_random_address+0x4a>
   16c34:	200002e5 	.word	0x200002e5
   16c38:	200002b8 	.word	0x200002b8

00016c3c <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16c3c:	b530      	push	{r4, r5, lr}
   16c3e:	4c17      	ldr	r4, [pc, #92]	; (16c9c <id_create.isra.0+0x60>)
   16c40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16c44:	b085      	sub	sp, #20
   16c46:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16c48:	460d      	mov	r5, r1
   16c4a:	b1b1      	cbz	r1, 16c7a <id_create.isra.0+0x3e>
   16c4c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16c4e:	2207      	movs	r2, #7
   16c50:	a902      	add	r1, sp, #8
   16c52:	4628      	mov	r0, r5
   16c54:	9302      	str	r3, [sp, #8]
   16c56:	f8cd 300b 	str.w	r3, [sp, #11]
   16c5a:	f012 fed7 	bl	29a0c <memcmp>
   16c5e:	b160      	cbz	r0, 16c7a <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16c60:	4629      	mov	r1, r5
   16c62:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16c64:	f013 f935 	bl	29ed2 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16c68:	480d      	ldr	r0, [pc, #52]	; (16ca0 <id_create.isra.0+0x64>)
   16c6a:	f013 f935 	bl	29ed8 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16c6e:	0783      	lsls	r3, r0, #30
   16c70:	d501      	bpl.n	16c76 <id_create.isra.0+0x3a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   16c72:	f7fe fbe9 	bl	15448 <bt_settings_save_id>
	}
}
   16c76:	b005      	add	sp, #20
   16c78:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   16c7a:	4668      	mov	r0, sp
   16c7c:	f013 f80d 	bl	29c9a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   16c80:	4668      	mov	r0, sp
   16c82:	f7ff ff93 	bl	16bac <id_find>
   16c86:	2800      	cmp	r0, #0
   16c88:	daf7      	bge.n	16c7a <id_create.isra.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16c8a:	4669      	mov	r1, sp
   16c8c:	4620      	mov	r0, r4
   16c8e:	f013 f920 	bl	29ed2 <bt_addr_le_copy>
		if (addr) {
   16c92:	2d00      	cmp	r5, #0
   16c94:	d0e8      	beq.n	16c68 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16c96:	4621      	mov	r1, r4
   16c98:	4628      	mov	r0, r5
   16c9a:	e7e3      	b.n	16c64 <id_create.isra.0+0x28>
   16c9c:	200002b8 	.word	0x200002b8
   16ca0:	20000350 	.word	0x20000350

00016ca4 <bt_id_pending_keys_update>:
   16ca4:	4b0a      	ldr	r3, [pc, #40]	; (16cd0 <bt_id_pending_keys_update+0x2c>)
   16ca6:	f3bf 8f5b 	dmb	ish
   16caa:	e853 2f00 	ldrex	r2, [r3]
   16cae:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   16cb2:	e843 1000 	strex	r0, r1, [r3]
   16cb6:	2800      	cmp	r0, #0
   16cb8:	d1f7      	bne.n	16caa <bt_id_pending_keys_update+0x6>
   16cba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16cbe:	0493      	lsls	r3, r2, #18
   16cc0:	d504      	bpl.n	16ccc <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   16cc2:	4904      	ldr	r1, [pc, #16]	; (16cd4 <bt_id_pending_keys_update+0x30>)
   16cc4:	2200      	movs	r2, #0
   16cc6:	2002      	movs	r0, #2
   16cc8:	f006 b8a8 	b.w	1ce1c <bt_keys_foreach>
}
   16ccc:	4770      	bx	lr
   16cce:	bf00      	nop
   16cd0:	20000350 	.word	0x20000350
   16cd4:	0002a011 	.word	0x0002a011

00016cd8 <bt_id_add>:
{
   16cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16cda:	4e5e      	ldr	r6, [pc, #376]	; (16e54 <bt_id_add+0x17c>)
   16cdc:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   16ce0:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
   16ce4:	4604      	mov	r4, r0
   16ce6:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16ce8:	b10a      	cbz	r2, 16cee <bt_id_add+0x16>
   16cea:	429a      	cmp	r2, r3
   16cec:	d208      	bcs.n	16d00 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   16cee:	3301      	adds	r3, #1
   16cf0:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   16cf4:	7a23      	ldrb	r3, [r4, #8]
   16cf6:	f043 0304 	orr.w	r3, r3, #4
   16cfa:	7223      	strb	r3, [r4, #8]
}
   16cfc:	b003      	add	sp, #12
   16cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   16d00:	2100      	movs	r1, #0
   16d02:	2206      	movs	r2, #6
   16d04:	4608      	mov	r0, r1
   16d06:	f001 fb81 	bl	1840c <bt_conn_lookup_state_le>
	if (conn) {
   16d0a:	4607      	mov	r7, r0
   16d0c:	b198      	cbz	r0, 16d36 <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d0e:	f3bf 8f5b 	dmb	ish
   16d12:	3698      	adds	r6, #152	; 0x98
   16d14:	e856 3f00 	ldrex	r3, [r6]
   16d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   16d1c:	e846 3200 	strex	r2, r3, [r6]
   16d20:	2a00      	cmp	r2, #0
   16d22:	d1f7      	bne.n	16d14 <bt_id_add+0x3c>
   16d24:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16d28:	7a23      	ldrb	r3, [r4, #8]
   16d2a:	f043 0301 	orr.w	r3, r3, #1
   16d2e:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   16d30:	f001 f928 	bl	17f84 <bt_conn_unref>
		return;
   16d34:	e7e2      	b.n	16cfc <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16d36:	4601      	mov	r1, r0
   16d38:	4847      	ldr	r0, [pc, #284]	; (16e58 <bt_id_add+0x180>)
   16d3a:	f000 fbc1 	bl	174c0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   16d3e:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
   16d42:	b173      	cbz	r3, 16d62 <bt_id_add+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16d44:	4638      	mov	r0, r7
   16d46:	f013 f8cd 	bl	29ee4 <addr_res_enable>
		if (err) {
   16d4a:	b150      	cbz	r0, 16d62 <bt_id_add+0x8a>
   16d4c:	4943      	ldr	r1, [pc, #268]	; (16e5c <bt_id_add+0x184>)
   16d4e:	4b44      	ldr	r3, [pc, #272]	; (16e60 <bt_id_add+0x188>)
			BT_WARN("Failed to disable address resolution");
   16d50:	4844      	ldr	r0, [pc, #272]	; (16e64 <bt_id_add+0x18c>)
   16d52:	1ac9      	subs	r1, r1, r3
   16d54:	08c9      	lsrs	r1, r1, #3
   16d56:	0189      	lsls	r1, r1, #6
   16d58:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   16d5c:	f010 fe9e 	bl	27a9c <log_0>
	if (err) {
   16d60:	e023      	b.n	16daa <bt_id_add+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   16d62:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   16d66:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   16d6a:	429a      	cmp	r2, r3
   16d6c:	d125      	bne.n	16dba <bt_id_add+0xe2>
   16d6e:	4b3c      	ldr	r3, [pc, #240]	; (16e60 <bt_id_add+0x188>)
   16d70:	4e3a      	ldr	r6, [pc, #232]	; (16e5c <bt_id_add+0x184>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   16d72:	483d      	ldr	r0, [pc, #244]	; (16e68 <bt_id_add+0x190>)
   16d74:	1af6      	subs	r6, r6, r3
   16d76:	08f6      	lsrs	r6, r6, #3
   16d78:	01b6      	lsls	r6, r6, #6
   16d7a:	f046 0102 	orr.w	r1, r6, #2
   16d7e:	f010 fe8d 	bl	27a9c <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   16d82:	2200      	movs	r2, #0
   16d84:	4611      	mov	r1, r2
   16d86:	f242 0029 	movw	r0, #8233	; 0x2029
   16d8a:	f7ff facd 	bl	16328 <bt_hci_cmd_send_sync>
		if (err) {
   16d8e:	b118      	cbz	r0, 16d98 <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
   16d90:	4836      	ldr	r0, [pc, #216]	; (16e6c <bt_id_add+0x194>)
   16d92:	f046 0101 	orr.w	r1, r6, #1
   16d96:	e7e1      	b.n	16d5c <bt_id_add+0x84>
		bt_dev.le.rl_entries++;
   16d98:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   16d9c:	3301      	adds	r3, #1
   16d9e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   16da2:	7a23      	ldrb	r3, [r4, #8]
   16da4:	f043 0304 	orr.w	r3, r3, #4
   16da8:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16daa:	2001      	movs	r0, #1
   16dac:	f013 f89a 	bl	29ee4 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16db0:	482f      	ldr	r0, [pc, #188]	; (16e70 <bt_id_add+0x198>)
   16db2:	2100      	movs	r1, #0
   16db4:	f000 fb84 	bl	174c0 <bt_le_ext_adv_foreach>
   16db8:	e7a0      	b.n	16cfc <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   16dba:	1c67      	adds	r7, r4, #1
   16dbc:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   16dc0:	4638      	mov	r0, r7
   16dc2:	f013 f8a7 	bl	29f14 <hci_id_add.isra.0>
	if (err) {
   16dc6:	4606      	mov	r6, r0
   16dc8:	b140      	cbz	r0, 16ddc <bt_id_add+0x104>
   16dca:	4924      	ldr	r1, [pc, #144]	; (16e5c <bt_id_add+0x184>)
   16dcc:	4b24      	ldr	r3, [pc, #144]	; (16e60 <bt_id_add+0x188>)
		BT_ERR("Failed to add IRK to controller");
   16dce:	4829      	ldr	r0, [pc, #164]	; (16e74 <bt_id_add+0x19c>)
   16dd0:	1ac9      	subs	r1, r1, r3
   16dd2:	08c9      	lsrs	r1, r1, #3
   16dd4:	0189      	lsls	r1, r1, #6
   16dd6:	f041 0101 	orr.w	r1, r1, #1
   16dda:	e7bf      	b.n	16d5c <bt_id_add+0x84>
	bt_dev.le.rl_entries++;
   16ddc:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   16de0:	3301      	adds	r3, #1
   16de2:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   16de6:	7a23      	ldrb	r3, [r4, #8]
   16de8:	f043 0304 	orr.w	r3, r3, #4
   16dec:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   16dee:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
   16df2:	075b      	lsls	r3, r3, #29
   16df4:	d408      	bmi.n	16e08 <bt_id_add+0x130>
   16df6:	4919      	ldr	r1, [pc, #100]	; (16e5c <bt_id_add+0x184>)
   16df8:	4b19      	ldr	r3, [pc, #100]	; (16e60 <bt_id_add+0x188>)
		BT_WARN("Set privacy mode command is not supported");
   16dfa:	481f      	ldr	r0, [pc, #124]	; (16e78 <bt_id_add+0x1a0>)
   16dfc:	1ac9      	subs	r1, r1, r3
   16dfe:	08c9      	lsrs	r1, r1, #3
   16e00:	0189      	lsls	r1, r1, #6
   16e02:	f041 0102 	orr.w	r1, r1, #2
   16e06:	e7a9      	b.n	16d5c <bt_id_add+0x84>
	bt_addr_le_copy(&cp.id_addr, addr);
   16e08:	4639      	mov	r1, r7
   16e0a:	4668      	mov	r0, sp
   16e0c:	f013 f861 	bl	29ed2 <bt_addr_le_copy>
	cp.mode = mode;
   16e10:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16e12:	2108      	movs	r1, #8
   16e14:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   16e18:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16e1c:	f7ff f918 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   16e20:	4604      	mov	r4, r0
   16e22:	b940      	cbnz	r0, 16e36 <bt_id_add+0x15e>
   16e24:	490d      	ldr	r1, [pc, #52]	; (16e5c <bt_id_add+0x184>)
   16e26:	4b0e      	ldr	r3, [pc, #56]	; (16e60 <bt_id_add+0x188>)
		BT_ERR("Failed to set privacy mode");
   16e28:	4814      	ldr	r0, [pc, #80]	; (16e7c <bt_id_add+0x1a4>)
   16e2a:	1ac9      	subs	r1, r1, r3
   16e2c:	08c9      	lsrs	r1, r1, #3
   16e2e:	0189      	lsls	r1, r1, #6
   16e30:	f041 0101 	orr.w	r1, r1, #1
   16e34:	e792      	b.n	16d5c <bt_id_add+0x84>
   16e36:	2208      	movs	r2, #8
   16e38:	4669      	mov	r1, sp
   16e3a:	4410      	add	r0, r2
   16e3c:	f014 fdc6 	bl	2b9cc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   16e40:	4632      	mov	r2, r6
   16e42:	4621      	mov	r1, r4
   16e44:	f242 004e 	movw	r0, #8270	; 0x204e
   16e48:	f7ff fa6e 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   16e4c:	2800      	cmp	r0, #0
   16e4e:	d0ac      	beq.n	16daa <bt_id_add+0xd2>
   16e50:	e7e8      	b.n	16e24 <bt_id_add+0x14c>
   16e52:	bf00      	nop
   16e54:	200002b8 	.word	0x200002b8
   16e58:	00029fa1 	.word	0x00029fa1
   16e5c:	0002ccf8 	.word	0x0002ccf8
   16e60:	0002ccb8 	.word	0x0002ccb8
   16e64:	0002f901 	.word	0x0002f901
   16e68:	0002f926 	.word	0x0002f926
   16e6c:	0002f957 	.word	0x0002f957
   16e70:	00029f77 	.word	0x00029f77
   16e74:	0002f977 	.word	0x0002f977
   16e78:	0002f997 	.word	0x0002f997
   16e7c:	0002f9c1 	.word	0x0002f9c1

00016e80 <bt_id_del>:
{
   16e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   16e84:	4e47      	ldr	r6, [pc, #284]	; (16fa4 <bt_id_del+0x124>)
   16e86:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   16e8a:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
   16e8e:	4604      	mov	r4, r0
   16e90:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
   16e92:	b112      	cbz	r2, 16e9a <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16e94:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   16e96:	4293      	cmp	r3, r2
   16e98:	dd08      	ble.n	16eac <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   16e9a:	3b01      	subs	r3, #1
   16e9c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   16ea0:	7a23      	ldrb	r3, [r4, #8]
   16ea2:	f023 0304 	bic.w	r3, r3, #4
   16ea6:	7223      	strb	r3, [r4, #8]
}
   16ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   16eac:	2100      	movs	r1, #0
   16eae:	2206      	movs	r2, #6
   16eb0:	4608      	mov	r0, r1
   16eb2:	f001 faab 	bl	1840c <bt_conn_lookup_state_le>
	if (conn) {
   16eb6:	4607      	mov	r7, r0
   16eb8:	b1a0      	cbz	r0, 16ee4 <bt_id_del+0x64>
   16eba:	f3bf 8f5b 	dmb	ish
   16ebe:	3698      	adds	r6, #152	; 0x98
   16ec0:	e856 3f00 	ldrex	r3, [r6]
   16ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   16ec8:	e846 3200 	strex	r2, r3, [r6]
   16ecc:	2a00      	cmp	r2, #0
   16ece:	d1f7      	bne.n	16ec0 <bt_id_del+0x40>
   16ed0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16ed4:	7a23      	ldrb	r3, [r4, #8]
   16ed6:	f043 0302 	orr.w	r3, r3, #2
   16eda:	7223      	strb	r3, [r4, #8]
}
   16edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   16ee0:	f001 b850 	b.w	17f84 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16ee4:	4601      	mov	r1, r0
   16ee6:	4830      	ldr	r0, [pc, #192]	; (16fa8 <bt_id_del+0x128>)
   16ee8:	f000 faea 	bl	174c0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16eec:	4638      	mov	r0, r7
   16eee:	f012 fff9 	bl	29ee4 <addr_res_enable>
	if (err) {
   16ef2:	4606      	mov	r6, r0
   16ef4:	b1b0      	cbz	r0, 16f24 <bt_id_del+0xa4>
   16ef6:	4a2d      	ldr	r2, [pc, #180]	; (16fac <bt_id_del+0x12c>)
   16ef8:	4b2d      	ldr	r3, [pc, #180]	; (16fb0 <bt_id_del+0x130>)
   16efa:	1ad2      	subs	r2, r2, r3
   16efc:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   16efe:	0192      	lsls	r2, r2, #6
   16f00:	4601      	mov	r1, r0
   16f02:	f042 0201 	orr.w	r2, r2, #1
   16f06:	482b      	ldr	r0, [pc, #172]	; (16fb4 <bt_id_del+0x134>)
   16f08:	f010 fdd5 	bl	27ab6 <log_1>
	if (bt_dev.le.rl_entries) {
   16f0c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   16f10:	b113      	cbz	r3, 16f18 <bt_id_del+0x98>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16f12:	2001      	movs	r0, #1
   16f14:	f012 ffe6 	bl	29ee4 <addr_res_enable>
}
   16f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16f1c:	4826      	ldr	r0, [pc, #152]	; (16fb8 <bt_id_del+0x138>)
   16f1e:	2100      	movs	r1, #0
   16f20:	f000 bace 	b.w	174c0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16f24:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   16f28:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   16f2c:	429a      	cmp	r2, r3
   16f2e:	d20c      	bcs.n	16f4a <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   16f30:	3b01      	subs	r3, #1
   16f32:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   16f36:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16f38:	4920      	ldr	r1, [pc, #128]	; (16fbc <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   16f3a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16f3e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   16f40:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16f42:	2002      	movs	r0, #2
   16f44:	f005 ff6a 	bl	1ce1c <bt_keys_foreach>
		goto done;
   16f48:	e7e0      	b.n	16f0c <bt_id_del+0x8c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   16f4a:	2107      	movs	r1, #7
   16f4c:	f242 0028 	movw	r0, #8232	; 0x2028
   16f50:	f7ff f87e 	bl	16050 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   16f54:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   16f58:	4607      	mov	r7, r0
   16f5a:	b950      	cbnz	r0, 16f72 <bt_id_del+0xf2>
   16f5c:	4b14      	ldr	r3, [pc, #80]	; (16fb0 <bt_id_del+0x130>)
   16f5e:	4913      	ldr	r1, [pc, #76]	; (16fac <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
   16f60:	4817      	ldr	r0, [pc, #92]	; (16fc0 <bt_id_del+0x140>)
   16f62:	1ac9      	subs	r1, r1, r3
   16f64:	08c9      	lsrs	r1, r1, #3
   16f66:	0189      	lsls	r1, r1, #6
   16f68:	f041 0101 	orr.w	r1, r1, #1
   16f6c:	f010 fd96 	bl	27a9c <log_0>
		goto done;
   16f70:	e7cc      	b.n	16f0c <bt_id_del+0x8c>
	return net_buf_simple_add(&buf->b, len);
   16f72:	2107      	movs	r1, #7
   16f74:	3008      	adds	r0, #8
   16f76:	f006 fb95 	bl	1d6a4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   16f7a:	4641      	mov	r1, r8
   16f7c:	f012 ffa9 	bl	29ed2 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   16f80:	4632      	mov	r2, r6
   16f82:	4639      	mov	r1, r7
   16f84:	f242 0028 	movw	r0, #8232	; 0x2028
   16f88:	f7ff f9ce 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   16f8c:	2800      	cmp	r0, #0
   16f8e:	d1e5      	bne.n	16f5c <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   16f90:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   16f94:	3b01      	subs	r3, #1
   16f96:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   16f9a:	7a23      	ldrb	r3, [r4, #8]
   16f9c:	f023 0304 	bic.w	r3, r3, #4
   16fa0:	7223      	strb	r3, [r4, #8]
   16fa2:	e7b3      	b.n	16f0c <bt_id_del+0x8c>
   16fa4:	200002b8 	.word	0x200002b8
   16fa8:	00029fa1 	.word	0x00029fa1
   16fac:	0002ccf8 	.word	0x0002ccf8
   16fb0:	0002ccb8 	.word	0x0002ccb8
   16fb4:	0002f9dc 	.word	0x0002f9dc
   16fb8:	00029f77 	.word	0x00029f77
   16fbc:	00029f65 	.word	0x00029f65
   16fc0:	0002fa09 	.word	0x0002fa09

00016fc4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16fc6:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16fc8:	4605      	mov	r5, r0
   16fca:	b918      	cbnz	r0, 16fd4 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16fcc:	b34c      	cbz	r4, 17022 <bt_id_create+0x5e>
		return -EINVAL;
   16fce:	f06f 0415 	mvn.w	r4, #21
   16fd2:	e023      	b.n	1701c <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16fd4:	2300      	movs	r3, #0
   16fd6:	2207      	movs	r2, #7
   16fd8:	4669      	mov	r1, sp
   16fda:	9300      	str	r3, [sp, #0]
   16fdc:	f8cd 3003 	str.w	r3, [sp, #3]
   16fe0:	f012 fd14 	bl	29a0c <memcmp>
   16fe4:	2800      	cmp	r0, #0
   16fe6:	d0f1      	beq.n	16fcc <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16fe8:	782b      	ldrb	r3, [r5, #0]
   16fea:	2b01      	cmp	r3, #1
   16fec:	d104      	bne.n	16ff8 <bt_id_create+0x34>
   16fee:	79ab      	ldrb	r3, [r5, #6]
   16ff0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16ff4:	2bc0      	cmp	r3, #192	; 0xc0
   16ff6:	d00a      	beq.n	1700e <bt_id_create+0x4a>
   16ff8:	4b1a      	ldr	r3, [pc, #104]	; (17064 <bt_id_create+0xa0>)
   16ffa:	491b      	ldr	r1, [pc, #108]	; (17068 <bt_id_create+0xa4>)
			BT_ERR("Only static random identity address supported");
   16ffc:	481b      	ldr	r0, [pc, #108]	; (1706c <bt_id_create+0xa8>)
   16ffe:	1ac9      	subs	r1, r1, r3
   17000:	08c9      	lsrs	r1, r1, #3
   17002:	0189      	lsls	r1, r1, #6
   17004:	f041 0101 	orr.w	r1, r1, #1
   17008:	f010 fd48 	bl	27a9c <log_0>
			return -EINVAL;
   1700c:	e7df      	b.n	16fce <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1700e:	4628      	mov	r0, r5
   17010:	f7ff fdcc 	bl	16bac <id_find>
   17014:	2800      	cmp	r0, #0
   17016:	dbd9      	blt.n	16fcc <bt_id_create+0x8>
			return -EALREADY;
   17018:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   1701c:	4620      	mov	r0, r4
   1701e:	b002      	add	sp, #8
   17020:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17022:	4e13      	ldr	r6, [pc, #76]	; (17070 <bt_id_create+0xac>)
   17024:	79f3      	ldrb	r3, [r6, #7]
   17026:	2b01      	cmp	r3, #1
   17028:	d019      	beq.n	1705e <bt_id_create+0x9a>
   1702a:	f106 0098 	add.w	r0, r6, #152	; 0x98
   1702e:	f012 ff53 	bl	29ed8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17032:	07c3      	lsls	r3, r0, #31
   17034:	d40b      	bmi.n	1704e <bt_id_create+0x8a>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   17036:	2d00      	cmp	r5, #0
   17038:	d0c9      	beq.n	16fce <bt_id_create+0xa>
   1703a:	2207      	movs	r2, #7
   1703c:	4669      	mov	r1, sp
   1703e:	4628      	mov	r0, r5
   17040:	9400      	str	r4, [sp, #0]
   17042:	f8cd 4003 	str.w	r4, [sp, #3]
   17046:	f012 fce1 	bl	29a0c <memcmp>
   1704a:	2800      	cmp	r0, #0
   1704c:	d0bf      	beq.n	16fce <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   1704e:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   17050:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   17052:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   17054:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   17056:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   17058:	f7ff fdf0 	bl	16c3c <id_create.isra.0>
	return new_id;
   1705c:	e7de      	b.n	1701c <bt_id_create+0x58>
		return -ENOMEM;
   1705e:	f06f 040b 	mvn.w	r4, #11
   17062:	e7db      	b.n	1701c <bt_id_create+0x58>
   17064:	0002ccb8 	.word	0x0002ccb8
   17068:	0002ccf8 	.word	0x0002ccf8
   1706c:	0002fa2e 	.word	0x0002fa2e
   17070:	200002b8 	.word	0x200002b8

00017074 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17074:	b570      	push	{r4, r5, r6, lr}
   17076:	b086      	sub	sp, #24
   17078:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1707a:	aa01      	add	r2, sp, #4
   1707c:	2100      	movs	r1, #0
   1707e:	f241 0009 	movw	r0, #4105	; 0x1009
   17082:	f7ff f951 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   17086:	4604      	mov	r4, r0
   17088:	b160      	cbz	r0, 170a4 <bt_id_read_public_addr+0x30>
   1708a:	491a      	ldr	r1, [pc, #104]	; (170f4 <bt_id_read_public_addr+0x80>)
   1708c:	4b1a      	ldr	r3, [pc, #104]	; (170f8 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   1708e:	481b      	ldr	r0, [pc, #108]	; (170fc <bt_id_read_public_addr+0x88>)
   17090:	1ac9      	subs	r1, r1, r3
   17092:	08c9      	lsrs	r1, r1, #3
   17094:	0189      	lsls	r1, r1, #6
   17096:	f041 0102 	orr.w	r1, r1, #2
   1709a:	f010 fcff 	bl	27a9c <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1709e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   170a0:	b006      	add	sp, #24
   170a2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   170a4:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   170a6:	9002      	str	r0, [sp, #8]
   170a8:	689d      	ldr	r5, [r3, #8]
   170aa:	f8ad 000c 	strh.w	r0, [sp, #12]
   170ae:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   170b0:	2206      	movs	r2, #6
   170b2:	a902      	add	r1, sp, #8
   170b4:	4628      	mov	r0, r5
   170b6:	f012 fca9 	bl	29a0c <memcmp>
   170ba:	b918      	cbnz	r0, 170c4 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   170bc:	9801      	ldr	r0, [sp, #4]
   170be:	f006 f9c1 	bl	1d444 <net_buf_unref>
   170c2:	e7ec      	b.n	1709e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   170c4:	f04f 33ff 	mov.w	r3, #4294967295
   170c8:	2206      	movs	r2, #6
   170ca:	a904      	add	r1, sp, #16
   170cc:	4628      	mov	r0, r5
   170ce:	9304      	str	r3, [sp, #16]
   170d0:	f8ad 3014 	strh.w	r3, [sp, #20]
   170d4:	f012 fc9a 	bl	29a0c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   170d8:	2800      	cmp	r0, #0
   170da:	d0ef      	beq.n	170bc <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   170dc:	2206      	movs	r2, #6
   170de:	4629      	mov	r1, r5
   170e0:	1c70      	adds	r0, r6, #1
   170e2:	f012 fcba 	bl	29a5a <memcpy>
	net_buf_unref(rsp);
   170e6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   170e8:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   170ea:	f006 f9ab 	bl	1d444 <net_buf_unref>
	return 1U;
   170ee:	2001      	movs	r0, #1
   170f0:	e7d6      	b.n	170a0 <bt_id_read_public_addr+0x2c>
   170f2:	bf00      	nop
   170f4:	0002ccf8 	.word	0x0002ccf8
   170f8:	0002ccb8 	.word	0x0002ccb8
   170fc:	0002fa5c 	.word	0x0002fa5c

00017100 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   17100:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   17102:	4668      	mov	r0, sp
   17104:	f7ff ffb6 	bl	17074 <bt_id_read_public_addr>
   17108:	4b04      	ldr	r3, [pc, #16]	; (1711c <bt_setup_public_id_addr+0x1c>)
   1710a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1710c:	b118      	cbz	r0, 17116 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   1710e:	4669      	mov	r1, sp
   17110:	2000      	movs	r0, #0
   17112:	f7ff fd93 	bl	16c3c <id_create.isra.0>
}
   17116:	b003      	add	sp, #12
   17118:	f85d fb04 	ldr.w	pc, [sp], #4
   1711c:	200002b8 	.word	0x200002b8

00017120 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17124:	4b25      	ldr	r3, [pc, #148]	; (171bc <bt_read_static_addr+0x9c>)
   17126:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   1712a:	f014 0401 	ands.w	r4, r4, #1
{
   1712e:	4607      	mov	r7, r0
   17130:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17132:	d10a      	bne.n	1714a <bt_read_static_addr+0x2a>
   17134:	4922      	ldr	r1, [pc, #136]	; (171c0 <bt_read_static_addr+0xa0>)
   17136:	4b23      	ldr	r3, [pc, #140]	; (171c4 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   17138:	4823      	ldr	r0, [pc, #140]	; (171c8 <bt_read_static_addr+0xa8>)
   1713a:	1ac9      	subs	r1, r1, r3
   1713c:	08c9      	lsrs	r1, r1, #3
   1713e:	0189      	lsls	r1, r1, #6
   17140:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   17144:	f010 fcaa 	bl	27a9c <log_0>
   17148:	e012      	b.n	17170 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1714a:	aa01      	add	r2, sp, #4
   1714c:	2100      	movs	r1, #0
   1714e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17152:	f7ff f8e9 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   17156:	4605      	mov	r5, r0
   17158:	b170      	cbz	r0, 17178 <bt_read_static_addr+0x58>
   1715a:	4b1a      	ldr	r3, [pc, #104]	; (171c4 <bt_read_static_addr+0xa4>)
   1715c:	4918      	ldr	r1, [pc, #96]	; (171c0 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   1715e:	481b      	ldr	r0, [pc, #108]	; (171cc <bt_read_static_addr+0xac>)
   17160:	1ac9      	subs	r1, r1, r3
   17162:	08c9      	lsrs	r1, r1, #3
   17164:	0189      	lsls	r1, r1, #6
   17166:	f041 0102 	orr.w	r1, r1, #2
   1716a:	f010 fc97 	bl	27a9c <log_0>
		return 0;
   1716e:	2400      	movs	r4, #0
	}

	return cnt;
}
   17170:	4620      	mov	r0, r4
   17172:	b002      	add	sp, #8
   17174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   17178:	9b01      	ldr	r3, [sp, #4]
   1717a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1717c:	785c      	ldrb	r4, [r3, #1]
   1717e:	42b4      	cmp	r4, r6
   17180:	bf28      	it	cs
   17182:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   17184:	f04f 0816 	mov.w	r8, #22
   17188:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1718a:	42a5      	cmp	r5, r4
   1718c:	db0d      	blt.n	171aa <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   1718e:	9801      	ldr	r0, [sp, #4]
   17190:	f006 f958 	bl	1d444 <net_buf_unref>
	if (!cnt) {
   17194:	2c00      	cmp	r4, #0
   17196:	d1eb      	bne.n	17170 <bt_read_static_addr+0x50>
   17198:	4909      	ldr	r1, [pc, #36]	; (171c0 <bt_read_static_addr+0xa0>)
   1719a:	4b0a      	ldr	r3, [pc, #40]	; (171c4 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   1719c:	480c      	ldr	r0, [pc, #48]	; (171d0 <bt_read_static_addr+0xb0>)
   1719e:	1ac9      	subs	r1, r1, r3
   171a0:	08c9      	lsrs	r1, r1, #3
   171a2:	0189      	lsls	r1, r1, #6
   171a4:	f041 0102 	orr.w	r1, r1, #2
   171a8:	e7cc      	b.n	17144 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   171aa:	fb08 7005 	mla	r0, r8, r5, r7
   171ae:	2216      	movs	r2, #22
   171b0:	4631      	mov	r1, r6
   171b2:	f012 fc52 	bl	29a5a <memcpy>
	for (i = 0; i < cnt; i++) {
   171b6:	3501      	adds	r5, #1
   171b8:	e7e7      	b.n	1718a <bt_read_static_addr+0x6a>
   171ba:	bf00      	nop
   171bc:	200002b8 	.word	0x200002b8
   171c0:	0002ccf8 	.word	0x0002ccf8
   171c4:	0002ccb8 	.word	0x0002ccb8
   171c8:	0002fa7a 	.word	0x0002fa7a
   171cc:	0002faa6 	.word	0x0002faa6
   171d0:	0002fac6 	.word	0x0002fac6

000171d4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   171d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   171d6:	4d14      	ldr	r5, [pc, #80]	; (17228 <bt_setup_random_id_addr+0x54>)
   171d8:	79ec      	ldrb	r4, [r5, #7]
{
   171da:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   171dc:	b9f4      	cbnz	r4, 1721c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   171de:	2101      	movs	r1, #1
   171e0:	a802      	add	r0, sp, #8
   171e2:	f7ff ff9d 	bl	17120 <bt_read_static_addr>
   171e6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   171e8:	b1c0      	cbz	r0, 1721c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   171ea:	2716      	movs	r7, #22
   171ec:	e00f      	b.n	1720e <bt_setup_random_id_addr+0x3a>
   171ee:	ab02      	add	r3, sp, #8
   171f0:	fb07 3106 	mla	r1, r7, r6, r3
   171f4:	2206      	movs	r2, #6
   171f6:	f10d 0001 	add.w	r0, sp, #1
   171fa:	f012 fc2e 	bl	29a5a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   171fe:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   17200:	4669      	mov	r1, sp
   17202:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   17204:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   17208:	f7ff fd18 	bl	16c3c <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1720c:	3401      	adds	r4, #1
   1720e:	79eb      	ldrb	r3, [r5, #7]
   17210:	b2e6      	uxtb	r6, r4
   17212:	42b3      	cmp	r3, r6
   17214:	d8eb      	bhi.n	171ee <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   17216:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   17218:	b009      	add	sp, #36	; 0x24
   1721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   1721c:	2100      	movs	r1, #0
   1721e:	4608      	mov	r0, r1
   17220:	f7ff fed0 	bl	16fc4 <bt_id_create>
   17224:	e7f8      	b.n	17218 <bt_setup_random_id_addr+0x44>
   17226:	bf00      	nop
   17228:	200002b8 	.word	0x200002b8

0001722c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1722c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17230:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   17234:	7805      	ldrb	r5, [r0, #0]
{
   17236:	460e      	mov	r6, r1
   17238:	4690      	mov	r8, r2
   1723a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1723c:	d026      	beq.n	1728c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1723e:	4c22      	ldr	r4, [pc, #136]	; (172c8 <bt_id_set_adv_own_addr+0x9c>)
   17240:	b12a      	cbz	r2, 1724e <bt_id_set_adv_own_addr+0x22>
   17242:	0688      	lsls	r0, r1, #26
   17244:	d503      	bpl.n	1724e <bt_id_set_adv_own_addr+0x22>
   17246:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   1724a:	0659      	lsls	r1, r3, #25
   1724c:	d539      	bpl.n	172c2 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1724e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   17252:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   17256:	5ce3      	ldrb	r3, [r4, r3]
   17258:	2b01      	cmp	r3, #1
   1725a:	d008      	beq.n	1726e <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1725c:	eba9 0505 	sub.w	r5, r9, r5
   17260:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   17262:	f1b8 0f00 	cmp.w	r8, #0
   17266:	d10c      	bne.n	17282 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17268:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1726a:	2000      	movs	r0, #0
   1726c:	e007      	b.n	1727e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1726e:	2007      	movs	r0, #7
   17270:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   17274:	4420      	add	r0, r4
   17276:	f7ff fcb3 	bl	16be0 <set_random_address>
				if (err) {
   1727a:	2800      	cmp	r0, #0
   1727c:	d0ee      	beq.n	1725c <bt_id_set_adv_own_addr+0x30>
}
   1727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   17282:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17284:	bf48      	it	mi
   17286:	f043 0302 	orrmi.w	r3, r3, #2
   1728a:	e7ed      	b.n	17268 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1728c:	074b      	lsls	r3, r1, #29
   1728e:	d514      	bpl.n	172ba <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17290:	4e0d      	ldr	r6, [pc, #52]	; (172c8 <bt_id_set_adv_own_addr+0x9c>)
   17292:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   17296:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   1729a:	5cf3      	ldrb	r3, [r6, r3]
   1729c:	2b01      	cmp	r3, #1
   1729e:	d10a      	bne.n	172b6 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   172a0:	2007      	movs	r0, #7
   172a2:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   172a6:	4430      	add	r0, r6
   172a8:	f7ff fc9a 	bl	16be0 <set_random_address>
			*own_addr_type = id_addr->type;
   172ac:	eba8 0505 	sub.w	r5, r8, r5
   172b0:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   172b2:	703b      	strb	r3, [r7, #0]
		if (err) {
   172b4:	e7e3      	b.n	1727e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   172b6:	4620      	mov	r0, r4
   172b8:	e7f8      	b.n	172ac <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   172ba:	f012 fe95 	bl	29fe8 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   172be:	2301      	movs	r3, #1
   172c0:	e7f7      	b.n	172b2 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   172c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   172c6:	e7da      	b.n	1727e <bt_id_set_adv_own_addr+0x52>
   172c8:	200002b8 	.word	0x200002b8

000172cc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   172cc:	6843      	ldr	r3, [r0, #4]
{
   172ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   172d0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   172d2:	0558      	lsls	r0, r3, #21
   172d4:	d502      	bpl.n	172dc <valid_adv_param+0x10>
		return false;
   172d6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   172d8:	b003      	add	sp, #12
   172da:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   172dc:	6922      	ldr	r2, [r4, #16]
   172de:	b10a      	cbz	r2, 172e4 <valid_adv_param+0x18>
   172e0:	07d9      	lsls	r1, r3, #31
   172e2:	d5f8      	bpl.n	172d6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   172e4:	4d1a      	ldr	r5, [pc, #104]	; (17350 <valid_adv_param+0x84>)
   172e6:	7820      	ldrb	r0, [r4, #0]
   172e8:	79eb      	ldrb	r3, [r5, #7]
   172ea:	4283      	cmp	r3, r0
   172ec:	d9f3      	bls.n	172d6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   172ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   172f2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   172f4:	2207      	movs	r2, #7
   172f6:	4669      	mov	r1, sp
   172f8:	4428      	add	r0, r5
   172fa:	9300      	str	r3, [sp, #0]
   172fc:	f8cd 3003 	str.w	r3, [sp, #3]
   17300:	f012 fb84 	bl	29a0c <memcmp>
	if (param->id >= bt_dev.id_count ||
   17304:	2800      	cmp	r0, #0
   17306:	d0e6      	beq.n	172d6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17308:	6860      	ldr	r0, [r4, #4]
   1730a:	07c2      	lsls	r2, r0, #31
   1730c:	d406      	bmi.n	1731c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1730e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   17312:	2b08      	cmp	r3, #8
   17314:	d802      	bhi.n	1731c <valid_adv_param+0x50>
   17316:	68a3      	ldr	r3, [r4, #8]
   17318:	2b9f      	cmp	r3, #159	; 0x9f
   1731a:	d9dc      	bls.n	172d6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1731c:	f010 0f30 	tst.w	r0, #48	; 0x30
   17320:	d002      	beq.n	17328 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   17322:	6923      	ldr	r3, [r4, #16]
   17324:	2b00      	cmp	r3, #0
   17326:	d0d6      	beq.n	172d6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   17328:	06c3      	lsls	r3, r0, #27
   1732a:	d401      	bmi.n	17330 <valid_adv_param+0x64>
   1732c:	6923      	ldr	r3, [r4, #16]
   1732e:	b943      	cbnz	r3, 17342 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   17330:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   17334:	429a      	cmp	r2, r3
   17336:	d8ce      	bhi.n	172d6 <valid_adv_param+0xa>
   17338:	2a1f      	cmp	r2, #31
   1733a:	d9cc      	bls.n	172d6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1733c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17340:	d8c9      	bhi.n	172d6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   17342:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   17346:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1734a:	bf18      	it	ne
   1734c:	2001      	movne	r0, #1
   1734e:	e7c3      	b.n	172d8 <valid_adv_param+0xc>
   17350:	200002b8 	.word	0x200002b8

00017354 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   17354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17358:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1735a:	2120      	movs	r1, #32
{
   1735c:	4682      	mov	sl, r0
   1735e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17360:	f7fe fe76 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   17364:	4606      	mov	r6, r0
   17366:	2800      	cmp	r0, #0
   17368:	d05c      	beq.n	17424 <hci_set_ad+0xd0>
   1736a:	2120      	movs	r1, #32
   1736c:	3008      	adds	r0, #8
   1736e:	f006 f999 	bl	1d6a4 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   17372:	2220      	movs	r2, #32
   17374:	2100      	movs	r1, #0
   17376:	4681      	mov	r9, r0
   17378:	f012 fb7a 	bl	29a70 <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1737c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   17380:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   17384:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   17386:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   17388:	f8d4 8000 	ldr.w	r8, [r4]
   1738c:	2300      	movs	r3, #0
   1738e:	6862      	ldr	r2, [r4, #4]
   17390:	4293      	cmp	r3, r2
   17392:	d30d      	bcc.n	173b0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   17394:	9b00      	ldr	r3, [sp, #0]
   17396:	3408      	adds	r4, #8
   17398:	429c      	cmp	r4, r3
   1739a:	d1f5      	bne.n	17388 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1739c:	2200      	movs	r2, #0
   1739e:	4631      	mov	r1, r6
   173a0:	4650      	mov	r0, sl
	*data_len = set_data_len;
   173a2:	f889 5000 	strb.w	r5, [r9]
}
   173a6:	b003      	add	sp, #12
   173a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   173ac:	f7fe bfbc 	b.w	16328 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   173b0:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   173b4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   173b8:	1ca8      	adds	r0, r5, #2
   173ba:	1881      	adds	r1, r0, r2
   173bc:	291f      	cmp	r1, #31
   173be:	d91a      	bls.n	173f6 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   173c0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   173c4:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   173c8:	d101      	bne.n	173ce <hci_set_ad+0x7a>
   173ca:	2a00      	cmp	r2, #0
   173cc:	dc11      	bgt.n	173f2 <hci_set_ad+0x9e>
   173ce:	4b17      	ldr	r3, [pc, #92]	; (1742c <hci_set_ad+0xd8>)
   173d0:	4917      	ldr	r1, [pc, #92]	; (17430 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   173d2:	4818      	ldr	r0, [pc, #96]	; (17434 <hci_set_ad+0xe0>)
   173d4:	1ac9      	subs	r1, r1, r3
   173d6:	08c9      	lsrs	r1, r1, #3
   173d8:	0189      	lsls	r1, r1, #6
   173da:	f041 0101 	orr.w	r1, r1, #1
   173de:	f010 fb5d 	bl	27a9c <log_0>
		net_buf_unref(buf);
   173e2:	4630      	mov	r0, r6
   173e4:	f006 f82e 	bl	1d444 <net_buf_unref>
					return -EINVAL;
   173e8:	f06f 0015 	mvn.w	r0, #21
}
   173ec:	b003      	add	sp, #12
   173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   173f2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   173f6:	b2d7      	uxtb	r7, r2
   173f8:	1c79      	adds	r1, r7, #1
   173fa:	f80b 1005 	strb.w	r1, [fp, r5]
   173fe:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   17400:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   17402:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   17406:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1740a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1740e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   17410:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   17412:	f012 fb22 	bl	29a5a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17416:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17418:	443d      	add	r5, r7
   1741a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1741c:	3301      	adds	r3, #1
   1741e:	f108 0808 	add.w	r8, r8, #8
   17422:	e7b4      	b.n	1738e <hci_set_ad+0x3a>
		return -ENOBUFS;
   17424:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17428:	e7e0      	b.n	173ec <hci_set_ad+0x98>
   1742a:	bf00      	nop
   1742c:	0002ccb8 	.word	0x0002ccb8
   17430:	0002ccb8 	.word	0x0002ccb8
   17434:	0002faf5 	.word	0x0002faf5

00017438 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17438:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1743a:	4606      	mov	r6, r0
   1743c:	4b1e      	ldr	r3, [pc, #120]	; (174b8 <le_adv_start_add_conn+0x80>)
   1743e:	f816 2b09 	ldrb.w	r2, [r6], #9
   17442:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
   17446:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17448:	2300      	movs	r3, #0
{
   1744a:	4605      	mov	r5, r0
   1744c:	2207      	movs	r2, #7
   1744e:	460f      	mov	r7, r1
   17450:	4630      	mov	r0, r6
   17452:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17454:	9300      	str	r3, [sp, #0]
   17456:	f8cd 3003 	str.w	r3, [sp, #3]
   1745a:	f012 fad7 	bl	29a0c <memcmp>
   1745e:	782a      	ldrb	r2, [r5, #0]
   17460:	4604      	mov	r4, r0
   17462:	b9a8      	cbnz	r0, 17490 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17464:	4b15      	ldr	r3, [pc, #84]	; (174bc <le_adv_start_add_conn+0x84>)
   17466:	6818      	ldr	r0, [r3, #0]
   17468:	8899      	ldrh	r1, [r3, #4]
   1746a:	9002      	str	r0, [sp, #8]
   1746c:	799b      	ldrb	r3, [r3, #6]
   1746e:	f8ad 100c 	strh.w	r1, [sp, #12]
   17472:	4610      	mov	r0, r2
   17474:	a902      	add	r1, sp, #8
   17476:	f88d 300e 	strb.w	r3, [sp, #14]
   1747a:	f000 ff67 	bl	1834c <bt_conn_add_le>
		if (!conn) {
   1747e:	4605      	mov	r5, r0
   17480:	b1b8      	cbz	r0, 174b2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   17482:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   17484:	f000 fdc2 	bl	1800c <bt_conn_set_state>
	*out_conn = conn;
   17488:	603d      	str	r5, [r7, #0]
	return 0;
}
   1748a:	4620      	mov	r0, r4
   1748c:	b005      	add	sp, #20
   1748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   17490:	4631      	mov	r1, r6
   17492:	4610      	mov	r0, r2
   17494:	f000 ff94 	bl	183c0 <bt_conn_exists_le>
   17498:	4604      	mov	r4, r0
   1749a:	b938      	cbnz	r0, 174ac <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1749c:	7828      	ldrb	r0, [r5, #0]
   1749e:	4631      	mov	r1, r6
   174a0:	f000 ff54 	bl	1834c <bt_conn_add_le>
	if (!conn) {
   174a4:	4605      	mov	r5, r0
   174a6:	b120      	cbz	r0, 174b2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   174a8:	2105      	movs	r1, #5
   174aa:	e7eb      	b.n	17484 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   174ac:	f06f 0415 	mvn.w	r4, #21
   174b0:	e7eb      	b.n	1748a <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   174b2:	f06f 040b 	mvn.w	r4, #11
   174b6:	e7e8      	b.n	1748a <le_adv_start_add_conn+0x52>
   174b8:	200002b8 	.word	0x200002b8
   174bc:	0002cee0 	.word	0x0002cee0

000174c0 <bt_le_ext_adv_foreach>:
{
   174c0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   174c2:	4801      	ldr	r0, [pc, #4]	; (174c8 <bt_le_ext_adv_foreach+0x8>)
   174c4:	4718      	bx	r3
   174c6:	bf00      	nop
   174c8:	200002d0 	.word	0x200002d0

000174cc <bt_le_adv_lookup_legacy>:
}
   174cc:	4800      	ldr	r0, [pc, #0]	; (174d0 <bt_le_adv_lookup_legacy+0x4>)
   174ce:	4770      	bx	lr
   174d0:	200002d0 	.word	0x200002d0

000174d4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   174d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   174d8:	690e      	ldr	r6, [r1, #16]
{
   174da:	b08f      	sub	sp, #60	; 0x3c
   174dc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   174de:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   174e0:	ebb6 0b03 	subs.w	fp, r6, r3
{
   174e4:	4605      	mov	r5, r0
   174e6:	488f      	ldr	r0, [pc, #572]	; (17724 <bt_le_adv_start_legacy+0x250>)
	struct bt_conn *conn = NULL;
   174e8:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   174ea:	bf18      	it	ne
   174ec:	f04f 0b01 	movne.w	fp, #1
{
   174f0:	460c      	mov	r4, r1
   174f2:	4691      	mov	r9, r2
   174f4:	f012 fdad 	bl	2a052 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   174f8:	0787      	lsls	r7, r0, #30
   174fa:	f140 8108 	bpl.w	1770e <bt_le_adv_start_legacy+0x23a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   174fe:	4608      	mov	r0, r1
   17500:	f7ff fee4 	bl	172cc <valid_adv_param>
   17504:	b928      	cbnz	r0, 17512 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   17506:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1750a:	4658      	mov	r0, fp
   1750c:	b00f      	add	sp, #60	; 0x3c
   1750e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   17512:	4620      	mov	r0, r4
   17514:	f012 fd7a 	bl	2a00c <bt_id_adv_random_addr_check>
   17518:	4680      	mov	r8, r0
   1751a:	2800      	cmp	r0, #0
   1751c:	d0f3      	beq.n	17506 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1751e:	f105 0710 	add.w	r7, r5, #16
   17522:	4638      	mov	r0, r7
   17524:	f012 fd95 	bl	2a052 <atomic_get>
   17528:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1752c:	0640      	lsls	r0, r0, #25
   1752e:	f100 80f1 	bmi.w	17714 <bt_le_adv_start_legacy+0x240>
	(void)memset(&set_param, 0, sizeof(set_param));
   17532:	220f      	movs	r2, #15
   17534:	a80a      	add	r0, sp, #40	; 0x28
   17536:	9105      	str	r1, [sp, #20]
   17538:	f012 fa9a 	bl	29a70 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1753c:	68a3      	ldr	r3, [r4, #8]
   1753e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   17542:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17544:	68e3      	ldr	r3, [r4, #12]
   17546:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1754a:	f012 fd73 	bl	2a034 <get_adv_channel_map>
	if (adv->id != param->id) {
   1754e:	782a      	ldrb	r2, [r5, #0]
   17550:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   17552:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17554:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   17558:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1755a:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   1755e:	d004      	beq.n	1756a <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17560:	4870      	ldr	r0, [pc, #448]	; (17724 <bt_le_adv_start_legacy+0x250>)
   17562:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17566:	f012 fd7a 	bl	2a05e <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1756a:	4a6f      	ldr	r2, [pc, #444]	; (17728 <bt_le_adv_start_legacy+0x254>)
	adv->id = param->id;
   1756c:	7823      	ldrb	r3, [r4, #0]
   1756e:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   17570:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   17574:	6861      	ldr	r1, [r4, #4]
   17576:	465a      	mov	r2, fp
   17578:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1757c:	4628      	mov	r0, r5
   1757e:	f7ff fe55 	bl	1722c <bt_id_set_adv_own_addr>
	if (err) {
   17582:	4683      	mov	fp, r0
   17584:	2800      	cmp	r0, #0
   17586:	d1c0      	bne.n	1750a <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   17588:	f105 0009 	add.w	r0, r5, #9
   1758c:	2e00      	cmp	r6, #0
   1758e:	d04d      	beq.n	1762c <bt_le_adv_start_legacy+0x158>
	memcpy(dst, src, sizeof(*dst));
   17590:	6921      	ldr	r1, [r4, #16]
   17592:	2207      	movs	r2, #7
   17594:	f012 fa61 	bl	29a5a <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17598:	6860      	ldr	r0, [r4, #4]
   1759a:	07c1      	lsls	r1, r0, #31
   1759c:	d54f      	bpl.n	1763e <bt_le_adv_start_legacy+0x16a>
		if (dir_adv) {
   1759e:	2e00      	cmp	r6, #0
   175a0:	d04a      	beq.n	17638 <bt_le_adv_start_legacy+0x164>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   175a2:	f010 0f10 	tst.w	r0, #16
   175a6:	bf14      	ite	ne
   175a8:	2304      	movne	r3, #4
   175aa:	2301      	moveq	r3, #1
   175ac:	6921      	ldr	r1, [r4, #16]
   175ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   175b2:	2207      	movs	r2, #7
   175b4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   175b8:	f012 fa4f 	bl	29a5a <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   175bc:	210f      	movs	r1, #15
   175be:	f242 0006 	movw	r0, #8198	; 0x2006
   175c2:	f7fe fd45 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   175c6:	4683      	mov	fp, r0
   175c8:	2800      	cmp	r0, #0
   175ca:	f000 80a6 	beq.w	1771a <bt_le_adv_start_legacy+0x246>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   175ce:	220f      	movs	r2, #15
   175d0:	a90a      	add	r1, sp, #40	; 0x28
   175d2:	3008      	adds	r0, #8
   175d4:	f014 f9fa 	bl	2b9cc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   175d8:	2200      	movs	r2, #0
   175da:	4659      	mov	r1, fp
   175dc:	f242 0006 	movw	r0, #8198	; 0x2006
   175e0:	f7fe fea2 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   175e4:	2800      	cmp	r0, #0
   175e6:	f040 809b 	bne.w	17720 <bt_le_adv_start_legacy+0x24c>
	if (!dir_adv) {
   175ea:	2e00      	cmp	r6, #0
   175ec:	d033      	beq.n	17656 <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   175ee:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   175f0:	07da      	lsls	r2, r3, #31
   175f2:	d444      	bmi.n	1767e <bt_le_adv_start_legacy+0x1aa>
	return bt_le_adv_set_enable_legacy(adv, enable);
   175f4:	2101      	movs	r1, #1
   175f6:	4628      	mov	r0, r5
   175f8:	f012 fdd8 	bl	2a1ac <bt_le_adv_set_enable_legacy>
	if (err) {
   175fc:	4683      	mov	fp, r0
   175fe:	2800      	cmp	r0, #0
   17600:	d07e      	beq.n	17700 <bt_le_adv_start_legacy+0x22c>
   17602:	4b4a      	ldr	r3, [pc, #296]	; (1772c <bt_le_adv_start_legacy+0x258>)
   17604:	494a      	ldr	r1, [pc, #296]	; (17730 <bt_le_adv_start_legacy+0x25c>)
		BT_ERR("Failed to start advertiser");
   17606:	484b      	ldr	r0, [pc, #300]	; (17734 <bt_le_adv_start_legacy+0x260>)
   17608:	1ac9      	subs	r1, r1, r3
   1760a:	08c9      	lsrs	r1, r1, #3
   1760c:	0189      	lsls	r1, r1, #6
   1760e:	f041 0101 	orr.w	r1, r1, #1
   17612:	f010 fa43 	bl	27a9c <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17616:	9807      	ldr	r0, [sp, #28]
   17618:	2800      	cmp	r0, #0
   1761a:	f43f af76 	beq.w	1750a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1761e:	2100      	movs	r1, #0
   17620:	f000 fcf4 	bl	1800c <bt_conn_set_state>
			bt_conn_unref(conn);
   17624:	9807      	ldr	r0, [sp, #28]
   17626:	f000 fcad 	bl	17f84 <bt_conn_unref>
   1762a:	e76e      	b.n	1750a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1762c:	9608      	str	r6, [sp, #32]
   1762e:	2207      	movs	r2, #7
   17630:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   17634:	a908      	add	r1, sp, #32
   17636:	e7ad      	b.n	17594 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
   17638:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   1763c:	e7be      	b.n	175bc <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   1763e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17640:	b933      	cbnz	r3, 17650 <bt_le_adv_start_legacy+0x17c>
   17642:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   17646:	f1c8 0303 	rsb	r3, r8, #3
   1764a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1764e:	e7b5      	b.n	175bc <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   17650:	f04f 0801 	mov.w	r8, #1
   17654:	e7f7      	b.n	17646 <bt_le_adv_start_legacy+0x172>
   17656:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17658:	f3c3 4280 	ubfx	r2, r3, #18, #1
   1765c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   17660:	e9cd 8301 	strd	r8, r3, [sp, #4]
   17664:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17666:	9203      	str	r2, [sp, #12]
   17668:	9300      	str	r3, [sp, #0]
   1766a:	4652      	mov	r2, sl
   1766c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1766e:	4649      	mov	r1, r9
   17670:	4628      	mov	r0, r5
   17672:	f012 fd1a 	bl	2a0aa <le_adv_update.constprop.0>
		if (err) {
   17676:	4683      	mov	fp, r0
   17678:	2800      	cmp	r0, #0
   1767a:	d0b8      	beq.n	175ee <bt_le_adv_start_legacy+0x11a>
   1767c:	e745      	b.n	1750a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1767e:	a907      	add	r1, sp, #28
   17680:	4628      	mov	r0, r5
   17682:	f7ff fed9 	bl	17438 <le_adv_start_add_conn>
		if (err) {
   17686:	4683      	mov	fp, r0
   17688:	2800      	cmp	r0, #0
   1768a:	d0b3      	beq.n	175f4 <bt_le_adv_start_legacy+0x120>
			if (err == -ENOMEM && !dir_adv &&
   1768c:	f110 0f0c 	cmn.w	r0, #12
   17690:	f47f af3b 	bne.w	1750a <bt_le_adv_start_legacy+0x36>
   17694:	2e00      	cmp	r6, #0
   17696:	f47f af38 	bne.w	1750a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1769a:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1769c:	079b      	lsls	r3, r3, #30
   1769e:	f53f af34 	bmi.w	1750a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   176a2:	6860      	ldr	r0, [r4, #4]
   176a4:	f080 0002 	eor.w	r0, r0, #2
   176a8:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   176ac:	f00b 0201 	and.w	r2, fp, #1
   176b0:	210c      	movs	r1, #12
   176b2:	4638      	mov	r0, r7
   176b4:	f012 fce2 	bl	2a07c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   176b8:	6862      	ldr	r2, [r4, #4]
   176ba:	2107      	movs	r1, #7
   176bc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   176c0:	4638      	mov	r0, r7
   176c2:	f012 fcdb 	bl	2a07c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   176c6:	6862      	ldr	r2, [r4, #4]
   176c8:	2112      	movs	r1, #18
   176ca:	f3c2 4280 	ubfx	r2, r2, #18, #1
   176ce:	4638      	mov	r0, r7
   176d0:	f012 fcd4 	bl	2a07c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   176d4:	6862      	ldr	r2, [r4, #4]
   176d6:	2108      	movs	r1, #8
   176d8:	f002 0201 	and.w	r2, r2, #1
   176dc:	4638      	mov	r0, r7
   176de:	f012 fccd 	bl	2a07c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   176e2:	4642      	mov	r2, r8
   176e4:	2109      	movs	r1, #9
   176e6:	4638      	mov	r0, r7
   176e8:	f012 fcc8 	bl	2a07c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   176ec:	6862      	ldr	r2, [r4, #4]
   176ee:	210b      	movs	r1, #11
   176f0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   176f4:	4638      	mov	r0, r7
   176f6:	f012 fcc1 	bl	2a07c <atomic_set_bit_to>
	return 0;
   176fa:	f04f 0b00 	mov.w	fp, #0
   176fe:	e704      	b.n	1750a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17700:	9807      	ldr	r0, [sp, #28]
   17702:	b108      	cbz	r0, 17708 <bt_le_adv_start_legacy+0x234>
		bt_conn_unref(conn);
   17704:	f000 fc3e 	bl	17f84 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17708:	2e00      	cmp	r6, #0
   1770a:	d1cf      	bne.n	176ac <bt_le_adv_start_legacy+0x1d8>
   1770c:	e7c9      	b.n	176a2 <bt_le_adv_start_legacy+0x1ce>
		return -EAGAIN;
   1770e:	f06f 0b0a 	mvn.w	fp, #10
   17712:	e6fa      	b.n	1750a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   17714:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   17718:	e6f7      	b.n	1750a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1771a:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   1771e:	e6f4      	b.n	1750a <bt_le_adv_start_legacy+0x36>
   17720:	4683      	mov	fp, r0
   17722:	e6f2      	b.n	1750a <bt_le_adv_start_legacy+0x36>
   17724:	20000350 	.word	0x20000350
   17728:	200002b8 	.word	0x200002b8
   1772c:	0002ccb8 	.word	0x0002ccb8
   17730:	0002ccb8 	.word	0x0002ccb8
   17734:	0002fb0e 	.word	0x0002fb0e

00017738 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   17738:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1773a:	9c04      	ldr	r4, [sp, #16]
   1773c:	e9cd 3400 	strd	r3, r4, [sp]
   17740:	4613      	mov	r3, r2
   17742:	460a      	mov	r2, r1
   17744:	4601      	mov	r1, r0
   17746:	4802      	ldr	r0, [pc, #8]	; (17750 <bt_le_adv_start+0x18>)
   17748:	f7ff fec4 	bl	174d4 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
   1774c:	b002      	add	sp, #8
   1774e:	bd10      	pop	{r4, pc}
   17750:	200002d0 	.word	0x200002d0

00017754 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   17754:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17756:	481e      	ldr	r0, [pc, #120]	; (177d0 <bt_le_adv_resume+0x7c>)
   17758:	4c1d      	ldr	r4, [pc, #116]	; (177d0 <bt_le_adv_resume+0x7c>)
   1775a:	f012 fc7a 	bl	2a052 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1775e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   17762:	d032      	beq.n	177ca <bt_le_adv_resume+0x76>
   17764:	4620      	mov	r0, r4
   17766:	f012 fc74 	bl	2a052 <atomic_get>
   1776a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1776c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   17770:	d42b      	bmi.n	177ca <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17772:	4620      	mov	r0, r4
   17774:	f012 fc6d 	bl	2a052 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17778:	05c3      	lsls	r3, r0, #23
   1777a:	d526      	bpl.n	177ca <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   1777c:	a901      	add	r1, sp, #4
   1777e:	f1a4 0010 	sub.w	r0, r4, #16
   17782:	f7ff fe59 	bl	17438 <le_adv_start_add_conn>
	if (err) {
   17786:	bb00      	cbnz	r0, 177ca <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17788:	2101      	movs	r1, #1
   1778a:	f1a4 0010 	sub.w	r0, r4, #16
   1778e:	f012 fd0d 	bl	2a1ac <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   17792:	b150      	cbz	r0, 177aa <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17794:	4629      	mov	r1, r5
   17796:	9801      	ldr	r0, [sp, #4]
   17798:	f000 fc38 	bl	1800c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1779c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   177a0:	4620      	mov	r0, r4
   177a2:	f012 fc5c 	bl	2a05e <atomic_and>
	return (old & mask) != 0;
   177a6:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   177aa:	9801      	ldr	r0, [sp, #4]
   177ac:	f000 fbea 	bl	17f84 <bt_conn_unref>
	if (persist_paused) {
   177b0:	b15d      	cbz	r5, 177ca <bt_le_adv_resume+0x76>
   177b2:	f3bf 8f5b 	dmb	ish
   177b6:	e854 3f00 	ldrex	r3, [r4]
   177ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   177be:	e844 3200 	strex	r2, r3, [r4]
   177c2:	2a00      	cmp	r2, #0
   177c4:	d1f7      	bne.n	177b6 <bt_le_adv_resume+0x62>
   177c6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   177ca:	b003      	add	sp, #12
   177cc:	bd30      	pop	{r4, r5, pc}
   177ce:	bf00      	nop
   177d0:	200002e0 	.word	0x200002e0

000177d4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   177d4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   177d6:	4904      	ldr	r1, [pc, #16]	; (177e8 <bt_pub_key_is_debug+0x14>)
   177d8:	2240      	movs	r2, #64	; 0x40
   177da:	f012 f917 	bl	29a0c <memcmp>
}
   177de:	fab0 f080 	clz	r0, r0
   177e2:	0940      	lsrs	r0, r0, #5
   177e4:	bd08      	pop	{r3, pc}
   177e6:	bf00      	nop
   177e8:	0002fbbe 	.word	0x0002fbbe

000177ec <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   177ec:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   177ee:	4b44      	ldr	r3, [pc, #272]	; (17900 <bt_pub_key_gen+0x114>)
   177f0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   177f4:	f003 0306 	and.w	r3, r3, #6
   177f8:	2b06      	cmp	r3, #6
   177fa:	d00d      	beq.n	17818 <bt_pub_key_gen+0x2c>
   177fc:	4b41      	ldr	r3, [pc, #260]	; (17904 <bt_pub_key_gen+0x118>)
   177fe:	4942      	ldr	r1, [pc, #264]	; (17908 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   17800:	4842      	ldr	r0, [pc, #264]	; (1790c <bt_pub_key_gen+0x120>)
   17802:	1ac9      	subs	r1, r1, r3
   17804:	08c9      	lsrs	r1, r1, #3
   17806:	0189      	lsls	r1, r1, #6
   17808:	f041 0102 	orr.w	r1, r1, #2
   1780c:	f010 f946 	bl	27a9c <log_0>
		return -ENOTSUP;
   17810:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   17814:	4630      	mov	r0, r6
   17816:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   17818:	2800      	cmp	r0, #0
   1781a:	d06d      	beq.n	178f8 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1781c:	4d3c      	ldr	r5, [pc, #240]	; (17910 <bt_pub_key_gen+0x124>)
   1781e:	682a      	ldr	r2, [r5, #0]
   17820:	b10a      	cbz	r2, 17826 <bt_pub_key_gen+0x3a>
   17822:	1f13      	subs	r3, r2, #4
   17824:	b9bb      	cbnz	r3, 17856 <bt_pub_key_gen+0x6a>
	parent->next = child;
   17826:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17828:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1782a:	1d03      	adds	r3, r0, #4
	list->head = node;
   1782c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1782e:	b902      	cbnz	r2, 17832 <bt_pub_key_gen+0x46>
	list->tail = node;
   17830:	606b      	str	r3, [r5, #4]
   17832:	4c38      	ldr	r4, [pc, #224]	; (17914 <bt_pub_key_gen+0x128>)
   17834:	f3bf 8f5b 	dmb	ish
   17838:	e854 2f00 	ldrex	r2, [r4]
   1783c:	f042 0310 	orr.w	r3, r2, #16
   17840:	e844 3100 	strex	r1, r3, [r4]
   17844:	2900      	cmp	r1, #0
   17846:	d1f7      	bne.n	17838 <bt_pub_key_gen+0x4c>
   17848:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1784c:	f012 0210 	ands.w	r2, r2, #16
   17850:	d017      	beq.n	17882 <bt_pub_key_gen+0x96>
		return 0;
   17852:	2600      	movs	r6, #0
   17854:	e7de      	b.n	17814 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   17856:	4298      	cmp	r0, r3
   17858:	d10c      	bne.n	17874 <bt_pub_key_gen+0x88>
   1785a:	4b2a      	ldr	r3, [pc, #168]	; (17904 <bt_pub_key_gen+0x118>)
   1785c:	492a      	ldr	r1, [pc, #168]	; (17908 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   1785e:	482e      	ldr	r0, [pc, #184]	; (17918 <bt_pub_key_gen+0x12c>)
   17860:	1ac9      	subs	r1, r1, r3
   17862:	08c9      	lsrs	r1, r1, #3
   17864:	0189      	lsls	r1, r1, #6
   17866:	f041 0102 	orr.w	r1, r1, #2
   1786a:	f010 f917 	bl	27a9c <log_0>
			return -EALREADY;
   1786e:	f06f 0677 	mvn.w	r6, #119	; 0x77
   17872:	e7cf      	b.n	17814 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17874:	1d19      	adds	r1, r3, #4
   17876:	d0d6      	beq.n	17826 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17878:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1787a:	2b00      	cmp	r3, #0
   1787c:	d0d3      	beq.n	17826 <bt_pub_key_gen+0x3a>
   1787e:	3b04      	subs	r3, #4
   17880:	e7d0      	b.n	17824 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17882:	f3bf 8f5b 	dmb	ish
   17886:	e854 3f00 	ldrex	r3, [r4]
   1788a:	f023 0308 	bic.w	r3, r3, #8
   1788e:	e844 3100 	strex	r1, r3, [r4]
   17892:	2900      	cmp	r1, #0
   17894:	d1f7      	bne.n	17886 <bt_pub_key_gen+0x9a>
   17896:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1789a:	4611      	mov	r1, r2
   1789c:	f242 0025 	movw	r0, #8229	; 0x2025
   178a0:	f7fe fd42 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   178a4:	4606      	mov	r6, r0
   178a6:	2800      	cmp	r0, #0
   178a8:	d0d3      	beq.n	17852 <bt_pub_key_gen+0x66>
   178aa:	4b16      	ldr	r3, [pc, #88]	; (17904 <bt_pub_key_gen+0x118>)
   178ac:	4916      	ldr	r1, [pc, #88]	; (17908 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   178ae:	481b      	ldr	r0, [pc, #108]	; (1791c <bt_pub_key_gen+0x130>)
   178b0:	1ac9      	subs	r1, r1, r3
   178b2:	08c9      	lsrs	r1, r1, #3
   178b4:	0189      	lsls	r1, r1, #6
   178b6:	f041 0101 	orr.w	r1, r1, #1
   178ba:	f010 f8ef 	bl	27a9c <log_0>
   178be:	f3bf 8f5b 	dmb	ish
   178c2:	e854 3f00 	ldrex	r3, [r4]
   178c6:	f023 0310 	bic.w	r3, r3, #16
   178ca:	e844 3200 	strex	r2, r3, [r4]
   178ce:	2a00      	cmp	r2, #0
   178d0:	d1f7      	bne.n	178c2 <bt_pub_key_gen+0xd6>
   178d2:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   178d6:	682c      	ldr	r4, [r5, #0]
   178d8:	b91c      	cbnz	r4, 178e2 <bt_pub_key_gen+0xf6>
	list->head = NULL;
   178da:	2300      	movs	r3, #0
	list->tail = NULL;
   178dc:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   178e0:	e798      	b.n	17814 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   178e2:	3c04      	subs	r4, #4
   178e4:	2c00      	cmp	r4, #0
   178e6:	d0f8      	beq.n	178da <bt_pub_key_gen+0xee>
			if (cb->func) {
   178e8:	6823      	ldr	r3, [r4, #0]
   178ea:	b10b      	cbz	r3, 178f0 <bt_pub_key_gen+0x104>
				cb->func(NULL);
   178ec:	2000      	movs	r0, #0
   178ee:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   178f0:	1d23      	adds	r3, r4, #4
   178f2:	d0f2      	beq.n	178da <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   178f4:	6864      	ldr	r4, [r4, #4]
	return node->next;
   178f6:	e7ef      	b.n	178d8 <bt_pub_key_gen+0xec>
		return -EINVAL;
   178f8:	f06f 0615 	mvn.w	r6, #21
   178fc:	e78a      	b.n	17814 <bt_pub_key_gen+0x28>
   178fe:	bf00      	nop
   17900:	200002b8 	.word	0x200002b8
   17904:	0002ccb8 	.word	0x0002ccb8
   17908:	0002ccd8 	.word	0x0002ccd8
   1790c:	0002fb30 	.word	0x0002fb30
   17910:	20003034 	.word	0x20003034
   17914:	20000350 	.word	0x20000350
   17918:	0002fb4f 	.word	0x0002fb4f
   1791c:	0002fb6b 	.word	0x0002fb6b

00017920 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17920:	4b05      	ldr	r3, [pc, #20]	; (17938 <bt_pub_key_get+0x18>)
   17922:	f3bf 8f5b 	dmb	ish
   17926:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   17928:	4804      	ldr	r0, [pc, #16]	; (1793c <bt_pub_key_get+0x1c>)
   1792a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1792e:	f013 0f08 	tst.w	r3, #8
}
   17932:	bf08      	it	eq
   17934:	2000      	moveq	r0, #0
   17936:	4770      	bx	lr
   17938:	20000350 	.word	0x20000350
   1793c:	20003e6f 	.word	0x20003e6f

00017940 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   17942:	4d25      	ldr	r5, [pc, #148]	; (179d8 <bt_dh_key_gen+0x98>)
   17944:	682b      	ldr	r3, [r5, #0]
   17946:	428b      	cmp	r3, r1
{
   17948:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   1794a:	d03f      	beq.n	179cc <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1794c:	b11b      	cbz	r3, 17956 <bt_dh_key_gen+0x16>
		return -EBUSY;
   1794e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17952:	4620      	mov	r0, r4
   17954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17956:	4b21      	ldr	r3, [pc, #132]	; (179dc <bt_dh_key_gen+0x9c>)
   17958:	f3bf 8f5b 	dmb	ish
   1795c:	681a      	ldr	r2, [r3, #0]
   1795e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17962:	f3c2 1700 	ubfx	r7, r2, #4, #1
   17966:	06d2      	lsls	r2, r2, #27
   17968:	d4f1      	bmi.n	1794e <bt_dh_key_gen+0xe>
   1796a:	f3bf 8f5b 	dmb	ish
   1796e:	681b      	ldr	r3, [r3, #0]
   17970:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17974:	071b      	lsls	r3, r3, #28
   17976:	d52c      	bpl.n	179d2 <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   17978:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1797a:	f242 0026 	movw	r0, #8230	; 0x2026
   1797e:	2140      	movs	r1, #64	; 0x40
   17980:	f7fe fb66 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   17984:	4604      	mov	r4, r0
   17986:	b1f0      	cbz	r0, 179c6 <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   17988:	2140      	movs	r1, #64	; 0x40
   1798a:	3008      	adds	r0, #8
   1798c:	f005 fe8a 	bl	1d6a4 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   17990:	2240      	movs	r2, #64	; 0x40
   17992:	4631      	mov	r1, r6
   17994:	f012 f861 	bl	29a5a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   17998:	4621      	mov	r1, r4
   1799a:	463a      	mov	r2, r7
   1799c:	f242 0026 	movw	r0, #8230	; 0x2026
   179a0:	f7fe fcc2 	bl	16328 <bt_hci_cmd_send_sync>
	if (err) {
   179a4:	4604      	mov	r4, r0
   179a6:	2800      	cmp	r0, #0
   179a8:	d0d3      	beq.n	17952 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   179aa:	2300      	movs	r3, #0
   179ac:	602b      	str	r3, [r5, #0]
   179ae:	4a0c      	ldr	r2, [pc, #48]	; (179e0 <bt_dh_key_gen+0xa0>)
   179b0:	4b0c      	ldr	r3, [pc, #48]	; (179e4 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   179b2:	480d      	ldr	r0, [pc, #52]	; (179e8 <bt_dh_key_gen+0xa8>)
   179b4:	1ad2      	subs	r2, r2, r3
   179b6:	08d2      	lsrs	r2, r2, #3
   179b8:	0192      	lsls	r2, r2, #6
   179ba:	f042 0202 	orr.w	r2, r2, #2
   179be:	4621      	mov	r1, r4
   179c0:	f010 f879 	bl	27ab6 <log_1>
		return err;
   179c4:	e7c5      	b.n	17952 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   179c6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   179ca:	e7ee      	b.n	179aa <bt_dh_key_gen+0x6a>
		return -EALREADY;
   179cc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   179d0:	e7bf      	b.n	17952 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   179d2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   179d6:	e7bc      	b.n	17952 <bt_dh_key_gen+0x12>
   179d8:	20003030 	.word	0x20003030
   179dc:	20000350 	.word	0x20000350
   179e0:	0002ccd8 	.word	0x0002ccd8
   179e4:	0002ccb8 	.word	0x0002ccb8
   179e8:	0002fb95 	.word	0x0002fb95

000179ec <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   179ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   179ee:	4c1d      	ldr	r4, [pc, #116]	; (17a64 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   179f0:	6886      	ldr	r6, [r0, #8]
   179f2:	f3bf 8f5b 	dmb	ish
   179f6:	e854 3f00 	ldrex	r3, [r4]
   179fa:	f023 0310 	bic.w	r3, r3, #16
   179fe:	e844 3200 	strex	r2, r3, [r4]
   17a02:	2a00      	cmp	r2, #0
   17a04:	d1f7      	bne.n	179f6 <bt_hci_evt_le_pkey_complete+0xa>
   17a06:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   17a0a:	7833      	ldrb	r3, [r6, #0]
   17a0c:	b983      	cbnz	r3, 17a30 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   17a0e:	4816      	ldr	r0, [pc, #88]	; (17a68 <bt_hci_evt_le_pkey_complete+0x7c>)
   17a10:	2240      	movs	r2, #64	; 0x40
   17a12:	1c71      	adds	r1, r6, #1
   17a14:	f012 f821 	bl	29a5a <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17a18:	f3bf 8f5b 	dmb	ish
   17a1c:	e854 3f00 	ldrex	r3, [r4]
   17a20:	f043 0308 	orr.w	r3, r3, #8
   17a24:	e844 3200 	strex	r2, r3, [r4]
   17a28:	2a00      	cmp	r2, #0
   17a2a:	d1f7      	bne.n	17a1c <bt_hci_evt_le_pkey_complete+0x30>
   17a2c:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17a30:	4d0e      	ldr	r5, [pc, #56]	; (17a6c <bt_hci_evt_le_pkey_complete+0x80>)
   17a32:	682c      	ldr	r4, [r5, #0]
   17a34:	b91c      	cbnz	r4, 17a3e <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   17a36:	2300      	movs	r3, #0
	list->tail = NULL;
   17a38:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   17a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   17a3e:	4f0a      	ldr	r7, [pc, #40]	; (17a68 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17a40:	3c04      	subs	r4, #4
   17a42:	2c00      	cmp	r4, #0
   17a44:	d0f7      	beq.n	17a36 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   17a46:	6823      	ldr	r3, [r4, #0]
   17a48:	b12b      	cbz	r3, 17a56 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   17a4a:	7832      	ldrb	r2, [r6, #0]
   17a4c:	2a00      	cmp	r2, #0
   17a4e:	bf0c      	ite	eq
   17a50:	4638      	moveq	r0, r7
   17a52:	2000      	movne	r0, #0
   17a54:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   17a56:	1d23      	adds	r3, r4, #4
   17a58:	d0ed      	beq.n	17a36 <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17a5a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17a5c:	2c00      	cmp	r4, #0
   17a5e:	d0ea      	beq.n	17a36 <bt_hci_evt_le_pkey_complete+0x4a>
   17a60:	3c04      	subs	r4, #4
   17a62:	e7ee      	b.n	17a42 <bt_hci_evt_le_pkey_complete+0x56>
   17a64:	20000350 	.word	0x20000350
   17a68:	20003e6f 	.word	0x20003e6f
   17a6c:	20003034 	.word	0x20003034

00017a70 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   17a70:	4905      	ldr	r1, [pc, #20]	; (17a88 <bt_hci_evt_le_dhkey_complete+0x18>)
   17a72:	680b      	ldr	r3, [r1, #0]
   17a74:	b133      	cbz	r3, 17a84 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   17a76:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   17a78:	2000      	movs	r0, #0
   17a7a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17a7c:	7811      	ldrb	r1, [r2, #0]
   17a7e:	b901      	cbnz	r1, 17a82 <bt_hci_evt_le_dhkey_complete+0x12>
   17a80:	1c50      	adds	r0, r2, #1
   17a82:	4718      	bx	r3
	}
}
   17a84:	4770      	bx	lr
   17a86:	bf00      	nop
   17a88:	20003030 	.word	0x20003030

00017a8c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   17a8c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17a8e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   17a92:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   17a94:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   17a96:	4801      	ldr	r0, [pc, #4]	; (17a9c <tx_free+0x10>)
   17a98:	f014 bdda 	b.w	2c650 <k_queue_append>
   17a9c:	2000090c 	.word	0x2000090c

00017aa0 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   17aa0:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17aa2:	4b09      	ldr	r3, [pc, #36]	; (17ac8 <notify_connected+0x28>)
   17aa4:	681d      	ldr	r5, [r3, #0]
{
   17aa6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17aa8:	7b21      	ldrb	r1, [r4, #12]
   17aaa:	b92d      	cbnz	r5, 17ab8 <notify_connected+0x18>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   17aac:	b951      	cbnz	r1, 17ac4 <notify_connected+0x24>
		bt_gatt_connected(conn);
   17aae:	4620      	mov	r0, r4
	}
}
   17ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   17ab4:	f003 bbb0 	b.w	1b218 <bt_gatt_connected>
		if (cb->connected) {
   17ab8:	682b      	ldr	r3, [r5, #0]
   17aba:	b10b      	cbz	r3, 17ac0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   17abc:	4620      	mov	r0, r4
   17abe:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17ac0:	69ad      	ldr	r5, [r5, #24]
   17ac2:	e7f1      	b.n	17aa8 <notify_connected+0x8>
}
   17ac4:	bd38      	pop	{r3, r4, r5, pc}
   17ac6:	bf00      	nop
   17ac8:	20003040 	.word	0x20003040

00017acc <send_frag>:
{
   17acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   17ad0:	694d      	ldr	r5, [r1, #20]
{
   17ad2:	4604      	mov	r4, r0
   17ad4:	460e      	mov	r6, r1
   17ad6:	4691      	mov	r9, r2
   17ad8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   17ada:	f04f 33ff 	mov.w	r3, #4294967295
   17ade:	484c      	ldr	r0, [pc, #304]	; (17c10 <send_frag+0x144>)
   17ae0:	f04f 32ff 	mov.w	r2, #4294967295
   17ae4:	f009 ff6e 	bl	219c4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   17ae8:	7b63      	ldrb	r3, [r4, #13]
   17aea:	2b07      	cmp	r3, #7
   17aec:	d151      	bne.n	17b92 <send_frag+0xc6>
	__asm__ volatile(
   17aee:	f04f 0340 	mov.w	r3, #64	; 0x40
   17af2:	f3ef 8211 	mrs	r2, BASEPRI
   17af6:	f383 8811 	msr	BASEPRI, r3
   17afa:	f3bf 8f6f 	isb	sy
	if (tx) {
   17afe:	2d00      	cmp	r5, #0
   17b00:	d059      	beq.n	17bb6 <send_frag+0xea>
	parent->next = child;
   17b02:	2300      	movs	r3, #0
   17b04:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   17b06:	69a3      	ldr	r3, [r4, #24]
   17b08:	2b00      	cmp	r3, #0
   17b0a:	d151      	bne.n	17bb0 <send_frag+0xe4>
	list->head = node;
   17b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   17b10:	f382 8811 	msr	BASEPRI, r2
   17b14:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   17b18:	2104      	movs	r1, #4
   17b1a:	f106 0008 	add.w	r0, r6, #8
   17b1e:	f005 fd5d 	bl	1d5dc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17b22:	8823      	ldrh	r3, [r4, #0]
   17b24:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   17b28:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17b2c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17b2e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17b32:	3b04      	subs	r3, #4
   17b34:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17b36:	2302      	movs	r3, #2
   17b38:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   17b3a:	4630      	mov	r0, r6
   17b3c:	f012 f9be 	bl	29ebc <bt_send>
	if (err) {
   17b40:	4601      	mov	r1, r0
   17b42:	2800      	cmp	r0, #0
   17b44:	d062      	beq.n	17c0c <send_frag+0x140>
   17b46:	4b33      	ldr	r3, [pc, #204]	; (17c14 <send_frag+0x148>)
   17b48:	4a33      	ldr	r2, [pc, #204]	; (17c18 <send_frag+0x14c>)
		BT_ERR("Unable to send to driver (err %d)", err);
   17b4a:	4834      	ldr	r0, [pc, #208]	; (17c1c <send_frag+0x150>)
   17b4c:	1ad2      	subs	r2, r2, r3
   17b4e:	08d2      	lsrs	r2, r2, #3
   17b50:	0192      	lsls	r2, r2, #6
   17b52:	f042 0201 	orr.w	r2, r2, #1
   17b56:	f00f ffae 	bl	27ab6 <log_1>
	__asm__ volatile(
   17b5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   17b5e:	f3ef 8911 	mrs	r9, BASEPRI
   17b62:	f383 8811 	msr	BASEPRI, r3
   17b66:	f3bf 8f6f 	isb	sy
		if (tx) {
   17b6a:	2d00      	cmp	r5, #0
   17b6c:	d039      	beq.n	17be2 <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17b6e:	6963      	ldr	r3, [r4, #20]
   17b70:	2200      	movs	r2, #0
   17b72:	b153      	cbz	r3, 17b8a <send_frag+0xbe>
   17b74:	429d      	cmp	r5, r3
   17b76:	d131      	bne.n	17bdc <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   17b78:	682b      	ldr	r3, [r5, #0]
   17b7a:	bb4a      	cbnz	r2, 17bd0 <send_frag+0x104>
   17b7c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   17b7e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   17b80:	4295      	cmp	r5, r2
   17b82:	d100      	bne.n	17b86 <send_frag+0xba>
	list->tail = node;
   17b84:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   17b86:	2300      	movs	r3, #0
   17b88:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   17b8a:	f389 8811 	msr	BASEPRI, r9
   17b8e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   17b92:	481f      	ldr	r0, [pc, #124]	; (17c10 <send_frag+0x144>)
   17b94:	f009 fed2 	bl	2193c <z_impl_k_sem_give>
	if (tx) {
   17b98:	b115      	cbz	r5, 17ba0 <send_frag+0xd4>
		tx_free(tx);
   17b9a:	4628      	mov	r0, r5
   17b9c:	f7ff ff76 	bl	17a8c <tx_free>
	if (always_consume) {
   17ba0:	b11f      	cbz	r7, 17baa <send_frag+0xde>
		net_buf_unref(buf);
   17ba2:	4630      	mov	r0, r6
   17ba4:	f005 fc4e 	bl	1d444 <net_buf_unref>
	return false;
   17ba8:	2700      	movs	r7, #0
}
   17baa:	4638      	mov	r0, r7
   17bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17bb0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17bb2:	61a5      	str	r5, [r4, #24]
}
   17bb4:	e7ac      	b.n	17b10 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   17bb6:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   17bb8:	b133      	cbz	r3, 17bc8 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   17bba:	f103 080c 	add.w	r8, r3, #12
   17bbe:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   17bc0:	3301      	adds	r3, #1
   17bc2:	f8c8 3000 	str.w	r3, [r8]
   17bc6:	e7a3      	b.n	17b10 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   17bc8:	69e3      	ldr	r3, [r4, #28]
   17bca:	f104 081c 	add.w	r8, r4, #28
   17bce:	e7f7      	b.n	17bc0 <send_frag+0xf4>
	parent->next = child;
   17bd0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   17bd2:	69a3      	ldr	r3, [r4, #24]
   17bd4:	429d      	cmp	r5, r3
	list->tail = node;
   17bd6:	bf08      	it	eq
   17bd8:	61a2      	streq	r2, [r4, #24]
}
   17bda:	e7d4      	b.n	17b86 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17bdc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17bde:	681b      	ldr	r3, [r3, #0]
   17be0:	e7c7      	b.n	17b72 <send_frag+0xa6>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   17be2:	f8d8 3000 	ldr.w	r3, [r8]
   17be6:	b95b      	cbnz	r3, 17c00 <send_frag+0x134>
   17be8:	490d      	ldr	r1, [pc, #52]	; (17c20 <send_frag+0x154>)
   17bea:	480e      	ldr	r0, [pc, #56]	; (17c24 <send_frag+0x158>)
   17bec:	4a0e      	ldr	r2, [pc, #56]	; (17c28 <send_frag+0x15c>)
   17bee:	f240 13f3 	movw	r3, #499	; 0x1f3
   17bf2:	f00f fc80 	bl	274f6 <printk>
   17bf6:	480c      	ldr	r0, [pc, #48]	; (17c28 <send_frag+0x15c>)
   17bf8:	f240 11f3 	movw	r1, #499	; 0x1f3
   17bfc:	f00f ff20 	bl	27a40 <assert_post_action>
			(*pending_no_cb)--;
   17c00:	f8d8 3000 	ldr.w	r3, [r8]
   17c04:	3b01      	subs	r3, #1
   17c06:	f8c8 3000 	str.w	r3, [r8]
   17c0a:	e7be      	b.n	17b8a <send_frag+0xbe>
	return true;
   17c0c:	2701      	movs	r7, #1
   17c0e:	e7cc      	b.n	17baa <send_frag+0xde>
   17c10:	20000388 	.word	0x20000388
   17c14:	0002ccb8 	.word	0x0002ccb8
   17c18:	0002ccd0 	.word	0x0002ccd0
   17c1c:	0002f564 	.word	0x0002f564
   17c20:	0002fc2e 	.word	0x0002fc2e
   17c24:	0002dcd3 	.word	0x0002dcd3
   17c28:	0002fbfe 	.word	0x0002fbfe

00017c2c <bt_conn_get_pkts>:
}
   17c2c:	4800      	ldr	r0, [pc, #0]	; (17c30 <bt_conn_get_pkts+0x4>)
   17c2e:	4770      	bx	lr
   17c30:	20000388 	.word	0x20000388

00017c34 <bt_conn_new>:
{
   17c34:	b538      	push	{r3, r4, r5, lr}
   17c36:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   17c38:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17c3a:	2501      	movs	r5, #1
   17c3c:	428b      	cmp	r3, r1
   17c3e:	d102      	bne.n	17c46 <bt_conn_new+0x12>
		return NULL;
   17c40:	2400      	movs	r4, #0
}
   17c42:	4620      	mov	r0, r4
   17c44:	bd38      	pop	{r3, r4, r5, pc}
   17c46:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   17c4a:	f3bf 8f5b 	dmb	ish
   17c4e:	e852 0f00 	ldrex	r0, [r2]
   17c52:	2800      	cmp	r0, #0
   17c54:	d104      	bne.n	17c60 <bt_conn_new+0x2c>
   17c56:	e842 5c00 	strex	ip, r5, [r2]
   17c5a:	f1bc 0f00 	cmp.w	ip, #0
   17c5e:	d1f6      	bne.n	17c4e <bt_conn_new+0x1a>
   17c60:	f3bf 8f5b 	dmb	ish
   17c64:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17c68:	d002      	beq.n	17c70 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   17c6a:	3301      	adds	r3, #1
   17c6c:	4604      	mov	r4, r0
   17c6e:	e7e5      	b.n	17c3c <bt_conn_new+0x8>
	if (!conn) {
   17c70:	2c00      	cmp	r4, #0
   17c72:	d0e6      	beq.n	17c42 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17c74:	22c0      	movs	r2, #192	; 0xc0
   17c76:	2100      	movs	r1, #0
   17c78:	4620      	mov	r0, r4
   17c7a:	f011 fef9 	bl	29a70 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   17c7e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17c82:	4904      	ldr	r1, [pc, #16]	; (17c94 <bt_conn_new+0x60>)
   17c84:	f00a fa72 	bl	2216c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17c88:	4903      	ldr	r1, [pc, #12]	; (17c98 <bt_conn_new+0x64>)
   17c8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17c8e:	f00a f969 	bl	21f64 <k_work_init>
	return conn;
   17c92:	e7d6      	b.n	17c42 <bt_conn_new+0xe>
   17c94:	000184b1 	.word	0x000184b1
   17c98:	0002a241 	.word	0x0002a241

00017c9c <conn_cleanup>:
{
   17c9c:	b570      	push	{r4, r5, r6, lr}
   17c9e:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17ca0:	f100 0638 	add.w	r6, r0, #56	; 0x38
   17ca4:	2200      	movs	r2, #0
   17ca6:	2300      	movs	r3, #0
   17ca8:	4630      	mov	r0, r6
   17caa:	f005 fb39 	bl	1d320 <net_buf_get>
   17cae:	4605      	mov	r5, r0
   17cb0:	bb48      	cbnz	r0, 17d06 <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   17cb2:	6963      	ldr	r3, [r4, #20]
   17cb4:	b173      	cbz	r3, 17cd4 <conn_cleanup+0x38>
   17cb6:	4918      	ldr	r1, [pc, #96]	; (17d18 <conn_cleanup+0x7c>)
   17cb8:	4a18      	ldr	r2, [pc, #96]	; (17d1c <conn_cleanup+0x80>)
   17cba:	4819      	ldr	r0, [pc, #100]	; (17d20 <conn_cleanup+0x84>)
   17cbc:	f240 2371 	movw	r3, #625	; 0x271
   17cc0:	f00f fc19 	bl	274f6 <printk>
   17cc4:	4817      	ldr	r0, [pc, #92]	; (17d24 <conn_cleanup+0x88>)
   17cc6:	f00f fc16 	bl	274f6 <printk>
   17cca:	4814      	ldr	r0, [pc, #80]	; (17d1c <conn_cleanup+0x80>)
   17ccc:	f240 2171 	movw	r1, #625	; 0x271
   17cd0:	f00f feb6 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   17cd4:	69e3      	ldr	r3, [r4, #28]
   17cd6:	b15b      	cbz	r3, 17cf0 <conn_cleanup+0x54>
   17cd8:	4913      	ldr	r1, [pc, #76]	; (17d28 <conn_cleanup+0x8c>)
   17cda:	4811      	ldr	r0, [pc, #68]	; (17d20 <conn_cleanup+0x84>)
   17cdc:	4a0f      	ldr	r2, [pc, #60]	; (17d1c <conn_cleanup+0x80>)
   17cde:	f240 2372 	movw	r3, #626	; 0x272
   17ce2:	f00f fc08 	bl	274f6 <printk>
   17ce6:	480d      	ldr	r0, [pc, #52]	; (17d1c <conn_cleanup+0x80>)
   17ce8:	f240 2172 	movw	r1, #626	; 0x272
   17cec:	f00f fea8 	bl	27a40 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   17cf0:	4620      	mov	r0, r4
   17cf2:	f012 faa8 	bl	2a246 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17cf6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17cfa:	2200      	movs	r2, #0
}
   17cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17d00:	2300      	movs	r3, #0
   17d02:	f00a bb57 	b.w	223b4 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   17d06:	6968      	ldr	r0, [r5, #20]
   17d08:	b108      	cbz	r0, 17d0e <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   17d0a:	f7ff febf 	bl	17a8c <tx_free>
		net_buf_unref(buf);
   17d0e:	4628      	mov	r0, r5
   17d10:	f005 fb98 	bl	1d444 <net_buf_unref>
   17d14:	e7c6      	b.n	17ca4 <conn_cleanup+0x8>
   17d16:	bf00      	nop
   17d18:	0002fc41 	.word	0x0002fc41
   17d1c:	0002fbfe 	.word	0x0002fbfe
   17d20:	0002dcd3 	.word	0x0002dcd3
   17d24:	0002fc67 	.word	0x0002fc67
   17d28:	0002fc7c 	.word	0x0002fc7c

00017d2c <bt_conn_recv>:
{
   17d2c:	b570      	push	{r4, r5, r6, lr}
   17d2e:	4616      	mov	r6, r2
   17d30:	4604      	mov	r4, r0
   17d32:	460d      	mov	r5, r1
	tx_notify(conn);
   17d34:	f012 fa61 	bl	2a1fa <tx_notify>
	switch (flags) {
   17d38:	2e01      	cmp	r6, #1
   17d3a:	d02e      	beq.n	17d9a <bt_conn_recv+0x6e>
   17d3c:	2e02      	cmp	r6, #2
   17d3e:	d15b      	bne.n	17df8 <bt_conn_recv+0xcc>
		if (conn->rx) {
   17d40:	6923      	ldr	r3, [r4, #16]
   17d42:	b163      	cbz	r3, 17d5e <bt_conn_recv+0x32>
   17d44:	4b37      	ldr	r3, [pc, #220]	; (17e24 <bt_conn_recv+0xf8>)
   17d46:	4938      	ldr	r1, [pc, #224]	; (17e28 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   17d48:	4838      	ldr	r0, [pc, #224]	; (17e2c <bt_conn_recv+0x100>)
   17d4a:	1ac9      	subs	r1, r1, r3
   17d4c:	08c9      	lsrs	r1, r1, #3
   17d4e:	0189      	lsls	r1, r1, #6
   17d50:	f041 0101 	orr.w	r1, r1, #1
   17d54:	f00f fea2 	bl	27a9c <log_0>
			bt_conn_reset_rx_state(conn);
   17d58:	4620      	mov	r0, r4
   17d5a:	f012 fa74 	bl	2a246 <bt_conn_reset_rx_state>
		conn->rx = buf;
   17d5e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17d60:	6923      	ldr	r3, [r4, #16]
   17d62:	8999      	ldrh	r1, [r3, #12]
   17d64:	2901      	cmp	r1, #1
   17d66:	d95b      	bls.n	17e20 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17d68:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   17d6a:	7845      	ldrb	r5, [r0, #1]
   17d6c:	7802      	ldrb	r2, [r0, #0]
   17d6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   17d72:	3204      	adds	r2, #4
   17d74:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   17d76:	4291      	cmp	r1, r2
   17d78:	d352      	bcc.n	17e20 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   17d7a:	d949      	bls.n	17e10 <bt_conn_recv+0xe4>
   17d7c:	4829      	ldr	r0, [pc, #164]	; (17e24 <bt_conn_recv+0xf8>)
   17d7e:	4b2a      	ldr	r3, [pc, #168]	; (17e28 <bt_conn_recv+0xfc>)
   17d80:	1a1b      	subs	r3, r3, r0
   17d82:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   17d84:	019b      	lsls	r3, r3, #6
   17d86:	482a      	ldr	r0, [pc, #168]	; (17e30 <bt_conn_recv+0x104>)
   17d88:	f043 0301 	orr.w	r3, r3, #1
   17d8c:	f00f fea7 	bl	27ade <log_2>
		bt_conn_reset_rx_state(conn);
   17d90:	4620      	mov	r0, r4
}
   17d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   17d96:	f012 ba56 	b.w	2a246 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   17d9a:	6920      	ldr	r0, [r4, #16]
   17d9c:	b968      	cbnz	r0, 17dba <bt_conn_recv+0x8e>
   17d9e:	4922      	ldr	r1, [pc, #136]	; (17e28 <bt_conn_recv+0xfc>)
   17da0:	4b20      	ldr	r3, [pc, #128]	; (17e24 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   17da2:	4824      	ldr	r0, [pc, #144]	; (17e34 <bt_conn_recv+0x108>)
   17da4:	1ac9      	subs	r1, r1, r3
   17da6:	08c9      	lsrs	r1, r1, #3
   17da8:	0189      	lsls	r1, r1, #6
   17daa:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   17dae:	f00f fe75 	bl	27a9c <log_0>
			bt_conn_reset_rx_state(conn);
   17db2:	4620      	mov	r0, r4
   17db4:	f012 fa47 	bl	2a246 <bt_conn_reset_rx_state>
   17db8:	e001      	b.n	17dbe <bt_conn_recv+0x92>
		if (!buf->len) {
   17dba:	89ae      	ldrh	r6, [r5, #12]
   17dbc:	b926      	cbnz	r6, 17dc8 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   17dbe:	4628      	mov	r0, r5
}
   17dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   17dc4:	f005 bb3e 	b.w	1d444 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17dc8:	3008      	adds	r0, #8
   17dca:	f013 fdf7 	bl	2b9bc <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17dce:	4286      	cmp	r6, r0
   17dd0:	d908      	bls.n	17de4 <bt_conn_recv+0xb8>
   17dd2:	4915      	ldr	r1, [pc, #84]	; (17e28 <bt_conn_recv+0xfc>)
   17dd4:	4b13      	ldr	r3, [pc, #76]	; (17e24 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   17dd6:	4818      	ldr	r0, [pc, #96]	; (17e38 <bt_conn_recv+0x10c>)
   17dd8:	1ac9      	subs	r1, r1, r3
   17dda:	08c9      	lsrs	r1, r1, #3
   17ddc:	0189      	lsls	r1, r1, #6
   17dde:	f041 0101 	orr.w	r1, r1, #1
   17de2:	e7e4      	b.n	17dae <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17de4:	6920      	ldr	r0, [r4, #16]
   17de6:	89aa      	ldrh	r2, [r5, #12]
   17de8:	68a9      	ldr	r1, [r5, #8]
   17dea:	3008      	adds	r0, #8
   17dec:	f013 fdee 	bl	2b9cc <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17df0:	4628      	mov	r0, r5
   17df2:	f005 fb27 	bl	1d444 <net_buf_unref>
		break;
   17df6:	e7b3      	b.n	17d60 <bt_conn_recv+0x34>
   17df8:	4a0a      	ldr	r2, [pc, #40]	; (17e24 <bt_conn_recv+0xf8>)
   17dfa:	4b0b      	ldr	r3, [pc, #44]	; (17e28 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17dfc:	480f      	ldr	r0, [pc, #60]	; (17e3c <bt_conn_recv+0x110>)
   17dfe:	1a9b      	subs	r3, r3, r2
   17e00:	08db      	lsrs	r3, r3, #3
   17e02:	019b      	lsls	r3, r3, #6
   17e04:	f043 0201 	orr.w	r2, r3, #1
   17e08:	4631      	mov	r1, r6
   17e0a:	f00f fe54 	bl	27ab6 <log_1>
		bt_conn_reset_rx_state(conn);
   17e0e:	e7d0      	b.n	17db2 <bt_conn_recv+0x86>
	conn->rx = NULL;
   17e10:	2200      	movs	r2, #0
   17e12:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   17e14:	4620      	mov	r0, r4
   17e16:	4619      	mov	r1, r3
}
   17e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   17e1c:	f000 be34 	b.w	18a88 <bt_l2cap_recv>
}
   17e20:	bd70      	pop	{r4, r5, r6, pc}
   17e22:	bf00      	nop
   17e24:	0002ccb8 	.word	0x0002ccb8
   17e28:	0002ccd0 	.word	0x0002ccd0
   17e2c:	0002fc95 	.word	0x0002fc95
   17e30:	0002fd15 	.word	0x0002fd15
   17e34:	0002fcb2 	.word	0x0002fcb2
   17e38:	0002fcd0 	.word	0x0002fcd0
   17e3c:	0002fcf7 	.word	0x0002fcf7

00017e40 <bt_conn_send_cb>:
{
   17e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e44:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   17e46:	7b43      	ldrb	r3, [r0, #13]
   17e48:	2b07      	cmp	r3, #7
{
   17e4a:	4605      	mov	r5, r0
   17e4c:	460e      	mov	r6, r1
   17e4e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   17e50:	d00c      	beq.n	17e6c <bt_conn_send_cb+0x2c>
   17e52:	4926      	ldr	r1, [pc, #152]	; (17eec <bt_conn_send_cb+0xac>)
   17e54:	4b26      	ldr	r3, [pc, #152]	; (17ef0 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   17e56:	4827      	ldr	r0, [pc, #156]	; (17ef4 <bt_conn_send_cb+0xb4>)
   17e58:	1ac9      	subs	r1, r1, r3
   17e5a:	08c9      	lsrs	r1, r1, #3
   17e5c:	0189      	lsls	r1, r1, #6
   17e5e:	f041 0101 	orr.w	r1, r1, #1
   17e62:	f00f fe1b 	bl	27a9c <log_0>
			return -ENOTCONN;
   17e66:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17e6a:	e01d      	b.n	17ea8 <bt_conn_send_cb+0x68>
	if (cb) {
   17e6c:	2a00      	cmp	r2, #0
   17e6e:	d03a      	beq.n	17ee6 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   17e70:	f00b fca2 	bl	237b8 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   17e74:	4b20      	ldr	r3, [pc, #128]	; (17ef8 <bt_conn_send_cb+0xb8>)
   17e76:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17e78:	4820      	ldr	r0, [pc, #128]	; (17efc <bt_conn_send_cb+0xbc>)
   17e7a:	bf07      	ittee	eq
   17e7c:	2200      	moveq	r2, #0
   17e7e:	2300      	moveq	r3, #0
   17e80:	f04f 32ff 	movne.w	r2, #4294967295
   17e84:	f04f 33ff 	movne.w	r3, #4294967295
   17e88:	f009 fcec 	bl	21864 <z_impl_k_queue_get>
   17e8c:	4604      	mov	r4, r0
		if (!tx) {
   17e8e:	b968      	cbnz	r0, 17eac <bt_conn_send_cb+0x6c>
   17e90:	4b17      	ldr	r3, [pc, #92]	; (17ef0 <bt_conn_send_cb+0xb0>)
   17e92:	4916      	ldr	r1, [pc, #88]	; (17eec <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   17e94:	481a      	ldr	r0, [pc, #104]	; (17f00 <bt_conn_send_cb+0xc0>)
   17e96:	1ac9      	subs	r1, r1, r3
   17e98:	08c9      	lsrs	r1, r1, #3
   17e9a:	0189      	lsls	r1, r1, #6
   17e9c:	f041 0101 	orr.w	r1, r1, #1
   17ea0:	f00f fdfc 	bl	27a9c <log_0>
			return -ENOBUFS;
   17ea4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17eac:	7b6b      	ldrb	r3, [r5, #13]
   17eae:	2b07      	cmp	r3, #7
   17eb0:	d00d      	beq.n	17ece <bt_conn_send_cb+0x8e>
   17eb2:	4b0f      	ldr	r3, [pc, #60]	; (17ef0 <bt_conn_send_cb+0xb0>)
   17eb4:	490d      	ldr	r1, [pc, #52]	; (17eec <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   17eb6:	4813      	ldr	r0, [pc, #76]	; (17f04 <bt_conn_send_cb+0xc4>)
   17eb8:	1ac9      	subs	r1, r1, r3
   17eba:	08c9      	lsrs	r1, r1, #3
   17ebc:	0189      	lsls	r1, r1, #6
   17ebe:	f041 0102 	orr.w	r1, r1, #2
   17ec2:	f00f fdeb 	bl	27a9c <log_0>
			tx_free(tx);
   17ec6:	4620      	mov	r0, r4
   17ec8:	f7ff fde0 	bl	17a8c <tx_free>
   17ecc:	e7cb      	b.n	17e66 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   17ece:	2300      	movs	r3, #0
		tx->user_data = user_data;
   17ed0:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   17ed4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   17ed6:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   17ed8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17edc:	4631      	mov	r1, r6
   17ede:	f005 fa7d 	bl	1d3dc <net_buf_put>
	return 0;
   17ee2:	2000      	movs	r0, #0
   17ee4:	e7e0      	b.n	17ea8 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   17ee6:	614a      	str	r2, [r1, #20]
   17ee8:	e7f6      	b.n	17ed8 <bt_conn_send_cb+0x98>
   17eea:	bf00      	nop
   17eec:	0002ccd0 	.word	0x0002ccd0
   17ef0:	0002ccb8 	.word	0x0002ccb8
   17ef4:	0002fd30 	.word	0x0002fd30
   17ef8:	200020a8 	.word	0x200020a8
   17efc:	2000090c 	.word	0x2000090c
   17f00:	0002fd3f 	.word	0x0002fd3f
   17f04:	0002fd5d 	.word	0x0002fd5d

00017f08 <bt_conn_prepare_events>:
{
   17f08:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   17f0a:	4b1b      	ldr	r3, [pc, #108]	; (17f78 <bt_conn_prepare_events+0x70>)
   17f0c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17f0e:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   17f10:	609a      	str	r2, [r3, #8]
{
   17f12:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17f14:	f00c fbb2 	bl	2467c <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17f18:	f3bf 8f5b 	dmb	ish
   17f1c:	4b17      	ldr	r3, [pc, #92]	; (17f7c <bt_conn_prepare_events+0x74>)
   17f1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   17f22:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   17f26:	f104 0014 	add.w	r0, r4, #20
   17f2a:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   17f2c:	b90a      	cbnz	r2, 17f32 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   17f2e:	2001      	movs	r0, #1
}
   17f30:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17f32:	7b5a      	ldrb	r2, [r3, #13]
   17f34:	b99a      	cbnz	r2, 17f5e <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17f36:	f3bf 8f5b 	dmb	ish
   17f3a:	1d1a      	adds	r2, r3, #4
   17f3c:	e852 5f00 	ldrex	r5, [r2]
   17f40:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   17f44:	e842 ce00 	strex	lr, ip, [r2]
   17f48:	f1be 0f00 	cmp.w	lr, #0
   17f4c:	d1f6      	bne.n	17f3c <bt_conn_prepare_events+0x34>
   17f4e:	f3bf 8f5b 	dmb	ish
   17f52:	066a      	lsls	r2, r5, #25
   17f54:	d503      	bpl.n	17f5e <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   17f56:	4618      	mov	r0, r3
   17f58:	f7ff fea0 	bl	17c9c <conn_cleanup>
   17f5c:	e7e7      	b.n	17f2e <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   17f5e:	7b4b      	ldrb	r3, [r1, #13]
   17f60:	2b07      	cmp	r3, #7
   17f62:	d1e4      	bne.n	17f2e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   17f64:	4b06      	ldr	r3, [pc, #24]	; (17f80 <bt_conn_prepare_events+0x78>)
   17f66:	2200      	movs	r2, #0
   17f68:	2104      	movs	r1, #4
   17f6a:	f00c fb87 	bl	2467c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   17f6e:	2301      	movs	r3, #1
   17f70:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   17f74:	2002      	movs	r0, #2
	return ev_count;
   17f76:	e7db      	b.n	17f30 <bt_conn_prepare_events+0x28>
   17f78:	20000508 	.word	0x20000508
   17f7c:	20001850 	.word	0x20001850
   17f80:	20001888 	.word	0x20001888

00017f84 <bt_conn_unref>:
{
   17f84:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   17f86:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
{
   17f8a:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17f8c:	f3bf 8f5b 	dmb	ish
   17f90:	e853 2f00 	ldrex	r2, [r3]
   17f94:	1e51      	subs	r1, r2, #1
   17f96:	e843 1000 	strex	r0, r1, [r3]
   17f9a:	2800      	cmp	r0, #0
   17f9c:	d1f8      	bne.n	17f90 <bt_conn_unref+0xc>
   17f9e:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   17fa2:	2a00      	cmp	r2, #0
   17fa4:	dc0e      	bgt.n	17fc4 <bt_conn_unref+0x40>
   17fa6:	490f      	ldr	r1, [pc, #60]	; (17fe4 <bt_conn_unref+0x60>)
   17fa8:	4a0f      	ldr	r2, [pc, #60]	; (17fe8 <bt_conn_unref+0x64>)
   17faa:	4810      	ldr	r0, [pc, #64]	; (17fec <bt_conn_unref+0x68>)
   17fac:	f240 433a 	movw	r3, #1082	; 0x43a
   17fb0:	f00f faa1 	bl	274f6 <printk>
   17fb4:	480e      	ldr	r0, [pc, #56]	; (17ff0 <bt_conn_unref+0x6c>)
   17fb6:	f00f fa9e 	bl	274f6 <printk>
   17fba:	480b      	ldr	r0, [pc, #44]	; (17fe8 <bt_conn_unref+0x64>)
   17fbc:	f240 413a 	movw	r1, #1082	; 0x43a
   17fc0:	f00f fd3e 	bl	27a40 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   17fc4:	78a3      	ldrb	r3, [r4, #2]
   17fc6:	2b01      	cmp	r3, #1
   17fc8:	d10a      	bne.n	17fe0 <bt_conn_unref+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17fca:	f3bf 8f5b 	dmb	ish
   17fce:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17fd2:	f3bf 8f5b 	dmb	ish
   17fd6:	b91b      	cbnz	r3, 17fe0 <bt_conn_unref+0x5c>
}
   17fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   17fdc:	f7ff bbba 	b.w	17754 <bt_le_adv_resume>
}
   17fe0:	bd10      	pop	{r4, pc}
   17fe2:	bf00      	nop
   17fe4:	0002fd83 	.word	0x0002fd83
   17fe8:	0002fbfe 	.word	0x0002fbfe
   17fec:	0002dcd3 	.word	0x0002dcd3
   17ff0:	0002fd8b 	.word	0x0002fd8b

00017ff4 <bt_conn_lookup_handle>:
{
   17ff4:	4602      	mov	r2, r0
   17ff6:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17ff8:	2101      	movs	r1, #1
   17ffa:	4803      	ldr	r0, [pc, #12]	; (18008 <bt_conn_lookup_handle+0x14>)
   17ffc:	f012 f947 	bl	2a28e <conn_lookup_handle>
}
   18000:	2800      	cmp	r0, #0
   18002:	bf38      	it	cc
   18004:	2000      	movcc	r0, #0
   18006:	bd08      	pop	{r3, pc}
   18008:	20001850 	.word	0x20001850

0001800c <bt_conn_set_state>:
{
   1800c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1800e:	7b46      	ldrb	r6, [r0, #13]
   18010:	428e      	cmp	r6, r1
{
   18012:	4604      	mov	r4, r0
   18014:	460d      	mov	r5, r1
	if (conn->state == state) {
   18016:	d112      	bne.n	1803e <bt_conn_set_state+0x32>
   18018:	4b68      	ldr	r3, [pc, #416]	; (181bc <bt_conn_set_state+0x1b0>)
   1801a:	4a69      	ldr	r2, [pc, #420]	; (181c0 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
   1801c:	4869      	ldr	r0, [pc, #420]	; (181c4 <bt_conn_set_state+0x1b8>)
   1801e:	2e08      	cmp	r6, #8
   18020:	eba2 0203 	sub.w	r2, r2, r3
   18024:	bf96      	itet	ls
   18026:	4b68      	ldrls	r3, [pc, #416]	; (181c8 <bt_conn_set_state+0x1bc>)
   18028:	4968      	ldrhi	r1, [pc, #416]	; (181cc <bt_conn_set_state+0x1c0>)
   1802a:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   1802e:	08d2      	lsrs	r2, r2, #3
   18030:	0192      	lsls	r2, r2, #6
   18032:	f042 0202 	orr.w	r2, r2, #2
}
   18036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   1803a:	f00f bd3c 	b.w	27ab6 <log_1>
	conn->state = state;
   1803e:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   18040:	b926      	cbnz	r6, 1804c <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
   18042:	7883      	ldrb	r3, [r0, #2]
   18044:	2b08      	cmp	r3, #8
   18046:	d001      	beq.n	1804c <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
   18048:	f012 f906 	bl	2a258 <bt_conn_ref>
	switch (conn->state) {
   1804c:	7b63      	ldrb	r3, [r4, #13]
   1804e:	2b08      	cmp	r3, #8
   18050:	f200 80a9 	bhi.w	181a6 <bt_conn_set_state+0x19a>
   18054:	e8df f003 	tbb	[pc, r3]
   18058:	b1b10538 	.word	0xb1b10538
   1805c:	1cb1b1b1 	.word	0x1cb1b1b1
   18060:	b1          	.byte	0xb1
   18061:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   18062:	4d5b      	ldr	r5, [pc, #364]	; (181d0 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
   18064:	2600      	movs	r6, #0
	__asm__ volatile(
   18066:	f04f 0340 	mov.w	r3, #64	; 0x40
   1806a:	f3ef 8211 	mrs	r2, BASEPRI
   1806e:	f383 8811 	msr	BASEPRI, r3
   18072:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   18076:	69e3      	ldr	r3, [r4, #28]
   18078:	2b00      	cmp	r3, #0
   1807a:	d075      	beq.n	18168 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
   1807c:	3b01      	subs	r3, #1
   1807e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18080:	f382 8811 	msr	BASEPRI, r2
   18084:	f3bf 8f6f 	isb	sy
   18088:	4628      	mov	r0, r5
   1808a:	f009 fc57 	bl	2193c <z_impl_k_sem_give>
}
   1808e:	e7ea      	b.n	18066 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18090:	78a3      	ldrb	r3, [r4, #2]
   18092:	2b04      	cmp	r3, #4
   18094:	f000 8091 	beq.w	181ba <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
   18098:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1809c:	f014 facb 	bl	2c636 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   180a0:	484c      	ldr	r0, [pc, #304]	; (181d4 <bt_conn_set_state+0x1c8>)
   180a2:	2100      	movs	r1, #0
   180a4:	f00c fc46 	bl	24934 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   180a8:	2300      	movs	r3, #0
	list->tail = NULL;
   180aa:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   180ae:	78e3      	ldrb	r3, [r4, #3]
   180b0:	2b01      	cmp	r3, #1
   180b2:	f040 8082 	bne.w	181ba <bt_conn_set_state+0x1ae>
			k_work_schedule(&conn->deferred_work,
   180b6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   180ba:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   180be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   180c2:	2300      	movs	r3, #0
   180c4:	f00a b8fa 	b.w	222bc <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_ISO) {
   180c8:	78a3      	ldrb	r3, [r4, #2]
   180ca:	2b08      	cmp	r3, #8
   180cc:	d075      	beq.n	181ba <bt_conn_set_state+0x1ae>
		if (conn->type == BT_CONN_TYPE_SCO) {
   180ce:	2b04      	cmp	r3, #4
   180d0:	d104      	bne.n	180dc <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   180d2:	4620      	mov	r0, r4
}
   180d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   180d8:	f7ff bf54 	b.w	17f84 <bt_conn_unref>
		switch (old_state) {
   180dc:	2e08      	cmp	r6, #8
   180de:	d86c      	bhi.n	181ba <bt_conn_set_state+0x1ae>
   180e0:	a301      	add	r3, pc, #4	; (adr r3, 180e8 <bt_conn_set_state+0xdc>)
   180e2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   180e6:	bf00      	nop
   180e8:	00018155 	.word	0x00018155
   180ec:	0001810d 	.word	0x0001810d
   180f0:	00018147 	.word	0x00018147
   180f4:	000180d3 	.word	0x000180d3
   180f8:	000180d3 	.word	0x000180d3
   180fc:	00018147 	.word	0x00018147
   18100:	00018147 	.word	0x00018147
   18104:	00018155 	.word	0x00018155
   18108:	00018155 	.word	0x00018155
			tx_notify(conn);
   1810c:	4620      	mov	r0, r4
   1810e:	f012 f874 	bl	2a1fa <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   18112:	78a3      	ldrb	r3, [r4, #2]
   18114:	2b01      	cmp	r3, #1
   18116:	d103      	bne.n	18120 <bt_conn_set_state+0x114>
				k_work_cancel_delayable(&conn->deferred_work);
   18118:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1811c:	f00a f950 	bl	223c0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18120:	f3bf 8f5b 	dmb	ish
   18124:	3404      	adds	r4, #4
   18126:	e854 3f00 	ldrex	r3, [r4]
   1812a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1812e:	e844 3200 	strex	r2, r3, [r4]
   18132:	2a00      	cmp	r2, #0
   18134:	d1f7      	bne.n	18126 <bt_conn_set_state+0x11a>
   18136:	f3bf 8f5b 	dmb	ish
   1813a:	4826      	ldr	r0, [pc, #152]	; (181d4 <bt_conn_set_state+0x1c8>)
}
   1813c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18140:	2100      	movs	r1, #0
   18142:	f00c bbf7 	b.w	24934 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   18146:	7b23      	ldrb	r3, [r4, #12]
   18148:	2b00      	cmp	r3, #0
   1814a:	d0c2      	beq.n	180d2 <bt_conn_set_state+0xc6>
				notify_connected(conn);
   1814c:	4620      	mov	r0, r4
   1814e:	f7ff fca7 	bl	17aa0 <notify_connected>
   18152:	e7be      	b.n	180d2 <bt_conn_set_state+0xc6>
   18154:	4a1a      	ldr	r2, [pc, #104]	; (181c0 <bt_conn_set_state+0x1b4>)
   18156:	4b19      	ldr	r3, [pc, #100]	; (181bc <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
   18158:	481f      	ldr	r0, [pc, #124]	; (181d8 <bt_conn_set_state+0x1cc>)
   1815a:	1ad2      	subs	r2, r2, r3
   1815c:	08d2      	lsrs	r2, r2, #3
   1815e:	0192      	lsls	r2, r2, #6
   18160:	f042 0202 	orr.w	r2, r2, #2
   18164:	4629      	mov	r1, r5
   18166:	e766      	b.n	18036 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   18168:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1816a:	b128      	cbz	r0, 18178 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1816c:	69a1      	ldr	r1, [r4, #24]
   1816e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   18170:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18172:	4288      	cmp	r0, r1
	list->tail = node;
   18174:	bf08      	it	eq
   18176:	61a3      	streq	r3, [r4, #24]
   18178:	f382 8811 	msr	BASEPRI, r2
   1817c:	f3bf 8f6f 	isb	sy
		if (!node) {
   18180:	b1d8      	cbz	r0, 181ba <bt_conn_set_state+0x1ae>
	__asm__ volatile(
   18182:	f04f 0240 	mov.w	r2, #64	; 0x40
   18186:	f3ef 8311 	mrs	r3, BASEPRI
   1818a:	f382 8811 	msr	BASEPRI, r2
   1818e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   18192:	68c2      	ldr	r2, [r0, #12]
   18194:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   18196:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   18198:	f383 8811 	msr	BASEPRI, r3
   1819c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   181a0:	f7ff fc74 	bl	17a8c <tx_free>
   181a4:	e770      	b.n	18088 <bt_conn_set_state+0x7c>
   181a6:	4a06      	ldr	r2, [pc, #24]	; (181c0 <bt_conn_set_state+0x1b4>)
   181a8:	4b04      	ldr	r3, [pc, #16]	; (181bc <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
   181aa:	480c      	ldr	r0, [pc, #48]	; (181dc <bt_conn_set_state+0x1d0>)
   181ac:	1ad2      	subs	r2, r2, r3
   181ae:	08d2      	lsrs	r2, r2, #3
   181b0:	0192      	lsls	r2, r2, #6
   181b2:	f042 0202 	orr.w	r2, r2, #2
   181b6:	4629      	mov	r1, r5
   181b8:	e73d      	b.n	18036 <bt_conn_set_state+0x2a>
}
   181ba:	bd70      	pop	{r4, r5, r6, pc}
   181bc:	0002ccb8 	.word	0x0002ccb8
   181c0:	0002ccd0 	.word	0x0002ccd0
   181c4:	0002fdb3 	.word	0x0002fdb3
   181c8:	0002d368 	.word	0x0002d368
   181cc:	0002fda9 	.word	0x0002fda9
   181d0:	20000388 	.word	0x20000388
   181d4:	20000508 	.word	0x20000508
   181d8:	0002fdc4 	.word	0x0002fdc4
   181dc:	0002fddb 	.word	0x0002fddb

000181e0 <bt_conn_index>:
		index = conn - acl_conns;
   181e0:	4a0c      	ldr	r2, [pc, #48]	; (18214 <bt_conn_index+0x34>)
{
   181e2:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   181e4:	1a84      	subs	r4, r0, r2
   181e6:	10e3      	asrs	r3, r4, #3
   181e8:	4c0b      	ldr	r4, [pc, #44]	; (18218 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   181ea:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   181ec:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   181f0:	d00e      	beq.n	18210 <bt_conn_index+0x30>
   181f2:	490a      	ldr	r1, [pc, #40]	; (1821c <bt_conn_index+0x3c>)
   181f4:	4a0a      	ldr	r2, [pc, #40]	; (18220 <bt_conn_index+0x40>)
   181f6:	480b      	ldr	r0, [pc, #44]	; (18224 <bt_conn_index+0x44>)
   181f8:	f44f 638b 	mov.w	r3, #1112	; 0x458
   181fc:	f00f f97b 	bl	274f6 <printk>
   18200:	4809      	ldr	r0, [pc, #36]	; (18228 <bt_conn_index+0x48>)
   18202:	f00f f978 	bl	274f6 <printk>
   18206:	4806      	ldr	r0, [pc, #24]	; (18220 <bt_conn_index+0x40>)
   18208:	f44f 618b 	mov.w	r1, #1112	; 0x458
   1820c:	f00f fc18 	bl	27a40 <assert_post_action>
}
   18210:	b2e0      	uxtb	r0, r4
   18212:	bd10      	pop	{r4, pc}
   18214:	20001850 	.word	0x20001850
   18218:	c28f5c29 	.word	0xc28f5c29
   1821c:	0002fdf7 	.word	0x0002fdf7
   18220:	0002fbfe 	.word	0x0002fbfe
   18224:	0002dcd3 	.word	0x0002dcd3
   18228:	0002febe 	.word	0x0002febe

0001822c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1822c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1822e:	f3bf 8f5b 	dmb	ish
   18232:	6842      	ldr	r2, [r0, #4]
   18234:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   18238:	0592      	lsls	r2, r2, #22
{
   1823a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1823c:	f100 0304 	add.w	r3, r0, #4
   18240:	d519      	bpl.n	18276 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   18242:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   18246:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   1824a:	4291      	cmp	r1, r2
   1824c:	d813      	bhi.n	18276 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1824e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   18252:	4291      	cmp	r1, r2
   18254:	d30f      	bcc.n	18276 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   18256:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   1825a:	4291      	cmp	r1, r2
   1825c:	d10b      	bne.n	18276 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1825e:	f3bf 8f5b 	dmb	ish
   18262:	e853 2f00 	ldrex	r2, [r3]
   18266:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   1826a:	e843 2100 	strex	r1, r2, [r3]
   1826e:	2900      	cmp	r1, #0
   18270:	d1f7      	bne.n	18262 <notify_le_param_updated+0x36>
   18272:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18276:	4b08      	ldr	r3, [pc, #32]	; (18298 <notify_le_param_updated+0x6c>)
   18278:	681d      	ldr	r5, [r3, #0]
   1827a:	b905      	cbnz	r5, 1827e <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1827c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1827e:	68ee      	ldr	r6, [r5, #12]
   18280:	b13e      	cbz	r6, 18292 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   18282:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18286:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1828a:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1828e:	4620      	mov	r0, r4
   18290:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   18292:	69ad      	ldr	r5, [r5, #24]
   18294:	e7f1      	b.n	1827a <notify_le_param_updated+0x4e>
   18296:	bf00      	nop
   18298:	20003040 	.word	0x20003040

0001829c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1829e:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   182a0:	4608      	mov	r0, r1
{
   182a2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   182a4:	f011 fdea 	bl	29e7c <bt_le_conn_params_valid>
   182a8:	4604      	mov	r4, r0
   182aa:	b910      	cbnz	r0, 182b2 <le_param_req+0x16>
		return false;
   182ac:	2400      	movs	r4, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   182ae:	4620      	mov	r0, r4
   182b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   182b2:	4b09      	ldr	r3, [pc, #36]	; (182d8 <le_param_req+0x3c>)
   182b4:	681e      	ldr	r6, [r3, #0]
   182b6:	2e00      	cmp	r6, #0
   182b8:	d0f9      	beq.n	182ae <le_param_req+0x12>
		if (!cb->le_param_req) {
   182ba:	68b3      	ldr	r3, [r6, #8]
   182bc:	b90b      	cbnz	r3, 182c2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   182be:	69b6      	ldr	r6, [r6, #24]
   182c0:	e7f9      	b.n	182b6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   182c2:	4629      	mov	r1, r5
   182c4:	4638      	mov	r0, r7
   182c6:	4798      	blx	r3
   182c8:	2800      	cmp	r0, #0
   182ca:	d0ef      	beq.n	182ac <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   182cc:	4628      	mov	r0, r5
   182ce:	f011 fdd5 	bl	29e7c <bt_le_conn_params_valid>
   182d2:	2800      	cmp	r0, #0
   182d4:	d1f3      	bne.n	182be <le_param_req+0x22>
   182d6:	e7e9      	b.n	182ac <le_param_req+0x10>
   182d8:	20003040 	.word	0x20003040

000182dc <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   182dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
   182de:	78c3      	ldrb	r3, [r0, #3]
{
   182e0:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   182e2:	b93b      	cbnz	r3, 182f4 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   182e4:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   182e8:	4b08      	ldr	r3, [pc, #32]	; (1830c <bt_conn_identity_resolved+0x30>)
   182ea:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   182ec:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   182f0:	b91d      	cbnz	r5, 182fa <bt_conn_identity_resolved+0x1e>
		}
	}
}
   182f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   182f4:	f100 0697 	add.w	r6, r0, #151	; 0x97
   182f8:	e7f6      	b.n	182e8 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   182fa:	692b      	ldr	r3, [r5, #16]
   182fc:	b11b      	cbz	r3, 18306 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   182fe:	463a      	mov	r2, r7
   18300:	4631      	mov	r1, r6
   18302:	4620      	mov	r0, r4
   18304:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18306:	69ad      	ldr	r5, [r5, #24]
   18308:	e7f2      	b.n	182f0 <bt_conn_identity_resolved+0x14>
   1830a:	bf00      	nop
   1830c:	20003040 	.word	0x20003040

00018310 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   18310:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   18312:	7a43      	ldrb	r3, [r0, #9]
   18314:	7283      	strb	r3, [r0, #10]
{
   18316:	4604      	mov	r4, r0
   18318:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1831a:	f012 f8d7 	bl	2a4cc <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   1831e:	4b06      	ldr	r3, [pc, #24]	; (18338 <bt_conn_security_changed+0x28>)
   18320:	681d      	ldr	r5, [r3, #0]
   18322:	b905      	cbnz	r5, 18326 <bt_conn_security_changed+0x16>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   18324:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   18326:	696b      	ldr	r3, [r5, #20]
   18328:	b11b      	cbz	r3, 18332 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   1832a:	7a61      	ldrb	r1, [r4, #9]
   1832c:	4632      	mov	r2, r6
   1832e:	4620      	mov	r0, r4
   18330:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18332:	69ad      	ldr	r5, [r5, #24]
   18334:	e7f5      	b.n	18322 <bt_conn_security_changed+0x12>
   18336:	bf00      	nop
   18338:	20003040 	.word	0x20003040

0001833c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1833c:	4b02      	ldr	r3, [pc, #8]	; (18348 <bt_conn_cb_register+0xc>)
   1833e:	681a      	ldr	r2, [r3, #0]
   18340:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   18342:	6018      	str	r0, [r3, #0]
}
   18344:	4770      	bx	lr
   18346:	bf00      	nop
   18348:	20003040 	.word	0x20003040

0001834c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1834c:	b570      	push	{r4, r5, r6, lr}
   1834e:	4606      	mov	r6, r0
   18350:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18352:	480a      	ldr	r0, [pc, #40]	; (1837c <bt_conn_add_le+0x30>)
   18354:	2101      	movs	r1, #1
   18356:	f7ff fc6d 	bl	17c34 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1835a:	4604      	mov	r4, r0
   1835c:	b160      	cbz	r0, 18378 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   1835e:	7206      	strb	r6, [r0, #8]
   18360:	2207      	movs	r2, #7
   18362:	4629      	mov	r1, r5
   18364:	3090      	adds	r0, #144	; 0x90
   18366:	f011 fb78 	bl	29a5a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1836a:	2301      	movs	r3, #1
   1836c:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1836e:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18370:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18372:	4b03      	ldr	r3, [pc, #12]	; (18380 <bt_conn_add_le+0x34>)
   18374:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18378:	4620      	mov	r0, r4
   1837a:	bd70      	pop	{r4, r5, r6, pc}
   1837c:	20001850 	.word	0x20001850
   18380:	00280018 	.word	0x00280018

00018384 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   18384:	b570      	push	{r4, r5, r6, lr}
   18386:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18388:	480c      	ldr	r0, [pc, #48]	; (183bc <bt_conn_lookup_addr_le+0x38>)
{
   1838a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1838c:	f011 ff64 	bl	2a258 <bt_conn_ref>

		if (!conn) {
   18390:	4604      	mov	r4, r0
   18392:	b128      	cbz	r0, 183a0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18394:	7883      	ldrb	r3, [r0, #2]
   18396:	2b01      	cmp	r3, #1
   18398:	d004      	beq.n	183a4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1839a:	f7ff fdf3 	bl	17f84 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1839e:	2400      	movs	r4, #0
}
   183a0:	4620      	mov	r0, r4
   183a2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   183a4:	4629      	mov	r1, r5
   183a6:	4632      	mov	r2, r6
   183a8:	f011 fff5 	bl	2a396 <bt_conn_is_peer_addr_le>
   183ac:	4605      	mov	r5, r0
   183ae:	2800      	cmp	r0, #0
   183b0:	d1f6      	bne.n	183a0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   183b2:	4620      	mov	r0, r4
   183b4:	f7ff fde6 	bl	17f84 <bt_conn_unref>
	return NULL;
   183b8:	462c      	mov	r4, r5
			continue;
   183ba:	e7f1      	b.n	183a0 <bt_conn_lookup_addr_le+0x1c>
   183bc:	20001850 	.word	0x20001850

000183c0 <bt_conn_exists_le>:
{
   183c0:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   183c2:	f7ff ffdf 	bl	18384 <bt_conn_lookup_addr_le>
	if (conn) {
   183c6:	4604      	mov	r4, r0
   183c8:	b1a0      	cbz	r0, 183f4 <bt_conn_exists_le+0x34>
   183ca:	4b0b      	ldr	r3, [pc, #44]	; (183f8 <bt_conn_exists_le+0x38>)
   183cc:	4a0b      	ldr	r2, [pc, #44]	; (183fc <bt_conn_exists_le+0x3c>)
   183ce:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   183d0:	7b43      	ldrb	r3, [r0, #13]
   183d2:	480b      	ldr	r0, [pc, #44]	; (18400 <bt_conn_exists_le+0x40>)
   183d4:	2b08      	cmp	r3, #8
   183d6:	bf96      	itet	ls
   183d8:	490a      	ldrls	r1, [pc, #40]	; (18404 <bt_conn_exists_le+0x44>)
   183da:	490b      	ldrhi	r1, [pc, #44]	; (18408 <bt_conn_exists_le+0x48>)
   183dc:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   183e0:	08d2      	lsrs	r2, r2, #3
   183e2:	0192      	lsls	r2, r2, #6
   183e4:	f042 0202 	orr.w	r2, r2, #2
   183e8:	f00f fb65 	bl	27ab6 <log_1>
		bt_conn_unref(conn);
   183ec:	4620      	mov	r0, r4
   183ee:	f7ff fdc9 	bl	17f84 <bt_conn_unref>
		return true;
   183f2:	2001      	movs	r0, #1
}
   183f4:	bd10      	pop	{r4, pc}
   183f6:	bf00      	nop
   183f8:	0002ccb8 	.word	0x0002ccb8
   183fc:	0002ccd0 	.word	0x0002ccd0
   18400:	0002fed8 	.word	0x0002fed8
   18404:	0002d368 	.word	0x0002d368
   18408:	0002fda9 	.word	0x0002fda9

0001840c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1840e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18410:	480e      	ldr	r0, [pc, #56]	; (1844c <bt_conn_lookup_state_le+0x40>)
{
   18412:	460e      	mov	r6, r1
   18414:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18416:	f011 ff1f 	bl	2a258 <bt_conn_ref>

		if (!conn) {
   1841a:	4604      	mov	r4, r0
   1841c:	b1a0      	cbz	r0, 18448 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1841e:	7883      	ldrb	r3, [r0, #2]
   18420:	2b01      	cmp	r3, #1
   18422:	d003      	beq.n	1842c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18424:	f7ff fdae 	bl	17f84 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18428:	2400      	movs	r4, #0
			continue;
   1842a:	e00d      	b.n	18448 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1842c:	b136      	cbz	r6, 1843c <bt_conn_lookup_state_le+0x30>
   1842e:	4632      	mov	r2, r6
   18430:	4629      	mov	r1, r5
   18432:	f011 ffb0 	bl	2a396 <bt_conn_is_peer_addr_le>
   18436:	b908      	cbnz	r0, 1843c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   18438:	4620      	mov	r0, r4
   1843a:	e7f3      	b.n	18424 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1843c:	7b63      	ldrb	r3, [r4, #13]
   1843e:	42bb      	cmp	r3, r7
   18440:	d1fa      	bne.n	18438 <bt_conn_lookup_state_le+0x2c>
   18442:	7a23      	ldrb	r3, [r4, #8]
   18444:	42ab      	cmp	r3, r5
   18446:	d1f7      	bne.n	18438 <bt_conn_lookup_state_le+0x2c>
}
   18448:	4620      	mov	r0, r4
   1844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1844c:	20001850 	.word	0x20001850

00018450 <send_conn_le_param_update>:
{
   18450:	b538      	push	{r3, r4, r5, lr}
   18452:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   18454:	4608      	mov	r0, r1
{
   18456:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18458:	f011 fd10 	bl	29e7c <bt_le_conn_params_valid>
   1845c:	b318      	cbz	r0, 184a6 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1845e:	4b13      	ldr	r3, [pc, #76]	; (184ac <send_conn_le_param_update+0x5c>)
   18460:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   18464:	0799      	lsls	r1, r3, #30
   18466:	d407      	bmi.n	18478 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   18468:	78e3      	ldrb	r3, [r4, #3]
   1846a:	b183      	cbz	r3, 1848e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   1846c:	4629      	mov	r1, r5
   1846e:	4620      	mov	r0, r4
}
   18470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18474:	f000 bb40 	b.w	18af8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18478:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1847c:	079a      	lsls	r2, r3, #30
   1847e:	d5f3      	bpl.n	18468 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18480:	f3bf 8f5b 	dmb	ish
   18484:	6863      	ldr	r3, [r4, #4]
   18486:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1848a:	055b      	lsls	r3, r3, #21
   1848c:	d4ec      	bmi.n	18468 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1848e:	4629      	mov	r1, r5
   18490:	4620      	mov	r0, r4
   18492:	f011 ffa2 	bl	2a3da <bt_conn_le_conn_update>
		if (rc == 0) {
   18496:	b928      	cbnz	r0, 184a4 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   18498:	88ab      	ldrh	r3, [r5, #4]
   1849a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1849e:	88eb      	ldrh	r3, [r5, #6]
   184a0:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   184a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   184a6:	f06f 0015 	mvn.w	r0, #21
   184aa:	e7fb      	b.n	184a4 <send_conn_le_param_update+0x54>
   184ac:	200002b8 	.word	0x200002b8

000184b0 <deferred_work>:
{
   184b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   184b2:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   184b6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   184b8:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   184bc:	b993      	cbnz	r3, 184e4 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   184be:	4630      	mov	r0, r6
   184c0:	f011 ffee 	bl	2a4a0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   184c4:	4b1f      	ldr	r3, [pc, #124]	; (18544 <deferred_work+0x94>)
   184c6:	681d      	ldr	r5, [r3, #0]
   184c8:	b925      	cbnz	r5, 184d4 <deferred_work+0x24>
		bt_conn_unref(conn);
   184ca:	4630      	mov	r0, r6
   184cc:	f7ff fd5a 	bl	17f84 <bt_conn_unref>
}
   184d0:	b002      	add	sp, #8
   184d2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   184d4:	686b      	ldr	r3, [r5, #4]
   184d6:	b11b      	cbz	r3, 184e0 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   184d8:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   184dc:	4630      	mov	r0, r6
   184de:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   184e0:	69ad      	ldr	r5, [r5, #24]
   184e2:	e7f1      	b.n	184c8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   184e4:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   184e8:	2b01      	cmp	r3, #1
   184ea:	d1f1      	bne.n	184d0 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   184ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   184f0:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   184f4:	e855 3f00 	ldrex	r3, [r5]
   184f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   184fc:	e845 2100 	strex	r1, r2, [r5]
   18500:	2900      	cmp	r1, #0
   18502:	d1f7      	bne.n	184f4 <deferred_work+0x44>
   18504:	f3bf 8f5b 	dmb	ish
   18508:	059b      	lsls	r3, r3, #22
   1850a:	d514      	bpl.n	18536 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1850c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1850e:	9300      	str	r3, [sp, #0]
   18510:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18512:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   18514:	4669      	mov	r1, sp
   18516:	4630      	mov	r0, r6
   18518:	f7ff ff9a 	bl	18450 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1851c:	f3bf 8f5b 	dmb	ish
   18520:	e855 3f00 	ldrex	r3, [r5]
   18524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18528:	e845 3200 	strex	r2, r3, [r5]
   1852c:	2a00      	cmp	r2, #0
   1852e:	d1f7      	bne.n	18520 <deferred_work+0x70>
   18530:	f3bf 8f5b 	dmb	ish
   18534:	e7cc      	b.n	184d0 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   18536:	4a04      	ldr	r2, [pc, #16]	; (18548 <deferred_work+0x98>)
   18538:	6810      	ldr	r0, [r2, #0]
   1853a:	6851      	ldr	r1, [r2, #4]
   1853c:	466b      	mov	r3, sp
   1853e:	c303      	stmia	r3!, {r0, r1}
   18540:	e7e8      	b.n	18514 <deferred_work+0x64>
   18542:	bf00      	nop
   18544:	20003040 	.word	0x20003040
   18548:	0002ced8 	.word	0x0002ced8

0001854c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   1854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1854e:	4604      	mov	r4, r0
   18550:	460d      	mov	r5, r1
   18552:	4617      	mov	r7, r2
   18554:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   18556:	f014 f847 	bl	2c5e8 <k_is_in_isr>
   1855a:	b158      	cbz	r0, 18574 <bt_conn_create_pdu_timeout+0x28>
   1855c:	4913      	ldr	r1, [pc, #76]	; (185ac <bt_conn_create_pdu_timeout+0x60>)
   1855e:	4814      	ldr	r0, [pc, #80]	; (185b0 <bt_conn_create_pdu_timeout+0x64>)
   18560:	4a14      	ldr	r2, [pc, #80]	; (185b4 <bt_conn_create_pdu_timeout+0x68>)
   18562:	f640 2341 	movw	r3, #2625	; 0xa41
   18566:	f00e ffc6 	bl	274f6 <printk>
   1856a:	4812      	ldr	r0, [pc, #72]	; (185b4 <bt_conn_create_pdu_timeout+0x68>)
   1856c:	f640 2141 	movw	r1, #2625	; 0xa41
   18570:	f00f fa66 	bl	27a40 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   18574:	4810      	ldr	r0, [pc, #64]	; (185b8 <bt_conn_create_pdu_timeout+0x6c>)
   18576:	463a      	mov	r2, r7
   18578:	2c00      	cmp	r4, #0
   1857a:	bf18      	it	ne
   1857c:	4620      	movne	r0, r4
   1857e:	4633      	mov	r3, r6
   18580:	f013 fa0b 	bl	2b99a <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   18584:	4604      	mov	r4, r0
   18586:	b958      	cbnz	r0, 185a0 <bt_conn_create_pdu_timeout+0x54>
   18588:	490c      	ldr	r1, [pc, #48]	; (185bc <bt_conn_create_pdu_timeout+0x70>)
   1858a:	4b0d      	ldr	r3, [pc, #52]	; (185c0 <bt_conn_create_pdu_timeout+0x74>)
		BT_WARN("Unable to allocate buffer within timeout");
   1858c:	480d      	ldr	r0, [pc, #52]	; (185c4 <bt_conn_create_pdu_timeout+0x78>)
   1858e:	1ac9      	subs	r1, r1, r3
   18590:	08c9      	lsrs	r1, r1, #3
   18592:	0189      	lsls	r1, r1, #6
   18594:	f041 0102 	orr.w	r1, r1, #2
   18598:	f00f fa80 	bl	27a9c <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   1859c:	4620      	mov	r0, r4
   1859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   185a0:	1d29      	adds	r1, r5, #4
   185a2:	3008      	adds	r0, #8
   185a4:	f004 fef0 	bl	1d388 <net_buf_simple_reserve>
	return buf;
   185a8:	e7f8      	b.n	1859c <bt_conn_create_pdu_timeout+0x50>
   185aa:	bf00      	nop
   185ac:	0002fefb 	.word	0x0002fefb
   185b0:	0002dcd3 	.word	0x0002dcd3
   185b4:	0002fbfe 	.word	0x0002fbfe
   185b8:	20000928 	.word	0x20000928
   185bc:	0002ccd0 	.word	0x0002ccd0
   185c0:	0002ccb8 	.word	0x0002ccb8
   185c4:	0002ff0a 	.word	0x0002ff0a

000185c8 <bt_conn_create_frag_timeout>:
{
   185c8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   185ca:	4801      	ldr	r0, [pc, #4]	; (185d0 <bt_conn_create_frag_timeout+0x8>)
   185cc:	f7ff bfbe 	b.w	1854c <bt_conn_create_pdu_timeout>
   185d0:	20000980 	.word	0x20000980

000185d4 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   185d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185d8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   185da:	f04f 33ff 	mov.w	r3, #4294967295
   185de:	f04f 32ff 	mov.w	r2, #4294967295
   185e2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   185e4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   185e6:	f7ff ffef 	bl	185c8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   185ea:	7833      	ldrb	r3, [r6, #0]
   185ec:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   185ee:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   185f0:	f04f 0600 	mov.w	r6, #0
   185f4:	d005      	beq.n	18602 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   185f6:	f004 ff25 	bl	1d444 <net_buf_unref>
		return NULL;
   185fa:	4635      	mov	r5, r6
}
   185fc:	4628      	mov	r0, r5
   185fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   18602:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   18604:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   18608:	4e0c      	ldr	r6, [pc, #48]	; (1863c <create_frag.isra.0+0x68>)
   1860a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1860c:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   18610:	f013 f9d4 	bl	2b9bc <net_buf_simple_tailroom>
   18614:	4580      	cmp	r8, r0
   18616:	d20c      	bcs.n	18632 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   18618:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1861c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   18620:	4632      	mov	r2, r6
   18622:	4638      	mov	r0, r7
   18624:	f013 f9d2 	bl	2b9cc <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18628:	4631      	mov	r1, r6
   1862a:	4620      	mov	r0, r4
   1862c:	f004 fff8 	bl	1d620 <net_buf_simple_pull>
   18630:	e7e4      	b.n	185fc <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   18632:	4638      	mov	r0, r7
   18634:	f013 f9c2 	bl	2b9bc <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18638:	b286      	uxth	r6, r0
   1863a:	e7ef      	b.n	1861c <create_frag.isra.0+0x48>
   1863c:	200002b8 	.word	0x200002b8

00018640 <bt_conn_process_tx>:
{
   18640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18642:	7b43      	ldrb	r3, [r0, #13]
{
   18644:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18646:	b993      	cbnz	r3, 1866e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18648:	f3bf 8f5b 	dmb	ish
   1864c:	1d03      	adds	r3, r0, #4
   1864e:	e853 2f00 	ldrex	r2, [r3]
   18652:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18656:	e843 1400 	strex	r4, r1, [r3]
   1865a:	2c00      	cmp	r4, #0
   1865c:	d1f7      	bne.n	1864e <bt_conn_process_tx+0xe>
   1865e:	f3bf 8f5b 	dmb	ish
   18662:	0653      	lsls	r3, r2, #25
   18664:	d503      	bpl.n	1866e <bt_conn_process_tx+0x2e>
}
   18666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1866a:	f7ff bb17 	b.w	17c9c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1866e:	2200      	movs	r2, #0
   18670:	2300      	movs	r3, #0
   18672:	f105 0038 	add.w	r0, r5, #56	; 0x38
   18676:	f004 fe53 	bl	1d320 <net_buf_get>
	BT_ASSERT(buf);
   1867a:	4604      	mov	r4, r0
   1867c:	b960      	cbnz	r0, 18698 <bt_conn_process_tx+0x58>
   1867e:	4a20      	ldr	r2, [pc, #128]	; (18700 <bt_conn_process_tx+0xc0>)
   18680:	4920      	ldr	r1, [pc, #128]	; (18704 <bt_conn_process_tx+0xc4>)
   18682:	4821      	ldr	r0, [pc, #132]	; (18708 <bt_conn_process_tx+0xc8>)
   18684:	f240 23c6 	movw	r3, #710	; 0x2c6
   18688:	f00e ff35 	bl	274f6 <printk>
   1868c:	4040      	eors	r0, r0
   1868e:	f380 8811 	msr	BASEPRI, r0
   18692:	f04f 0003 	mov.w	r0, #3
   18696:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   18698:	4f1c      	ldr	r7, [pc, #112]	; (1870c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1869a:	89a1      	ldrh	r1, [r4, #12]
   1869c:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   186a0:	4291      	cmp	r1, r2
   186a2:	d807      	bhi.n	186b4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   186a4:	2300      	movs	r3, #0
   186a6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   186a8:	4621      	mov	r1, r4
   186aa:	4628      	mov	r0, r5
   186ac:	f7ff fa0e 	bl	17acc <send_frag>
	if (!send_buf(conn, buf)) {
   186b0:	b140      	cbz	r0, 186c4 <bt_conn_process_tx+0x84>
}
   186b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   186b4:	f105 060d 	add.w	r6, r5, #13
   186b8:	4621      	mov	r1, r4
   186ba:	4630      	mov	r0, r6
   186bc:	f7ff ff8a 	bl	185d4 <create_frag.isra.0>
	if (!frag) {
   186c0:	4601      	mov	r1, r0
   186c2:	b920      	cbnz	r0, 186ce <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   186c4:	4620      	mov	r0, r4
}
   186c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   186ca:	f004 bebb 	b.w	1d444 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   186ce:	2301      	movs	r3, #1
   186d0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   186d2:	4628      	mov	r0, r5
   186d4:	f7ff f9fa 	bl	17acc <send_frag>
   186d8:	2800      	cmp	r0, #0
   186da:	d0f3      	beq.n	186c4 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   186dc:	89a2      	ldrh	r2, [r4, #12]
   186de:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   186e2:	429a      	cmp	r2, r3
   186e4:	d802      	bhi.n	186ec <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   186e6:	2300      	movs	r3, #0
   186e8:	2203      	movs	r2, #3
   186ea:	e7dd      	b.n	186a8 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   186ec:	4621      	mov	r1, r4
   186ee:	4630      	mov	r0, r6
   186f0:	f7ff ff70 	bl	185d4 <create_frag.isra.0>
		if (!frag) {
   186f4:	4601      	mov	r1, r0
   186f6:	2800      	cmp	r0, #0
   186f8:	d0e4      	beq.n	186c4 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   186fa:	2301      	movs	r3, #1
   186fc:	461a      	mov	r2, r3
   186fe:	e7e8      	b.n	186d2 <bt_conn_process_tx+0x92>
   18700:	0002fbfe 	.word	0x0002fbfe
   18704:	0002f1b3 	.word	0x0002f1b3
   18708:	0002dcd3 	.word	0x0002dcd3
   1870c:	200002b8 	.word	0x200002b8

00018710 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   18710:	4b0c      	ldr	r3, [pc, #48]	; (18744 <bt_conn_auth_cb_register+0x34>)
   18712:	b908      	cbnz	r0, 18718 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   18714:	6018      	str	r0, [r3, #0]
		return 0;
   18716:	4770      	bx	lr
	}

	if (bt_auth) {
   18718:	681a      	ldr	r2, [r3, #0]
   1871a:	b962      	cbnz	r2, 18736 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1871c:	6902      	ldr	r2, [r0, #16]
   1871e:	b93a      	cbnz	r2, 18730 <bt_conn_auth_cb_register+0x20>
   18720:	6802      	ldr	r2, [r0, #0]
   18722:	b95a      	cbnz	r2, 1873c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18724:	6842      	ldr	r2, [r0, #4]
   18726:	b94a      	cbnz	r2, 1873c <bt_conn_auth_cb_register+0x2c>
   18728:	6882      	ldr	r2, [r0, #8]
   1872a:	b93a      	cbnz	r2, 1873c <bt_conn_auth_cb_register+0x2c>
   1872c:	6942      	ldr	r2, [r0, #20]
   1872e:	b92a      	cbnz	r2, 1873c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   18730:	6018      	str	r0, [r3, #0]
	return 0;
   18732:	2000      	movs	r0, #0
   18734:	4770      	bx	lr
		return -EALREADY;
   18736:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1873a:	4770      	bx	lr
		return -EINVAL;
   1873c:	f06f 0015 	mvn.w	r0, #21
}
   18740:	4770      	bx	lr
   18742:	bf00      	nop
   18744:	2000303c 	.word	0x2000303c

00018748 <bt_conn_auth_passkey_confirm>:
	return -EINVAL;
}

int bt_conn_auth_passkey_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   18748:	4a05      	ldr	r2, [pc, #20]	; (18760 <bt_conn_auth_passkey_confirm+0x18>)
   1874a:	6812      	ldr	r2, [r2, #0]
   1874c:	b122      	cbz	r2, 18758 <bt_conn_auth_passkey_confirm+0x10>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1874e:	7883      	ldrb	r3, [r0, #2]
   18750:	2b01      	cmp	r3, #1
   18752:	d101      	bne.n	18758 <bt_conn_auth_passkey_confirm+0x10>
	    conn->type == BT_CONN_TYPE_LE) {
		return bt_smp_auth_passkey_confirm(conn);
   18754:	f013 b865 	b.w	2b822 <bt_smp_auth_passkey_confirm>
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_ssp_auth_passkey_confirm(conn);
	}

	return -EINVAL;
}
   18758:	f06f 0015 	mvn.w	r0, #21
   1875c:	4770      	bx	lr
   1875e:	bf00      	nop
   18760:	2000303c 	.word	0x2000303c

00018764 <bt_conn_auth_cancel>:

int bt_conn_auth_cancel(struct bt_conn *conn)
{
	if (!bt_auth) {
   18764:	4a05      	ldr	r2, [pc, #20]	; (1877c <bt_conn_auth_cancel+0x18>)
   18766:	6812      	ldr	r2, [r2, #0]
   18768:	b122      	cbz	r2, 18774 <bt_conn_auth_cancel+0x10>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) && conn->type == BT_CONN_TYPE_LE) {
   1876a:	7883      	ldrb	r3, [r0, #2]
   1876c:	2b01      	cmp	r3, #1
   1876e:	d101      	bne.n	18774 <bt_conn_auth_cancel+0x10>
		return bt_smp_auth_cancel(conn);
   18770:	f003 befc 	b.w	1c56c <bt_smp_auth_cancel>
		return bt_ssp_auth_cancel(conn);
	}
#endif /* CONFIG_BT_BREDR */

	return -EINVAL;
}
   18774:	f06f 0015 	mvn.w	r0, #21
   18778:	4770      	bx	lr
   1877a:	bf00      	nop
   1877c:	2000303c 	.word	0x2000303c

00018780 <bt_conn_auth_pairing_confirm>:

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   18780:	4a05      	ldr	r2, [pc, #20]	; (18798 <bt_conn_auth_pairing_confirm+0x18>)
   18782:	6812      	ldr	r2, [r2, #0]
   18784:	b122      	cbz	r2, 18790 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
   18786:	7883      	ldrb	r3, [r0, #2]
   18788:	2b01      	cmp	r3, #1
   1878a:	d101      	bne.n	18790 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
   1878c:	f012 bfea 	b.w	2b764 <bt_smp_auth_pairing_confirm>
		return bt_ssp_auth_pairing_confirm(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
   18790:	f06f 0015 	mvn.w	r0, #21
   18794:	4770      	bx	lr
   18796:	bf00      	nop
   18798:	2000303c 	.word	0x2000303c

0001879c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1879c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1879e:	490b      	ldr	r1, [pc, #44]	; (187cc <bt_conn_init+0x30>)
   187a0:	480b      	ldr	r0, [pc, #44]	; (187d0 <bt_conn_init+0x34>)
   187a2:	f013 ff55 	bl	2c650 <k_queue_append>
   187a6:	490b      	ldr	r1, [pc, #44]	; (187d4 <bt_conn_init+0x38>)
   187a8:	4809      	ldr	r0, [pc, #36]	; (187d0 <bt_conn_init+0x34>)
   187aa:	f013 ff51 	bl	2c650 <k_queue_append>
   187ae:	490a      	ldr	r1, [pc, #40]	; (187d8 <bt_conn_init+0x3c>)
   187b0:	4807      	ldr	r0, [pc, #28]	; (187d0 <bt_conn_init+0x34>)
   187b2:	f013 ff4d 	bl	2c650 <k_queue_append>
	}

	bt_att_init();
   187b6:	f012 fa2a 	bl	2ac0e <bt_att_init>

	err = bt_smp_init();
   187ba:	f004 faf1 	bl	1cda0 <bt_smp_init>
	if (err) {
   187be:	4604      	mov	r4, r0
   187c0:	b908      	cbnz	r0, 187c6 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   187c2:	f011 fed9 	bl	2a578 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   187c6:	4620      	mov	r0, r4
   187c8:	bd10      	pop	{r4, pc}
   187ca:	bf00      	nop
   187cc:	20003044 	.word	0x20003044
   187d0:	2000090c 	.word	0x2000090c
   187d4:	20003054 	.word	0x20003054
   187d8:	20003064 	.word	0x20003064

000187dc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   187dc:	4a0b      	ldr	r2, [pc, #44]	; (1880c <l2cap_accept+0x30>)
{
   187de:	b508      	push	{r3, lr}
   187e0:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   187e2:	6810      	ldr	r0, [r2, #0]
   187e4:	b918      	cbnz	r0, 187ee <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   187e6:	4b0a      	ldr	r3, [pc, #40]	; (18810 <l2cap_accept+0x34>)
   187e8:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   187ea:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   187ec:	bd08      	pop	{r3, pc}
   187ee:	4909      	ldr	r1, [pc, #36]	; (18814 <l2cap_accept+0x38>)
   187f0:	4a09      	ldr	r2, [pc, #36]	; (18818 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   187f2:	480a      	ldr	r0, [pc, #40]	; (1881c <l2cap_accept+0x40>)
   187f4:	1a52      	subs	r2, r2, r1
   187f6:	08d2      	lsrs	r2, r2, #3
   187f8:	0192      	lsls	r2, r2, #6
   187fa:	f042 0201 	orr.w	r2, r2, #1
   187fe:	4619      	mov	r1, r3
   18800:	f00f f959 	bl	27ab6 <log_1>
	return -ENOMEM;
   18804:	f06f 000b 	mvn.w	r0, #11
   18808:	e7f0      	b.n	187ec <l2cap_accept+0x10>
   1880a:	bf00      	nop
   1880c:	20001918 	.word	0x20001918
   18810:	0002d3ac 	.word	0x0002d3ac
   18814:	0002ccb8 	.word	0x0002ccb8
   18818:	0002cd08 	.word	0x0002cd08
   1881c:	0002ff90 	.word	0x0002ff90

00018820 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18822:	4605      	mov	r5, r0
   18824:	460f      	mov	r7, r1
   18826:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18828:	2300      	movs	r3, #0
   1882a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1882e:	2104      	movs	r1, #4
   18830:	2000      	movs	r0, #0
   18832:	f7ff fe8b 	bl	1854c <bt_conn_create_pdu_timeout>
	if (!buf) {
   18836:	4604      	mov	r4, r0
   18838:	b960      	cbnz	r0, 18854 <l2cap_create_le_sig_pdu.isra.0+0x34>
   1883a:	4a0a      	ldr	r2, [pc, #40]	; (18864 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   1883c:	4b0a      	ldr	r3, [pc, #40]	; (18868 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1883e:	480b      	ldr	r0, [pc, #44]	; (1886c <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   18840:	1ad2      	subs	r2, r2, r3
   18842:	08d2      	lsrs	r2, r2, #3
   18844:	0192      	lsls	r2, r2, #6
   18846:	f042 0201 	orr.w	r2, r2, #1
   1884a:	4629      	mov	r1, r5
   1884c:	f00f f933 	bl	27ab6 <log_1>
}
   18850:	4620      	mov	r0, r4
   18852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   18854:	2104      	movs	r1, #4
   18856:	3008      	adds	r0, #8
   18858:	f004 ff24 	bl	1d6a4 <net_buf_simple_add>
	hdr->code = code;
   1885c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1885e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18860:	8046      	strh	r6, [r0, #2]
	return buf;
   18862:	e7f5      	b.n	18850 <l2cap_create_le_sig_pdu.isra.0+0x30>
   18864:	0002cd08 	.word	0x0002cd08
   18868:	0002ccb8 	.word	0x0002ccb8
   1886c:	0002ffb7 	.word	0x0002ffb7

00018870 <l2cap_rtx_timeout>:
{
   18870:	b538      	push	{r3, r4, r5, lr}
   18872:	4a0b      	ldr	r2, [pc, #44]	; (188a0 <l2cap_rtx_timeout+0x30>)
   18874:	4b0b      	ldr	r3, [pc, #44]	; (188a4 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   18876:	4604      	mov	r4, r0
   18878:	1ad2      	subs	r2, r2, r3
   1887a:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1887e:	480a      	ldr	r0, [pc, #40]	; (188a8 <l2cap_rtx_timeout+0x38>)
   18880:	08d2      	lsrs	r2, r2, #3
   18882:	0192      	lsls	r2, r2, #6
   18884:	4621      	mov	r1, r4
   18886:	f042 0201 	orr.w	r2, r2, #1
   1888a:	f00f f914 	bl	27ab6 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1888e:	4628      	mov	r0, r5
   18890:	4621      	mov	r1, r4
   18892:	f011 fdce 	bl	2a432 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18896:	4620      	mov	r0, r4
}
   18898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   1889c:	f011 bdeb 	b.w	2a476 <bt_l2cap_chan_del>
   188a0:	0002cd08 	.word	0x0002cd08
   188a4:	0002ccb8 	.word	0x0002ccb8
   188a8:	0002ffdf 	.word	0x0002ffdf

000188ac <bt_l2cap_connected>:
{
   188ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   188b0:	4f32      	ldr	r7, [pc, #200]	; (1897c <bt_l2cap_connected+0xd0>)
   188b2:	4e33      	ldr	r6, [pc, #204]	; (18980 <bt_l2cap_connected+0xd4>)
   188b4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 18994 <bt_l2cap_connected+0xe8>
{
   188b8:	4604      	mov	r4, r0
   188ba:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   188bc:	42be      	cmp	r6, r7
   188be:	d90e      	bls.n	188de <bt_l2cap_connected+0x32>
   188c0:	4930      	ldr	r1, [pc, #192]	; (18984 <bt_l2cap_connected+0xd8>)
   188c2:	4831      	ldr	r0, [pc, #196]	; (18988 <bt_l2cap_connected+0xdc>)
   188c4:	f240 1365 	movw	r3, #357	; 0x165
   188c8:	4642      	mov	r2, r8
   188ca:	f00e fe14 	bl	274f6 <printk>
   188ce:	482f      	ldr	r0, [pc, #188]	; (1898c <bt_l2cap_connected+0xe0>)
   188d0:	f00e fe11 	bl	274f6 <printk>
   188d4:	f240 1165 	movw	r1, #357	; 0x165
   188d8:	4640      	mov	r0, r8
   188da:	f00f f8b1 	bl	27a40 <assert_post_action>
   188de:	454e      	cmp	r6, r9
   188e0:	d302      	bcc.n	188e8 <bt_l2cap_connected+0x3c>
}
   188e2:	b002      	add	sp, #8
   188e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   188e8:	6873      	ldr	r3, [r6, #4]
   188ea:	a901      	add	r1, sp, #4
   188ec:	4620      	mov	r0, r4
   188ee:	4798      	blx	r3
   188f0:	2800      	cmp	r0, #0
   188f2:	db3d      	blt.n	18970 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   188f4:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   188f6:	8833      	ldrh	r3, [r6, #0]
   188f8:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   188fc:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   18900:	4923      	ldr	r1, [pc, #140]	; (18990 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18902:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   18906:	f105 0010 	add.w	r0, r5, #16
   1890a:	f009 fc2f 	bl	2216c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1890e:	f3bf 8f5b 	dmb	ish
   18912:	f105 0368 	add.w	r3, r5, #104	; 0x68
   18916:	2200      	movs	r2, #0
   18918:	e853 1f00 	ldrex	r1, [r3]
   1891c:	e843 2000 	strex	r0, r2, [r3]
   18920:	2800      	cmp	r0, #0
   18922:	d1f9      	bne.n	18918 <bt_l2cap_connected+0x6c>
   18924:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   18928:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1892a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1892c:	f105 0308 	add.w	r3, r5, #8
   18930:	bb02      	cbnz	r2, 18974 <bt_l2cap_connected+0xc8>
	list->head = node;
   18932:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   18936:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18938:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1893a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1893c:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   18940:	681b      	ldr	r3, [r3, #0]
   18942:	b103      	cbz	r3, 18946 <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   18944:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18946:	9b01      	ldr	r3, [sp, #4]
   18948:	f3bf 8f5b 	dmb	ish
   1894c:	3368      	adds	r3, #104	; 0x68
   1894e:	e853 2f00 	ldrex	r2, [r3]
   18952:	f042 0201 	orr.w	r2, r2, #1
   18956:	e843 2100 	strex	r1, r2, [r3]
   1895a:	2900      	cmp	r1, #0
   1895c:	d1f7      	bne.n	1894e <bt_l2cap_connected+0xa2>
   1895e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18962:	9801      	ldr	r0, [sp, #4]
   18964:	6843      	ldr	r3, [r0, #4]
   18966:	699b      	ldr	r3, [r3, #24]
   18968:	b113      	cbz	r3, 18970 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   1896a:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1896e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18970:	360c      	adds	r6, #12
   18972:	e7a3      	b.n	188bc <bt_l2cap_connected+0x10>
	parent->next = child;
   18974:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18976:	65a3      	str	r3, [r4, #88]	; 0x58
}
   18978:	e7dd      	b.n	18936 <bt_l2cap_connected+0x8a>
   1897a:	bf00      	nop
   1897c:	0002cc28 	.word	0x0002cc28
   18980:	0002cc04 	.word	0x0002cc04
   18984:	00030020 	.word	0x00030020
   18988:	0002dcd3 	.word	0x0002dcd3
   1898c:	0002e3f4 	.word	0x0002e3f4
   18990:	00018871 	.word	0x00018871
   18994:	0002ffef 	.word	0x0002ffef

00018998 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   18998:	898b      	ldrh	r3, [r1, #12]
   1899a:	2b03      	cmp	r3, #3
{
   1899c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1899e:	4606      	mov	r6, r0
   189a0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   189a2:	d80a      	bhi.n	189ba <l2cap_recv+0x22>
   189a4:	4931      	ldr	r1, [pc, #196]	; (18a6c <l2cap_recv+0xd4>)
   189a6:	4b32      	ldr	r3, [pc, #200]	; (18a70 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   189a8:	4832      	ldr	r0, [pc, #200]	; (18a74 <l2cap_recv+0xdc>)
   189aa:	1ac9      	subs	r1, r1, r3
   189ac:	08c9      	lsrs	r1, r1, #3
   189ae:	0189      	lsls	r1, r1, #6
   189b0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   189b4:	f00f f872 	bl	27a9c <log_0>
		return 0;
   189b8:	e013      	b.n	189e2 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   189ba:	2104      	movs	r1, #4
   189bc:	f105 0008 	add.w	r0, r5, #8
   189c0:	f004 fe4e 	bl	1d660 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   189c4:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   189c6:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   189c8:	428a      	cmp	r2, r1
   189ca:	4604      	mov	r4, r0
   189cc:	d00c      	beq.n	189e8 <l2cap_recv+0x50>
   189ce:	4828      	ldr	r0, [pc, #160]	; (18a70 <l2cap_recv+0xd8>)
   189d0:	4b26      	ldr	r3, [pc, #152]	; (18a6c <l2cap_recv+0xd4>)
   189d2:	1a1b      	subs	r3, r3, r0
   189d4:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   189d6:	019b      	lsls	r3, r3, #6
   189d8:	4827      	ldr	r0, [pc, #156]	; (18a78 <l2cap_recv+0xe0>)
   189da:	f043 0301 	orr.w	r3, r3, #1
   189de:	f00f f87e 	bl	27ade <log_2>
}
   189e2:	2000      	movs	r0, #0
   189e4:	b002      	add	sp, #8
   189e6:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   189e8:	7843      	ldrb	r3, [r0, #1]
   189ea:	b943      	cbnz	r3, 189fe <l2cap_recv+0x66>
   189ec:	491f      	ldr	r1, [pc, #124]	; (18a6c <l2cap_recv+0xd4>)
   189ee:	4b20      	ldr	r3, [pc, #128]	; (18a70 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   189f0:	4822      	ldr	r0, [pc, #136]	; (18a7c <l2cap_recv+0xe4>)
   189f2:	1ac9      	subs	r1, r1, r3
   189f4:	08c9      	lsrs	r1, r1, #3
   189f6:	0189      	lsls	r1, r1, #6
   189f8:	f041 0101 	orr.w	r1, r1, #1
   189fc:	e7da      	b.n	189b4 <l2cap_recv+0x1c>
	switch (hdr->code) {
   189fe:	7801      	ldrb	r1, [r0, #0]
   18a00:	2901      	cmp	r1, #1
   18a02:	d0ee      	beq.n	189e2 <l2cap_recv+0x4a>
   18a04:	2913      	cmp	r1, #19
   18a06:	d10a      	bne.n	18a1e <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   18a08:	2a01      	cmp	r2, #1
   18a0a:	d8ea      	bhi.n	189e2 <l2cap_recv+0x4a>
   18a0c:	4917      	ldr	r1, [pc, #92]	; (18a6c <l2cap_recv+0xd4>)
   18a0e:	4b18      	ldr	r3, [pc, #96]	; (18a70 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   18a10:	481b      	ldr	r0, [pc, #108]	; (18a80 <l2cap_recv+0xe8>)
   18a12:	1ac9      	subs	r1, r1, r3
   18a14:	08c9      	lsrs	r1, r1, #3
   18a16:	0189      	lsls	r1, r1, #6
   18a18:	f041 0101 	orr.w	r1, r1, #1
   18a1c:	e7ca      	b.n	189b4 <l2cap_recv+0x1c>
   18a1e:	4b14      	ldr	r3, [pc, #80]	; (18a70 <l2cap_recv+0xd8>)
   18a20:	4a12      	ldr	r2, [pc, #72]	; (18a6c <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18a22:	4818      	ldr	r0, [pc, #96]	; (18a84 <l2cap_recv+0xec>)
   18a24:	1ad2      	subs	r2, r2, r3
   18a26:	08d2      	lsrs	r2, r2, #3
   18a28:	0192      	lsls	r2, r2, #6
   18a2a:	f042 0202 	orr.w	r2, r2, #2
   18a2e:	f00f f842 	bl	27ab6 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18a32:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   18a34:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18a36:	2202      	movs	r2, #2
   18a38:	2001      	movs	r0, #1
   18a3a:	f7ff fef1 	bl	18820 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   18a3e:	4604      	mov	r4, r0
   18a40:	2800      	cmp	r0, #0
   18a42:	d0ce      	beq.n	189e2 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18a44:	2102      	movs	r1, #2
   18a46:	3008      	adds	r0, #8
   18a48:	f004 fe2c 	bl	1d6a4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18a4c:	2300      	movs	r3, #0
   18a4e:	7003      	strb	r3, [r0, #0]
   18a50:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18a52:	4622      	mov	r2, r4
   18a54:	9300      	str	r3, [sp, #0]
   18a56:	2105      	movs	r1, #5
   18a58:	4628      	mov	r0, r5
   18a5a:	f011 fd54 	bl	2a506 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18a5e:	2800      	cmp	r0, #0
   18a60:	d0bf      	beq.n	189e2 <l2cap_recv+0x4a>
		net_buf_unref(buf);
   18a62:	4620      	mov	r0, r4
   18a64:	f004 fcee 	bl	1d444 <net_buf_unref>
   18a68:	e7bb      	b.n	189e2 <l2cap_recv+0x4a>
   18a6a:	bf00      	nop
   18a6c:	0002cd08 	.word	0x0002cd08
   18a70:	0002ccb8 	.word	0x0002ccb8
   18a74:	00030047 	.word	0x00030047
   18a78:	00030065 	.word	0x00030065
   18a7c:	00030086 	.word	0x00030086
   18a80:	000300a7 	.word	0x000300a7
   18a84:	000300c3 	.word	0x000300c3

00018a88 <bt_l2cap_recv>:
{
   18a88:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   18a8a:	898b      	ldrh	r3, [r1, #12]
   18a8c:	2b03      	cmp	r3, #3
{
   18a8e:	4605      	mov	r5, r0
   18a90:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18a92:	d80e      	bhi.n	18ab2 <bt_l2cap_recv+0x2a>
   18a94:	4914      	ldr	r1, [pc, #80]	; (18ae8 <bt_l2cap_recv+0x60>)
   18a96:	4b15      	ldr	r3, [pc, #84]	; (18aec <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   18a98:	4815      	ldr	r0, [pc, #84]	; (18af0 <bt_l2cap_recv+0x68>)
   18a9a:	1ac9      	subs	r1, r1, r3
   18a9c:	08c9      	lsrs	r1, r1, #3
   18a9e:	0189      	lsls	r1, r1, #6
   18aa0:	f041 0101 	orr.w	r1, r1, #1
   18aa4:	f00e fffa 	bl	27a9c <log_0>
	net_buf_unref(buf);
   18aa8:	4620      	mov	r0, r4
}
   18aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   18aae:	f004 bcc9 	b.w	1d444 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   18ab2:	2104      	movs	r1, #4
   18ab4:	f104 0008 	add.w	r0, r4, #8
   18ab8:	f004 fdd2 	bl	1d660 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18abc:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18abe:	4628      	mov	r0, r5
   18ac0:	f011 fd4a 	bl	2a558 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18ac4:	b950      	cbnz	r0, 18adc <bt_l2cap_recv+0x54>
   18ac6:	4b09      	ldr	r3, [pc, #36]	; (18aec <bt_l2cap_recv+0x64>)
   18ac8:	4a07      	ldr	r2, [pc, #28]	; (18ae8 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   18aca:	480a      	ldr	r0, [pc, #40]	; (18af4 <bt_l2cap_recv+0x6c>)
   18acc:	1ad2      	subs	r2, r2, r3
   18ace:	08d2      	lsrs	r2, r2, #3
   18ad0:	0192      	lsls	r2, r2, #6
   18ad2:	f042 0202 	orr.w	r2, r2, #2
   18ad6:	f00e ffee 	bl	27ab6 <log_1>
		net_buf_unref(buf);
   18ada:	e7e5      	b.n	18aa8 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   18adc:	6843      	ldr	r3, [r0, #4]
   18ade:	4621      	mov	r1, r4
   18ae0:	691b      	ldr	r3, [r3, #16]
   18ae2:	4798      	blx	r3
   18ae4:	e7e0      	b.n	18aa8 <bt_l2cap_recv+0x20>
   18ae6:	bf00      	nop
   18ae8:	0002cd08 	.word	0x0002cd08
   18aec:	0002ccb8 	.word	0x0002ccb8
   18af0:	000300e1 	.word	0x000300e1
   18af4:	000300fe 	.word	0x000300fe

00018af8 <bt_l2cap_update_conn_param>:
{
   18af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   18afa:	4b17      	ldr	r3, [pc, #92]	; (18b58 <bt_l2cap_update_conn_param+0x60>)
   18afc:	781a      	ldrb	r2, [r3, #0]
   18afe:	3201      	adds	r2, #1
	if (!ident) {
   18b00:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   18b04:	bf08      	it	eq
   18b06:	2201      	moveq	r2, #1
   18b08:	701a      	strb	r2, [r3, #0]
{
   18b0a:	4606      	mov	r6, r0
   18b0c:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18b0e:	2208      	movs	r2, #8
   18b10:	7819      	ldrb	r1, [r3, #0]
   18b12:	2012      	movs	r0, #18
   18b14:	f7ff fe84 	bl	18820 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   18b18:	4604      	mov	r4, r0
   18b1a:	b1d0      	cbz	r0, 18b52 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   18b1c:	2108      	movs	r1, #8
   18b1e:	4408      	add	r0, r1
   18b20:	f004 fdc0 	bl	1d6a4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18b24:	882b      	ldrh	r3, [r5, #0]
   18b26:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18b28:	886b      	ldrh	r3, [r5, #2]
   18b2a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18b2c:	88ab      	ldrh	r3, [r5, #4]
   18b2e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18b30:	88eb      	ldrh	r3, [r5, #6]
   18b32:	80c3      	strh	r3, [r0, #6]
   18b34:	2300      	movs	r3, #0
   18b36:	9300      	str	r3, [sp, #0]
   18b38:	4622      	mov	r2, r4
   18b3a:	2105      	movs	r1, #5
   18b3c:	4630      	mov	r0, r6
   18b3e:	f011 fce2 	bl	2a506 <bt_l2cap_send_cb>
	if (err) {
   18b42:	4605      	mov	r5, r0
   18b44:	b110      	cbz	r0, 18b4c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18b46:	4620      	mov	r0, r4
   18b48:	f004 fc7c 	bl	1d444 <net_buf_unref>
}
   18b4c:	4628      	mov	r0, r5
   18b4e:	b002      	add	sp, #8
   18b50:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18b52:	f06f 050b 	mvn.w	r5, #11
   18b56:	e7f9      	b.n	18b4c <bt_l2cap_update_conn_param+0x54>
   18b58:	20003eaf 	.word	0x20003eaf

00018b5c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   18b5c:	4b02      	ldr	r3, [pc, #8]	; (18b68 <att_cfm_sent+0xc>)
   18b5e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   18b62:	f011 bd37 	b.w	2a5d4 <att_sent>
   18b66:	bf00      	nop
   18b68:	0002a955 	.word	0x0002a955

00018b6c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   18b6c:	4b02      	ldr	r3, [pc, #8]	; (18b78 <att_rsp_sent+0xc>)
   18b6e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   18b72:	f011 bd2f 	b.w	2a5d4 <att_sent>
   18b76:	bf00      	nop
   18b78:	0002a939 	.word	0x0002a939

00018b7c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   18b7c:	4b02      	ldr	r3, [pc, #8]	; (18b88 <att_req_sent+0xc>)
   18b7e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   18b82:	f011 bd27 	b.w	2a5d4 <att_sent>
   18b86:	bf00      	nop
   18b88:	0002a91f 	.word	0x0002a91f

00018b8c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   18b8c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18b8e:	3808      	subs	r0, #8
   18b90:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18b92:	a901      	add	r1, sp, #4
   18b94:	4802      	ldr	r0, [pc, #8]	; (18ba0 <bt_att_released+0x14>)
   18b96:	f008 f9ad 	bl	20ef4 <k_mem_slab_free>
}
   18b9a:	b003      	add	sp, #12
   18b9c:	f85d fb04 	ldr.w	pc, [sp], #4
   18ba0:	20000760 	.word	0x20000760

00018ba4 <read_group_cb>:
{
   18ba4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18ba8:	4606      	mov	r6, r0
   18baa:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18bac:	f04f 0800 	mov.w	r8, #0
   18bb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18bb4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   18bb6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18bb8:	f88d 8008 	strb.w	r8, [sp, #8]
   18bbc:	a902      	add	r1, sp, #8
{
   18bbe:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18bc0:	f8ad 300a 	strh.w	r3, [sp, #10]
   18bc4:	f011 f817 	bl	29bf6 <bt_uuid_cmp>
   18bc8:	b1a0      	cbz	r0, 18bf4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18bca:	f642 0301 	movw	r3, #10241	; 0x2801
   18bce:	6830      	ldr	r0, [r6, #0]
   18bd0:	f88d 800c 	strb.w	r8, [sp, #12]
   18bd4:	a903      	add	r1, sp, #12
   18bd6:	f8ad 300e 	strh.w	r3, [sp, #14]
   18bda:	f011 f80c 	bl	29bf6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18bde:	b148      	cbz	r0, 18bf4 <read_group_cb+0x50>
		if (data->group &&
   18be0:	6923      	ldr	r3, [r4, #16]
   18be2:	b11b      	cbz	r3, 18bec <read_group_cb+0x48>
   18be4:	885a      	ldrh	r2, [r3, #2]
   18be6:	42aa      	cmp	r2, r5
   18be8:	d200      	bcs.n	18bec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18bea:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18bec:	2001      	movs	r0, #1
}
   18bee:	b004      	add	sp, #16
   18bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18bf4:	6861      	ldr	r1, [r4, #4]
   18bf6:	6830      	ldr	r0, [r6, #0]
   18bf8:	f010 fffd 	bl	29bf6 <bt_uuid_cmp>
   18bfc:	b110      	cbz	r0, 18c04 <read_group_cb+0x60>
		data->group = NULL;
   18bfe:	2300      	movs	r3, #0
   18c00:	6123      	str	r3, [r4, #16]
   18c02:	e7f3      	b.n	18bec <read_group_cb+0x48>
	if (data->rsp->len &&
   18c04:	68e3      	ldr	r3, [r4, #12]
   18c06:	68a0      	ldr	r0, [r4, #8]
   18c08:	781a      	ldrb	r2, [r3, #0]
   18c0a:	b13a      	cbz	r2, 18c1c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18c0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   18c10:	8981      	ldrh	r1, [r0, #12]
   18c12:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18c14:	4293      	cmp	r3, r2
   18c16:	da01      	bge.n	18c1c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   18c18:	2000      	movs	r0, #0
   18c1a:	e7e8      	b.n	18bee <read_group_cb+0x4a>
   18c1c:	2104      	movs	r1, #4
   18c1e:	3008      	adds	r0, #8
   18c20:	f004 fd40 	bl	1d6a4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18c24:	4b09      	ldr	r3, [pc, #36]	; (18c4c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18c26:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18c28:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18c2a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18c2c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18c2e:	4631      	mov	r1, r6
   18c30:	9300      	str	r3, [sp, #0]
   18c32:	9401      	str	r4, [sp, #4]
   18c34:	2300      	movs	r3, #0
   18c36:	4638      	mov	r0, r7
   18c38:	f011 fd1c 	bl	2a674 <att_chan_read>
	if (read < 0) {
   18c3c:	2800      	cmp	r0, #0
   18c3e:	dbeb      	blt.n	18c18 <read_group_cb+0x74>
	if (!data->group) {
   18c40:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   18c42:	3800      	subs	r0, #0
   18c44:	bf18      	it	ne
   18c46:	2001      	movne	r0, #1
   18c48:	e7d1      	b.n	18bee <read_group_cb+0x4a>
   18c4a:	bf00      	nop
   18c4c:	0002a899 	.word	0x0002a899

00018c50 <read_type_cb>:
{
   18c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   18c54:	f8d2 8000 	ldr.w	r8, [r2]
{
   18c58:	4606      	mov	r6, r0
   18c5a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18c5c:	6800      	ldr	r0, [r0, #0]
   18c5e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   18c60:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   18c64:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18c66:	f010 ffc6 	bl	29bf6 <bt_uuid_cmp>
   18c6a:	4607      	mov	r7, r0
   18c6c:	2800      	cmp	r0, #0
   18c6e:	d13e      	bne.n	18cee <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18c70:	4628      	mov	r0, r5
   18c72:	2215      	movs	r2, #21
   18c74:	4631      	mov	r1, r6
   18c76:	f012 fa26 	bl	2b0c6 <bt_gatt_check_perm>
   18c7a:	4605      	mov	r5, r0
   18c7c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18c7e:	b148      	cbz	r0, 18c94 <read_type_cb+0x44>
		if (data->rsp->len) {
   18c80:	68e3      	ldr	r3, [r4, #12]
   18c82:	781b      	ldrb	r3, [r3, #0]
   18c84:	b923      	cbnz	r3, 18c90 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   18c86:	2500      	movs	r5, #0
}
   18c88:	4628      	mov	r0, r5
   18c8a:	b003      	add	sp, #12
   18c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   18c90:	7527      	strb	r7, [r4, #20]
   18c92:	e7f8      	b.n	18c86 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18c94:	68a0      	ldr	r0, [r4, #8]
   18c96:	f004 fc35 	bl	1d504 <net_buf_frag_last>
   18c9a:	2102      	movs	r1, #2
   18c9c:	3008      	adds	r0, #8
   18c9e:	f004 fd01 	bl	1d6a4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18ca2:	4b14      	ldr	r3, [pc, #80]	; (18cf4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18ca4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18ca6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   18ca8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18cac:	4631      	mov	r1, r6
   18cae:	9300      	str	r3, [sp, #0]
   18cb0:	9401      	str	r4, [sp, #4]
   18cb2:	462b      	mov	r3, r5
   18cb4:	4640      	mov	r0, r8
   18cb6:	f011 fcdd 	bl	2a674 <att_chan_read>
	if (read < 0) {
   18cba:	2800      	cmp	r0, #0
   18cbc:	da07      	bge.n	18cce <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   18cbe:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18cc2:	bf26      	itte	cs
   18cc4:	4240      	negcs	r0, r0
   18cc6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18cc8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18cca:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18ccc:	e7dc      	b.n	18c88 <read_type_cb+0x38>
	if (!data->item) {
   18cce:	6923      	ldr	r3, [r4, #16]
   18cd0:	2b00      	cmp	r3, #0
   18cd2:	d0d8      	beq.n	18c86 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18cd4:	68a0      	ldr	r0, [r4, #8]
   18cd6:	f011 fc75 	bl	2a5c4 <net_buf_frags_len>
   18cda:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18cde:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18ce0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18ce2:	7818      	ldrb	r0, [r3, #0]
   18ce4:	4285      	cmp	r5, r0
   18ce6:	bf94      	ite	ls
   18ce8:	2500      	movls	r5, #0
   18cea:	2501      	movhi	r5, #1
   18cec:	e7cc      	b.n	18c88 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   18cee:	2501      	movs	r5, #1
   18cf0:	e7ca      	b.n	18c88 <read_type_cb+0x38>
   18cf2:	bf00      	nop
   18cf4:	0002a5e1 	.word	0x0002a5e1

00018cf8 <find_type_cb>:
{
   18cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   18cfc:	f8d2 9000 	ldr.w	r9, [r2]
{
   18d00:	b091      	sub	sp, #68	; 0x44
   18d02:	4607      	mov	r7, r0
   18d04:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18d06:	2500      	movs	r5, #0
   18d08:	f642 0301 	movw	r3, #10241	; 0x2801
   18d0c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18d0e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18d12:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18d16:	a90b      	add	r1, sp, #44	; 0x2c
{
   18d18:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18d1a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18d1e:	f010 ff6a 	bl	29bf6 <bt_uuid_cmp>
   18d22:	2800      	cmp	r0, #0
   18d24:	d066      	beq.n	18df4 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18d26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18d2a:	6838      	ldr	r0, [r7, #0]
   18d2c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18d30:	a90b      	add	r1, sp, #44	; 0x2c
   18d32:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18d36:	f010 ff5e 	bl	29bf6 <bt_uuid_cmp>
   18d3a:	b138      	cbz	r0, 18d4c <find_type_cb+0x54>
		if (data->group &&
   18d3c:	68a3      	ldr	r3, [r4, #8]
   18d3e:	b11b      	cbz	r3, 18d48 <find_type_cb+0x50>
   18d40:	885a      	ldrh	r2, [r3, #2]
   18d42:	42b2      	cmp	r2, r6
   18d44:	d200      	bcs.n	18d48 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18d46:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18d48:	2001      	movs	r0, #1
   18d4a:	e009      	b.n	18d60 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18d4c:	6861      	ldr	r1, [r4, #4]
   18d4e:	4608      	mov	r0, r1
   18d50:	f011 fc38 	bl	2a5c4 <net_buf_frags_len>
   18d54:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   18d58:	1a1b      	subs	r3, r3, r0
   18d5a:	2b03      	cmp	r3, #3
   18d5c:	d803      	bhi.n	18d66 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   18d5e:	2000      	movs	r0, #0
}
   18d60:	b011      	add	sp, #68	; 0x44
   18d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   18d66:	4608      	mov	r0, r1
   18d68:	f004 fbcc 	bl	1d504 <net_buf_frag_last>
   18d6c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18d6e:	6860      	ldr	r0, [r4, #4]
   18d70:	f011 fc28 	bl	2a5c4 <net_buf_frags_len>
   18d74:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   18d78:	f105 0b08 	add.w	fp, r5, #8
   18d7c:	ebaa 0a00 	sub.w	sl, sl, r0
   18d80:	4658      	mov	r0, fp
   18d82:	f012 fe1b 	bl	2b9bc <net_buf_simple_tailroom>
   18d86:	4582      	cmp	sl, r0
   18d88:	d237      	bcs.n	18dfa <find_type_cb+0x102>
   18d8a:	6860      	ldr	r0, [r4, #4]
   18d8c:	f011 fc1a 	bl	2a5c4 <net_buf_frags_len>
   18d90:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   18d94:	1a18      	subs	r0, r3, r0
	if (!len) {
   18d96:	b970      	cbnz	r0, 18db6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18d98:	6863      	ldr	r3, [r4, #4]
   18d9a:	7998      	ldrb	r0, [r3, #6]
   18d9c:	f004 f9b2 	bl	1d104 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18da0:	2200      	movs	r2, #0
   18da2:	2300      	movs	r3, #0
   18da4:	f012 fdf9 	bl	2b99a <net_buf_alloc_fixed>
		if (!frag) {
   18da8:	4605      	mov	r5, r0
   18daa:	2800      	cmp	r0, #0
   18dac:	d0d7      	beq.n	18d5e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   18dae:	4601      	mov	r1, r0
   18db0:	6860      	ldr	r0, [r4, #4]
   18db2:	f004 fbef 	bl	1d594 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18db6:	2300      	movs	r3, #0
   18db8:	9300      	str	r3, [sp, #0]
   18dba:	f8d7 9004 	ldr.w	r9, [r7, #4]
   18dbe:	4639      	mov	r1, r7
   18dc0:	2310      	movs	r3, #16
   18dc2:	aa02      	add	r2, sp, #8
   18dc4:	4640      	mov	r0, r8
   18dc6:	47c8      	blx	r9
	if (read < 0) {
   18dc8:	1e07      	subs	r7, r0, #0
   18dca:	db13      	blt.n	18df4 <find_type_cb+0xfc>
	if (read != data->value_len) {
   18dcc:	7c22      	ldrb	r2, [r4, #16]
   18dce:	68e0      	ldr	r0, [r4, #12]
   18dd0:	42ba      	cmp	r2, r7
   18dd2:	d037      	beq.n	18e44 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18dd4:	4601      	mov	r1, r0
   18dd6:	a80b      	add	r0, sp, #44	; 0x2c
   18dd8:	f010 ff37 	bl	29c4a <bt_uuid_create>
   18ddc:	b988      	cbnz	r0, 18e02 <find_type_cb+0x10a>
   18dde:	4a1b      	ldr	r2, [pc, #108]	; (18e4c <find_type_cb+0x154>)
   18de0:	4b1b      	ldr	r3, [pc, #108]	; (18e50 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18de2:	7c21      	ldrb	r1, [r4, #16]
   18de4:	481b      	ldr	r0, [pc, #108]	; (18e54 <find_type_cb+0x15c>)
   18de6:	1ad2      	subs	r2, r2, r3
   18de8:	08d2      	lsrs	r2, r2, #3
   18dea:	0192      	lsls	r2, r2, #6
   18dec:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   18df0:	f00e fe61 	bl	27ab6 <log_1>
	data->group = NULL;
   18df4:	2300      	movs	r3, #0
   18df6:	60a3      	str	r3, [r4, #8]
   18df8:	e7a6      	b.n	18d48 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   18dfa:	4658      	mov	r0, fp
   18dfc:	f012 fdde 	bl	2b9bc <net_buf_simple_tailroom>
   18e00:	e7c9      	b.n	18d96 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18e02:	b2fa      	uxtb	r2, r7
   18e04:	a902      	add	r1, sp, #8
   18e06:	a806      	add	r0, sp, #24
   18e08:	f010 ff1f 	bl	29c4a <bt_uuid_create>
   18e0c:	b948      	cbnz	r0, 18e22 <find_type_cb+0x12a>
   18e0e:	4a0f      	ldr	r2, [pc, #60]	; (18e4c <find_type_cb+0x154>)
   18e10:	4b0f      	ldr	r3, [pc, #60]	; (18e50 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   18e12:	4811      	ldr	r0, [pc, #68]	; (18e58 <find_type_cb+0x160>)
   18e14:	1ad2      	subs	r2, r2, r3
   18e16:	08d2      	lsrs	r2, r2, #3
   18e18:	0192      	lsls	r2, r2, #6
   18e1a:	f042 0202 	orr.w	r2, r2, #2
   18e1e:	4639      	mov	r1, r7
   18e20:	e7e6      	b.n	18df0 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18e22:	a906      	add	r1, sp, #24
   18e24:	a80b      	add	r0, sp, #44	; 0x2c
   18e26:	f010 fee6 	bl	29bf6 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18e2a:	2800      	cmp	r0, #0
   18e2c:	d1e2      	bne.n	18df4 <find_type_cb+0xfc>
	data->err = 0x00;
   18e2e:	2300      	movs	r3, #0
   18e30:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18e32:	2104      	movs	r1, #4
   18e34:	f105 0008 	add.w	r0, r5, #8
   18e38:	f004 fc34 	bl	1d6a4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18e3c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18e3e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18e40:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18e42:	e781      	b.n	18d48 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   18e44:	a902      	add	r1, sp, #8
   18e46:	f010 fde1 	bl	29a0c <memcmp>
   18e4a:	e7ee      	b.n	18e2a <find_type_cb+0x132>
   18e4c:	0002ccc0 	.word	0x0002ccc0
   18e50:	0002ccb8 	.word	0x0002ccb8
   18e54:	0003013a 	.word	0x0003013a
   18e58:	00030159 	.word	0x00030159

00018e5c <chan_send>:
{
   18e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18e60:	688b      	ldr	r3, [r1, #8]
   18e62:	781b      	ldrb	r3, [r3, #0]
   18e64:	2bd2      	cmp	r3, #210	; 0xd2
{
   18e66:	4606      	mov	r6, r0
   18e68:	460c      	mov	r4, r1
   18e6a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18e6c:	d116      	bne.n	18e9c <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   18e6e:	6803      	ldr	r3, [r0, #0]
   18e70:	6818      	ldr	r0, [r3, #0]
   18e72:	f012 fc74 	bl	2b75e <bt_smp_sign>
		if (err) {
   18e76:	4605      	mov	r5, r0
   18e78:	b180      	cbz	r0, 18e9c <chan_send+0x40>
   18e7a:	4b24      	ldr	r3, [pc, #144]	; (18f0c <chan_send+0xb0>)
   18e7c:	4924      	ldr	r1, [pc, #144]	; (18f10 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   18e7e:	4825      	ldr	r0, [pc, #148]	; (18f14 <chan_send+0xb8>)
   18e80:	1ac9      	subs	r1, r1, r3
   18e82:	08c9      	lsrs	r1, r1, #3
   18e84:	0189      	lsls	r1, r1, #6
   18e86:	f041 0101 	orr.w	r1, r1, #1
   18e8a:	f00e fe07 	bl	27a9c <log_0>
			net_buf_unref(buf);
   18e8e:	4620      	mov	r0, r4
   18e90:	f004 fad8 	bl	1d444 <net_buf_unref>
}
   18e94:	4628      	mov	r0, r5
   18e96:	b003      	add	sp, #12
   18e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18e9c:	f104 0008 	add.w	r0, r4, #8
   18ea0:	f012 fd88 	bl	2b9b4 <net_buf_simple_headroom>
	state->len = buf->len;
   18ea4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   18ea8:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   18eaa:	b957      	cbnz	r7, 18ec2 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   18eac:	68a3      	ldr	r3, [r4, #8]
   18eae:	7818      	ldrb	r0, [r3, #0]
   18eb0:	f011 fba8 	bl	2a604 <att_op_get_type>
   18eb4:	1e43      	subs	r3, r0, #1
   18eb6:	b2db      	uxtb	r3, r3
   18eb8:	2b04      	cmp	r3, #4
   18eba:	bf9c      	itt	ls
   18ebc:	4a16      	ldrls	r2, [pc, #88]	; (18f18 <chan_send+0xbc>)
   18ebe:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18ec2:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   18ec4:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18ec8:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   18eca:	4b14      	ldr	r3, [pc, #80]	; (18f1c <chan_send+0xc0>)
   18ecc:	429f      	cmp	r7, r3
   18ece:	d018      	beq.n	18f02 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   18ed0:	4b13      	ldr	r3, [pc, #76]	; (18f20 <chan_send+0xc4>)
   18ed2:	429f      	cmp	r7, r3
   18ed4:	d017      	beq.n	18f06 <chan_send+0xaa>
		return att_sent;
   18ed6:	4913      	ldr	r1, [pc, #76]	; (18f24 <chan_send+0xc8>)
   18ed8:	4b13      	ldr	r3, [pc, #76]	; (18f28 <chan_send+0xcc>)
   18eda:	4a14      	ldr	r2, [pc, #80]	; (18f2c <chan_send+0xd0>)
   18edc:	428f      	cmp	r7, r1
   18ede:	bf18      	it	ne
   18ee0:	4613      	movne	r3, r2
			       &chan->chan.chan);
   18ee2:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18ee4:	9600      	str	r6, [sp, #0]
   18ee6:	4622      	mov	r2, r4
   18ee8:	2104      	movs	r1, #4
   18eea:	f011 fb0c 	bl	2a506 <bt_l2cap_send_cb>
	if (err) {
   18eee:	4605      	mov	r5, r0
   18ef0:	2800      	cmp	r0, #0
   18ef2:	d0cf      	beq.n	18e94 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   18ef4:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18ef6:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18efa:	fa10 f088 	uxtah	r0, r0, r8
   18efe:	60a0      	str	r0, [r4, #8]
}
   18f00:	e7c8      	b.n	18e94 <chan_send+0x38>
		return att_rsp_sent;
   18f02:	4b0b      	ldr	r3, [pc, #44]	; (18f30 <chan_send+0xd4>)
   18f04:	e7ed      	b.n	18ee2 <chan_send+0x86>
		return att_cfm_sent;
   18f06:	4b0b      	ldr	r3, [pc, #44]	; (18f34 <chan_send+0xd8>)
   18f08:	e7eb      	b.n	18ee2 <chan_send+0x86>
   18f0a:	bf00      	nop
   18f0c:	0002ccb8 	.word	0x0002ccb8
   18f10:	0002ccc0 	.word	0x0002ccc0
   18f14:	00030178 	.word	0x00030178
   18f18:	0002d3cc 	.word	0x0002d3cc
   18f1c:	0002a939 	.word	0x0002a939
   18f20:	0002a955 	.word	0x0002a955
   18f24:	0002a91f 	.word	0x0002a91f
   18f28:	00018b7d 	.word	0x00018b7d
   18f2c:	0002a5d5 	.word	0x0002a5d5
   18f30:	00018b6d 	.word	0x00018b6d
   18f34:	00018b5d 	.word	0x00018b5d

00018f38 <bt_att_chan_req_send>:
{
   18f38:	b538      	push	{r3, r4, r5, lr}
   18f3a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   18f3c:	4604      	mov	r4, r0
   18f3e:	b958      	cbnz	r0, 18f58 <bt_att_chan_req_send+0x20>
   18f40:	491d      	ldr	r1, [pc, #116]	; (18fb8 <bt_att_chan_req_send+0x80>)
   18f42:	481e      	ldr	r0, [pc, #120]	; (18fbc <bt_att_chan_req_send+0x84>)
   18f44:	4a1e      	ldr	r2, [pc, #120]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18f46:	f240 2336 	movw	r3, #566	; 0x236
   18f4a:	f00e fad4 	bl	274f6 <printk>
   18f4e:	481c      	ldr	r0, [pc, #112]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18f50:	f240 2136 	movw	r1, #566	; 0x236
   18f54:	f00e fd74 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(req);
   18f58:	b95d      	cbnz	r5, 18f72 <bt_att_chan_req_send+0x3a>
   18f5a:	491a      	ldr	r1, [pc, #104]	; (18fc4 <bt_att_chan_req_send+0x8c>)
   18f5c:	4817      	ldr	r0, [pc, #92]	; (18fbc <bt_att_chan_req_send+0x84>)
   18f5e:	4a18      	ldr	r2, [pc, #96]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18f60:	f240 2337 	movw	r3, #567	; 0x237
   18f64:	f00e fac7 	bl	274f6 <printk>
   18f68:	4815      	ldr	r0, [pc, #84]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18f6a:	f240 2137 	movw	r1, #567	; 0x237
   18f6e:	f00e fd67 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   18f72:	686b      	ldr	r3, [r5, #4]
   18f74:	b95b      	cbnz	r3, 18f8e <bt_att_chan_req_send+0x56>
   18f76:	4914      	ldr	r1, [pc, #80]	; (18fc8 <bt_att_chan_req_send+0x90>)
   18f78:	4810      	ldr	r0, [pc, #64]	; (18fbc <bt_att_chan_req_send+0x84>)
   18f7a:	4a11      	ldr	r2, [pc, #68]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18f7c:	f44f 730e 	mov.w	r3, #568	; 0x238
   18f80:	f00e fab9 	bl	274f6 <printk>
   18f84:	480e      	ldr	r0, [pc, #56]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18f86:	f44f 710e 	mov.w	r1, #568	; 0x238
   18f8a:	f00e fd59 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   18f8e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   18f92:	b15b      	cbz	r3, 18fac <bt_att_chan_req_send+0x74>
   18f94:	490d      	ldr	r1, [pc, #52]	; (18fcc <bt_att_chan_req_send+0x94>)
   18f96:	4809      	ldr	r0, [pc, #36]	; (18fbc <bt_att_chan_req_send+0x84>)
   18f98:	4a09      	ldr	r2, [pc, #36]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18f9a:	f240 2339 	movw	r3, #569	; 0x239
   18f9e:	f00e faaa 	bl	274f6 <printk>
   18fa2:	4807      	ldr	r0, [pc, #28]	; (18fc0 <bt_att_chan_req_send+0x88>)
   18fa4:	f240 2139 	movw	r1, #569	; 0x239
   18fa8:	f00e fd4a 	bl	27a40 <assert_post_action>
	return chan_req_send(chan, req);
   18fac:	4629      	mov	r1, r5
   18fae:	4620      	mov	r0, r4
}
   18fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   18fb4:	f011 bc80 	b.w	2a8b8 <chan_req_send>
   18fb8:	000301ba 	.word	0x000301ba
   18fbc:	0002dcd3 	.word	0x0002dcd3
   18fc0:	0003018b 	.word	0x0003018b
   18fc4:	000301d0 	.word	0x000301d0
   18fc8:	000301bf 	.word	0x000301bf
   18fcc:	000301c9 	.word	0x000301c9

00018fd0 <att_get>:
{
   18fd0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18fd2:	7b43      	ldrb	r3, [r0, #13]
   18fd4:	2b07      	cmp	r3, #7
   18fd6:	d00b      	beq.n	18ff0 <att_get+0x20>
   18fd8:	4918      	ldr	r1, [pc, #96]	; (1903c <att_get+0x6c>)
   18fda:	4b19      	ldr	r3, [pc, #100]	; (19040 <att_get+0x70>)
		BT_WARN("Not connected");
   18fdc:	4819      	ldr	r0, [pc, #100]	; (19044 <att_get+0x74>)
   18fde:	1ac9      	subs	r1, r1, r3
   18fe0:	08c9      	lsrs	r1, r1, #3
   18fe2:	0189      	lsls	r1, r1, #6
   18fe4:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   18fe8:	f00e fd58 	bl	27a9c <log_0>
		return NULL;
   18fec:	2400      	movs	r4, #0
   18fee:	e00e      	b.n	1900e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18ff0:	2104      	movs	r1, #4
   18ff2:	f011 fab1 	bl	2a558 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18ff6:	4604      	mov	r4, r0
   18ff8:	b958      	cbnz	r0, 19012 <att_get+0x42>
   18ffa:	4910      	ldr	r1, [pc, #64]	; (1903c <att_get+0x6c>)
   18ffc:	4b10      	ldr	r3, [pc, #64]	; (19040 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   18ffe:	4812      	ldr	r0, [pc, #72]	; (19048 <att_get+0x78>)
   19000:	1ac9      	subs	r1, r1, r3
   19002:	08c9      	lsrs	r1, r1, #3
   19004:	0189      	lsls	r1, r1, #6
   19006:	f041 0101 	orr.w	r1, r1, #1
   1900a:	f00e fd47 	bl	27a9c <log_0>
}
   1900e:	4620      	mov	r0, r4
   19010:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19012:	f3bf 8f5b 	dmb	ish
   19016:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1901a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1901e:	075b      	lsls	r3, r3, #29
   19020:	d508      	bpl.n	19034 <att_get+0x64>
   19022:	4906      	ldr	r1, [pc, #24]	; (1903c <att_get+0x6c>)
   19024:	4b06      	ldr	r3, [pc, #24]	; (19040 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   19026:	4809      	ldr	r0, [pc, #36]	; (1904c <att_get+0x7c>)
   19028:	1ac9      	subs	r1, r1, r3
   1902a:	08c9      	lsrs	r1, r1, #3
   1902c:	0189      	lsls	r1, r1, #6
   1902e:	f041 0102 	orr.w	r1, r1, #2
   19032:	e7d9      	b.n	18fe8 <att_get+0x18>
	return att_chan->att;
   19034:	f850 4c08 	ldr.w	r4, [r0, #-8]
   19038:	e7e9      	b.n	1900e <att_get+0x3e>
   1903a:	bf00      	nop
   1903c:	0002ccc0 	.word	0x0002ccc0
   19040:	0002ccb8 	.word	0x0002ccb8
   19044:	000301d4 	.word	0x000301d4
   19048:	000301e2 	.word	0x000301e2
   1904c:	000301fd 	.word	0x000301fd

00019050 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   19050:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   19052:	4a07      	ldr	r2, [pc, #28]	; (19070 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   19054:	4604      	mov	r4, r0
   19056:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   19058:	f7ff ff00 	bl	18e5c <chan_send>
	if (err) {
   1905c:	b130      	cbz	r0, 1906c <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   1905e:	4629      	mov	r1, r5
   19060:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   19064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   19068:	f004 b9b8 	b.w	1d3dc <net_buf_put>
}
   1906c:	bd38      	pop	{r3, r4, r5, pc}
   1906e:	bf00      	nop
   19070:	0002a939 	.word	0x0002a939

00019074 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   19074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   19076:	2300      	movs	r3, #0
{
   19078:	4606      	mov	r6, r0
   1907a:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1907c:	4829      	ldr	r0, [pc, #164]	; (19124 <bt_att_accept+0xb0>)
   1907e:	2200      	movs	r2, #0
   19080:	4669      	mov	r1, sp
   19082:	f007 fecb 	bl	20e1c <k_mem_slab_alloc>
   19086:	4604      	mov	r4, r0
   19088:	b178      	cbz	r0, 190aa <bt_att_accept+0x36>
   1908a:	4a27      	ldr	r2, [pc, #156]	; (19128 <bt_att_accept+0xb4>)
   1908c:	4b27      	ldr	r3, [pc, #156]	; (1912c <bt_att_accept+0xb8>)
		BT_ERR("No available ATT context for conn %p", conn);
   1908e:	4828      	ldr	r0, [pc, #160]	; (19130 <bt_att_accept+0xbc>)
   19090:	1ad2      	subs	r2, r2, r3
   19092:	08d2      	lsrs	r2, r2, #3
   19094:	0192      	lsls	r2, r2, #6
   19096:	f042 0201 	orr.w	r2, r2, #1
   1909a:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1909c:	f00e fd0b 	bl	27ab6 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   190a0:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   190a4:	4620      	mov	r0, r4
   190a6:	b003      	add	sp, #12
   190a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   190aa:	4601      	mov	r1, r0
   190ac:	2230      	movs	r2, #48	; 0x30
   190ae:	9800      	ldr	r0, [sp, #0]
   190b0:	f010 fcde 	bl	29a70 <memset>
	att->conn = conn;
   190b4:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   190b6:	481f      	ldr	r0, [pc, #124]	; (19134 <bt_att_accept+0xc0>)
	list->tail = NULL;
   190b8:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   190ba:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   190be:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   190c2:	2200      	movs	r2, #0
   190c4:	2300      	movs	r3, #0
   190c6:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   190c8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   190ca:	f007 fea7 	bl	20e1c <k_mem_slab_alloc>
   190ce:	4604      	mov	r4, r0
   190d0:	b148      	cbz	r0, 190e6 <bt_att_accept+0x72>
   190d2:	4a15      	ldr	r2, [pc, #84]	; (19128 <bt_att_accept+0xb4>)
   190d4:	4b15      	ldr	r3, [pc, #84]	; (1912c <bt_att_accept+0xb8>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   190d6:	6829      	ldr	r1, [r5, #0]
   190d8:	4817      	ldr	r0, [pc, #92]	; (19138 <bt_att_accept+0xc4>)
   190da:	1ad2      	subs	r2, r2, r3
   190dc:	08d2      	lsrs	r2, r2, #3
   190de:	0192      	lsls	r2, r2, #6
   190e0:	f042 0201 	orr.w	r2, r2, #1
   190e4:	e7da      	b.n	1909c <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   190e6:	4601      	mov	r1, r0
   190e8:	f44f 72ac 	mov.w	r2, #344	; 0x158
   190ec:	9801      	ldr	r0, [sp, #4]
   190ee:	f010 fcbf 	bl	29a70 <memset>
	chan->chan.chan.ops = &ops;
   190f2:	9801      	ldr	r0, [sp, #4]
   190f4:	4b11      	ldr	r3, [pc, #68]	; (1913c <bt_att_accept+0xc8>)
   190f6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   190f8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   190fc:	f013 fa9b 	bl	2c636 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19100:	9b01      	ldr	r3, [sp, #4]
   19102:	f3bf 8f5b 	dmb	ish
   19106:	33f8      	adds	r3, #248	; 0xf8
   19108:	e853 2f00 	ldrex	r2, [r3]
   1910c:	e843 4100 	strex	r1, r4, [r3]
   19110:	2900      	cmp	r1, #0
   19112:	d1f9      	bne.n	19108 <bt_att_accept+0x94>
   19114:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19118:	9b01      	ldr	r3, [sp, #4]
   1911a:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1911e:	603b      	str	r3, [r7, #0]
	return 0;
   19120:	e7c0      	b.n	190a4 <bt_att_accept+0x30>
   19122:	bf00      	nop
   19124:	20000740 	.word	0x20000740
   19128:	0002ccc0 	.word	0x0002ccc0
   1912c:	0002ccb8 	.word	0x0002ccb8
   19130:	00030221 	.word	0x00030221
   19134:	20000760 	.word	0x20000760
   19138:	00030246 	.word	0x00030246
   1913c:	20000518 	.word	0x20000518

00019140 <bt_att_connected>:
{
   19140:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   19142:	2104      	movs	r1, #4
{
   19144:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   19146:	6800      	ldr	r0, [r0, #0]
   19148:	f011 f9f6 	bl	2a538 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1914c:	4605      	mov	r5, r0
   1914e:	b970      	cbnz	r0, 1916e <bt_att_connected+0x2e>
   19150:	491c      	ldr	r1, [pc, #112]	; (191c4 <bt_att_connected+0x84>)
   19152:	4a1d      	ldr	r2, [pc, #116]	; (191c8 <bt_att_connected+0x88>)
   19154:	481d      	ldr	r0, [pc, #116]	; (191cc <bt_att_connected+0x8c>)
   19156:	f640 2325 	movw	r3, #2597	; 0xa25
   1915a:	f00e f9cc 	bl	274f6 <printk>
   1915e:	481c      	ldr	r0, [pc, #112]	; (191d0 <bt_att_connected+0x90>)
   19160:	f00e f9c9 	bl	274f6 <printk>
   19164:	4818      	ldr	r0, [pc, #96]	; (191c8 <bt_att_connected+0x88>)
   19166:	f640 2125 	movw	r1, #2597	; 0xa25
   1916a:	f00e fc69 	bl	27a40 <assert_post_action>
	struct bt_att *att = att_chan->att;
   1916e:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   19172:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   19174:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   19178:	b91b      	cbnz	r3, 19182 <bt_att_connected+0x42>
   1917a:	f105 000c 	add.w	r0, r5, #12
   1917e:	f013 fa5a 	bl	2c636 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   19182:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   19184:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   19188:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1918a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   1918e:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   19190:	b902      	cbnz	r2, 19194 <bt_att_connected+0x54>
	list->tail = node;
   19192:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19194:	f3bf 8f5b 	dmb	ish
   19198:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1919c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   191a0:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   191a2:	bf58      	it	pl
   191a4:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   191a6:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   191a8:	bf5c      	itt	pl
   191aa:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   191ae:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   191b2:	f011 fb36 	bl	2a822 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   191b6:	f504 708c 	add.w	r0, r4, #280	; 0x118
   191ba:	4906      	ldr	r1, [pc, #24]	; (191d4 <bt_att_connected+0x94>)
}
   191bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   191c0:	f008 bfd4 	b.w	2216c <k_work_init_delayable>
   191c4:	000301ba 	.word	0x000301ba
   191c8:	0003018b 	.word	0x0003018b
   191cc:	0002dcd3 	.word	0x0002dcd3
   191d0:	0003026b 	.word	0x0003026b
   191d4:	00019b1d 	.word	0x00019b1d

000191d8 <att_write_cmd>:
{
   191d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   191da:	4604      	mov	r4, r0
   191dc:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   191de:	f101 0008 	add.w	r0, r1, #8
   191e2:	460d      	mov	r5, r1
   191e4:	f012 fbde 	bl	2b9a4 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   191e8:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   191ea:	68af      	ldr	r7, [r5, #8]
   191ec:	89ad      	ldrh	r5, [r5, #12]
   191ee:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   191f0:	2100      	movs	r1, #0
   191f2:	6818      	ldr	r0, [r3, #0]
   191f4:	f011 ff92 	bl	2b11c <bt_gatt_change_aware>
   191f8:	b320      	cbz	r0, 19244 <att_write_cmd+0x6c>
	if (!handle) {
   191fa:	b32e      	cbz	r6, 19248 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   191fc:	2218      	movs	r2, #24
   191fe:	2100      	movs	r1, #0
   19200:	4668      	mov	r0, sp
   19202:	f010 fc35 	bl	29a70 <memset>
	data.conn = chan->att->conn;
   19206:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19208:	4a10      	ldr	r2, [pc, #64]	; (1924c <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   1920a:	681b      	ldr	r3, [r3, #0]
   1920c:	9300      	str	r3, [sp, #0]
	data.req = req;
   1920e:	2300      	movs	r3, #0
   19210:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   19214:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19218:	2301      	movs	r3, #1
   1921a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1921e:	4631      	mov	r1, r6
   19220:	466b      	mov	r3, sp
   19222:	4630      	mov	r0, r6
	data.value = value;
   19224:	9703      	str	r7, [sp, #12]
	data.len = len;
   19226:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1922a:	f011 fa18 	bl	2a65e <bt_gatt_foreach_attr>
	if (data.err) {
   1922e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19232:	b923      	cbnz	r3, 1923e <att_write_cmd+0x66>
	if (data.buf) {
   19234:	9901      	ldr	r1, [sp, #4]
   19236:	b111      	cbz	r1, 1923e <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19238:	4620      	mov	r0, r4
   1923a:	f7ff ff09 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
   1923e:	2000      	movs	r0, #0
}
   19240:	b007      	add	sp, #28
   19242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19244:	2012      	movs	r0, #18
   19246:	e7fb      	b.n	19240 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   19248:	2001      	movs	r0, #1
   1924a:	e7f9      	b.n	19240 <att_write_cmd+0x68>
   1924c:	0002aa11 	.word	0x0002aa11

00019250 <bt_att_chan_create_pdu>:
{
   19250:	b538      	push	{r3, r4, r5, lr}
   19252:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19254:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   19258:	3201      	adds	r2, #1
   1925a:	428a      	cmp	r2, r1
   1925c:	d90c      	bls.n	19278 <bt_att_chan_create_pdu+0x28>
   1925e:	481a      	ldr	r0, [pc, #104]	; (192c8 <bt_att_chan_create_pdu+0x78>)
   19260:	4b1a      	ldr	r3, [pc, #104]	; (192cc <bt_att_chan_create_pdu+0x7c>)
   19262:	1a1b      	subs	r3, r3, r0
   19264:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   19266:	019b      	lsls	r3, r3, #6
   19268:	4819      	ldr	r0, [pc, #100]	; (192d0 <bt_att_chan_create_pdu+0x80>)
   1926a:	f043 0302 	orr.w	r3, r3, #2
   1926e:	f00e fc36 	bl	27ade <log_2>
		return NULL;
   19272:	2400      	movs	r4, #0
}
   19274:	4620      	mov	r0, r4
   19276:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   19278:	4628      	mov	r0, r5
   1927a:	f011 f9c3 	bl	2a604 <att_op_get_type>
   1927e:	2802      	cmp	r0, #2
   19280:	d001      	beq.n	19286 <bt_att_chan_create_pdu+0x36>
   19282:	2804      	cmp	r0, #4
   19284:	d114      	bne.n	192b0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   19286:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1928a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1928c:	2100      	movs	r1, #0
   1928e:	4608      	mov	r0, r1
   19290:	f011 f936 	bl	2a500 <bt_l2cap_create_pdu_timeout>
   19294:	4604      	mov	r4, r0
	if (!buf) {
   19296:	b980      	cbnz	r0, 192ba <bt_att_chan_create_pdu+0x6a>
   19298:	4b0b      	ldr	r3, [pc, #44]	; (192c8 <bt_att_chan_create_pdu+0x78>)
   1929a:	4a0c      	ldr	r2, [pc, #48]	; (192cc <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1929c:	480d      	ldr	r0, [pc, #52]	; (192d4 <bt_att_chan_create_pdu+0x84>)
   1929e:	1ad2      	subs	r2, r2, r3
   192a0:	08d2      	lsrs	r2, r2, #3
   192a2:	0192      	lsls	r2, r2, #6
   192a4:	f042 0201 	orr.w	r2, r2, #1
   192a8:	4629      	mov	r1, r5
   192aa:	f00e fc04 	bl	27ab6 <log_1>
		return NULL;
   192ae:	e7e1      	b.n	19274 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   192b0:	f04f 32ff 	mov.w	r2, #4294967295
   192b4:	f04f 33ff 	mov.w	r3, #4294967295
   192b8:	e7e8      	b.n	1928c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   192ba:	2101      	movs	r1, #1
   192bc:	3008      	adds	r0, #8
   192be:	f004 f9f1 	bl	1d6a4 <net_buf_simple_add>
	hdr->code = op;
   192c2:	7005      	strb	r5, [r0, #0]
	return buf;
   192c4:	e7d6      	b.n	19274 <bt_att_chan_create_pdu+0x24>
   192c6:	bf00      	nop
   192c8:	0002ccb8 	.word	0x0002ccb8
   192cc:	0002ccc0 	.word	0x0002ccc0
   192d0:	00030282 	.word	0x00030282
   192d4:	0002ffb7 	.word	0x0002ffb7

000192d8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   192d8:	898b      	ldrh	r3, [r1, #12]
{
   192da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192de:	4604      	mov	r4, r0
   192e0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   192e2:	b963      	cbnz	r3, 192fe <bt_att_recv+0x26>
   192e4:	494c      	ldr	r1, [pc, #304]	; (19418 <bt_att_recv+0x140>)
   192e6:	4b4d      	ldr	r3, [pc, #308]	; (1941c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   192e8:	484d      	ldr	r0, [pc, #308]	; (19420 <bt_att_recv+0x148>)
   192ea:	1ac9      	subs	r1, r1, r3
   192ec:	08c9      	lsrs	r1, r1, #3
   192ee:	0189      	lsls	r1, r1, #6
   192f0:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   192f4:	f00e fbd2 	bl	27a9c <log_0>
}
   192f8:	2000      	movs	r0, #0
   192fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   192fe:	2101      	movs	r1, #1
   19300:	f108 0008 	add.w	r0, r8, #8
   19304:	f004 f9ac 	bl	1d660 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19308:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1930c:	4605      	mov	r5, r0
   1930e:	2b00      	cmp	r3, #0
   19310:	d0f2      	beq.n	192f8 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   19312:	4a44      	ldr	r2, [pc, #272]	; (19424 <bt_att_recv+0x14c>)
   19314:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19316:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1931a:	2300      	movs	r3, #0
   1931c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1931e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   19322:	4288      	cmp	r0, r1
   19324:	d11d      	bne.n	19362 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   19326:	00d8      	lsls	r0, r3, #3
   19328:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1932c:	789f      	ldrb	r7, [r3, #2]
   1932e:	2f01      	cmp	r7, #1
   19330:	d132      	bne.n	19398 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19332:	f3bf 8f5b 	dmb	ish
   19336:	34f0      	adds	r4, #240	; 0xf0
   19338:	e854 3f00 	ldrex	r3, [r4]
   1933c:	f043 0201 	orr.w	r2, r3, #1
   19340:	e844 2100 	strex	r1, r2, [r4]
   19344:	2900      	cmp	r1, #0
   19346:	d1f7      	bne.n	19338 <bt_att_recv+0x60>
   19348:	f3bf 8f5b 	dmb	ish
   1934c:	07da      	lsls	r2, r3, #31
   1934e:	d53d      	bpl.n	193cc <bt_att_recv+0xf4>
   19350:	4931      	ldr	r1, [pc, #196]	; (19418 <bt_att_recv+0x140>)
   19352:	4b32      	ldr	r3, [pc, #200]	; (1941c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   19354:	4834      	ldr	r0, [pc, #208]	; (19428 <bt_att_recv+0x150>)
   19356:	1ac9      	subs	r1, r1, r3
   19358:	08c9      	lsrs	r1, r1, #3
   1935a:	0189      	lsls	r1, r1, #6
   1935c:	f041 0102 	orr.w	r1, r1, #2
   19360:	e7c8      	b.n	192f4 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19362:	3301      	adds	r3, #1
   19364:	2b0d      	cmp	r3, #13
   19366:	d1da      	bne.n	1931e <bt_att_recv+0x46>
   19368:	4b2c      	ldr	r3, [pc, #176]	; (1941c <bt_att_recv+0x144>)
   1936a:	4a2b      	ldr	r2, [pc, #172]	; (19418 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1936c:	482f      	ldr	r0, [pc, #188]	; (1942c <bt_att_recv+0x154>)
   1936e:	1ad2      	subs	r2, r2, r3
   19370:	08d2      	lsrs	r2, r2, #3
   19372:	0192      	lsls	r2, r2, #6
   19374:	f042 0202 	orr.w	r2, r2, #2
   19378:	f00e fb9d 	bl	27ab6 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1937c:	7829      	ldrb	r1, [r5, #0]
   1937e:	4608      	mov	r0, r1
   19380:	f011 f940 	bl	2a604 <att_op_get_type>
   19384:	2800      	cmp	r0, #0
   19386:	d0b7      	beq.n	192f8 <bt_att_recv+0x20>
	if (!req) {
   19388:	2900      	cmp	r1, #0
   1938a:	d0b5      	beq.n	192f8 <bt_att_recv+0x20>
   1938c:	2306      	movs	r3, #6
   1938e:	2200      	movs	r2, #0
   19390:	4630      	mov	r0, r6
   19392:	f011 fbd2 	bl	2ab3a <send_err_rsp.part.0>
   19396:	e7af      	b.n	192f8 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   19398:	2f05      	cmp	r7, #5
   1939a:	d117      	bne.n	193cc <bt_att_recv+0xf4>
   1939c:	f3bf 8f5b 	dmb	ish
   193a0:	34f0      	adds	r4, #240	; 0xf0
   193a2:	e854 3f00 	ldrex	r3, [r4]
   193a6:	f043 0202 	orr.w	r2, r3, #2
   193aa:	e844 2100 	strex	r1, r2, [r4]
   193ae:	2900      	cmp	r1, #0
   193b0:	d1f7      	bne.n	193a2 <bt_att_recv+0xca>
   193b2:	f3bf 8f5b 	dmb	ish
   193b6:	079b      	lsls	r3, r3, #30
   193b8:	d508      	bpl.n	193cc <bt_att_recv+0xf4>
   193ba:	4917      	ldr	r1, [pc, #92]	; (19418 <bt_att_recv+0x140>)
   193bc:	4b17      	ldr	r3, [pc, #92]	; (1941c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   193be:	481c      	ldr	r0, [pc, #112]	; (19430 <bt_att_recv+0x158>)
   193c0:	1ac9      	subs	r1, r1, r3
   193c2:	08c9      	lsrs	r1, r1, #3
   193c4:	0189      	lsls	r1, r1, #6
   193c6:	f041 0102 	orr.w	r1, r1, #2
   193ca:	e793      	b.n	192f4 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   193cc:	eb0c 0300 	add.w	r3, ip, r0
   193d0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   193d4:	785a      	ldrb	r2, [r3, #1]
   193d6:	428a      	cmp	r2, r1
   193d8:	d90e      	bls.n	193f8 <bt_att_recv+0x120>
   193da:	4a10      	ldr	r2, [pc, #64]	; (1941c <bt_att_recv+0x144>)
   193dc:	4b0e      	ldr	r3, [pc, #56]	; (19418 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   193de:	4815      	ldr	r0, [pc, #84]	; (19434 <bt_att_recv+0x15c>)
   193e0:	1a9b      	subs	r3, r3, r2
   193e2:	08db      	lsrs	r3, r3, #3
   193e4:	019b      	lsls	r3, r3, #6
   193e6:	782a      	ldrb	r2, [r5, #0]
   193e8:	f043 0301 	orr.w	r3, r3, #1
   193ec:	f00e fb77 	bl	27ade <log_2>
	if (handler->type == ATT_REQUEST && err) {
   193f0:	2f01      	cmp	r7, #1
   193f2:	d181      	bne.n	192f8 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   193f4:	2304      	movs	r3, #4
   193f6:	e00a      	b.n	1940e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   193f8:	685b      	ldr	r3, [r3, #4]
   193fa:	4641      	mov	r1, r8
   193fc:	4630      	mov	r0, r6
   193fe:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19400:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   19402:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19404:	f47f af78 	bne.w	192f8 <bt_att_recv+0x20>
   19408:	2800      	cmp	r0, #0
   1940a:	f43f af75 	beq.w	192f8 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1940e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   19410:	2900      	cmp	r1, #0
   19412:	f43f af71 	beq.w	192f8 <bt_att_recv+0x20>
   19416:	e7ba      	b.n	1938e <bt_att_recv+0xb6>
   19418:	0002ccc0 	.word	0x0002ccc0
   1941c:	0002ccb8 	.word	0x0002ccb8
   19420:	000302a7 	.word	0x000302a7
   19424:	0002d3e0 	.word	0x0002d3e0
   19428:	000302c2 	.word	0x000302c2
   1942c:	0003031c 	.word	0x0003031c
   19430:	000302de 	.word	0x000302de
   19434:	000302fd 	.word	0x000302fd

00019438 <att_write_req>:
{
   19438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1943c:	4604      	mov	r4, r0
   1943e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   19440:	f101 0008 	add.w	r0, r1, #8
   19444:	460d      	mov	r5, r1
   19446:	f012 faad 	bl	2b9a4 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1944a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   1944c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   19450:	89ad      	ldrh	r5, [r5, #12]
   19452:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19454:	2101      	movs	r1, #1
   19456:	6818      	ldr	r0, [r3, #0]
   19458:	f011 fe60 	bl	2b11c <bt_gatt_change_aware>
   1945c:	2800      	cmp	r0, #0
   1945e:	d03f      	beq.n	194e0 <att_write_req+0xa8>
	if (!handle) {
   19460:	2e00      	cmp	r6, #0
   19462:	d03f      	beq.n	194e4 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   19464:	2218      	movs	r2, #24
   19466:	2100      	movs	r1, #0
   19468:	4668      	mov	r0, sp
   1946a:	f010 fb01 	bl	29a70 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1946e:	2200      	movs	r2, #0
   19470:	2113      	movs	r1, #19
   19472:	4620      	mov	r0, r4
   19474:	f7ff feec 	bl	19250 <bt_att_chan_create_pdu>
   19478:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1947a:	b378      	cbz	r0, 194dc <att_write_req+0xa4>
	data.conn = chan->att->conn;
   1947c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1947e:	4a1a      	ldr	r2, [pc, #104]	; (194e8 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   19480:	681b      	ldr	r3, [r3, #0]
   19482:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19484:	2301      	movs	r3, #1
   19486:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   1948a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   1948e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19490:	466b      	mov	r3, sp
   19492:	4631      	mov	r1, r6
   19494:	4630      	mov	r0, r6
	data.len = len;
   19496:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1949a:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1949e:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   194a2:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   194a6:	f011 f8da 	bl	2a65e <bt_gatt_foreach_attr>
	if (data.err) {
   194aa:	f89d 5014 	ldrb.w	r5, [sp, #20]
   194ae:	b175      	cbz	r5, 194ce <att_write_req+0x96>
			net_buf_unref(data.buf);
   194b0:	9801      	ldr	r0, [sp, #4]
   194b2:	f003 ffc7 	bl	1d444 <net_buf_unref>
	if (!req) {
   194b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   194ba:	4632      	mov	r2, r6
   194bc:	4641      	mov	r1, r8
   194be:	4620      	mov	r0, r4
   194c0:	f011 fb3b 	bl	2ab3a <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   194c4:	463d      	mov	r5, r7
}
   194c6:	4628      	mov	r0, r5
   194c8:	b007      	add	sp, #28
   194ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   194ce:	9901      	ldr	r1, [sp, #4]
   194d0:	2900      	cmp	r1, #0
   194d2:	d0f8      	beq.n	194c6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   194d4:	4620      	mov	r0, r4
   194d6:	f7ff fdbb 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
   194da:	e7f4      	b.n	194c6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   194dc:	250e      	movs	r5, #14
   194de:	e7f2      	b.n	194c6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   194e0:	2512      	movs	r5, #18
   194e2:	e7f0      	b.n	194c6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   194e4:	2501      	movs	r5, #1
   194e6:	e7ee      	b.n	194c6 <att_write_req+0x8e>
   194e8:	0002aa11 	.word	0x0002aa11

000194ec <bt_att_create_pdu>:
{
   194ec:	b570      	push	{r4, r5, r6, lr}
   194ee:	460e      	mov	r6, r1
   194f0:	4615      	mov	r5, r2
	att = att_get(conn);
   194f2:	f7ff fd6d 	bl	18fd0 <att_get>
	if (!att) {
   194f6:	b1c0      	cbz	r0, 1952a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   194f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
   194fa:	1c69      	adds	r1, r5, #1
   194fc:	b15b      	cbz	r3, 19516 <bt_att_create_pdu+0x2a>
   194fe:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   19502:	d008      	beq.n	19516 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19504:	681b      	ldr	r3, [r3, #0]
   19506:	b10b      	cbz	r3, 1950c <bt_att_create_pdu+0x20>
   19508:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1950c:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   19510:	4291      	cmp	r1, r2
   19512:	d90c      	bls.n	1952e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19514:	b98b      	cbnz	r3, 1953a <bt_att_create_pdu+0x4e>
   19516:	4a0e      	ldr	r2, [pc, #56]	; (19550 <bt_att_create_pdu+0x64>)
   19518:	4b0e      	ldr	r3, [pc, #56]	; (19554 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1951a:	480f      	ldr	r0, [pc, #60]	; (19558 <bt_att_create_pdu+0x6c>)
   1951c:	1ad2      	subs	r2, r2, r3
   1951e:	08d2      	lsrs	r2, r2, #3
   19520:	0192      	lsls	r2, r2, #6
   19522:	f042 0202 	orr.w	r2, r2, #2
   19526:	f00e fac6 	bl	27ab6 <log_1>
}
   1952a:	2000      	movs	r0, #0
   1952c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1952e:	462a      	mov	r2, r5
   19530:	4631      	mov	r1, r6
}
   19532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   19536:	f7ff be8b 	b.w	19250 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1953a:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1953e:	d004      	beq.n	1954a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19540:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19544:	b10c      	cbz	r4, 1954a <bt_att_create_pdu+0x5e>
   19546:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   1954a:	4618      	mov	r0, r3
   1954c:	4623      	mov	r3, r4
   1954e:	e7dd      	b.n	1950c <bt_att_create_pdu+0x20>
   19550:	0002ccc0 	.word	0x0002ccc0
   19554:	0002ccb8 	.word	0x0002ccb8
   19558:	00030336 	.word	0x00030336

0001955c <att_read_group_req>:
{
   1955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19560:	7b0c      	ldrb	r4, [r1, #12]
   19562:	3c04      	subs	r4, #4
   19564:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19566:	2c02      	cmp	r4, #2
{
   19568:	4605      	mov	r5, r0
   1956a:	b08c      	sub	sp, #48	; 0x30
   1956c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1956e:	d001      	beq.n	19574 <att_read_group_req+0x18>
   19570:	2c10      	cmp	r4, #16
   19572:	d16e      	bne.n	19652 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   19574:	2104      	movs	r1, #4
   19576:	3008      	adds	r0, #8
   19578:	f004 f872 	bl	1d660 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1957c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19580:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19582:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19584:	1d01      	adds	r1, r0, #4
   19586:	4622      	mov	r2, r4
   19588:	4640      	mov	r0, r8
   1958a:	f010 fb5e 	bl	29c4a <bt_uuid_create>
   1958e:	2800      	cmp	r0, #0
   19590:	d061      	beq.n	19656 <att_read_group_req+0xfa>
	if (!start || !end) {
   19592:	2e00      	cmp	r6, #0
   19594:	d03a      	beq.n	1960c <att_read_group_req+0xb0>
   19596:	2400      	movs	r4, #0
   19598:	2f00      	cmp	r7, #0
   1959a:	d036      	beq.n	1960a <att_read_group_req+0xae>
	if (start > end) {
   1959c:	42b7      	cmp	r7, r6
   1959e:	d335      	bcc.n	1960c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   195a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   195a4:	a901      	add	r1, sp, #4
   195a6:	4640      	mov	r0, r8
   195a8:	f88d 4004 	strb.w	r4, [sp, #4]
   195ac:	f8ad 3006 	strh.w	r3, [sp, #6]
   195b0:	f010 fb21 	bl	29bf6 <bt_uuid_cmp>
   195b4:	2800      	cmp	r0, #0
   195b6:	d134      	bne.n	19622 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   195b8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   195ba:	2214      	movs	r2, #20
   195bc:	2100      	movs	r1, #0
   195be:	a807      	add	r0, sp, #28
   195c0:	f010 fa56 	bl	29a70 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   195c4:	2201      	movs	r2, #1
   195c6:	2111      	movs	r1, #17
   195c8:	4620      	mov	r0, r4
   195ca:	f7ff ff8f 	bl	194ec <bt_att_create_pdu>
   195ce:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   195d0:	2800      	cmp	r0, #0
   195d2:	d040      	beq.n	19656 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   195d4:	2101      	movs	r1, #1
   195d6:	3008      	adds	r0, #8
	data.uuid = uuid;
   195d8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   195dc:	f004 f862 	bl	1d6a4 <net_buf_simple_add>
	data.rsp->len = 0U;
   195e0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   195e4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   195e6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   195e8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   195ec:	4a1b      	ldr	r2, [pc, #108]	; (1965c <att_read_group_req+0x100>)
	data.group = NULL;
   195ee:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   195f2:	4639      	mov	r1, r7
   195f4:	4630      	mov	r0, r6
   195f6:	f011 f832 	bl	2a65e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   195fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   195fc:	781c      	ldrb	r4, [r3, #0]
   195fe:	bb1c      	cbnz	r4, 19648 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   19600:	9809      	ldr	r0, [sp, #36]	; 0x24
   19602:	f003 ff1f 	bl	1d444 <net_buf_unref>
	if (!req) {
   19606:	230a      	movs	r3, #10
   19608:	e018      	b.n	1963c <att_read_group_req+0xe0>
			*err = 0U;
   1960a:	463e      	mov	r6, r7
	if (!req) {
   1960c:	2301      	movs	r3, #1
   1960e:	4632      	mov	r2, r6
   19610:	2110      	movs	r1, #16
   19612:	4628      	mov	r0, r5
   19614:	f011 fa91 	bl	2ab3a <send_err_rsp.part.0>
		return 0;
   19618:	2400      	movs	r4, #0
}
   1961a:	4620      	mov	r0, r4
   1961c:	b00c      	add	sp, #48	; 0x30
   1961e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   19622:	f642 0301 	movw	r3, #10241	; 0x2801
   19626:	a907      	add	r1, sp, #28
   19628:	4640      	mov	r0, r8
   1962a:	f88d 401c 	strb.w	r4, [sp, #28]
   1962e:	f8ad 301e 	strh.w	r3, [sp, #30]
   19632:	f010 fae0 	bl	29bf6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19636:	2800      	cmp	r0, #0
   19638:	d0be      	beq.n	195b8 <att_read_group_req+0x5c>
	if (!req) {
   1963a:	2310      	movs	r3, #16
   1963c:	4632      	mov	r2, r6
   1963e:	2110      	movs	r1, #16
   19640:	4628      	mov	r0, r5
   19642:	f011 fa7a 	bl	2ab3a <send_err_rsp.part.0>
		return 0;
   19646:	e7e8      	b.n	1961a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19648:	9909      	ldr	r1, [sp, #36]	; 0x24
   1964a:	4628      	mov	r0, r5
   1964c:	f7ff fd00 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19650:	e7e2      	b.n	19618 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   19652:	2404      	movs	r4, #4
   19654:	e7e1      	b.n	1961a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   19656:	240e      	movs	r4, #14
   19658:	e7df      	b.n	1961a <att_read_group_req+0xbe>
   1965a:	bf00      	nop
   1965c:	00018ba5 	.word	0x00018ba5

00019660 <att_read_mult_req>:
{
   19660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19664:	6886      	ldr	r6, [r0, #8]
{
   19666:	b085      	sub	sp, #20
   19668:	4604      	mov	r4, r0
   1966a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1966c:	4630      	mov	r0, r6
   1966e:	2101      	movs	r1, #1
   19670:	f011 fd54 	bl	2b11c <bt_gatt_change_aware>
   19674:	b3b8      	cbz	r0, 196e6 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   19676:	2210      	movs	r2, #16
   19678:	2100      	movs	r1, #0
   1967a:	4668      	mov	r0, sp
   1967c:	f010 f9f8 	bl	29a70 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19680:	2200      	movs	r2, #0
   19682:	210f      	movs	r1, #15
   19684:	4630      	mov	r0, r6
   19686:	f7ff ff31 	bl	194ec <bt_att_create_pdu>
   1968a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1968c:	b368      	cbz	r0, 196ea <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1968e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 196f0 <att_read_mult_req+0x90>
	data.chan = chan;
   19692:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19694:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19698:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1969c:	89ab      	ldrh	r3, [r5, #12]
   1969e:	2b01      	cmp	r3, #1
   196a0:	d804      	bhi.n	196ac <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   196a2:	9902      	ldr	r1, [sp, #8]
   196a4:	4620      	mov	r0, r4
   196a6:	f7ff fcd3 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
   196aa:	e018      	b.n	196de <att_read_mult_req+0x7e>
   196ac:	4638      	mov	r0, r7
   196ae:	f012 f979 	bl	2b9a4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   196b2:	466b      	mov	r3, sp
   196b4:	464a      	mov	r2, r9
   196b6:	4601      	mov	r1, r0
   196b8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   196ba:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   196be:	f010 ffce 	bl	2a65e <bt_gatt_foreach_attr>
		if (data.err) {
   196c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   196c6:	2b00      	cmp	r3, #0
   196c8:	d0e8      	beq.n	1969c <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   196ca:	9802      	ldr	r0, [sp, #8]
   196cc:	f003 feba 	bl	1d444 <net_buf_unref>
	if (!req) {
   196d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   196d4:	4632      	mov	r2, r6
   196d6:	210e      	movs	r1, #14
   196d8:	4620      	mov	r0, r4
   196da:	f011 fa2e 	bl	2ab3a <send_err_rsp.part.0>
	return 0;
   196de:	2000      	movs	r0, #0
}
   196e0:	b005      	add	sp, #20
   196e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   196e6:	2012      	movs	r0, #18
   196e8:	e7fa      	b.n	196e0 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   196ea:	200e      	movs	r0, #14
   196ec:	e7f8      	b.n	196e0 <att_read_mult_req+0x80>
   196ee:	bf00      	nop
   196f0:	0002aae7 	.word	0x0002aae7

000196f4 <att_read_rsp>:
{
   196f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   196f8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   196fc:	4605      	mov	r5, r0
   196fe:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19700:	4640      	mov	r0, r8
   19702:	2101      	movs	r1, #1
{
   19704:	4614      	mov	r4, r2
   19706:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19708:	f011 fd08 	bl	2b11c <bt_gatt_change_aware>
   1970c:	b388      	cbz	r0, 19772 <att_read_rsp+0x7e>
	if (!handle) {
   1970e:	b396      	cbz	r6, 19776 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   19710:	2210      	movs	r2, #16
   19712:	2100      	movs	r1, #0
   19714:	4668      	mov	r0, sp
   19716:	f010 f9ab 	bl	29a70 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1971a:	2200      	movs	r2, #0
   1971c:	4621      	mov	r1, r4
   1971e:	4640      	mov	r0, r8
   19720:	f7ff fee4 	bl	194ec <bt_att_create_pdu>
   19724:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19726:	b340      	cbz	r0, 1977a <att_read_rsp+0x86>
	data.offset = offset;
   19728:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1972c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19730:	2301      	movs	r3, #1
   19732:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19736:	4a12      	ldr	r2, [pc, #72]	; (19780 <att_read_rsp+0x8c>)
	data.chan = chan;
   19738:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1973a:	466b      	mov	r3, sp
   1973c:	4631      	mov	r1, r6
   1973e:	4630      	mov	r0, r6
   19740:	f010 ff8d 	bl	2a65e <bt_gatt_foreach_attr>
	if (data.err) {
   19744:	f89d 400c 	ldrb.w	r4, [sp, #12]
   19748:	b174      	cbz	r4, 19768 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1974a:	9802      	ldr	r0, [sp, #8]
   1974c:	f003 fe7a 	bl	1d444 <net_buf_unref>
	if (!req) {
   19750:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19754:	4632      	mov	r2, r6
   19756:	4639      	mov	r1, r7
   19758:	4628      	mov	r0, r5
   1975a:	f011 f9ee 	bl	2ab3a <send_err_rsp.part.0>
		return 0;
   1975e:	2400      	movs	r4, #0
}
   19760:	4620      	mov	r0, r4
   19762:	b004      	add	sp, #16
   19764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19768:	9902      	ldr	r1, [sp, #8]
   1976a:	4628      	mov	r0, r5
   1976c:	f7ff fc70 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19770:	e7f6      	b.n	19760 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19772:	2412      	movs	r4, #18
   19774:	e7f4      	b.n	19760 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19776:	2401      	movs	r4, #1
   19778:	e7f2      	b.n	19760 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1977a:	240e      	movs	r4, #14
   1977c:	e7f0      	b.n	19760 <att_read_rsp+0x6c>
   1977e:	bf00      	nop
   19780:	0002aae7 	.word	0x0002aae7

00019784 <att_read_type_req>:
{
   19784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19788:	7b0c      	ldrb	r4, [r1, #12]
   1978a:	3c04      	subs	r4, #4
   1978c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1978e:	2c02      	cmp	r4, #2
{
   19790:	4605      	mov	r5, r0
   19792:	b08c      	sub	sp, #48	; 0x30
   19794:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19796:	d001      	beq.n	1979c <att_read_type_req+0x18>
   19798:	2c10      	cmp	r4, #16
   1979a:	d14f      	bne.n	1983c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1979c:	2104      	movs	r1, #4
   1979e:	3008      	adds	r0, #8
   197a0:	f003 ff5e 	bl	1d660 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   197a4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   197a8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   197aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   197ac:	1d01      	adds	r1, r0, #4
   197ae:	4622      	mov	r2, r4
   197b0:	4640      	mov	r0, r8
   197b2:	f010 fa4a 	bl	29c4a <bt_uuid_create>
   197b6:	b188      	cbz	r0, 197dc <att_read_type_req+0x58>
	if (!start || !end) {
   197b8:	b19e      	cbz	r6, 197e2 <att_read_type_req+0x5e>
   197ba:	b18f      	cbz	r7, 197e0 <att_read_type_req+0x5c>
	if (start > end) {
   197bc:	42be      	cmp	r6, r7
   197be:	d810      	bhi.n	197e2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   197c0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   197c2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   197c4:	2100      	movs	r1, #0
   197c6:	eb0d 0002 	add.w	r0, sp, r2
   197ca:	f010 f951 	bl	29a70 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   197ce:	2201      	movs	r2, #1
   197d0:	2109      	movs	r1, #9
   197d2:	4620      	mov	r0, r4
   197d4:	f7ff fe8a 	bl	194ec <bt_att_create_pdu>
   197d8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   197da:	b968      	cbnz	r0, 197f8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   197dc:	240e      	movs	r4, #14
   197de:	e007      	b.n	197f0 <att_read_type_req+0x6c>
			*err = 0U;
   197e0:	463e      	mov	r6, r7
	if (!req) {
   197e2:	2301      	movs	r3, #1
   197e4:	4632      	mov	r2, r6
   197e6:	2108      	movs	r1, #8
   197e8:	4628      	mov	r0, r5
   197ea:	f011 f9a6 	bl	2ab3a <send_err_rsp.part.0>
		return 0;
   197ee:	2400      	movs	r4, #0
}
   197f0:	4620      	mov	r0, r4
   197f2:	b00c      	add	sp, #48	; 0x30
   197f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   197f8:	2101      	movs	r1, #1
   197fa:	3008      	adds	r0, #8
	data.uuid = uuid;
   197fc:	e9cd 5806 	strd	r5, r8, [sp, #24]
   19800:	f003 ff50 	bl	1d6a4 <net_buf_simple_add>
	data.rsp->len = 0U;
   19804:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19808:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1980a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1980c:	4a0c      	ldr	r2, [pc, #48]	; (19840 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   1980e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19812:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19814:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19818:	4630      	mov	r0, r6
   1981a:	ab06      	add	r3, sp, #24
   1981c:	f010 ff1f 	bl	2a65e <bt_gatt_foreach_attr>
	if (data.err) {
   19820:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   19824:	b12c      	cbz	r4, 19832 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   19826:	9808      	ldr	r0, [sp, #32]
   19828:	f003 fe0c 	bl	1d444 <net_buf_unref>
	if (!req) {
   1982c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19830:	e7d8      	b.n	197e4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19832:	9908      	ldr	r1, [sp, #32]
   19834:	4628      	mov	r0, r5
   19836:	f7ff fc0b 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1983a:	e7d9      	b.n	197f0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1983c:	2404      	movs	r4, #4
   1983e:	e7d7      	b.n	197f0 <att_read_type_req+0x6c>
   19840:	00018c51 	.word	0x00018c51

00019844 <att_find_type_req>:
{
   19844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19848:	4688      	mov	r8, r1
   1984a:	b086      	sub	sp, #24
   1984c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1984e:	2106      	movs	r1, #6
   19850:	f108 0008 	add.w	r0, r8, #8
   19854:	f003 ff04 	bl	1d660 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19858:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1985a:	b317      	cbz	r7, 198a2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1985c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19860:	f1b9 0f00 	cmp.w	r9, #0
   19864:	d01c      	beq.n	198a0 <att_find_type_req+0x5c>
	if (start > end) {
   19866:	45b9      	cmp	r9, r7
   19868:	d31b      	bcc.n	198a2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1986a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1986c:	f8ad 3002 	strh.w	r3, [sp, #2]
   19870:	2400      	movs	r4, #0
   19872:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19876:	a901      	add	r1, sp, #4
   19878:	4668      	mov	r0, sp
	value = buf->data;
   1987a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1987e:	f88d 4000 	strb.w	r4, [sp]
   19882:	f88d 4004 	strb.w	r4, [sp, #4]
   19886:	f8ad 3006 	strh.w	r3, [sp, #6]
   1988a:	f010 f9b4 	bl	29bf6 <bt_uuid_cmp>
   1988e:	4606      	mov	r6, r0
   19890:	b190      	cbz	r0, 198b8 <att_find_type_req+0x74>
	if (!req) {
   19892:	230a      	movs	r3, #10
   19894:	463a      	mov	r2, r7
   19896:	2106      	movs	r1, #6
   19898:	4628      	mov	r0, r5
   1989a:	f011 f94e 	bl	2ab3a <send_err_rsp.part.0>
		return 0;
   1989e:	e007      	b.n	198b0 <att_find_type_req+0x6c>
			*err = 0U;
   198a0:	464f      	mov	r7, r9
	if (!req) {
   198a2:	2301      	movs	r3, #1
   198a4:	463a      	mov	r2, r7
   198a6:	2106      	movs	r1, #6
   198a8:	4628      	mov	r0, r5
   198aa:	f011 f946 	bl	2ab3a <send_err_rsp.part.0>
		return 0;
   198ae:	2400      	movs	r4, #0
}
   198b0:	4620      	mov	r0, r4
   198b2:	b006      	add	sp, #24
   198b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   198b8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   198bc:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   198c0:	4601      	mov	r1, r0
   198c2:	2214      	movs	r2, #20
   198c4:	a801      	add	r0, sp, #4
   198c6:	f010 f8d3 	bl	29a70 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   198ca:	4632      	mov	r2, r6
   198cc:	2107      	movs	r1, #7
   198ce:	4640      	mov	r0, r8
   198d0:	f7ff fe0c 	bl	194ec <bt_att_create_pdu>
   198d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   198d6:	b1d8      	cbz	r0, 19910 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   198d8:	230a      	movs	r3, #10
   198da:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   198de:	4a0d      	ldr	r2, [pc, #52]	; (19914 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   198e0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   198e4:	ab01      	add	r3, sp, #4
   198e6:	4649      	mov	r1, r9
   198e8:	4638      	mov	r0, r7
	data.value = value;
   198ea:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   198ee:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   198f0:	f010 feb5 	bl	2a65e <bt_gatt_foreach_attr>
	if (data.err) {
   198f4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   198f8:	b12c      	cbz	r4, 19906 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   198fa:	9802      	ldr	r0, [sp, #8]
   198fc:	f003 fda2 	bl	1d444 <net_buf_unref>
	if (!req) {
   19900:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19904:	e7ce      	b.n	198a4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19906:	9902      	ldr	r1, [sp, #8]
   19908:	4628      	mov	r0, r5
   1990a:	f7ff fba1 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1990e:	e7cf      	b.n	198b0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19910:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19912:	e7cd      	b.n	198b0 <att_find_type_req+0x6c>
   19914:	00018cf9 	.word	0x00018cf9

00019918 <att_find_info_req>:
{
   19918:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1991a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1991c:	881e      	ldrh	r6, [r3, #0]
{
   1991e:	b085      	sub	sp, #20
   19920:	4605      	mov	r5, r0
	if (!start || !end) {
   19922:	b19e      	cbz	r6, 1994c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19924:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   19926:	b184      	cbz	r4, 1994a <att_find_info_req+0x32>
	if (start > end) {
   19928:	42a6      	cmp	r6, r4
   1992a:	d80f      	bhi.n	1994c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1992c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1992e:	2210      	movs	r2, #16
   19930:	2100      	movs	r1, #0
   19932:	4668      	mov	r0, sp
   19934:	f010 f89c 	bl	29a70 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19938:	2200      	movs	r2, #0
   1993a:	2105      	movs	r1, #5
   1993c:	4638      	mov	r0, r7
   1993e:	f7ff fdd5 	bl	194ec <bt_att_create_pdu>
   19942:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19944:	b958      	cbnz	r0, 1995e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19946:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19948:	e007      	b.n	1995a <att_find_info_req+0x42>
			*err = 0U;
   1994a:	4626      	mov	r6, r4
	if (!req) {
   1994c:	2301      	movs	r3, #1
   1994e:	4632      	mov	r2, r6
   19950:	2104      	movs	r1, #4
   19952:	4628      	mov	r0, r5
   19954:	f011 f8f1 	bl	2ab3a <send_err_rsp.part.0>
	return 0;
   19958:	2000      	movs	r0, #0
}
   1995a:	b005      	add	sp, #20
   1995c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1995e:	4621      	mov	r1, r4
   19960:	4a08      	ldr	r2, [pc, #32]	; (19984 <att_find_info_req+0x6c>)
	data.chan = chan;
   19962:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19964:	466b      	mov	r3, sp
   19966:	4630      	mov	r0, r6
   19968:	f010 fe79 	bl	2a65e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1996c:	9c02      	ldr	r4, [sp, #8]
   1996e:	b924      	cbnz	r4, 1997a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   19970:	9801      	ldr	r0, [sp, #4]
   19972:	f003 fd67 	bl	1d444 <net_buf_unref>
	if (!req) {
   19976:	230a      	movs	r3, #10
   19978:	e7e9      	b.n	1994e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1997a:	9901      	ldr	r1, [sp, #4]
   1997c:	4628      	mov	r0, r5
   1997e:	f7ff fb67 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
   19982:	e7e9      	b.n	19958 <att_find_info_req+0x40>
   19984:	0002a78b 	.word	0x0002a78b

00019988 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19988:	b513      	push	{r0, r1, r4, lr}
   1998a:	4602      	mov	r2, r0
   1998c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1998e:	4808      	ldr	r0, [pc, #32]	; (199b0 <bt_att_req_alloc+0x28>)
   19990:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   19992:	2400      	movs	r4, #0
   19994:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19996:	f007 fa41 	bl	20e1c <k_mem_slab_alloc>
   1999a:	4601      	mov	r1, r0
   1999c:	b930      	cbnz	r0, 199ac <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1999e:	9801      	ldr	r0, [sp, #4]
   199a0:	221c      	movs	r2, #28
   199a2:	f010 f865 	bl	29a70 <memset>

	return req;
   199a6:	9801      	ldr	r0, [sp, #4]
}
   199a8:	b002      	add	sp, #8
   199aa:	bd10      	pop	{r4, pc}
		return NULL;
   199ac:	4620      	mov	r0, r4
   199ae:	e7fb      	b.n	199a8 <bt_att_req_alloc+0x20>
   199b0:	20000780 	.word	0x20000780

000199b4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   199b4:	b507      	push	{r0, r1, r2, lr}
   199b6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   199b8:	6880      	ldr	r0, [r0, #8]
   199ba:	b120      	cbz	r0, 199c6 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   199bc:	f003 fd42 	bl	1d444 <net_buf_unref>
		req->buf = NULL;
   199c0:	9b01      	ldr	r3, [sp, #4]
   199c2:	2200      	movs	r2, #0
   199c4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   199c6:	4803      	ldr	r0, [pc, #12]	; (199d4 <bt_att_req_free+0x20>)
   199c8:	a901      	add	r1, sp, #4
   199ca:	f007 fa93 	bl	20ef4 <k_mem_slab_free>
}
   199ce:	b003      	add	sp, #12
   199d0:	f85d fb04 	ldr.w	pc, [sp], #4
   199d4:	20000780 	.word	0x20000780

000199d8 <att_handle_rsp>:
{
   199d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199dc:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   199de:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   199e2:	460f      	mov	r7, r1
   199e4:	4690      	mov	r8, r2
   199e6:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   199e8:	f008 fcea 	bl	223c0 <k_work_cancel_delayable>
	if (!chan->req) {
   199ec:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
   199f0:	b9e5      	cbnz	r5, 19a2c <att_handle_rsp+0x54>
   199f2:	4919      	ldr	r1, [pc, #100]	; (19a58 <att_handle_rsp+0x80>)
   199f4:	4819      	ldr	r0, [pc, #100]	; (19a5c <att_handle_rsp+0x84>)
   199f6:	1a40      	subs	r0, r0, r1
   199f8:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   199fa:	0180      	lsls	r0, r0, #6
   199fc:	f040 0102 	orr.w	r1, r0, #2
   19a00:	4817      	ldr	r0, [pc, #92]	; (19a60 <att_handle_rsp+0x88>)
   19a02:	f00e f84b 	bl	27a9c <log_0>
	bt_att_func_t func = NULL;
   19a06:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   19a08:	6820      	ldr	r0, [r4, #0]
   19a0a:	f010 ffd5 	bl	2a9b8 <att_req_send_process>
	if (func) {
   19a0e:	f1ba 0f00 	cmp.w	sl, #0
   19a12:	d007      	beq.n	19a24 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   19a14:	6820      	ldr	r0, [r4, #0]
   19a16:	f8cd 9000 	str.w	r9, [sp]
   19a1a:	6800      	ldr	r0, [r0, #0]
   19a1c:	4643      	mov	r3, r8
   19a1e:	463a      	mov	r2, r7
   19a20:	4631      	mov	r1, r6
   19a22:	47d0      	blx	sl
}
   19a24:	2000      	movs	r0, #0
   19a26:	b003      	add	sp, #12
   19a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19a2c:	4b0d      	ldr	r3, [pc, #52]	; (19a64 <att_handle_rsp+0x8c>)
   19a2e:	429d      	cmp	r5, r3
   19a30:	f04f 0b00 	mov.w	fp, #0
   19a34:	d103      	bne.n	19a3e <att_handle_rsp+0x66>
		chan->req = NULL;
   19a36:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   19a3a:	46da      	mov	sl, fp
		goto process;
   19a3c:	e7e4      	b.n	19a08 <att_handle_rsp+0x30>
	func = chan->req->func;
   19a3e:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   19a42:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   19a46:	4628      	mov	r0, r5
	params = chan->req->user_data;
   19a48:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   19a4c:	f7ff ffb2 	bl	199b4 <bt_att_req_free>
	chan->req = NULL;
   19a50:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
   19a54:	e7d8      	b.n	19a08 <att_handle_rsp+0x30>
   19a56:	bf00      	nop
   19a58:	0002ccb8 	.word	0x0002ccb8
   19a5c:	0002ccc0 	.word	0x0002ccc0
   19a60:	00030351 	.word	0x00030351
   19a64:	20003074 	.word	0x20003074

00019a68 <bt_att_disconnected>:
{
   19a68:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   19a6a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   19a6e:	b085      	sub	sp, #20
   19a70:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19a72:	b385      	cbz	r5, 19ad6 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19a74:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   19a78:	f105 0028 	add.w	r0, r5, #40	; 0x28
   19a7c:	f010 fd87 	bl	2a58e <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19a80:	f1a4 0608 	sub.w	r6, r4, #8
   19a84:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   19a88:	2200      	movs	r2, #0
   19a8a:	2300      	movs	r3, #0
   19a8c:	4638      	mov	r0, r7
   19a8e:	f003 fc47 	bl	1d320 <net_buf_get>
   19a92:	4602      	mov	r2, r0
   19a94:	bb08      	cbnz	r0, 19ada <bt_att_disconnected+0x72>
	if (chan->req) {
   19a96:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   19a9a:	b123      	cbz	r3, 19aa6 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19a9c:	4601      	mov	r1, r0
   19a9e:	230e      	movs	r3, #14
   19aa0:	4630      	mov	r0, r6
   19aa2:	f7ff ff99 	bl	199d8 <att_handle_rsp>
	chan->att = NULL;
   19aa6:	2300      	movs	r3, #0
   19aa8:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   19aac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19aae:	b993      	cbnz	r3, 19ad6 <bt_att_disconnected+0x6e>
	att_reset(att);
   19ab0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19ab2:	9803      	ldr	r0, [sp, #12]
   19ab4:	2200      	movs	r2, #0
   19ab6:	2300      	movs	r3, #0
   19ab8:	300c      	adds	r0, #12
   19aba:	f003 fc31 	bl	1d320 <net_buf_get>
   19abe:	b978      	cbnz	r0, 19ae0 <bt_att_disconnected+0x78>
	att->conn = NULL;
   19ac0:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19ac2:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   19ac4:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19ac6:	b976      	cbnz	r6, 19ae6 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   19ac8:	4813      	ldr	r0, [pc, #76]	; (19b18 <bt_att_disconnected+0xb0>)
   19aca:	a903      	add	r1, sp, #12
   19acc:	f007 fa12 	bl	20ef4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   19ad0:	6820      	ldr	r0, [r4, #0]
   19ad2:	f001 fc89 	bl	1b3e8 <bt_gatt_disconnected>
}
   19ad6:	b005      	add	sp, #20
   19ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   19ada:	f003 fcb3 	bl	1d444 <net_buf_unref>
   19ade:	e7d3      	b.n	19a88 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   19ae0:	f003 fcb0 	bl	1d444 <net_buf_unref>
   19ae4:	e7e5      	b.n	19ab2 <bt_att_disconnected+0x4a>
	return node->next;
   19ae6:	6835      	ldr	r5, [r6, #0]
   19ae8:	2d00      	cmp	r5, #0
   19aea:	bf38      	it	cc
   19aec:	2500      	movcc	r5, #0
		if (req->func) {
   19aee:	6877      	ldr	r7, [r6, #4]
   19af0:	b137      	cbz	r7, 19b00 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19af2:	69b3      	ldr	r3, [r6, #24]
   19af4:	9300      	str	r3, [sp, #0]
   19af6:	2300      	movs	r3, #0
   19af8:	461a      	mov	r2, r3
   19afa:	210e      	movs	r1, #14
   19afc:	4618      	mov	r0, r3
   19afe:	47b8      	blx	r7
		bt_att_req_free(req);
   19b00:	4630      	mov	r0, r6
   19b02:	f7ff ff57 	bl	199b4 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   19b06:	2d00      	cmp	r5, #0
   19b08:	d0de      	beq.n	19ac8 <bt_att_disconnected+0x60>
   19b0a:	682b      	ldr	r3, [r5, #0]
   19b0c:	2b00      	cmp	r3, #0
   19b0e:	bf38      	it	cc
   19b10:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19b12:	462e      	mov	r6, r5
   19b14:	461d      	mov	r5, r3
   19b16:	e7ea      	b.n	19aee <bt_att_disconnected+0x86>
   19b18:	20000740 	.word	0x20000740

00019b1c <att_timeout>:
   19b1c:	4b08      	ldr	r3, [pc, #32]	; (19b40 <att_timeout+0x24>)
   19b1e:	4909      	ldr	r1, [pc, #36]	; (19b44 <att_timeout+0x28>)
{
   19b20:	b510      	push	{r4, lr}
   19b22:	1ac9      	subs	r1, r1, r3
   19b24:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   19b26:	0189      	lsls	r1, r1, #6
{
   19b28:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   19b2a:	f041 0101 	orr.w	r1, r1, #1
   19b2e:	4806      	ldr	r0, [pc, #24]	; (19b48 <att_timeout+0x2c>)
   19b30:	f00d ffb4 	bl	27a9c <log_0>
	bt_att_disconnected(&chan->chan.chan);
   19b34:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   19b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   19b3c:	f7ff bf94 	b.w	19a68 <bt_att_disconnected>
   19b40:	0002ccb8 	.word	0x0002ccb8
   19b44:	0002ccc0 	.word	0x0002ccc0
   19b48:	00030368 	.word	0x00030368

00019b4c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   19b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19b50:	460c      	mov	r4, r1
   19b52:	4617      	mov	r7, r2
   19b54:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   19b56:	4605      	mov	r5, r0
   19b58:	b958      	cbnz	r0, 19b72 <bt_att_send+0x26>
   19b5a:	492f      	ldr	r1, [pc, #188]	; (19c18 <bt_att_send+0xcc>)
   19b5c:	482f      	ldr	r0, [pc, #188]	; (19c1c <bt_att_send+0xd0>)
   19b5e:	4a30      	ldr	r2, [pc, #192]	; (19c20 <bt_att_send+0xd4>)
   19b60:	f640 33d6 	movw	r3, #3030	; 0xbd6
   19b64:	f00d fcc7 	bl	274f6 <printk>
   19b68:	482d      	ldr	r0, [pc, #180]	; (19c20 <bt_att_send+0xd4>)
   19b6a:	f640 31d6 	movw	r1, #3030	; 0xbd6
   19b6e:	f00d ff67 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   19b72:	b95c      	cbnz	r4, 19b8c <bt_att_send+0x40>
   19b74:	492b      	ldr	r1, [pc, #172]	; (19c24 <bt_att_send+0xd8>)
   19b76:	4829      	ldr	r0, [pc, #164]	; (19c1c <bt_att_send+0xd0>)
   19b78:	4a29      	ldr	r2, [pc, #164]	; (19c20 <bt_att_send+0xd4>)
   19b7a:	f640 33d7 	movw	r3, #3031	; 0xbd7
   19b7e:	f00d fcba 	bl	274f6 <printk>
   19b82:	4827      	ldr	r0, [pc, #156]	; (19c20 <bt_att_send+0xd4>)
   19b84:	f640 31d7 	movw	r1, #3031	; 0xbd7
   19b88:	f00d ff5a 	bl	27a40 <assert_post_action>

	att = att_get(conn);
   19b8c:	4628      	mov	r0, r5
   19b8e:	f7ff fa1f 	bl	18fd0 <att_get>
	if (!att) {
   19b92:	4606      	mov	r6, r0
   19b94:	b938      	cbnz	r0, 19ba6 <bt_att_send+0x5a>
		net_buf_unref(buf);
   19b96:	4620      	mov	r0, r4
   19b98:	f003 fc54 	bl	1d444 <net_buf_unref>
		return -ENOTCONN;
   19b9c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19ba0:	b002      	add	sp, #8
   19ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   19ba6:	b147      	cbz	r7, 19bba <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   19ba8:	f8cd 8000 	str.w	r8, [sp]
   19bac:	463b      	mov	r3, r7
   19bae:	4622      	mov	r2, r4
   19bb0:	2104      	movs	r1, #4
   19bb2:	4628      	mov	r0, r5
   19bb4:	f010 fca7 	bl	2a506 <bt_l2cap_send_cb>
   19bb8:	e7f2      	b.n	19ba0 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   19bba:	f100 070c 	add.w	r7, r0, #12
   19bbe:	4621      	mov	r1, r4
   19bc0:	4638      	mov	r0, r7
   19bc2:	f003 fc0b 	bl	1d3dc <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   19bc6:	2200      	movs	r2, #0
   19bc8:	2300      	movs	r3, #0
   19bca:	4638      	mov	r0, r7
   19bcc:	f003 fba8 	bl	1d320 <net_buf_get>
	if (!buf) {
   19bd0:	4605      	mov	r5, r0
   19bd2:	b908      	cbnz	r0, 19bd8 <bt_att_send+0x8c>
	return 0;
   19bd4:	2000      	movs	r0, #0
   19bd6:	e7e3      	b.n	19ba0 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19bd8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   19bda:	b1c3      	cbz	r3, 19c0e <bt_att_send+0xc2>
   19bdc:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   19be0:	d015      	beq.n	19c0e <bt_att_send+0xc2>
   19be2:	681c      	ldr	r4, [r3, #0]
   19be4:	b10c      	cbz	r4, 19bea <bt_att_send+0x9e>
   19be6:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   19bea:	2200      	movs	r2, #0
   19bec:	4629      	mov	r1, r5
   19bee:	f7ff f935 	bl	18e5c <chan_send>
		if (err >= 0) {
   19bf2:	2800      	cmp	r0, #0
   19bf4:	daee      	bge.n	19bd4 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19bf6:	b154      	cbz	r4, 19c0e <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19bf8:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   19bfc:	d004      	beq.n	19c08 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19bfe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   19c02:	b10b      	cbz	r3, 19c08 <bt_att_send+0xbc>
   19c04:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   19c08:	4620      	mov	r0, r4
   19c0a:	461c      	mov	r4, r3
   19c0c:	e7ed      	b.n	19bea <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   19c0e:	4629      	mov	r1, r5
   19c10:	4638      	mov	r0, r7
   19c12:	f012 fd28 	bl	2c666 <k_queue_prepend>
   19c16:	e7dd      	b.n	19bd4 <bt_att_send+0x88>
   19c18:	0002ff8b 	.word	0x0002ff8b
   19c1c:	0002dcd3 	.word	0x0002dcd3
   19c20:	0003018b 	.word	0x0003018b
   19c24:	0002f1b3 	.word	0x0002f1b3

00019c28 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   19c28:	b538      	push	{r3, r4, r5, lr}
   19c2a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   19c2c:	4605      	mov	r5, r0
   19c2e:	b958      	cbnz	r0, 19c48 <bt_att_req_send+0x20>
   19c30:	4916      	ldr	r1, [pc, #88]	; (19c8c <bt_att_req_send+0x64>)
   19c32:	4817      	ldr	r0, [pc, #92]	; (19c90 <bt_att_req_send+0x68>)
   19c34:	4a17      	ldr	r2, [pc, #92]	; (19c94 <bt_att_req_send+0x6c>)
   19c36:	f640 33f3 	movw	r3, #3059	; 0xbf3
   19c3a:	f00d fc5c 	bl	274f6 <printk>
   19c3e:	4815      	ldr	r0, [pc, #84]	; (19c94 <bt_att_req_send+0x6c>)
   19c40:	f640 31f3 	movw	r1, #3059	; 0xbf3
   19c44:	f00d fefc 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(req);
   19c48:	b95c      	cbnz	r4, 19c62 <bt_att_req_send+0x3a>
   19c4a:	4913      	ldr	r1, [pc, #76]	; (19c98 <bt_att_req_send+0x70>)
   19c4c:	4810      	ldr	r0, [pc, #64]	; (19c90 <bt_att_req_send+0x68>)
   19c4e:	4a11      	ldr	r2, [pc, #68]	; (19c94 <bt_att_req_send+0x6c>)
   19c50:	f640 33f4 	movw	r3, #3060	; 0xbf4
   19c54:	f00d fc4f 	bl	274f6 <printk>
   19c58:	480e      	ldr	r0, [pc, #56]	; (19c94 <bt_att_req_send+0x6c>)
   19c5a:	f640 31f4 	movw	r1, #3060	; 0xbf4
   19c5e:	f00d feef 	bl	27a40 <assert_post_action>

	att = att_get(conn);
   19c62:	4628      	mov	r0, r5
   19c64:	f7ff f9b4 	bl	18fd0 <att_get>
	if (!att) {
   19c68:	b160      	cbz	r0, 19c84 <bt_att_req_send+0x5c>
	parent->next = child;
   19c6a:	2300      	movs	r3, #0
   19c6c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   19c6e:	6883      	ldr	r3, [r0, #8]
   19c70:	b92b      	cbnz	r3, 19c7e <bt_att_req_send+0x56>
	list->head = node;
   19c72:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   19c76:	f010 fe9f 	bl	2a9b8 <att_req_send_process>

	return 0;
   19c7a:	2000      	movs	r0, #0
}
   19c7c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   19c7e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19c80:	6084      	str	r4, [r0, #8]
}
   19c82:	e7f8      	b.n	19c76 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   19c84:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19c88:	e7f8      	b.n	19c7c <bt_att_req_send+0x54>
   19c8a:	bf00      	nop
   19c8c:	0002ff8b 	.word	0x0002ff8b
   19c90:	0002dcd3 	.word	0x0002dcd3
   19c94:	0003018b 	.word	0x0003018b
   19c98:	000301d0 	.word	0x000301d0

00019c9c <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19c9c:	490a      	ldr	r1, [pc, #40]	; (19cc8 <db_hash_store+0x2c>)
   19c9e:	480b      	ldr	r0, [pc, #44]	; (19ccc <db_hash_store+0x30>)
{
   19ca0:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19ca2:	2210      	movs	r2, #16
   19ca4:	f7f9 f8a4 	bl	12df0 <settings_save_one>
	if (err) {
   19ca8:	4601      	mov	r1, r0
   19caa:	b158      	cbz	r0, 19cc4 <db_hash_store+0x28>
   19cac:	4b08      	ldr	r3, [pc, #32]	; (19cd0 <db_hash_store+0x34>)
   19cae:	4a09      	ldr	r2, [pc, #36]	; (19cd4 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   19cb0:	4809      	ldr	r0, [pc, #36]	; (19cd8 <db_hash_store+0x3c>)
   19cb2:	1ad2      	subs	r2, r2, r3
   19cb4:	08d2      	lsrs	r2, r2, #3
   19cb6:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
   19cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   19cbc:	f042 0201 	orr.w	r2, r2, #1
   19cc0:	f00d bef9 	b.w	27ab6 <log_1>
}
   19cc4:	bd08      	pop	{r3, pc}
   19cc6:	bf00      	nop
   19cc8:	20001a08 	.word	0x20001a08
   19ccc:	0003037b 	.word	0x0003037b
   19cd0:	0002ccb8 	.word	0x0002ccb8
   19cd4:	0002cce0 	.word	0x0002cce0
   19cd8:	00030383 	.word	0x00030383

00019cdc <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   19cdc:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19cde:	490b      	ldr	r1, [pc, #44]	; (19d0c <db_hash_set+0x30>)
{
   19ce0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19ce2:	4618      	mov	r0, r3
   19ce4:	2210      	movs	r2, #16
   19ce6:	47a0      	blx	r4
	if (len < 0) {
   19ce8:	1e04      	subs	r4, r0, #0
   19cea:	da0c      	bge.n	19d06 <db_hash_set+0x2a>
   19cec:	4a08      	ldr	r2, [pc, #32]	; (19d10 <db_hash_set+0x34>)
   19cee:	4b09      	ldr	r3, [pc, #36]	; (19d14 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   19cf0:	4809      	ldr	r0, [pc, #36]	; (19d18 <db_hash_set+0x3c>)
   19cf2:	1ad2      	subs	r2, r2, r3
   19cf4:	08d2      	lsrs	r2, r2, #3
   19cf6:	0192      	lsls	r2, r2, #6
   19cf8:	f042 0201 	orr.w	r2, r2, #1
   19cfc:	4621      	mov	r1, r4
   19cfe:	f00d feda 	bl	27ab6 <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   19d02:	4620      	mov	r0, r4
   19d04:	bd10      	pop	{r4, pc}
	return 0;
   19d06:	2400      	movs	r4, #0
   19d08:	e7fb      	b.n	19d02 <db_hash_set+0x26>
   19d0a:	bf00      	nop
   19d0c:	20001a18 	.word	0x20001a18
   19d10:	0002cce0 	.word	0x0002cce0
   19d14:	0002ccb8 	.word	0x0002ccb8
   19d18:	000303a9 	.word	0x000303a9

00019d1c <sc_store>:
{
   19d1c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   19d1e:	4605      	mov	r5, r0
{
   19d20:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   19d22:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   19d26:	4604      	mov	r4, r0
	if (cfg->id) {
   19d28:	b1fa      	cbz	r2, 19d6a <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19d2a:	ae02      	add	r6, sp, #8
   19d2c:	2104      	movs	r1, #4
   19d2e:	4630      	mov	r0, r6
   19d30:	f00d fb45 	bl	273be <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   19d34:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   19d36:	4a0e      	ldr	r2, [pc, #56]	; (19d70 <sc_store+0x54>)
   19d38:	462b      	mov	r3, r5
   19d3a:	2124      	movs	r1, #36	; 0x24
   19d3c:	a803      	add	r0, sp, #12
   19d3e:	f7fb fb53 	bl	153e8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   19d42:	f104 0108 	add.w	r1, r4, #8
   19d46:	2204      	movs	r2, #4
   19d48:	a803      	add	r0, sp, #12
   19d4a:	f7f9 f851 	bl	12df0 <settings_save_one>
	if (err) {
   19d4e:	4601      	mov	r1, r0
   19d50:	b148      	cbz	r0, 19d66 <sc_store+0x4a>
   19d52:	4a08      	ldr	r2, [pc, #32]	; (19d74 <sc_store+0x58>)
   19d54:	4b08      	ldr	r3, [pc, #32]	; (19d78 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   19d56:	4809      	ldr	r0, [pc, #36]	; (19d7c <sc_store+0x60>)
   19d58:	1ad2      	subs	r2, r2, r3
   19d5a:	08d2      	lsrs	r2, r2, #3
   19d5c:	0192      	lsls	r2, r2, #6
   19d5e:	f042 0201 	orr.w	r2, r2, #1
   19d62:	f00d fea8 	bl	27ab6 <log_1>
}
   19d66:	b00c      	add	sp, #48	; 0x30
   19d68:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   19d6a:	9200      	str	r2, [sp, #0]
   19d6c:	e7e3      	b.n	19d36 <sc_store+0x1a>
   19d6e:	bf00      	nop
   19d70:	00030735 	.word	0x00030735
   19d74:	0002cce0 	.word	0x0002cce0
   19d78:	0002ccb8 	.word	0x0002ccb8
   19d7c:	000303ca 	.word	0x000303ca

00019d80 <db_hash_commit>:

static int db_hash_commit(void)
{
   19d80:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d82:	2108      	movs	r1, #8
   19d84:	4804      	ldr	r0, [pc, #16]	; (19d98 <db_hash_commit+0x18>)
   19d86:	f011 f80c 	bl	2ada2 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   19d8a:	2200      	movs	r2, #0
   19d8c:	2300      	movs	r3, #0
   19d8e:	4803      	ldr	r0, [pc, #12]	; (19d9c <db_hash_commit+0x1c>)
   19d90:	f008 fb10 	bl	223b4 <k_work_reschedule>

	return 0;
}
   19d94:	2000      	movs	r0, #0
   19d96:	bd08      	pop	{r3, pc}
   19d98:	20001ad0 	.word	0x20001ad0
   19d9c:	20001a28 	.word	0x20001a28

00019da0 <ccc_save>:
{
   19da0:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19da2:	4b0c      	ldr	r3, [pc, #48]	; (19dd4 <ccc_save+0x34>)
{
   19da4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19da6:	6882      	ldr	r2, [r0, #8]
   19da8:	429a      	cmp	r2, r3
{
   19daa:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   19dac:	d10f      	bne.n	19dce <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   19dae:	7922      	ldrb	r2, [r4, #4]
   19db0:	6821      	ldr	r1, [r4, #0]
   19db2:	68c0      	ldr	r0, [r0, #12]
   19db4:	f011 f841 	bl	2ae3a <ccc_find_cfg>
	if (!cfg) {
   19db8:	b148      	cbz	r0, 19dce <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   19dba:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   19dbe:	8901      	ldrh	r1, [r0, #8]
   19dc0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   19dc4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   19dc6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   19dc8:	8151      	strh	r1, [r2, #10]
	save->count++;
   19dca:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   19dce:	2001      	movs	r0, #1
   19dd0:	bd38      	pop	{r3, r4, r5, pc}
   19dd2:	bf00      	nop
   19dd4:	00019e8d 	.word	0x00019e8d

00019dd8 <ccc_load>:
{
   19dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19dda:	4b21      	ldr	r3, [pc, #132]	; (19e60 <ccc_load+0x88>)
{
   19ddc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19dde:	6882      	ldr	r2, [r0, #8]
   19de0:	429a      	cmp	r2, r3
   19de2:	d002      	beq.n	19dea <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   19de4:	2001      	movs	r0, #1
}
   19de6:	b002      	add	sp, #8
   19de8:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   19dea:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   19dec:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   19dee:	b94b      	cbnz	r3, 19e04 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   19df0:	7922      	ldrb	r2, [r4, #4]
   19df2:	6821      	ldr	r1, [r4, #0]
   19df4:	4630      	mov	r0, r6
   19df6:	f011 f820 	bl	2ae3a <ccc_find_cfg>
	if (!cfg) {
   19dfa:	2800      	cmp	r0, #0
   19dfc:	d0f2      	beq.n	19de4 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   19dfe:	f010 ffe2 	bl	2adc6 <clear_ccc_cfg>
   19e02:	e7ef      	b.n	19de4 <ccc_load+0xc>
	} else if (!load->count) {
   19e04:	68e0      	ldr	r0, [r4, #12]
   19e06:	2800      	cmp	r0, #0
   19e08:	d0ed      	beq.n	19de6 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   19e0a:	881b      	ldrh	r3, [r3, #0]
   19e0c:	4299      	cmp	r1, r3
   19e0e:	d00a      	beq.n	19e26 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   19e10:	d9e8      	bls.n	19de4 <ccc_load+0xc>
	load->count--;
   19e12:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   19e14:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   19e16:	3801      	subs	r0, #1
	load->entry++;
   19e18:	3304      	adds	r3, #4
	load->count--;
   19e1a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19e1c:	3800      	subs	r0, #0
	load->entry++;
   19e1e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19e20:	bf18      	it	ne
   19e22:	2001      	movne	r0, #1
   19e24:	e7df      	b.n	19de6 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19e26:	7922      	ldrb	r2, [r4, #4]
   19e28:	6821      	ldr	r1, [r4, #0]
   19e2a:	4630      	mov	r0, r6
   19e2c:	f011 f805 	bl	2ae3a <ccc_find_cfg>
	if (!cfg) {
   19e30:	4605      	mov	r5, r0
   19e32:	b980      	cbnz	r0, 19e56 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   19e34:	9000      	str	r0, [sp, #0]
   19e36:	4602      	mov	r2, r0
   19e38:	f8cd 0003 	str.w	r0, [sp, #3]
   19e3c:	4669      	mov	r1, sp
   19e3e:	4630      	mov	r0, r6
   19e40:	f010 fffb 	bl	2ae3a <ccc_find_cfg>
		if (!cfg) {
   19e44:	4605      	mov	r5, r0
   19e46:	2800      	cmp	r0, #0
   19e48:	d0e3      	beq.n	19e12 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   19e4a:	6821      	ldr	r1, [r4, #0]
   19e4c:	3001      	adds	r0, #1
   19e4e:	f010 ffb7 	bl	2adc0 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   19e52:	7923      	ldrb	r3, [r4, #4]
   19e54:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   19e56:	68a3      	ldr	r3, [r4, #8]
   19e58:	885b      	ldrh	r3, [r3, #2]
   19e5a:	812b      	strh	r3, [r5, #8]
   19e5c:	e7d9      	b.n	19e12 <ccc_load+0x3a>
   19e5e:	bf00      	nop
   19e60:	00019e8d 	.word	0x00019e8d

00019e64 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   19e64:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   19e66:	6881      	ldr	r1, [r0, #8]
{
   19e68:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19e6a:	4a07      	ldr	r2, [pc, #28]	; (19e88 <remove_peer_from_attr+0x24>)
   19e6c:	4291      	cmp	r1, r2
   19e6e:	d109      	bne.n	19e84 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   19e70:	791a      	ldrb	r2, [r3, #4]
   19e72:	6819      	ldr	r1, [r3, #0]
   19e74:	68c0      	ldr	r0, [r0, #12]
   19e76:	f010 ffe0 	bl	2ae3a <ccc_find_cfg>
	if (cfg) {
   19e7a:	b118      	cbz	r0, 19e84 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   19e7c:	220a      	movs	r2, #10
   19e7e:	2100      	movs	r1, #0
   19e80:	f00f fdf6 	bl	29a70 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   19e84:	2001      	movs	r0, #1
   19e86:	bd08      	pop	{r3, pc}
   19e88:	00019e8d 	.word	0x00019e8d

00019e8c <bt_gatt_attr_write_ccc>:
{
   19e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19e90:	461f      	mov	r7, r3
   19e92:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   19e96:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   19e9a:	4606      	mov	r6, r0
   19e9c:	4688      	mov	r8, r1
	if (offset) {
   19e9e:	2b00      	cmp	r3, #0
   19ea0:	d14a      	bne.n	19f38 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
   19ea2:	1e7b      	subs	r3, r7, #1
   19ea4:	2b01      	cmp	r3, #1
   19ea6:	d84a      	bhi.n	19f3e <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
   19ea8:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   19eaa:	7815      	ldrb	r5, [r2, #0]
   19eac:	bf18      	it	ne
   19eae:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   19eb0:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   19eb2:	bf0c      	ite	eq
   19eb4:	b2ad      	uxtheq	r5, r5
   19eb6:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   19eba:	f010 ffcd 	bl	2ae58 <find_ccc_cfg>
	if (!cfg) {
   19ebe:	4604      	mov	r4, r0
   19ec0:	b9e0      	cbnz	r0, 19efc <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   19ec2:	b915      	cbnz	r5, 19eca <bt_gatt_attr_write_ccc+0x3e>
			return len;
   19ec4:	4638      	mov	r0, r7
}
   19ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   19eca:	4649      	mov	r1, r9
   19ecc:	f010 ffc4 	bl	2ae58 <find_ccc_cfg>
		if (!cfg) {
   19ed0:	4604      	mov	r4, r0
   19ed2:	b960      	cbnz	r0, 19eee <bt_gatt_attr_write_ccc+0x62>
   19ed4:	4b1b      	ldr	r3, [pc, #108]	; (19f44 <bt_gatt_attr_write_ccc+0xb8>)
   19ed6:	491c      	ldr	r1, [pc, #112]	; (19f48 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
   19ed8:	481c      	ldr	r0, [pc, #112]	; (19f4c <bt_gatt_attr_write_ccc+0xc0>)
   19eda:	1ac9      	subs	r1, r1, r3
   19edc:	08c9      	lsrs	r1, r1, #3
   19ede:	0189      	lsls	r1, r1, #6
   19ee0:	f041 0102 	orr.w	r1, r1, #2
   19ee4:	f00d fdda 	bl	27a9c <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19ee8:	f06f 0010 	mvn.w	r0, #16
   19eec:	e7eb      	b.n	19ec6 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19eee:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19ef2:	3001      	adds	r0, #1
   19ef4:	f010 ff64 	bl	2adc0 <bt_addr_le_copy>
		cfg->id = conn->id;
   19ef8:	7a33      	ldrb	r3, [r6, #8]
   19efa:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   19efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   19f00:	b973      	cbnz	r3, 19f20 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
   19f02:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   19f06:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   19f08:	42ab      	cmp	r3, r5
   19f0a:	d003      	beq.n	19f14 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   19f0c:	4649      	mov	r1, r9
   19f0e:	4640      	mov	r0, r8
   19f10:	f010 fec8 	bl	2aca4 <gatt_ccc_changed>
	if (!value) {
   19f14:	2d00      	cmp	r5, #0
   19f16:	d1d5      	bne.n	19ec4 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   19f18:	4620      	mov	r0, r4
   19f1a:	f010 ff54 	bl	2adc6 <clear_ccc_cfg>
   19f1e:	e7d1      	b.n	19ec4 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19f20:	462a      	mov	r2, r5
   19f22:	4641      	mov	r1, r8
   19f24:	4630      	mov	r0, r6
   19f26:	4798      	blx	r3
		if (write < 0) {
   19f28:	2800      	cmp	r0, #0
   19f2a:	dbcc      	blt.n	19ec6 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   19f2c:	1e42      	subs	r2, r0, #1
   19f2e:	2a01      	cmp	r2, #1
   19f30:	d9e7      	bls.n	19f02 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19f32:	f06f 000d 	mvn.w	r0, #13
   19f36:	e7c6      	b.n	19ec6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19f38:	f06f 0006 	mvn.w	r0, #6
   19f3c:	e7c3      	b.n	19ec6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19f3e:	f06f 000c 	mvn.w	r0, #12
   19f42:	e7c0      	b.n	19ec6 <bt_gatt_attr_write_ccc+0x3a>
   19f44:	0002ccb8 	.word	0x0002ccb8
   19f48:	0002cce0 	.word	0x0002cce0
   19f4c:	000303e6 	.word	0x000303e6

00019f50 <sc_commit>:
{
   19f50:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19f52:	f06f 0102 	mvn.w	r1, #2
   19f56:	4808      	ldr	r0, [pc, #32]	; (19f78 <sc_commit+0x28>)
   19f58:	f010 ff43 	bl	2ade2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19f5c:	4806      	ldr	r0, [pc, #24]	; (19f78 <sc_commit+0x28>)
   19f5e:	f010 fec4 	bl	2acea <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19f62:	07c3      	lsls	r3, r0, #31
   19f64:	d505      	bpl.n	19f72 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19f66:	4805      	ldr	r0, [pc, #20]	; (19f7c <sc_commit+0x2c>)
   19f68:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19f6c:	2300      	movs	r3, #0
   19f6e:	f008 fa21 	bl	223b4 <k_work_reschedule>
}
   19f72:	2000      	movs	r0, #0
   19f74:	bd08      	pop	{r3, pc}
   19f76:	bf00      	nop
   19f78:	20001ad0 	.word	0x20001ad0
   19f7c:	20001aa0 	.word	0x20001aa0

00019f80 <find_sc_cfg>:
{
   19f80:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   19f82:	4c0e      	ldr	r4, [pc, #56]	; (19fbc <find_sc_cfg+0x3c>)
   19f84:	7823      	ldrb	r3, [r4, #0]
   19f86:	4283      	cmp	r3, r0
{
   19f88:	4605      	mov	r5, r0
   19f8a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   19f8c:	d00a      	beq.n	19fa4 <find_sc_cfg+0x24>
   19f8e:	7b23      	ldrb	r3, [r4, #12]
   19f90:	42ab      	cmp	r3, r5
   19f92:	d111      	bne.n	19fb8 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   19f94:	480a      	ldr	r0, [pc, #40]	; (19fc0 <find_sc_cfg+0x40>)
   19f96:	2207      	movs	r2, #7
   19f98:	4631      	mov	r1, r6
   19f9a:	f00f fd37 	bl	29a0c <memcmp>
   19f9e:	b958      	cbnz	r0, 19fb8 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19fa0:	2001      	movs	r0, #1
   19fa2:	e005      	b.n	19fb0 <find_sc_cfg+0x30>
   19fa4:	2207      	movs	r2, #7
   19fa6:	1c60      	adds	r0, r4, #1
   19fa8:	f00f fd30 	bl	29a0c <memcmp>
		if (id == sc_cfg[i].id &&
   19fac:	2800      	cmp	r0, #0
   19fae:	d1ee      	bne.n	19f8e <find_sc_cfg+0xe>
			return &sc_cfg[i];
   19fb0:	230c      	movs	r3, #12
   19fb2:	fb03 4000 	mla	r0, r3, r0, r4
   19fb6:	e000      	b.n	19fba <find_sc_cfg+0x3a>
	return NULL;
   19fb8:	2000      	movs	r0, #0
}
   19fba:	bd70      	pop	{r4, r5, r6, pc}
   19fbc:	20003d40 	.word	0x20003d40
   19fc0:	20003d4d 	.word	0x20003d4d

00019fc4 <sc_save>:
{
   19fc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19fc8:	4680      	mov	r8, r0
   19fca:	460f      	mov	r7, r1
   19fcc:	4616      	mov	r6, r2
   19fce:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19fd0:	f7ff ffd6 	bl	19f80 <find_sc_cfg>
	if (!cfg) {
   19fd4:	4604      	mov	r4, r0
   19fd6:	b9c8      	cbnz	r0, 1a00c <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19fd8:	4669      	mov	r1, sp
   19fda:	9000      	str	r0, [sp, #0]
   19fdc:	f8cd 0003 	str.w	r0, [sp, #3]
   19fe0:	f7ff ffce 	bl	19f80 <find_sc_cfg>
		if (!cfg) {
   19fe4:	4604      	mov	r4, r0
   19fe6:	b960      	cbnz	r0, 1a002 <sc_save+0x3e>
   19fe8:	4915      	ldr	r1, [pc, #84]	; (1a040 <sc_save+0x7c>)
   19fea:	4b16      	ldr	r3, [pc, #88]	; (1a044 <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   19fec:	4816      	ldr	r0, [pc, #88]	; (1a048 <sc_save+0x84>)
   19fee:	1ac9      	subs	r1, r1, r3
   19ff0:	08c9      	lsrs	r1, r1, #3
   19ff2:	0189      	lsls	r1, r1, #6
   19ff4:	f041 0101 	orr.w	r1, r1, #1
   19ff8:	f00d fd50 	bl	27a9c <log_0>
}
   19ffc:	b002      	add	sp, #8
   19ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a002:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a006:	4639      	mov	r1, r7
   1a008:	f010 feda 	bl	2adc0 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a00c:	8922      	ldrh	r2, [r4, #8]
   1a00e:	8963      	ldrh	r3, [r4, #10]
   1a010:	b96a      	cbnz	r2, 1a02e <sc_save+0x6a>
   1a012:	b973      	cbnz	r3, 1a032 <sc_save+0x6e>
		cfg->data.start = start;
   1a014:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a016:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a018:	4621      	mov	r1, r4
   1a01a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a01e:	f00f ff4f 	bl	29ec0 <bt_addr_le_is_bonded>
   1a022:	2800      	cmp	r0, #0
   1a024:	d0ea      	beq.n	19ffc <sc_save+0x38>
		sc_store(cfg);
   1a026:	4620      	mov	r0, r4
   1a028:	f7ff fe78 	bl	19d1c <sc_store>
   1a02c:	e7e6      	b.n	19ffc <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1a02e:	4296      	cmp	r6, r2
   1a030:	d302      	bcc.n	1a038 <sc_save+0x74>
   1a032:	429d      	cmp	r5, r3
   1a034:	d8ef      	bhi.n	1a016 <sc_save+0x52>
   1a036:	e7e1      	b.n	19ffc <sc_save+0x38>
	if (*end < new_end) {
   1a038:	429d      	cmp	r5, r3
		*start = new_start;
   1a03a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a03c:	d9ec      	bls.n	1a018 <sc_save+0x54>
   1a03e:	e7ea      	b.n	1a016 <sc_save+0x52>
   1a040:	0002cce0 	.word	0x0002cce0
   1a044:	0002ccb8 	.word	0x0002ccb8
   1a048:	00030400 	.word	0x00030400

0001a04c <sc_set>:
{
   1a04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a050:	460e      	mov	r6, r1
   1a052:	b087      	sub	sp, #28
   1a054:	4690      	mov	r8, r2
   1a056:	4699      	mov	r9, r3
	if (!name) {
   1a058:	4607      	mov	r7, r0
   1a05a:	b978      	cbnz	r0, 1a07c <sc_set+0x30>
   1a05c:	4937      	ldr	r1, [pc, #220]	; (1a13c <sc_set+0xf0>)
   1a05e:	4b38      	ldr	r3, [pc, #224]	; (1a140 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
   1a060:	4838      	ldr	r0, [pc, #224]	; (1a144 <sc_set+0xf8>)
   1a062:	1ac9      	subs	r1, r1, r3
   1a064:	08c9      	lsrs	r1, r1, #3
   1a066:	0189      	lsls	r1, r1, #6
   1a068:	f041 0101 	orr.w	r1, r1, #1
   1a06c:	f00d fd16 	bl	27a9c <log_0>
		return -EINVAL;
   1a070:	f06f 0515 	mvn.w	r5, #21
}
   1a074:	4628      	mov	r0, r5
   1a076:	b007      	add	sp, #28
   1a078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1a07c:	a902      	add	r1, sp, #8
   1a07e:	f00f fd96 	bl	29bae <bt_settings_decode_key>
	if (err) {
   1a082:	4605      	mov	r5, r0
   1a084:	b178      	cbz	r0, 1a0a6 <sc_set+0x5a>
   1a086:	4a2e      	ldr	r2, [pc, #184]	; (1a140 <sc_set+0xf4>)
   1a088:	4c2c      	ldr	r4, [pc, #176]	; (1a13c <sc_set+0xf0>)
   1a08a:	4638      	mov	r0, r7
   1a08c:	1aa4      	subs	r4, r4, r2
   1a08e:	08e4      	lsrs	r4, r4, #3
   1a090:	f7f7 fcc0 	bl	11a14 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1a094:	01a4      	lsls	r4, r4, #6
   1a096:	f044 0401 	orr.w	r4, r4, #1
   1a09a:	4601      	mov	r1, r0
   1a09c:	4622      	mov	r2, r4
   1a09e:	482a      	ldr	r0, [pc, #168]	; (1a148 <sc_set+0xfc>)
   1a0a0:	f00d fd09 	bl	27ab6 <log_1>
   1a0a4:	e7e4      	b.n	1a070 <sc_set+0x24>
	settings_name_next(name, &next);
   1a0a6:	a901      	add	r1, sp, #4
   1a0a8:	4638      	mov	r0, r7
   1a0aa:	f00e f9eb 	bl	28484 <settings_name_next>
	if (!next) {
   1a0ae:	9801      	ldr	r0, [sp, #4]
   1a0b0:	b308      	cbz	r0, 1a0f6 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
   1a0b2:	220a      	movs	r2, #10
   1a0b4:	4629      	mov	r1, r5
   1a0b6:	f00f fbeb 	bl	29890 <strtol>
   1a0ba:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1a0bc:	a902      	add	r1, sp, #8
   1a0be:	4638      	mov	r0, r7
   1a0c0:	f7ff ff5e 	bl	19f80 <find_sc_cfg>
	if (!cfg && len_rd) {
   1a0c4:	4604      	mov	r4, r0
   1a0c6:	bb88      	cbnz	r0, 1a12c <sc_set+0xe0>
   1a0c8:	2e00      	cmp	r6, #0
   1a0ca:	d0d3      	beq.n	1a074 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a0cc:	a904      	add	r1, sp, #16
   1a0ce:	9004      	str	r0, [sp, #16]
   1a0d0:	f8cd 0013 	str.w	r0, [sp, #19]
   1a0d4:	f7ff ff54 	bl	19f80 <find_sc_cfg>
		if (!cfg) {
   1a0d8:	4604      	mov	r4, r0
   1a0da:	b970      	cbnz	r0, 1a0fa <sc_set+0xae>
   1a0dc:	4b18      	ldr	r3, [pc, #96]	; (1a140 <sc_set+0xf4>)
   1a0de:	4917      	ldr	r1, [pc, #92]	; (1a13c <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
   1a0e0:	481a      	ldr	r0, [pc, #104]	; (1a14c <sc_set+0x100>)
   1a0e2:	1ac9      	subs	r1, r1, r3
   1a0e4:	08c9      	lsrs	r1, r1, #3
   1a0e6:	0189      	lsls	r1, r1, #6
   1a0e8:	f041 0101 	orr.w	r1, r1, #1
   1a0ec:	f00d fcd6 	bl	27a9c <log_0>
			return -ENOMEM;
   1a0f0:	f06f 050b 	mvn.w	r5, #11
   1a0f4:	e7be      	b.n	1a074 <sc_set+0x28>
		id = BT_ID_DEFAULT;
   1a0f6:	462f      	mov	r7, r5
   1a0f8:	e7e0      	b.n	1a0bc <sc_set+0x70>
		cfg->id = id;
   1a0fa:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a0fe:	a902      	add	r1, sp, #8
   1a100:	f010 fe5e 	bl	2adc0 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1a104:	f104 0108 	add.w	r1, r4, #8
   1a108:	2204      	movs	r2, #4
   1a10a:	4648      	mov	r0, r9
   1a10c:	47c0      	blx	r8
		if (len < 0) {
   1a10e:	1e04      	subs	r4, r0, #0
   1a110:	dab0      	bge.n	1a074 <sc_set+0x28>
   1a112:	4b0b      	ldr	r3, [pc, #44]	; (1a140 <sc_set+0xf4>)
   1a114:	4a09      	ldr	r2, [pc, #36]	; (1a13c <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
   1a116:	480e      	ldr	r0, [pc, #56]	; (1a150 <sc_set+0x104>)
   1a118:	1ad2      	subs	r2, r2, r3
   1a11a:	08d2      	lsrs	r2, r2, #3
   1a11c:	0192      	lsls	r2, r2, #6
   1a11e:	f042 0201 	orr.w	r2, r2, #1
   1a122:	4621      	mov	r1, r4
   1a124:	f00d fcc7 	bl	27ab6 <log_1>
			return len;
   1a128:	4625      	mov	r5, r4
   1a12a:	e7a3      	b.n	1a074 <sc_set+0x28>
	if (len_rd) {
   1a12c:	2e00      	cmp	r6, #0
   1a12e:	d1e9      	bne.n	1a104 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
   1a130:	220c      	movs	r2, #12
   1a132:	4631      	mov	r1, r6
   1a134:	f00f fc9c 	bl	29a70 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1a138:	e79c      	b.n	1a074 <sc_set+0x28>
   1a13a:	bf00      	nop
   1a13c:	0002cce0 	.word	0x0002cce0
   1a140:	0002ccb8 	.word	0x0002ccb8
   1a144:	0002f004 	.word	0x0002f004
   1a148:	0003041f 	.word	0x0003041f
   1a14c:	0003043b 	.word	0x0003043b
   1a150:	000303a9 	.word	0x000303a9

0001a154 <find_cf_cfg_by_addr>:
{
   1a154:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1a156:	4c0e      	ldr	r4, [pc, #56]	; (1a190 <find_cf_cfg_by_addr+0x3c>)
   1a158:	7823      	ldrb	r3, [r4, #0]
   1a15a:	4283      	cmp	r3, r0
{
   1a15c:	4606      	mov	r6, r0
   1a15e:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1a160:	d00a      	beq.n	1a178 <find_cf_cfg_by_addr+0x24>
   1a162:	7c23      	ldrb	r3, [r4, #16]
   1a164:	42b3      	cmp	r3, r6
   1a166:	d111      	bne.n	1a18c <find_cf_cfg_by_addr+0x38>
   1a168:	490a      	ldr	r1, [pc, #40]	; (1a194 <find_cf_cfg_by_addr+0x40>)
   1a16a:	2207      	movs	r2, #7
   1a16c:	4628      	mov	r0, r5
   1a16e:	f00f fc4d 	bl	29a0c <memcmp>
   1a172:	b958      	cbnz	r0, 1a18c <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a174:	2001      	movs	r0, #1
   1a176:	e006      	b.n	1a186 <find_cf_cfg_by_addr+0x32>
   1a178:	2207      	movs	r2, #7
   1a17a:	1c61      	adds	r1, r4, #1
   1a17c:	4628      	mov	r0, r5
   1a17e:	f00f fc45 	bl	29a0c <memcmp>
			if (id == cf_cfg[i].id &&
   1a182:	2800      	cmp	r0, #0
   1a184:	d1ed      	bne.n	1a162 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   1a186:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1a18a:	e000      	b.n	1a18e <find_cf_cfg_by_addr+0x3a>
	return NULL;
   1a18c:	2000      	movs	r0, #0
}
   1a18e:	bd70      	pop	{r4, r5, r6, pc}
   1a190:	20003098 	.word	0x20003098
   1a194:	200030a9 	.word	0x200030a9

0001a198 <find_cf_cfg>:
{
   1a198:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a19a:	4c16      	ldr	r4, [pc, #88]	; (1a1f4 <find_cf_cfg+0x5c>)
		if (!conn) {
   1a19c:	4605      	mov	r5, r0
   1a19e:	b140      	cbz	r0, 1a1b2 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a1a0:	4622      	mov	r2, r4
   1a1a2:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a1a6:	f010 f8f6 	bl	2a396 <bt_conn_is_peer_addr_le>
   1a1aa:	b1c0      	cbz	r0, 1a1de <find_cf_cfg+0x46>
}
   1a1ac:	4620      	mov	r0, r4
   1a1ae:	b003      	add	sp, #12
   1a1b0:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a1b2:	9000      	str	r0, [sp, #0]
   1a1b4:	2207      	movs	r2, #7
   1a1b6:	f8cd 0003 	str.w	r0, [sp, #3]
   1a1ba:	4669      	mov	r1, sp
   1a1bc:	1c60      	adds	r0, r4, #1
   1a1be:	f00f fc25 	bl	29a0c <memcmp>
   1a1c2:	2800      	cmp	r0, #0
   1a1c4:	d0f2      	beq.n	1a1ac <find_cf_cfg+0x14>
   1a1c6:	2207      	movs	r2, #7
   1a1c8:	4669      	mov	r1, sp
   1a1ca:	f104 0011 	add.w	r0, r4, #17
   1a1ce:	9500      	str	r5, [sp, #0]
   1a1d0:	f8cd 5003 	str.w	r5, [sp, #3]
   1a1d4:	f00f fc1a 	bl	29a0c <memcmp>
   1a1d8:	b948      	cbnz	r0, 1a1ee <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a1da:	3410      	adds	r4, #16
   1a1dc:	e7e6      	b.n	1a1ac <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a1de:	7c21      	ldrb	r1, [r4, #16]
   1a1e0:	f104 0211 	add.w	r2, r4, #17
   1a1e4:	4628      	mov	r0, r5
   1a1e6:	f010 f8d6 	bl	2a396 <bt_conn_is_peer_addr_le>
   1a1ea:	2800      	cmp	r0, #0
   1a1ec:	d1f5      	bne.n	1a1da <find_cf_cfg+0x42>
	return NULL;
   1a1ee:	2400      	movs	r4, #0
   1a1f0:	e7dc      	b.n	1a1ac <find_cf_cfg+0x14>
   1a1f2:	bf00      	nop
   1a1f4:	20003098 	.word	0x20003098

0001a1f8 <cf_write>:
{
   1a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1fc:	4698      	mov	r8, r3
   1a1fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a202:	2b01      	cmp	r3, #1
{
   1a204:	4606      	mov	r6, r0
   1a206:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1a208:	d83d      	bhi.n	1a286 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1a20a:	4443      	add	r3, r8
   1a20c:	2b01      	cmp	r3, #1
   1a20e:	4645      	mov	r5, r8
   1a210:	dc3c      	bgt.n	1a28c <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1a212:	f7ff ffc1 	bl	1a198 <find_cf_cfg>
	if (!cfg) {
   1a216:	4604      	mov	r4, r0
   1a218:	b990      	cbnz	r0, 1a240 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1a21a:	f7ff ffbd 	bl	1a198 <find_cf_cfg>
	if (!cfg) {
   1a21e:	4604      	mov	r4, r0
   1a220:	b970      	cbnz	r0, 1a240 <cf_write+0x48>
   1a222:	4b1d      	ldr	r3, [pc, #116]	; (1a298 <cf_write+0xa0>)
   1a224:	491d      	ldr	r1, [pc, #116]	; (1a29c <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   1a226:	481e      	ldr	r0, [pc, #120]	; (1a2a0 <cf_write+0xa8>)
   1a228:	1ac9      	subs	r1, r1, r3
   1a22a:	08c9      	lsrs	r1, r1, #3
   1a22c:	0189      	lsls	r1, r1, #6
   1a22e:	f041 0102 	orr.w	r1, r1, #2
   1a232:	f00d fc33 	bl	27a9c <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a236:	f06f 0510 	mvn.w	r5, #16
}
   1a23a:	4628      	mov	r0, r5
   1a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1a240:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a242:	f1b8 0f00 	cmp.w	r8, #0
   1a246:	d10c      	bne.n	1a262 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a248:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1a24c:	1c60      	adds	r0, r4, #1
   1a24e:	f010 fdb7 	bl	2adc0 <bt_addr_le_copy>
	cfg->id = conn->id;
   1a252:	4620      	mov	r0, r4
   1a254:	7a33      	ldrb	r3, [r6, #8]
   1a256:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a25a:	2101      	movs	r1, #1
   1a25c:	f010 fda1 	bl	2ada2 <atomic_or>
}
   1a260:	e7eb      	b.n	1a23a <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a262:	7a20      	ldrb	r0, [r4, #8]
   1a264:	fa20 f301 	lsr.w	r3, r0, r1
   1a268:	07da      	lsls	r2, r3, #31
   1a26a:	d503      	bpl.n	1a274 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   1a26c:	783b      	ldrb	r3, [r7, #0]
   1a26e:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a270:	07db      	lsls	r3, r3, #31
   1a272:	d50e      	bpl.n	1a292 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a274:	3101      	adds	r1, #1
   1a276:	2903      	cmp	r1, #3
   1a278:	d1e3      	bne.n	1a242 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1a27a:	783b      	ldrb	r3, [r7, #0]
   1a27c:	f003 0307 	and.w	r3, r3, #7
   1a280:	4318      	orrs	r0, r3
   1a282:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1a284:	e7e0      	b.n	1a248 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a286:	f06f 0506 	mvn.w	r5, #6
   1a28a:	e7d6      	b.n	1a23a <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a28c:	f06f 050c 	mvn.w	r5, #12
   1a290:	e7d3      	b.n	1a23a <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a292:	f06f 0512 	mvn.w	r5, #18
   1a296:	e7d0      	b.n	1a23a <cf_write+0x42>
   1a298:	0002ccb8 	.word	0x0002ccb8
   1a29c:	0002cce0 	.word	0x0002cce0
   1a2a0:	0003045d 	.word	0x0003045d

0001a2a4 <cf_set>:
{
   1a2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a2a8:	4689      	mov	r9, r1
   1a2aa:	b085      	sub	sp, #20
   1a2ac:	4617      	mov	r7, r2
   1a2ae:	4698      	mov	r8, r3
	if (!name) {
   1a2b0:	4605      	mov	r5, r0
   1a2b2:	b978      	cbnz	r0, 1a2d4 <cf_set+0x30>
   1a2b4:	4934      	ldr	r1, [pc, #208]	; (1a388 <cf_set+0xe4>)
   1a2b6:	4b35      	ldr	r3, [pc, #212]	; (1a38c <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
   1a2b8:	4835      	ldr	r0, [pc, #212]	; (1a390 <cf_set+0xec>)
   1a2ba:	1ac9      	subs	r1, r1, r3
   1a2bc:	08c9      	lsrs	r1, r1, #3
   1a2be:	0189      	lsls	r1, r1, #6
   1a2c0:	f041 0101 	orr.w	r1, r1, #1
   1a2c4:	f00d fbea 	bl	27a9c <log_0>
		return -EINVAL;
   1a2c8:	f06f 0415 	mvn.w	r4, #21
}
   1a2cc:	4620      	mov	r0, r4
   1a2ce:	b005      	add	sp, #20
   1a2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1a2d4:	a902      	add	r1, sp, #8
   1a2d6:	f00f fc6a 	bl	29bae <bt_settings_decode_key>
	if (err) {
   1a2da:	4604      	mov	r4, r0
   1a2dc:	b178      	cbz	r0, 1a2fe <cf_set+0x5a>
   1a2de:	4a2b      	ldr	r2, [pc, #172]	; (1a38c <cf_set+0xe8>)
   1a2e0:	4c29      	ldr	r4, [pc, #164]	; (1a388 <cf_set+0xe4>)
   1a2e2:	4628      	mov	r0, r5
   1a2e4:	1aa4      	subs	r4, r4, r2
   1a2e6:	08e4      	lsrs	r4, r4, #3
   1a2e8:	f7f7 fb94 	bl	11a14 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1a2ec:	01a4      	lsls	r4, r4, #6
   1a2ee:	f044 0401 	orr.w	r4, r4, #1
   1a2f2:	4601      	mov	r1, r0
   1a2f4:	4622      	mov	r2, r4
   1a2f6:	4827      	ldr	r0, [pc, #156]	; (1a394 <cf_set+0xf0>)
   1a2f8:	f00d fbdd 	bl	27ab6 <log_1>
   1a2fc:	e7e4      	b.n	1a2c8 <cf_set+0x24>
	settings_name_next(name, &next);
   1a2fe:	a901      	add	r1, sp, #4
   1a300:	4628      	mov	r0, r5
   1a302:	f00e f8bf 	bl	28484 <settings_name_next>
	if (!next) {
   1a306:	9801      	ldr	r0, [sp, #4]
   1a308:	b1d8      	cbz	r0, 1a342 <cf_set+0x9e>
		id = strtol(next, NULL, 10);
   1a30a:	220a      	movs	r2, #10
   1a30c:	4621      	mov	r1, r4
   1a30e:	f00f fabf 	bl	29890 <strtol>
   1a312:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   1a314:	a902      	add	r1, sp, #8
   1a316:	4630      	mov	r0, r6
   1a318:	f7ff ff1c 	bl	1a154 <find_cf_cfg_by_addr>
	if (!cfg) {
   1a31c:	4605      	mov	r5, r0
   1a31e:	b9b8      	cbnz	r0, 1a350 <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
   1a320:	f7ff ff3a 	bl	1a198 <find_cf_cfg>
		if (!cfg) {
   1a324:	4605      	mov	r5, r0
   1a326:	b970      	cbnz	r0, 1a346 <cf_set+0xa2>
   1a328:	4b18      	ldr	r3, [pc, #96]	; (1a38c <cf_set+0xe8>)
   1a32a:	4917      	ldr	r1, [pc, #92]	; (1a388 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
   1a32c:	481a      	ldr	r0, [pc, #104]	; (1a398 <cf_set+0xf4>)
   1a32e:	1ac9      	subs	r1, r1, r3
   1a330:	08c9      	lsrs	r1, r1, #3
   1a332:	0189      	lsls	r1, r1, #6
   1a334:	f041 0101 	orr.w	r1, r1, #1
   1a338:	f00d fbb0 	bl	27a9c <log_0>
			return -ENOMEM;
   1a33c:	f06f 040b 	mvn.w	r4, #11
   1a340:	e7c4      	b.n	1a2cc <cf_set+0x28>
		id = BT_ID_DEFAULT;
   1a342:	4626      	mov	r6, r4
   1a344:	e7e6      	b.n	1a314 <cf_set+0x70>
		cfg->id = id;
   1a346:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a34a:	a902      	add	r1, sp, #8
   1a34c:	f010 fd38 	bl	2adc0 <bt_addr_le_copy>
	if (len_rd) {
   1a350:	f1b9 0f00 	cmp.w	r9, #0
   1a354:	d013      	beq.n	1a37e <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1a356:	f105 0108 	add.w	r1, r5, #8
   1a35a:	2201      	movs	r2, #1
   1a35c:	4640      	mov	r0, r8
   1a35e:	47b8      	blx	r7
		if (len < 0) {
   1a360:	1e05      	subs	r5, r0, #0
   1a362:	dab3      	bge.n	1a2cc <cf_set+0x28>
   1a364:	4b09      	ldr	r3, [pc, #36]	; (1a38c <cf_set+0xe8>)
   1a366:	4a08      	ldr	r2, [pc, #32]	; (1a388 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   1a368:	480c      	ldr	r0, [pc, #48]	; (1a39c <cf_set+0xf8>)
   1a36a:	1ad2      	subs	r2, r2, r3
   1a36c:	08d2      	lsrs	r2, r2, #3
   1a36e:	0192      	lsls	r2, r2, #6
   1a370:	f042 0201 	orr.w	r2, r2, #1
   1a374:	4629      	mov	r1, r5
   1a376:	f00d fb9e 	bl	27ab6 <log_1>
			return len;
   1a37a:	462c      	mov	r4, r5
   1a37c:	e7a6      	b.n	1a2cc <cf_set+0x28>
		clear_cf_cfg(cfg);
   1a37e:	4628      	mov	r0, r5
   1a380:	f010 fd3e 	bl	2ae00 <clear_cf_cfg>
   1a384:	e7a2      	b.n	1a2cc <cf_set+0x28>
   1a386:	bf00      	nop
   1a388:	0002cce0 	.word	0x0002cce0
   1a38c:	0002ccb8 	.word	0x0002ccb8
   1a390:	0002f004 	.word	0x0002f004
   1a394:	0003041f 	.word	0x0003041f
   1a398:	00030489 	.word	0x00030489
   1a39c:	000303a9 	.word	0x000303a9

0001a3a0 <read_ppcp>:
{
   1a3a0:	b513      	push	{r0, r1, r4, lr}
   1a3a2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1a3a6:	4c0b      	ldr	r4, [pc, #44]	; (1a3d4 <read_ppcp+0x34>)
{
   1a3a8:	4610      	mov	r0, r2
	if (offset > value_len) {
   1a3aa:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1a3ac:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1a3b0:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1a3b4:	d80b      	bhi.n	1a3ce <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1a3b6:	f1c1 0408 	rsb	r4, r1, #8
   1a3ba:	429c      	cmp	r4, r3
   1a3bc:	bfa8      	it	ge
   1a3be:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1a3c0:	4622      	mov	r2, r4
   1a3c2:	4469      	add	r1, sp
   1a3c4:	f00f fb49 	bl	29a5a <memcpy>
}
   1a3c8:	4620      	mov	r0, r4
   1a3ca:	b002      	add	sp, #8
   1a3cc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a3ce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1a3d2:	e7f9      	b.n	1a3c8 <read_ppcp+0x28>
   1a3d4:	00280018 	.word	0x00280018

0001a3d8 <sc_indicate_rsp>:
{
   1a3d8:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a3da:	f06f 0102 	mvn.w	r1, #2
   1a3de:	4604      	mov	r4, r0
   1a3e0:	480d      	ldr	r0, [pc, #52]	; (1a418 <sc_indicate_rsp+0x40>)
   1a3e2:	f010 fcfe 	bl	2ade2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a3e6:	480c      	ldr	r0, [pc, #48]	; (1a418 <sc_indicate_rsp+0x40>)
   1a3e8:	f010 fc7f 	bl	2acea <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a3ec:	07c2      	lsls	r2, r0, #31
   1a3ee:	d504      	bpl.n	1a3fa <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a3f0:	480a      	ldr	r0, [pc, #40]	; (1a41c <sc_indicate_rsp+0x44>)
   1a3f2:	2200      	movs	r2, #0
   1a3f4:	2300      	movs	r3, #0
   1a3f6:	f007 ffdd 	bl	223b4 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1a3fa:	4620      	mov	r0, r4
   1a3fc:	f7ff fecc 	bl	1a198 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a400:	b140      	cbz	r0, 1a414 <sc_indicate_rsp+0x3c>
   1a402:	7a03      	ldrb	r3, [r0, #8]
   1a404:	07db      	lsls	r3, r3, #31
   1a406:	d505      	bpl.n	1a414 <sc_indicate_rsp+0x3c>
}
   1a408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a40c:	2101      	movs	r1, #1
   1a40e:	300c      	adds	r0, #12
   1a410:	f010 bcc7 	b.w	2ada2 <atomic_or>
   1a414:	bd10      	pop	{r4, pc}
   1a416:	bf00      	nop
   1a418:	20001ad0 	.word	0x20001ad0
   1a41c:	20001aa0 	.word	0x20001aa0

0001a420 <bt_gatt_clear_sc>:
{
   1a420:	b570      	push	{r4, r5, r6, lr}
   1a422:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1a424:	f7ff fdac 	bl	19f80 <find_sc_cfg>
	if (!cfg) {
   1a428:	4604      	mov	r4, r0
   1a42a:	b318      	cbz	r0, 1a474 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
   1a42c:	4605      	mov	r5, r0
   1a42e:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a432:	b312      	cbz	r2, 1a47a <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a434:	ae02      	add	r6, sp, #8
   1a436:	2104      	movs	r1, #4
   1a438:	4630      	mov	r0, r6
   1a43a:	f00c ffc0 	bl	273be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a43e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a440:	2124      	movs	r1, #36	; 0x24
   1a442:	4a0f      	ldr	r2, [pc, #60]	; (1a480 <bt_gatt_clear_sc+0x60>)
   1a444:	462b      	mov	r3, r5
   1a446:	a803      	add	r0, sp, #12
   1a448:	f7fa ffce 	bl	153e8 <bt_settings_encode_key>
		err = settings_delete(key);
   1a44c:	a803      	add	r0, sp, #12
   1a44e:	f00d fff2 	bl	28436 <settings_delete>
		if (err) {
   1a452:	4601      	mov	r1, r0
   1a454:	b148      	cbz	r0, 1a46a <bt_gatt_clear_sc+0x4a>
   1a456:	4a0b      	ldr	r2, [pc, #44]	; (1a484 <bt_gatt_clear_sc+0x64>)
   1a458:	4b0b      	ldr	r3, [pc, #44]	; (1a488 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
   1a45a:	480c      	ldr	r0, [pc, #48]	; (1a48c <bt_gatt_clear_sc+0x6c>)
   1a45c:	1ad2      	subs	r2, r2, r3
   1a45e:	08d2      	lsrs	r2, r2, #3
   1a460:	0192      	lsls	r2, r2, #6
   1a462:	f042 0201 	orr.w	r2, r2, #1
   1a466:	f00d fb26 	bl	27ab6 <log_1>
	memset(cfg, 0, sizeof(*cfg));
   1a46a:	220c      	movs	r2, #12
   1a46c:	2100      	movs	r1, #0
   1a46e:	4620      	mov	r0, r4
   1a470:	f00f fafe 	bl	29a70 <memset>
}
   1a474:	2000      	movs	r0, #0
   1a476:	b00c      	add	sp, #48	; 0x30
   1a478:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a47a:	9200      	str	r2, [sp, #0]
   1a47c:	e7e0      	b.n	1a440 <bt_gatt_clear_sc+0x20>
   1a47e:	bf00      	nop
   1a480:	00030735 	.word	0x00030735
   1a484:	0002cce0 	.word	0x0002cce0
   1a488:	0002ccb8 	.word	0x0002ccb8
   1a48c:	000304ab 	.word	0x000304ab

0001a490 <sc_clear>:
{
   1a490:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a492:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1a496:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a498:	4631      	mov	r1, r6
   1a49a:	7a00      	ldrb	r0, [r0, #8]
   1a49c:	f00f fd10 	bl	29ec0 <bt_addr_le_is_bonded>
   1a4a0:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a4a2:	4631      	mov	r1, r6
   1a4a4:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a4a6:	b17d      	cbz	r5, 1a4c8 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a4a8:	f7ff ffba 	bl	1a420 <bt_gatt_clear_sc>
		if (err) {
   1a4ac:	4601      	mov	r1, r0
   1a4ae:	b1a0      	cbz	r0, 1a4da <sc_clear+0x4a>
   1a4b0:	4a0a      	ldr	r2, [pc, #40]	; (1a4dc <sc_clear+0x4c>)
   1a4b2:	4b0b      	ldr	r3, [pc, #44]	; (1a4e0 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
   1a4b4:	480b      	ldr	r0, [pc, #44]	; (1a4e4 <sc_clear+0x54>)
   1a4b6:	1ad2      	subs	r2, r2, r3
   1a4b8:	08d2      	lsrs	r2, r2, #3
   1a4ba:	0192      	lsls	r2, r2, #6
}
   1a4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   1a4c0:	f042 0201 	orr.w	r2, r2, #1
   1a4c4:	f00d baf7 	b.w	27ab6 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a4c8:	f7ff fd5a 	bl	19f80 <find_sc_cfg>
		if (cfg) {
   1a4cc:	b128      	cbz	r0, 1a4da <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
   1a4ce:	4629      	mov	r1, r5
   1a4d0:	220c      	movs	r2, #12
}
   1a4d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1a4d6:	f00f bacb 	b.w	29a70 <memset>
}
   1a4da:	bd70      	pop	{r4, r5, r6, pc}
   1a4dc:	0002cce0 	.word	0x0002cce0
   1a4e0:	0002ccb8 	.word	0x0002ccb8
   1a4e4:	000304c8 	.word	0x000304c8

0001a4e8 <disconnected_cb>:
{
   1a4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4ec:	4b1f      	ldr	r3, [pc, #124]	; (1a56c <disconnected_cb+0x84>)
{
   1a4ee:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4f0:	6882      	ldr	r2, [r0, #8]
   1a4f2:	429a      	cmp	r2, r3
{
   1a4f4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4f6:	d102      	bne.n	1a4fe <disconnected_cb+0x16>
	ccc = attr->user_data;
   1a4f8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1a4fa:	8963      	ldrh	r3, [r4, #10]
   1a4fc:	b9c3      	cbnz	r3, 1a530 <disconnected_cb+0x48>
}
   1a4fe:	2001      	movs	r0, #1
   1a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a504:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1a508:	7a28      	ldrb	r0, [r5, #8]
   1a50a:	4641      	mov	r1, r8
   1a50c:	f00f fcd8 	bl	29ec0 <bt_addr_le_is_bonded>
   1a510:	b948      	cbnz	r0, 1a526 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1a512:	4b17      	ldr	r3, [pc, #92]	; (1a570 <disconnected_cb+0x88>)
   1a514:	429c      	cmp	r4, r3
   1a516:	d102      	bne.n	1a51e <disconnected_cb+0x36>
					sc_clear(conn);
   1a518:	4628      	mov	r0, r5
   1a51a:	f7ff ffb9 	bl	1a490 <sc_clear>
				clear_ccc_cfg(cfg);
   1a51e:	4620      	mov	r0, r4
   1a520:	f010 fc51 	bl	2adc6 <clear_ccc_cfg>
	if (!value_used) {
   1a524:	e019      	b.n	1a55a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a526:	4641      	mov	r1, r8
   1a528:	4638      	mov	r0, r7
   1a52a:	f010 fc49 	bl	2adc0 <bt_addr_le_copy>
	if (!value_used) {
   1a52e:	e014      	b.n	1a55a <disconnected_cb+0x72>
		if (!cfg->value) {
   1a530:	8923      	ldrh	r3, [r4, #8]
   1a532:	b193      	cbz	r3, 1a55a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a534:	4627      	mov	r7, r4
   1a536:	4628      	mov	r0, r5
   1a538:	f817 1b01 	ldrb.w	r1, [r7], #1
   1a53c:	463a      	mov	r2, r7
   1a53e:	f00f ff2a 	bl	2a396 <bt_conn_is_peer_addr_le>
   1a542:	2800      	cmp	r0, #0
   1a544:	d1de      	bne.n	1a504 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a546:	7820      	ldrb	r0, [r4, #0]
   1a548:	4639      	mov	r1, r7
   1a54a:	f7fd ff1b 	bl	18384 <bt_conn_lookup_addr_le>
			if (tmp) {
   1a54e:	b120      	cbz	r0, 1a55a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1a550:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1a552:	f7fd fd17 	bl	17f84 <bt_conn_unref>
	if (!value_used) {
   1a556:	2d07      	cmp	r5, #7
   1a558:	d0d1      	beq.n	1a4fe <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1a55a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1a55c:	2100      	movs	r1, #0
   1a55e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1a560:	2b00      	cmp	r3, #0
   1a562:	d0cc      	beq.n	1a4fe <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1a564:	4630      	mov	r0, r6
   1a566:	4798      	blx	r3
   1a568:	e7c9      	b.n	1a4fe <disconnected_cb+0x16>
   1a56a:	bf00      	nop
   1a56c:	00019e8d 	.word	0x00019e8d
   1a570:	20000568 	.word	0x20000568

0001a574 <bt_gatt_init>:
{
   1a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a576:	4b2a      	ldr	r3, [pc, #168]	; (1a620 <bt_gatt_init+0xac>)
   1a578:	f3bf 8f5b 	dmb	ish
   1a57c:	2201      	movs	r2, #1
   1a57e:	e853 1f00 	ldrex	r1, [r3]
   1a582:	2900      	cmp	r1, #0
   1a584:	d103      	bne.n	1a58e <bt_gatt_init+0x1a>
   1a586:	e843 2000 	strex	r0, r2, [r3]
   1a58a:	2800      	cmp	r0, #0
   1a58c:	d1f7      	bne.n	1a57e <bt_gatt_init+0xa>
   1a58e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1a592:	d144      	bne.n	1a61e <bt_gatt_init+0xaa>
   1a594:	f3bf 8f5b 	dmb	ish
   1a598:	4b22      	ldr	r3, [pc, #136]	; (1a624 <bt_gatt_init+0xb0>)
   1a59a:	e853 1f00 	ldrex	r1, [r3]
   1a59e:	2900      	cmp	r1, #0
   1a5a0:	d103      	bne.n	1a5aa <bt_gatt_init+0x36>
   1a5a2:	e843 2000 	strex	r0, r2, [r3]
   1a5a6:	2800      	cmp	r0, #0
   1a5a8:	d1f7      	bne.n	1a59a <bt_gatt_init+0x26>
   1a5aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1a5ae:	d031      	beq.n	1a614 <bt_gatt_init+0xa0>
	list->head = NULL;
   1a5b0:	4b1d      	ldr	r3, [pc, #116]	; (1a628 <bt_gatt_init+0xb4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1a5b2:	491e      	ldr	r1, [pc, #120]	; (1a62c <bt_gatt_init+0xb8>)
   1a5b4:	481e      	ldr	r0, [pc, #120]	; (1a630 <bt_gatt_init+0xbc>)
   1a5b6:	2200      	movs	r2, #0
	list->tail = NULL;
   1a5b8:	e9c3 2200 	strd	r2, r2, [r3]
   1a5bc:	f007 fdd6 	bl	2216c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1a5c0:	2300      	movs	r3, #0
   1a5c2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a5c6:	481a      	ldr	r0, [pc, #104]	; (1a630 <bt_gatt_init+0xbc>)
   1a5c8:	f007 fe78 	bl	222bc <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1a5cc:	4919      	ldr	r1, [pc, #100]	; (1a634 <bt_gatt_init+0xc0>)
   1a5ce:	481a      	ldr	r0, [pc, #104]	; (1a638 <bt_gatt_init+0xc4>)
   1a5d0:	f007 fdcc 	bl	2216c <k_work_init_delayable>
}
   1a5d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a5d8:	4818      	ldr	r0, [pc, #96]	; (1a63c <bt_gatt_init+0xc8>)
   1a5da:	2102      	movs	r1, #2
   1a5dc:	f010 bbe1 	b.w	2ada2 <atomic_or>
		last_static_handle += svc->attr_count;
   1a5e0:	4a17      	ldr	r2, [pc, #92]	; (1a640 <bt_gatt_init+0xcc>)
   1a5e2:	6863      	ldr	r3, [r4, #4]
   1a5e4:	8811      	ldrh	r1, [r2, #0]
   1a5e6:	440b      	add	r3, r1
   1a5e8:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a5ea:	3408      	adds	r4, #8
   1a5ec:	42ac      	cmp	r4, r5
   1a5ee:	d90e      	bls.n	1a60e <bt_gatt_init+0x9a>
   1a5f0:	4914      	ldr	r1, [pc, #80]	; (1a644 <bt_gatt_init+0xd0>)
   1a5f2:	4815      	ldr	r0, [pc, #84]	; (1a648 <bt_gatt_init+0xd4>)
   1a5f4:	f240 4349 	movw	r3, #1097	; 0x449
   1a5f8:	4632      	mov	r2, r6
   1a5fa:	f00c ff7c 	bl	274f6 <printk>
   1a5fe:	4813      	ldr	r0, [pc, #76]	; (1a64c <bt_gatt_init+0xd8>)
   1a600:	f00c ff79 	bl	274f6 <printk>
   1a604:	f240 4149 	movw	r1, #1097	; 0x449
   1a608:	4630      	mov	r0, r6
   1a60a:	f00d fa19 	bl	27a40 <assert_post_action>
   1a60e:	42bc      	cmp	r4, r7
   1a610:	d3e6      	bcc.n	1a5e0 <bt_gatt_init+0x6c>
   1a612:	e7cd      	b.n	1a5b0 <bt_gatt_init+0x3c>
   1a614:	4d0e      	ldr	r5, [pc, #56]	; (1a650 <bt_gatt_init+0xdc>)
   1a616:	4c0f      	ldr	r4, [pc, #60]	; (1a654 <bt_gatt_init+0xe0>)
   1a618:	4e0f      	ldr	r6, [pc, #60]	; (1a658 <bt_gatt_init+0xe4>)
   1a61a:	462f      	mov	r7, r5
   1a61c:	e7e6      	b.n	1a5ec <bt_gatt_init+0x78>
}
   1a61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a620:	200030b8 	.word	0x200030b8
   1a624:	200030d4 	.word	0x200030d4
   1a628:	20003090 	.word	0x20003090
   1a62c:	0001a885 	.word	0x0001a885
   1a630:	20001a28 	.word	0x20001a28
   1a634:	0001ac8d 	.word	0x0001ac8d
   1a638:	20001aa0 	.word	0x20001aa0
   1a63c:	20001ad0 	.word	0x20001ad0
   1a640:	20003d3e 	.word	0x20003d3e
   1a644:	00030515 	.word	0x00030515
   1a648:	0002dcd3 	.word	0x0002dcd3
   1a64c:	0002e3f4 	.word	0x0002e3f4
   1a650:	0002cc40 	.word	0x0002cc40
   1a654:	0002cc28 	.word	0x0002cc28
   1a658:	000304de 	.word	0x000304de

0001a65c <bt_gatt_attr_get_handle>:
{
   1a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1a660:	4604      	mov	r4, r0
   1a662:	b910      	cbnz	r0, 1a66a <bt_gatt_attr_get_handle+0xe>
		return 0;
   1a664:	2000      	movs	r0, #0
}
   1a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1a66a:	8a00      	ldrh	r0, [r0, #16]
   1a66c:	2800      	cmp	r0, #0
   1a66e:	d1fa      	bne.n	1a666 <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a670:	4f1a      	ldr	r7, [pc, #104]	; (1a6dc <bt_gatt_attr_get_handle+0x80>)
   1a672:	4d1b      	ldr	r5, [pc, #108]	; (1a6e0 <bt_gatt_attr_get_handle+0x84>)
   1a674:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1a6f0 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   1a678:	2601      	movs	r6, #1
   1a67a:	46b8      	mov	r8, r7
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a67c:	42bd      	cmp	r5, r7
   1a67e:	d90e      	bls.n	1a69e <bt_gatt_attr_get_handle+0x42>
   1a680:	4918      	ldr	r1, [pc, #96]	; (1a6e4 <bt_gatt_attr_get_handle+0x88>)
   1a682:	4819      	ldr	r0, [pc, #100]	; (1a6e8 <bt_gatt_attr_get_handle+0x8c>)
   1a684:	f240 5372 	movw	r3, #1394	; 0x572
   1a688:	464a      	mov	r2, r9
   1a68a:	f00c ff34 	bl	274f6 <printk>
   1a68e:	4817      	ldr	r0, [pc, #92]	; (1a6ec <bt_gatt_attr_get_handle+0x90>)
   1a690:	f00c ff31 	bl	274f6 <printk>
   1a694:	f240 5172 	movw	r1, #1394	; 0x572
   1a698:	4648      	mov	r0, r9
   1a69a:	f00d f9d1 	bl	27a40 <assert_post_action>
   1a69e:	4545      	cmp	r5, r8
   1a6a0:	d2e0      	bcs.n	1a664 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1a6a2:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1a6a6:	4574      	cmp	r4, lr
   1a6a8:	d305      	bcc.n	1a6b6 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a6aa:	2114      	movs	r1, #20
   1a6ac:	fb01 e30c 	mla	r3, r1, ip, lr
   1a6b0:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a6b2:	429c      	cmp	r4, r3
   1a6b4:	d90f      	bls.n	1a6d6 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1a6b6:	eb06 030c 	add.w	r3, r6, ip
   1a6ba:	b298      	uxth	r0, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a6bc:	3508      	adds	r5, #8
   1a6be:	4606      	mov	r6, r0
   1a6c0:	e7dc      	b.n	1a67c <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1a6c2:	fb01 e302 	mla	r3, r1, r2, lr
   1a6c6:	429c      	cmp	r4, r3
   1a6c8:	d0cd      	beq.n	1a666 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a6ca:	3201      	adds	r2, #1
   1a6cc:	18b3      	adds	r3, r6, r2
   1a6ce:	4562      	cmp	r2, ip
   1a6d0:	b298      	uxth	r0, r3
   1a6d2:	d1f6      	bne.n	1a6c2 <bt_gatt_attr_get_handle+0x66>
   1a6d4:	e7f2      	b.n	1a6bc <bt_gatt_attr_get_handle+0x60>
   1a6d6:	2200      	movs	r2, #0
   1a6d8:	e7f8      	b.n	1a6cc <bt_gatt_attr_get_handle+0x70>
   1a6da:	bf00      	nop
   1a6dc:	0002cc40 	.word	0x0002cc40
   1a6e0:	0002cc28 	.word	0x0002cc28
   1a6e4:	0003050e 	.word	0x0003050e
   1a6e8:	0002dcd3 	.word	0x0002dcd3
   1a6ec:	0002e3f4 	.word	0x0002e3f4
   1a6f0:	000304de 	.word	0x000304de

0001a6f4 <bt_gatt_foreach_attr_type>:
{
   1a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6f8:	b085      	sub	sp, #20
   1a6fa:	4607      	mov	r7, r0
   1a6fc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1a700:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1a702:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a706:	2d00      	cmp	r5, #0
   1a708:	bf08      	it	eq
   1a70a:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a70c:	4b2d      	ldr	r3, [pc, #180]	; (1a7c4 <bt_gatt_foreach_attr_type+0xd0>)
{
   1a70e:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1a710:	881b      	ldrh	r3, [r3, #0]
   1a712:	4283      	cmp	r3, r0
{
   1a714:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a716:	d24e      	bcs.n	1a7b6 <bt_gatt_foreach_attr_type+0xc2>
}
   1a718:	b005      	add	sp, #20
   1a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1a71e:	6873      	ldr	r3, [r6, #4]
   1a720:	4423      	add	r3, r4
   1a722:	42bb      	cmp	r3, r7
   1a724:	d244      	bcs.n	1a7b0 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1a726:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a728:	3608      	adds	r6, #8
   1a72a:	4556      	cmp	r6, sl
   1a72c:	d90e      	bls.n	1a74c <bt_gatt_foreach_attr_type+0x58>
   1a72e:	4926      	ldr	r1, [pc, #152]	; (1a7c8 <bt_gatt_foreach_attr_type+0xd4>)
   1a730:	4826      	ldr	r0, [pc, #152]	; (1a7cc <bt_gatt_foreach_attr_type+0xd8>)
   1a732:	f240 6336 	movw	r3, #1590	; 0x636
   1a736:	465a      	mov	r2, fp
   1a738:	f00c fedd 	bl	274f6 <printk>
   1a73c:	4824      	ldr	r0, [pc, #144]	; (1a7d0 <bt_gatt_foreach_attr_type+0xdc>)
   1a73e:	f00c feda 	bl	274f6 <printk>
   1a742:	f240 6136 	movw	r1, #1590	; 0x636
   1a746:	4658      	mov	r0, fp
   1a748:	f00d f97a 	bl	27a40 <assert_post_action>
   1a74c:	4b21      	ldr	r3, [pc, #132]	; (1a7d4 <bt_gatt_foreach_attr_type+0xe0>)
   1a74e:	429e      	cmp	r6, r3
   1a750:	d3e5      	bcc.n	1a71e <bt_gatt_foreach_attr_type+0x2a>
   1a752:	e7e1      	b.n	1a718 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a754:	5889      	ldr	r1, [r1, r2]
   1a756:	9303      	str	r3, [sp, #12]
   1a758:	4640      	mov	r0, r8
   1a75a:	f00f fa4c 	bl	29bf6 <bt_uuid_cmp>
   1a75e:	9b03      	ldr	r3, [sp, #12]
   1a760:	b198      	cbz	r0, 1a78a <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a762:	3401      	adds	r4, #1
   1a764:	f109 0901 	add.w	r9, r9, #1
   1a768:	b2a4      	uxth	r4, r4
   1a76a:	6873      	ldr	r3, [r6, #4]
   1a76c:	454b      	cmp	r3, r9
   1a76e:	d9db      	bls.n	1a728 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1a770:	9b02      	ldr	r3, [sp, #8]
   1a772:	429c      	cmp	r4, r3
   1a774:	d8d0      	bhi.n	1a718 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1a776:	42bc      	cmp	r4, r7
   1a778:	d3f3      	bcc.n	1a762 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a77a:	2314      	movs	r3, #20
   1a77c:	6831      	ldr	r1, [r6, #0]
   1a77e:	fb03 f209 	mul.w	r2, r3, r9
   1a782:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a784:	f1b8 0f00 	cmp.w	r8, #0
   1a788:	d1e4      	bne.n	1a754 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1a78a:	9a01      	ldr	r2, [sp, #4]
   1a78c:	b95a      	cbnz	r2, 1a7a6 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1a78e:	3d01      	subs	r5, #1
   1a790:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a792:	4618      	mov	r0, r3
   1a794:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a798:	4621      	mov	r1, r4
   1a79a:	4798      	blx	r3
	if (!*num_matches) {
   1a79c:	2d00      	cmp	r5, #0
   1a79e:	d0bb      	beq.n	1a718 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a7a0:	2800      	cmp	r0, #0
   1a7a2:	d1de      	bne.n	1a762 <bt_gatt_foreach_attr_type+0x6e>
   1a7a4:	e7b8      	b.n	1a718 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1a7a6:	68da      	ldr	r2, [r3, #12]
   1a7a8:	9901      	ldr	r1, [sp, #4]
   1a7aa:	4291      	cmp	r1, r2
   1a7ac:	d1d9      	bne.n	1a762 <bt_gatt_foreach_attr_type+0x6e>
   1a7ae:	e7ee      	b.n	1a78e <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a7b0:	f04f 0900 	mov.w	r9, #0
   1a7b4:	e7d9      	b.n	1a76a <bt_gatt_foreach_attr_type+0x76>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a7b6:	4e08      	ldr	r6, [pc, #32]	; (1a7d8 <bt_gatt_foreach_attr_type+0xe4>)
   1a7b8:	f8df a018 	ldr.w	sl, [pc, #24]	; 1a7d4 <bt_gatt_foreach_attr_type+0xe0>
   1a7bc:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1a7dc <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   1a7c0:	2401      	movs	r4, #1
   1a7c2:	e7b2      	b.n	1a72a <bt_gatt_foreach_attr_type+0x36>
   1a7c4:	20003d3e 	.word	0x20003d3e
   1a7c8:	0003050e 	.word	0x0003050e
   1a7cc:	0002dcd3 	.word	0x0002dcd3
   1a7d0:	0002e3f4 	.word	0x0002e3f4
   1a7d4:	0002cc40 	.word	0x0002cc40
   1a7d8:	0002cc28 	.word	0x0002cc28
   1a7dc:	000304de 	.word	0x000304de

0001a7e0 <db_hash_gen>:
{
   1a7e0:	b530      	push	{r4, r5, lr}
   1a7e2:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   1a7e4:	2300      	movs	r3, #0
{
   1a7e6:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a7e8:	aa1c      	add	r2, sp, #112	; 0x70
   1a7ea:	4669      	mov	r1, sp
   1a7ec:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1a7ee:	e9cd 3300 	strd	r3, r3, [sp]
   1a7f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a7f6:	f00e ff6d 	bl	296d4 <tc_cmac_setup>
   1a7fa:	b958      	cbnz	r0, 1a814 <db_hash_gen+0x34>
   1a7fc:	491a      	ldr	r1, [pc, #104]	; (1a868 <db_hash_gen+0x88>)
   1a7fe:	4b1b      	ldr	r3, [pc, #108]	; (1a86c <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   1a800:	481b      	ldr	r0, [pc, #108]	; (1a870 <db_hash_gen+0x90>)
   1a802:	1ac9      	subs	r1, r1, r3
   1a804:	08c9      	lsrs	r1, r1, #3
   1a806:	0189      	lsls	r1, r1, #6
   1a808:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1a80c:	f00d f946 	bl	27a9c <log_0>
}
   1a810:	b049      	add	sp, #292	; 0x124
   1a812:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a814:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a818:	2001      	movs	r0, #1
   1a81a:	4a16      	ldr	r2, [pc, #88]	; (1a874 <db_hash_gen+0x94>)
   1a81c:	ab04      	add	r3, sp, #16
   1a81e:	f010 fc47 	bl	2b0b0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a822:	4815      	ldr	r0, [pc, #84]	; (1a878 <db_hash_gen+0x98>)
   1a824:	a904      	add	r1, sp, #16
   1a826:	f00e ffec 	bl	29802 <tc_cmac_final>
   1a82a:	b940      	cbnz	r0, 1a83e <db_hash_gen+0x5e>
   1a82c:	490e      	ldr	r1, [pc, #56]	; (1a868 <db_hash_gen+0x88>)
   1a82e:	4b0f      	ldr	r3, [pc, #60]	; (1a86c <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
   1a830:	4812      	ldr	r0, [pc, #72]	; (1a87c <db_hash_gen+0x9c>)
   1a832:	1ac9      	subs	r1, r1, r3
   1a834:	08c9      	lsrs	r1, r1, #3
   1a836:	0189      	lsls	r1, r1, #6
   1a838:	f041 0101 	orr.w	r1, r1, #1
   1a83c:	e7e6      	b.n	1a80c <db_hash_gen+0x2c>
   1a83e:	4b0e      	ldr	r3, [pc, #56]	; (1a878 <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a840:	2208      	movs	r2, #8
   1a842:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a846:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a848:	780d      	ldrb	r5, [r1, #0]
   1a84a:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1a84e:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a850:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1a854:	d1f7      	bne.n	1a846 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1a856:	b10c      	cbz	r4, 1a85c <db_hash_gen+0x7c>
		db_hash_store();
   1a858:	f7ff fa20 	bl	19c9c <db_hash_store>
   1a85c:	2104      	movs	r1, #4
   1a85e:	4808      	ldr	r0, [pc, #32]	; (1a880 <db_hash_gen+0xa0>)
   1a860:	f010 fa9f 	bl	2ada2 <atomic_or>
   1a864:	e7d4      	b.n	1a810 <db_hash_gen+0x30>
   1a866:	bf00      	nop
   1a868:	0002cce0 	.word	0x0002cce0
   1a86c:	0002ccb8 	.word	0x0002ccb8
   1a870:	0003053d 	.word	0x0003053d
   1a874:	0002acf7 	.word	0x0002acf7
   1a878:	20001a08 	.word	0x20001a08
   1a87c:	00030556 	.word	0x00030556
   1a880:	20001ad0 	.word	0x20001ad0

0001a884 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a884:	f06f 0108 	mvn.w	r1, #8
{
   1a888:	b510      	push	{r4, lr}
   1a88a:	4828      	ldr	r0, [pc, #160]	; (1a92c <db_hash_process+0xa8>)
   1a88c:	f010 faa9 	bl	2ade2 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1a890:	0701      	lsls	r1, r0, #28
   1a892:	d545      	bpl.n	1a920 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a894:	4825      	ldr	r0, [pc, #148]	; (1a92c <db_hash_process+0xa8>)
   1a896:	f010 fa28 	bl	2acea <atomic_get>
   1a89a:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a89c:	075a      	lsls	r2, r3, #29
   1a89e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1a8a2:	d401      	bmi.n	1a8a8 <db_hash_process+0x24>
			db_hash_gen(false);
   1a8a4:	f7ff ff9c 	bl	1a7e0 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1a8a8:	4921      	ldr	r1, [pc, #132]	; (1a930 <db_hash_process+0xac>)
   1a8aa:	2210      	movs	r2, #16
   1a8ac:	1888      	adds	r0, r1, r2
   1a8ae:	f00f f8ad 	bl	29a0c <memcmp>
   1a8b2:	b948      	cbnz	r0, 1a8c8 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1a8b4:	481f      	ldr	r0, [pc, #124]	; (1a934 <db_hash_process+0xb0>)
   1a8b6:	f007 fd83 	bl	223c0 <k_work_cancel_delayable>
}
   1a8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a8be:	481b      	ldr	r0, [pc, #108]	; (1a92c <db_hash_process+0xa8>)
   1a8c0:	f06f 0101 	mvn.w	r1, #1
   1a8c4:	f010 ba8d 	b.w	2ade2 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a8c8:	4c1b      	ldr	r4, [pc, #108]	; (1a938 <db_hash_process+0xb4>)
   1a8ca:	2101      	movs	r1, #1
   1a8cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1a8d0:	f010 fa67 	bl	2ada2 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a8d4:	f010 0f01 	tst.w	r0, #1
   1a8d8:	4623      	mov	r3, r4
   1a8da:	d110      	bne.n	1a8fe <db_hash_process+0x7a>
		gatt_sc.start = start;
   1a8dc:	4b17      	ldr	r3, [pc, #92]	; (1a93c <db_hash_process+0xb8>)
   1a8de:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a8e0:	4812      	ldr	r0, [pc, #72]	; (1a92c <db_hash_process+0xa8>)
   1a8e2:	f010 fa02 	bl	2acea <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1a8e6:	0783      	lsls	r3, r0, #30
   1a8e8:	d405      	bmi.n	1a8f6 <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a8ea:	4812      	ldr	r0, [pc, #72]	; (1a934 <db_hash_process+0xb0>)
   1a8ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a8f0:	2300      	movs	r3, #0
   1a8f2:	f007 fd5f 	bl	223b4 <k_work_reschedule>
}
   1a8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1a8fa:	f7ff b9cf 	b.w	19c9c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1a8fe:	8b22      	ldrh	r2, [r4, #24]
   1a900:	8b61      	ldrh	r1, [r4, #26]
   1a902:	2a01      	cmp	r2, #1
   1a904:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a908:	d805      	bhi.n	1a916 <db_hash_process+0x92>
   1a90a:	4291      	cmp	r1, r2
   1a90c:	d0f3      	beq.n	1a8f6 <db_hash_process+0x72>
		*end = new_end;
   1a90e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a912:	835a      	strh	r2, [r3, #26]
   1a914:	e7e4      	b.n	1a8e0 <db_hash_process+0x5c>
		*start = new_start;
   1a916:	2001      	movs	r0, #1
	if (*end < new_end) {
   1a918:	4291      	cmp	r1, r2
		*start = new_start;
   1a91a:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   1a91c:	d0e0      	beq.n	1a8e0 <db_hash_process+0x5c>
   1a91e:	e7f6      	b.n	1a90e <db_hash_process+0x8a>
}
   1a920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1a924:	2001      	movs	r0, #1
   1a926:	f7ff bf5b 	b.w	1a7e0 <db_hash_gen>
   1a92a:	bf00      	nop
   1a92c:	20001ad0 	.word	0x20001ad0
   1a930:	20001a08 	.word	0x20001a08
   1a934:	20001aa0 	.word	0x20001aa0
   1a938:	20001a80 	.word	0x20001a80
   1a93c:	ffff0001 	.word	0xffff0001

0001a940 <ccc_set_direct>:
{
   1a940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a944:	b0b9      	sub	sp, #228	; 0xe4
   1a946:	4688      	mov	r8, r1
   1a948:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a94a:	4939      	ldr	r1, [pc, #228]	; (1aa30 <ccc_set_direct+0xf0>)
   1a94c:	9840      	ldr	r0, [sp, #256]	; 0x100
   1a94e:	466a      	mov	r2, sp
{
   1a950:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a952:	f00d fd74 	bl	2843e <settings_name_steq>
   1a956:	b978      	cbnz	r0, 1a978 <ccc_set_direct+0x38>
   1a958:	4b36      	ldr	r3, [pc, #216]	; (1aa34 <ccc_set_direct+0xf4>)
   1a95a:	4937      	ldr	r1, [pc, #220]	; (1aa38 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
   1a95c:	4837      	ldr	r0, [pc, #220]	; (1aa3c <ccc_set_direct+0xfc>)
   1a95e:	1ac9      	subs	r1, r1, r3
   1a960:	08c9      	lsrs	r1, r1, #3
   1a962:	0189      	lsls	r1, r1, #6
   1a964:	f041 0101 	orr.w	r1, r1, #1
   1a968:	f00d f898 	bl	27a9c <log_0>
			return -EINVAL;
   1a96c:	f06f 0515 	mvn.w	r5, #21
}
   1a970:	4628      	mov	r0, r5
   1a972:	b039      	add	sp, #228	; 0xe4
   1a974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1a978:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   1a97a:	a901      	add	r1, sp, #4
   1a97c:	4630      	mov	r0, r6
   1a97e:	f00d fd81 	bl	28484 <settings_name_next>
		if (!name) {
   1a982:	b96e      	cbnz	r6, 1a9a0 <ccc_set_direct+0x60>
   1a984:	492c      	ldr	r1, [pc, #176]	; (1aa38 <ccc_set_direct+0xf8>)
   1a986:	4b2b      	ldr	r3, [pc, #172]	; (1aa34 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
   1a988:	482d      	ldr	r0, [pc, #180]	; (1aa40 <ccc_set_direct+0x100>)
   1a98a:	1ac9      	subs	r1, r1, r3
   1a98c:	08c9      	lsrs	r1, r1, #3
   1a98e:	0189      	lsls	r1, r1, #6
   1a990:	f041 0101 	orr.w	r1, r1, #1
   1a994:	f00d f882 	bl	27a9c <log_0>
			return -EINVAL;
   1a998:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1a99c:	4625      	mov	r5, r4
   1a99e:	e7e7      	b.n	1a970 <ccc_set_direct+0x30>
		} else if (!next) {
   1a9a0:	9801      	ldr	r0, [sp, #4]
   1a9a2:	b9c8      	cbnz	r0, 1a9d8 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
   1a9a4:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   1a9a8:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1a9ac:	4649      	mov	r1, r9
   1a9ae:	4630      	mov	r0, r6
   1a9b0:	f00f f8fd 	bl	29bae <bt_settings_decode_key>
		if (err) {
   1a9b4:	4605      	mov	r5, r0
   1a9b6:	b1a0      	cbz	r0, 1a9e2 <ccc_set_direct+0xa2>
   1a9b8:	4a1e      	ldr	r2, [pc, #120]	; (1aa34 <ccc_set_direct+0xf4>)
   1a9ba:	4c1f      	ldr	r4, [pc, #124]	; (1aa38 <ccc_set_direct+0xf8>)
   1a9bc:	4630      	mov	r0, r6
   1a9be:	1aa4      	subs	r4, r4, r2
   1a9c0:	08e4      	lsrs	r4, r4, #3
   1a9c2:	f7f7 f827 	bl	11a14 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1a9c6:	01a4      	lsls	r4, r4, #6
   1a9c8:	f044 0401 	orr.w	r4, r4, #1
   1a9cc:	4601      	mov	r1, r0
   1a9ce:	4622      	mov	r2, r4
   1a9d0:	481c      	ldr	r0, [pc, #112]	; (1aa44 <ccc_set_direct+0x104>)
   1a9d2:	f00d f870 	bl	27ab6 <log_1>
   1a9d6:	e7df      	b.n	1a998 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
   1a9d8:	220a      	movs	r2, #10
   1a9da:	2100      	movs	r1, #0
   1a9dc:	f00e ff58 	bl	29890 <strtol>
   1a9e0:	e7e0      	b.n	1a9a4 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
   1a9e2:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1a9e6:	f1b8 0f00 	cmp.w	r8, #0
   1a9ea:	d01d      	beq.n	1aa28 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1a9ec:	ae08      	add	r6, sp, #32
   1a9ee:	22c0      	movs	r2, #192	; 0xc0
   1a9f0:	4631      	mov	r1, r6
   1a9f2:	4638      	mov	r0, r7
   1a9f4:	47a0      	blx	r4
			if (len < 0) {
   1a9f6:	1e04      	subs	r4, r0, #0
   1a9f8:	da0b      	bge.n	1aa12 <ccc_set_direct+0xd2>
   1a9fa:	4b0e      	ldr	r3, [pc, #56]	; (1aa34 <ccc_set_direct+0xf4>)
   1a9fc:	4a0e      	ldr	r2, [pc, #56]	; (1aa38 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
   1a9fe:	4812      	ldr	r0, [pc, #72]	; (1aa48 <ccc_set_direct+0x108>)
   1aa00:	1ad2      	subs	r2, r2, r3
   1aa02:	08d2      	lsrs	r2, r2, #3
   1aa04:	0192      	lsls	r2, r2, #6
   1aa06:	f042 0201 	orr.w	r2, r2, #1
   1aa0a:	4621      	mov	r1, r4
   1aa0c:	f00d f853 	bl	27ab6 <log_1>
				return len;
   1aa10:	e7c4      	b.n	1a99c <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   1aa12:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1aa14:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1aa16:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1aa18:	4a0c      	ldr	r2, [pc, #48]	; (1aa4c <ccc_set_direct+0x10c>)
   1aa1a:	ab04      	add	r3, sp, #16
   1aa1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1aa20:	2001      	movs	r0, #1
   1aa22:	f010 fb45 	bl	2b0b0 <bt_gatt_foreach_attr>
	return 0;
   1aa26:	e7a3      	b.n	1a970 <ccc_set_direct+0x30>
			load.count = 0;
   1aa28:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1aa2c:	e7f4      	b.n	1aa18 <ccc_set_direct+0xd8>
   1aa2e:	bf00      	nop
   1aa30:	0003056f 	.word	0x0003056f
   1aa34:	0002ccb8 	.word	0x0002ccb8
   1aa38:	0002cce0 	.word	0x0002cce0
   1aa3c:	00030576 	.word	0x00030576
   1aa40:	0002f004 	.word	0x0002f004
   1aa44:	0003041f 	.word	0x0003041f
   1aa48:	000303a9 	.word	0x000303a9
   1aa4c:	00019dd9 	.word	0x00019dd9

0001aa50 <bt_gatt_attr_next>:
{
   1aa50:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1aa52:	2300      	movs	r3, #0
   1aa54:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1aa56:	f7ff fe01 	bl	1a65c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1aa5a:	1c41      	adds	r1, r0, #1
   1aa5c:	b289      	uxth	r1, r1
   1aa5e:	4608      	mov	r0, r1
   1aa60:	4a03      	ldr	r2, [pc, #12]	; (1aa70 <bt_gatt_attr_next+0x20>)
   1aa62:	ab01      	add	r3, sp, #4
   1aa64:	f010 fb24 	bl	2b0b0 <bt_gatt_foreach_attr>
}
   1aa68:	9801      	ldr	r0, [sp, #4]
   1aa6a:	b003      	add	sp, #12
   1aa6c:	f85d fb04 	ldr.w	pc, [sp], #4
   1aa70:	0002ac9f 	.word	0x0002ac9f

0001aa74 <gatt_indicate>:
{
   1aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa78:	4615      	mov	r5, r2
   1aa7a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1aa7c:	2214      	movs	r2, #20
   1aa7e:	6869      	ldr	r1, [r5, #4]
{
   1aa80:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1aa82:	f010 fb20 	bl	2b0c6 <bt_gatt_check_perm>
   1aa86:	4607      	mov	r7, r0
   1aa88:	b170      	cbz	r0, 1aaa8 <gatt_indicate+0x34>
   1aa8a:	4b2a      	ldr	r3, [pc, #168]	; (1ab34 <gatt_indicate+0xc0>)
   1aa8c:	492a      	ldr	r1, [pc, #168]	; (1ab38 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   1aa8e:	482b      	ldr	r0, [pc, #172]	; (1ab3c <gatt_indicate+0xc8>)
   1aa90:	1ac9      	subs	r1, r1, r3
   1aa92:	08c9      	lsrs	r1, r1, #3
   1aa94:	0189      	lsls	r1, r1, #6
   1aa96:	f041 0102 	orr.w	r1, r1, #2
   1aa9a:	f00c ffff 	bl	27a9c <log_0>
		return -EPERM;
   1aa9e:	f04f 35ff 	mov.w	r5, #4294967295
}
   1aaa2:	4628      	mov	r0, r5
   1aaa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1aaa8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1aaac:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1aaae:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1aab0:	f7fe ff6a 	bl	19988 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1aab4:	3602      	adds	r6, #2
	if (!req) {
   1aab6:	4604      	mov	r4, r0
   1aab8:	b910      	cbnz	r0, 1aac0 <gatt_indicate+0x4c>
		return -ENOMEM;
   1aaba:	f06f 050b 	mvn.w	r5, #11
   1aabe:	e7f0      	b.n	1aaa2 <gatt_indicate+0x2e>
	req->func = func;
   1aac0:	4b1f      	ldr	r3, [pc, #124]	; (1ab40 <gatt_indicate+0xcc>)
	req->len = len;
   1aac2:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   1aac4:	211d      	movs	r1, #29
   1aac6:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1aac8:	60c7      	str	r7, [r0, #12]
	req->func = func;
   1aaca:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1aacc:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1aace:	4632      	mov	r2, r6
   1aad0:	4640      	mov	r0, r8
   1aad2:	f7fe fd0b 	bl	194ec <bt_att_create_pdu>
	if (!buf) {
   1aad6:	4606      	mov	r6, r0
   1aad8:	b968      	cbnz	r0, 1aaf6 <gatt_indicate+0x82>
   1aada:	4b16      	ldr	r3, [pc, #88]	; (1ab34 <gatt_indicate+0xc0>)
   1aadc:	4916      	ldr	r1, [pc, #88]	; (1ab38 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   1aade:	4819      	ldr	r0, [pc, #100]	; (1ab44 <gatt_indicate+0xd0>)
   1aae0:	1ac9      	subs	r1, r1, r3
   1aae2:	08c9      	lsrs	r1, r1, #3
   1aae4:	0189      	lsls	r1, r1, #6
   1aae6:	f041 0102 	orr.w	r1, r1, #2
   1aaea:	f00c ffd7 	bl	27a9c <log_0>
		bt_att_req_free(req);
   1aaee:	4620      	mov	r0, r4
   1aaf0:	f7fe ff60 	bl	199b4 <bt_att_req_free>
   1aaf4:	e7e1      	b.n	1aaba <gatt_indicate+0x46>
	return net_buf_simple_add(&buf->b, len);
   1aaf6:	f100 0a08 	add.w	sl, r0, #8
   1aafa:	2102      	movs	r1, #2
   1aafc:	4650      	mov	r0, sl
   1aafe:	f002 fdd1 	bl	1d6a4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1ab02:	4607      	mov	r7, r0
   1ab04:	8aa9      	ldrh	r1, [r5, #20]
   1ab06:	f827 9b02 	strh.w	r9, [r7], #2
   1ab0a:	4650      	mov	r0, sl
   1ab0c:	f002 fdca 	bl	1d6a4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1ab10:	8aaa      	ldrh	r2, [r5, #20]
   1ab12:	6929      	ldr	r1, [r5, #16]
   1ab14:	4638      	mov	r0, r7
   1ab16:	f00e ffa0 	bl	29a5a <memcpy>
	req->buf = buf;
   1ab1a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1ab1c:	4621      	mov	r1, r4
   1ab1e:	4640      	mov	r0, r8
   1ab20:	f7ff f882 	bl	19c28 <bt_att_req_send>
	if (err) {
   1ab24:	4605      	mov	r5, r0
   1ab26:	2800      	cmp	r0, #0
   1ab28:	d0bb      	beq.n	1aaa2 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1ab2a:	4620      	mov	r0, r4
   1ab2c:	f7fe ff42 	bl	199b4 <bt_att_req_free>
   1ab30:	e7b7      	b.n	1aaa2 <gatt_indicate+0x2e>
   1ab32:	bf00      	nop
   1ab34:	0002ccb8 	.word	0x0002ccb8
   1ab38:	0002cce0 	.word	0x0002cce0
   1ab3c:	00030582 	.word	0x00030582
   1ab40:	0002acb9 	.word	0x0002acb9
   1ab44:	00030598 	.word	0x00030598

0001ab48 <bt_gatt_indicate>:
{
   1ab48:	b530      	push	{r4, r5, lr}
   1ab4a:	4605      	mov	r5, r0
   1ab4c:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1ab4e:	460c      	mov	r4, r1
   1ab50:	b971      	cbnz	r1, 1ab70 <bt_gatt_indicate+0x28>
   1ab52:	4946      	ldr	r1, [pc, #280]	; (1ac6c <bt_gatt_indicate+0x124>)
   1ab54:	4a46      	ldr	r2, [pc, #280]	; (1ac70 <bt_gatt_indicate+0x128>)
   1ab56:	4847      	ldr	r0, [pc, #284]	; (1ac74 <bt_gatt_indicate+0x12c>)
   1ab58:	f640 1331 	movw	r3, #2353	; 0x931
   1ab5c:	f00c fccb 	bl	274f6 <printk>
   1ab60:	4845      	ldr	r0, [pc, #276]	; (1ac78 <bt_gatt_indicate+0x130>)
   1ab62:	f00c fcc8 	bl	274f6 <printk>
   1ab66:	4842      	ldr	r0, [pc, #264]	; (1ac70 <bt_gatt_indicate+0x128>)
   1ab68:	f640 1131 	movw	r1, #2353	; 0x931
   1ab6c:	f00c ff68 	bl	27a40 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1ab70:	6863      	ldr	r3, [r4, #4]
   1ab72:	b983      	cbnz	r3, 1ab96 <bt_gatt_indicate+0x4e>
   1ab74:	6823      	ldr	r3, [r4, #0]
   1ab76:	b973      	cbnz	r3, 1ab96 <bt_gatt_indicate+0x4e>
   1ab78:	4940      	ldr	r1, [pc, #256]	; (1ac7c <bt_gatt_indicate+0x134>)
   1ab7a:	4a3d      	ldr	r2, [pc, #244]	; (1ac70 <bt_gatt_indicate+0x128>)
   1ab7c:	483d      	ldr	r0, [pc, #244]	; (1ac74 <bt_gatt_indicate+0x12c>)
   1ab7e:	f640 1332 	movw	r3, #2354	; 0x932
   1ab82:	f00c fcb8 	bl	274f6 <printk>
   1ab86:	483c      	ldr	r0, [pc, #240]	; (1ac78 <bt_gatt_indicate+0x130>)
   1ab88:	f00c fcb5 	bl	274f6 <printk>
   1ab8c:	4838      	ldr	r0, [pc, #224]	; (1ac70 <bt_gatt_indicate+0x128>)
   1ab8e:	f640 1132 	movw	r1, #2354	; 0x932
   1ab92:	f00c ff55 	bl	27a40 <assert_post_action>
   1ab96:	483a      	ldr	r0, [pc, #232]	; (1ac80 <bt_gatt_indicate+0x138>)
   1ab98:	f010 f8a7 	bl	2acea <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ab9c:	0782      	lsls	r2, r0, #30
   1ab9e:	d55f      	bpl.n	1ac60 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1aba0:	b115      	cbz	r5, 1aba8 <bt_gatt_indicate+0x60>
   1aba2:	7b6b      	ldrb	r3, [r5, #13]
   1aba4:	2b07      	cmp	r3, #7
   1aba6:	d15e      	bne.n	1ac66 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   1aba8:	6860      	ldr	r0, [r4, #4]
   1abaa:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1abac:	f7ff fd56 	bl	1a65c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1abb0:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1abb2:	f8ad 0018 	strh.w	r0, [sp, #24]
   1abb6:	4603      	mov	r3, r0
	if (params->uuid) {
   1abb8:	b162      	cbz	r2, 1abd4 <bt_gatt_indicate+0x8c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1abba:	a905      	add	r1, sp, #20
   1abbc:	9102      	str	r1, [sp, #8]
   1abbe:	4931      	ldr	r1, [pc, #196]	; (1ac84 <bt_gatt_indicate+0x13c>)
   1abc0:	9101      	str	r1, [sp, #4]
   1abc2:	2101      	movs	r1, #1
	found->attr = NULL;
   1abc4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1abc6:	9100      	str	r1, [sp, #0]
   1abc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1abcc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1abce:	f7ff fd91 	bl	1a6f4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1abd2:	9b05      	ldr	r3, [sp, #20]
   1abd4:	b1bb      	cbz	r3, 1ac06 <bt_gatt_indicate+0xbe>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1abd6:	9b05      	ldr	r3, [sp, #20]
   1abd8:	6818      	ldr	r0, [r3, #0]
   1abda:	2300      	movs	r3, #0
   1abdc:	f88d 3010 	strb.w	r3, [sp, #16]
   1abe0:	a904      	add	r1, sp, #16
   1abe2:	f642 0303 	movw	r3, #10243	; 0x2803
   1abe6:	f8ad 3012 	strh.w	r3, [sp, #18]
   1abea:	f00f f804 	bl	29bf6 <bt_uuid_cmp>
   1abee:	b170      	cbz	r0, 1ac0e <bt_gatt_indicate+0xc6>
	if (conn) {
   1abf0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1abf4:	b1c5      	cbz	r5, 1ac28 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1abf6:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1abf8:	4601      	mov	r1, r0
		params->_ref = 1;
   1abfa:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1abfc:	4622      	mov	r2, r4
   1abfe:	4628      	mov	r0, r5
   1ac00:	f7ff ff38 	bl	1aa74 <gatt_indicate>
   1ac04:	e001      	b.n	1ac0a <bt_gatt_indicate+0xc2>
			return -ENOENT;
   1ac06:	f06f 0001 	mvn.w	r0, #1
}
   1ac0a:	b00b      	add	sp, #44	; 0x2c
   1ac0c:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1ac0e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1ac10:	68c3      	ldr	r3, [r0, #12]
   1ac12:	799b      	ldrb	r3, [r3, #6]
   1ac14:	069b      	lsls	r3, r3, #26
   1ac16:	d402      	bmi.n	1ac1e <bt_gatt_indicate+0xd6>
			return -EINVAL;
   1ac18:	f06f 0015 	mvn.w	r0, #21
   1ac1c:	e7f5      	b.n	1ac0a <bt_gatt_indicate+0xc2>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1ac1e:	f010 f9f9 	bl	2b014 <bt_gatt_attr_value_handle>
   1ac22:	f8ad 0018 	strh.w	r0, [sp, #24]
   1ac26:	e7e3      	b.n	1abf0 <bt_gatt_indicate+0xa8>
	data.err = -ENOTCONN;
   1ac28:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ac2c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1ac2e:	2302      	movs	r3, #2
   1ac30:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ac34:	f642 1302 	movw	r3, #10498	; 0x2902
   1ac38:	f8ad 3012 	strh.w	r3, [sp, #18]
   1ac3c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1ac3e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ac40:	9302      	str	r3, [sp, #8]
   1ac42:	4b11      	ldr	r3, [pc, #68]	; (1ac88 <bt_gatt_indicate+0x140>)
   1ac44:	9301      	str	r3, [sp, #4]
   1ac46:	2301      	movs	r3, #1
   1ac48:	9300      	str	r3, [sp, #0]
   1ac4a:	aa04      	add	r2, sp, #16
   1ac4c:	462b      	mov	r3, r5
   1ac4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1ac52:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ac54:	f88d 5010 	strb.w	r5, [sp, #16]
   1ac58:	f7ff fd4c 	bl	1a6f4 <bt_gatt_foreach_attr_type>
	return data.err;
   1ac5c:	9807      	ldr	r0, [sp, #28]
   1ac5e:	e7d4      	b.n	1ac0a <bt_gatt_indicate+0xc2>
		return -EAGAIN;
   1ac60:	f06f 000a 	mvn.w	r0, #10
   1ac64:	e7d1      	b.n	1ac0a <bt_gatt_indicate+0xc2>
		return -ENOTCONN;
   1ac66:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ac6a:	e7ce      	b.n	1ac0a <bt_gatt_indicate+0xc2>
   1ac6c:	000305bf 	.word	0x000305bf
   1ac70:	000304de 	.word	0x000304de
   1ac74:	0002dcd3 	.word	0x0002dcd3
   1ac78:	000305c6 	.word	0x000305c6
   1ac7c:	000305dc 	.word	0x000305dc
   1ac80:	20000350 	.word	0x20000350
   1ac84:	0002acdf 	.word	0x0002acdf
   1ac88:	0001aef9 	.word	0x0001aef9

0001ac8c <sc_process>:
{
   1ac8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1ac8e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1ac92:	4604      	mov	r4, r0
   1ac94:	4628      	mov	r0, r5
   1ac96:	f010 f828 	bl	2acea <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1ac9a:	0783      	lsls	r3, r0, #30
   1ac9c:	d50e      	bpl.n	1acbc <sc_process+0x30>
   1ac9e:	4919      	ldr	r1, [pc, #100]	; (1ad04 <sc_process+0x78>)
   1aca0:	4a19      	ldr	r2, [pc, #100]	; (1ad08 <sc_process+0x7c>)
   1aca2:	481a      	ldr	r0, [pc, #104]	; (1ad0c <sc_process+0x80>)
   1aca4:	f240 33df 	movw	r3, #991	; 0x3df
   1aca8:	f00c fc25 	bl	274f6 <printk>
   1acac:	4818      	ldr	r0, [pc, #96]	; (1ad10 <sc_process+0x84>)
   1acae:	f00c fc22 	bl	274f6 <printk>
   1acb2:	4815      	ldr	r0, [pc, #84]	; (1ad08 <sc_process+0x7c>)
   1acb4:	f240 31df 	movw	r1, #991	; 0x3df
   1acb8:	f00c fec2 	bl	27a40 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1acbc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1acc0:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1acc2:	f06f 0101 	mvn.w	r1, #1
   1acc6:	4628      	mov	r0, r5
   1acc8:	f010 f88b 	bl	2ade2 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1accc:	4b11      	ldr	r3, [pc, #68]	; (1ad14 <sc_process+0x88>)
   1acce:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1acd2:	4b11      	ldr	r3, [pc, #68]	; (1ad18 <sc_process+0x8c>)
   1acd4:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1acd8:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1acda:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1acdc:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1ace0:	2304      	movs	r3, #4
	sc->start = 0U;
   1ace2:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1ace6:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1acea:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1acee:	f1a4 0120 	sub.w	r1, r4, #32
   1acf2:	f7ff ff29 	bl	1ab48 <bt_gatt_indicate>
   1acf6:	b918      	cbnz	r0, 1ad00 <sc_process+0x74>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1acf8:	2102      	movs	r1, #2
   1acfa:	4628      	mov	r0, r5
   1acfc:	f010 f851 	bl	2ada2 <atomic_or>
}
   1ad00:	b003      	add	sp, #12
   1ad02:	bd30      	pop	{r4, r5, pc}
   1ad04:	000305f9 	.word	0x000305f9
   1ad08:	000304de 	.word	0x000304de
   1ad0c:	0002dcd3 	.word	0x0002dcd3
   1ad10:	0003062a 	.word	0x0003062a
   1ad14:	0002d470 	.word	0x0002d470
   1ad18:	0001a3d9 	.word	0x0001a3d9

0001ad1c <gatt_notify>:
{
   1ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad20:	4614      	mov	r4, r2
   1ad22:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1ad24:	2214      	movs	r2, #20
   1ad26:	6861      	ldr	r1, [r4, #4]
{
   1ad28:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1ad2a:	f010 f9cc 	bl	2b0c6 <bt_gatt_check_perm>
   1ad2e:	b168      	cbz	r0, 1ad4c <gatt_notify+0x30>
   1ad30:	4b1e      	ldr	r3, [pc, #120]	; (1adac <gatt_notify+0x90>)
   1ad32:	491f      	ldr	r1, [pc, #124]	; (1adb0 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   1ad34:	481f      	ldr	r0, [pc, #124]	; (1adb4 <gatt_notify+0x98>)
   1ad36:	1ac9      	subs	r1, r1, r3
   1ad38:	08c9      	lsrs	r1, r1, #3
   1ad3a:	0189      	lsls	r1, r1, #6
   1ad3c:	f041 0102 	orr.w	r1, r1, #2
   1ad40:	f00c feac 	bl	27a9c <log_0>
		return -EPERM;
   1ad44:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ad48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1ad4c:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1ad4e:	211b      	movs	r1, #27
   1ad50:	3202      	adds	r2, #2
   1ad52:	4638      	mov	r0, r7
   1ad54:	f7fe fbca 	bl	194ec <bt_att_create_pdu>
	if (!buf) {
   1ad58:	4605      	mov	r5, r0
   1ad5a:	b960      	cbnz	r0, 1ad76 <gatt_notify+0x5a>
   1ad5c:	4b13      	ldr	r3, [pc, #76]	; (1adac <gatt_notify+0x90>)
   1ad5e:	4914      	ldr	r1, [pc, #80]	; (1adb0 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   1ad60:	4815      	ldr	r0, [pc, #84]	; (1adb8 <gatt_notify+0x9c>)
   1ad62:	1ac9      	subs	r1, r1, r3
   1ad64:	08c9      	lsrs	r1, r1, #3
   1ad66:	0189      	lsls	r1, r1, #6
   1ad68:	f041 0102 	orr.w	r1, r1, #2
   1ad6c:	f00c fe96 	bl	27a9c <log_0>
		return -ENOMEM;
   1ad70:	f06f 000b 	mvn.w	r0, #11
   1ad74:	e7e8      	b.n	1ad48 <gatt_notify+0x2c>
   1ad76:	f100 0908 	add.w	r9, r0, #8
   1ad7a:	2102      	movs	r1, #2
   1ad7c:	4648      	mov	r0, r9
   1ad7e:	f002 fc91 	bl	1d6a4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1ad82:	4606      	mov	r6, r0
   1ad84:	89a1      	ldrh	r1, [r4, #12]
   1ad86:	f826 8b02 	strh.w	r8, [r6], #2
   1ad8a:	4648      	mov	r0, r9
   1ad8c:	f002 fc8a 	bl	1d6a4 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1ad90:	89a2      	ldrh	r2, [r4, #12]
   1ad92:	68a1      	ldr	r1, [r4, #8]
   1ad94:	4630      	mov	r0, r6
   1ad96:	f00e fe60 	bl	29a5a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ad9a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1ad9e:	4629      	mov	r1, r5
   1ada0:	4638      	mov	r0, r7
}
   1ada2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ada6:	f7fe bed1 	b.w	19b4c <bt_att_send>
   1adaa:	bf00      	nop
   1adac:	0002ccb8 	.word	0x0002ccb8
   1adb0:	0002cce0 	.word	0x0002cce0
   1adb4:	00030582 	.word	0x00030582
   1adb8:	00030645 	.word	0x00030645

0001adbc <bt_gatt_notify_cb>:
{
   1adbc:	b530      	push	{r4, r5, lr}
   1adbe:	4605      	mov	r5, r0
   1adc0:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1adc2:	460c      	mov	r4, r1
   1adc4:	b971      	cbnz	r1, 1ade4 <bt_gatt_notify_cb+0x28>
   1adc6:	4944      	ldr	r1, [pc, #272]	; (1aed8 <bt_gatt_notify_cb+0x11c>)
   1adc8:	4a44      	ldr	r2, [pc, #272]	; (1aedc <bt_gatt_notify_cb+0x120>)
   1adca:	4845      	ldr	r0, [pc, #276]	; (1aee0 <bt_gatt_notify_cb+0x124>)
   1adcc:	f640 03e5 	movw	r3, #2277	; 0x8e5
   1add0:	f00c fb91 	bl	274f6 <printk>
   1add4:	4843      	ldr	r0, [pc, #268]	; (1aee4 <bt_gatt_notify_cb+0x128>)
   1add6:	f00c fb8e 	bl	274f6 <printk>
   1adda:	4840      	ldr	r0, [pc, #256]	; (1aedc <bt_gatt_notify_cb+0x120>)
   1addc:	f640 01e5 	movw	r1, #2277	; 0x8e5
   1ade0:	f00c fe2e 	bl	27a40 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1ade4:	6863      	ldr	r3, [r4, #4]
   1ade6:	b983      	cbnz	r3, 1ae0a <bt_gatt_notify_cb+0x4e>
   1ade8:	6823      	ldr	r3, [r4, #0]
   1adea:	b973      	cbnz	r3, 1ae0a <bt_gatt_notify_cb+0x4e>
   1adec:	493e      	ldr	r1, [pc, #248]	; (1aee8 <bt_gatt_notify_cb+0x12c>)
   1adee:	4a3b      	ldr	r2, [pc, #236]	; (1aedc <bt_gatt_notify_cb+0x120>)
   1adf0:	483b      	ldr	r0, [pc, #236]	; (1aee0 <bt_gatt_notify_cb+0x124>)
   1adf2:	f640 03e6 	movw	r3, #2278	; 0x8e6
   1adf6:	f00c fb7e 	bl	274f6 <printk>
   1adfa:	483a      	ldr	r0, [pc, #232]	; (1aee4 <bt_gatt_notify_cb+0x128>)
   1adfc:	f00c fb7b 	bl	274f6 <printk>
   1ae00:	4836      	ldr	r0, [pc, #216]	; (1aedc <bt_gatt_notify_cb+0x120>)
   1ae02:	f640 01e6 	movw	r1, #2278	; 0x8e6
   1ae06:	f00c fe1b 	bl	27a40 <assert_post_action>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ae0a:	4838      	ldr	r0, [pc, #224]	; (1aeec <bt_gatt_notify_cb+0x130>)
   1ae0c:	f00f ff6d 	bl	2acea <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ae10:	0782      	lsls	r2, r0, #30
   1ae12:	d55b      	bpl.n	1aecc <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1ae14:	b115      	cbz	r5, 1ae1c <bt_gatt_notify_cb+0x60>
   1ae16:	7b6b      	ldrb	r3, [r5, #13]
   1ae18:	2b07      	cmp	r3, #7
   1ae1a:	d15a      	bne.n	1aed2 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   1ae1c:	6860      	ldr	r0, [r4, #4]
   1ae1e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ae20:	f7ff fc1c 	bl	1a65c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1ae24:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ae26:	f8ad 0018 	strh.w	r0, [sp, #24]
   1ae2a:	4603      	mov	r3, r0
	if (params->uuid) {
   1ae2c:	b162      	cbz	r2, 1ae48 <bt_gatt_notify_cb+0x8c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ae2e:	a905      	add	r1, sp, #20
   1ae30:	9102      	str	r1, [sp, #8]
   1ae32:	492f      	ldr	r1, [pc, #188]	; (1aef0 <bt_gatt_notify_cb+0x134>)
   1ae34:	9101      	str	r1, [sp, #4]
   1ae36:	2101      	movs	r1, #1
	found->attr = NULL;
   1ae38:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ae3a:	9100      	str	r1, [sp, #0]
   1ae3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1ae40:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ae42:	f7ff fc57 	bl	1a6f4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1ae46:	9b05      	ldr	r3, [sp, #20]
   1ae48:	b1ab      	cbz	r3, 1ae76 <bt_gatt_notify_cb+0xba>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1ae4a:	9b05      	ldr	r3, [sp, #20]
   1ae4c:	6818      	ldr	r0, [r3, #0]
   1ae4e:	2300      	movs	r3, #0
   1ae50:	f88d 3010 	strb.w	r3, [sp, #16]
   1ae54:	a904      	add	r1, sp, #16
   1ae56:	f642 0303 	movw	r3, #10243	; 0x2803
   1ae5a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1ae5e:	f00e feca 	bl	29bf6 <bt_uuid_cmp>
   1ae62:	b160      	cbz	r0, 1ae7e <bt_gatt_notify_cb+0xc2>
	if (conn) {
   1ae64:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1ae68:	b1b5      	cbz	r5, 1ae98 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   1ae6a:	4601      	mov	r1, r0
   1ae6c:	4622      	mov	r2, r4
   1ae6e:	4628      	mov	r0, r5
   1ae70:	f7ff ff54 	bl	1ad1c <gatt_notify>
   1ae74:	e001      	b.n	1ae7a <bt_gatt_notify_cb+0xbe>
			return -ENOENT;
   1ae76:	f06f 0001 	mvn.w	r0, #1
}
   1ae7a:	b00b      	add	sp, #44	; 0x2c
   1ae7c:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1ae7e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1ae80:	68c3      	ldr	r3, [r0, #12]
   1ae82:	799b      	ldrb	r3, [r3, #6]
   1ae84:	06db      	lsls	r3, r3, #27
   1ae86:	d402      	bmi.n	1ae8e <bt_gatt_notify_cb+0xd2>
			return -EINVAL;
   1ae88:	f06f 0015 	mvn.w	r0, #21
   1ae8c:	e7f5      	b.n	1ae7a <bt_gatt_notify_cb+0xbe>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1ae8e:	f010 f8c1 	bl	2b014 <bt_gatt_attr_value_handle>
   1ae92:	f8ad 0018 	strh.w	r0, [sp, #24]
   1ae96:	e7e5      	b.n	1ae64 <bt_gatt_notify_cb+0xa8>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ae98:	f642 1202 	movw	r2, #10498	; 0x2902
   1ae9c:	f8ad 2012 	strh.w	r2, [sp, #18]
   1aea0:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1aea2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1aea6:	9202      	str	r2, [sp, #8]
   1aea8:	4a12      	ldr	r2, [pc, #72]	; (1aef4 <bt_gatt_notify_cb+0x138>)
	data.err = -ENOTCONN;
   1aeaa:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1aeac:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1aeae:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1aeb2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1aeb6:	aa04      	add	r2, sp, #16
   1aeb8:	462b      	mov	r3, r5
   1aeba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1aebe:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1aec0:	f88d 5010 	strb.w	r5, [sp, #16]
   1aec4:	f7ff fc16 	bl	1a6f4 <bt_gatt_foreach_attr_type>
	return data.err;
   1aec8:	9807      	ldr	r0, [sp, #28]
   1aeca:	e7d6      	b.n	1ae7a <bt_gatt_notify_cb+0xbe>
		return -EAGAIN;
   1aecc:	f06f 000a 	mvn.w	r0, #10
   1aed0:	e7d3      	b.n	1ae7a <bt_gatt_notify_cb+0xbe>
		return -ENOTCONN;
   1aed2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1aed6:	e7d0      	b.n	1ae7a <bt_gatt_notify_cb+0xbe>
   1aed8:	000305bf 	.word	0x000305bf
   1aedc:	000304de 	.word	0x000304de
   1aee0:	0002dcd3 	.word	0x0002dcd3
   1aee4:	000305c6 	.word	0x000305c6
   1aee8:	000305dc 	.word	0x000305dc
   1aeec:	20000350 	.word	0x20000350
   1aef0:	0002acdf 	.word	0x0002acdf
   1aef4:	0001aef9 	.word	0x0001aef9

0001aef8 <notify_cb>:
{
   1aef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aefc:	4b3c      	ldr	r3, [pc, #240]	; (1aff0 <notify_cb+0xf8>)
{
   1aefe:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1af00:	6882      	ldr	r2, [r0, #8]
   1af02:	429a      	cmp	r2, r3
{
   1af04:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1af06:	d113      	bne.n	1af30 <notify_cb+0x38>
	ccc = attr->user_data;
   1af08:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1af0a:	4b3a      	ldr	r3, [pc, #232]	; (1aff4 <notify_cb+0xfc>)
   1af0c:	429f      	cmp	r7, r3
   1af0e:	d014      	beq.n	1af3a <notify_cb+0x42>
		if (cfg->value != data->type) {
   1af10:	893a      	ldrh	r2, [r7, #8]
   1af12:	89a3      	ldrh	r3, [r4, #12]
   1af14:	429a      	cmp	r2, r3
   1af16:	d10b      	bne.n	1af30 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1af18:	4639      	mov	r1, r7
   1af1a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1af1e:	f7fd fa31 	bl	18384 <bt_conn_lookup_addr_le>
		if (!conn) {
   1af22:	4605      	mov	r5, r0
   1af24:	b120      	cbz	r0, 1af30 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   1af26:	7b43      	ldrb	r3, [r0, #13]
   1af28:	2b07      	cmp	r3, #7
   1af2a:	d02e      	beq.n	1af8a <notify_cb+0x92>
			bt_conn_unref(conn);
   1af2c:	f7fd f82a 	bl	17f84 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1af30:	2701      	movs	r7, #1
}
   1af32:	4638      	mov	r0, r7
   1af34:	b003      	add	sp, #12
   1af36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1af3a:	f04f 0800 	mov.w	r8, #0
   1af3e:	4d2e      	ldr	r5, [pc, #184]	; (1aff8 <notify_cb+0x100>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1af40:	46c1      	mov	r9, r8
   1af42:	2207      	movs	r2, #7
   1af44:	4669      	mov	r1, sp
   1af46:	4628      	mov	r0, r5
   1af48:	f8cd 9000 	str.w	r9, [sp]
   1af4c:	f8cd 9003 	str.w	r9, [sp, #3]
   1af50:	f00e fd5c 	bl	29a0c <memcmp>
   1af54:	b178      	cbz	r0, 1af76 <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1af56:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1af5a:	2207      	movs	r2, #7
   1af5c:	4629      	mov	r1, r5
   1af5e:	f7fd fa55 	bl	1840c <bt_conn_lookup_state_le>
			if (!conn) {
   1af62:	b978      	cbnz	r0, 1af84 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1af64:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1af66:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1af6a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1af6c:	4629      	mov	r1, r5
   1af6e:	8853      	ldrh	r3, [r2, #2]
   1af70:	8812      	ldrh	r2, [r2, #0]
   1af72:	f7ff f827 	bl	19fc4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1af76:	350c      	adds	r5, #12
   1af78:	f1b8 0f00 	cmp.w	r8, #0
   1af7c:	d1c8      	bne.n	1af10 <notify_cb+0x18>
   1af7e:	f04f 0801 	mov.w	r8, #1
   1af82:	e7de      	b.n	1af42 <notify_cb+0x4a>
			bt_conn_unref(conn);
   1af84:	f7fc fffe 	bl	17f84 <bt_conn_unref>
   1af88:	e7f5      	b.n	1af76 <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1af8a:	697b      	ldr	r3, [r7, #20]
   1af8c:	b123      	cbz	r3, 1af98 <notify_cb+0xa0>
   1af8e:	4631      	mov	r1, r6
   1af90:	4798      	blx	r3
   1af92:	b908      	cbnz	r0, 1af98 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1af94:	4628      	mov	r0, r5
   1af96:	e7c9      	b.n	1af2c <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   1af98:	2214      	movs	r2, #20
   1af9a:	4631      	mov	r1, r6
   1af9c:	4628      	mov	r0, r5
   1af9e:	f010 f892 	bl	2b0c6 <bt_gatt_check_perm>
   1afa2:	4607      	mov	r7, r0
   1afa4:	b150      	cbz	r0, 1afbc <notify_cb+0xc4>
   1afa6:	4b15      	ldr	r3, [pc, #84]	; (1affc <notify_cb+0x104>)
   1afa8:	4915      	ldr	r1, [pc, #84]	; (1b000 <notify_cb+0x108>)
			BT_WARN("Link is not encrypted");
   1afaa:	4816      	ldr	r0, [pc, #88]	; (1b004 <notify_cb+0x10c>)
   1afac:	1ac9      	subs	r1, r1, r3
   1afae:	08c9      	lsrs	r1, r1, #3
   1afb0:	0189      	lsls	r1, r1, #6
   1afb2:	f041 0102 	orr.w	r1, r1, #2
   1afb6:	f00c fd71 	bl	27a9c <log_0>
			continue;
   1afba:	e7b9      	b.n	1af30 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1afbc:	89a3      	ldrh	r3, [r4, #12]
   1afbe:	88a1      	ldrh	r1, [r4, #4]
   1afc0:	6922      	ldr	r2, [r4, #16]
   1afc2:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1afc4:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1afc6:	d10f      	bne.n	1afe8 <notify_cb+0xf0>
			err = gatt_indicate(conn, data->handle,
   1afc8:	f7ff fd54 	bl	1aa74 <gatt_indicate>
			if (err == 0) {
   1afcc:	4606      	mov	r6, r0
   1afce:	b918      	cbnz	r0, 1afd8 <notify_cb+0xe0>
				data->ind_params->_ref++;
   1afd0:	6922      	ldr	r2, [r4, #16]
   1afd2:	7d93      	ldrb	r3, [r2, #22]
   1afd4:	3301      	adds	r3, #1
   1afd6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1afd8:	4628      	mov	r0, r5
   1afda:	f7fc ffd3 	bl	17f84 <bt_conn_unref>
		if (err < 0) {
   1afde:	2e00      	cmp	r6, #0
   1afe0:	dba7      	blt.n	1af32 <notify_cb+0x3a>
		data->err = 0;
   1afe2:	2300      	movs	r3, #0
   1afe4:	60a3      	str	r3, [r4, #8]
   1afe6:	e7a3      	b.n	1af30 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1afe8:	f7ff fe98 	bl	1ad1c <gatt_notify>
   1afec:	4606      	mov	r6, r0
   1afee:	e7f3      	b.n	1afd8 <notify_cb+0xe0>
   1aff0:	00019e8d 	.word	0x00019e8d
   1aff4:	20000568 	.word	0x20000568
   1aff8:	20003d41 	.word	0x20003d41
   1affc:	0002ccb8 	.word	0x0002ccb8
   1b000:	0002cce0 	.word	0x0002cce0
   1b004:	00030582 	.word	0x00030582

0001b008 <update_ccc>:
{
   1b008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b00c:	4b3e      	ldr	r3, [pc, #248]	; (1b108 <update_ccc+0x100>)
	struct bt_conn *conn = data->conn;
   1b00e:	6815      	ldr	r5, [r2, #0]
{
   1b010:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b012:	6882      	ldr	r2, [r0, #8]
   1b014:	429a      	cmp	r2, r3
{
   1b016:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b018:	d11c      	bne.n	1b054 <update_ccc+0x4c>
	ccc = attr->user_data;
   1b01a:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1b01c:	893b      	ldrh	r3, [r7, #8]
   1b01e:	b1cb      	cbz	r3, 1b054 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b020:	463a      	mov	r2, r7
   1b022:	4628      	mov	r0, r5
   1b024:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b028:	f00f f9b5 	bl	2a396 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b02c:	b190      	cbz	r0, 1b054 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b02e:	222a      	movs	r2, #42	; 0x2a
   1b030:	4621      	mov	r1, r4
   1b032:	4628      	mov	r0, r5
   1b034:	f010 f847 	bl	2b0c6 <bt_gatt_check_perm>
		if (err) {
   1b038:	b308      	cbz	r0, 1b07e <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b03a:	2803      	cmp	r0, #3
   1b03c:	d10e      	bne.n	1b05c <update_ccc+0x54>
   1b03e:	4a33      	ldr	r2, [pc, #204]	; (1b10c <update_ccc+0x104>)
   1b040:	4b33      	ldr	r3, [pc, #204]	; (1b110 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
   1b042:	4834      	ldr	r0, [pc, #208]	; (1b114 <update_ccc+0x10c>)
   1b044:	1ad2      	subs	r2, r2, r3
   1b046:	08d2      	lsrs	r2, r2, #3
   1b048:	0192      	lsls	r2, r2, #6
   1b04a:	f042 0202 	orr.w	r2, r2, #2
   1b04e:	4621      	mov	r1, r4
   1b050:	f00c fd31 	bl	27ab6 <log_1>
}
   1b054:	2001      	movs	r0, #1
   1b056:	b002      	add	sp, #8
   1b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1b05c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1b05e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   1b060:	bf14      	ite	ne
   1b062:	f04f 0802 	movne.w	r8, #2
   1b066:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1b06a:	f00f f992 	bl	2a392 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b06e:	4580      	cmp	r8, r0
   1b070:	d905      	bls.n	1b07e <update_ccc+0x76>
				if (data->sec < sec) {
   1b072:	7933      	ldrb	r3, [r6, #4]
   1b074:	4543      	cmp	r3, r8
   1b076:	d2ed      	bcs.n	1b054 <update_ccc+0x4c>
					data->sec = sec;
   1b078:	f886 8004 	strb.w	r8, [r6, #4]
   1b07c:	e7ea      	b.n	1b054 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
   1b07e:	4639      	mov	r1, r7
   1b080:	4620      	mov	r0, r4
   1b082:	f00f fe0f 	bl	2aca4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b086:	4b24      	ldr	r3, [pc, #144]	; (1b118 <update_ccc+0x110>)
   1b088:	429f      	cmp	r7, r3
   1b08a:	d1e3      	bne.n	1b054 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b08c:	7a28      	ldrb	r0, [r5, #8]
   1b08e:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b092:	f7fe ff75 	bl	19f80 <find_sc_cfg>
	if (!cfg) {
   1b096:	4604      	mov	r4, r0
   1b098:	2800      	cmp	r0, #0
   1b09a:	d0db      	beq.n	1b054 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
   1b09c:	8902      	ldrh	r2, [r0, #8]
   1b09e:	8943      	ldrh	r3, [r0, #10]
   1b0a0:	ea52 0103 	orrs.w	r1, r2, r3
   1b0a4:	d0d6      	beq.n	1b054 <update_ccc+0x4c>
	index = bt_conn_index(conn);
   1b0a6:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b0a8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b0ac:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1b0b0:	f7fd f896 	bl	181e0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b0b4:	4919      	ldr	r1, [pc, #100]	; (1b11c <update_ccc+0x114>)
   1b0b6:	4a1a      	ldr	r2, [pc, #104]	; (1b120 <update_ccc+0x118>)
   1b0b8:	2318      	movs	r3, #24
   1b0ba:	fb03 1300 	mla	r3, r3, r0, r1
   1b0be:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b0c0:	4a18      	ldr	r2, [pc, #96]	; (1b124 <update_ccc+0x11c>)
   1b0c2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1b0c4:	aa01      	add	r2, sp, #4
   1b0c6:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1b0c8:	2204      	movs	r2, #4
   1b0ca:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b0cc:	b203      	sxth	r3, r0
   1b0ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b0d2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1b0d6:	4628      	mov	r0, r5
   1b0d8:	f7ff fd36 	bl	1ab48 <bt_gatt_indicate>
   1b0dc:	b148      	cbz	r0, 1b0f2 <update_ccc+0xea>
   1b0de:	490b      	ldr	r1, [pc, #44]	; (1b10c <update_ccc+0x104>)
   1b0e0:	4b0b      	ldr	r3, [pc, #44]	; (1b110 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
   1b0e2:	4811      	ldr	r0, [pc, #68]	; (1b128 <update_ccc+0x120>)
   1b0e4:	1ac9      	subs	r1, r1, r3
   1b0e6:	08c9      	lsrs	r1, r1, #3
   1b0e8:	0189      	lsls	r1, r1, #6
   1b0ea:	f041 0101 	orr.w	r1, r1, #1
   1b0ee:	f00c fcd5 	bl	27a9c <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1b0f2:	2204      	movs	r2, #4
   1b0f4:	2100      	movs	r1, #0
   1b0f6:	f104 0008 	add.w	r0, r4, #8
   1b0fa:	f00e fcb9 	bl	29a70 <memset>
		sc_store(cfg);
   1b0fe:	4620      	mov	r0, r4
   1b100:	f7fe fe0c 	bl	19d1c <sc_store>
   1b104:	e7a6      	b.n	1b054 <update_ccc+0x4c>
   1b106:	bf00      	nop
   1b108:	00019e8d 	.word	0x00019e8d
   1b10c:	0002cce0 	.word	0x0002cce0
   1b110:	0002ccb8 	.word	0x0002ccb8
   1b114:	0003066e 	.word	0x0003066e
   1b118:	20000568 	.word	0x20000568
   1b11c:	200030bc 	.word	0x200030bc
   1b120:	0002d470 	.word	0x0002d470
   1b124:	0002ae8d 	.word	0x0002ae8d
   1b128:	00030682 	.word	0x00030682

0001b12c <bt_gatt_is_subscribed>:
{
   1b12c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b12e:	460c      	mov	r4, r1
   1b130:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1b132:	4606      	mov	r6, r0
   1b134:	b970      	cbnz	r0, 1b154 <bt_gatt_is_subscribed+0x28>
   1b136:	4933      	ldr	r1, [pc, #204]	; (1b204 <bt_gatt_is_subscribed+0xd8>)
   1b138:	4a33      	ldr	r2, [pc, #204]	; (1b208 <bt_gatt_is_subscribed+0xdc>)
   1b13a:	4834      	ldr	r0, [pc, #208]	; (1b20c <bt_gatt_is_subscribed+0xe0>)
   1b13c:	f640 235d 	movw	r3, #2653	; 0xa5d
   1b140:	f00c f9d9 	bl	274f6 <printk>
   1b144:	4832      	ldr	r0, [pc, #200]	; (1b210 <bt_gatt_is_subscribed+0xe4>)
   1b146:	f00c f9d6 	bl	274f6 <printk>
   1b14a:	482f      	ldr	r0, [pc, #188]	; (1b208 <bt_gatt_is_subscribed+0xdc>)
   1b14c:	f640 215d 	movw	r1, #2653	; 0xa5d
   1b150:	f00c fc76 	bl	27a40 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1b154:	b974      	cbnz	r4, 1b174 <bt_gatt_is_subscribed+0x48>
   1b156:	492f      	ldr	r1, [pc, #188]	; (1b214 <bt_gatt_is_subscribed+0xe8>)
   1b158:	4a2b      	ldr	r2, [pc, #172]	; (1b208 <bt_gatt_is_subscribed+0xdc>)
   1b15a:	482c      	ldr	r0, [pc, #176]	; (1b20c <bt_gatt_is_subscribed+0xe0>)
   1b15c:	f640 235e 	movw	r3, #2654	; 0xa5e
   1b160:	f00c f9c9 	bl	274f6 <printk>
   1b164:	482a      	ldr	r0, [pc, #168]	; (1b210 <bt_gatt_is_subscribed+0xe4>)
   1b166:	f00c f9c6 	bl	274f6 <printk>
   1b16a:	4827      	ldr	r0, [pc, #156]	; (1b208 <bt_gatt_is_subscribed+0xdc>)
   1b16c:	f640 215e 	movw	r1, #2654	; 0xa5e
   1b170:	f00c fc66 	bl	27a40 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1b174:	7b73      	ldrb	r3, [r6, #13]
   1b176:	2b07      	cmp	r3, #7
   1b178:	d002      	beq.n	1b180 <bt_gatt_is_subscribed+0x54>
		return false;
   1b17a:	2000      	movs	r0, #0
}
   1b17c:	b003      	add	sp, #12
   1b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1b180:	2300      	movs	r3, #0
   1b182:	f88d 3004 	strb.w	r3, [sp, #4]
   1b186:	6820      	ldr	r0, [r4, #0]
   1b188:	f642 0303 	movw	r3, #10243	; 0x2803
   1b18c:	a901      	add	r1, sp, #4
   1b18e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b192:	f00e fd30 	bl	29bf6 <bt_uuid_cmp>
   1b196:	b940      	cbnz	r0, 1b1aa <bt_gatt_is_subscribed+0x7e>
		if (!(chrc->properties &
   1b198:	68e3      	ldr	r3, [r4, #12]
   1b19a:	799b      	ldrb	r3, [r3, #6]
   1b19c:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1b1a0:	d0ec      	beq.n	1b17c <bt_gatt_is_subscribed+0x50>
		attr = bt_gatt_attr_next(attr);
   1b1a2:	4620      	mov	r0, r4
   1b1a4:	f7ff fc54 	bl	1aa50 <bt_gatt_attr_next>
   1b1a8:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b1aa:	2300      	movs	r3, #0
   1b1ac:	6820      	ldr	r0, [r4, #0]
   1b1ae:	f88d 3004 	strb.w	r3, [sp, #4]
   1b1b2:	a901      	add	r1, sp, #4
   1b1b4:	f642 1302 	movw	r3, #10498	; 0x2902
   1b1b8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b1bc:	f00e fd1b 	bl	29bf6 <bt_uuid_cmp>
   1b1c0:	b118      	cbz	r0, 1b1ca <bt_gatt_is_subscribed+0x9e>
		attr = bt_gatt_attr_next(attr);
   1b1c2:	4620      	mov	r0, r4
   1b1c4:	f7ff fc44 	bl	1aa50 <bt_gatt_attr_next>
   1b1c8:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b1ca:	6820      	ldr	r0, [r4, #0]
   1b1cc:	2500      	movs	r5, #0
   1b1ce:	f642 1302 	movw	r3, #10498	; 0x2902
   1b1d2:	a901      	add	r1, sp, #4
   1b1d4:	f88d 5004 	strb.w	r5, [sp, #4]
   1b1d8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b1dc:	f00e fd0b 	bl	29bf6 <bt_uuid_cmp>
   1b1e0:	2800      	cmp	r0, #0
   1b1e2:	d1ca      	bne.n	1b17a <bt_gatt_is_subscribed+0x4e>
	ccc = attr->user_data;
   1b1e4:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1b1e6:	4622      	mov	r2, r4
   1b1e8:	4630      	mov	r0, r6
   1b1ea:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b1ee:	f00f f8d2 	bl	2a396 <bt_conn_is_peer_addr_le>
   1b1f2:	2800      	cmp	r0, #0
   1b1f4:	d0c1      	beq.n	1b17a <bt_gatt_is_subscribed+0x4e>
   1b1f6:	8923      	ldrh	r3, [r4, #8]
   1b1f8:	421f      	tst	r7, r3
   1b1fa:	bf14      	ite	ne
   1b1fc:	2001      	movne	r0, #1
   1b1fe:	2000      	moveq	r0, #0
   1b200:	e7bc      	b.n	1b17c <bt_gatt_is_subscribed+0x50>
   1b202:	bf00      	nop
   1b204:	0002ff8b 	.word	0x0002ff8b
   1b208:	000304de 	.word	0x000304de
   1b20c:	0002dcd3 	.word	0x0002dcd3
   1b210:	0003069f 	.word	0x0003069f
   1b214:	000306b4 	.word	0x000306b4

0001b218 <bt_gatt_connected>:
{
   1b218:	b570      	push	{r4, r5, r6, lr}
   1b21a:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b21c:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1b220:	4604      	mov	r4, r0
	data.conn = conn;
   1b222:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1b224:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b226:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1b228:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b22c:	4629      	mov	r1, r5
   1b22e:	f00e fe47 	bl	29ec0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b232:	b190      	cbz	r0, 1b25a <bt_gatt_connected+0x42>
		if (conn->id) {
   1b234:	7a22      	ldrb	r2, [r4, #8]
   1b236:	b37a      	cbz	r2, 1b298 <bt_gatt_connected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b238:	ae02      	add	r6, sp, #8
   1b23a:	2104      	movs	r1, #4
   1b23c:	4630      	mov	r0, r6
   1b23e:	f00c f8be 	bl	273be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b242:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b244:	4a15      	ldr	r2, [pc, #84]	; (1b29c <bt_gatt_connected+0x84>)
   1b246:	2124      	movs	r1, #36	; 0x24
   1b248:	a805      	add	r0, sp, #20
   1b24a:	462b      	mov	r3, r5
   1b24c:	f7fa f8cc 	bl	153e8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1b250:	aa05      	add	r2, sp, #20
   1b252:	4913      	ldr	r1, [pc, #76]	; (1b2a0 <bt_gatt_connected+0x88>)
   1b254:	4610      	mov	r0, r2
   1b256:	f7f7 fe2f 	bl	12eb8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b25a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b25e:	4a11      	ldr	r2, [pc, #68]	; (1b2a4 <bt_gatt_connected+0x8c>)
   1b260:	ab03      	add	r3, sp, #12
   1b262:	2001      	movs	r0, #1
   1b264:	f00f ff24 	bl	2b0b0 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1b268:	4620      	mov	r0, r4
   1b26a:	f00f f892 	bl	2a392 <bt_conn_get_security>
   1b26e:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b272:	4288      	cmp	r0, r1
   1b274:	d20e      	bcs.n	1b294 <bt_gatt_connected+0x7c>
		int err = bt_conn_set_security(conn, data.sec);
   1b276:	4620      	mov	r0, r4
   1b278:	f00f f858 	bl	2a32c <bt_conn_set_security>
		if (err) {
   1b27c:	4601      	mov	r1, r0
   1b27e:	b148      	cbz	r0, 1b294 <bt_gatt_connected+0x7c>
   1b280:	4a09      	ldr	r2, [pc, #36]	; (1b2a8 <bt_gatt_connected+0x90>)
   1b282:	4b0a      	ldr	r3, [pc, #40]	; (1b2ac <bt_gatt_connected+0x94>)
			BT_WARN("Failed to set security for bonded peer (%d)",
   1b284:	480a      	ldr	r0, [pc, #40]	; (1b2b0 <bt_gatt_connected+0x98>)
   1b286:	1ad2      	subs	r2, r2, r3
   1b288:	08d2      	lsrs	r2, r2, #3
   1b28a:	0192      	lsls	r2, r2, #6
   1b28c:	f042 0202 	orr.w	r2, r2, #2
   1b290:	f00c fc11 	bl	27ab6 <log_1>
}
   1b294:	b00e      	add	sp, #56	; 0x38
   1b296:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b298:	9200      	str	r2, [sp, #0]
   1b29a:	e7d3      	b.n	1b244 <bt_gatt_connected+0x2c>
   1b29c:	00030572 	.word	0x00030572
   1b2a0:	0001a941 	.word	0x0001a941
   1b2a4:	0001b009 	.word	0x0001b009
   1b2a8:	0002cce0 	.word	0x0002cce0
   1b2ac:	0002ccb8 	.word	0x0002ccb8
   1b2b0:	000306b9 	.word	0x000306b9

0001b2b4 <bt_gatt_att_max_mtu_changed>:
{
   1b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b2b6:	4b09      	ldr	r3, [pc, #36]	; (1b2dc <bt_gatt_att_max_mtu_changed+0x28>)
   1b2b8:	681c      	ldr	r4, [r3, #0]
{
   1b2ba:	4605      	mov	r5, r0
   1b2bc:	460e      	mov	r6, r1
   1b2be:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b2c0:	b10c      	cbz	r4, 1b2c6 <bt_gatt_att_max_mtu_changed+0x12>
   1b2c2:	3c04      	subs	r4, #4
   1b2c4:	b904      	cbnz	r4, 1b2c8 <bt_gatt_att_max_mtu_changed+0x14>
}
   1b2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   1b2c8:	6823      	ldr	r3, [r4, #0]
   1b2ca:	b11b      	cbz	r3, 1b2d4 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   1b2cc:	463a      	mov	r2, r7
   1b2ce:	4631      	mov	r1, r6
   1b2d0:	4628      	mov	r0, r5
   1b2d2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b2d4:	1d23      	adds	r3, r4, #4
   1b2d6:	d0f6      	beq.n	1b2c6 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b2d8:	6864      	ldr	r4, [r4, #4]
   1b2da:	e7f1      	b.n	1b2c0 <bt_gatt_att_max_mtu_changed+0xc>
   1b2dc:	20003090 	.word	0x20003090

0001b2e0 <bt_gatt_encrypt_change>:
{
   1b2e0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b2e2:	4a06      	ldr	r2, [pc, #24]	; (1b2fc <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1b2e4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b2e6:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1b2e8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b2ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1b2ee:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b2f2:	f00f fedd 	bl	2b0b0 <bt_gatt_foreach_attr>
}
   1b2f6:	b003      	add	sp, #12
   1b2f8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2fc:	0001b009 	.word	0x0001b009

0001b300 <db_hash_read>:
{
   1b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b302:	4914      	ldr	r1, [pc, #80]	; (1b354 <db_hash_read+0x54>)
{
   1b304:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b308:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b30a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1b30e:	461f      	mov	r7, r3
   1b310:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b312:	f007 f8b3 	bl	2247c <k_work_cancel_delayable_sync>
   1b316:	4810      	ldr	r0, [pc, #64]	; (1b358 <db_hash_read+0x58>)
   1b318:	f00f fce7 	bl	2acea <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b31c:	0743      	lsls	r3, r0, #29
   1b31e:	d402      	bmi.n	1b326 <db_hash_read+0x26>
		db_hash_gen(true);
   1b320:	2001      	movs	r0, #1
   1b322:	f7ff fa5d 	bl	1a7e0 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1b326:	2101      	movs	r1, #1
   1b328:	4620      	mov	r0, r4
   1b32a:	f00f fef7 	bl	2b11c <bt_gatt_change_aware>
	if (offset > value_len) {
   1b32e:	2e10      	cmp	r6, #16
   1b330:	d80c      	bhi.n	1b34c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   1b332:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1b336:	4909      	ldr	r1, [pc, #36]	; (1b35c <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   1b338:	42bc      	cmp	r4, r7
   1b33a:	bfa8      	it	ge
   1b33c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b33e:	4622      	mov	r2, r4
   1b340:	4431      	add	r1, r6
   1b342:	4628      	mov	r0, r5
   1b344:	f00e fb89 	bl	29a5a <memcpy>
}
   1b348:	4620      	mov	r0, r4
   1b34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b34c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b350:	e7fa      	b.n	1b348 <db_hash_read+0x48>
   1b352:	bf00      	nop
   1b354:	20001a58 	.word	0x20001a58
   1b358:	20001ad0 	.word	0x20001ad0
   1b35c:	20001a08 	.word	0x20001a08

0001b360 <bt_gatt_store_ccc>:
{
   1b360:	b570      	push	{r4, r5, r6, lr}
   1b362:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1b364:	2300      	movs	r3, #0
{
   1b366:	4604      	mov	r4, r0
   1b368:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1b36a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1b36c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1b370:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1b372:	4a18      	ldr	r2, [pc, #96]	; (1b3d4 <bt_gatt_store_ccc+0x74>)
   1b374:	ab0d      	add	r3, sp, #52	; 0x34
   1b376:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b37a:	2001      	movs	r0, #1
   1b37c:	f00f fe98 	bl	2b0b0 <bt_gatt_foreach_attr>
	if (id) {
   1b380:	b31c      	cbz	r4, 1b3ca <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   1b382:	ae03      	add	r6, sp, #12
   1b384:	4622      	mov	r2, r4
   1b386:	2104      	movs	r1, #4
   1b388:	4630      	mov	r0, r6
   1b38a:	f00c f818 	bl	273be <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1b38e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b390:	4a11      	ldr	r2, [pc, #68]	; (1b3d8 <bt_gatt_store_ccc+0x78>)
   1b392:	462b      	mov	r3, r5
   1b394:	2124      	movs	r1, #36	; 0x24
   1b396:	a804      	add	r0, sp, #16
   1b398:	f7fa f826 	bl	153e8 <bt_settings_encode_key>
	if (save.count) {
   1b39c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1b39e:	b1b2      	cbz	r2, 1b3ce <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   1b3a0:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1b3a2:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1b3a4:	a804      	add	r0, sp, #16
   1b3a6:	f7f7 fd23 	bl	12df0 <settings_save_one>
	if (err) {
   1b3aa:	4604      	mov	r4, r0
   1b3ac:	b150      	cbz	r0, 1b3c4 <bt_gatt_store_ccc+0x64>
   1b3ae:	4a0b      	ldr	r2, [pc, #44]	; (1b3dc <bt_gatt_store_ccc+0x7c>)
   1b3b0:	4b0b      	ldr	r3, [pc, #44]	; (1b3e0 <bt_gatt_store_ccc+0x80>)
   1b3b2:	1ad2      	subs	r2, r2, r3
   1b3b4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
   1b3b6:	0192      	lsls	r2, r2, #6
   1b3b8:	4601      	mov	r1, r0
   1b3ba:	f042 0201 	orr.w	r2, r2, #1
   1b3be:	4809      	ldr	r0, [pc, #36]	; (1b3e4 <bt_gatt_store_ccc+0x84>)
   1b3c0:	f00c fb79 	bl	27ab6 <log_1>
}
   1b3c4:	4620      	mov	r0, r4
   1b3c6:	b040      	add	sp, #256	; 0x100
   1b3c8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b3ca:	9400      	str	r4, [sp, #0]
   1b3cc:	e7e0      	b.n	1b390 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1b3ce:	4611      	mov	r1, r2
   1b3d0:	e7e8      	b.n	1b3a4 <bt_gatt_store_ccc+0x44>
   1b3d2:	bf00      	nop
   1b3d4:	00019da1 	.word	0x00019da1
   1b3d8:	00030572 	.word	0x00030572
   1b3dc:	0002cce0 	.word	0x0002cce0
   1b3e0:	0002ccb8 	.word	0x0002ccb8
   1b3e4:	000306e5 	.word	0x000306e5

0001b3e8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3ea:	4604      	mov	r4, r0
   1b3ec:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b3ee:	4603      	mov	r3, r0
   1b3f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b3f4:	2001      	movs	r0, #1
   1b3f6:	4a37      	ldr	r2, [pc, #220]	; (1b4d4 <bt_gatt_disconnected+0xec>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b3f8:	f104 0590 	add.w	r5, r4, #144	; 0x90
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b3fc:	f00f fe58 	bl	2b0b0 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b400:	7a20      	ldrb	r0, [r4, #8]
   1b402:	4629      	mov	r1, r5
   1b404:	f00e fd5c 	bl	29ec0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1b408:	2800      	cmp	r0, #0
   1b40a:	d035      	beq.n	1b478 <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1b40c:	4629      	mov	r1, r5
   1b40e:	7a20      	ldrb	r0, [r4, #8]
   1b410:	f7ff ffa6 	bl	1b360 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1b414:	4620      	mov	r0, r4
   1b416:	f7fe febf 	bl	1a198 <find_cf_cfg>
	if (!cfg) {
   1b41a:	4606      	mov	r6, r0
   1b41c:	2800      	cmp	r0, #0
   1b41e:	d04a      	beq.n	1b4b6 <bt_gatt_disconnected+0xce>
		if (conn->id) {
   1b420:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1b422:	3608      	adds	r6, #8
		if (conn->id) {
   1b424:	2a00      	cmp	r2, #0
   1b426:	d048      	beq.n	1b4ba <bt_gatt_disconnected+0xd2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b428:	af02      	add	r7, sp, #8
   1b42a:	2104      	movs	r1, #4
   1b42c:	4638      	mov	r0, r7
   1b42e:	f00b ffc6 	bl	273be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b432:	9700      	str	r7, [sp, #0]
   1b434:	462b      	mov	r3, r5
   1b436:	4a28      	ldr	r2, [pc, #160]	; (1b4d8 <bt_gatt_disconnected+0xf0>)
   1b438:	2124      	movs	r1, #36	; 0x24
   1b43a:	a803      	add	r0, sp, #12
   1b43c:	f7f9 ffd4 	bl	153e8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1b440:	7a23      	ldrb	r3, [r4, #8]
   1b442:	2701      	movs	r7, #1
   1b444:	b93b      	cbnz	r3, 1b456 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1b446:	2300      	movs	r3, #0
   1b448:	9300      	str	r3, [sp, #0]
   1b44a:	4a23      	ldr	r2, [pc, #140]	; (1b4d8 <bt_gatt_disconnected+0xf0>)
   1b44c:	462b      	mov	r3, r5
   1b44e:	2124      	movs	r1, #36	; 0x24
   1b450:	a803      	add	r0, sp, #12
   1b452:	f7f9 ffc9 	bl	153e8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1b456:	4631      	mov	r1, r6
   1b458:	463a      	mov	r2, r7
   1b45a:	a803      	add	r0, sp, #12
   1b45c:	f7f7 fcc8 	bl	12df0 <settings_save_one>
	if (err) {
   1b460:	4601      	mov	r1, r0
   1b462:	b148      	cbz	r0, 1b478 <bt_gatt_disconnected+0x90>
   1b464:	4a1d      	ldr	r2, [pc, #116]	; (1b4dc <bt_gatt_disconnected+0xf4>)
   1b466:	4b1e      	ldr	r3, [pc, #120]	; (1b4e0 <bt_gatt_disconnected+0xf8>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   1b468:	481e      	ldr	r0, [pc, #120]	; (1b4e4 <bt_gatt_disconnected+0xfc>)
   1b46a:	1ad2      	subs	r2, r2, r3
   1b46c:	08d2      	lsrs	r2, r2, #3
   1b46e:	0192      	lsls	r2, r2, #6
   1b470:	f042 0201 	orr.w	r2, r2, #1
   1b474:	f00c fb1f 	bl	27ab6 <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b478:	7a20      	ldrb	r0, [r4, #8]
   1b47a:	4629      	mov	r1, r5
   1b47c:	f00e fd20 	bl	29ec0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b480:	b150      	cbz	r0, 1b498 <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
   1b482:	7a23      	ldrb	r3, [r4, #8]
   1b484:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b488:	4a17      	ldr	r2, [pc, #92]	; (1b4e8 <bt_gatt_disconnected+0x100>)
		struct addr_with_id addr_with_id = {
   1b48a:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b48c:	ab03      	add	r3, sp, #12
   1b48e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b492:	2001      	movs	r0, #1
   1b494:	f00f fe0c 	bl	2b0b0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1b498:	4620      	mov	r0, r4
   1b49a:	f7fe fe7d 	bl	1a198 <find_cf_cfg>
	if (!cfg) {
   1b49e:	4606      	mov	r6, r0
   1b4a0:	b138      	cbz	r0, 1b4b2 <bt_gatt_disconnected+0xca>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b4a2:	7a20      	ldrb	r0, [r4, #8]
   1b4a4:	4629      	mov	r1, r5
   1b4a6:	f00e fd0b 	bl	29ec0 <bt_addr_le_is_bonded>
   1b4aa:	b940      	cbnz	r0, 1b4be <bt_gatt_disconnected+0xd6>
		clear_cf_cfg(cfg);
   1b4ac:	4630      	mov	r0, r6
   1b4ae:	f00f fca7 	bl	2ae00 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1b4b2:	b00d      	add	sp, #52	; 0x34
   1b4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1b4b6:	4607      	mov	r7, r0
   1b4b8:	e7c5      	b.n	1b446 <bt_gatt_disconnected+0x5e>
   1b4ba:	2701      	movs	r7, #1
   1b4bc:	e7c3      	b.n	1b446 <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b4be:	4629      	mov	r1, r5
   1b4c0:	1c70      	adds	r0, r6, #1
   1b4c2:	f00f fc7d 	bl	2adc0 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b4c6:	f06f 0102 	mvn.w	r1, #2
   1b4ca:	f106 000c 	add.w	r0, r6, #12
   1b4ce:	f00f fc88 	bl	2ade2 <atomic_and>
}
   1b4d2:	e7ee      	b.n	1b4b2 <bt_gatt_disconnected+0xca>
   1b4d4:	0001a4e9 	.word	0x0001a4e9
   1b4d8:	0003072f 	.word	0x0003072f
   1b4dc:	0002cce0 	.word	0x0002cce0
   1b4e0:	0002ccb8 	.word	0x0002ccb8
   1b4e4:	00030703 	.word	0x00030703
   1b4e8:	00019e65 	.word	0x00019e65

0001b4ec <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1b4ec:	4b10      	ldr	r3, [pc, #64]	; (1b530 <get_io_capa+0x44>)
   1b4ee:	681b      	ldr	r3, [r3, #0]
   1b4f0:	b1bb      	cbz	r3, 1b522 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1b4f2:	681a      	ldr	r2, [r3, #0]
   1b4f4:	b142      	cbz	r2, 1b508 <get_io_capa+0x1c>
   1b4f6:	6859      	ldr	r1, [r3, #4]
   1b4f8:	b131      	cbz	r1, 1b508 <get_io_capa+0x1c>
   1b4fa:	6899      	ldr	r1, [r3, #8]
   1b4fc:	b911      	cbnz	r1, 1b504 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1b4fe:	490d      	ldr	r1, [pc, #52]	; (1b534 <get_io_capa+0x48>)
   1b500:	7809      	ldrb	r1, [r1, #0]
   1b502:	b939      	cbnz	r1, 1b514 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1b504:	2004      	movs	r0, #4
   1b506:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1b508:	490a      	ldr	r1, [pc, #40]	; (1b534 <get_io_capa+0x48>)
   1b50a:	7809      	ldrb	r1, [r1, #0]
   1b50c:	b111      	cbz	r1, 1b514 <get_io_capa+0x28>
   1b50e:	b10a      	cbz	r2, 1b514 <get_io_capa+0x28>
   1b510:	6899      	ldr	r1, [r3, #8]
   1b512:	b941      	cbnz	r1, 1b526 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1b514:	685b      	ldr	r3, [r3, #4]
   1b516:	b943      	cbnz	r3, 1b52a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1b518:	2a00      	cmp	r2, #0
   1b51a:	bf0c      	ite	eq
   1b51c:	2003      	moveq	r0, #3
   1b51e:	2000      	movne	r0, #0
   1b520:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1b522:	2003      	movs	r0, #3
   1b524:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1b526:	2001      	movs	r0, #1
   1b528:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1b52a:	2002      	movs	r0, #2
	}
}
   1b52c:	4770      	bx	lr
   1b52e:	bf00      	nop
   1b530:	2000303c 	.word	0x2000303c
   1b534:	20003eb1 	.word	0x20003eb1

0001b538 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b538:	4288      	cmp	r0, r1
{
   1b53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b53c:	4604      	mov	r4, r0
   1b53e:	460d      	mov	r5, r1
   1b540:	4616      	mov	r6, r2
   1b542:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b546:	d91a      	bls.n	1b57e <sys_memcpy_swap+0x46>
   1b548:	188b      	adds	r3, r1, r2
   1b54a:	4298      	cmp	r0, r3
   1b54c:	d20e      	bcs.n	1b56c <sys_memcpy_swap+0x34>
   1b54e:	490d      	ldr	r1, [pc, #52]	; (1b584 <sys_memcpy_swap+0x4c>)
   1b550:	4a0d      	ldr	r2, [pc, #52]	; (1b588 <sys_memcpy_swap+0x50>)
   1b552:	480e      	ldr	r0, [pc, #56]	; (1b58c <sys_memcpy_swap+0x54>)
   1b554:	f240 2317 	movw	r3, #535	; 0x217
   1b558:	f00b ffcd 	bl	274f6 <printk>
   1b55c:	480c      	ldr	r0, [pc, #48]	; (1b590 <sys_memcpy_swap+0x58>)
   1b55e:	f00b ffca 	bl	274f6 <printk>
   1b562:	4809      	ldr	r0, [pc, #36]	; (1b588 <sys_memcpy_swap+0x50>)
   1b564:	f240 2117 	movw	r1, #535	; 0x217
   1b568:	f00c fa6a 	bl	27a40 <assert_post_action>
	psrc += length - 1;
   1b56c:	3e01      	subs	r6, #1
   1b56e:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1b570:	f815 3901 	ldrb.w	r3, [r5], #-1
   1b574:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1b578:	42bc      	cmp	r4, r7
   1b57a:	d1f9      	bne.n	1b570 <sys_memcpy_swap+0x38>
}
   1b57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b57e:	d0e6      	beq.n	1b54e <sys_memcpy_swap+0x16>
   1b580:	42b9      	cmp	r1, r7
   1b582:	e7e3      	b.n	1b54c <sys_memcpy_swap+0x14>
   1b584:	0002ee89 	.word	0x0002ee89
   1b588:	0002ee5e 	.word	0x0002ee5e
   1b58c:	0002dcd3 	.word	0x0002dcd3
   1b590:	0002eee0 	.word	0x0002eee0

0001b594 <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
   1b594:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b596:	1d05      	adds	r5, r0, #4
{
   1b598:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b59a:	2108      	movs	r1, #8
   1b59c:	4628      	mov	r0, r5
   1b59e:	f00f fde6 	bl	2b16e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1b5a2:	490b      	ldr	r1, [pc, #44]	; (1b5d0 <smp_dhkey_generate+0x3c>)
   1b5a4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b5a8:	f7fc f9ca 	bl	17940 <bt_dh_key_gen>
	if (err) {
   1b5ac:	b170      	cbz	r0, 1b5cc <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b5ae:	2108      	movs	r1, #8
   1b5b0:	4628      	mov	r0, r5
   1b5b2:	f00f fdf0 	bl	2b196 <atomic_clear_bit>
   1b5b6:	4b07      	ldr	r3, [pc, #28]	; (1b5d4 <smp_dhkey_generate+0x40>)
   1b5b8:	4907      	ldr	r1, [pc, #28]	; (1b5d8 <smp_dhkey_generate+0x44>)

		BT_ERR("Failed to generate DHKey");
   1b5ba:	4808      	ldr	r0, [pc, #32]	; (1b5dc <smp_dhkey_generate+0x48>)
   1b5bc:	1ac9      	subs	r1, r1, r3
   1b5be:	08c9      	lsrs	r1, r1, #3
   1b5c0:	0189      	lsls	r1, r1, #6
   1b5c2:	f041 0101 	orr.w	r1, r1, #1
   1b5c6:	f00c fa69 	bl	27a9c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b5ca:	2008      	movs	r0, #8
	}

	return 0;
}
   1b5cc:	bd38      	pop	{r3, r4, r5, pc}
   1b5ce:	bf00      	nop
   1b5d0:	0002b887 	.word	0x0002b887
   1b5d4:	0002ccb8 	.word	0x0002ccb8
   1b5d8:	0002cd28 	.word	0x0002cd28
   1b5dc:	00030740 	.word	0x00030740

0001b5e0 <get_auth.isra.0>:
	if (sc_supported) {
   1b5e0:	4b0c      	ldr	r3, [pc, #48]	; (1b614 <get_auth.isra.0+0x34>)
   1b5e2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   1b5e4:	b510      	push	{r4, lr}
	if (sc_supported) {
   1b5e6:	b17b      	cbz	r3, 1b608 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1b5e8:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b5ec:	f7ff ff7e 	bl	1b4ec <get_io_capa>
	if (bondable) {
   1b5f0:	4b09      	ldr	r3, [pc, #36]	; (1b618 <get_auth.isra.0+0x38>)
   1b5f2:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b5f4:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1b5f6:	bf0c      	ite	eq
   1b5f8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1b5fc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1b600:	b12b      	cbz	r3, 1b60e <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1b602:	f044 0001 	orr.w	r0, r4, #1
}
   1b606:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1b608:	f000 0407 	and.w	r4, r0, #7
   1b60c:	e7ee      	b.n	1b5ec <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1b60e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1b612:	e7f8      	b.n	1b606 <get_auth.isra.0+0x26>
   1b614:	20003eb1 	.word	0x20003eb1
   1b618:	2000070e 	.word	0x2000070e

0001b61c <smp_chan_get>:
{
   1b61c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1b61e:	2106      	movs	r1, #6
   1b620:	f00e ff9a 	bl	2a558 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b624:	4604      	mov	r4, r0
   1b626:	b958      	cbnz	r0, 1b640 <smp_chan_get+0x24>
   1b628:	4907      	ldr	r1, [pc, #28]	; (1b648 <smp_chan_get+0x2c>)
   1b62a:	4b08      	ldr	r3, [pc, #32]	; (1b64c <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   1b62c:	4808      	ldr	r0, [pc, #32]	; (1b650 <smp_chan_get+0x34>)
   1b62e:	1ac9      	subs	r1, r1, r3
   1b630:	08c9      	lsrs	r1, r1, #3
   1b632:	0189      	lsls	r1, r1, #6
   1b634:	f041 0101 	orr.w	r1, r1, #1
   1b638:	f00c fa30 	bl	27a9c <log_0>
}
   1b63c:	4620      	mov	r0, r4
   1b63e:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1b640:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1b644:	e7fa      	b.n	1b63c <smp_chan_get+0x20>
   1b646:	bf00      	nop
   1b648:	0002cd28 	.word	0x0002cd28
   1b64c:	0002ccb8 	.word	0x0002ccb8
   1b650:	00030759 	.word	0x00030759

0001b654 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1b654:	4b0c      	ldr	r3, [pc, #48]	; (1b688 <bt_smp_accept+0x34>)
{
   1b656:	b510      	push	{r4, lr}
   1b658:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   1b65a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   1b65e:	b928      	cbnz	r0, 1b66c <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1b660:	4a0a      	ldr	r2, [pc, #40]	; (1b68c <bt_smp_accept+0x38>)
   1b662:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   1b666:	33f0      	adds	r3, #240	; 0xf0
   1b668:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1b66a:	bd10      	pop	{r4, pc}
   1b66c:	4b08      	ldr	r3, [pc, #32]	; (1b690 <bt_smp_accept+0x3c>)
   1b66e:	4a09      	ldr	r2, [pc, #36]	; (1b694 <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   1b670:	4809      	ldr	r0, [pc, #36]	; (1b698 <bt_smp_accept+0x44>)
   1b672:	1ad2      	subs	r2, r2, r3
   1b674:	08d2      	lsrs	r2, r2, #3
   1b676:	0192      	lsls	r2, r2, #6
   1b678:	f042 0201 	orr.w	r2, r2, #1
   1b67c:	4621      	mov	r1, r4
   1b67e:	f00c fa1a 	bl	27ab6 <log_1>
	return -ENOMEM;
   1b682:	f06f 000b 	mvn.w	r0, #11
   1b686:	e7f0      	b.n	1b66a <bt_smp_accept+0x16>
   1b688:	20001ad8 	.word	0x20001ad8
   1b68c:	0002d5ec 	.word	0x0002d5ec
   1b690:	0002ccb8 	.word	0x0002ccb8
   1b694:	0002cd28 	.word	0x0002cd28
   1b698:	00030774 	.word	0x00030774

0001b69c <smp_init>:
{
   1b69c:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1b69e:	22f0      	movs	r2, #240	; 0xf0
{
   1b6a0:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1b6a2:	2100      	movs	r1, #0
   1b6a4:	f00e f9e4 	bl	29a70 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1b6a8:	2110      	movs	r1, #16
   1b6aa:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1b6ae:	f004 fb55 	bl	1fd5c <bt_rand>
   1b6b2:	4604      	mov	r4, r0
   1b6b4:	b948      	cbnz	r0, 1b6ca <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1b6b6:	2105      	movs	r1, #5
   1b6b8:	4628      	mov	r0, r5
   1b6ba:	f00f fd58 	bl	2b16e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1b6be:	f7fc f92f 	bl	17920 <bt_pub_key_get>
   1b6c2:	4b03      	ldr	r3, [pc, #12]	; (1b6d0 <smp_init+0x34>)
   1b6c4:	6018      	str	r0, [r3, #0]
}
   1b6c6:	4620      	mov	r0, r4
   1b6c8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b6ca:	2408      	movs	r4, #8
   1b6cc:	e7fb      	b.n	1b6c6 <smp_init+0x2a>
   1b6ce:	bf00      	nop
   1b6d0:	200030d8 	.word	0x200030d8

0001b6d4 <smp_find>:
{
   1b6d4:	4601      	mov	r1, r0
   1b6d6:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1b6d8:	4803      	ldr	r0, [pc, #12]	; (1b6e8 <smp_find+0x14>)
   1b6da:	f00f fe27 	bl	2b32c <atomic_test_bit>
   1b6de:	2800      	cmp	r0, #0
}
   1b6e0:	4802      	ldr	r0, [pc, #8]	; (1b6ec <smp_find+0x18>)
   1b6e2:	bf08      	it	eq
   1b6e4:	2000      	moveq	r0, #0
   1b6e6:	bd08      	pop	{r3, pc}
   1b6e8:	20001adc 	.word	0x20001adc
   1b6ec:	20001ad8 	.word	0x20001ad8

0001b6f0 <compute_and_check_and_send_slave_dhcheck>:
{
   1b6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1b6f4:	2210      	movs	r2, #16
{
   1b6f6:	b0a3      	sub	sp, #140	; 0x8c
   1b6f8:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1b6fa:	2100      	movs	r1, #0
   1b6fc:	eb0d 0002 	add.w	r0, sp, r2
   1b700:	f00e f9b6 	bl	29a70 <memset>
	switch (smp->method) {
   1b704:	7a21      	ldrb	r1, [r4, #8]
   1b706:	2905      	cmp	r1, #5
   1b708:	f200 8099 	bhi.w	1b83e <compute_and_check_and_send_slave_dhcheck+0x14e>
   1b70c:	e8df f001 	tbb	[pc, r1]
   1b710:	09030309 	.word	0x09030309
   1b714:	8e97      	.short	0x8e97
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1b716:	2204      	movs	r2, #4
   1b718:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1b71c:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b71e:	f00e f99c 	bl	29a5a <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1b722:	4b79      	ldr	r3, [pc, #484]	; (1b908 <compute_and_check_and_send_slave_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   1b724:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1b728:	aa14      	add	r2, sp, #80	; 0x50
   1b72a:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1b72e:	6818      	ldr	r0, [r3, #0]
   1b730:	6859      	ldr	r1, [r3, #4]
   1b732:	4615      	mov	r5, r2
   1b734:	c503      	stmia	r5!, {r0, r1}
   1b736:	3308      	adds	r3, #8
   1b738:	42b3      	cmp	r3, r6
   1b73a:	462a      	mov	r2, r5
   1b73c:	d1f7      	bne.n	1b72e <compute_and_check_and_send_slave_dhcheck+0x3e>
   1b73e:	6818      	ldr	r0, [r3, #0]
   1b740:	791b      	ldrb	r3, [r3, #4]
   1b742:	6028      	str	r0, [r5, #0]
   1b744:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1b746:	ad0c      	add	r5, sp, #48	; 0x30
   1b748:	2220      	movs	r2, #32
   1b74a:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1b74e:	4628      	mov	r0, r5
   1b750:	f7ff fef2 	bl	1b538 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1b754:	486d      	ldr	r0, [pc, #436]	; (1b90c <compute_and_check_and_send_slave_dhcheck+0x21c>)
   1b756:	ab08      	add	r3, sp, #32
   1b758:	2220      	movs	r2, #32
   1b75a:	4629      	mov	r1, r5
   1b75c:	f00f fd2a 	bl	2b1b4 <bt_smp_aes_cmac>
	if (err) {
   1b760:	2800      	cmp	r0, #0
   1b762:	f040 80c7 	bne.w	1b8f4 <compute_and_check_and_send_slave_dhcheck+0x204>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b766:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1b76a:	2210      	movs	r2, #16
   1b76c:	4639      	mov	r1, r7
   1b76e:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b772:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1b776:	f7ff fedf 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1b77a:	2210      	movs	r2, #16
   1b77c:	4641      	mov	r1, r8
   1b77e:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1b782:	f7ff fed9 	bl	1b538 <sys_memcpy_swap>
	m[37] = a1->type;
   1b786:	f899 3097 	ldrb.w	r3, [r9, #151]	; 0x97
   1b78a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1b78e:	2206      	movs	r2, #6
   1b790:	f109 0198 	add.w	r1, r9, #152	; 0x98
   1b794:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1b798:	f7ff fece 	bl	1b538 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1b79c:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1b7a0:	f899 309e 	ldrb.w	r3, [r9, #158]	; 0x9e
   1b7a4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1b7a8:	2206      	movs	r2, #6
   1b7aa:	f109 019f 	add.w	r1, r9, #159	; 0x9f
   1b7ae:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1b7b2:	f7ff fec1 	bl	1b538 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1b7b6:	4633      	mov	r3, r6
   1b7b8:	2235      	movs	r2, #53	; 0x35
   1b7ba:	a914      	add	r1, sp, #80	; 0x50
   1b7bc:	a808      	add	r0, sp, #32
   1b7be:	f00f fcf9 	bl	2b1b4 <bt_smp_aes_cmac>
	if (err) {
   1b7c2:	2800      	cmp	r0, #0
   1b7c4:	f040 8096 	bne.w	1b8f4 <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(mackey, 16);
   1b7c8:	4630      	mov	r0, r6
   1b7ca:	f00f fd2e 	bl	2b22a <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1b7ce:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1b7d2:	2301      	movs	r3, #1
   1b7d4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1b7d8:	2235      	movs	r2, #53	; 0x35
   1b7da:	464b      	mov	r3, r9
   1b7dc:	a914      	add	r1, sp, #80	; 0x50
   1b7de:	a808      	add	r0, sp, #32
   1b7e0:	f00f fce8 	bl	2b1b4 <bt_smp_aes_cmac>
	if (err) {
   1b7e4:	2800      	cmp	r0, #0
   1b7e6:	f040 8085 	bne.w	1b8f4 <compute_and_check_and_send_slave_dhcheck+0x204>
	sys_mem_swap(ltk, 16);
   1b7ea:	4648      	mov	r0, r9
   1b7ec:	f00f fd1d 	bl	2b22a <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1b7f0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b7f4:	aa14      	add	r2, sp, #80	; 0x50
   1b7f6:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1b7f8:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1b7fc:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b7fe:	9301      	str	r3, [sp, #4]
   1b800:	f104 0311 	add.w	r3, r4, #17
   1b804:	9202      	str	r2, [sp, #8]
   1b806:	9300      	str	r3, [sp, #0]
   1b808:	463a      	mov	r2, r7
   1b80a:	ab04      	add	r3, sp, #16
   1b80c:	4641      	mov	r1, r8
   1b80e:	4630      	mov	r0, r6
   1b810:	f00f fd19 	bl	2b246 <smp_f6>
   1b814:	b1f8      	cbz	r0, 1b856 <compute_and_check_and_send_slave_dhcheck+0x166>
   1b816:	493e      	ldr	r1, [pc, #248]	; (1b910 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1b818:	4b3e      	ldr	r3, [pc, #248]	; (1b914 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate local DHKey check failed");
   1b81a:	483f      	ldr	r0, [pc, #252]	; (1b918 <compute_and_check_and_send_slave_dhcheck+0x228>)
   1b81c:	1ac9      	subs	r1, r1, r3
   1b81e:	08c9      	lsrs	r1, r1, #3
   1b820:	0189      	lsls	r1, r1, #6
   1b822:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   1b826:	f00c f939 	bl	27a9c <log_0>
   1b82a:	e012      	b.n	1b852 <compute_and_check_and_send_slave_dhcheck+0x162>
		if (smp->oobd_remote) {
   1b82c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1b830:	2900      	cmp	r1, #0
   1b832:	f43f af76 	beq.w	1b722 <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b836:	2210      	movs	r2, #16
   1b838:	eb0d 0002 	add.w	r0, sp, r2
   1b83c:	e76f      	b.n	1b71e <compute_and_check_and_send_slave_dhcheck+0x2e>
   1b83e:	4a34      	ldr	r2, [pc, #208]	; (1b910 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1b840:	4b34      	ldr	r3, [pc, #208]	; (1b914 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b842:	4836      	ldr	r0, [pc, #216]	; (1b91c <compute_and_check_and_send_slave_dhcheck+0x22c>)
   1b844:	1ad2      	subs	r2, r2, r3
   1b846:	08d2      	lsrs	r2, r2, #3
   1b848:	0192      	lsls	r2, r2, #6
   1b84a:	f042 0201 	orr.w	r2, r2, #1
   1b84e:	f00c f932 	bl	27ab6 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1b852:	2008      	movs	r0, #8
   1b854:	e049      	b.n	1b8ea <compute_and_check_and_send_slave_dhcheck+0x1fa>
	if (smp->method == LE_SC_OOB) {
   1b856:	7a23      	ldrb	r3, [r4, #8]
   1b858:	2b05      	cmp	r3, #5
   1b85a:	d107      	bne.n	1b86c <compute_and_check_and_send_slave_dhcheck+0x17c>
		if (smp->oobd_local) {
   1b85c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b860:	2210      	movs	r2, #16
   1b862:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1b866:	b1e1      	cbz	r1, 1b8a2 <compute_and_check_and_send_slave_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b868:	f00e f8f7 	bl	29a5a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1b86c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b870:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1b872:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1b876:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b878:	9301      	str	r3, [sp, #4]
   1b87a:	f104 030a 	add.w	r3, r4, #10
   1b87e:	9202      	str	r2, [sp, #8]
   1b880:	9300      	str	r3, [sp, #0]
   1b882:	4642      	mov	r2, r8
   1b884:	ab04      	add	r3, sp, #16
   1b886:	4639      	mov	r1, r7
   1b888:	4630      	mov	r0, r6
   1b88a:	f00f fcdc 	bl	2b246 <smp_f6>
   1b88e:	b158      	cbz	r0, 1b8a8 <compute_and_check_and_send_slave_dhcheck+0x1b8>
   1b890:	491f      	ldr	r1, [pc, #124]	; (1b910 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1b892:	4b20      	ldr	r3, [pc, #128]	; (1b914 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate remote DHKey check failed");
   1b894:	4822      	ldr	r0, [pc, #136]	; (1b920 <compute_and_check_and_send_slave_dhcheck+0x230>)
   1b896:	1ac9      	subs	r1, r1, r3
   1b898:	08c9      	lsrs	r1, r1, #3
   1b89a:	0189      	lsls	r1, r1, #6
   1b89c:	f041 0101 	orr.w	r1, r1, #1
   1b8a0:	e7c1      	b.n	1b826 <compute_and_check_and_send_slave_dhcheck+0x136>
			memset(r, 0, sizeof(r));
   1b8a2:	f00e f8e5 	bl	29a70 <memset>
   1b8a6:	e7e1      	b.n	1b86c <compute_and_check_and_send_slave_dhcheck+0x17c>
	if (memcmp(smp->e, re, 16)) {
   1b8a8:	4629      	mov	r1, r5
   1b8aa:	2210      	movs	r2, #16
   1b8ac:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1b8b0:	f00e f8ac 	bl	29a0c <memcmp>
   1b8b4:	4605      	mov	r5, r0
   1b8b6:	b9d8      	cbnz	r0, 1b8f0 <compute_and_check_and_send_slave_dhcheck+0x200>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1b8b8:	210d      	movs	r1, #13
   1b8ba:	4620      	mov	r0, r4
   1b8bc:	f00f fd60 	bl	2b380 <smp_create_pdu.isra.0>
	if (!buf) {
   1b8c0:	4606      	mov	r6, r0
   1b8c2:	2800      	cmp	r0, #0
   1b8c4:	d0c5      	beq.n	1b852 <compute_and_check_and_send_slave_dhcheck+0x162>
   1b8c6:	2110      	movs	r1, #16
   1b8c8:	3008      	adds	r0, #8
   1b8ca:	f001 feeb 	bl	1d6a4 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1b8ce:	2210      	movs	r2, #16
   1b8d0:	a914      	add	r1, sp, #80	; 0x50
   1b8d2:	f00e f8c2 	bl	29a5a <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1b8d6:	462a      	mov	r2, r5
   1b8d8:	4631      	mov	r1, r6
   1b8da:	4620      	mov	r0, r4
   1b8dc:	f00f fc86 	bl	2b1ec <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b8e0:	1d20      	adds	r0, r4, #4
   1b8e2:	2101      	movs	r1, #1
   1b8e4:	f00f fc43 	bl	2b16e <atomic_set_bit>
	return 0;
   1b8e8:	4628      	mov	r0, r5
}
   1b8ea:	b023      	add	sp, #140	; 0x8c
   1b8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1b8f0:	200b      	movs	r0, #11
   1b8f2:	e7fa      	b.n	1b8ea <compute_and_check_and_send_slave_dhcheck+0x1fa>
   1b8f4:	4906      	ldr	r1, [pc, #24]	; (1b910 <compute_and_check_and_send_slave_dhcheck+0x220>)
   1b8f6:	4b07      	ldr	r3, [pc, #28]	; (1b914 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate LTK failed");
   1b8f8:	480a      	ldr	r0, [pc, #40]	; (1b924 <compute_and_check_and_send_slave_dhcheck+0x234>)
   1b8fa:	1ac9      	subs	r1, r1, r3
   1b8fc:	08c9      	lsrs	r1, r1, #3
   1b8fe:	0189      	lsls	r1, r1, #6
   1b900:	f041 0101 	orr.w	r1, r1, #1
   1b904:	e78f      	b.n	1b826 <compute_and_check_and_send_slave_dhcheck+0x136>
   1b906:	bf00      	nop
   1b908:	0002cee7 	.word	0x0002cee7
   1b90c:	00030ac5 	.word	0x00030ac5
   1b910:	0002cd28 	.word	0x0002cd28
   1b914:	0002ccb8 	.word	0x0002ccb8
   1b918:	000307b5 	.word	0x000307b5
   1b91c:	00030799 	.word	0x00030799
   1b920:	000307d8 	.word	0x000307d8
   1b924:	000307fc 	.word	0x000307fc

0001b928 <smp_send_pairing_confirm>:
{
   1b928:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1b92a:	7a04      	ldrb	r4, [r0, #8]
   1b92c:	2c02      	cmp	r4, #2
{
   1b92e:	4605      	mov	r5, r0
	switch (smp->method) {
   1b930:	d824      	bhi.n	1b97c <smp_send_pairing_confirm+0x54>
   1b932:	b14c      	cbz	r4, 1b948 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b934:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1b938:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1b93c:	40dc      	lsrs	r4, r3
   1b93e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1b942:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1b946:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1b948:	2103      	movs	r1, #3
   1b94a:	4628      	mov	r0, r5
   1b94c:	f00f fd18 	bl	2b380 <smp_create_pdu.isra.0>
	if (!buf) {
   1b950:	4606      	mov	r6, r0
   1b952:	b300      	cbz	r0, 1b996 <smp_send_pairing_confirm+0x6e>
   1b954:	2110      	movs	r1, #16
   1b956:	3008      	adds	r0, #8
   1b958:	f001 fea4 	bl	1d6a4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1b95c:	9000      	str	r0, [sp, #0]
   1b95e:	4816      	ldr	r0, [pc, #88]	; (1b9b8 <smp_send_pairing_confirm+0x90>)
   1b960:	4623      	mov	r3, r4
   1b962:	6800      	ldr	r0, [r0, #0]
   1b964:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1b968:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1b96c:	f00f fcb7 	bl	2b2de <smp_f4>
   1b970:	4604      	mov	r4, r0
   1b972:	b1a0      	cbz	r0, 1b99e <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   1b974:	4630      	mov	r0, r6
   1b976:	f001 fd65 	bl	1d444 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1b97a:	e00c      	b.n	1b996 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1b97c:	2c03      	cmp	r4, #3
   1b97e:	d00c      	beq.n	1b99a <smp_send_pairing_confirm+0x72>
   1b980:	4a0e      	ldr	r2, [pc, #56]	; (1b9bc <smp_send_pairing_confirm+0x94>)
   1b982:	4b0f      	ldr	r3, [pc, #60]	; (1b9c0 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b984:	480f      	ldr	r0, [pc, #60]	; (1b9c4 <smp_send_pairing_confirm+0x9c>)
   1b986:	1ad2      	subs	r2, r2, r3
   1b988:	08d2      	lsrs	r2, r2, #3
   1b98a:	0192      	lsls	r2, r2, #6
   1b98c:	f042 0201 	orr.w	r2, r2, #1
   1b990:	4621      	mov	r1, r4
   1b992:	f00c f890 	bl	27ab6 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1b996:	2008      	movs	r0, #8
   1b998:	e00b      	b.n	1b9b2 <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1b99a:	2400      	movs	r4, #0
   1b99c:	e7d4      	b.n	1b948 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1b99e:	4602      	mov	r2, r0
   1b9a0:	4631      	mov	r1, r6
   1b9a2:	4628      	mov	r0, r5
   1b9a4:	f00f fc22 	bl	2b1ec <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b9a8:	1d28      	adds	r0, r5, #4
   1b9aa:	4621      	mov	r1, r4
   1b9ac:	f00f fbf3 	bl	2b196 <atomic_clear_bit>
	return 0;
   1b9b0:	4620      	mov	r0, r4
}
   1b9b2:	b002      	add	sp, #8
   1b9b4:	bd70      	pop	{r4, r5, r6, pc}
   1b9b6:	bf00      	nop
   1b9b8:	200030d8 	.word	0x200030d8
   1b9bc:	0002cd28 	.word	0x0002cd28
   1b9c0:	0002ccb8 	.word	0x0002ccb8
   1b9c4:	00030799 	.word	0x00030799

0001b9c8 <smp_public_key_slave>:
{
   1b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b9cc:	1d06      	adds	r6, r0, #4
{
   1b9ce:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b9d0:	210e      	movs	r1, #14
   1b9d2:	4630      	mov	r0, r6
   1b9d4:	f00f fcaa 	bl	2b32c <atomic_test_bit>
   1b9d8:	b998      	cbnz	r0, 1ba02 <smp_public_key_slave+0x3a>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1b9da:	4b4e      	ldr	r3, [pc, #312]	; (1bb14 <smp_public_key_slave+0x14c>)
   1b9dc:	2220      	movs	r2, #32
   1b9de:	6819      	ldr	r1, [r3, #0]
   1b9e0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b9e4:	f00e f812 	bl	29a0c <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b9e8:	b958      	cbnz	r0, 1ba02 <smp_public_key_slave+0x3a>
   1b9ea:	494b      	ldr	r1, [pc, #300]	; (1bb18 <smp_public_key_slave+0x150>)
   1b9ec:	4b4b      	ldr	r3, [pc, #300]	; (1bb1c <smp_public_key_slave+0x154>)
		BT_WARN("Remote public key rejected");
   1b9ee:	484c      	ldr	r0, [pc, #304]	; (1bb20 <smp_public_key_slave+0x158>)
   1b9f0:	1ac9      	subs	r1, r1, r3
   1b9f2:	08c9      	lsrs	r1, r1, #3
   1b9f4:	0189      	lsls	r1, r1, #6
   1b9f6:	f041 0102 	orr.w	r1, r1, #2
   1b9fa:	f00c f84f 	bl	27a9c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b9fe:	2008      	movs	r0, #8
   1ba00:	e02e      	b.n	1ba60 <smp_public_key_slave+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ba02:	210c      	movs	r1, #12
   1ba04:	4620      	mov	r0, r4
   1ba06:	f00f fcbb 	bl	2b380 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1ba0a:	4605      	mov	r5, r0
   1ba0c:	2800      	cmp	r0, #0
   1ba0e:	d0f6      	beq.n	1b9fe <smp_public_key_slave+0x36>
   1ba10:	2140      	movs	r1, #64	; 0x40
   1ba12:	3008      	adds	r0, #8
   1ba14:	f001 fe46 	bl	1d6a4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1ba18:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1bb14 <smp_public_key_slave+0x14c>
   1ba1c:	2220      	movs	r2, #32
   1ba1e:	f8d8 1000 	ldr.w	r1, [r8]
   1ba22:	4607      	mov	r7, r0
   1ba24:	f00e f819 	bl	29a5a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1ba28:	f8d8 1000 	ldr.w	r1, [r8]
   1ba2c:	2220      	movs	r2, #32
   1ba2e:	4411      	add	r1, r2
   1ba30:	18b8      	adds	r0, r7, r2
   1ba32:	f00e f812 	bl	29a5a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1ba36:	4629      	mov	r1, r5
   1ba38:	2200      	movs	r2, #0
   1ba3a:	4620      	mov	r0, r4
   1ba3c:	f00f fbd6 	bl	2b1ec <smp_send.isra.0>
	switch (smp->method) {
   1ba40:	7a21      	ldrb	r1, [r4, #8]
   1ba42:	2905      	cmp	r1, #5
   1ba44:	d859      	bhi.n	1bafa <smp_public_key_slave+0x132>
   1ba46:	e8df f001 	tbb	[pc, r1]
   1ba4a:	3803      	.short	0x3803
   1ba4c:	5658030d 	.word	0x5658030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ba50:	2104      	movs	r1, #4
   1ba52:	4620      	mov	r0, r4
   1ba54:	f00f fb8b 	bl	2b16e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1ba58:	f7ff ff66 	bl	1b928 <smp_send_pairing_confirm>
		if (err) {
   1ba5c:	2800      	cmp	r0, #0
   1ba5e:	d03d      	beq.n	1badc <smp_public_key_slave+0x114>
}
   1ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ba64:	2104      	movs	r1, #4
   1ba66:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1ba6a:	f004 f977 	bl	1fd5c <bt_rand>
   1ba6e:	2800      	cmp	r0, #0
   1ba70:	d1c5      	bne.n	1b9fe <smp_public_key_slave+0x36>
		smp->passkey %= 1000000;
   1ba72:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ba76:	4a2b      	ldr	r2, [pc, #172]	; (1bb24 <smp_public_key_slave+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   1ba78:	4d2b      	ldr	r5, [pc, #172]	; (1bb28 <smp_public_key_slave+0x160>)
		smp->passkey %= 1000000;
   1ba7a:	fbb1 f3f2 	udiv	r3, r1, r2
   1ba7e:	fb02 1313 	mls	r3, r2, r3, r1
   1ba82:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   1ba86:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   1ba88:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1ba8c:	b163      	cbz	r3, 1baa8 <smp_public_key_slave+0xe0>
   1ba8e:	681b      	ldr	r3, [r3, #0]
   1ba90:	b153      	cbz	r3, 1baa8 <smp_public_key_slave+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ba92:	210b      	movs	r1, #11
   1ba94:	4630      	mov	r0, r6
   1ba96:	f00f fb6a 	bl	2b16e <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1ba9a:	682b      	ldr	r3, [r5, #0]
   1ba9c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1baa0:	681b      	ldr	r3, [r3, #0]
   1baa2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1baa6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1baa8:	2103      	movs	r1, #3
   1baaa:	4620      	mov	r0, r4
   1baac:	f00f fb5f 	bl	2b16e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1bab0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1bab2:	4620      	mov	r0, r4
   1bab4:	f00f fb5b 	bl	2b16e <atomic_set_bit>
		break;
   1bab8:	e010      	b.n	1badc <smp_public_key_slave+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1baba:	4620      	mov	r0, r4
   1babc:	2103      	movs	r1, #3
   1babe:	f00f fb56 	bl	2b16e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1bac2:	210e      	movs	r1, #14
   1bac4:	f00f fb53 	bl	2b16e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bac8:	4630      	mov	r0, r6
   1baca:	210a      	movs	r1, #10
   1bacc:	f00f fb4f 	bl	2b16e <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1bad0:	4b15      	ldr	r3, [pc, #84]	; (1bb28 <smp_public_key_slave+0x160>)
   1bad2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1bad6:	681b      	ldr	r3, [r3, #0]
   1bad8:	685b      	ldr	r3, [r3, #4]
   1bada:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1badc:	4630      	mov	r0, r6
   1bade:	2107      	movs	r1, #7
   1bae0:	f00f fb45 	bl	2b16e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1bae4:	2008      	movs	r0, #8
   1bae6:	f7ff fdf5 	bl	1b6d4 <smp_find>
   1baea:	b988      	cbnz	r0, 1bb10 <smp_public_key_slave+0x148>
		return smp_dhkey_generate(smp);
   1baec:	4620      	mov	r0, r4
}
   1baee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   1baf2:	f7ff bd4f 	b.w	1b594 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1baf6:	2104      	movs	r1, #4
   1baf8:	e7db      	b.n	1bab2 <smp_public_key_slave+0xea>
   1bafa:	4b08      	ldr	r3, [pc, #32]	; (1bb1c <smp_public_key_slave+0x154>)
   1bafc:	4a06      	ldr	r2, [pc, #24]	; (1bb18 <smp_public_key_slave+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bafe:	480b      	ldr	r0, [pc, #44]	; (1bb2c <smp_public_key_slave+0x164>)
   1bb00:	1ad2      	subs	r2, r2, r3
   1bb02:	08d2      	lsrs	r2, r2, #3
   1bb04:	0192      	lsls	r2, r2, #6
   1bb06:	f042 0201 	orr.w	r2, r2, #1
   1bb0a:	f00b ffd4 	bl	27ab6 <log_1>
   1bb0e:	e776      	b.n	1b9fe <smp_public_key_slave+0x36>
	return 0;
   1bb10:	2000      	movs	r0, #0
   1bb12:	e7a5      	b.n	1ba60 <smp_public_key_slave+0x98>
   1bb14:	200030d8 	.word	0x200030d8
   1bb18:	0002cd28 	.word	0x0002cd28
   1bb1c:	0002ccb8 	.word	0x0002ccb8
   1bb20:	00030811 	.word	0x00030811
   1bb24:	000f4240 	.word	0x000f4240
   1bb28:	2000303c 	.word	0x2000303c
   1bb2c:	00030799 	.word	0x00030799

0001bb30 <smp_public_key>:
{
   1bb30:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1bb32:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1bb34:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   1bb38:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1bb3a:	2220      	movs	r2, #32
   1bb3c:	4631      	mov	r1, r6
   1bb3e:	4628      	mov	r0, r5
   1bb40:	f00d ff8b 	bl	29a5a <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1bb44:	2220      	movs	r2, #32
   1bb46:	18b1      	adds	r1, r6, r2
   1bb48:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1bb4c:	f00d ff85 	bl	29a5a <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1bb50:	4628      	mov	r0, r5
   1bb52:	f7fb fe3f 	bl	177d4 <bt_pub_key_is_debug>
   1bb56:	b940      	cbnz	r0, 1bb6a <smp_public_key+0x3a>
	if (!sc_public_key) {
   1bb58:	4b1a      	ldr	r3, [pc, #104]	; (1bbc4 <smp_public_key+0x94>)
   1bb5a:	681d      	ldr	r5, [r3, #0]
   1bb5c:	bb6d      	cbnz	r5, 1bbba <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1bb5e:	1d20      	adds	r0, r4, #4
   1bb60:	2106      	movs	r1, #6
   1bb62:	f00f fb04 	bl	2b16e <atomic_set_bit>
		return 0;
   1bb66:	4628      	mov	r0, r5
   1bb68:	e026      	b.n	1bbb8 <smp_public_key+0x88>
   1bb6a:	4b17      	ldr	r3, [pc, #92]	; (1bbc8 <smp_public_key+0x98>)
   1bb6c:	4917      	ldr	r1, [pc, #92]	; (1bbcc <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
   1bb6e:	4818      	ldr	r0, [pc, #96]	; (1bbd0 <smp_public_key+0xa0>)
   1bb70:	1ac9      	subs	r1, r1, r3
   1bb72:	08c9      	lsrs	r1, r1, #3
   1bb74:	0189      	lsls	r1, r1, #6
   1bb76:	f041 0103 	orr.w	r1, r1, #3
   1bb7a:	f00b ff8f 	bl	27a9c <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1bb7e:	210e      	movs	r1, #14
   1bb80:	1d20      	adds	r0, r4, #4
   1bb82:	f00f faf4 	bl	2b16e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1bb86:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   1bb8a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1bb8e:	b933      	cbnz	r3, 1bb9e <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bb90:	7a28      	ldrb	r0, [r5, #8]
   1bb92:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1bb96:	f001 f919 	bl	1cdcc <bt_keys_get_addr>
   1bb9a:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1bb9e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1bba2:	2b00      	cmp	r3, #0
   1bba4:	d0d8      	beq.n	1bb58 <smp_public_key+0x28>
   1bba6:	89da      	ldrh	r2, [r3, #14]
   1bba8:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1bbac:	2a00      	cmp	r2, #0
   1bbae:	d0d3      	beq.n	1bb58 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1bbb0:	7b5b      	ldrb	r3, [r3, #13]
   1bbb2:	079b      	lsls	r3, r3, #30
   1bbb4:	d4d0      	bmi.n	1bb58 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1bbb6:	2003      	movs	r0, #3
}
   1bbb8:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
   1bbba:	4620      	mov	r0, r4
}
   1bbbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
   1bbc0:	f7ff bf02 	b.w	1b9c8 <smp_public_key_slave>
   1bbc4:	200030d8 	.word	0x200030d8
   1bbc8:	0002ccb8 	.word	0x0002ccb8
   1bbcc:	0002cd28 	.word	0x0002cd28
   1bbd0:	0003082c 	.word	0x0003082c

0001bbd4 <smp_pairing_req>:
{
   1bbd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   1bbd8:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1bbda:	78eb      	ldrb	r3, [r5, #3]
   1bbdc:	3b07      	subs	r3, #7
   1bbde:	2b09      	cmp	r3, #9
{
   1bbe0:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1bbe2:	d904      	bls.n	1bbee <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1bbe4:	2506      	movs	r5, #6
}
   1bbe6:	4628      	mov	r0, r5
   1bbe8:	b002      	add	sp, #8
   1bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1bbee:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   1bbf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1bbf6:	b15b      	cbz	r3, 1bc10 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1bbf8:	1d26      	adds	r6, r4, #4
   1bbfa:	210f      	movs	r1, #15
   1bbfc:	4630      	mov	r0, r6
   1bbfe:	f00f fb95 	bl	2b32c <atomic_test_bit>
   1bc02:	b980      	cbnz	r0, 1bc26 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   1bc04:	4620      	mov	r0, r4
   1bc06:	f7ff fd49 	bl	1b69c <smp_init>
		if (ret) {
   1bc0a:	b160      	cbz	r0, 1bc26 <smp_pairing_req+0x52>
			return ret;
   1bc0c:	b2c5      	uxtb	r5, r0
   1bc0e:	e7ea      	b.n	1bbe6 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bc10:	7a38      	ldrb	r0, [r7, #8]
   1bc12:	f107 0190 	add.w	r1, r7, #144	; 0x90
   1bc16:	f001 f8d9 	bl	1cdcc <bt_keys_get_addr>
   1bc1a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
		if (!conn->le.keys) {
   1bc1e:	2800      	cmp	r0, #0
   1bc20:	d1ea      	bne.n	1bbf8 <smp_pairing_req+0x24>
	switch (sec) {
   1bc22:	2508      	movs	r5, #8
   1bc24:	e7df      	b.n	1bbe6 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1bc26:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1bc28:	2206      	movs	r2, #6
   1bc2a:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1bc2c:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1bc2e:	f104 000a 	add.w	r0, r4, #10
   1bc32:	f00d ff12 	bl	29a5a <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1bc36:	2302      	movs	r3, #2
   1bc38:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1bc3a:	78a8      	ldrb	r0, [r5, #2]
   1bc3c:	f7ff fcd0 	bl	1b5e0 <get_auth.isra.0>
   1bc40:	74e0      	strb	r0, [r4, #19]
   1bc42:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   1bc44:	f7ff fc52 	bl	1b4ec <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bc48:	4ba4      	ldr	r3, [pc, #656]	; (1bedc <smp_pairing_req+0x308>)
	rsp->io_capability = get_io_capa();
   1bc4a:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bc4c:	781b      	ldrb	r3, [r3, #0]
   1bc4e:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1bc50:	2310      	movs	r3, #16
   1bc52:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1bc54:	792b      	ldrb	r3, [r5, #4]
   1bc56:	f003 0303 	and.w	r3, r3, #3
   1bc5a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1bc5c:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1bc5e:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1bc62:	f003 0301 	and.w	r3, r3, #1
   1bc66:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1bc68:	d00c      	beq.n	1bc84 <smp_pairing_req+0xb0>
   1bc6a:	78ab      	ldrb	r3, [r5, #2]
   1bc6c:	0719      	lsls	r1, r3, #28
   1bc6e:	d509      	bpl.n	1bc84 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1bc70:	2105      	movs	r1, #5
   1bc72:	4630      	mov	r0, r6
   1bc74:	f00f fa7b 	bl	2b16e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1bc78:	7d63      	ldrb	r3, [r4, #21]
   1bc7a:	f003 0302 	and.w	r3, r3, #2
   1bc7e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1bc80:	2300      	movs	r3, #0
   1bc82:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1bc84:	7ce3      	ldrb	r3, [r4, #19]
   1bc86:	069a      	lsls	r2, r3, #26
   1bc88:	d506      	bpl.n	1bc98 <smp_pairing_req+0xc4>
   1bc8a:	78ab      	ldrb	r3, [r5, #2]
   1bc8c:	069b      	lsls	r3, r3, #26
   1bc8e:	d503      	bpl.n	1bc98 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1bc90:	2114      	movs	r1, #20
   1bc92:	4630      	mov	r0, r6
   1bc94:	f00f fa6b 	bl	2b16e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1bc98:	7da3      	ldrb	r3, [r4, #22]
   1bc9a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1bc9e:	7d63      	ldrb	r3, [r4, #21]
   1bca0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1bca4:	7ce3      	ldrb	r3, [r4, #19]
   1bca6:	07d8      	lsls	r0, r3, #31
   1bca8:	d506      	bpl.n	1bcb8 <smp_pairing_req+0xe4>
   1bcaa:	78ab      	ldrb	r3, [r5, #2]
   1bcac:	07d9      	lsls	r1, r3, #31
   1bcae:	d503      	bpl.n	1bcb8 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1bcb0:	210d      	movs	r1, #13
   1bcb2:	4630      	mov	r0, r6
   1bcb4:	f00f fa5b 	bl	2b16e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1bcb8:	2103      	movs	r1, #3
   1bcba:	4630      	mov	r0, r6
   1bcbc:	f00f fa57 	bl	2b16e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bcc0:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1bcc2:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bcc4:	f00f fb32 	bl	2b32c <atomic_test_bit>
   1bcc8:	bb28      	cbnz	r0, 1bd16 <smp_pairing_req+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bcca:	2d04      	cmp	r5, #4
   1bccc:	d81a      	bhi.n	1bd04 <smp_pairing_req+0x130>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1bcce:	7ca2      	ldrb	r2, [r4, #18]
   1bcd0:	7ae3      	ldrb	r3, [r4, #11]
   1bcd2:	4013      	ands	r3, r2
   1bcd4:	07da      	lsls	r2, r3, #31
   1bcd6:	d437      	bmi.n	1bd48 <smp_pairing_req+0x174>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1bcd8:	7b20      	ldrb	r0, [r4, #12]
   1bcda:	7ce3      	ldrb	r3, [r4, #19]
   1bcdc:	4318      	orrs	r0, r3
   1bcde:	f010 0004 	ands.w	r0, r0, #4
   1bce2:	d00f      	beq.n	1bd04 <smp_pairing_req+0x130>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1bce4:	f7ff fc02 	bl	1b4ec <get_io_capa>
   1bce8:	4b7d      	ldr	r3, [pc, #500]	; (1bee0 <smp_pairing_req+0x30c>)
   1bcea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1bcee:	441d      	add	r5, r3
   1bcf0:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1bcf2:	2804      	cmp	r0, #4
   1bcf4:	d106      	bne.n	1bd04 <smp_pairing_req+0x130>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1bcf6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1bcfa:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1bcfc:	2b00      	cmp	r3, #0
   1bcfe:	bf0c      	ite	eq
   1bd00:	2002      	moveq	r0, #2
   1bd02:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1bd04:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1bd06:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	f00f fb17 	bl	2b33e <update_keys_check>
   1bd10:	bb00      	cbnz	r0, 1bd54 <smp_pairing_req+0x180>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1bd12:	2503      	movs	r5, #3
   1bd14:	e767      	b.n	1bbe6 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1bd16:	7b20      	ldrb	r0, [r4, #12]
   1bd18:	7ce2      	ldrb	r2, [r4, #19]
   1bd1a:	ea00 0302 	and.w	r3, r0, r2
   1bd1e:	071b      	lsls	r3, r3, #28
   1bd20:	d504      	bpl.n	1bd2c <smp_pairing_req+0x158>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1bd22:	7ca1      	ldrb	r1, [r4, #18]
   1bd24:	7ae3      	ldrb	r3, [r4, #11]
   1bd26:	430b      	orrs	r3, r1
   1bd28:	07d9      	lsls	r1, r3, #31
   1bd2a:	d40f      	bmi.n	1bd4c <smp_pairing_req+0x178>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bd2c:	2d04      	cmp	r5, #4
   1bd2e:	d80f      	bhi.n	1bd50 <smp_pairing_req+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1bd30:	4310      	orrs	r0, r2
   1bd32:	f010 0004 	ands.w	r0, r0, #4
   1bd36:	d0e5      	beq.n	1bd04 <smp_pairing_req+0x130>
	return gen_method_sc[remote_io][get_io_capa()];
   1bd38:	f7ff fbd8 	bl	1b4ec <get_io_capa>
   1bd3c:	4b69      	ldr	r3, [pc, #420]	; (1bee4 <smp_pairing_req+0x310>)
   1bd3e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1bd42:	441d      	add	r5, r3
   1bd44:	5c28      	ldrb	r0, [r5, r0]
   1bd46:	e7dd      	b.n	1bd04 <smp_pairing_req+0x130>
		return LEGACY_OOB;
   1bd48:	2006      	movs	r0, #6
   1bd4a:	e7db      	b.n	1bd04 <smp_pairing_req+0x130>
			return LE_SC_OOB;
   1bd4c:	2005      	movs	r0, #5
   1bd4e:	e7d9      	b.n	1bd04 <smp_pairing_req+0x130>
		return JUST_WORKS;
   1bd50:	2000      	movs	r0, #0
   1bd52:	e7d7      	b.n	1bd04 <smp_pairing_req+0x130>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1bd54:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1bd58:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1bd5a:	2b03      	cmp	r3, #3
   1bd5c:	d034      	beq.n	1bdc8 <smp_pairing_req+0x1f4>
   1bd5e:	d822      	bhi.n	1bda6 <smp_pairing_req+0x1d2>
   1bd60:	3b01      	subs	r3, #1
   1bd62:	2b01      	cmp	r3, #1
   1bd64:	f63f af5d 	bhi.w	1bc22 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bd68:	2105      	movs	r1, #5
   1bd6a:	4630      	mov	r0, r6
   1bd6c:	f00f fade 	bl	2b32c <atomic_test_bit>
   1bd70:	2800      	cmp	r0, #0
   1bd72:	f040 80c5 	bne.w	1bf00 <smp_pairing_req+0x32c>
	struct bt_conn *conn = smp->chan.chan.conn;
   1bd76:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1bd7a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1bd7e:	7a28      	ldrb	r0, [r5, #8]
   1bd80:	f001 f8b4 	bl	1ceec <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1bd84:	7a21      	ldrb	r1, [r4, #8]
   1bd86:	b318      	cbz	r0, 1bdd0 <smp_pairing_req+0x1fc>
   1bd88:	7b43      	ldrb	r3, [r0, #13]
   1bd8a:	07db      	lsls	r3, r3, #31
   1bd8c:	d520      	bpl.n	1bdd0 <smp_pairing_req+0x1fc>
   1bd8e:	b9f9      	cbnz	r1, 1bdd0 <smp_pairing_req+0x1fc>
   1bd90:	4b55      	ldr	r3, [pc, #340]	; (1bee8 <smp_pairing_req+0x314>)
   1bd92:	4956      	ldr	r1, [pc, #344]	; (1beec <smp_pairing_req+0x318>)
		BT_ERR("JustWorks failed, authenticated keys present");
   1bd94:	4856      	ldr	r0, [pc, #344]	; (1bef0 <smp_pairing_req+0x31c>)
   1bd96:	1ac9      	subs	r1, r1, r3
   1bd98:	08c9      	lsrs	r1, r1, #3
   1bd9a:	0189      	lsls	r1, r1, #6
   1bd9c:	f041 0101 	orr.w	r1, r1, #1
   1bda0:	f00b fe7c 	bl	27a9c <log_0>
	if (ret) {
   1bda4:	e73d      	b.n	1bc22 <smp_pairing_req+0x4e>
	switch (sec) {
   1bda6:	2b04      	cmp	r3, #4
   1bda8:	f47f af3b 	bne.w	1bc22 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1bdac:	7d23      	ldrb	r3, [r4, #20]
   1bdae:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1bdb0:	4293      	cmp	r3, r2
   1bdb2:	bf28      	it	cs
   1bdb4:	4613      	movcs	r3, r2
   1bdb6:	2b10      	cmp	r3, #16
   1bdb8:	f47f af14 	bne.w	1bbe4 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bdbc:	2105      	movs	r1, #5
   1bdbe:	4630      	mov	r0, r6
   1bdc0:	f00f fab4 	bl	2b32c <atomic_test_bit>
   1bdc4:	2800      	cmp	r0, #0
   1bdc6:	d0a4      	beq.n	1bd12 <smp_pairing_req+0x13e>
		if (smp->method == JUST_WORKS) {
   1bdc8:	7a23      	ldrb	r3, [r4, #8]
   1bdca:	2b00      	cmp	r3, #0
   1bdcc:	d1cc      	bne.n	1bd68 <smp_pairing_req+0x194>
   1bdce:	e7a0      	b.n	1bd12 <smp_pairing_req+0x13e>
	switch (smp->method) {
   1bdd0:	2906      	cmp	r1, #6
   1bdd2:	d869      	bhi.n	1bea8 <smp_pairing_req+0x2d4>
   1bdd4:	e8df f001 	tbb	[pc, r1]
   1bdd8:	68335e1b 	.word	0x68335e1b
   1bddc:	6868      	.short	0x6868
   1bdde:	04          	.byte	0x04
   1bddf:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1bde0:	4d44      	ldr	r5, [pc, #272]	; (1bef4 <smp_pairing_req+0x320>)
   1bde2:	682b      	ldr	r3, [r5, #0]
   1bde4:	2b00      	cmp	r3, #0
   1bde6:	d06a      	beq.n	1bebe <smp_pairing_req+0x2ea>
   1bde8:	68db      	ldr	r3, [r3, #12]
   1bdea:	2b00      	cmp	r3, #0
   1bdec:	d067      	beq.n	1bebe <smp_pairing_req+0x2ea>
			struct bt_conn_oob_info info = {
   1bdee:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bdf0:	210a      	movs	r1, #10
   1bdf2:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1bdf4:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bdf8:	f00f f9b9 	bl	2b16e <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1bdfc:	682b      	ldr	r3, [r5, #0]
   1bdfe:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1be02:	68db      	ldr	r3, [r3, #12]
   1be04:	a901      	add	r1, sp, #4
   1be06:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1be08:	7a23      	ldrb	r3, [r4, #8]
   1be0a:	2b00      	cmp	r3, #0
   1be0c:	d159      	bne.n	1bec2 <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1be0e:	210f      	movs	r1, #15
   1be10:	4630      	mov	r0, r6
   1be12:	f00f fa8b 	bl	2b32c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1be16:	4605      	mov	r5, r0
   1be18:	2800      	cmp	r0, #0
   1be1a:	d152      	bne.n	1bec2 <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1be1c:	4f35      	ldr	r7, [pc, #212]	; (1bef4 <smp_pairing_req+0x320>)
   1be1e:	683b      	ldr	r3, [r7, #0]
   1be20:	2b00      	cmp	r3, #0
   1be22:	d04e      	beq.n	1bec2 <smp_pairing_req+0x2ee>
	    bt_auth && bt_auth->pairing_confirm) {
   1be24:	695b      	ldr	r3, [r3, #20]
   1be26:	2b00      	cmp	r3, #0
   1be28:	d04b      	beq.n	1bec2 <smp_pairing_req+0x2ee>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1be2a:	4630      	mov	r0, r6
   1be2c:	210a      	movs	r1, #10
   1be2e:	f00f f99e 	bl	2b16e <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1be32:	683b      	ldr	r3, [r7, #0]
   1be34:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1be38:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   1be3a:	4798      	blx	r3
		return 0;
   1be3c:	e6d3      	b.n	1bbe6 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1be3e:	2104      	movs	r1, #4
   1be40:	eb0d 0001 	add.w	r0, sp, r1
   1be44:	f003 ff8a 	bl	1fd5c <bt_rand>
   1be48:	2800      	cmp	r0, #0
   1be4a:	f47f aeea 	bne.w	1bc22 <smp_pairing_req+0x4e>
			passkey %= 1000000;
   1be4e:	9901      	ldr	r1, [sp, #4]
   1be50:	4a29      	ldr	r2, [pc, #164]	; (1bef8 <smp_pairing_req+0x324>)
		if (bt_auth && bt_auth->passkey_display) {
   1be52:	4f28      	ldr	r7, [pc, #160]	; (1bef4 <smp_pairing_req+0x320>)
			passkey %= 1000000;
   1be54:	fbb1 f3f2 	udiv	r3, r1, r2
   1be58:	fb02 1313 	mls	r3, r2, r3, r1
   1be5c:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1be5e:	683b      	ldr	r3, [r7, #0]
   1be60:	b153      	cbz	r3, 1be78 <smp_pairing_req+0x2a4>
   1be62:	681b      	ldr	r3, [r3, #0]
   1be64:	b143      	cbz	r3, 1be78 <smp_pairing_req+0x2a4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1be66:	210b      	movs	r1, #11
   1be68:	4630      	mov	r0, r6
   1be6a:	f00f f980 	bl	2b16e <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1be6e:	683b      	ldr	r3, [r7, #0]
   1be70:	9901      	ldr	r1, [sp, #4]
   1be72:	681b      	ldr	r3, [r3, #0]
   1be74:	4628      	mov	r0, r5
   1be76:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1be78:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1be7a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1be7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1be82:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1be84:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1be88:	0a1b      	lsrs	r3, r3, #8
   1be8a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1be8e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1be92:	e7b9      	b.n	1be08 <smp_pairing_req+0x234>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1be94:	4630      	mov	r0, r6
   1be96:	210a      	movs	r1, #10
   1be98:	f00f f969 	bl	2b16e <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1be9c:	4b15      	ldr	r3, [pc, #84]	; (1bef4 <smp_pairing_req+0x320>)
   1be9e:	681b      	ldr	r3, [r3, #0]
   1bea0:	4628      	mov	r0, r5
   1bea2:	685b      	ldr	r3, [r3, #4]
   1bea4:	4798      	blx	r3
	if (ret) {
   1bea6:	e7af      	b.n	1be08 <smp_pairing_req+0x234>
   1bea8:	4b0f      	ldr	r3, [pc, #60]	; (1bee8 <smp_pairing_req+0x314>)
   1beaa:	4a10      	ldr	r2, [pc, #64]	; (1beec <smp_pairing_req+0x318>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1beac:	4813      	ldr	r0, [pc, #76]	; (1befc <smp_pairing_req+0x328>)
   1beae:	1ad2      	subs	r2, r2, r3
   1beb0:	08d2      	lsrs	r2, r2, #3
   1beb2:	0192      	lsls	r2, r2, #6
   1beb4:	f042 0201 	orr.w	r2, r2, #1
   1beb8:	f00b fdfd 	bl	27ab6 <log_1>
	if (ret) {
   1bebc:	e6b1      	b.n	1bc22 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1bebe:	2502      	movs	r5, #2
   1bec0:	e691      	b.n	1bbe6 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1bec2:	2103      	movs	r1, #3
   1bec4:	4620      	mov	r0, r4
   1bec6:	f00f f952 	bl	2b16e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1beca:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1becc:	4620      	mov	r0, r4
   1bece:	f00f f94e 	bl	2b16e <atomic_set_bit>
	return send_pairing_rsp(smp);
   1bed2:	f00f fa8d 	bl	2b3f0 <send_pairing_rsp>
   1bed6:	4605      	mov	r5, r0
   1bed8:	e685      	b.n	1bbe6 <smp_pairing_req+0x12>
   1beda:	bf00      	nop
   1bedc:	20003eb0 	.word	0x20003eb0
   1bee0:	00030a93 	.word	0x00030a93
   1bee4:	00030aac 	.word	0x00030aac
   1bee8:	0002ccb8 	.word	0x0002ccb8
   1beec:	0002cd28 	.word	0x0002cd28
   1bef0:	0003084d 	.word	0x0003084d
   1bef4:	2000303c 	.word	0x2000303c
   1bef8:	000f4240 	.word	0x000f4240
   1befc:	00030799 	.word	0x00030799
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bf00:	7a25      	ldrb	r5, [r4, #8]
   1bf02:	b9a5      	cbnz	r5, 1bf2e <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bf04:	210f      	movs	r1, #15
   1bf06:	4630      	mov	r0, r6
   1bf08:	f00f fa10 	bl	2b32c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bf0c:	b978      	cbnz	r0, 1bf2e <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bf0e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1bf34 <smp_pairing_req+0x360>
   1bf12:	f8d8 3000 	ldr.w	r3, [r8]
   1bf16:	b153      	cbz	r3, 1bf2e <smp_pairing_req+0x35a>
	    bt_auth && bt_auth->pairing_confirm) {
   1bf18:	695b      	ldr	r3, [r3, #20]
   1bf1a:	b143      	cbz	r3, 1bf2e <smp_pairing_req+0x35a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bf1c:	4630      	mov	r0, r6
   1bf1e:	210a      	movs	r1, #10
   1bf20:	f00f f925 	bl	2b16e <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1bf24:	f8d8 3000 	ldr.w	r3, [r8]
   1bf28:	4638      	mov	r0, r7
   1bf2a:	695b      	ldr	r3, [r3, #20]
   1bf2c:	e785      	b.n	1be3a <smp_pairing_req+0x266>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1bf2e:	210c      	movs	r1, #12
   1bf30:	e7cc      	b.n	1becc <smp_pairing_req+0x2f8>
   1bf32:	bf00      	nop
   1bf34:	2000303c 	.word	0x2000303c

0001bf38 <smp_ident_info>:
{
   1bf38:	b570      	push	{r4, r5, r6, lr}
   1bf3a:	460b      	mov	r3, r1
   1bf3c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bf3e:	210d      	movs	r1, #13
   1bf40:	3004      	adds	r0, #4
   1bf42:	f00f f9f3 	bl	2b32c <atomic_test_bit>
   1bf46:	b310      	cbz	r0, 1bf8e <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1bf48:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1bf4a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1bf4e:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1bf52:	7a19      	ldrb	r1, [r3, #8]
   1bf54:	462a      	mov	r2, r5
   1bf56:	2002      	movs	r0, #2
   1bf58:	f00f fd0a 	bl	2b970 <bt_keys_get_type>
		if (!keys) {
   1bf5c:	b990      	cbnz	r0, 1bf84 <smp_ident_info+0x4c>
   1bf5e:	4a0f      	ldr	r2, [pc, #60]	; (1bf9c <smp_ident_info+0x64>)
   1bf60:	4c0f      	ldr	r4, [pc, #60]	; (1bfa0 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1bf62:	4628      	mov	r0, r5
   1bf64:	1aa4      	subs	r4, r4, r2
   1bf66:	f7f8 ff6f 	bl	14e48 <bt_addr_le_str_real>
   1bf6a:	f7f5 fd53 	bl	11a14 <z_log_strdup>
   1bf6e:	08e4      	lsrs	r4, r4, #3
   1bf70:	01a4      	lsls	r4, r4, #6
   1bf72:	f044 0401 	orr.w	r4, r4, #1
   1bf76:	4601      	mov	r1, r0
   1bf78:	4622      	mov	r2, r4
   1bf7a:	480a      	ldr	r0, [pc, #40]	; (1bfa4 <smp_ident_info+0x6c>)
   1bf7c:	f00b fd9b 	bl	27ab6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1bf80:	2008      	movs	r0, #8
}
   1bf82:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1bf84:	2210      	movs	r2, #16
   1bf86:	4631      	mov	r1, r6
   1bf88:	302a      	adds	r0, #42	; 0x2a
   1bf8a:	f00d fd66 	bl	29a5a <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1bf8e:	4620      	mov	r0, r4
   1bf90:	2109      	movs	r1, #9
   1bf92:	f00f f8ec 	bl	2b16e <atomic_set_bit>
	return 0;
   1bf96:	2000      	movs	r0, #0
   1bf98:	e7f3      	b.n	1bf82 <smp_ident_info+0x4a>
   1bf9a:	bf00      	nop
   1bf9c:	0002ccb8 	.word	0x0002ccb8
   1bfa0:	0002cd28 	.word	0x0002cd28
   1bfa4:	0003087a 	.word	0x0003087a

0001bfa8 <smp_encrypt_info>:
{
   1bfa8:	b570      	push	{r4, r5, r6, lr}
   1bfaa:	460b      	mov	r3, r1
   1bfac:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bfae:	210d      	movs	r1, #13
   1bfb0:	3004      	adds	r0, #4
   1bfb2:	f00f f9bb 	bl	2b32c <atomic_test_bit>
   1bfb6:	b310      	cbz	r0, 1bffe <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1bfb8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1bfba:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1bfbe:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1bfc2:	7a19      	ldrb	r1, [r3, #8]
   1bfc4:	462a      	mov	r2, r5
   1bfc6:	2004      	movs	r0, #4
   1bfc8:	f00f fcd2 	bl	2b970 <bt_keys_get_type>
		if (!keys) {
   1bfcc:	b990      	cbnz	r0, 1bff4 <smp_encrypt_info+0x4c>
   1bfce:	4a0f      	ldr	r2, [pc, #60]	; (1c00c <smp_encrypt_info+0x64>)
   1bfd0:	4c0f      	ldr	r4, [pc, #60]	; (1c010 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1bfd2:	4628      	mov	r0, r5
   1bfd4:	1aa4      	subs	r4, r4, r2
   1bfd6:	f7f8 ff37 	bl	14e48 <bt_addr_le_str_real>
   1bfda:	f7f5 fd1b 	bl	11a14 <z_log_strdup>
   1bfde:	08e4      	lsrs	r4, r4, #3
   1bfe0:	01a4      	lsls	r4, r4, #6
   1bfe2:	f044 0401 	orr.w	r4, r4, #1
   1bfe6:	4601      	mov	r1, r0
   1bfe8:	4622      	mov	r2, r4
   1bfea:	480a      	ldr	r0, [pc, #40]	; (1c014 <smp_encrypt_info+0x6c>)
   1bfec:	f00b fd63 	bl	27ab6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1bff0:	2008      	movs	r0, #8
}
   1bff2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1bff4:	2210      	movs	r2, #16
   1bff6:	4631      	mov	r1, r6
   1bff8:	301a      	adds	r0, #26
   1bffa:	f00d fd2e 	bl	29a5a <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1bffe:	4620      	mov	r0, r4
   1c000:	2107      	movs	r1, #7
   1c002:	f00f f8b4 	bl	2b16e <atomic_set_bit>
	return 0;
   1c006:	2000      	movs	r0, #0
   1c008:	e7f3      	b.n	1bff2 <smp_encrypt_info+0x4a>
   1c00a:	bf00      	nop
   1c00c:	0002ccb8 	.word	0x0002ccb8
   1c010:	0002cd28 	.word	0x0002cd28
   1c014:	0003087a 	.word	0x0003087a

0001c018 <bt_smp_connected>:
{
   1c018:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1c01a:	4905      	ldr	r1, [pc, #20]	; (1c030 <bt_smp_connected+0x18>)
   1c01c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1c020:	30f0      	adds	r0, #240	; 0xf0
   1c022:	f006 f8a3 	bl	2216c <k_work_init_delayable>
	smp_reset(smp);
   1c026:	4620      	mov	r0, r4
}
   1c028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1c02c:	f00f ba3a 	b.w	2b4a4 <smp_reset>
   1c030:	0001cbed 	.word	0x0001cbed

0001c034 <smp_pairing_confirm>:
{
   1c034:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1c036:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c038:	1d05      	adds	r5, r0, #4
{
   1c03a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c03c:	210b      	movs	r1, #11
   1c03e:	4628      	mov	r0, r5
   1c040:	f00f f8a9 	bl	2b196 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1c044:	4631      	mov	r1, r6
   1c046:	2210      	movs	r2, #16
   1c048:	f104 0017 	add.w	r0, r4, #23
   1c04c:	f00d fd05 	bl	29a5a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c050:	2105      	movs	r1, #5
   1c052:	4628      	mov	r0, r5
   1c054:	f00f f96a 	bl	2b32c <atomic_test_bit>
   1c058:	b920      	cbnz	r0, 1c064 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1c05a:	4620      	mov	r0, r4
}
   1c05c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1c060:	f00f ba9e 	b.w	2b5a0 <legacy_pairing_confirm>
	switch (smp->method) {
   1c064:	7a21      	ldrb	r1, [r4, #8]
   1c066:	2901      	cmp	r1, #1
   1c068:	d009      	beq.n	1c07e <smp_pairing_confirm+0x4a>
   1c06a:	2902      	cmp	r1, #2
   1c06c:	d113      	bne.n	1c096 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c06e:	4620      	mov	r0, r4
   1c070:	2104      	movs	r1, #4
   1c072:	f00f f87c 	bl	2b16e <atomic_set_bit>
}
   1c076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1c07a:	f7ff bc55 	b.w	1b928 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c07e:	210a      	movs	r1, #10
   1c080:	4628      	mov	r0, r5
   1c082:	f00f f953 	bl	2b32c <atomic_test_bit>
   1c086:	2800      	cmp	r0, #0
   1c088:	d0f1      	beq.n	1c06e <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c08a:	4628      	mov	r0, r5
   1c08c:	2100      	movs	r1, #0
   1c08e:	f00f f86e 	bl	2b16e <atomic_set_bit>
			return 0;
   1c092:	2000      	movs	r0, #0
}
   1c094:	bd70      	pop	{r4, r5, r6, pc}
   1c096:	4b06      	ldr	r3, [pc, #24]	; (1c0b0 <smp_pairing_confirm+0x7c>)
   1c098:	4a06      	ldr	r2, [pc, #24]	; (1c0b4 <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c09a:	4807      	ldr	r0, [pc, #28]	; (1c0b8 <smp_pairing_confirm+0x84>)
   1c09c:	1ad2      	subs	r2, r2, r3
   1c09e:	08d2      	lsrs	r2, r2, #3
   1c0a0:	0192      	lsls	r2, r2, #6
   1c0a2:	f042 0201 	orr.w	r2, r2, #1
   1c0a6:	f00b fd06 	bl	27ab6 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1c0aa:	2008      	movs	r0, #8
   1c0ac:	e7f2      	b.n	1c094 <smp_pairing_confirm+0x60>
   1c0ae:	bf00      	nop
   1c0b0:	0002ccb8 	.word	0x0002ccb8
   1c0b4:	0002cd28 	.word	0x0002cd28
   1c0b8:	00030799 	.word	0x00030799

0001c0bc <smp_pairing_random>:
{
   1c0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0c0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c0c2:	f100 0737 	add.w	r7, r0, #55	; 0x37
   1c0c6:	6889      	ldr	r1, [r1, #8]
{
   1c0c8:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c0ca:	2210      	movs	r2, #16
   1c0cc:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c0ce:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c0d0:	f00d fcc3 	bl	29a5a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c0d4:	2105      	movs	r1, #5
   1c0d6:	4630      	mov	r0, r6
   1c0d8:	f00f f928 	bl	2b32c <atomic_test_bit>
   1c0dc:	2800      	cmp	r0, #0
   1c0de:	d147      	bne.n	1c170 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c0e0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c0e4:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c0e8:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c0ec:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c0ee:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c0f0:	9201      	str	r2, [sp, #4]
   1c0f2:	9300      	str	r3, [sp, #0]
   1c0f4:	9502      	str	r5, [sp, #8]
   1c0f6:	f104 0310 	add.w	r3, r4, #16
   1c0fa:	f104 0209 	add.w	r2, r4, #9
   1c0fe:	4639      	mov	r1, r7
   1c100:	4640      	mov	r0, r8
   1c102:	f00f f9f2 	bl	2b4ea <smp_c1>
	if (err) {
   1c106:	bb18      	cbnz	r0, 1c150 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1c108:	2210      	movs	r2, #16
   1c10a:	4629      	mov	r1, r5
   1c10c:	f104 0017 	add.w	r0, r4, #23
   1c110:	f00d fc7c 	bl	29a0c <memcmp>
   1c114:	2800      	cmp	r0, #0
   1c116:	f040 8095 	bne.w	1c244 <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
   1c11a:	2208      	movs	r2, #8
   1c11c:	4639      	mov	r1, r7
   1c11e:	4628      	mov	r0, r5
   1c120:	f00d fc9b 	bl	29a5a <memcpy>
	memcpy(out + 8, r1, 8);
   1c124:	2208      	movs	r2, #8
   1c126:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c12a:	a80c      	add	r0, sp, #48	; 0x30
   1c12c:	f00d fc95 	bl	29a5a <memcpy>
	return bt_encrypt_le(k, out, out);
   1c130:	462a      	mov	r2, r5
   1c132:	4629      	mov	r1, r5
   1c134:	4640      	mov	r0, r8
   1c136:	f010 f948 	bl	2c3ca <bt_encrypt_le>
		if (err) {
   1c13a:	b158      	cbz	r0, 1c154 <smp_pairing_random+0x98>
   1c13c:	4973      	ldr	r1, [pc, #460]	; (1c30c <smp_pairing_random+0x250>)
   1c13e:	4b74      	ldr	r3, [pc, #464]	; (1c310 <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
   1c140:	4874      	ldr	r0, [pc, #464]	; (1c314 <smp_pairing_random+0x258>)
   1c142:	1ac9      	subs	r1, r1, r3
   1c144:	08c9      	lsrs	r1, r1, #3
   1c146:	0189      	lsls	r1, r1, #6
   1c148:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   1c14c:	f00b fca6 	bl	27a9c <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c150:	2508      	movs	r5, #8
   1c152:	e078      	b.n	1c246 <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1c154:	4629      	mov	r1, r5
   1c156:	2210      	movs	r2, #16
   1c158:	4640      	mov	r0, r8
   1c15a:	f00d fc7e 	bl	29a5a <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c15e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c160:	4630      	mov	r0, r6
   1c162:	f00f f804 	bl	2b16e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1c166:	4620      	mov	r0, r4
   1c168:	f00f f929 	bl	2b3be <smp_send_pairing_random>
   1c16c:	4605      	mov	r5, r0
   1c16e:	e06a      	b.n	1c246 <smp_pairing_random+0x18a>
	switch (smp->method) {
   1c170:	7a21      	ldrb	r1, [r4, #8]
   1c172:	2905      	cmp	r1, #5
   1c174:	f200 80a9 	bhi.w	1c2ca <smp_pairing_random+0x20e>
   1c178:	e8df f001 	tbb	[pc, r1]
   1c17c:	0341413b 	.word	0x0341413b
   1c180:	8ba7      	.short	0x8ba7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1c182:	4b65      	ldr	r3, [pc, #404]	; (1c318 <smp_pairing_random+0x25c>)
   1c184:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1c186:	2220      	movs	r2, #32
   1c188:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1c18c:	a80a      	add	r0, sp, #40	; 0x28
   1c18e:	f7ff f9d3 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1c192:	2220      	movs	r2, #32
   1c194:	4629      	mov	r1, r5
   1c196:	a812      	add	r0, sp, #72	; 0x48
   1c198:	f7ff f9ce 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1c19c:	2210      	movs	r2, #16
   1c19e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c1a2:	a81a      	add	r0, sp, #104	; 0x68
   1c1a4:	f7ff f9c8 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1c1a8:	2210      	movs	r2, #16
   1c1aa:	4639      	mov	r1, r7
   1c1ac:	a806      	add	r0, sp, #24
   1c1ae:	f7ff f9c3 	bl	1b538 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1c1b2:	ab06      	add	r3, sp, #24
   1c1b4:	2250      	movs	r2, #80	; 0x50
   1c1b6:	a90a      	add	r1, sp, #40	; 0x28
   1c1b8:	4618      	mov	r0, r3
   1c1ba:	f00e fffb 	bl	2b1b4 <bt_smp_aes_cmac>
	if (err) {
   1c1be:	2800      	cmp	r0, #0
   1c1c0:	d1c6      	bne.n	1c150 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
   1c1c2:	2204      	movs	r2, #4
   1c1c4:	a909      	add	r1, sp, #36	; 0x24
   1c1c6:	a805      	add	r0, sp, #20
   1c1c8:	f00d fc47 	bl	29a5a <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c1cc:	9b05      	ldr	r3, [sp, #20]
   1c1ce:	4953      	ldr	r1, [pc, #332]	; (1c31c <smp_pairing_random+0x260>)
   1c1d0:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c1d2:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c1d4:	fbb3 f2f1 	udiv	r2, r3, r1
   1c1d8:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c1dc:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c1de:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c1e0:	f00e ffc5 	bl	2b16e <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1c1e4:	4b4e      	ldr	r3, [pc, #312]	; (1c320 <smp_pairing_random+0x264>)
   1c1e6:	9905      	ldr	r1, [sp, #20]
   1c1e8:	681b      	ldr	r3, [r3, #0]
   1c1ea:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c1ee:	689b      	ldr	r3, [r3, #8]
   1c1f0:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c1f2:	210d      	movs	r1, #13
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	f00e ffba 	bl	2b16e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c1fa:	2110      	movs	r1, #16
   1c1fc:	e7b0      	b.n	1c160 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c1fe:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1c202:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c206:	4944      	ldr	r1, [pc, #272]	; (1c318 <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c208:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c20a:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c20c:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c210:	9500      	str	r5, [sp, #0]
   1c212:	6809      	ldr	r1, [r1, #0]
   1c214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c218:	463a      	mov	r2, r7
   1c21a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c21e:	f00f f85e 	bl	2b2de <smp_f4>
   1c222:	b140      	cbz	r0, 1c236 <smp_pairing_random+0x17a>
   1c224:	4939      	ldr	r1, [pc, #228]	; (1c30c <smp_pairing_random+0x250>)
   1c226:	4b3a      	ldr	r3, [pc, #232]	; (1c310 <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
   1c228:	483e      	ldr	r0, [pc, #248]	; (1c324 <smp_pairing_random+0x268>)
   1c22a:	1ac9      	subs	r1, r1, r3
   1c22c:	08c9      	lsrs	r1, r1, #3
   1c22e:	0189      	lsls	r1, r1, #6
   1c230:	f041 0101 	orr.w	r1, r1, #1
   1c234:	e78a      	b.n	1c14c <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1c236:	2210      	movs	r2, #16
   1c238:	4629      	mov	r1, r5
   1c23a:	f104 0017 	add.w	r0, r4, #23
   1c23e:	f00d fbe5 	bl	29a0c <memcmp>
   1c242:	b120      	cbz	r0, 1c24e <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1c244:	2504      	movs	r5, #4
}
   1c246:	4628      	mov	r0, r5
   1c248:	b01e      	add	sp, #120	; 0x78
   1c24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   1c24e:	2103      	movs	r1, #3
   1c250:	4620      	mov	r0, r4
   1c252:	f00e ff8c 	bl	2b16e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1c256:	f00f f8b2 	bl	2b3be <smp_send_pairing_random>
		if (err) {
   1c25a:	4605      	mov	r5, r0
   1c25c:	2800      	cmp	r0, #0
   1c25e:	d1f2      	bne.n	1c246 <smp_pairing_random+0x18a>
		smp->passkey_round++;
   1c260:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1c264:	3301      	adds	r3, #1
   1c266:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1c268:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1c26a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1c26e:	d108      	bne.n	1c282 <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c270:	4620      	mov	r0, r4
   1c272:	210d      	movs	r1, #13
   1c274:	f00e ff7b 	bl	2b16e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c278:	2110      	movs	r1, #16
   1c27a:	4630      	mov	r0, r6
   1c27c:	f00e ff77 	bl	2b16e <atomic_set_bit>
			return 0;
   1c280:	e7e1      	b.n	1c246 <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
   1c282:	2110      	movs	r1, #16
   1c284:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c288:	f003 fd68 	bl	1fd5c <bt_rand>
   1c28c:	2800      	cmp	r0, #0
   1c28e:	d0da      	beq.n	1c246 <smp_pairing_random+0x18a>
   1c290:	e75e      	b.n	1c150 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
   1c292:	2110      	movs	r1, #16
   1c294:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c298:	f003 fd60 	bl	1fd5c <bt_rand>
   1c29c:	2800      	cmp	r0, #0
   1c29e:	f47f af57 	bne.w	1c150 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
   1c2a2:	4f1f      	ldr	r7, [pc, #124]	; (1c320 <smp_pairing_random+0x264>)
   1c2a4:	683b      	ldr	r3, [r7, #0]
   1c2a6:	b1db      	cbz	r3, 1c2e0 <smp_pairing_random+0x224>
   1c2a8:	68db      	ldr	r3, [r3, #12]
   1c2aa:	b1cb      	cbz	r3, 1c2e0 <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   1c2ac:	4b1e      	ldr	r3, [pc, #120]	; (1c328 <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c2ae:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1c2b0:	881b      	ldrh	r3, [r3, #0]
   1c2b2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c2b6:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c2b8:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c2ba:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c2be:	d411      	bmi.n	1c2e4 <smp_pairing_random+0x228>
				     BT_CONN_OOB_BOTH_PEERS :
   1c2c0:	2b00      	cmp	r3, #0
   1c2c2:	bf0c      	ite	eq
   1c2c4:	2003      	moveq	r0, #3
   1c2c6:	2001      	movne	r0, #1
   1c2c8:	e00f      	b.n	1c2ea <smp_pairing_random+0x22e>
   1c2ca:	4b11      	ldr	r3, [pc, #68]	; (1c310 <smp_pairing_random+0x254>)
   1c2cc:	4a0f      	ldr	r2, [pc, #60]	; (1c30c <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c2ce:	4817      	ldr	r0, [pc, #92]	; (1c32c <smp_pairing_random+0x270>)
   1c2d0:	1ad2      	subs	r2, r2, r3
   1c2d2:	08d2      	lsrs	r2, r2, #3
   1c2d4:	0192      	lsls	r2, r2, #6
   1c2d6:	f042 0201 	orr.w	r2, r2, #1
   1c2da:	f00b fbec 	bl	27ab6 <log_1>
   1c2de:	e737      	b.n	1c150 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c2e0:	2502      	movs	r5, #2
   1c2e2:	e7b0      	b.n	1c246 <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
   1c2e4:	2b00      	cmp	r3, #0
   1c2e6:	bf18      	it	ne
   1c2e8:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1c2ea:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1c2ec:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   1c2f0:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1c2f4:	4630      	mov	r0, r6
   1c2f6:	210c      	movs	r1, #12
   1c2f8:	f00e ff39 	bl	2b16e <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1c2fc:	683b      	ldr	r3, [r7, #0]
   1c2fe:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c302:	68db      	ldr	r3, [r3, #12]
   1c304:	a90a      	add	r1, sp, #40	; 0x28
   1c306:	4798      	blx	r3
			return 0;
   1c308:	e79d      	b.n	1c246 <smp_pairing_random+0x18a>
   1c30a:	bf00      	nop
   1c30c:	0002cd28 	.word	0x0002cd28
   1c310:	0002ccb8 	.word	0x0002ccb8
   1c314:	00030894 	.word	0x00030894
   1c318:	200030d8 	.word	0x200030d8
   1c31c:	000f4240 	.word	0x000f4240
   1c320:	2000303c 	.word	0x2000303c
   1c324:	000308a9 	.word	0x000308a9
   1c328:	0002cf1c 	.word	0x0002cf1c
   1c32c:	00030799 	.word	0x00030799

0001c330 <bt_smp_start_security>:
{
   1c330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1c334:	78c4      	ldrb	r4, [r0, #3]
   1c336:	2c01      	cmp	r4, #1
{
   1c338:	4605      	mov	r5, r0
	switch (conn->role) {
   1c33a:	d005      	beq.n	1c348 <bt_smp_start_security+0x18>
		return -EINVAL;
   1c33c:	f06f 0415 	mvn.w	r4, #21
}
   1c340:	4620      	mov	r0, r4
   1c342:	b003      	add	sp, #12
   1c344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1c348:	f7ff f968 	bl	1b61c <smp_chan_get>
	if (!smp) {
   1c34c:	4606      	mov	r6, r0
   1c34e:	2800      	cmp	r0, #0
   1c350:	f000 80a5 	beq.w	1c49e <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c354:	1d07      	adds	r7, r0, #4
   1c356:	2104      	movs	r1, #4
   1c358:	4638      	mov	r0, r7
   1c35a:	f00e ffe7 	bl	2b32c <atomic_test_bit>
   1c35e:	2800      	cmp	r0, #0
   1c360:	f040 80a0 	bne.w	1c4a4 <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c364:	2103      	movs	r1, #3
   1c366:	4638      	mov	r0, r7
   1c368:	f00e ffe0 	bl	2b32c <atomic_test_bit>
   1c36c:	b110      	cbz	r0, 1c374 <bt_smp_start_security+0x44>
		return -EBUSY;
   1c36e:	f06f 040f 	mvn.w	r4, #15
   1c372:	e7e5      	b.n	1c340 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c374:	4621      	mov	r1, r4
   1c376:	4638      	mov	r0, r7
   1c378:	f00e ffd8 	bl	2b32c <atomic_test_bit>
   1c37c:	2800      	cmp	r0, #0
   1c37e:	d1f6      	bne.n	1c36e <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1c380:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1c382:	2b03      	cmp	r3, #3
   1c384:	d03d      	beq.n	1c402 <bt_smp_start_security+0xd2>
   1c386:	d82c      	bhi.n	1c3e2 <bt_smp_start_security+0xb2>
   1c388:	3b01      	subs	r3, #1
   1c38a:	2b01      	cmp	r3, #1
   1c38c:	d947      	bls.n	1c41e <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1c38e:	210b      	movs	r1, #11
   1c390:	1d28      	adds	r0, r5, #4
   1c392:	f00e ffcb 	bl	2b32c <atomic_test_bit>
   1c396:	2800      	cmp	r0, #0
   1c398:	d1d0      	bne.n	1c33c <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1c39a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c39e:	b983      	cbnz	r3, 1c3c2 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   1c3a0:	f105 0490 	add.w	r4, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1c3a4:	7a29      	ldrb	r1, [r5, #8]
   1c3a6:	4622      	mov	r2, r4
   1c3a8:	2020      	movs	r0, #32
   1c3aa:	f000 fd4f 	bl	1ce4c <bt_keys_find>
   1c3ae:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1c3b2:	b930      	cbnz	r0, 1c3c2 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1c3b4:	7a29      	ldrb	r1, [r5, #8]
   1c3b6:	4622      	mov	r2, r4
   1c3b8:	2004      	movs	r0, #4
   1c3ba:	f000 fd47 	bl	1ce4c <bt_keys_find>
   1c3be:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1c3c2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c3c6:	2b00      	cmp	r3, #0
   1c3c8:	d0b8      	beq.n	1c33c <bt_smp_start_security+0xc>
   1c3ca:	89da      	ldrh	r2, [r3, #14]
   1c3cc:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1c3d0:	2a00      	cmp	r2, #0
   1c3d2:	d0b3      	beq.n	1c33c <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1c3d4:	7aaa      	ldrb	r2, [r5, #10]
   1c3d6:	2a02      	cmp	r2, #2
   1c3d8:	d921      	bls.n	1c41e <bt_smp_start_security+0xee>
   1c3da:	7b5b      	ldrb	r3, [r3, #13]
   1c3dc:	07db      	lsls	r3, r3, #31
   1c3de:	d5ad      	bpl.n	1c33c <bt_smp_start_security+0xc>
   1c3e0:	e01d      	b.n	1c41e <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
   1c3e2:	2b04      	cmp	r3, #4
   1c3e4:	d1d3      	bne.n	1c38e <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c3e6:	f7ff f881 	bl	1b4ec <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c3ea:	2803      	cmp	r0, #3
   1c3ec:	d104      	bne.n	1c3f8 <bt_smp_start_security+0xc8>
   1c3ee:	4b2f      	ldr	r3, [pc, #188]	; (1c4ac <bt_smp_start_security+0x17c>)
   1c3f0:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c3f2:	b1fb      	cbz	r3, 1c434 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c3f4:	68dc      	ldr	r4, [r3, #12]
   1c3f6:	b10c      	cbz	r4, 1c3fc <bt_smp_start_security+0xcc>
   1c3f8:	4b2d      	ldr	r3, [pc, #180]	; (1c4b0 <bt_smp_start_security+0x180>)
   1c3fa:	781c      	ldrb	r4, [r3, #0]
   1c3fc:	f004 0401 	and.w	r4, r4, #1
   1c400:	e00b      	b.n	1c41a <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c402:	f7ff f873 	bl	1b4ec <get_io_capa>
   1c406:	2803      	cmp	r0, #3
   1c408:	d107      	bne.n	1c41a <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   1c40a:	4b28      	ldr	r3, [pc, #160]	; (1c4ac <bt_smp_start_security+0x17c>)
   1c40c:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c40e:	2c00      	cmp	r4, #0
   1c410:	d0bd      	beq.n	1c38e <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
   1c412:	68e4      	ldr	r4, [r4, #12]
   1c414:	3c00      	subs	r4, #0
   1c416:	bf18      	it	ne
   1c418:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1c41a:	2c00      	cmp	r4, #0
   1c41c:	d0b7      	beq.n	1c38e <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   1c41e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c422:	b14b      	cbz	r3, 1c438 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
   1c424:	4630      	mov	r0, r6
   1c426:	f7ff f939 	bl	1b69c <smp_init>
   1c42a:	4604      	mov	r4, r0
   1c42c:	b180      	cbz	r0, 1c450 <bt_smp_start_security+0x120>
		return -ENOBUFS;
   1c42e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1c432:	e785      	b.n	1c340 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c434:	2400      	movs	r4, #0
   1c436:	e7e1      	b.n	1c3fc <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c438:	7a28      	ldrb	r0, [r5, #8]
   1c43a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1c43e:	f000 fcc5 	bl	1cdcc <bt_keys_get_addr>
   1c442:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1c446:	2800      	cmp	r0, #0
   1c448:	d1ec      	bne.n	1c424 <bt_smp_start_security+0xf4>
			return -ENOMEM;
   1c44a:	f06f 040b 	mvn.w	r4, #11
   1c44e:	e777      	b.n	1c340 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1c450:	210b      	movs	r1, #11
   1c452:	4630      	mov	r0, r6
   1c454:	f00e ff94 	bl	2b380 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1c458:	4680      	mov	r8, r0
   1c45a:	2800      	cmp	r0, #0
   1c45c:	d0e7      	beq.n	1c42e <bt_smp_start_security+0xfe>
   1c45e:	2101      	movs	r1, #1
   1c460:	3008      	adds	r0, #8
   1c462:	f001 f91f 	bl	1d6a4 <net_buf_simple_add>
   1c466:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1c468:	2009      	movs	r0, #9
   1c46a:	f7ff f8b9 	bl	1b5e0 <get_auth.isra.0>
   1c46e:	4623      	mov	r3, r4
   1c470:	f889 0000 	strb.w	r0, [r9]
   1c474:	4642      	mov	r2, r8
   1c476:	9400      	str	r4, [sp, #0]
   1c478:	2106      	movs	r1, #6
   1c47a:	4628      	mov	r0, r5
   1c47c:	f00e f843 	bl	2a506 <bt_l2cap_send_cb>
	if (err) {
   1c480:	4604      	mov	r4, r0
   1c482:	b118      	cbz	r0, 1c48c <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
   1c484:	4640      	mov	r0, r8
   1c486:	f000 ffdd 	bl	1d444 <net_buf_unref>
		return err;
   1c48a:	e759      	b.n	1c340 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1c48c:	4638      	mov	r0, r7
   1c48e:	210f      	movs	r1, #15
   1c490:	f00e fe6d 	bl	2b16e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1c494:	2101      	movs	r1, #1
   1c496:	4630      	mov	r0, r6
   1c498:	f00e fe69 	bl	2b16e <atomic_set_bit>
	return 0;
   1c49c:	e750      	b.n	1c340 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1c49e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1c4a2:	e74d      	b.n	1c340 <bt_smp_start_security+0x10>
		return -EIO;
   1c4a4:	f06f 0404 	mvn.w	r4, #4
   1c4a8:	e74a      	b.n	1c340 <bt_smp_start_security+0x10>
   1c4aa:	bf00      	nop
   1c4ac:	2000303c 	.word	0x2000303c
   1c4b0:	20003eb1 	.word	0x20003eb1

0001c4b4 <smp_pairing_complete>:
{
   1c4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c4b8:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
   1c4bc:	4f28      	ldr	r7, [pc, #160]	; (1c560 <smp_pairing_complete+0xac>)
{
   1c4be:	4605      	mov	r5, r0
   1c4c0:	f100 0804 	add.w	r8, r0, #4
	if (!status) {
   1c4c4:	b9e1      	cbnz	r1, 1c500 <smp_pairing_complete+0x4c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1c4c6:	210d      	movs	r1, #13
   1c4c8:	4640      	mov	r0, r8
   1c4ca:	f00e ff2f 	bl	2b32c <atomic_test_bit>
		if (bond_flag) {
   1c4ce:	4606      	mov	r6, r0
   1c4d0:	b118      	cbz	r0, 1c4da <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
   1c4d2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c4d6:	f000 fde1 	bl	1d09c <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1c4da:	683b      	ldr	r3, [r7, #0]
   1c4dc:	b123      	cbz	r3, 1c4e8 <smp_pairing_complete+0x34>
   1c4de:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
   1c4e0:	b113      	cbz	r3, 1c4e8 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(conn, security_err);
   1c4e2:	4631      	mov	r1, r6
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	4798      	blx	r3
	smp_reset(smp);
   1c4e8:	4628      	mov	r0, r5
   1c4ea:	f00e ffdb 	bl	2b4a4 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1c4ee:	7a62      	ldrb	r2, [r4, #9]
   1c4f0:	7aa3      	ldrb	r3, [r4, #10]
   1c4f2:	429a      	cmp	r2, r3
   1c4f4:	d032      	beq.n	1c55c <smp_pairing_complete+0xa8>
		bt_smp_start_security(conn);
   1c4f6:	4620      	mov	r0, r4
}
   1c4f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
   1c4fc:	f7ff bf18 	b.w	1c330 <bt_smp_start_security>
	switch (smp_err) {
   1c500:	3901      	subs	r1, #1
   1c502:	b2c9      	uxtb	r1, r1
   1c504:	290d      	cmp	r1, #13
   1c506:	bf9c      	itt	ls
   1c508:	4b16      	ldrls	r3, [pc, #88]	; (1c564 <smp_pairing_complete+0xb0>)
   1c50a:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1c50c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
   1c510:	bf88      	it	hi
   1c512:	2608      	movhi	r6, #8
		if (conn->le.keys &&
   1c514:	b143      	cbz	r3, 1c528 <smp_pairing_complete+0x74>
   1c516:	7b1b      	ldrb	r3, [r3, #12]
   1c518:	b9cb      	cbnz	r3, 1c54e <smp_pairing_complete+0x9a>
			bt_keys_clear(conn->le.keys);
   1c51a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c51e:	f000 fcf5 	bl	1cf0c <bt_keys_clear>
			conn->le.keys = NULL;
   1c522:	2300      	movs	r3, #0
   1c524:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c528:	2102      	movs	r1, #2
   1c52a:	4640      	mov	r0, r8
   1c52c:	f00e fefe 	bl	2b32c <atomic_test_bit>
   1c530:	b940      	cbnz	r0, 1c544 <smp_pairing_complete+0x90>
	switch (err) {
   1c532:	2e08      	cmp	r6, #8
   1c534:	bf16      	itet	ne
   1c536:	4b0c      	ldrne	r3, [pc, #48]	; (1c568 <smp_pairing_complete+0xb4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c538:	211f      	moveq	r1, #31
   1c53a:	5d99      	ldrbne	r1, [r3, r6]
			bt_conn_security_changed(conn,
   1c53c:	4632      	mov	r2, r6
   1c53e:	4620      	mov	r0, r4
   1c540:	f7fb fee6 	bl	18310 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   1c544:	683b      	ldr	r3, [r7, #0]
   1c546:	2b00      	cmp	r3, #0
   1c548:	d0ce      	beq.n	1c4e8 <smp_pairing_complete+0x34>
   1c54a:	69db      	ldr	r3, [r3, #28]
   1c54c:	e7c8      	b.n	1c4e0 <smp_pairing_complete+0x2c>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1c54e:	2102      	movs	r1, #2
   1c550:	4640      	mov	r0, r8
   1c552:	f00e feeb 	bl	2b32c <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1c556:	2800      	cmp	r0, #0
   1c558:	d1df      	bne.n	1c51a <smp_pairing_complete+0x66>
   1c55a:	e7e5      	b.n	1c528 <smp_pairing_complete+0x74>
}
   1c55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c560:	2000303c 	.word	0x2000303c
   1c564:	00030a75 	.word	0x00030a75
   1c568:	00030a8b 	.word	0x00030a8b

0001c56c <bt_smp_auth_cancel>:
{
   1c56c:	b510      	push	{r4, lr}
	smp = smp_chan_get(conn);
   1c56e:	f7ff f855 	bl	1b61c <smp_chan_get>
	if (!smp) {
   1c572:	4604      	mov	r4, r0
   1c574:	b910      	cbnz	r0, 1c57c <bt_smp_auth_cancel+0x10>
		return -EINVAL;
   1c576:	f06f 0015 	mvn.w	r0, #21
}
   1c57a:	bd10      	pop	{r4, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   1c57c:	210a      	movs	r1, #10
   1c57e:	3004      	adds	r0, #4
   1c580:	f00e ff78 	bl	2b474 <atomic_test_and_clear_bit>
   1c584:	2800      	cmp	r0, #0
   1c586:	d0f6      	beq.n	1c576 <bt_smp_auth_cancel+0xa>
	switch (smp->method) {
   1c588:	7a21      	ldrb	r1, [r4, #8]
   1c58a:	2906      	cmp	r1, #6
   1c58c:	d811      	bhi.n	1c5b2 <bt_smp_auth_cancel+0x46>
   1c58e:	e8df f001 	tbb	[pc, r1]
   1c592:	040e      	.short	0x040e
   1c594:	0c100a04 	.word	0x0c100a04
   1c598:	0c          	.byte	0x0c
   1c599:	00          	.byte	0x00
		return smp_error(smp, BT_SMP_ERR_PASSKEY_ENTRY_FAILED);
   1c59a:	2101      	movs	r1, #1
		return smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c59c:	4620      	mov	r0, r4
}
   1c59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c5a2:	f00f b906 	b.w	2b7b2 <smp_error>
		return smp_error(smp, BT_SMP_ERR_CONFIRM_FAILED);
   1c5a6:	2104      	movs	r1, #4
   1c5a8:	e7f8      	b.n	1c59c <bt_smp_auth_cancel+0x30>
		return smp_error(smp, BT_SMP_ERR_OOB_NOT_AVAIL);
   1c5aa:	2102      	movs	r1, #2
   1c5ac:	e7f6      	b.n	1c59c <bt_smp_auth_cancel+0x30>
		return smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c5ae:	2108      	movs	r1, #8
   1c5b0:	e7f4      	b.n	1c59c <bt_smp_auth_cancel+0x30>
   1c5b2:	4b06      	ldr	r3, [pc, #24]	; (1c5cc <bt_smp_auth_cancel+0x60>)
   1c5b4:	4a06      	ldr	r2, [pc, #24]	; (1c5d0 <bt_smp_auth_cancel+0x64>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c5b6:	4807      	ldr	r0, [pc, #28]	; (1c5d4 <bt_smp_auth_cancel+0x68>)
   1c5b8:	1ad2      	subs	r2, r2, r3
   1c5ba:	08d2      	lsrs	r2, r2, #3
   1c5bc:	0192      	lsls	r2, r2, #6
   1c5be:	f042 0201 	orr.w	r2, r2, #1
   1c5c2:	f00b fa78 	bl	27ab6 <log_1>
		return 0;
   1c5c6:	2000      	movs	r0, #0
   1c5c8:	e7d7      	b.n	1c57a <bt_smp_auth_cancel+0xe>
   1c5ca:	bf00      	nop
   1c5cc:	0002ccb8 	.word	0x0002ccb8
   1c5d0:	0002cd28 	.word	0x0002cd28
   1c5d4:	00030799 	.word	0x00030799

0001c5d8 <bt_smp_recv>:
{
   1c5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1c5da:	898b      	ldrh	r3, [r1, #12]
{
   1c5dc:	4607      	mov	r7, r0
   1c5de:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1c5e0:	b95b      	cbnz	r3, 1c5fa <bt_smp_recv+0x22>
   1c5e2:	493a      	ldr	r1, [pc, #232]	; (1c6cc <bt_smp_recv+0xf4>)
   1c5e4:	4b3a      	ldr	r3, [pc, #232]	; (1c6d0 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   1c5e6:	483b      	ldr	r0, [pc, #236]	; (1c6d4 <bt_smp_recv+0xfc>)
   1c5e8:	1ac9      	subs	r1, r1, r3
   1c5ea:	08c9      	lsrs	r1, r1, #3
   1c5ec:	0189      	lsls	r1, r1, #6
   1c5ee:	f041 0101 	orr.w	r1, r1, #1
   1c5f2:	f00b fa53 	bl	27a9c <log_0>
}
   1c5f6:	2000      	movs	r0, #0
   1c5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1c5fa:	2101      	movs	r1, #1
   1c5fc:	f105 0008 	add.w	r0, r5, #8
   1c600:	f001 f82e 	bl	1d660 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c604:	2104      	movs	r1, #4
   1c606:	4606      	mov	r6, r0
   1c608:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   1c60c:	f00e fe8e 	bl	2b32c <atomic_test_bit>
   1c610:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   1c614:	7831      	ldrb	r1, [r6, #0]
   1c616:	b150      	cbz	r0, 1c62e <bt_smp_recv+0x56>
   1c618:	4a2c      	ldr	r2, [pc, #176]	; (1c6cc <bt_smp_recv+0xf4>)
   1c61a:	4b2d      	ldr	r3, [pc, #180]	; (1c6d0 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1c61c:	482e      	ldr	r0, [pc, #184]	; (1c6d8 <bt_smp_recv+0x100>)
   1c61e:	1ad2      	subs	r2, r2, r3
   1c620:	08d2      	lsrs	r2, r2, #3
   1c622:	0192      	lsls	r2, r2, #6
   1c624:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c628:	f00b fa45 	bl	27ab6 <log_1>
		return 0;
   1c62c:	e7e3      	b.n	1c5f6 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1c62e:	290e      	cmp	r1, #14
   1c630:	d908      	bls.n	1c644 <bt_smp_recv+0x6c>
   1c632:	4a26      	ldr	r2, [pc, #152]	; (1c6cc <bt_smp_recv+0xf4>)
   1c634:	4b26      	ldr	r3, [pc, #152]	; (1c6d0 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c636:	4829      	ldr	r0, [pc, #164]	; (1c6dc <bt_smp_recv+0x104>)
   1c638:	1ad2      	subs	r2, r2, r3
   1c63a:	08d2      	lsrs	r2, r2, #3
   1c63c:	0192      	lsls	r2, r2, #6
   1c63e:	f042 0202 	orr.w	r2, r2, #2
   1c642:	e7f1      	b.n	1c628 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   1c644:	4f26      	ldr	r7, [pc, #152]	; (1c6e0 <bt_smp_recv+0x108>)
   1c646:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1c64a:	b973      	cbnz	r3, 1c66a <bt_smp_recv+0x92>
   1c64c:	4b20      	ldr	r3, [pc, #128]	; (1c6d0 <bt_smp_recv+0xf8>)
   1c64e:	4a1f      	ldr	r2, [pc, #124]	; (1c6cc <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1c650:	4824      	ldr	r0, [pc, #144]	; (1c6e4 <bt_smp_recv+0x10c>)
   1c652:	1ad2      	subs	r2, r2, r3
   1c654:	08d2      	lsrs	r2, r2, #3
   1c656:	0192      	lsls	r2, r2, #6
   1c658:	f042 0202 	orr.w	r2, r2, #2
   1c65c:	f00b fa2b 	bl	27ab6 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1c660:	2107      	movs	r1, #7
		smp_error(smp, err);
   1c662:	4620      	mov	r0, r4
   1c664:	f00f f8a5 	bl	2b7b2 <smp_error>
   1c668:	e7c5      	b.n	1c5f6 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1c66a:	4620      	mov	r0, r4
   1c66c:	f00e ff02 	bl	2b474 <atomic_test_and_clear_bit>
   1c670:	7831      	ldrb	r1, [r6, #0]
   1c672:	b970      	cbnz	r0, 1c692 <bt_smp_recv+0xba>
   1c674:	4b16      	ldr	r3, [pc, #88]	; (1c6d0 <bt_smp_recv+0xf8>)
   1c676:	4a15      	ldr	r2, [pc, #84]	; (1c6cc <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1c678:	481b      	ldr	r0, [pc, #108]	; (1c6e8 <bt_smp_recv+0x110>)
   1c67a:	1ad2      	subs	r2, r2, r3
   1c67c:	08d2      	lsrs	r2, r2, #3
   1c67e:	0192      	lsls	r2, r2, #6
   1c680:	f042 0202 	orr.w	r2, r2, #2
   1c684:	f00b fa17 	bl	27ab6 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1c688:	7833      	ldrb	r3, [r6, #0]
   1c68a:	2b05      	cmp	r3, #5
   1c68c:	d0b3      	beq.n	1c5f6 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c68e:	2108      	movs	r1, #8
   1c690:	e7e7      	b.n	1c662 <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1c692:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   1c696:	89a8      	ldrh	r0, [r5, #12]
   1c698:	791b      	ldrb	r3, [r3, #4]
   1c69a:	4283      	cmp	r3, r0
   1c69c:	d00d      	beq.n	1c6ba <bt_smp_recv+0xe2>
   1c69e:	4a0c      	ldr	r2, [pc, #48]	; (1c6d0 <bt_smp_recv+0xf8>)
   1c6a0:	4b0a      	ldr	r3, [pc, #40]	; (1c6cc <bt_smp_recv+0xf4>)
   1c6a2:	1a9b      	subs	r3, r3, r2
   1c6a4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c6a6:	019b      	lsls	r3, r3, #6
   1c6a8:	460a      	mov	r2, r1
   1c6aa:	f043 0301 	orr.w	r3, r3, #1
   1c6ae:	4601      	mov	r1, r0
   1c6b0:	480e      	ldr	r0, [pc, #56]	; (1c6ec <bt_smp_recv+0x114>)
   1c6b2:	f00b fa14 	bl	27ade <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1c6b6:	210a      	movs	r1, #10
   1c6b8:	e7d3      	b.n	1c662 <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   1c6ba:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1c6be:	4620      	mov	r0, r4
   1c6c0:	4629      	mov	r1, r5
   1c6c2:	4798      	blx	r3
	if (err) {
   1c6c4:	4601      	mov	r1, r0
   1c6c6:	2800      	cmp	r0, #0
   1c6c8:	d095      	beq.n	1c5f6 <bt_smp_recv+0x1e>
   1c6ca:	e7ca      	b.n	1c662 <bt_smp_recv+0x8a>
   1c6cc:	0002cd28 	.word	0x0002cd28
   1c6d0:	0002ccb8 	.word	0x0002ccb8
   1c6d4:	000308c2 	.word	0x000308c2
   1c6d8:	000308dd 	.word	0x000308dd
   1c6dc:	0003090e 	.word	0x0003090e
   1c6e0:	0002d574 	.word	0x0002d574
   1c6e4:	00030930 	.word	0x00030930
   1c6e8:	0003094a 	.word	0x0003094a
   1c6ec:	000302fd 	.word	0x000302fd

0001c6f0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1c6f0:	4b12      	ldr	r3, [pc, #72]	; (1c73c <bt_smp_pkey_ready+0x4c>)
{
   1c6f2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1c6f4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1c6f6:	b958      	cbnz	r0, 1c710 <bt_smp_pkey_ready+0x20>
   1c6f8:	4911      	ldr	r1, [pc, #68]	; (1c740 <bt_smp_pkey_ready+0x50>)
   1c6fa:	4b12      	ldr	r3, [pc, #72]	; (1c744 <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
   1c6fc:	4812      	ldr	r0, [pc, #72]	; (1c748 <bt_smp_pkey_ready+0x58>)
   1c6fe:	1ac9      	subs	r1, r1, r3
   1c700:	08c9      	lsrs	r1, r1, #3
   1c702:	0189      	lsls	r1, r1, #6
}
   1c704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1c708:	f041 0102 	orr.w	r1, r1, #2
   1c70c:	f00b b9c6 	b.w	27a9c <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c710:	4c0e      	ldr	r4, [pc, #56]	; (1c74c <bt_smp_pkey_ready+0x5c>)
	z_impl_k_sem_give(sem);
   1c712:	480f      	ldr	r0, [pc, #60]	; (1c750 <bt_smp_pkey_ready+0x60>)
   1c714:	f005 f912 	bl	2193c <z_impl_k_sem_give>
   1c718:	f3bf 8f5b 	dmb	ish
   1c71c:	6863      	ldr	r3, [r4, #4]
   1c71e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1c722:	065b      	lsls	r3, r3, #25
   1c724:	d509      	bpl.n	1c73a <bt_smp_pkey_ready+0x4a>
		err = smp_public_key_slave(smp);
   1c726:	4620      	mov	r0, r4
   1c728:	f7ff f94e 	bl	1b9c8 <smp_public_key_slave>
		if (err) {
   1c72c:	4601      	mov	r1, r0
   1c72e:	b120      	cbz	r0, 1c73a <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   1c730:	4620      	mov	r0, r4
}
   1c732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1c736:	f00f b83c 	b.w	2b7b2 <smp_error>
}
   1c73a:	bd10      	pop	{r4, pc}
   1c73c:	200030d8 	.word	0x200030d8
   1c740:	0002cd28 	.word	0x0002cd28
   1c744:	0002ccb8 	.word	0x0002ccb8
   1c748:	00030965 	.word	0x00030965
   1c74c:	20001ad8 	.word	0x20001ad8
   1c750:	2000088c 	.word	0x2000088c

0001c754 <smp_ident_addr_info>:
{
   1c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1c758:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c75a:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c75e:	782b      	ldrb	r3, [r5, #0]
{
   1c760:	4604      	mov	r4, r0
   1c762:	f107 0690 	add.w	r6, r7, #144	; 0x90
   1c766:	b313      	cbz	r3, 1c7ae <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1c768:	79ab      	ldrb	r3, [r5, #6]
   1c76a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c76e:	2bc0      	cmp	r3, #192	; 0xc0
   1c770:	d01d      	beq.n	1c7ae <smp_ident_addr_info+0x5a>
   1c772:	4b4b      	ldr	r3, [pc, #300]	; (1c8a0 <smp_ident_addr_info+0x14c>)
   1c774:	4c4b      	ldr	r4, [pc, #300]	; (1c8a4 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1c776:	4628      	mov	r0, r5
   1c778:	1ae4      	subs	r4, r4, r3
   1c77a:	f7f8 fb65 	bl	14e48 <bt_addr_le_str_real>
   1c77e:	f7f5 f949 	bl	11a14 <z_log_strdup>
   1c782:	08e4      	lsrs	r4, r4, #3
   1c784:	01a4      	lsls	r4, r4, #6
   1c786:	f044 0401 	orr.w	r4, r4, #1
   1c78a:	4601      	mov	r1, r0
   1c78c:	4622      	mov	r2, r4
   1c78e:	4846      	ldr	r0, [pc, #280]	; (1c8a8 <smp_ident_addr_info+0x154>)
   1c790:	f00b f991 	bl	27ab6 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c794:	4630      	mov	r0, r6
   1c796:	f7f8 fb57 	bl	14e48 <bt_addr_le_str_real>
   1c79a:	f7f5 f93b 	bl	11a14 <z_log_strdup>
   1c79e:	4622      	mov	r2, r4
   1c7a0:	4601      	mov	r1, r0
   1c7a2:	4842      	ldr	r0, [pc, #264]	; (1c8ac <smp_ident_addr_info+0x158>)
   1c7a4:	f00b f987 	bl	27ab6 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1c7a8:	200a      	movs	r0, #10
}
   1c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1c7ae:	2207      	movs	r2, #7
   1c7b0:	4629      	mov	r1, r5
   1c7b2:	4630      	mov	r0, r6
   1c7b4:	f00d f92a 	bl	29a0c <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1c7b8:	b168      	cbz	r0, 1c7d6 <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1c7ba:	7a38      	ldrb	r0, [r7, #8]
   1c7bc:	4629      	mov	r1, r5
   1c7be:	f000 fb95 	bl	1ceec <bt_keys_find_addr>
		if (keys) {
   1c7c2:	4680      	mov	r8, r0
   1c7c4:	b138      	cbz	r0, 1c7d6 <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   1c7c6:	4601      	mov	r1, r0
   1c7c8:	4620      	mov	r0, r4
   1c7ca:	f00e fdb8 	bl	2b33e <update_keys_check>
   1c7ce:	b300      	cbz	r0, 1c812 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   1c7d0:	4640      	mov	r0, r8
   1c7d2:	f000 fb9b 	bl	1cf0c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c7d6:	210d      	movs	r1, #13
   1c7d8:	1d20      	adds	r0, r4, #4
   1c7da:	f00e fda7 	bl	2b32c <atomic_test_bit>
   1c7de:	2800      	cmp	r0, #0
   1c7e0:	d046      	beq.n	1c870 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c7e2:	7a39      	ldrb	r1, [r7, #8]
   1c7e4:	4632      	mov	r2, r6
   1c7e6:	2002      	movs	r0, #2
   1c7e8:	f00f f8c2 	bl	2b970 <bt_keys_get_type>
		if (!keys) {
   1c7ec:	4680      	mov	r8, r0
   1c7ee:	b990      	cbnz	r0, 1c816 <smp_ident_addr_info+0xc2>
   1c7f0:	4a2b      	ldr	r2, [pc, #172]	; (1c8a0 <smp_ident_addr_info+0x14c>)
   1c7f2:	4c2c      	ldr	r4, [pc, #176]	; (1c8a4 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
   1c7f4:	4630      	mov	r0, r6
   1c7f6:	1aa4      	subs	r4, r4, r2
   1c7f8:	f7f8 fb26 	bl	14e48 <bt_addr_le_str_real>
   1c7fc:	f7f5 f90a 	bl	11a14 <z_log_strdup>
   1c800:	08e4      	lsrs	r4, r4, #3
   1c802:	01a4      	lsls	r4, r4, #6
   1c804:	f044 0401 	orr.w	r4, r4, #1
   1c808:	4601      	mov	r1, r0
   1c80a:	4622      	mov	r2, r4
   1c80c:	4828      	ldr	r0, [pc, #160]	; (1c8b0 <smp_ident_addr_info+0x15c>)
   1c80e:	f00b f952 	bl	27ab6 <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   1c812:	2008      	movs	r0, #8
   1c814:	e7c9      	b.n	1c7aa <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1c816:	78fb      	ldrb	r3, [r7, #3]
   1c818:	2b00      	cmp	r3, #0
   1c81a:	d13e      	bne.n	1c89a <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
   1c81c:	f107 019e 	add.w	r1, r7, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c820:	780b      	ldrb	r3, [r1, #0]
   1c822:	2b01      	cmp	r3, #1
   1c824:	d121      	bne.n	1c86a <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1c826:	798b      	ldrb	r3, [r1, #6]
   1c828:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c82c:	2b40      	cmp	r3, #64	; 0x40
   1c82e:	d11c      	bne.n	1c86a <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1c830:	2206      	movs	r2, #6
   1c832:	3101      	adds	r1, #1
   1c834:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1c838:	f00d f90f 	bl	29a5a <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c83c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
   1c840:	b19b      	cbz	r3, 1c86a <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1c842:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
   1c846:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c84a:	2bc0      	cmp	r3, #192	; 0xc0
   1c84c:	d00d      	beq.n	1c86a <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1c84e:	2207      	movs	r2, #7
   1c850:	4629      	mov	r1, r5
   1c852:	f108 0001 	add.w	r0, r8, #1
   1c856:	f00d f900 	bl	29a5a <memcpy>
   1c85a:	2207      	movs	r2, #7
   1c85c:	4629      	mov	r1, r5
   1c85e:	4630      	mov	r0, r6
   1c860:	f00d f8fb 	bl	29a5a <memcpy>
				bt_conn_identity_resolved(conn);
   1c864:	4638      	mov	r0, r7
   1c866:	f7fb fd39 	bl	182dc <bt_conn_identity_resolved>
		bt_id_add(keys);
   1c86a:	4640      	mov	r0, r8
   1c86c:	f7fa fa34 	bl	16cd8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c870:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c874:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c878:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c87a:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c87e:	d503      	bpl.n	1c888 <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c880:	210a      	movs	r1, #10
   1c882:	4620      	mov	r0, r4
   1c884:	f00e fc73 	bl	2b16e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c888:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c88c:	b91d      	cbnz	r5, 1c896 <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
   1c88e:	4629      	mov	r1, r5
   1c890:	4620      	mov	r0, r4
   1c892:	f7ff fe0f 	bl	1c4b4 <smp_pairing_complete>
	return 0;
   1c896:	2000      	movs	r0, #0
   1c898:	e787      	b.n	1c7aa <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   1c89a:	f107 0197 	add.w	r1, r7, #151	; 0x97
   1c89e:	e7bf      	b.n	1c820 <smp_ident_addr_info+0xcc>
   1c8a0:	0002ccb8 	.word	0x0002ccb8
   1c8a4:	0002cd28 	.word	0x0002cd28
   1c8a8:	0003097e 	.word	0x0003097e
   1c8ac:	000309ab 	.word	0x000309ab
   1c8b0:	0003087a 	.word	0x0003087a

0001c8b4 <smp_master_ident>:
{
   1c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c8b6:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   1c8ba:	4604      	mov	r4, r0
   1c8bc:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c8be:	3004      	adds	r0, #4
   1c8c0:	210d      	movs	r1, #13
   1c8c2:	f00e fd33 	bl	2b32c <atomic_test_bit>
   1c8c6:	b368      	cbz	r0, 1c924 <smp_master_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c8c8:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1c8cc:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1c8ce:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c8d0:	463a      	mov	r2, r7
   1c8d2:	2004      	movs	r0, #4
   1c8d4:	f00f f84c 	bl	2b970 <bt_keys_get_type>
		if (!keys) {
   1c8d8:	4605      	mov	r5, r0
   1c8da:	b990      	cbnz	r0, 1c902 <smp_master_ident+0x4e>
   1c8dc:	4a1c      	ldr	r2, [pc, #112]	; (1c950 <smp_master_ident+0x9c>)
   1c8de:	4c1d      	ldr	r4, [pc, #116]	; (1c954 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
   1c8e0:	4638      	mov	r0, r7
   1c8e2:	1aa4      	subs	r4, r4, r2
   1c8e4:	f7f8 fab0 	bl	14e48 <bt_addr_le_str_real>
   1c8e8:	f7f5 f894 	bl	11a14 <z_log_strdup>
   1c8ec:	08e4      	lsrs	r4, r4, #3
   1c8ee:	01a4      	lsls	r4, r4, #6
   1c8f0:	f044 0401 	orr.w	r4, r4, #1
   1c8f4:	4601      	mov	r1, r0
   1c8f6:	4622      	mov	r2, r4
   1c8f8:	4817      	ldr	r0, [pc, #92]	; (1c958 <smp_master_ident+0xa4>)
   1c8fa:	f00b f8dc 	bl	27ab6 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1c8fe:	2008      	movs	r0, #8
}
   1c900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1c902:	2202      	movs	r2, #2
   1c904:	4631      	mov	r1, r6
   1c906:	3018      	adds	r0, #24
   1c908:	f00d f8a7 	bl	29a5a <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1c90c:	2208      	movs	r2, #8
   1c90e:	1cb1      	adds	r1, r6, #2
   1c910:	f105 0010 	add.w	r0, r5, #16
   1c914:	f00d f8a1 	bl	29a5a <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1c918:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c91c:	f023 0301 	bic.w	r3, r3, #1
   1c920:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c924:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c928:	079a      	lsls	r2, r3, #30
   1c92a:	d50c      	bpl.n	1c946 <smp_master_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c92c:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c92e:	4620      	mov	r0, r4
   1c930:	f00e fc1d 	bl	2b16e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c934:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c938:	b91d      	cbnz	r5, 1c942 <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
   1c93a:	4629      	mov	r1, r5
   1c93c:	4620      	mov	r0, r4
   1c93e:	f7ff fdb9 	bl	1c4b4 <smp_pairing_complete>
	return 0;
   1c942:	2000      	movs	r0, #0
   1c944:	e7dc      	b.n	1c900 <smp_master_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c946:	075b      	lsls	r3, r3, #29
   1c948:	d5f4      	bpl.n	1c934 <smp_master_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c94a:	210a      	movs	r1, #10
   1c94c:	e7ef      	b.n	1c92e <smp_master_ident+0x7a>
   1c94e:	bf00      	nop
   1c950:	0002ccb8 	.word	0x0002ccb8
   1c954:	0002cd28 	.word	0x0002cd28
   1c958:	0003087a 	.word	0x0003087a

0001c95c <smp_pairing_failed>:
{
   1c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c95e:	4a15      	ldr	r2, [pc, #84]	; (1c9b4 <smp_pairing_failed+0x58>)
   1c960:	4b15      	ldr	r3, [pc, #84]	; (1c9b8 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1c962:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c964:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1c968:	7829      	ldrb	r1, [r5, #0]
   1c96a:	1ad2      	subs	r2, r2, r3
   1c96c:	08d2      	lsrs	r2, r2, #3
{
   1c96e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1c970:	0192      	lsls	r2, r2, #6
   1c972:	4812      	ldr	r0, [pc, #72]	; (1c9bc <smp_pairing_failed+0x60>)
   1c974:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c978:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1c97a:	f00b f89c 	bl	27ab6 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c97e:	210a      	movs	r1, #10
   1c980:	4638      	mov	r0, r7
   1c982:	f00e fd77 	bl	2b474 <atomic_test_and_clear_bit>
   1c986:	b140      	cbz	r0, 1c99a <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1c988:	4b0d      	ldr	r3, [pc, #52]	; (1c9c0 <smp_pairing_failed+0x64>)
   1c98a:	681b      	ldr	r3, [r3, #0]
   1c98c:	b963      	cbnz	r3, 1c9a8 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1c98e:	4620      	mov	r0, r4
   1c990:	7829      	ldrb	r1, [r5, #0]
   1c992:	f7ff fd8f 	bl	1c4b4 <smp_pairing_complete>
}
   1c996:	2000      	movs	r0, #0
   1c998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1c99a:	210b      	movs	r1, #11
   1c99c:	4638      	mov	r0, r7
   1c99e:	f00e fd69 	bl	2b474 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c9a2:	2800      	cmp	r0, #0
   1c9a4:	d1f0      	bne.n	1c988 <smp_pairing_failed+0x2c>
   1c9a6:	e7f2      	b.n	1c98e <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1c9a8:	691b      	ldr	r3, [r3, #16]
   1c9aa:	2b00      	cmp	r3, #0
   1c9ac:	d0ef      	beq.n	1c98e <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   1c9ae:	4630      	mov	r0, r6
   1c9b0:	4798      	blx	r3
   1c9b2:	e7ec      	b.n	1c98e <smp_pairing_failed+0x32>
   1c9b4:	0002cd28 	.word	0x0002cd28
   1c9b8:	0002ccb8 	.word	0x0002ccb8
   1c9bc:	00030992 	.word	0x00030992
   1c9c0:	2000303c 	.word	0x2000303c

0001c9c4 <bt_smp_encrypt_change>:
{
   1c9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1c9c8:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c9ca:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   1c9ce:	b088      	sub	sp, #32
   1c9d0:	4604      	mov	r4, r0
   1c9d2:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c9d4:	4630      	mov	r0, r6
   1c9d6:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1c9d8:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c9dc:	f00e fd4a 	bl	2b474 <atomic_test_and_clear_bit>
   1c9e0:	b318      	cbz	r0, 1ca2a <bt_smp_encrypt_change+0x66>
	if (hci_status) {
   1c9e2:	b1bf      	cbz	r7, 1ca14 <bt_smp_encrypt_change+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c9e4:	2103      	movs	r1, #3
   1c9e6:	4630      	mov	r0, r6
   1c9e8:	f00e fca0 	bl	2b32c <atomic_test_bit>
   1c9ec:	b1e8      	cbz	r0, 1ca2a <bt_smp_encrypt_change+0x66>
			uint8_t smp_err = smp_err_get(
   1c9ee:	4638      	mov	r0, r7
   1c9f0:	f7f9 ff2e 	bl	16850 <bt_security_err_get>
	switch (auth_err) {
   1c9f4:	3801      	subs	r0, #1
   1c9f6:	b2c0      	uxtb	r0, r0
   1c9f8:	2807      	cmp	r0, #7
   1c9fa:	bf9a      	itte	ls
   1c9fc:	4b73      	ldrls	r3, [pc, #460]	; (1cbcc <bt_smp_encrypt_change+0x208>)
   1c9fe:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1ca00:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ca02:	2102      	movs	r1, #2
   1ca04:	4630      	mov	r0, r6
   1ca06:	f00e fbb2 	bl	2b16e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1ca0a:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1ca0c:	4628      	mov	r0, r5
   1ca0e:	f7ff fd51 	bl	1c4b4 <smp_pairing_complete>
   1ca12:	e00a      	b.n	1ca2a <bt_smp_encrypt_change+0x66>
	if (!conn->encrypt) {
   1ca14:	f898 300b 	ldrb.w	r3, [r8, #11]
   1ca18:	b13b      	cbz	r3, 1ca2a <bt_smp_encrypt_change+0x66>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ca1a:	2103      	movs	r1, #3
   1ca1c:	4630      	mov	r0, r6
   1ca1e:	f00e fc85 	bl	2b32c <atomic_test_bit>
   1ca22:	b928      	cbnz	r0, 1ca30 <bt_smp_encrypt_change+0x6c>
		smp_reset(smp);
   1ca24:	4628      	mov	r0, r5
   1ca26:	f00e fd3d 	bl	2b4a4 <smp_reset>
}
   1ca2a:	b008      	add	sp, #32
   1ca2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ca30:	2105      	movs	r1, #5
   1ca32:	4630      	mov	r0, r6
   1ca34:	f00e fc7a 	bl	2b32c <atomic_test_bit>
   1ca38:	b1b8      	cbz	r0, 1ca6a <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1ca3a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1ca3e:	071b      	lsls	r3, r3, #28
   1ca40:	d507      	bpl.n	1ca52 <bt_smp_encrypt_change+0x8e>
   1ca42:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1ca46:	071f      	lsls	r7, r3, #28
   1ca48:	d503      	bpl.n	1ca52 <bt_smp_encrypt_change+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1ca4a:	2111      	movs	r1, #17
   1ca4c:	4630      	mov	r0, r6
   1ca4e:	f00e fb8e 	bl	2b16e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1ca52:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1ca56:	f023 0308 	bic.w	r3, r3, #8
   1ca5a:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1ca5e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1ca62:	f023 0308 	bic.w	r3, r3, #8
   1ca66:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1ca6a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1ca6e:	07d8      	lsls	r0, r3, #31
   1ca70:	d51d      	bpl.n	1caae <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1ca72:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ca74:	4628      	mov	r0, r5
   1ca76:	f00e fb7a 	bl	2b16e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ca7a:	4630      	mov	r0, r6
   1ca7c:	2102      	movs	r1, #2
   1ca7e:	f00e fb76 	bl	2b16e <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1ca82:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
   1ca84:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1ca88:	b9cb      	cbnz	r3, 1cabe <bt_smp_encrypt_change+0xfa>
   1ca8a:	4a51      	ldr	r2, [pc, #324]	; (1cbd0 <bt_smp_encrypt_change+0x20c>)
   1ca8c:	4c51      	ldr	r4, [pc, #324]	; (1cbd4 <bt_smp_encrypt_change+0x210>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1ca8e:	3090      	adds	r0, #144	; 0x90
   1ca90:	1aa4      	subs	r4, r4, r2
   1ca92:	f7f8 f9d9 	bl	14e48 <bt_addr_le_str_real>
   1ca96:	f7f4 ffbd 	bl	11a14 <z_log_strdup>
   1ca9a:	08e4      	lsrs	r4, r4, #3
   1ca9c:	01a4      	lsls	r4, r4, #6
   1ca9e:	f044 0401 	orr.w	r4, r4, #1
   1caa2:	4601      	mov	r1, r0
   1caa4:	4622      	mov	r2, r4
   1caa6:	484c      	ldr	r0, [pc, #304]	; (1cbd8 <bt_smp_encrypt_change+0x214>)
   1caa8:	f00b f805 	bl	27ab6 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1caac:	e7bd      	b.n	1ca2a <bt_smp_encrypt_change+0x66>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1caae:	0799      	lsls	r1, r3, #30
   1cab0:	d501      	bpl.n	1cab6 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1cab2:	2108      	movs	r1, #8
   1cab4:	e7de      	b.n	1ca74 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1cab6:	075a      	lsls	r2, r3, #29
   1cab8:	d5df      	bpl.n	1ca7a <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1caba:	210a      	movs	r1, #10
   1cabc:	e7da      	b.n	1ca74 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cabe:	2105      	movs	r1, #5
   1cac0:	4630      	mov	r0, r6
   1cac2:	f00e fc33 	bl	2b32c <atomic_test_bit>
   1cac6:	b9b0      	cbnz	r0, 1caf6 <bt_smp_encrypt_change+0x132>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1cac8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1cacc:	07db      	lsls	r3, r3, #31
   1cace:	d512      	bpl.n	1caf6 <bt_smp_encrypt_change+0x132>
	struct bt_keys *keys = conn->le.keys;
   1cad0:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cad2:	211a      	movs	r1, #26
   1cad4:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1cad6:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cada:	f003 f93f 	bl	1fd5c <bt_rand>
   1cade:	4681      	mov	r9, r0
   1cae0:	b170      	cbz	r0, 1cb00 <bt_smp_encrypt_change+0x13c>
   1cae2:	493c      	ldr	r1, [pc, #240]	; (1cbd4 <bt_smp_encrypt_change+0x210>)
   1cae4:	4b3a      	ldr	r3, [pc, #232]	; (1cbd0 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to get random bytes");
   1cae6:	483d      	ldr	r0, [pc, #244]	; (1cbdc <bt_smp_encrypt_change+0x218>)
   1cae8:	1ac9      	subs	r1, r1, r3
   1caea:	08c9      	lsrs	r1, r1, #3
   1caec:	0189      	lsls	r1, r1, #6
   1caee:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1caf2:	f00a ffd3 	bl	27a9c <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
   1caf6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1cafa:	2900      	cmp	r1, #0
   1cafc:	d195      	bne.n	1ca2a <bt_smp_encrypt_change+0x66>
   1cafe:	e785      	b.n	1ca0c <bt_smp_encrypt_change+0x48>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1cb00:	2106      	movs	r1, #6
   1cb02:	4628      	mov	r0, r5
   1cb04:	f00e fc3c 	bl	2b380 <smp_create_pdu.isra.0>
		if (!buf) {
   1cb08:	4680      	mov	r8, r0
   1cb0a:	b940      	cbnz	r0, 1cb1e <bt_smp_encrypt_change+0x15a>
   1cb0c:	4931      	ldr	r1, [pc, #196]	; (1cbd4 <bt_smp_encrypt_change+0x210>)
   1cb0e:	4b30      	ldr	r3, [pc, #192]	; (1cbd0 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1cb10:	4833      	ldr	r0, [pc, #204]	; (1cbe0 <bt_smp_encrypt_change+0x21c>)
   1cb12:	1ac9      	subs	r1, r1, r3
   1cb14:	08c9      	lsrs	r1, r1, #3
   1cb16:	0189      	lsls	r1, r1, #6
   1cb18:	f041 0101 	orr.w	r1, r1, #1
   1cb1c:	e7e9      	b.n	1caf2 <bt_smp_encrypt_change+0x12e>
	return net_buf_simple_add(&buf->b, len);
   1cb1e:	2110      	movs	r1, #16
   1cb20:	3008      	adds	r0, #8
   1cb22:	f000 fdbf 	bl	1d6a4 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1cb26:	7b3a      	ldrb	r2, [r7, #12]
   1cb28:	a901      	add	r1, sp, #4
   1cb2a:	4682      	mov	sl, r0
   1cb2c:	f00c ff95 	bl	29a5a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1cb30:	7b38      	ldrb	r0, [r7, #12]
   1cb32:	280f      	cmp	r0, #15
   1cb34:	d805      	bhi.n	1cb42 <bt_smp_encrypt_change+0x17e>
			(void)memset(info->ltk + keys->enc_size, 0,
   1cb36:	f1c0 0210 	rsb	r2, r0, #16
   1cb3a:	4649      	mov	r1, r9
   1cb3c:	4450      	add	r0, sl
   1cb3e:	f00c ff97 	bl	29a70 <memset>
		smp_send(smp, buf, NULL, NULL);
   1cb42:	4641      	mov	r1, r8
   1cb44:	2200      	movs	r2, #0
   1cb46:	4628      	mov	r0, r5
   1cb48:	f00e fb50 	bl	2b1ec <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   1cb4c:	2107      	movs	r1, #7
   1cb4e:	4628      	mov	r0, r5
   1cb50:	f00e fc16 	bl	2b380 <smp_create_pdu.isra.0>
		if (!buf) {
   1cb54:	4680      	mov	r8, r0
   1cb56:	b940      	cbnz	r0, 1cb6a <bt_smp_encrypt_change+0x1a6>
   1cb58:	491e      	ldr	r1, [pc, #120]	; (1cbd4 <bt_smp_encrypt_change+0x210>)
   1cb5a:	4b1d      	ldr	r3, [pc, #116]	; (1cbd0 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Master Ident buffer");
   1cb5c:	4821      	ldr	r0, [pc, #132]	; (1cbe4 <bt_smp_encrypt_change+0x220>)
   1cb5e:	1ac9      	subs	r1, r1, r3
   1cb60:	08c9      	lsrs	r1, r1, #3
   1cb62:	0189      	lsls	r1, r1, #6
   1cb64:	f041 0101 	orr.w	r1, r1, #1
   1cb68:	e7c3      	b.n	1caf2 <bt_smp_encrypt_change+0x12e>
   1cb6a:	210a      	movs	r1, #10
   1cb6c:	3008      	adds	r0, #8
   1cb6e:	f000 fd99 	bl	1d6a4 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1cb72:	2208      	movs	r2, #8
   1cb74:	4681      	mov	r9, r0
   1cb76:	a905      	add	r1, sp, #20
   1cb78:	3002      	adds	r0, #2
   1cb7a:	f00c ff6e 	bl	29a5a <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1cb7e:	2202      	movs	r2, #2
   1cb80:	a907      	add	r1, sp, #28
   1cb82:	4648      	mov	r0, r9
   1cb84:	f00c ff69 	bl	29a5a <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1cb88:	4641      	mov	r1, r8
   1cb8a:	4628      	mov	r0, r5
   1cb8c:	4a16      	ldr	r2, [pc, #88]	; (1cbe8 <bt_smp_encrypt_change+0x224>)
   1cb8e:	f00e fb2d 	bl	2b1ec <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cb92:	210d      	movs	r1, #13
   1cb94:	4630      	mov	r0, r6
   1cb96:	f00e fbc9 	bl	2b32c <atomic_test_bit>
   1cb9a:	2800      	cmp	r0, #0
   1cb9c:	d0ab      	beq.n	1caf6 <bt_smp_encrypt_change+0x132>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   1cb9e:	4638      	mov	r0, r7
   1cba0:	2101      	movs	r1, #1
   1cba2:	f00e fef5 	bl	2b990 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   1cba6:	a901      	add	r1, sp, #4
   1cba8:	2210      	movs	r2, #16
   1cbaa:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   1cbae:	f00c ff54 	bl	29a5a <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   1cbb2:	a905      	add	r1, sp, #20
   1cbb4:	2208      	movs	r2, #8
   1cbb6:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1cbba:	f00c ff4e 	bl	29a5a <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1cbbe:	2202      	movs	r2, #2
   1cbc0:	a907      	add	r1, sp, #28
   1cbc2:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1cbc6:	f00c ff48 	bl	29a5a <memcpy>
   1cbca:	e794      	b.n	1caf6 <bt_smp_encrypt_change+0x132>
   1cbcc:	00030a83 	.word	0x00030a83
   1cbd0:	0002ccb8 	.word	0x0002ccb8
   1cbd4:	0002cd28 	.word	0x0002cd28
   1cbd8:	0003099e 	.word	0x0003099e
   1cbdc:	000309b3 	.word	0x000309b3
   1cbe0:	000309ce 	.word	0x000309ce
   1cbe4:	000309f5 	.word	0x000309f5
   1cbe8:	0001cc29 	.word	0x0001cc29

0001cbec <smp_timeout>:
   1cbec:	4b0b      	ldr	r3, [pc, #44]	; (1cc1c <smp_timeout+0x30>)
   1cbee:	490c      	ldr	r1, [pc, #48]	; (1cc20 <smp_timeout+0x34>)
{
   1cbf0:	b510      	push	{r4, lr}
   1cbf2:	1ac9      	subs	r1, r1, r3
   1cbf4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   1cbf6:	0189      	lsls	r1, r1, #6
{
   1cbf8:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1cbfa:	f041 0101 	orr.w	r1, r1, #1
   1cbfe:	4809      	ldr	r0, [pc, #36]	; (1cc24 <smp_timeout+0x38>)
   1cc00:	f00a ff4c 	bl	27a9c <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1cc04:	f5a4 70f0 	sub.w	r0, r4, #480	; 0x1e0
   1cc08:	2108      	movs	r1, #8
   1cc0a:	f7ff fc53 	bl	1c4b4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1cc0e:	f5a4 70ee 	sub.w	r0, r4, #476	; 0x1dc
   1cc12:	2104      	movs	r1, #4
}
   1cc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1cc18:	f00e baa9 	b.w	2b16e <atomic_set_bit>
   1cc1c:	0002ccb8 	.word	0x0002ccb8
   1cc20:	0002cd28 	.word	0x0002cd28
   1cc24:	00030a1c 	.word	0x00030a1c

0001cc28 <smp_ident_sent>:
{
   1cc28:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1cc2a:	7883      	ldrb	r3, [r0, #2]
   1cc2c:	2b01      	cmp	r3, #1
   1cc2e:	d122      	bne.n	1cc76 <smp_ident_sent+0x4e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1cc30:	2106      	movs	r1, #6
   1cc32:	f00d fc81 	bl	2a538 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1cc36:	4604      	mov	r4, r0
   1cc38:	b970      	cbnz	r0, 1cc58 <smp_ident_sent+0x30>
   1cc3a:	490f      	ldr	r1, [pc, #60]	; (1cc78 <smp_ident_sent+0x50>)
   1cc3c:	4a0f      	ldr	r2, [pc, #60]	; (1cc7c <smp_ident_sent+0x54>)
   1cc3e:	4810      	ldr	r0, [pc, #64]	; (1cc80 <smp_ident_sent+0x58>)
   1cc40:	f240 332d 	movw	r3, #813	; 0x32d
   1cc44:	f00a fc57 	bl	274f6 <printk>
   1cc48:	480e      	ldr	r0, [pc, #56]	; (1cc84 <smp_ident_sent+0x5c>)
   1cc4a:	f00a fc54 	bl	274f6 <printk>
   1cc4e:	480b      	ldr	r0, [pc, #44]	; (1cc7c <smp_ident_sent+0x54>)
   1cc50:	f240 312d 	movw	r1, #813	; 0x32d
   1cc54:	f00a fef4 	bl	27a40 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1cc58:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1cc5c:	f023 0301 	bic.w	r3, r3, #1
   1cc60:	f804 3c08 	strb.w	r3, [r4, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1cc64:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1cc68:	b929      	cbnz	r1, 1cc76 <smp_ident_sent+0x4e>
			smp_pairing_complete(smp, 0);
   1cc6a:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
}
   1cc6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1cc72:	f7ff bc1f 	b.w	1c4b4 <smp_pairing_complete>
}
   1cc76:	bd10      	pop	{r4, pc}
   1cc78:	000301ba 	.word	0x000301ba
   1cc7c:	00030a28 	.word	0x00030a28
   1cc80:	0002dcd3 	.word	0x0002dcd3
   1cc84:	00030a57 	.word	0x00030a57

0001cc88 <bt_smp_update_keys>:
{
   1cc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc8a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1cc8c:	f7fe fcc6 	bl	1b61c <smp_chan_get>
	if (!smp) {
   1cc90:	4605      	mov	r5, r0
   1cc92:	2800      	cmp	r0, #0
   1cc94:	d07c      	beq.n	1cd90 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1cc96:	1d06      	adds	r6, r0, #4
   1cc98:	2103      	movs	r1, #3
   1cc9a:	4630      	mov	r0, r6
   1cc9c:	f00e fb46 	bl	2b32c <atomic_test_bit>
   1cca0:	2800      	cmp	r0, #0
   1cca2:	d075      	beq.n	1cd90 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   1cca4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cca8:	b108      	cbz	r0, 1ccae <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1ccaa:	f000 f92f 	bl	1cf0c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ccae:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1ccb2:	7a20      	ldrb	r0, [r4, #8]
   1ccb4:	4639      	mov	r1, r7
   1ccb6:	f000 f889 	bl	1cdcc <bt_keys_get_addr>
   1ccba:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1ccbe:	b9b0      	cbnz	r0, 1ccee <bt_smp_update_keys+0x66>
   1ccc0:	4a34      	ldr	r2, [pc, #208]	; (1cd94 <bt_smp_update_keys+0x10c>)
   1ccc2:	4c35      	ldr	r4, [pc, #212]	; (1cd98 <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   1ccc4:	4638      	mov	r0, r7
   1ccc6:	1aa4      	subs	r4, r4, r2
   1ccc8:	f7f8 f8be 	bl	14e48 <bt_addr_le_str_real>
   1cccc:	f7f4 fea2 	bl	11a14 <z_log_strdup>
   1ccd0:	08e4      	lsrs	r4, r4, #3
   1ccd2:	01a4      	lsls	r4, r4, #6
   1ccd4:	f044 0401 	orr.w	r4, r4, #1
   1ccd8:	4601      	mov	r1, r0
   1ccda:	4622      	mov	r2, r4
   1ccdc:	482f      	ldr	r0, [pc, #188]	; (1cd9c <bt_smp_update_keys+0x114>)
   1ccde:	f00a feea 	bl	27ab6 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1cce2:	4628      	mov	r0, r5
   1cce4:	2108      	movs	r1, #8
}
   1cce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1ccea:	f00e bd62 	b.w	2b7b2 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1ccee:	210e      	movs	r1, #14
   1ccf0:	4630      	mov	r0, r6
   1ccf2:	f00e fb1b 	bl	2b32c <atomic_test_bit>
   1ccf6:	b128      	cbz	r0, 1cd04 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1ccf8:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1ccfc:	7b53      	ldrb	r3, [r2, #13]
   1ccfe:	f043 0302 	orr.w	r3, r3, #2
   1cd02:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1cd04:	7a2a      	ldrb	r2, [r5, #8]
   1cd06:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1cd0a:	2a03      	cmp	r2, #3
   1cd0c:	7b4b      	ldrb	r3, [r1, #13]
   1cd0e:	d836      	bhi.n	1cd7e <bt_smp_update_keys+0xf6>
   1cd10:	b3c2      	cbz	r2, 1cd84 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1cd12:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1cd16:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1cd18:	7d2b      	ldrb	r3, [r5, #20]
   1cd1a:	7b6a      	ldrb	r2, [r5, #13]
   1cd1c:	4293      	cmp	r3, r2
   1cd1e:	bf28      	it	cs
   1cd20:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1cd22:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cd24:	4630      	mov	r0, r6
   1cd26:	2105      	movs	r1, #5
   1cd28:	f00e fb00 	bl	2b32c <atomic_test_bit>
   1cd2c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1cd30:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cd32:	b350      	cbz	r0, 1cd8a <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   1cd34:	f042 0210 	orr.w	r2, r2, #16
   1cd38:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cd3a:	210d      	movs	r1, #13
   1cd3c:	4630      	mov	r0, r6
   1cd3e:	f00e faf5 	bl	2b32c <atomic_test_bit>
   1cd42:	b328      	cbz	r0, 1cd90 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1cd44:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cd48:	2120      	movs	r1, #32
   1cd4a:	f00e fe21 	bl	2b990 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1cd4e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cd52:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1cd56:	2210      	movs	r2, #16
   1cd58:	301a      	adds	r0, #26
   1cd5a:	f00c fe7e 	bl	29a5a <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1cd5e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cd62:	2208      	movs	r2, #8
   1cd64:	2100      	movs	r1, #0
   1cd66:	3010      	adds	r0, #16
   1cd68:	f00c fe82 	bl	29a70 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1cd6c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cd70:	2202      	movs	r2, #2
}
   1cd72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1cd76:	2100      	movs	r1, #0
   1cd78:	3018      	adds	r0, #24
   1cd7a:	f00c be79 	b.w	29a70 <memset>
	switch (smp->method) {
   1cd7e:	3a05      	subs	r2, #5
   1cd80:	2a01      	cmp	r2, #1
   1cd82:	d9c6      	bls.n	1cd12 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1cd84:	f023 0301 	bic.w	r3, r3, #1
   1cd88:	e7c5      	b.n	1cd16 <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1cd8a:	f022 0210 	bic.w	r2, r2, #16
   1cd8e:	735a      	strb	r2, [r3, #13]
}
   1cd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cd92:	bf00      	nop
   1cd94:	0002ccb8 	.word	0x0002ccb8
   1cd98:	0002cd28 	.word	0x0002cd28
   1cd9c:	0003087a 	.word	0x0003087a

0001cda0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1cda0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1cda2:	4b07      	ldr	r3, [pc, #28]	; (1cdc0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1cda4:	4807      	ldr	r0, [pc, #28]	; (1cdc4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1cda6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   1cdaa:	f003 0306 	and.w	r3, r3, #6
   1cdae:	1f9a      	subs	r2, r3, #6
   1cdb0:	4253      	negs	r3, r2
   1cdb2:	4153      	adcs	r3, r2
   1cdb4:	4a04      	ldr	r2, [pc, #16]	; (1cdc8 <bt_smp_init+0x28>)
   1cdb6:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1cdb8:	f7fa fd18 	bl	177ec <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1cdbc:	2000      	movs	r0, #0
   1cdbe:	bd08      	pop	{r3, pc}
   1cdc0:	200002b8 	.word	0x200002b8
   1cdc4:	20000580 	.word	0x20000580
   1cdc8:	20003eb1 	.word	0x20003eb1

0001cdcc <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1cdcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1cdce:	4c11      	ldr	r4, [pc, #68]	; (1ce14 <bt_keys_get_addr+0x48>)
   1cdd0:	7823      	ldrb	r3, [r4, #0]
   1cdd2:	4283      	cmp	r3, r0
{
   1cdd4:	4605      	mov	r5, r0
   1cdd6:	460e      	mov	r6, r1
   1cdd8:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1cdda:	d00b      	beq.n	1cdf4 <bt_keys_get_addr+0x28>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1cddc:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1cdde:	480e      	ldr	r0, [pc, #56]	; (1ce18 <bt_keys_get_addr+0x4c>)
   1cde0:	9400      	str	r4, [sp, #0]
   1cde2:	2207      	movs	r2, #7
   1cde4:	4669      	mov	r1, sp
   1cde6:	f8cd 4003 	str.w	r4, [sp, #3]
   1cdea:	f00c fe0f 	bl	29a0c <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1cdee:	b140      	cbz	r0, 1ce02 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1cdf0:	4620      	mov	r0, r4
   1cdf2:	e00d      	b.n	1ce10 <bt_keys_get_addr+0x44>
   1cdf4:	2207      	movs	r2, #7
   1cdf6:	1c60      	adds	r0, r4, #1
   1cdf8:	f00c fe08 	bl	29a0c <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1cdfc:	2800      	cmp	r0, #0
   1cdfe:	d1ed      	bne.n	1cddc <bt_keys_get_addr+0x10>
   1ce00:	e7f6      	b.n	1cdf0 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   1ce02:	4805      	ldr	r0, [pc, #20]	; (1ce18 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1ce04:	703d      	strb	r5, [r7, #0]
   1ce06:	2207      	movs	r2, #7
   1ce08:	4631      	mov	r1, r6
   1ce0a:	f00c fe26 	bl	29a5a <memcpy>
		return keys;
   1ce0e:	4801      	ldr	r0, [pc, #4]	; (1ce14 <bt_keys_get_addr+0x48>)
}
   1ce10:	b003      	add	sp, #12
   1ce12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce14:	200030dc 	.word	0x200030dc
   1ce18:	200030dd 	.word	0x200030dd

0001ce1c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1ce1c:	460b      	mov	r3, r1
   1ce1e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1ce20:	4a04      	ldr	r2, [pc, #16]	; (1ce34 <bt_keys_foreach+0x18>)
{
   1ce22:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1ce24:	89d4      	ldrh	r4, [r2, #14]
   1ce26:	4204      	tst	r4, r0
   1ce28:	d002      	beq.n	1ce30 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1ce2a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1ce2c:	4610      	mov	r0, r2
   1ce2e:	4718      	bx	r3
}
   1ce30:	bc10      	pop	{r4}
   1ce32:	4770      	bx	lr
   1ce34:	200030dc 	.word	0x200030dc

0001ce38 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1ce38:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1ce3a:	4903      	ldr	r1, [pc, #12]	; (1ce48 <keys_commit+0x10>)
   1ce3c:	2200      	movs	r2, #0
   1ce3e:	2002      	movs	r0, #2
   1ce40:	f7ff ffec 	bl	1ce1c <bt_keys_foreach>
	}

	return 0;
}
   1ce44:	2000      	movs	r0, #0
   1ce46:	bd08      	pop	{r3, pc}
   1ce48:	0002b96d 	.word	0x0002b96d

0001ce4c <bt_keys_find>:
{
   1ce4c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1ce4e:	4c09      	ldr	r4, [pc, #36]	; (1ce74 <bt_keys_find+0x28>)
{
   1ce50:	460b      	mov	r3, r1
   1ce52:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1ce54:	89e2      	ldrh	r2, [r4, #14]
   1ce56:	4202      	tst	r2, r0
   1ce58:	d007      	beq.n	1ce6a <bt_keys_find+0x1e>
   1ce5a:	7822      	ldrb	r2, [r4, #0]
   1ce5c:	429a      	cmp	r2, r3
   1ce5e:	d104      	bne.n	1ce6a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1ce60:	2207      	movs	r2, #7
   1ce62:	1c60      	adds	r0, r4, #1
   1ce64:	f00c fdd2 	bl	29a0c <memcmp>
   1ce68:	b108      	cbz	r0, 1ce6e <bt_keys_find+0x22>
	return NULL;
   1ce6a:	2000      	movs	r0, #0
}
   1ce6c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1ce6e:	4620      	mov	r0, r4
   1ce70:	e7fc      	b.n	1ce6c <bt_keys_find+0x20>
   1ce72:	bf00      	nop
   1ce74:	200030dc 	.word	0x200030dc

0001ce78 <bt_keys_find_irk>:
{
   1ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1ce7a:	780b      	ldrb	r3, [r1, #0]
   1ce7c:	2b01      	cmp	r3, #1
   1ce7e:	4607      	mov	r7, r0
   1ce80:	460c      	mov	r4, r1
   1ce82:	d001      	beq.n	1ce88 <bt_keys_find_irk+0x10>
		return NULL;
   1ce84:	2000      	movs	r0, #0
}
   1ce86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1ce88:	798b      	ldrb	r3, [r1, #6]
   1ce8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ce8e:	2b40      	cmp	r3, #64	; 0x40
   1ce90:	d1f8      	bne.n	1ce84 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1ce92:	4d13      	ldr	r5, [pc, #76]	; (1cee0 <bt_keys_find_irk+0x68>)
   1ce94:	89eb      	ldrh	r3, [r5, #14]
   1ce96:	f013 0f02 	tst.w	r3, #2
   1ce9a:	462e      	mov	r6, r5
   1ce9c:	d0f2      	beq.n	1ce84 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1ce9e:	7833      	ldrb	r3, [r6, #0]
   1cea0:	42bb      	cmp	r3, r7
   1cea2:	d10b      	bne.n	1cebc <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1cea4:	2206      	movs	r2, #6
   1cea6:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1ceaa:	1c60      	adds	r0, r4, #1
   1ceac:	f00c fdae 	bl	29a0c <memcmp>
   1ceb0:	b908      	cbnz	r0, 1ceb6 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1ceb2:	4628      	mov	r0, r5
   1ceb4:	e7e7      	b.n	1ce86 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1ceb6:	89f3      	ldrh	r3, [r6, #14]
   1ceb8:	079b      	lsls	r3, r3, #30
   1ceba:	d5e3      	bpl.n	1ce84 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1cebc:	7833      	ldrb	r3, [r6, #0]
   1cebe:	42bb      	cmp	r3, r7
   1cec0:	d1e0      	bne.n	1ce84 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1cec2:	3401      	adds	r4, #1
   1cec4:	4807      	ldr	r0, [pc, #28]	; (1cee4 <bt_keys_find_irk+0x6c>)
   1cec6:	4621      	mov	r1, r4
   1cec8:	f00c fe26 	bl	29b18 <bt_rpa_irk_matches>
   1cecc:	2800      	cmp	r0, #0
   1cece:	d0d9      	beq.n	1ce84 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1ced0:	4805      	ldr	r0, [pc, #20]	; (1cee8 <bt_keys_find_irk+0x70>)
   1ced2:	2206      	movs	r2, #6
   1ced4:	4621      	mov	r1, r4
   1ced6:	f00c fdc0 	bl	29a5a <memcpy>
			return &key_pool[i];
   1ceda:	4801      	ldr	r0, [pc, #4]	; (1cee0 <bt_keys_find_irk+0x68>)
}
   1cedc:	e7d3      	b.n	1ce86 <bt_keys_find_irk+0xe>
   1cede:	bf00      	nop
   1cee0:	200030dc 	.word	0x200030dc
   1cee4:	20003106 	.word	0x20003106
   1cee8:	20003116 	.word	0x20003116

0001ceec <bt_keys_find_addr>:
{
   1ceec:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1ceee:	4c06      	ldr	r4, [pc, #24]	; (1cf08 <bt_keys_find_addr+0x1c>)
   1cef0:	7823      	ldrb	r3, [r4, #0]
   1cef2:	4283      	cmp	r3, r0
   1cef4:	d104      	bne.n	1cf00 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1cef6:	2207      	movs	r2, #7
   1cef8:	1c60      	adds	r0, r4, #1
   1cefa:	f00c fd87 	bl	29a0c <memcmp>
   1cefe:	b108      	cbz	r0, 1cf04 <bt_keys_find_addr+0x18>
	return NULL;
   1cf00:	2000      	movs	r0, #0
}
   1cf02:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1cf04:	4620      	mov	r0, r4
   1cf06:	e7fc      	b.n	1cf02 <bt_keys_find_addr+0x16>
   1cf08:	200030dc 	.word	0x200030dc

0001cf0c <bt_keys_clear>:
{
   1cf0c:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1cf0e:	7a03      	ldrb	r3, [r0, #8]
   1cf10:	075b      	lsls	r3, r3, #29
{
   1cf12:	b08c      	sub	sp, #48	; 0x30
   1cf14:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1cf16:	d501      	bpl.n	1cf1c <bt_keys_clear+0x10>
		bt_id_del(keys);
   1cf18:	f7f9 ffb2 	bl	16e80 <bt_id_del>
		if (keys->id) {
   1cf1c:	4625      	mov	r5, r4
   1cf1e:	f815 2b01 	ldrb.w	r2, [r5], #1
   1cf22:	b1aa      	cbz	r2, 1cf50 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1cf24:	ae02      	add	r6, sp, #8
   1cf26:	2104      	movs	r1, #4
   1cf28:	4630      	mov	r0, r6
   1cf2a:	f00a fa48 	bl	273be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cf2e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cf30:	462b      	mov	r3, r5
   1cf32:	4a08      	ldr	r2, [pc, #32]	; (1cf54 <bt_keys_clear+0x48>)
   1cf34:	2124      	movs	r1, #36	; 0x24
   1cf36:	a803      	add	r0, sp, #12
   1cf38:	f7f8 fa56 	bl	153e8 <bt_settings_encode_key>
		settings_delete(key);
   1cf3c:	a803      	add	r0, sp, #12
   1cf3e:	f00b fa7a 	bl	28436 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1cf42:	225c      	movs	r2, #92	; 0x5c
   1cf44:	2100      	movs	r1, #0
   1cf46:	4620      	mov	r0, r4
   1cf48:	f00c fd92 	bl	29a70 <memset>
}
   1cf4c:	b00c      	add	sp, #48	; 0x30
   1cf4e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cf50:	9200      	str	r2, [sp, #0]
   1cf52:	e7ed      	b.n	1cf30 <bt_keys_clear+0x24>
   1cf54:	00030b74 	.word	0x00030b74

0001cf58 <keys_set>:
{
   1cf58:	b570      	push	{r4, r5, r6, lr}
   1cf5a:	4614      	mov	r4, r2
   1cf5c:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1cf5e:	4605      	mov	r5, r0
   1cf60:	b970      	cbnz	r0, 1cf80 <keys_set+0x28>
   1cf62:	4946      	ldr	r1, [pc, #280]	; (1d07c <keys_set+0x124>)
   1cf64:	4b46      	ldr	r3, [pc, #280]	; (1d080 <keys_set+0x128>)
		BT_ERR("Insufficient number of arguments");
   1cf66:	4847      	ldr	r0, [pc, #284]	; (1d084 <keys_set+0x12c>)
   1cf68:	1ac9      	subs	r1, r1, r3
   1cf6a:	08c9      	lsrs	r1, r1, #3
   1cf6c:	0189      	lsls	r1, r1, #6
   1cf6e:	f041 0101 	orr.w	r1, r1, #1
   1cf72:	f00a fd93 	bl	27a9c <log_0>
		return -EINVAL;
   1cf76:	f06f 0415 	mvn.w	r4, #21
}
   1cf7a:	4620      	mov	r0, r4
   1cf7c:	b018      	add	sp, #96	; 0x60
   1cf7e:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1cf80:	2250      	movs	r2, #80	; 0x50
   1cf82:	a904      	add	r1, sp, #16
   1cf84:	4618      	mov	r0, r3
   1cf86:	47a0      	blx	r4
	if (len < 0) {
   1cf88:	1e04      	subs	r4, r0, #0
   1cf8a:	da0b      	bge.n	1cfa4 <keys_set+0x4c>
   1cf8c:	4a3b      	ldr	r2, [pc, #236]	; (1d07c <keys_set+0x124>)
   1cf8e:	4b3c      	ldr	r3, [pc, #240]	; (1d080 <keys_set+0x128>)
		BT_ERR("Failed to read value (err %zd)", len);
   1cf90:	483d      	ldr	r0, [pc, #244]	; (1d088 <keys_set+0x130>)
   1cf92:	1ad2      	subs	r2, r2, r3
   1cf94:	08d2      	lsrs	r2, r2, #3
   1cf96:	0192      	lsls	r2, r2, #6
   1cf98:	f042 0201 	orr.w	r2, r2, #1
   1cf9c:	4621      	mov	r1, r4
   1cf9e:	f00a fd8a 	bl	27ab6 <log_1>
   1cfa2:	e7e8      	b.n	1cf76 <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   1cfa4:	a902      	add	r1, sp, #8
   1cfa6:	4628      	mov	r0, r5
   1cfa8:	f00c fe01 	bl	29bae <bt_settings_decode_key>
	if (err) {
   1cfac:	4606      	mov	r6, r0
   1cfae:	b148      	cbz	r0, 1cfc4 <keys_set+0x6c>
   1cfb0:	4a32      	ldr	r2, [pc, #200]	; (1d07c <keys_set+0x124>)
   1cfb2:	4b33      	ldr	r3, [pc, #204]	; (1d080 <keys_set+0x128>)
		BT_ERR("Unable to decode address %s", name);
   1cfb4:	4835      	ldr	r0, [pc, #212]	; (1d08c <keys_set+0x134>)
   1cfb6:	1ad2      	subs	r2, r2, r3
   1cfb8:	08d2      	lsrs	r2, r2, #3
   1cfba:	0192      	lsls	r2, r2, #6
   1cfbc:	f042 0201 	orr.w	r2, r2, #1
   1cfc0:	4629      	mov	r1, r5
   1cfc2:	e7ec      	b.n	1cf9e <keys_set+0x46>
	settings_name_next(name, &next);
   1cfc4:	a901      	add	r1, sp, #4
   1cfc6:	4628      	mov	r0, r5
   1cfc8:	f00b fa5c 	bl	28484 <settings_name_next>
	if (!next) {
   1cfcc:	9801      	ldr	r0, [sp, #4]
   1cfce:	b120      	cbz	r0, 1cfda <keys_set+0x82>
		id = strtol(next, NULL, 10);
   1cfd0:	220a      	movs	r2, #10
   1cfd2:	4631      	mov	r1, r6
   1cfd4:	f00c fc5c 	bl	29890 <strtol>
   1cfd8:	b2c0      	uxtb	r0, r0
	if (!len) {
   1cfda:	b9e4      	cbnz	r4, 1d016 <keys_set+0xbe>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1cfdc:	4601      	mov	r1, r0
   1cfde:	aa02      	add	r2, sp, #8
   1cfe0:	203f      	movs	r0, #63	; 0x3f
   1cfe2:	f7ff ff33 	bl	1ce4c <bt_keys_find>
		if (keys) {
   1cfe6:	b120      	cbz	r0, 1cff2 <keys_set+0x9a>
			(void)memset(keys, 0, sizeof(*keys));
   1cfe8:	225c      	movs	r2, #92	; 0x5c
   1cfea:	4621      	mov	r1, r4
   1cfec:	f00c fd40 	bl	29a70 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1cff0:	e7c3      	b.n	1cf7a <keys_set+0x22>
   1cff2:	4a23      	ldr	r2, [pc, #140]	; (1d080 <keys_set+0x128>)
   1cff4:	4d21      	ldr	r5, [pc, #132]	; (1d07c <keys_set+0x124>)
			BT_WARN("Unable to find deleted keys for %s",
   1cff6:	a802      	add	r0, sp, #8
   1cff8:	1aad      	subs	r5, r5, r2
   1cffa:	f7f7 ff25 	bl	14e48 <bt_addr_le_str_real>
   1cffe:	f7f4 fd09 	bl	11a14 <z_log_strdup>
   1d002:	08ed      	lsrs	r5, r5, #3
   1d004:	01ad      	lsls	r5, r5, #6
   1d006:	f045 0502 	orr.w	r5, r5, #2
   1d00a:	4601      	mov	r1, r0
   1d00c:	462a      	mov	r2, r5
   1d00e:	4820      	ldr	r0, [pc, #128]	; (1d090 <keys_set+0x138>)
   1d010:	f00a fd51 	bl	27ab6 <log_1>
   1d014:	e7b1      	b.n	1cf7a <keys_set+0x22>
	keys = bt_keys_get_addr(id, &addr);
   1d016:	a902      	add	r1, sp, #8
   1d018:	f7ff fed8 	bl	1cdcc <bt_keys_get_addr>
	if (!keys) {
   1d01c:	4605      	mov	r5, r0
   1d01e:	b998      	cbnz	r0, 1d048 <keys_set+0xf0>
   1d020:	4a17      	ldr	r2, [pc, #92]	; (1d080 <keys_set+0x128>)
   1d022:	4c16      	ldr	r4, [pc, #88]	; (1d07c <keys_set+0x124>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1d024:	a802      	add	r0, sp, #8
   1d026:	1aa4      	subs	r4, r4, r2
   1d028:	f7f7 ff0e 	bl	14e48 <bt_addr_le_str_real>
   1d02c:	f7f4 fcf2 	bl	11a14 <z_log_strdup>
   1d030:	08e4      	lsrs	r4, r4, #3
   1d032:	01a4      	lsls	r4, r4, #6
   1d034:	f044 0401 	orr.w	r4, r4, #1
   1d038:	4601      	mov	r1, r0
   1d03a:	4622      	mov	r2, r4
   1d03c:	4815      	ldr	r0, [pc, #84]	; (1d094 <keys_set+0x13c>)
   1d03e:	f00a fd3a 	bl	27ab6 <log_1>
		return -ENOMEM;
   1d042:	f06f 040b 	mvn.w	r4, #11
   1d046:	e798      	b.n	1cf7a <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1d048:	2c50      	cmp	r4, #80	; 0x50
   1d04a:	d00f      	beq.n	1d06c <keys_set+0x114>
   1d04c:	4a0c      	ldr	r2, [pc, #48]	; (1d080 <keys_set+0x128>)
   1d04e:	4b0b      	ldr	r3, [pc, #44]	; (1d07c <keys_set+0x124>)
			BT_ERR("Invalid key length %zd != %zu", len,
   1d050:	4811      	ldr	r0, [pc, #68]	; (1d098 <keys_set+0x140>)
   1d052:	1a9b      	subs	r3, r3, r2
   1d054:	08db      	lsrs	r3, r3, #3
   1d056:	019b      	lsls	r3, r3, #6
   1d058:	f043 0301 	orr.w	r3, r3, #1
   1d05c:	2250      	movs	r2, #80	; 0x50
   1d05e:	4621      	mov	r1, r4
   1d060:	f00a fd3d 	bl	27ade <log_2>
			bt_keys_clear(keys);
   1d064:	4628      	mov	r0, r5
   1d066:	f7ff ff51 	bl	1cf0c <bt_keys_clear>
			return -EINVAL;
   1d06a:	e784      	b.n	1cf76 <keys_set+0x1e>
		memcpy(keys->storage_start, val, len);
   1d06c:	4622      	mov	r2, r4
   1d06e:	a904      	add	r1, sp, #16
   1d070:	300c      	adds	r0, #12
   1d072:	f00c fcf2 	bl	29a5a <memcpy>
	return 0;
   1d076:	2400      	movs	r4, #0
   1d078:	e77f      	b.n	1cf7a <keys_set+0x22>
   1d07a:	bf00      	nop
   1d07c:	0002cd00 	.word	0x0002cd00
   1d080:	0002ccb8 	.word	0x0002ccb8
   1d084:	0002f004 	.word	0x0002f004
   1d088:	00030ad5 	.word	0x00030ad5
   1d08c:	0003041f 	.word	0x0003041f
   1d090:	00030af4 	.word	0x00030af4
   1d094:	00030b17 	.word	0x00030b17
   1d098:	00030b36 	.word	0x00030b36

0001d09c <bt_keys_store>:
{
   1d09c:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1d09e:	4605      	mov	r5, r0
{
   1d0a0:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1d0a2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1d0a6:	4604      	mov	r4, r0
	if (keys->id) {
   1d0a8:	b30a      	cbz	r2, 1d0ee <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1d0aa:	ae02      	add	r6, sp, #8
   1d0ac:	2104      	movs	r1, #4
   1d0ae:	4630      	mov	r0, r6
   1d0b0:	f00a f985 	bl	273be <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d0b4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d0b6:	4a0f      	ldr	r2, [pc, #60]	; (1d0f4 <bt_keys_store+0x58>)
   1d0b8:	462b      	mov	r3, r5
   1d0ba:	2124      	movs	r1, #36	; 0x24
   1d0bc:	a803      	add	r0, sp, #12
   1d0be:	f7f8 f993 	bl	153e8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1d0c2:	f104 010c 	add.w	r1, r4, #12
   1d0c6:	2250      	movs	r2, #80	; 0x50
   1d0c8:	a803      	add	r0, sp, #12
   1d0ca:	f7f5 fe91 	bl	12df0 <settings_save_one>
	if (err) {
   1d0ce:	4604      	mov	r4, r0
   1d0d0:	b150      	cbz	r0, 1d0e8 <bt_keys_store+0x4c>
   1d0d2:	4a09      	ldr	r2, [pc, #36]	; (1d0f8 <bt_keys_store+0x5c>)
   1d0d4:	4b09      	ldr	r3, [pc, #36]	; (1d0fc <bt_keys_store+0x60>)
   1d0d6:	1ad2      	subs	r2, r2, r3
   1d0d8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   1d0da:	0192      	lsls	r2, r2, #6
   1d0dc:	4601      	mov	r1, r0
   1d0de:	f042 0201 	orr.w	r2, r2, #1
   1d0e2:	4807      	ldr	r0, [pc, #28]	; (1d100 <bt_keys_store+0x64>)
   1d0e4:	f00a fce7 	bl	27ab6 <log_1>
}
   1d0e8:	4620      	mov	r0, r4
   1d0ea:	b00c      	add	sp, #48	; 0x30
   1d0ec:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d0ee:	9200      	str	r2, [sp, #0]
   1d0f0:	e7e1      	b.n	1d0b6 <bt_keys_store+0x1a>
   1d0f2:	bf00      	nop
   1d0f4:	00030b74 	.word	0x00030b74
   1d0f8:	0002cd00 	.word	0x0002cd00
   1d0fc:	0002ccb8 	.word	0x0002ccb8
   1d100:	00030b54 	.word	0x00030b54

0001d104 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d104:	4b02      	ldr	r3, [pc, #8]	; (1d110 <net_buf_pool_get+0xc>)
   1d106:	222c      	movs	r2, #44	; 0x2c
   1d108:	fb02 3000 	mla	r0, r2, r0, r3
   1d10c:	4770      	bx	lr
   1d10e:	bf00      	nop
   1d110:	20000928 	.word	0x20000928

0001d114 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d114:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1d116:	4a05      	ldr	r2, [pc, #20]	; (1d12c <net_buf_id+0x18>)
   1d118:	212c      	movs	r1, #44	; 0x2c
   1d11a:	fb01 2303 	mla	r3, r1, r3, r2
   1d11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d120:	1ac0      	subs	r0, r0, r3
}
   1d122:	4b03      	ldr	r3, [pc, #12]	; (1d130 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1d124:	10c0      	asrs	r0, r0, #3
}
   1d126:	4358      	muls	r0, r3
   1d128:	4770      	bx	lr
   1d12a:	bf00      	nop
   1d12c:	20000928 	.word	0x20000928
   1d130:	aaaaaaab 	.word	0xaaaaaaab

0001d134 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d134:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d136:	4a0a      	ldr	r2, [pc, #40]	; (1d160 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d138:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d13a:	242c      	movs	r4, #44	; 0x2c
   1d13c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1d140:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d144:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d146:	6823      	ldr	r3, [r4, #0]
   1d148:	429a      	cmp	r2, r3
   1d14a:	bf94      	ite	ls
   1d14c:	600a      	strls	r2, [r1, #0]
   1d14e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d150:	f7ff ffe0 	bl	1d114 <net_buf_id>
   1d154:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d158:	fb02 3000 	mla	r0, r2, r0, r3
   1d15c:	bd10      	pop	{r4, pc}
   1d15e:	bf00      	nop
   1d160:	20000928 	.word	0x20000928

0001d164 <net_buf_reset>:
{
   1d164:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1d166:	7943      	ldrb	r3, [r0, #5]
{
   1d168:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1d16a:	b14b      	cbz	r3, 1d180 <net_buf_reset+0x1c>
   1d16c:	490d      	ldr	r1, [pc, #52]	; (1d1a4 <net_buf_reset+0x40>)
   1d16e:	480e      	ldr	r0, [pc, #56]	; (1d1a8 <net_buf_reset+0x44>)
   1d170:	4a0e      	ldr	r2, [pc, #56]	; (1d1ac <net_buf_reset+0x48>)
   1d172:	234f      	movs	r3, #79	; 0x4f
   1d174:	f00a f9bf 	bl	274f6 <printk>
   1d178:	480c      	ldr	r0, [pc, #48]	; (1d1ac <net_buf_reset+0x48>)
   1d17a:	214f      	movs	r1, #79	; 0x4f
   1d17c:	f00a fc60 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1d180:	6823      	ldr	r3, [r4, #0]
   1d182:	b14b      	cbz	r3, 1d198 <net_buf_reset+0x34>
   1d184:	490a      	ldr	r1, [pc, #40]	; (1d1b0 <net_buf_reset+0x4c>)
   1d186:	4808      	ldr	r0, [pc, #32]	; (1d1a8 <net_buf_reset+0x44>)
   1d188:	4a08      	ldr	r2, [pc, #32]	; (1d1ac <net_buf_reset+0x48>)
   1d18a:	2350      	movs	r3, #80	; 0x50
   1d18c:	f00a f9b3 	bl	274f6 <printk>
   1d190:	4806      	ldr	r0, [pc, #24]	; (1d1ac <net_buf_reset+0x48>)
   1d192:	2150      	movs	r1, #80	; 0x50
   1d194:	f00a fc54 	bl	27a40 <assert_post_action>
	buf->len  = 0U;
   1d198:	2300      	movs	r3, #0
   1d19a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1d19c:	6923      	ldr	r3, [r4, #16]
   1d19e:	60a3      	str	r3, [r4, #8]
}
   1d1a0:	bd10      	pop	{r4, pc}
   1d1a2:	bf00      	nop
   1d1a4:	00030ba5 	.word	0x00030ba5
   1d1a8:	0002dcd3 	.word	0x0002dcd3
   1d1ac:	00030b81 	.word	0x00030b81
   1d1b0:	00030bb6 	.word	0x00030bb6

0001d1b4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d1b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d1b8:	4605      	mov	r5, r0
   1d1ba:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1d1bc:	4610      	mov	r0, r2
   1d1be:	4619      	mov	r1, r3
{
   1d1c0:	4616      	mov	r6, r2
   1d1c2:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1d1c4:	f00f faf2 	bl	2c7ac <sys_clock_timeout_end_calc>
   1d1c8:	4680      	mov	r8, r0
   1d1ca:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1d1cc:	b94d      	cbnz	r5, 1d1e2 <net_buf_alloc_len+0x2e>
   1d1ce:	494d      	ldr	r1, [pc, #308]	; (1d304 <net_buf_alloc_len+0x150>)
   1d1d0:	484d      	ldr	r0, [pc, #308]	; (1d308 <net_buf_alloc_len+0x154>)
   1d1d2:	4a4e      	ldr	r2, [pc, #312]	; (1d30c <net_buf_alloc_len+0x158>)
   1d1d4:	23ed      	movs	r3, #237	; 0xed
   1d1d6:	f00a f98e 	bl	274f6 <printk>
   1d1da:	484c      	ldr	r0, [pc, #304]	; (1d30c <net_buf_alloc_len+0x158>)
   1d1dc:	21ed      	movs	r1, #237	; 0xed
   1d1de:	f00a fc2f 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   1d1e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1e6:	f3ef 8a11 	mrs	sl, BASEPRI
   1d1ea:	f383 8811 	msr	BASEPRI, r3
   1d1ee:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d1f2:	8beb      	ldrh	r3, [r5, #30]
   1d1f4:	2b00      	cmp	r3, #0
   1d1f6:	d055      	beq.n	1d2a4 <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d1f8:	8baa      	ldrh	r2, [r5, #28]
   1d1fa:	429a      	cmp	r2, r3
   1d1fc:	d93e      	bls.n	1d27c <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   1d1fe:	2200      	movs	r2, #0
   1d200:	2300      	movs	r3, #0
   1d202:	4628      	mov	r0, r5
   1d204:	f004 fb2e 	bl	21864 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d208:	4604      	mov	r4, r0
   1d20a:	2800      	cmp	r0, #0
   1d20c:	d036      	beq.n	1d27c <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   1d20e:	f38a 8811 	msr	BASEPRI, sl
   1d212:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d216:	f8dd a004 	ldr.w	sl, [sp, #4]
   1d21a:	f1ba 0f00 	cmp.w	sl, #0
   1d21e:	d06d      	beq.n	1d2fc <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d220:	ea56 0307 	orrs.w	r3, r6, r7
   1d224:	d010      	beq.n	1d248 <net_buf_alloc_len+0x94>
   1d226:	1c7b      	adds	r3, r7, #1
   1d228:	bf08      	it	eq
   1d22a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1d22e:	d00b      	beq.n	1d248 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1d230:	f006 fee6 	bl	24000 <sys_clock_tick_get>
   1d234:	ebb8 0600 	subs.w	r6, r8, r0
   1d238:	eb69 0701 	sbc.w	r7, r9, r1
   1d23c:	2e00      	cmp	r6, #0
   1d23e:	f177 0300 	sbcs.w	r3, r7, #0
   1d242:	bfbc      	itt	lt
   1d244:	2600      	movlt	r6, #0
   1d246:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d248:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d24a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1d310 <net_buf_alloc_len+0x15c>
   1d24e:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1d252:	fb09 8303 	mla	r3, r9, r3, r8
   1d256:	4632      	mov	r2, r6
   1d258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d25a:	681b      	ldr	r3, [r3, #0]
   1d25c:	a901      	add	r1, sp, #4
   1d25e:	681d      	ldr	r5, [r3, #0]
   1d260:	4620      	mov	r0, r4
   1d262:	463b      	mov	r3, r7
   1d264:	47a8      	blx	r5
   1d266:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d268:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d26a:	bb58      	cbnz	r0, 1d2c4 <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   1d26c:	79a0      	ldrb	r0, [r4, #6]
   1d26e:	4621      	mov	r1, r4
   1d270:	fb00 8009 	mla	r0, r0, r9, r8
   1d274:	f00f f9f7 	bl	2c666 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d278:	462c      	mov	r4, r5
}
   1d27a:	e01f      	b.n	1d2bc <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   1d27c:	8be8      	ldrh	r0, [r5, #30]
   1d27e:	1e43      	subs	r3, r0, #1
   1d280:	83eb      	strh	r3, [r5, #30]
   1d282:	f38a 8811 	msr	BASEPRI, sl
   1d286:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d28a:	8bac      	ldrh	r4, [r5, #28]
   1d28c:	1a24      	subs	r4, r4, r0
   1d28e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d290:	2318      	movs	r3, #24
   1d292:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1d296:	481e      	ldr	r0, [pc, #120]	; (1d310 <net_buf_alloc_len+0x15c>)
   1d298:	4b1e      	ldr	r3, [pc, #120]	; (1d314 <net_buf_alloc_len+0x160>)
   1d29a:	1a2d      	subs	r5, r5, r0
   1d29c:	10ad      	asrs	r5, r5, #2
   1d29e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d2a0:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d2a2:	e7b8      	b.n	1d216 <net_buf_alloc_len+0x62>
   1d2a4:	f38a 8811 	msr	BASEPRI, sl
   1d2a8:	f3bf 8f6f 	isb	sy
   1d2ac:	4632      	mov	r2, r6
   1d2ae:	463b      	mov	r3, r7
   1d2b0:	4628      	mov	r0, r5
   1d2b2:	f004 fad7 	bl	21864 <z_impl_k_queue_get>
	if (!buf) {
   1d2b6:	4604      	mov	r4, r0
   1d2b8:	2800      	cmp	r0, #0
   1d2ba:	d1ac      	bne.n	1d216 <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d2bc:	4620      	mov	r0, r4
   1d2be:	b002      	add	sp, #8
   1d2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1d2c4:	9b01      	ldr	r3, [sp, #4]
   1d2c6:	459a      	cmp	sl, r3
   1d2c8:	d90e      	bls.n	1d2e8 <net_buf_alloc_len+0x134>
   1d2ca:	4913      	ldr	r1, [pc, #76]	; (1d318 <net_buf_alloc_len+0x164>)
   1d2cc:	4a0f      	ldr	r2, [pc, #60]	; (1d30c <net_buf_alloc_len+0x158>)
   1d2ce:	480e      	ldr	r0, [pc, #56]	; (1d308 <net_buf_alloc_len+0x154>)
   1d2d0:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1d2d4:	f00a f90f 	bl	274f6 <printk>
   1d2d8:	4810      	ldr	r0, [pc, #64]	; (1d31c <net_buf_alloc_len+0x168>)
   1d2da:	f00a f90c 	bl	274f6 <printk>
   1d2de:	480b      	ldr	r0, [pc, #44]	; (1d30c <net_buf_alloc_len+0x158>)
   1d2e0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1d2e4:	f00a fbac 	bl	27a40 <assert_post_action>
	buf->frags = NULL;
   1d2e8:	2300      	movs	r3, #0
   1d2ea:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d2ec:	2301      	movs	r3, #1
   1d2ee:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1d2f0:	9b01      	ldr	r3, [sp, #4]
   1d2f2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1d2f4:	4620      	mov	r0, r4
   1d2f6:	f7ff ff35 	bl	1d164 <net_buf_reset>
	return buf;
   1d2fa:	e7df      	b.n	1d2bc <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   1d2fc:	f8c4 a010 	str.w	sl, [r4, #16]
   1d300:	e7f2      	b.n	1d2e8 <net_buf_alloc_len+0x134>
   1d302:	bf00      	nop
   1d304:	00030bd0 	.word	0x00030bd0
   1d308:	0002dcd3 	.word	0x0002dcd3
   1d30c:	00030b81 	.word	0x00030b81
   1d310:	20000928 	.word	0x20000928
   1d314:	ba2e8ba3 	.word	0xba2e8ba3
   1d318:	00030bd5 	.word	0x00030bd5
   1d31c:	00030be6 	.word	0x00030be6

0001d320 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1d320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d324:	4606      	mov	r6, r0
   1d326:	f004 fa9d 	bl	21864 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1d32a:	4605      	mov	r5, r0
   1d32c:	b150      	cbz	r0, 1d344 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1d32e:	4f13      	ldr	r7, [pc, #76]	; (1d37c <net_buf_get+0x5c>)
   1d330:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1d380 <net_buf_get+0x60>
   1d334:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1d384 <net_buf_get+0x64>
   1d338:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d33a:	7963      	ldrb	r3, [r4, #5]
   1d33c:	f013 0301 	ands.w	r3, r3, #1
   1d340:	d103      	bne.n	1d34a <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1d342:	6023      	str	r3, [r4, #0]

	return buf;
}
   1d344:	4628      	mov	r0, r5
   1d346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d34a:	2200      	movs	r2, #0
   1d34c:	2300      	movs	r3, #0
   1d34e:	4630      	mov	r0, r6
   1d350:	f004 fa88 	bl	21864 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1d354:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1d356:	b958      	cbnz	r0, 1d370 <net_buf_get+0x50>
   1d358:	4641      	mov	r1, r8
   1d35a:	4648      	mov	r0, r9
   1d35c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1d360:	463a      	mov	r2, r7
   1d362:	f00a f8c8 	bl	274f6 <printk>
   1d366:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1d36a:	4638      	mov	r0, r7
   1d36c:	f00a fb68 	bl	27a40 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1d370:	7963      	ldrb	r3, [r4, #5]
   1d372:	f023 0301 	bic.w	r3, r3, #1
   1d376:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d378:	6824      	ldr	r4, [r4, #0]
   1d37a:	e7de      	b.n	1d33a <net_buf_get+0x1a>
   1d37c:	00030b81 	.word	0x00030b81
   1d380:	00030be9 	.word	0x00030be9
   1d384:	0002dcd3 	.word	0x0002dcd3

0001d388 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1d388:	b538      	push	{r3, r4, r5, lr}
   1d38a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1d38c:	4604      	mov	r4, r0
   1d38e:	b958      	cbnz	r0, 1d3a8 <net_buf_simple_reserve+0x20>
   1d390:	490e      	ldr	r1, [pc, #56]	; (1d3cc <net_buf_simple_reserve+0x44>)
   1d392:	480f      	ldr	r0, [pc, #60]	; (1d3d0 <net_buf_simple_reserve+0x48>)
   1d394:	4a0f      	ldr	r2, [pc, #60]	; (1d3d4 <net_buf_simple_reserve+0x4c>)
   1d396:	f240 13bd 	movw	r3, #445	; 0x1bd
   1d39a:	f00a f8ac 	bl	274f6 <printk>
   1d39e:	480d      	ldr	r0, [pc, #52]	; (1d3d4 <net_buf_simple_reserve+0x4c>)
   1d3a0:	f240 11bd 	movw	r1, #445	; 0x1bd
   1d3a4:	f00a fb4c 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1d3a8:	88a3      	ldrh	r3, [r4, #4]
   1d3aa:	b15b      	cbz	r3, 1d3c4 <net_buf_simple_reserve+0x3c>
   1d3ac:	490a      	ldr	r1, [pc, #40]	; (1d3d8 <net_buf_simple_reserve+0x50>)
   1d3ae:	4808      	ldr	r0, [pc, #32]	; (1d3d0 <net_buf_simple_reserve+0x48>)
   1d3b0:	4a08      	ldr	r2, [pc, #32]	; (1d3d4 <net_buf_simple_reserve+0x4c>)
   1d3b2:	f44f 73df 	mov.w	r3, #446	; 0x1be
   1d3b6:	f00a f89e 	bl	274f6 <printk>
   1d3ba:	4806      	ldr	r0, [pc, #24]	; (1d3d4 <net_buf_simple_reserve+0x4c>)
   1d3bc:	f44f 71df 	mov.w	r1, #446	; 0x1be
   1d3c0:	f00a fb3e 	bl	27a40 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1d3c4:	68a3      	ldr	r3, [r4, #8]
   1d3c6:	442b      	add	r3, r5
   1d3c8:	6023      	str	r3, [r4, #0]
}
   1d3ca:	bd38      	pop	{r3, r4, r5, pc}
   1d3cc:	0002f1b3 	.word	0x0002f1b3
   1d3d0:	0002dcd3 	.word	0x0002dcd3
   1d3d4:	00030b81 	.word	0x00030b81
   1d3d8:	00030bf5 	.word	0x00030bf5

0001d3dc <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1d3dc:	b538      	push	{r3, r4, r5, lr}
   1d3de:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1d3e0:	4605      	mov	r5, r0
   1d3e2:	b958      	cbnz	r0, 1d3fc <net_buf_put+0x20>
   1d3e4:	4913      	ldr	r1, [pc, #76]	; (1d434 <net_buf_put+0x58>)
   1d3e6:	4814      	ldr	r0, [pc, #80]	; (1d438 <net_buf_put+0x5c>)
   1d3e8:	4a14      	ldr	r2, [pc, #80]	; (1d43c <net_buf_put+0x60>)
   1d3ea:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   1d3ee:	f00a f882 	bl	274f6 <printk>
   1d3f2:	4812      	ldr	r0, [pc, #72]	; (1d43c <net_buf_put+0x60>)
   1d3f4:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   1d3f8:	f00a fb22 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1d3fc:	b95c      	cbnz	r4, 1d416 <net_buf_put+0x3a>
   1d3fe:	4910      	ldr	r1, [pc, #64]	; (1d440 <net_buf_put+0x64>)
   1d400:	480d      	ldr	r0, [pc, #52]	; (1d438 <net_buf_put+0x5c>)
   1d402:	4a0e      	ldr	r2, [pc, #56]	; (1d43c <net_buf_put+0x60>)
   1d404:	f240 13fb 	movw	r3, #507	; 0x1fb
   1d408:	f00a f875 	bl	274f6 <printk>
   1d40c:	480b      	ldr	r0, [pc, #44]	; (1d43c <net_buf_put+0x60>)
   1d40e:	f240 11fb 	movw	r1, #507	; 0x1fb
   1d412:	f00a fb15 	bl	27a40 <assert_post_action>
{
   1d416:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1d418:	6811      	ldr	r1, [r2, #0]
   1d41a:	b929      	cbnz	r1, 1d428 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1d41c:	4621      	mov	r1, r4
   1d41e:	4628      	mov	r0, r5
}
   1d420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1d424:	f004 b9c0 	b.w	217a8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1d428:	7953      	ldrb	r3, [r2, #5]
   1d42a:	f043 0301 	orr.w	r3, r3, #1
   1d42e:	7153      	strb	r3, [r2, #5]
   1d430:	460a      	mov	r2, r1
   1d432:	e7f1      	b.n	1d418 <net_buf_put+0x3c>
   1d434:	00030c04 	.word	0x00030c04
   1d438:	0002dcd3 	.word	0x0002dcd3
   1d43c:	00030b81 	.word	0x00030b81
   1d440:	0002f1b3 	.word	0x0002f1b3

0001d444 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d448:	4605      	mov	r5, r0
   1d44a:	b328      	cbz	r0, 1d498 <net_buf_unref+0x54>
   1d44c:	4e1c      	ldr	r6, [pc, #112]	; (1d4c0 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d44e:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1d450:	f04f 082c 	mov.w	r8, #44	; 0x2c
		struct net_buf *frags = buf->frags;
   1d454:	462c      	mov	r4, r5
   1d456:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1d458:	7923      	ldrb	r3, [r4, #4]
   1d45a:	3b01      	subs	r3, #1
   1d45c:	b2db      	uxtb	r3, r3
   1d45e:	7123      	strb	r3, [r4, #4]
   1d460:	b9c3      	cbnz	r3, 1d494 <net_buf_unref+0x50>
		if (buf->__buf) {
   1d462:	6921      	ldr	r1, [r4, #16]
   1d464:	b159      	cbz	r1, 1d47e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d466:	7963      	ldrb	r3, [r4, #5]
   1d468:	079b      	lsls	r3, r3, #30
   1d46a:	d407      	bmi.n	1d47c <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   1d46c:	79a3      	ldrb	r3, [r4, #6]
   1d46e:	fb08 6303 	mla	r3, r8, r3, r6
   1d472:	4620      	mov	r0, r4
   1d474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d476:	681b      	ldr	r3, [r3, #0]
   1d478:	689b      	ldr	r3, [r3, #8]
   1d47a:	4798      	blx	r3
			buf->__buf = NULL;
   1d47c:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1d47e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d480:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1d482:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1d486:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1d488:	6a1b      	ldr	r3, [r3, #32]
   1d48a:	b19b      	cbz	r3, 1d4b4 <net_buf_unref+0x70>
			pool->destroy(buf);
   1d48c:	4620      	mov	r0, r4
   1d48e:	4798      	blx	r3
	while (buf) {
   1d490:	2d00      	cmp	r5, #0
   1d492:	d1df      	bne.n	1d454 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1d498:	490a      	ldr	r1, [pc, #40]	; (1d4c4 <net_buf_unref+0x80>)
   1d49a:	480b      	ldr	r0, [pc, #44]	; (1d4c8 <net_buf_unref+0x84>)
   1d49c:	4a0b      	ldr	r2, [pc, #44]	; (1d4cc <net_buf_unref+0x88>)
   1d49e:	f240 230a 	movw	r3, #522	; 0x20a
   1d4a2:	f00a f828 	bl	274f6 <printk>
}
   1d4a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d4aa:	4808      	ldr	r0, [pc, #32]	; (1d4cc <net_buf_unref+0x88>)
   1d4ac:	f240 210a 	movw	r1, #522	; 0x20a
   1d4b0:	f00a bac6 	b.w	27a40 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1d4b4:	4621      	mov	r1, r4
   1d4b6:	fb00 6008 	mla	r0, r0, r8, r6
   1d4ba:	f00f f8d4 	bl	2c666 <k_queue_prepend>
}
   1d4be:	e7e7      	b.n	1d490 <net_buf_unref+0x4c>
   1d4c0:	20000928 	.word	0x20000928
   1d4c4:	0002f1b3 	.word	0x0002f1b3
   1d4c8:	0002dcd3 	.word	0x0002dcd3
   1d4cc:	00030b81 	.word	0x00030b81

0001d4d0 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1d4d0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d4d2:	4604      	mov	r4, r0
   1d4d4:	b958      	cbnz	r0, 1d4ee <net_buf_ref+0x1e>
   1d4d6:	4908      	ldr	r1, [pc, #32]	; (1d4f8 <net_buf_ref+0x28>)
   1d4d8:	4808      	ldr	r0, [pc, #32]	; (1d4fc <net_buf_ref+0x2c>)
   1d4da:	4a09      	ldr	r2, [pc, #36]	; (1d500 <net_buf_ref+0x30>)
   1d4dc:	f240 2339 	movw	r3, #569	; 0x239
   1d4e0:	f00a f809 	bl	274f6 <printk>
   1d4e4:	4806      	ldr	r0, [pc, #24]	; (1d500 <net_buf_ref+0x30>)
   1d4e6:	f240 2139 	movw	r1, #569	; 0x239
   1d4ea:	f00a faa9 	bl	27a40 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1d4ee:	7923      	ldrb	r3, [r4, #4]
   1d4f0:	3301      	adds	r3, #1
   1d4f2:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1d4f4:	4620      	mov	r0, r4
   1d4f6:	bd10      	pop	{r4, pc}
   1d4f8:	0002f1b3 	.word	0x0002f1b3
   1d4fc:	0002dcd3 	.word	0x0002dcd3
   1d500:	00030b81 	.word	0x00030b81

0001d504 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1d504:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d506:	4604      	mov	r4, r0
   1d508:	b958      	cbnz	r0, 1d522 <net_buf_frag_last+0x1e>
   1d50a:	4908      	ldr	r1, [pc, #32]	; (1d52c <net_buf_frag_last+0x28>)
   1d50c:	4808      	ldr	r0, [pc, #32]	; (1d530 <net_buf_frag_last+0x2c>)
   1d50e:	4a09      	ldr	r2, [pc, #36]	; (1d534 <net_buf_frag_last+0x30>)
   1d510:	f240 2376 	movw	r3, #630	; 0x276
   1d514:	f009 ffef 	bl	274f6 <printk>
   1d518:	4806      	ldr	r0, [pc, #24]	; (1d534 <net_buf_frag_last+0x30>)
   1d51a:	f240 2176 	movw	r1, #630	; 0x276
   1d51e:	f00a fa8f 	bl	27a40 <assert_post_action>

	while (buf->frags) {
   1d522:	4620      	mov	r0, r4
   1d524:	6824      	ldr	r4, [r4, #0]
   1d526:	2c00      	cmp	r4, #0
   1d528:	d1fb      	bne.n	1d522 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1d52a:	bd10      	pop	{r4, pc}
   1d52c:	0002f1b3 	.word	0x0002f1b3
   1d530:	0002dcd3 	.word	0x0002dcd3
   1d534:	00030b81 	.word	0x00030b81

0001d538 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1d538:	b538      	push	{r3, r4, r5, lr}
   1d53a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1d53c:	4604      	mov	r4, r0
   1d53e:	b958      	cbnz	r0, 1d558 <net_buf_frag_insert+0x20>
   1d540:	4910      	ldr	r1, [pc, #64]	; (1d584 <net_buf_frag_insert+0x4c>)
   1d542:	4811      	ldr	r0, [pc, #68]	; (1d588 <net_buf_frag_insert+0x50>)
   1d544:	4a11      	ldr	r2, [pc, #68]	; (1d58c <net_buf_frag_insert+0x54>)
   1d546:	f240 2381 	movw	r3, #641	; 0x281
   1d54a:	f009 ffd4 	bl	274f6 <printk>
   1d54e:	480f      	ldr	r0, [pc, #60]	; (1d58c <net_buf_frag_insert+0x54>)
   1d550:	f240 2181 	movw	r1, #641	; 0x281
   1d554:	f00a fa74 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1d558:	b95d      	cbnz	r5, 1d572 <net_buf_frag_insert+0x3a>
   1d55a:	490d      	ldr	r1, [pc, #52]	; (1d590 <net_buf_frag_insert+0x58>)
   1d55c:	480a      	ldr	r0, [pc, #40]	; (1d588 <net_buf_frag_insert+0x50>)
   1d55e:	4a0b      	ldr	r2, [pc, #44]	; (1d58c <net_buf_frag_insert+0x54>)
   1d560:	f240 2382 	movw	r3, #642	; 0x282
   1d564:	f009 ffc7 	bl	274f6 <printk>
   1d568:	4808      	ldr	r0, [pc, #32]	; (1d58c <net_buf_frag_insert+0x54>)
   1d56a:	f240 2182 	movw	r1, #642	; 0x282
   1d56e:	f00a fa67 	bl	27a40 <assert_post_action>

	if (parent->frags) {
   1d572:	6823      	ldr	r3, [r4, #0]
   1d574:	b123      	cbz	r3, 1d580 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1d576:	4628      	mov	r0, r5
   1d578:	f7ff ffc4 	bl	1d504 <net_buf_frag_last>
   1d57c:	6823      	ldr	r3, [r4, #0]
   1d57e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1d580:	6025      	str	r5, [r4, #0]
}
   1d582:	bd38      	pop	{r3, r4, r5, pc}
   1d584:	00030c09 	.word	0x00030c09
   1d588:	0002dcd3 	.word	0x0002dcd3
   1d58c:	00030b81 	.word	0x00030b81
   1d590:	00030c10 	.word	0x00030c10

0001d594 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1d594:	b538      	push	{r3, r4, r5, lr}
   1d596:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1d598:	460d      	mov	r5, r1
   1d59a:	b959      	cbnz	r1, 1d5b4 <net_buf_frag_add+0x20>
   1d59c:	490c      	ldr	r1, [pc, #48]	; (1d5d0 <net_buf_frag_add+0x3c>)
   1d59e:	480d      	ldr	r0, [pc, #52]	; (1d5d4 <net_buf_frag_add+0x40>)
   1d5a0:	4a0d      	ldr	r2, [pc, #52]	; (1d5d8 <net_buf_frag_add+0x44>)
   1d5a2:	f240 238d 	movw	r3, #653	; 0x28d
   1d5a6:	f009 ffa6 	bl	274f6 <printk>
   1d5aa:	480b      	ldr	r0, [pc, #44]	; (1d5d8 <net_buf_frag_add+0x44>)
   1d5ac:	f240 218d 	movw	r1, #653	; 0x28d
   1d5b0:	f00a fa46 	bl	27a40 <assert_post_action>

	if (!head) {
   1d5b4:	b924      	cbnz	r4, 1d5c0 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   1d5b6:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1d5b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1d5bc:	f7ff bf88 	b.w	1d4d0 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1d5c0:	4620      	mov	r0, r4
   1d5c2:	f7ff ff9f 	bl	1d504 <net_buf_frag_last>
   1d5c6:	4629      	mov	r1, r5
   1d5c8:	f7ff ffb6 	bl	1d538 <net_buf_frag_insert>
}
   1d5cc:	4620      	mov	r0, r4
   1d5ce:	bd38      	pop	{r3, r4, r5, pc}
   1d5d0:	00030c10 	.word	0x00030c10
   1d5d4:	0002dcd3 	.word	0x0002dcd3
   1d5d8:	00030b81 	.word	0x00030b81

0001d5dc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1d5dc:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d5de:	6882      	ldr	r2, [r0, #8]
   1d5e0:	6803      	ldr	r3, [r0, #0]
   1d5e2:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d5e4:	4299      	cmp	r1, r3
{
   1d5e6:	4604      	mov	r4, r0
   1d5e8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d5ea:	d90b      	bls.n	1d604 <net_buf_simple_push+0x28>
   1d5ec:	4909      	ldr	r1, [pc, #36]	; (1d614 <net_buf_simple_push+0x38>)
   1d5ee:	480a      	ldr	r0, [pc, #40]	; (1d618 <net_buf_simple_push+0x3c>)
   1d5f0:	4a0a      	ldr	r2, [pc, #40]	; (1d61c <net_buf_simple_push+0x40>)
   1d5f2:	f240 4311 	movw	r3, #1041	; 0x411
   1d5f6:	f009 ff7e 	bl	274f6 <printk>
   1d5fa:	4808      	ldr	r0, [pc, #32]	; (1d61c <net_buf_simple_push+0x40>)
   1d5fc:	f240 4111 	movw	r1, #1041	; 0x411
   1d600:	f00a fa1e 	bl	27a40 <assert_post_action>
	buf->data -= len;
   1d604:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1d606:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1d608:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1d60a:	440d      	add	r5, r1
	buf->data -= len;
   1d60c:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1d60e:	80a5      	strh	r5, [r4, #4]
}
   1d610:	bd38      	pop	{r3, r4, r5, pc}
   1d612:	bf00      	nop
   1d614:	00030c25 	.word	0x00030c25
   1d618:	0002dcd3 	.word	0x0002dcd3
   1d61c:	00030b81 	.word	0x00030b81

0001d620 <net_buf_simple_pull>:
{
   1d620:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1d622:	8883      	ldrh	r3, [r0, #4]
   1d624:	428b      	cmp	r3, r1
{
   1d626:	4604      	mov	r4, r0
   1d628:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d62a:	d20b      	bcs.n	1d644 <net_buf_simple_pull+0x24>
   1d62c:	4909      	ldr	r1, [pc, #36]	; (1d654 <net_buf_simple_pull+0x34>)
   1d62e:	480a      	ldr	r0, [pc, #40]	; (1d658 <net_buf_simple_pull+0x38>)
   1d630:	4a0a      	ldr	r2, [pc, #40]	; (1d65c <net_buf_simple_pull+0x3c>)
   1d632:	f240 4371 	movw	r3, #1137	; 0x471
   1d636:	f009 ff5e 	bl	274f6 <printk>
   1d63a:	4808      	ldr	r0, [pc, #32]	; (1d65c <net_buf_simple_pull+0x3c>)
   1d63c:	f240 4171 	movw	r1, #1137	; 0x471
   1d640:	f00a f9fe 	bl	27a40 <assert_post_action>
	buf->len -= len;
   1d644:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1d646:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1d648:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1d64a:	4428      	add	r0, r5
	buf->len -= len;
   1d64c:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1d64e:	6020      	str	r0, [r4, #0]
}
   1d650:	bd38      	pop	{r3, r4, r5, pc}
   1d652:	bf00      	nop
   1d654:	00030c15 	.word	0x00030c15
   1d658:	0002dcd3 	.word	0x0002dcd3
   1d65c:	00030b81 	.word	0x00030b81

0001d660 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1d660:	8883      	ldrh	r3, [r0, #4]
   1d662:	428b      	cmp	r3, r1
{
   1d664:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1d666:	6806      	ldr	r6, [r0, #0]
{
   1d668:	4604      	mov	r4, r0
   1d66a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d66c:	d20b      	bcs.n	1d686 <net_buf_simple_pull_mem+0x26>
   1d66e:	490a      	ldr	r1, [pc, #40]	; (1d698 <net_buf_simple_pull_mem+0x38>)
   1d670:	480a      	ldr	r0, [pc, #40]	; (1d69c <net_buf_simple_pull_mem+0x3c>)
   1d672:	4a0b      	ldr	r2, [pc, #44]	; (1d6a0 <net_buf_simple_pull_mem+0x40>)
   1d674:	f240 437d 	movw	r3, #1149	; 0x47d
   1d678:	f009 ff3d 	bl	274f6 <printk>
   1d67c:	4808      	ldr	r0, [pc, #32]	; (1d6a0 <net_buf_simple_pull_mem+0x40>)
   1d67e:	f240 417d 	movw	r1, #1149	; 0x47d
   1d682:	f00a f9dd 	bl	27a40 <assert_post_action>
	buf->len -= len;
   1d686:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1d688:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1d68a:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1d68c:	4429      	add	r1, r5
	buf->len -= len;
   1d68e:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1d690:	6021      	str	r1, [r4, #0]
}
   1d692:	4630      	mov	r0, r6
   1d694:	bd70      	pop	{r4, r5, r6, pc}
   1d696:	bf00      	nop
   1d698:	00030c15 	.word	0x00030c15
   1d69c:	0002dcd3 	.word	0x0002dcd3
   1d6a0:	00030b81 	.word	0x00030b81

0001d6a4 <net_buf_simple_add>:
{
   1d6a4:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1d6a6:	6803      	ldr	r3, [r0, #0]
   1d6a8:	8886      	ldrh	r6, [r0, #4]
   1d6aa:	4604      	mov	r4, r0
   1d6ac:	460d      	mov	r5, r1
   1d6ae:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d6b0:	f00e f984 	bl	2b9bc <net_buf_simple_tailroom>
   1d6b4:	4288      	cmp	r0, r1
   1d6b6:	d20b      	bcs.n	1d6d0 <net_buf_simple_add+0x2c>
   1d6b8:	4908      	ldr	r1, [pc, #32]	; (1d6dc <net_buf_simple_add+0x38>)
   1d6ba:	4809      	ldr	r0, [pc, #36]	; (1d6e0 <net_buf_simple_add+0x3c>)
   1d6bc:	4a09      	ldr	r2, [pc, #36]	; (1d6e4 <net_buf_simple_add+0x40>)
   1d6be:	f240 3322 	movw	r3, #802	; 0x322
   1d6c2:	f009 ff18 	bl	274f6 <printk>
   1d6c6:	4807      	ldr	r0, [pc, #28]	; (1d6e4 <net_buf_simple_add+0x40>)
   1d6c8:	f240 3122 	movw	r1, #802	; 0x322
   1d6cc:	f00a f9b8 	bl	27a40 <assert_post_action>
	buf->len += len;
   1d6d0:	88a1      	ldrh	r1, [r4, #4]
   1d6d2:	440d      	add	r5, r1
   1d6d4:	80a5      	strh	r5, [r4, #4]
}
   1d6d6:	4630      	mov	r0, r6
   1d6d8:	bd70      	pop	{r4, r5, r6, pc}
   1d6da:	bf00      	nop
   1d6dc:	00030c49 	.word	0x00030c49
   1d6e0:	0002dcd3 	.word	0x0002dcd3
   1d6e4:	00030b81 	.word	0x00030b81

0001d6e8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d6e8:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d6ea:	6905      	ldr	r5, [r0, #16]
{
   1d6ec:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d6ee:	460c      	mov	r4, r1
   1d6f0:	b961      	cbnz	r1, 1d70c <gpio_nrfx_manage_callback+0x24>
   1d6f2:	4922      	ldr	r1, [pc, #136]	; (1d77c <gpio_nrfx_manage_callback+0x94>)
   1d6f4:	4a22      	ldr	r2, [pc, #136]	; (1d780 <gpio_nrfx_manage_callback+0x98>)
   1d6f6:	4823      	ldr	r0, [pc, #140]	; (1d784 <gpio_nrfx_manage_callback+0x9c>)
   1d6f8:	2324      	movs	r3, #36	; 0x24
   1d6fa:	f009 fefc 	bl	274f6 <printk>
   1d6fe:	4822      	ldr	r0, [pc, #136]	; (1d788 <gpio_nrfx_manage_callback+0xa0>)
   1d700:	f009 fef9 	bl	274f6 <printk>
   1d704:	481e      	ldr	r0, [pc, #120]	; (1d780 <gpio_nrfx_manage_callback+0x98>)
   1d706:	2124      	movs	r1, #36	; 0x24
   1d708:	f00a f99a 	bl	27a40 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d70c:	6863      	ldr	r3, [r4, #4]
   1d70e:	b963      	cbnz	r3, 1d72a <gpio_nrfx_manage_callback+0x42>
   1d710:	491e      	ldr	r1, [pc, #120]	; (1d78c <gpio_nrfx_manage_callback+0xa4>)
   1d712:	4a1b      	ldr	r2, [pc, #108]	; (1d780 <gpio_nrfx_manage_callback+0x98>)
   1d714:	481b      	ldr	r0, [pc, #108]	; (1d784 <gpio_nrfx_manage_callback+0x9c>)
   1d716:	2325      	movs	r3, #37	; 0x25
   1d718:	f009 feed 	bl	274f6 <printk>
   1d71c:	481c      	ldr	r0, [pc, #112]	; (1d790 <gpio_nrfx_manage_callback+0xa8>)
   1d71e:	f009 feea 	bl	274f6 <printk>
   1d722:	4817      	ldr	r0, [pc, #92]	; (1d780 <gpio_nrfx_manage_callback+0x98>)
   1d724:	2125      	movs	r1, #37	; 0x25
   1d726:	f00a f98b 	bl	27a40 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1d72a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d72c:	b15b      	cbz	r3, 1d746 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d72e:	2200      	movs	r2, #0
   1d730:	429c      	cmp	r4, r3
   1d732:	d113      	bne.n	1d75c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1d734:	6823      	ldr	r3, [r4, #0]
   1d736:	b95a      	cbnz	r2, 1d750 <gpio_nrfx_manage_callback+0x68>
   1d738:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1d73a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d73c:	4294      	cmp	r4, r2
   1d73e:	d100      	bne.n	1d742 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1d740:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1d742:	2300      	movs	r3, #0
   1d744:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d746:	b976      	cbnz	r6, 1d766 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d748:	2000      	movs	r0, #0
				     callback, set);
}
   1d74a:	bd70      	pop	{r4, r5, r6, pc}
   1d74c:	460b      	mov	r3, r1
   1d74e:	e7ef      	b.n	1d730 <gpio_nrfx_manage_callback+0x48>
   1d750:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d752:	68ab      	ldr	r3, [r5, #8]
   1d754:	429c      	cmp	r4, r3
	list->tail = node;
   1d756:	bf08      	it	eq
   1d758:	60aa      	streq	r2, [r5, #8]
}
   1d75a:	e7f2      	b.n	1d742 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d75c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d75e:	461a      	mov	r2, r3
   1d760:	2900      	cmp	r1, #0
   1d762:	d1f3      	bne.n	1d74c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1d764:	b13e      	cbz	r6, 1d776 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1d766:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1d768:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d76a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1d76c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d76e:	2800      	cmp	r0, #0
   1d770:	d1ea      	bne.n	1d748 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1d772:	60ac      	str	r4, [r5, #8]
}
   1d774:	e7e9      	b.n	1d74a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1d776:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d77a:	e7e6      	b.n	1d74a <gpio_nrfx_manage_callback+0x62>
   1d77c:	0002db93 	.word	0x0002db93
   1d780:	00030c75 	.word	0x00030c75
   1d784:	0002dcd3 	.word	0x0002dcd3
   1d788:	00030ca2 	.word	0x00030ca2
   1d78c:	00030cb1 	.word	0x00030cb1
   1d790:	00030cc3 	.word	0x00030cc3

0001d794 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1d794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d798:	6804      	ldr	r4, [r0, #0]
{
   1d79a:	460f      	mov	r7, r1
   1d79c:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d79e:	b34c      	cbz	r4, 1d7f4 <gpio_fire_callbacks+0x60>
	return node->next;
   1d7a0:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1d7a2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1d7fc <gpio_fire_callbacks+0x68>
   1d7a6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d800 <gpio_fire_callbacks+0x6c>
   1d7aa:	f8df a058 	ldr.w	sl, [pc, #88]	; 1d804 <gpio_fire_callbacks+0x70>
   1d7ae:	2d00      	cmp	r5, #0
   1d7b0:	bf38      	it	cc
   1d7b2:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   1d7b4:	68a3      	ldr	r3, [r4, #8]
   1d7b6:	421e      	tst	r6, r3
   1d7b8:	d014      	beq.n	1d7e4 <gpio_fire_callbacks+0x50>
			__ASSERT(cb->handler, "No callback handler!");
   1d7ba:	6863      	ldr	r3, [r4, #4]
   1d7bc:	b963      	cbnz	r3, 1d7d8 <gpio_fire_callbacks+0x44>
   1d7be:	4649      	mov	r1, r9
   1d7c0:	2345      	movs	r3, #69	; 0x45
   1d7c2:	4642      	mov	r2, r8
   1d7c4:	4650      	mov	r0, sl
   1d7c6:	f009 fe96 	bl	274f6 <printk>
   1d7ca:	480b      	ldr	r0, [pc, #44]	; (1d7f8 <gpio_fire_callbacks+0x64>)
   1d7cc:	f009 fe93 	bl	274f6 <printk>
   1d7d0:	2145      	movs	r1, #69	; 0x45
   1d7d2:	4640      	mov	r0, r8
   1d7d4:	f00a f934 	bl	27a40 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d7d8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1d7dc:	4621      	mov	r1, r4
   1d7de:	4032      	ands	r2, r6
   1d7e0:	4638      	mov	r0, r7
   1d7e2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d7e4:	b135      	cbz	r5, 1d7f4 <gpio_fire_callbacks+0x60>
   1d7e6:	682b      	ldr	r3, [r5, #0]
   1d7e8:	2b00      	cmp	r3, #0
   1d7ea:	bf38      	it	cc
   1d7ec:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d7ee:	462c      	mov	r4, r5
   1d7f0:	461d      	mov	r5, r3
   1d7f2:	e7df      	b.n	1d7b4 <gpio_fire_callbacks+0x20>
		}
	}
}
   1d7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d7f8:	00030cc3 	.word	0x00030cc3
   1d7fc:	00030c75 	.word	0x00030c75
   1d800:	00030cda 	.word	0x00030cda
   1d804:	0002dcd3 	.word	0x0002dcd3

0001d808 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d808:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d80a:	0953      	lsrs	r3, r2, #5
{
   1d80c:	b510      	push	{r4, lr}
   1d80e:	4604      	mov	r4, r0
    switch (port)
   1d810:	d02c      	beq.n	1d86c <nrf_gpio_pin_port_decode+0x64>
   1d812:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1d814:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d818:	bf18      	it	ne
   1d81a:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1d81c:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d820:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d822:	07db      	lsls	r3, r3, #31
   1d824:	d40b      	bmi.n	1d83e <nrf_gpio_pin_port_decode+0x36>
   1d826:	4914      	ldr	r1, [pc, #80]	; (1d878 <nrf_gpio_pin_port_decode+0x70>)
   1d828:	4814      	ldr	r0, [pc, #80]	; (1d87c <nrf_gpio_pin_port_decode+0x74>)
   1d82a:	4a15      	ldr	r2, [pc, #84]	; (1d880 <nrf_gpio_pin_port_decode+0x78>)
   1d82c:	f44f 7305 	mov.w	r3, #532	; 0x214
   1d830:	f009 fe61 	bl	274f6 <printk>
   1d834:	4812      	ldr	r0, [pc, #72]	; (1d880 <nrf_gpio_pin_port_decode+0x78>)
   1d836:	f44f 7105 	mov.w	r1, #532	; 0x214
   1d83a:	f00a f901 	bl	27a40 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1d83e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1d840:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d844:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1d846:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d848:	d00d      	beq.n	1d866 <nrf_gpio_pin_port_decode+0x5e>
   1d84a:	2b01      	cmp	r3, #1
   1d84c:	d011      	beq.n	1d872 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   1d84e:	490d      	ldr	r1, [pc, #52]	; (1d884 <nrf_gpio_pin_port_decode+0x7c>)
   1d850:	480a      	ldr	r0, [pc, #40]	; (1d87c <nrf_gpio_pin_port_decode+0x74>)
   1d852:	4a0b      	ldr	r2, [pc, #44]	; (1d880 <nrf_gpio_pin_port_decode+0x78>)
   1d854:	f240 2319 	movw	r3, #537	; 0x219
   1d858:	f009 fe4d 	bl	274f6 <printk>
   1d85c:	4808      	ldr	r0, [pc, #32]	; (1d880 <nrf_gpio_pin_port_decode+0x78>)
   1d85e:	f240 2119 	movw	r1, #537	; 0x219
   1d862:	f00a f8ed 	bl	27a40 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d866:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1d86a:	bd10      	pop	{r4, pc}
    switch (port)
   1d86c:	f04f 33ff 	mov.w	r3, #4294967295
   1d870:	e7d4      	b.n	1d81c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1d872:	4805      	ldr	r0, [pc, #20]	; (1d888 <nrf_gpio_pin_port_decode+0x80>)
   1d874:	e7f9      	b.n	1d86a <nrf_gpio_pin_port_decode+0x62>
   1d876:	bf00      	nop
   1d878:	00030d19 	.word	0x00030d19
   1d87c:	0002dcd3 	.word	0x0002dcd3
   1d880:	00030ce6 	.word	0x00030ce6
   1d884:	00032142 	.word	0x00032142
   1d888:	50000300 	.word	0x50000300

0001d88c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d88c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d88e:	4b09      	ldr	r3, [pc, #36]	; (1d8b4 <gpio_nrfx_init+0x28>)
   1d890:	781a      	ldrb	r2, [r3, #0]
   1d892:	b96a      	cbnz	r2, 1d8b0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1d894:	2101      	movs	r1, #1
   1d896:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d898:	2006      	movs	r0, #6
   1d89a:	2105      	movs	r1, #5
   1d89c:	f7f6 fcfa 	bl	14294 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d8a0:	2006      	movs	r0, #6
   1d8a2:	f7f6 fcc5 	bl	14230 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d8a6:	4b04      	ldr	r3, [pc, #16]	; (1d8b8 <gpio_nrfx_init+0x2c>)
   1d8a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d8ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d8b0:	2000      	movs	r0, #0
   1d8b2:	bd08      	pop	{r3, pc}
   1d8b4:	20003eb2 	.word	0x20003eb2
   1d8b8:	40006000 	.word	0x40006000

0001d8bc <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1d8bc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1d8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   1d8c4:	6904      	ldr	r4, [r0, #16]
{
   1d8c6:	4607      	mov	r7, r0
   1d8c8:	460e      	mov	r6, r1
   1d8ca:	4690      	mov	r8, r2
   1d8cc:	4699      	mov	r9, r3
   1d8ce:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1d8d2:	f040 80ab 	bne.w	1da2c <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d8d6:	6843      	ldr	r3, [r0, #4]
   1d8d8:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d8da:	a801      	add	r0, sp, #4
   1d8dc:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   1d8e0:	9301      	str	r3, [sp, #4]
   1d8e2:	f7ff ff91 	bl	1d808 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d8e6:	9b01      	ldr	r3, [sp, #4]
   1d8e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d8ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d8f0:	07d8      	lsls	r0, r3, #31
   1d8f2:	f100 80bb 	bmi.w	1da6c <gpio_nrfx_pin_interrupt_configure+0x1b0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d8f6:	68e3      	ldr	r3, [r4, #12]
   1d8f8:	2101      	movs	r1, #1
   1d8fa:	40b1      	lsls	r1, r6
   1d8fc:	4319      	orrs	r1, r3
   1d8fe:	6963      	ldr	r3, [r4, #20]
   1d900:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d902:	2101      	movs	r1, #1
   1d904:	40b1      	lsls	r1, r6
   1d906:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   1d90a:	bf0c      	ite	eq
   1d90c:	430b      	orreq	r3, r1
   1d90e:	438b      	bicne	r3, r1
   1d910:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d912:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d914:	4a57      	ldr	r2, [pc, #348]	; (1da74 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1d916:	f8d7 8010 	ldr.w	r8, [r7, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d91a:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   1d91e:	bf0c      	ite	eq
   1d920:	430b      	orreq	r3, r1
   1d922:	438b      	bicne	r3, r1
   1d924:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d926:	6923      	ldr	r3, [r4, #16]
   1d928:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1d92c:	bf0c      	ite	eq
   1d92e:	4319      	orreq	r1, r3
   1d930:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d934:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d936:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d938:	7a1b      	ldrb	r3, [r3, #8]
   1d93a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   1d93e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d942:	2000      	movs	r0, #0
   1d944:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d946:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1d94a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1d94e:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d952:	428d      	cmp	r5, r1
   1d954:	d175      	bne.n	1da42 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   1d956:	fa23 f100 	lsr.w	r1, r3, r0
   1d95a:	07c9      	lsls	r1, r1, #31
   1d95c:	d571      	bpl.n	1da42 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d95e:	0083      	lsls	r3, r0, #2
   1d960:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d964:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d968:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d96c:	f021 0101 	bic.w	r1, r1, #1
   1d970:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1d974:	2301      	movs	r3, #1
   1d976:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1d978:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1d97c:	b2c0      	uxtb	r0, r0
   1d97e:	f002 fdad 	bl	204dc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d982:	4628      	mov	r0, r5
   1d984:	2100      	movs	r1, #0
   1d986:	f00e f85b 	bl	2ba40 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1d98a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d98e:	40f0      	lsrs	r0, r6
   1d990:	f010 0001 	ands.w	r0, r0, #1
   1d994:	d047      	beq.n	1da26 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   1d996:	f8d8 0014 	ldr.w	r0, [r8, #20]
   1d99a:	40f0      	lsrs	r0, r6
   1d99c:	f010 0401 	ands.w	r4, r0, #1
   1d9a0:	d057      	beq.n	1da52 <gpio_nrfx_pin_interrupt_configure+0x196>
				if (data->double_edge & BIT(pin)) {
   1d9a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
   1d9a6:	40f3      	lsrs	r3, r6
   1d9a8:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d9aa:	bf5f      	itttt	pl
   1d9ac:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   1d9b0:	fa21 f606 	lsrpl.w	r6, r1, r6
   1d9b4:	f006 0601 	andpl.w	r6, r6, #1
   1d9b8:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d9bc:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d9be:	bf54      	ite	pl
   1d9c0:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1d9c2:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d9c4:	f002 fdac 	bl	20520 <nrfx_gpiote_channel_alloc>
   1d9c8:	4b2b      	ldr	r3, [pc, #172]	; (1da78 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   1d9ca:	4298      	cmp	r0, r3
   1d9cc:	d13e      	bne.n	1da4c <gpio_nrfx_pin_interrupt_configure+0x190>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1d9ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d9d2:	008b      	lsls	r3, r1, #2
   1d9d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d9d8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d9dc:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d9de:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d9e2:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1d9e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1d9ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d9ee:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d9f2:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1d9f6:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1d9f8:	008a      	lsls	r2, r1, #2
   1d9fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d9fe:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da02:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da06:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da08:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da0c:	6010      	str	r0, [r2, #0]
   1da0e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1da10:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1da14:	f042 0201 	orr.w	r2, r2, #1
   1da18:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1da1c:	4a15      	ldr	r2, [pc, #84]	; (1da74 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1da1e:	2301      	movs	r3, #1
   1da20:	408b      	lsls	r3, r1
   1da22:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1da26:	b003      	add	sp, #12
   1da28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1da2c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1da30:	f47f af61 	bne.w	1d8f6 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1da34:	2101      	movs	r1, #1
   1da36:	fa01 f306 	lsl.w	r3, r1, r6
   1da3a:	68e1      	ldr	r1, [r4, #12]
   1da3c:	ea21 0103 	bic.w	r1, r1, r3
   1da40:	e75d      	b.n	1d8fe <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1da42:	3001      	adds	r0, #1
   1da44:	2808      	cmp	r0, #8
   1da46:	f47f af7e 	bne.w	1d946 <gpio_nrfx_pin_interrupt_configure+0x8a>
   1da4a:	e79a      	b.n	1d982 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1da4c:	f06f 0012 	mvn.w	r0, #18
   1da50:	e7e9      	b.n	1da26 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1da52:	f8d8 1010 	ldr.w	r1, [r8, #16]
   1da56:	40f1      	lsrs	r1, r6
   1da58:	f001 0101 	and.w	r1, r1, #1
   1da5c:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1da60:	4628      	mov	r0, r5
   1da62:	b2c9      	uxtb	r1, r1
   1da64:	f00d ffec 	bl	2ba40 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1da68:	4620      	mov	r0, r4
   1da6a:	e7dc      	b.n	1da26 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   1da6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1da70:	e7d9      	b.n	1da26 <gpio_nrfx_pin_interrupt_configure+0x16a>
   1da72:	bf00      	nop
   1da74:	40006000 	.word	0x40006000
   1da78:	0bad0000 	.word	0x0bad0000

0001da7c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1da7c:	4b2e      	ldr	r3, [pc, #184]	; (1db38 <gpio_nrfx_config+0xbc>)
{
   1da7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1da80:	4c2e      	ldr	r4, [pc, #184]	; (1db3c <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da82:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1da84:	4013      	ands	r3, r2
   1da86:	42a3      	cmp	r3, r4
   1da88:	d045      	beq.n	1db16 <gpio_nrfx_config+0x9a>
   1da8a:	d80e      	bhi.n	1daaa <gpio_nrfx_config+0x2e>
   1da8c:	2b06      	cmp	r3, #6
   1da8e:	d044      	beq.n	1db1a <gpio_nrfx_config+0x9e>
   1da90:	d806      	bhi.n	1daa0 <gpio_nrfx_config+0x24>
   1da92:	2b00      	cmp	r3, #0
   1da94:	d041      	beq.n	1db1a <gpio_nrfx_config+0x9e>
   1da96:	2b02      	cmp	r3, #2
   1da98:	d041      	beq.n	1db1e <gpio_nrfx_config+0xa2>
   1da9a:	f06f 0015 	mvn.w	r0, #21
   1da9e:	e038      	b.n	1db12 <gpio_nrfx_config+0x96>
   1daa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1daa4:	d1f9      	bne.n	1da9a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   1daa6:	2401      	movs	r4, #1
   1daa8:	e009      	b.n	1dabe <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1daaa:	4c25      	ldr	r4, [pc, #148]	; (1db40 <gpio_nrfx_config+0xc4>)
   1daac:	42a3      	cmp	r3, r4
   1daae:	d038      	beq.n	1db22 <gpio_nrfx_config+0xa6>
   1dab0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1dab4:	d037      	beq.n	1db26 <gpio_nrfx_config+0xaa>
   1dab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1daba:	d1ee      	bne.n	1da9a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   1dabc:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1dabe:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1dac0:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   1dac4:	bf54      	ite	pl
   1dac6:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1daca:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1dacc:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1dad0:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1dad2:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1dad6:	d507      	bpl.n	1dae8 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1dad8:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dada:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1dade:	d524      	bpl.n	1db2a <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1dae0:	2301      	movs	r3, #1
   1dae2:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1dae4:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1dae8:	7a03      	ldrb	r3, [r0, #8]
   1daea:	f001 011f 	and.w	r1, r1, #31
   1daee:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1daf2:	a801      	add	r0, sp, #4
   1daf4:	9101      	str	r1, [sp, #4]
   1daf6:	f7ff fe87 	bl	1d808 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1dafa:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1dafc:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   1db00:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1db04:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1db08:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1db0c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1db10:	2000      	movs	r0, #0
}
   1db12:	b003      	add	sp, #12
   1db14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1db16:	2407      	movs	r4, #7
   1db18:	e7d1      	b.n	1dabe <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1db1a:	461c      	mov	r4, r3
   1db1c:	e7cf      	b.n	1dabe <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1db1e:	2404      	movs	r4, #4
   1db20:	e7cd      	b.n	1dabe <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   1db22:	2405      	movs	r4, #5
   1db24:	e7cb      	b.n	1dabe <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   1db26:	2403      	movs	r4, #3
   1db28:	e7c9      	b.n	1dabe <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1db2a:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1db2c:	bf42      	ittt	mi
   1db2e:	2301      	movmi	r3, #1
   1db30:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   1db32:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
   1db36:	e7d7      	b.n	1dae8 <gpio_nrfx_config+0x6c>
   1db38:	00f00006 	.word	0x00f00006
   1db3c:	00100006 	.word	0x00100006
   1db40:	00400002 	.word	0x00400002

0001db44 <gpiote_event_handler>:
{
   1db44:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1db46:	2400      	movs	r4, #0
{
   1db48:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1db4a:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1db4e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db52:	4e26      	ldr	r6, [pc, #152]	; (1dbec <gpiote_event_handler+0xa8>)
   1db54:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   1db56:	b15d      	cbz	r5, 1db70 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1db58:	a902      	add	r1, sp, #8
   1db5a:	4825      	ldr	r0, [pc, #148]	; (1dbf0 <gpiote_event_handler+0xac>)
   1db5c:	f00d ff83 	bl	2ba66 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1db60:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   1db62:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1db64:	4823      	ldr	r0, [pc, #140]	; (1dbf4 <gpiote_event_handler+0xb0>)
   1db66:	f00d ff7e 	bl	2ba66 <check_level_trigger_pins>
		fired_triggers[1] =
   1db6a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1db6c:	6034      	str	r4, [r6, #0]
   1db6e:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   1db70:	4c21      	ldr	r4, [pc, #132]	; (1dbf8 <gpiote_event_handler+0xb4>)
{
   1db72:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1db74:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1db76:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1db78:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   1db7c:	fa06 f102 	lsl.w	r1, r6, r2
   1db80:	4219      	tst	r1, r3
   1db82:	d01b      	beq.n	1dbbc <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db84:	0091      	lsls	r1, r2, #2
   1db86:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1db8a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1db8e:	680b      	ldr	r3, [r1, #0]
   1db90:	b1a3      	cbz	r3, 1dbbc <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1db92:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1db96:	af04      	add	r7, sp, #16
   1db98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1db9c:	f8c1 c000 	str.w	ip, [r1]
   1dba0:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1dba4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1dba8:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1dbac:	f850 7c10 	ldr.w	r7, [r0, #-16]
   1dbb0:	fa06 f303 	lsl.w	r3, r6, r3
   1dbb4:	433b      	orrs	r3, r7
   1dbb6:	f840 3c10 	str.w	r3, [r0, #-16]
   1dbba:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dbbc:	3201      	adds	r2, #1
   1dbbe:	2a08      	cmp	r2, #8
   1dbc0:	d1da      	bne.n	1db78 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   1dbc2:	9a00      	ldr	r2, [sp, #0]
   1dbc4:	b11a      	cbz	r2, 1dbce <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   1dbc6:	490a      	ldr	r1, [pc, #40]	; (1dbf0 <gpiote_event_handler+0xac>)
   1dbc8:	480c      	ldr	r0, [pc, #48]	; (1dbfc <gpiote_event_handler+0xb8>)
   1dbca:	f7ff fde3 	bl	1d794 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1dbce:	9a01      	ldr	r2, [sp, #4]
   1dbd0:	b11a      	cbz	r2, 1dbda <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   1dbd2:	4908      	ldr	r1, [pc, #32]	; (1dbf4 <gpiote_event_handler+0xb0>)
   1dbd4:	480a      	ldr	r0, [pc, #40]	; (1dc00 <gpiote_event_handler+0xbc>)
   1dbd6:	f7ff fddd 	bl	1d794 <gpio_fire_callbacks>
	if (port_event) {
   1dbda:	b12d      	cbz	r5, 1dbe8 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1dbdc:	4804      	ldr	r0, [pc, #16]	; (1dbf0 <gpiote_event_handler+0xac>)
   1dbde:	f00d ff86 	bl	2baee <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1dbe2:	4804      	ldr	r0, [pc, #16]	; (1dbf4 <gpiote_event_handler+0xb0>)
   1dbe4:	f00d ff83 	bl	2baee <cfg_level_pins>
}
   1dbe8:	b005      	add	sp, #20
   1dbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dbec:	4000617c 	.word	0x4000617c
   1dbf0:	0002ca3c 	.word	0x0002ca3c
   1dbf4:	0002ca54 	.word	0x0002ca54
   1dbf8:	40006000 	.word	0x40006000
   1dbfc:	20003144 	.word	0x20003144
   1dc00:	20003160 	.word	0x20003160

0001dc04 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1dc04:	4b02      	ldr	r3, [pc, #8]	; (1dc10 <flash_nrf_pages_layout+0xc>)
   1dc06:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1dc08:	2301      	movs	r3, #1
   1dc0a:	6013      	str	r3, [r2, #0]
}
   1dc0c:	4770      	bx	lr
   1dc0e:	bf00      	nop
   1dc10:	2000317c 	.word	0x2000317c

0001dc14 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1dc14:	4800      	ldr	r0, [pc, #0]	; (1dc18 <flash_nrf_get_parameters+0x4>)
   1dc16:	4770      	bx	lr
   1dc18:	0002d66c 	.word	0x0002d66c

0001dc1c <flash_nrf_read>:
{
   1dc1c:	b570      	push	{r4, r5, r6, lr}
   1dc1e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1dc20:	4628      	mov	r0, r5
   1dc22:	4619      	mov	r1, r3
{
   1dc24:	4616      	mov	r6, r2
   1dc26:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1dc28:	f00d ff87 	bl	2bb3a <is_regular_addr_valid>
   1dc2c:	b970      	cbnz	r0, 1dc4c <flash_nrf_read+0x30>
   1dc2e:	4a0c      	ldr	r2, [pc, #48]	; (1dc60 <flash_nrf_read+0x44>)
   1dc30:	4b0c      	ldr	r3, [pc, #48]	; (1dc64 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1dc32:	480d      	ldr	r0, [pc, #52]	; (1dc68 <flash_nrf_read+0x4c>)
   1dc34:	1a9b      	subs	r3, r3, r2
   1dc36:	08db      	lsrs	r3, r3, #3
   1dc38:	019b      	lsls	r3, r3, #6
   1dc3a:	f043 0301 	orr.w	r3, r3, #1
   1dc3e:	4622      	mov	r2, r4
   1dc40:	4629      	mov	r1, r5
   1dc42:	f009 ff4c 	bl	27ade <log_2>
		return -EINVAL;
   1dc46:	f06f 0015 	mvn.w	r0, #21
}
   1dc4a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1dc4c:	b134      	cbz	r4, 1dc5c <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1dc4e:	4622      	mov	r2, r4
   1dc50:	4629      	mov	r1, r5
   1dc52:	4630      	mov	r0, r6
   1dc54:	f00b ff01 	bl	29a5a <memcpy>
	return 0;
   1dc58:	2000      	movs	r0, #0
   1dc5a:	e7f6      	b.n	1dc4a <flash_nrf_read+0x2e>
		return 0;
   1dc5c:	4620      	mov	r0, r4
   1dc5e:	e7f4      	b.n	1dc4a <flash_nrf_read+0x2e>
   1dc60:	0002ccb8 	.word	0x0002ccb8
   1dc64:	0002cd48 	.word	0x0002cd48
   1dc68:	00030d4a 	.word	0x00030d4a

0001dc6c <restore_pofwarn.part.0>:
	}

	return 0;
}

static void restore_pofwarn(void)
   1dc6c:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   1dc6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1dc72:	2001      	movs	r0, #1
   1dc74:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1dc78:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1dc7c:	f00d ff70 	bl	2bb60 <nrf_power_pofcon_set.constprop.0>
		pofcon_enabled = false;
   1dc80:	4b01      	ldr	r3, [pc, #4]	; (1dc88 <restore_pofwarn.part.0+0x1c>)
   1dc82:	2200      	movs	r2, #0
   1dc84:	701a      	strb	r2, [r3, #0]
	}
}
   1dc86:	bd08      	pop	{r3, pc}
   1dc88:	20003eb3 	.word	0x20003eb3

0001dc8c <suspend_pofwarn.part.0>:
static int suspend_pofwarn(void)
   1dc8c:	b508      	push	{r3, lr}
   1dc8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dc92:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
	if (enabled) {
   1dc96:	f011 0001 	ands.w	r0, r1, #1
   1dc9a:	d00c      	beq.n	1dcb6 <suspend_pofwarn.part.0+0x2a>
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1dc9c:	2000      	movs	r0, #0
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   1dc9e:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1dca2:	f00d ff5d 	bl	2bb60 <nrf_power_pofcon_set.constprop.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dca6:	4b06      	ldr	r3, [pc, #24]	; (1dcc0 <suspend_pofwarn.part.0+0x34>)
   1dca8:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1dcaa:	b128      	cbz	r0, 1dcb8 <suspend_pofwarn.part.0+0x2c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1dcac:	2001      	movs	r0, #1
   1dcae:	f00d ff57 	bl	2bb60 <nrf_power_pofcon_set.constprop.0>
			return -ECANCELED;
   1dcb2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1dcb6:	bd08      	pop	{r3, pc}
		pofcon_enabled = enabled;
   1dcb8:	4b02      	ldr	r3, [pc, #8]	; (1dcc4 <suspend_pofwarn.part.0+0x38>)
   1dcba:	2201      	movs	r2, #1
   1dcbc:	701a      	strb	r2, [r3, #0]
   1dcbe:	e7fa      	b.n	1dcb6 <suspend_pofwarn.part.0+0x2a>
   1dcc0:	40000108 	.word	0x40000108
   1dcc4:	20003eb3 	.word	0x20003eb3

0001dcc8 <erase_op>:
{
   1dcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dccc:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dcce:	f00e fbfa 	bl	2c4c6 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1dcd2:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dcd4:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1dcd6:	b10b      	cbz	r3, 1dcdc <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   1dcd8:	f00e fbcb 	bl	2c472 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1dcdc:	4f16      	ldr	r7, [pc, #88]	; (1dd38 <erase_op+0x70>)
	if (pofcon_enabled) {
   1dcde:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1dd3c <erase_op+0x74>
{
   1dce2:	2600      	movs	r6, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1dce4:	683b      	ldr	r3, [r7, #0]
   1dce6:	2b08      	cmp	r3, #8
   1dce8:	d019      	beq.n	1dd1e <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1dcea:	6860      	ldr	r0, [r4, #4]
   1dcec:	f002 fc50 	bl	20590 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1dcf0:	68a3      	ldr	r3, [r4, #8]
   1dcf2:	1b5b      	subs	r3, r3, r5
   1dcf4:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1dcf6:	6863      	ldr	r3, [r4, #4]
   1dcf8:	442b      	add	r3, r5
   1dcfa:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1dcfc:	f898 3000 	ldrb.w	r3, [r8]
   1dd00:	b10b      	cbz	r3, 1dd06 <erase_op+0x3e>
   1dd02:	f7ff ffb3 	bl	1dc6c <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1dd06:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1dd08:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1dd0a:	b97b      	cbnz	r3, 1dd2c <erase_op+0x64>
	} while (e_ctx->len > 0);
   1dd0c:	68a3      	ldr	r3, [r4, #8]
   1dd0e:	2b00      	cmp	r3, #0
   1dd10:	d1e8      	bne.n	1dce4 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1dd12:	68a0      	ldr	r0, [r4, #8]
   1dd14:	3800      	subs	r0, #0
   1dd16:	bf18      	it	ne
   1dd18:	2001      	movne	r0, #1
}
   1dd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   1dd1e:	f7ff ffb5 	bl	1dc8c <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   1dd22:	2800      	cmp	r0, #0
   1dd24:	d0e1      	beq.n	1dcea <erase_op+0x22>
			return -ECANCELED;
   1dd26:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1dd2a:	e7f6      	b.n	1dd1a <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   1dd2c:	4630      	mov	r0, r6
   1dd2e:	f002 fab3 	bl	20298 <nrf_flash_sync_check_time_limit>
   1dd32:	2800      	cmp	r0, #0
   1dd34:	d0ea      	beq.n	1dd0c <erase_op+0x44>
   1dd36:	e7ec      	b.n	1dd12 <erase_op+0x4a>
   1dd38:	10000130 	.word	0x10000130
   1dd3c:	20003eb3 	.word	0x20003eb3

0001dd40 <flash_nrf_erase>:
{
   1dd40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd42:	b087      	sub	sp, #28
   1dd44:	460e      	mov	r6, r1
   1dd46:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dd48:	f00e fbbd 	bl	2c4c6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1dd4c:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dd4e:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1dd50:	4630      	mov	r0, r6
   1dd52:	f00d fef2 	bl	2bb3a <is_regular_addr_valid>
   1dd56:	b388      	cbz	r0, 1ddbc <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1dd58:	fbb6 f3f7 	udiv	r3, r6, r7
   1dd5c:	fb07 6313 	mls	r3, r7, r3, r6
   1dd60:	b923      	cbnz	r3, 1dd6c <flash_nrf_erase+0x2c>
   1dd62:	fbb5 f4f7 	udiv	r4, r5, r7
   1dd66:	fb07 5414 	mls	r4, r7, r4, r5
   1dd6a:	b184      	cbz	r4, 1dd8e <flash_nrf_erase+0x4e>
   1dd6c:	4a25      	ldr	r2, [pc, #148]	; (1de04 <flash_nrf_erase+0xc4>)
   1dd6e:	4b26      	ldr	r3, [pc, #152]	; (1de08 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1dd70:	4826      	ldr	r0, [pc, #152]	; (1de0c <flash_nrf_erase+0xcc>)
   1dd72:	1a9b      	subs	r3, r3, r2
   1dd74:	08db      	lsrs	r3, r3, #3
   1dd76:	019b      	lsls	r3, r3, #6
   1dd78:	f043 0301 	orr.w	r3, r3, #1
   1dd7c:	462a      	mov	r2, r5
   1dd7e:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1dd80:	f009 fead 	bl	27ade <log_2>
		return -EINVAL;
   1dd84:	f06f 0415 	mvn.w	r4, #21
}
   1dd88:	4620      	mov	r0, r4
   1dd8a:	b007      	add	sp, #28
   1dd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1dd8e:	42af      	cmp	r7, r5
   1dd90:	d8fa      	bhi.n	1dd88 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1dd92:	f04f 33ff 	mov.w	r3, #4294967295
   1dd96:	f04f 32ff 	mov.w	r2, #4294967295
   1dd9a:	481d      	ldr	r0, [pc, #116]	; (1de10 <flash_nrf_erase+0xd0>)
   1dd9c:	f003 fe12 	bl	219c4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1dda0:	f00e fb65 	bl	2c46e <nrf_flash_sync_is_required>
   1dda4:	ab02      	add	r3, sp, #8
   1dda6:	4601      	mov	r1, r0
   1dda8:	b998      	cbnz	r0, 1ddd2 <flash_nrf_erase+0x92>
	struct flash_context context = {
   1ddaa:	2210      	movs	r2, #16
   1ddac:	4618      	mov	r0, r3
   1ddae:	f00b fe5f 	bl	29a70 <memset>
   1ddb2:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1ddb6:	f7ff ff87 	bl	1dcc8 <erase_op>
   1ddba:	e01d      	b.n	1ddf8 <flash_nrf_erase+0xb8>
   1ddbc:	4a11      	ldr	r2, [pc, #68]	; (1de04 <flash_nrf_erase+0xc4>)
   1ddbe:	4b12      	ldr	r3, [pc, #72]	; (1de08 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ddc0:	4814      	ldr	r0, [pc, #80]	; (1de14 <flash_nrf_erase+0xd4>)
   1ddc2:	1a9b      	subs	r3, r3, r2
   1ddc4:	08db      	lsrs	r3, r3, #3
   1ddc6:	019b      	lsls	r3, r3, #6
   1ddc8:	f043 0301 	orr.w	r3, r3, #1
   1ddcc:	462a      	mov	r2, r5
   1ddce:	4631      	mov	r1, r6
   1ddd0:	e7d6      	b.n	1dd80 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1ddd2:	2210      	movs	r2, #16
   1ddd4:	4621      	mov	r1, r4
   1ddd6:	4618      	mov	r0, r3
   1ddd8:	f00b fe4a 	bl	29a70 <memset>
   1dddc:	2201      	movs	r2, #1
   1ddde:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1dde2:	4a0d      	ldr	r2, [pc, #52]	; (1de18 <flash_nrf_erase+0xd8>)
   1dde4:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1dde8:	480c      	ldr	r0, [pc, #48]	; (1de1c <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1ddea:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1ddee:	f002 f977 	bl	200e0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1ddf2:	4668      	mov	r0, sp
   1ddf4:	f002 f97a 	bl	200ec <nrf_flash_sync_exe>
	return	erase_op(&context);
   1ddf8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1ddfa:	4805      	ldr	r0, [pc, #20]	; (1de10 <flash_nrf_erase+0xd0>)
   1ddfc:	f003 fd9e 	bl	2193c <z_impl_k_sem_give>
}
   1de00:	e7c2      	b.n	1dd88 <flash_nrf_erase+0x48>
   1de02:	bf00      	nop
   1de04:	0002ccb8 	.word	0x0002ccb8
   1de08:	0002cd48 	.word	0x0002cd48
   1de0c:	00030d67 	.word	0x00030d67
   1de10:	20003184 	.word	0x20003184
   1de14:	00030d4a 	.word	0x00030d4a
   1de18:	0001dcc9 	.word	0x0001dcc9
   1de1c:	00015e64 	.word	0x00015e64

0001de20 <nrf_flash_init>:
{
   1de20:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1de22:	2201      	movs	r2, #1
   1de24:	4611      	mov	r1, r2
   1de26:	4807      	ldr	r0, [pc, #28]	; (1de44 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1de28:	4c07      	ldr	r4, [pc, #28]	; (1de48 <nrf_flash_init+0x28>)
   1de2a:	f00e fc26 	bl	2c67a <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1de2e:	f002 f94f 	bl	200d0 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1de32:	f00e fb4c 	bl	2c4ce <nrfx_nvmc_flash_page_count_get>
   1de36:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1de38:	f00e fb45 	bl	2c4c6 <nrfx_nvmc_flash_page_size_get>
   1de3c:	6060      	str	r0, [r4, #4]
}
   1de3e:	2000      	movs	r0, #0
   1de40:	bd10      	pop	{r4, pc}
   1de42:	bf00      	nop
   1de44:	20003184 	.word	0x20003184
   1de48:	2000317c 	.word	0x2000317c

0001de4c <write_op>:
{
   1de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   1de4e:	7b03      	ldrb	r3, [r0, #12]
{
   1de50:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1de52:	b10b      	cbz	r3, 1de58 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1de54:	f00e fb0d 	bl	2c472 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1de58:	4e1c      	ldr	r6, [pc, #112]	; (1decc <write_op+0x80>)
	if (pofcon_enabled) {
   1de5a:	4f1d      	ldr	r7, [pc, #116]	; (1ded0 <write_op+0x84>)
{
   1de5c:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1de5e:	68a3      	ldr	r3, [r4, #8]
   1de60:	2b03      	cmp	r3, #3
   1de62:	d806      	bhi.n	1de72 <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1de64:	4a1b      	ldr	r2, [pc, #108]	; (1ded4 <write_op+0x88>)
   1de66:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1de6a:	07db      	lsls	r3, r3, #31
   1de6c:	d5fb      	bpl.n	1de66 <write_op+0x1a>
	return FLASH_OP_DONE;
   1de6e:	2000      	movs	r0, #0
}
   1de70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   1de72:	6833      	ldr	r3, [r6, #0]
   1de74:	2b08      	cmp	r3, #8
   1de76:	d021      	beq.n	1debc <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1de78:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1de7a:	6860      	ldr	r0, [r4, #4]
   1de7c:	6819      	ldr	r1, [r3, #0]
   1de7e:	f002 fbbf 	bl	20600 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1de82:	783b      	ldrb	r3, [r7, #0]
   1de84:	b10b      	cbz	r3, 1de8a <write_op+0x3e>
   1de86:	f7ff fef1 	bl	1dc6c <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1de8a:	6863      	ldr	r3, [r4, #4]
   1de8c:	3304      	adds	r3, #4
   1de8e:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1de90:	6823      	ldr	r3, [r4, #0]
   1de92:	3304      	adds	r3, #4
   1de94:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1de96:	68a3      	ldr	r3, [r4, #8]
   1de98:	3b04      	subs	r3, #4
   1de9a:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1de9c:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1de9e:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1dea0:	2b00      	cmp	r3, #0
   1dea2:	d0dc      	beq.n	1de5e <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   1dea4:	4628      	mov	r0, r5
   1dea6:	f002 f9f7 	bl	20298 <nrf_flash_sync_check_time_limit>
   1deaa:	2800      	cmp	r0, #0
   1deac:	d0d7      	beq.n	1de5e <write_op+0x12>
   1deae:	4a09      	ldr	r2, [pc, #36]	; (1ded4 <write_op+0x88>)
   1deb0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1deb4:	07d9      	lsls	r1, r3, #31
   1deb6:	d5fb      	bpl.n	1deb0 <write_op+0x64>
				return FLASH_OP_ONGOING;
   1deb8:	2001      	movs	r0, #1
   1deba:	e7d9      	b.n	1de70 <write_op+0x24>
                switch(var2)
   1debc:	f7ff fee6 	bl	1dc8c <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   1dec0:	2800      	cmp	r0, #0
   1dec2:	d0d9      	beq.n	1de78 <write_op+0x2c>
			return -ECANCELED;
   1dec4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1dec8:	e7d2      	b.n	1de70 <write_op+0x24>
   1deca:	bf00      	nop
   1decc:	10000130 	.word	0x10000130
   1ded0:	20003eb3 	.word	0x20003eb3
   1ded4:	4001e000 	.word	0x4001e000

0001ded8 <flash_nrf_write>:
{
   1ded8:	b570      	push	{r4, r5, r6, lr}
   1deda:	460d      	mov	r5, r1
   1dedc:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1dede:	4619      	mov	r1, r3
   1dee0:	4628      	mov	r0, r5
{
   1dee2:	4616      	mov	r6, r2
   1dee4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1dee6:	f00d fe28 	bl	2bb3a <is_regular_addr_valid>
   1deea:	b980      	cbnz	r0, 1df0e <flash_nrf_write+0x36>
   1deec:	4a23      	ldr	r2, [pc, #140]	; (1df7c <flash_nrf_write+0xa4>)
   1deee:	4b24      	ldr	r3, [pc, #144]	; (1df80 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1def0:	4824      	ldr	r0, [pc, #144]	; (1df84 <flash_nrf_write+0xac>)
   1def2:	1a9b      	subs	r3, r3, r2
   1def4:	08db      	lsrs	r3, r3, #3
   1def6:	019b      	lsls	r3, r3, #6
   1def8:	f043 0301 	orr.w	r3, r3, #1
   1defc:	4622      	mov	r2, r4
   1defe:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1df00:	f009 fded 	bl	27ade <log_2>
		return -EINVAL;
   1df04:	f06f 0415 	mvn.w	r4, #21
}
   1df08:	4620      	mov	r0, r4
   1df0a:	b006      	add	sp, #24
   1df0c:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1df0e:	ea45 0304 	orr.w	r3, r5, r4
   1df12:	079b      	lsls	r3, r3, #30
   1df14:	d00a      	beq.n	1df2c <flash_nrf_write+0x54>
   1df16:	4a19      	ldr	r2, [pc, #100]	; (1df7c <flash_nrf_write+0xa4>)
   1df18:	4b19      	ldr	r3, [pc, #100]	; (1df80 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1df1a:	481b      	ldr	r0, [pc, #108]	; (1df88 <flash_nrf_write+0xb0>)
   1df1c:	1a9b      	subs	r3, r3, r2
   1df1e:	08db      	lsrs	r3, r3, #3
   1df20:	019b      	lsls	r3, r3, #6
   1df22:	f043 0301 	orr.w	r3, r3, #1
   1df26:	4622      	mov	r2, r4
   1df28:	4629      	mov	r1, r5
   1df2a:	e7e9      	b.n	1df00 <flash_nrf_write+0x28>
	if (!len) {
   1df2c:	2c00      	cmp	r4, #0
   1df2e:	d0eb      	beq.n	1df08 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1df30:	f04f 33ff 	mov.w	r3, #4294967295
   1df34:	f04f 32ff 	mov.w	r2, #4294967295
   1df38:	4814      	ldr	r0, [pc, #80]	; (1df8c <flash_nrf_write+0xb4>)
   1df3a:	f003 fd43 	bl	219c4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1df3e:	f00e fa96 	bl	2c46e <nrf_flash_sync_is_required>
   1df42:	4603      	mov	r3, r0
	struct flash_context context = {
   1df44:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1df48:	a802      	add	r0, sp, #8
   1df4a:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1df4c:	b18b      	cbz	r3, 1df72 <flash_nrf_write+0x9a>
	struct flash_context context = {
   1df4e:	2301      	movs	r3, #1
   1df50:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1df54:	4b0e      	ldr	r3, [pc, #56]	; (1df90 <flash_nrf_write+0xb8>)
   1df56:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1df5a:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1df5e:	f002 f8bf 	bl	200e0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1df62:	4668      	mov	r0, sp
   1df64:	f002 f8c2 	bl	200ec <nrf_flash_sync_exe>
	return write_op(&context);
   1df68:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1df6a:	4808      	ldr	r0, [pc, #32]	; (1df8c <flash_nrf_write+0xb4>)
   1df6c:	f003 fce6 	bl	2193c <z_impl_k_sem_give>
}
   1df70:	e7ca      	b.n	1df08 <flash_nrf_write+0x30>
	struct flash_context context = {
   1df72:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1df76:	f7ff ff69 	bl	1de4c <write_op>
   1df7a:	e7f5      	b.n	1df68 <flash_nrf_write+0x90>
   1df7c:	0002ccb8 	.word	0x0002ccb8
   1df80:	0002cd48 	.word	0x0002cd48
   1df84:	00030d4a 	.word	0x00030d4a
   1df88:	00030d86 	.word	0x00030d86
   1df8c:	20003184 	.word	0x20003184
   1df90:	0001de4d 	.word	0x0001de4d

0001df94 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1df94:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1df96:	794b      	ldrb	r3, [r1, #5]
   1df98:	2b01      	cmp	r3, #1
   1df9a:	d02a      	beq.n	1dff2 <uarte_nrfx_configure+0x5e>
   1df9c:	2b03      	cmp	r3, #3
   1df9e:	d125      	bne.n	1dfec <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1dfa0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1dfa2:	798b      	ldrb	r3, [r1, #6]
   1dfa4:	2b03      	cmp	r3, #3
   1dfa6:	d121      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1dfa8:	79cc      	ldrb	r4, [r1, #7]
   1dfaa:	b12c      	cbz	r4, 1dfb8 <uarte_nrfx_configure+0x24>
   1dfac:	2c01      	cmp	r4, #1
   1dfae:	d11d      	bne.n	1dfec <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   1dfb0:	6843      	ldr	r3, [r0, #4]
   1dfb2:	685b      	ldr	r3, [r3, #4]
   1dfb4:	079b      	lsls	r3, r3, #30
   1dfb6:	d019      	beq.n	1dfec <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1dfb8:	790a      	ldrb	r2, [r1, #4]
   1dfba:	b112      	cbz	r2, 1dfc2 <uarte_nrfx_configure+0x2e>
   1dfbc:	2a02      	cmp	r2, #2
   1dfbe:	d115      	bne.n	1dfec <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1dfc0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1dfc2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1dfc4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1dfc6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1dfca:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1dfcc:	d065      	beq.n	1e09a <uarte_nrfx_configure+0x106>
   1dfce:	d82d      	bhi.n	1e02c <uarte_nrfx_configure+0x98>
   1dfd0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1dfd4:	d064      	beq.n	1e0a0 <uarte_nrfx_configure+0x10c>
   1dfd6:	d816      	bhi.n	1e006 <uarte_nrfx_configure+0x72>
   1dfd8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1dfdc:	d062      	beq.n	1e0a4 <uarte_nrfx_configure+0x110>
   1dfde:	d80a      	bhi.n	1dff6 <uarte_nrfx_configure+0x62>
   1dfe0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1dfe4:	d061      	beq.n	1e0aa <uarte_nrfx_configure+0x116>
   1dfe6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1dfea:	d061      	beq.n	1e0b0 <uarte_nrfx_configure+0x11c>
   1dfec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dff0:	e052      	b.n	1e098 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   1dff2:	2600      	movs	r6, #0
   1dff4:	e7d5      	b.n	1dfa2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1dff6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1dffa:	d05c      	beq.n	1e0b6 <uarte_nrfx_configure+0x122>
   1dffc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e000:	d1f4      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e002:	4b37      	ldr	r3, [pc, #220]	; (1e0e0 <uarte_nrfx_configure+0x14c>)
   1e004:	e03c      	b.n	1e080 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e006:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e00a:	d057      	beq.n	1e0bc <uarte_nrfx_configure+0x128>
   1e00c:	d807      	bhi.n	1e01e <uarte_nrfx_configure+0x8a>
   1e00e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e012:	d055      	beq.n	1e0c0 <uarte_nrfx_configure+0x12c>
   1e014:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e018:	d1e8      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e01a:	4b32      	ldr	r3, [pc, #200]	; (1e0e4 <uarte_nrfx_configure+0x150>)
   1e01c:	e030      	b.n	1e080 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e01e:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e022:	42bb      	cmp	r3, r7
   1e024:	d1e2      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e026:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e02a:	e029      	b.n	1e080 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e02c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e030:	d048      	beq.n	1e0c4 <uarte_nrfx_configure+0x130>
   1e032:	d813      	bhi.n	1e05c <uarte_nrfx_configure+0xc8>
   1e034:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e038:	d047      	beq.n	1e0ca <uarte_nrfx_configure+0x136>
   1e03a:	d809      	bhi.n	1e050 <uarte_nrfx_configure+0xbc>
   1e03c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e040:	42bb      	cmp	r3, r7
   1e042:	d044      	beq.n	1e0ce <uarte_nrfx_configure+0x13a>
   1e044:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e048:	d1d0      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e04a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e04e:	e017      	b.n	1e080 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e050:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e054:	d1ca      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e056:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e05a:	e011      	b.n	1e080 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e05c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e060:	d038      	beq.n	1e0d4 <uarte_nrfx_configure+0x140>
   1e062:	d808      	bhi.n	1e076 <uarte_nrfx_configure+0xe2>
   1e064:	4f20      	ldr	r7, [pc, #128]	; (1e0e8 <uarte_nrfx_configure+0x154>)
   1e066:	42bb      	cmp	r3, r7
   1e068:	d037      	beq.n	1e0da <uarte_nrfx_configure+0x146>
   1e06a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e06e:	d1bd      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e070:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e074:	e004      	b.n	1e080 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e076:	4f1d      	ldr	r7, [pc, #116]	; (1e0ec <uarte_nrfx_configure+0x158>)
   1e078:	42bb      	cmp	r3, r7
   1e07a:	d1b7      	bne.n	1dfec <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e07c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e080:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e084:	6903      	ldr	r3, [r0, #16]
   1e086:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e088:	4334      	orrs	r4, r6
   1e08a:	4322      	orrs	r2, r4
   1e08c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e08e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e092:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e096:	2000      	movs	r0, #0
}
   1e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e09a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e09e:	e7ef      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e0a0:	4b13      	ldr	r3, [pc, #76]	; (1e0f0 <uarte_nrfx_configure+0x15c>)
   1e0a2:	e7ed      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e0a4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e0a8:	e7ea      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   1e0aa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e0ae:	e7e7      	b.n	1e080 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e0b0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e0b4:	e7e4      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e0b6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e0ba:	e7e1      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e0bc:	4b0d      	ldr	r3, [pc, #52]	; (1e0f4 <uarte_nrfx_configure+0x160>)
   1e0be:	e7df      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e0c0:	4b0d      	ldr	r3, [pc, #52]	; (1e0f8 <uarte_nrfx_configure+0x164>)
   1e0c2:	e7dd      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e0c4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e0c8:	e7da      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e0ca:	4b0c      	ldr	r3, [pc, #48]	; (1e0fc <uarte_nrfx_configure+0x168>)
   1e0cc:	e7d8      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e0ce:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e0d2:	e7d5      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e0d4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e0d8:	e7d2      	b.n	1e080 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e0da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e0de:	e7cf      	b.n	1e080 <uarte_nrfx_configure+0xec>
   1e0e0:	0013b000 	.word	0x0013b000
   1e0e4:	004ea000 	.word	0x004ea000
   1e0e8:	0003d090 	.word	0x0003d090
   1e0ec:	000f4240 	.word	0x000f4240
   1e0f0:	00275000 	.word	0x00275000
   1e0f4:	0075c000 	.word	0x0075c000
   1e0f8:	003af000 	.word	0x003af000
   1e0fc:	013a9000 	.word	0x013a9000

0001e100 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1e100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e104:	4614      	mov	r4, r2
	return config->uarte_regs;
   1e106:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e108:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   1e10c:	6817      	ldr	r7, [r2, #0]
    return p_reg->PSEL.RXD;
   1e10e:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   1e112:	3201      	adds	r2, #1
{
   1e114:	4605      	mov	r5, r0
   1e116:	4688      	mov	r8, r1
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   1e118:	d112      	bne.n	1e140 <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   1e11a:	4a3f      	ldr	r2, [pc, #252]	; (1e218 <uarte_nrfx_rx_enable+0x118>)
   1e11c:	493f      	ldr	r1, [pc, #252]	; (1e21c <uarte_nrfx_rx_enable+0x11c>)
   1e11e:	4840      	ldr	r0, [pc, #256]	; (1e220 <uarte_nrfx_rx_enable+0x120>)
   1e120:	f240 3325 	movw	r3, #805	; 0x325
   1e124:	f009 f9e7 	bl	274f6 <printk>
   1e128:	483e      	ldr	r0, [pc, #248]	; (1e224 <uarte_nrfx_rx_enable+0x124>)
   1e12a:	f009 f9e4 	bl	274f6 <printk>
   1e12e:	483a      	ldr	r0, [pc, #232]	; (1e218 <uarte_nrfx_rx_enable+0x118>)
   1e130:	f240 3125 	movw	r1, #805	; 0x325
   1e134:	f009 fc84 	bl	27a40 <assert_post_action>
		return -ENOTSUP;
   1e138:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   1e13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	data->async->rx_timeout = timeout;
   1e140:	f8d9 100c 	ldr.w	r1, [r9, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   1e144:	2b09      	cmp	r3, #9
	data->async->rx_timeout = timeout;
   1e146:	66cb      	str	r3, [r1, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   1e148:	bfd2      	itee	le
   1e14a:	2301      	movle	r3, #1
   1e14c:	2205      	movgt	r2, #5
   1e14e:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1e152:	670b      	str	r3, [r1, #112]	; 0x70
	data->async->rx_offset = 0;
   1e154:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   1e156:	e9c1 8414 	strd	r8, r4, [r1, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   1e15a:	e9c1 3316 	strd	r3, r3, [r1, #88]	; 0x58
	data->async->rx_next_buf_len = 0;
   1e15e:	660b      	str	r3, [r1, #96]	; 0x60
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e160:	6843      	ldr	r3, [r0, #4]
   1e162:	685b      	ldr	r3, [r3, #4]
   1e164:	06da      	lsls	r2, r3, #27
   1e166:	d524      	bpl.n	1e1b2 <uarte_nrfx_rx_enable+0xb2>
		if (data->async->rx_flush_cnt) {
   1e168:	f891 60c1 	ldrb.w	r6, [r1, #193]	; 0xc1
   1e16c:	b30e      	cbz	r6, 1e1b2 <uarte_nrfx_rx_enable+0xb2>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1e16e:	42a6      	cmp	r6, r4
   1e170:	bf28      	it	cs
   1e172:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   1e174:	4640      	mov	r0, r8
   1e176:	4632      	mov	r2, r6
   1e178:	31bc      	adds	r1, #188	; 0xbc
   1e17a:	f00b fc6e 	bl	29a5a <memcpy>
			if (!len) {
   1e17e:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   1e180:	44b0      	add	r8, r6
			if (!len) {
   1e182:	d116      	bne.n	1e1b2 <uarte_nrfx_rx_enable+0xb2>
				data->async->rx_flush_cnt -= cpy_len;
   1e184:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1e188:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
   1e18c:	1b9b      	subs	r3, r3, r6
   1e18e:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   1e192:	4631      	mov	r1, r6
   1e194:	4628      	mov	r0, r5
   1e196:	f00d fd7b 	bl	2bc90 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   1e19a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1e19e:	4628      	mov	r0, r5
   1e1a0:	2201      	movs	r2, #1
   1e1a2:	3150      	adds	r1, #80	; 0x50
   1e1a4:	f00d fd8d 	bl	2bcc2 <notify_rx_buf_release>
				notify_rx_disable(dev);
   1e1a8:	4628      	mov	r0, r5
   1e1aa:	f00d fda4 	bl	2bcf6 <notify_rx_disable>
	return 0;
   1e1ae:	2000      	movs	r0, #0
   1e1b0:	e7c4      	b.n	1e13c <uarte_nrfx_rx_enable+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e1b2:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e1b4:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e1b8:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e1bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   1e1c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   1e1c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   1e1c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   1e1cc:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1e1d0:	2201      	movs	r2, #1
   1e1d2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e1d6:	686b      	ldr	r3, [r5, #4]
   1e1d8:	685b      	ldr	r3, [r3, #4]
   1e1da:	06db      	lsls	r3, r3, #27
   1e1dc:	d519      	bpl.n	1e212 <uarte_nrfx_rx_enable+0x112>
	__asm__ volatile(
   1e1de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1e2:	f3ef 8111 	mrs	r1, BASEPRI
   1e1e6:	f383 8811 	msr	BASEPRI, r3
   1e1ea:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1e1ee:	692b      	ldr	r3, [r5, #16]
   1e1f0:	68db      	ldr	r3, [r3, #12]
   1e1f2:	b12b      	cbz	r3, 1e200 <uarte_nrfx_rx_enable+0x100>
		data->async->low_power_mask |= mask;
   1e1f4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1e1f8:	f042 0202 	orr.w	r2, r2, #2
   1e1fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	return config->uarte_regs;
   1e200:	686b      	ldr	r3, [r5, #4]
   1e202:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e204:	2208      	movs	r2, #8
   1e206:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1e20a:	f381 8811 	msr	BASEPRI, r1
   1e20e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e212:	2301      	movs	r3, #1
   1e214:	603b      	str	r3, [r7, #0]
   1e216:	e7ca      	b.n	1e1ae <uarte_nrfx_rx_enable+0xae>
   1e218:	00030dae 	.word	0x00030dae
   1e21c:	00032142 	.word	0x00032142
   1e220:	0002dcd3 	.word	0x0002dcd3
   1e224:	00030de2 	.word	0x00030de2

0001e228 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e228:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1e22a:	0953      	lsrs	r3, r2, #5
{
   1e22c:	b510      	push	{r4, lr}
   1e22e:	4604      	mov	r4, r0
    switch (port)
   1e230:	d02c      	beq.n	1e28c <nrf_gpio_pin_port_decode+0x64>
   1e232:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1e234:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e238:	bf18      	it	ne
   1e23a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1e23c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e240:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e242:	07db      	lsls	r3, r3, #31
   1e244:	d40b      	bmi.n	1e25e <nrf_gpio_pin_port_decode+0x36>
   1e246:	4914      	ldr	r1, [pc, #80]	; (1e298 <nrf_gpio_pin_port_decode+0x70>)
   1e248:	4814      	ldr	r0, [pc, #80]	; (1e29c <nrf_gpio_pin_port_decode+0x74>)
   1e24a:	4a15      	ldr	r2, [pc, #84]	; (1e2a0 <nrf_gpio_pin_port_decode+0x78>)
   1e24c:	f44f 7305 	mov.w	r3, #532	; 0x214
   1e250:	f009 f951 	bl	274f6 <printk>
   1e254:	4812      	ldr	r0, [pc, #72]	; (1e2a0 <nrf_gpio_pin_port_decode+0x78>)
   1e256:	f44f 7105 	mov.w	r1, #532	; 0x214
   1e25a:	f009 fbf1 	bl	27a40 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1e25e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1e260:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e264:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1e266:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e268:	d00d      	beq.n	1e286 <nrf_gpio_pin_port_decode+0x5e>
   1e26a:	2b01      	cmp	r3, #1
   1e26c:	d011      	beq.n	1e292 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   1e26e:	490d      	ldr	r1, [pc, #52]	; (1e2a4 <nrf_gpio_pin_port_decode+0x7c>)
   1e270:	480a      	ldr	r0, [pc, #40]	; (1e29c <nrf_gpio_pin_port_decode+0x74>)
   1e272:	4a0b      	ldr	r2, [pc, #44]	; (1e2a0 <nrf_gpio_pin_port_decode+0x78>)
   1e274:	f240 2319 	movw	r3, #537	; 0x219
   1e278:	f009 f93d 	bl	274f6 <printk>
   1e27c:	4808      	ldr	r0, [pc, #32]	; (1e2a0 <nrf_gpio_pin_port_decode+0x78>)
   1e27e:	f240 2119 	movw	r1, #537	; 0x219
   1e282:	f009 fbdd 	bl	27a40 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e286:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1e28a:	bd10      	pop	{r4, pc}
    switch (port)
   1e28c:	f04f 33ff 	mov.w	r3, #4294967295
   1e290:	e7d4      	b.n	1e23c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1e292:	4805      	ldr	r0, [pc, #20]	; (1e2a8 <nrf_gpio_pin_port_decode+0x80>)
   1e294:	e7f9      	b.n	1e28a <nrf_gpio_pin_port_decode+0x62>
   1e296:	bf00      	nop
   1e298:	00030d19 	.word	0x00030d19
   1e29c:	0002dcd3 	.word	0x0002dcd3
   1e2a0:	00030ce6 	.word	0x00030ce6
   1e2a4:	00032142 	.word	0x00032142
   1e2a8:	50000300 	.word	0x50000300

0001e2ac <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1e2ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1e2b0:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e2b2:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   1e2b4:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e2b6:	2300      	movs	r3, #0
   1e2b8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   1e2bc:	4606      	mov	r6, r0
   1e2be:	680b      	ldr	r3, [r1, #0]

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1e2c0:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2c2:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   1e2c4:	460d      	mov	r5, r1
   1e2c6:	9301      	str	r3, [sp, #4]
   1e2c8:	f7ff ffae 	bl	1e228 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e2cc:	9a01      	ldr	r2, [sp, #4]
   1e2ce:	2301      	movs	r3, #1
   1e2d0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e2d2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e2d6:	682b      	ldr	r3, [r5, #0]
   1e2d8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2da:	a801      	add	r0, sp, #4
   1e2dc:	f7ff ffa4 	bl	1e228 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e2e0:	9b01      	ldr	r3, [sp, #4]
   1e2e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e2e6:	2203      	movs	r2, #3
   1e2e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1e2ec:	686b      	ldr	r3, [r5, #4]
   1e2ee:	1c59      	adds	r1, r3, #1
   1e2f0:	d009      	beq.n	1e306 <uarte_instance_init.isra.0+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2f2:	a801      	add	r0, sp, #4
   1e2f4:	9301      	str	r3, [sp, #4]
   1e2f6:	f7ff ff97 	bl	1e228 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e2fa:	9b01      	ldr	r3, [sp, #4]
   1e2fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e300:	220c      	movs	r2, #12
   1e302:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1e306:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1e30a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e30e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e312:	68ab      	ldr	r3, [r5, #8]
   1e314:	1c5a      	adds	r2, r3, #1
   1e316:	d009      	beq.n	1e32c <uarte_instance_init.isra.0+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e318:	a801      	add	r0, sp, #4
   1e31a:	9301      	str	r3, [sp, #4]
   1e31c:	f7ff ff84 	bl	1e228 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e320:	9b01      	ldr	r3, [sp, #4]
   1e322:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e326:	220c      	movs	r2, #12
   1e328:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e32c:	68eb      	ldr	r3, [r5, #12]
   1e32e:	1c58      	adds	r0, r3, #1
   1e330:	d013      	beq.n	1e35a <uarte_instance_init.isra.0+0xae>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e332:	a801      	add	r0, sp, #4
   1e334:	9301      	str	r3, [sp, #4]
   1e336:	f7ff ff77 	bl	1e228 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e33a:	9a01      	ldr	r2, [sp, #4]
   1e33c:	2301      	movs	r3, #1
   1e33e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e340:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e344:	68eb      	ldr	r3, [r5, #12]
   1e346:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e348:	a801      	add	r0, sp, #4
   1e34a:	f7ff ff6d 	bl	1e228 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e34e:	9b01      	ldr	r3, [sp, #4]
   1e350:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e354:	2203      	movs	r2, #3
   1e356:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1e35a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e35e:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.RTS = pselrts;
   1e360:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1e364:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1e366:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1e36a:	4630      	mov	r0, r6
   1e36c:	f7ff fe12 	bl	1df94 <uarte_nrfx_configure>
	if (err) {
   1e370:	4680      	mov	r8, r0
   1e372:	b9b0      	cbnz	r0, 1e3a2 <uarte_instance_init.isra.0+0xf6>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e374:	6873      	ldr	r3, [r6, #4]
   1e376:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e378:	0719      	lsls	r1, r3, #28
   1e37a:	d529      	bpl.n	1e3d0 <uarte_instance_init.isra.0+0x124>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e37c:	f107 0016 	add.w	r0, r7, #22
   1e380:	f002 f978 	bl	20674 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e384:	4b45      	ldr	r3, [pc, #276]	; (1e49c <uarte_instance_init.isra.0+0x1f0>)
   1e386:	4298      	cmp	r0, r3
   1e388:	d00f      	beq.n	1e3aa <uarte_instance_init.isra.0+0xfe>
   1e38a:	4b45      	ldr	r3, [pc, #276]	; (1e4a0 <uarte_instance_init.isra.0+0x1f4>)
   1e38c:	4945      	ldr	r1, [pc, #276]	; (1e4a4 <uarte_instance_init.isra.0+0x1f8>)
		LOG_ERR("Failed to allocate PPI Channel");
   1e38e:	4846      	ldr	r0, [pc, #280]	; (1e4a8 <uarte_instance_init.isra.0+0x1fc>)
   1e390:	1ac9      	subs	r1, r1, r3
   1e392:	08c9      	lsrs	r1, r1, #3
   1e394:	0189      	lsls	r1, r1, #6
   1e396:	f041 0101 	orr.w	r1, r1, #1
   1e39a:	f009 fb7f 	bl	27a9c <log_0>
		return -EIO;
   1e39e:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1e3a2:	4640      	mov	r0, r8
   1e3a4:	b002      	add	sp, #8
   1e3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e3aa:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e3ac:	00c3      	lsls	r3, r0, #3
   1e3ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e3b2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1e3b6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e3ba:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e3be:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e3c2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1e3c6:	4a39      	ldr	r2, [pc, #228]	; (1e4ac <uarte_instance_init.isra.0+0x200>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e3c8:	2301      	movs	r3, #1
   1e3ca:	4083      	lsls	r3, r0
   1e3cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1e3d0:	68fb      	ldr	r3, [r7, #12]
   1e3d2:	2b00      	cmp	r3, #0
   1e3d4:	d04f      	beq.n	1e476 <uarte_instance_init.isra.0+0x1ca>
	return config->uarte_regs;
   1e3d6:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e3d8:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   1e3da:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1e3dc:	68e8      	ldr	r0, [r5, #12]
    p_reg->INTENSET = mask;
   1e3de:	4934      	ldr	r1, [pc, #208]	; (1e4b0 <uarte_instance_init.isra.0+0x204>)
   1e3e0:	2204      	movs	r2, #4
   1e3e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1e3e6:	2201      	movs	r2, #1
   1e3e8:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
   1e3ec:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e3f0:	2108      	movs	r1, #8
   1e3f2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3f6:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1e3fa:	b1a1      	cbz	r1, 1e426 <uarte_instance_init.isra.0+0x17a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e3fc:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3fe:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1e402:	b91a      	cbnz	r2, 1e40c <uarte_instance_init.isra.0+0x160>
   1e404:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1e408:	2a00      	cmp	r2, #0
   1e40a:	d0f8      	beq.n	1e3fe <uarte_instance_init.isra.0+0x152>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e40c:	2200      	movs	r2, #0
   1e40e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1e412:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1e416:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1e41a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1e41e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1e422:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1e426:	4923      	ldr	r1, [pc, #140]	; (1e4b4 <uarte_instance_init.isra.0+0x208>)
   1e428:	2200      	movs	r2, #0
   1e42a:	3078      	adds	r0, #120	; 0x78
   1e42c:	f00e f9e7 	bl	2c7fe <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1e430:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
   1e432:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1e436:	68e8      	ldr	r0, [r5, #12]
   1e438:	491f      	ldr	r1, [pc, #124]	; (1e4b8 <uarte_instance_init.isra.0+0x20c>)
   1e43a:	2200      	movs	r2, #0
   1e43c:	3018      	adds	r0, #24
   1e43e:	f00e f9de 	bl	2c7fe <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1e442:	68eb      	ldr	r3, [r5, #12]
   1e444:	64dd      	str	r5, [r3, #76]	; 0x4c
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1e446:	6873      	ldr	r3, [r6, #4]
   1e448:	685b      	ldr	r3, [r3, #4]
   1e44a:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   1e44c:	bf5c      	itt	pl
   1e44e:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1e452:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e456:	06db      	lsls	r3, r3, #27
   1e458:	bf44      	itt	mi
   1e45a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1e45e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1e462:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
   1e464:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e466:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e46a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e46e:	2301      	movs	r3, #1
   1e470:	60a3      	str	r3, [r4, #8]
   1e472:	60e3      	str	r3, [r4, #12]
	return 0;
   1e474:	e795      	b.n	1e3a2 <uarte_instance_init.isra.0+0xf6>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e476:	2208      	movs	r2, #8
   1e478:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1e47c:	686a      	ldr	r2, [r5, #4]
   1e47e:	3201      	adds	r2, #1
   1e480:	d0e1      	beq.n	1e446 <uarte_instance_init.isra.0+0x19a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e482:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e486:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1e48a:	f107 0315 	add.w	r3, r7, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e48e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e492:	2301      	movs	r3, #1
   1e494:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e498:	6023      	str	r3, [r4, #0]
}
   1e49a:	e7d4      	b.n	1e446 <uarte_instance_init.isra.0+0x19a>
   1e49c:	0bad0000 	.word	0x0bad0000
   1e4a0:	0002ccb8 	.word	0x0002ccb8
   1e4a4:	0002cdc0 	.word	0x0002cdc0
   1e4a8:	00030dfb 	.word	0x00030dfb
   1e4ac:	4001f000 	.word	0x4001f000
   1e4b0:	000a0210 	.word	0x000a0210
   1e4b4:	0002bdad 	.word	0x0002bdad
   1e4b8:	0002bf13 	.word	0x0002bf13

0001e4bc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1e4bc:	b530      	push	{r4, r5, lr}
   1e4be:	4b0a      	ldr	r3, [pc, #40]	; (1e4e8 <uarte_0_init+0x2c>)
   1e4c0:	4605      	mov	r5, r0
   1e4c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e4c4:	b085      	sub	sp, #20
   1e4c6:	466c      	mov	r4, sp
   1e4c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1e4cc:	2200      	movs	r2, #0
   1e4ce:	2101      	movs	r1, #1
   1e4d0:	2002      	movs	r0, #2
   1e4d2:	f7f5 fedf 	bl	14294 <z_arm_irq_priority_set>
   1e4d6:	2002      	movs	r0, #2
   1e4d8:	f7f5 feaa 	bl	14230 <arch_irq_enable>
   1e4dc:	4621      	mov	r1, r4
   1e4de:	4628      	mov	r0, r5
   1e4e0:	f7ff fee4 	bl	1e2ac <uarte_instance_init.isra.0>
   1e4e4:	b005      	add	sp, #20
   1e4e6:	bd30      	pop	{r4, r5, pc}
   1e4e8:	0002ceac 	.word	0x0002ceac

0001e4ec <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1e4ec:	b530      	push	{r4, r5, lr}
   1e4ee:	4b0a      	ldr	r3, [pc, #40]	; (1e518 <uarte_1_init+0x2c>)
   1e4f0:	4605      	mov	r5, r0
   1e4f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e4f4:	b085      	sub	sp, #20
   1e4f6:	466c      	mov	r4, sp
   1e4f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1e4fc:	2200      	movs	r2, #0
   1e4fe:	2101      	movs	r1, #1
   1e500:	2028      	movs	r0, #40	; 0x28
   1e502:	f7f5 fec7 	bl	14294 <z_arm_irq_priority_set>
   1e506:	2028      	movs	r0, #40	; 0x28
   1e508:	f7f5 fe92 	bl	14230 <arch_irq_enable>
   1e50c:	4621      	mov	r1, r4
   1e50e:	4628      	mov	r0, r5
   1e510:	f7ff fecc 	bl	1e2ac <uarte_instance_init.isra.0>
   1e514:	b005      	add	sp, #20
   1e516:	bd30      	pop	{r4, r5, pc}
   1e518:	0002cebc 	.word	0x0002cebc

0001e51c <uarte_nrfx_poll_out>:
{
   1e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e51e:	6906      	ldr	r6, [r0, #16]
{
   1e520:	4604      	mov	r4, r0
   1e522:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e524:	f00e f860 	bl	2c5e8 <k_is_in_isr>
   1e528:	b910      	cbnz	r0, 1e530 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1e52a:	4b28      	ldr	r3, [pc, #160]	; (1e5cc <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   1e52c:	781b      	ldrb	r3, [r3, #0]
   1e52e:	bb5b      	cbnz	r3, 1e588 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1e530:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e534:	f3ef 8111 	mrs	r1, BASEPRI
   1e538:	f383 8811 	msr	BASEPRI, r3
   1e53c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e540:	4620      	mov	r0, r4
			key = irq_lock();
   1e542:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   1e544:	f00d fb8d 	bl	2bc62 <is_tx_ready>
   1e548:	b1c8      	cbz	r0, 1e57e <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   1e54a:	68f3      	ldr	r3, [r6, #12]
   1e54c:	b15b      	cbz	r3, 1e566 <uarte_nrfx_poll_out+0x4a>
   1e54e:	68da      	ldr	r2, [r3, #12]
   1e550:	b14a      	cbz	r2, 1e566 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   1e552:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   1e556:	2a00      	cmp	r2, #0
   1e558:	da05      	bge.n	1e566 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   1e55a:	6862      	ldr	r2, [r4, #4]
   1e55c:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   1e55e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1e562:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	data->char_out = c;
   1e566:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1e568:	2201      	movs	r2, #1
	data->char_out = c;
   1e56a:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1e56e:	4620      	mov	r0, r4
   1e570:	f00d fcf4 	bl	2bf5c <tx_start>
	__asm__ volatile(
   1e574:	f385 8811 	msr	BASEPRI, r5
   1e578:	f3bf 8f6f 	isb	sy
}
   1e57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e57e:	f381 8811 	msr	BASEPRI, r1
   1e582:	f3bf 8f6f 	isb	sy
}
   1e586:	e7d3      	b.n	1e530 <uarte_nrfx_poll_out+0x14>
{
   1e588:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e58a:	4620      	mov	r0, r4
   1e58c:	f00d fb69 	bl	2bc62 <is_tx_ready>
   1e590:	b948      	cbnz	r0, 1e5a6 <uarte_nrfx_poll_out+0x8a>
   1e592:	2001      	movs	r0, #1
   1e594:	f00d ff7a 	bl	2c48c <nrfx_busy_wait>
   1e598:	3d01      	subs	r5, #1
   1e59a:	d1f6      	bne.n	1e58a <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   1e59c:	2100      	movs	r1, #0
   1e59e:	2021      	movs	r0, #33	; 0x21
   1e5a0:	f005 f8d2 	bl	23748 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e5a4:	e7f0      	b.n	1e588 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1e5a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5aa:	f3ef 8511 	mrs	r5, BASEPRI
   1e5ae:	f383 8811 	msr	BASEPRI, r3
   1e5b2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e5b6:	4620      	mov	r0, r4
   1e5b8:	f00d fb53 	bl	2bc62 <is_tx_ready>
   1e5bc:	2800      	cmp	r0, #0
   1e5be:	d1d2      	bne.n	1e566 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1e5c0:	f385 8811 	msr	BASEPRI, r5
   1e5c4:	f3bf 8f6f 	isb	sy
}
   1e5c8:	e7e8      	b.n	1e59c <uarte_nrfx_poll_out+0x80>
   1e5ca:	bf00      	nop
   1e5cc:	20004a3b 	.word	0x20004a3b

0001e5d0 <random_byte_get>:
	__asm__ volatile(
   1e5d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5d4:	f3ef 8211 	mrs	r2, BASEPRI
   1e5d8:	f383 8811 	msr	BASEPRI, r3
   1e5dc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e5e0:	4b08      	ldr	r3, [pc, #32]	; (1e604 <random_byte_get+0x34>)
   1e5e2:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e5e4:	b159      	cbz	r1, 1e5fe <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e5e6:	4908      	ldr	r1, [pc, #32]	; (1e608 <random_byte_get+0x38>)
   1e5e8:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e5ec:	2100      	movs	r1, #0
   1e5ee:	6019      	str	r1, [r3, #0]
   1e5f0:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e5f2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e5f4:	f382 8811 	msr	BASEPRI, r2
   1e5f8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e5fc:	4770      	bx	lr
	int retval = -EAGAIN;
   1e5fe:	f06f 000a 	mvn.w	r0, #10
   1e602:	e7f7      	b.n	1e5f4 <random_byte_get+0x24>
   1e604:	4000d100 	.word	0x4000d100
   1e608:	4000d000 	.word	0x4000d000

0001e60c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e60c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e60e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e610:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e612:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e614:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e618:	f3ef 8011 	mrs	r0, BASEPRI
   1e61c:	f385 8811 	msr	BASEPRI, r5
   1e620:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e624:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e626:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1e62a:	1ba4      	subs	r4, r4, r6
   1e62c:	403c      	ands	r4, r7
	if (available < len) {
   1e62e:	42a2      	cmp	r2, r4
		len = available;
   1e630:	bf88      	it	hi
   1e632:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e634:	eb06 0c02 	add.w	ip, r6, r2
   1e638:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1e63c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e63e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1e642:	f380 8811 	msr	BASEPRI, r0
   1e646:	f3bf 8f6f 	isb	sy
   1e64a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1e64c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e64e:	4282      	cmp	r2, r0
   1e650:	d119      	bne.n	1e686 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e652:	4576      	cmp	r6, lr
   1e654:	d10d      	bne.n	1e672 <rng_pool_get+0x66>
	__asm__ volatile(
   1e656:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e65a:	f3ef 8211 	mrs	r2, BASEPRI
   1e65e:	f385 8811 	msr	BASEPRI, r5
   1e662:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e666:	781d      	ldrb	r5, [r3, #0]
   1e668:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e66a:	f382 8811 	msr	BASEPRI, r2
   1e66e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e672:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e674:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e676:	b288      	uxth	r0, r1
	available = available - len;
   1e678:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1e67a:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e67c:	bf22      	ittt	cs
   1e67e:	4b06      	ldrcs	r3, [pc, #24]	; (1e698 <rng_pool_get+0x8c>)
   1e680:	2201      	movcs	r2, #1
   1e682:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e684:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e686:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1e68a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e68c:	f89c c005 	ldrb.w	ip, [ip, #5]
   1e690:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1e694:	403d      	ands	r5, r7
   1e696:	e7da      	b.n	1e64e <rng_pool_get+0x42>
   1e698:	4000d000 	.word	0x4000d000

0001e69c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1e69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e6a0:	4614      	mov	r4, r2
   1e6a2:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e6a4:	6902      	ldr	r2, [r0, #16]
   1e6a6:	4b2c      	ldr	r3, [pc, #176]	; (1e758 <entropy_nrf5_get_entropy_isr+0xbc>)
   1e6a8:	429a      	cmp	r2, r3
{
   1e6aa:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e6ac:	d00b      	beq.n	1e6c6 <entropy_nrf5_get_entropy_isr+0x2a>
   1e6ae:	492b      	ldr	r1, [pc, #172]	; (1e75c <entropy_nrf5_get_entropy_isr+0xc0>)
   1e6b0:	482b      	ldr	r0, [pc, #172]	; (1e760 <entropy_nrf5_get_entropy_isr+0xc4>)
   1e6b2:	4a2c      	ldr	r2, [pc, #176]	; (1e764 <entropy_nrf5_get_entropy_isr+0xc8>)
   1e6b4:	f44f 7384 	mov.w	r3, #264	; 0x108
   1e6b8:	f008 ff1d 	bl	274f6 <printk>
   1e6bc:	4829      	ldr	r0, [pc, #164]	; (1e764 <entropy_nrf5_get_entropy_isr+0xc8>)
   1e6be:	f44f 7184 	mov.w	r1, #264	; 0x108
   1e6c2:	f009 f9bd 	bl	27a40 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e6c6:	43eb      	mvns	r3, r5
   1e6c8:	f013 0501 	ands.w	r5, r3, #1
   1e6cc:	d006      	beq.n	1e6dc <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e6ce:	4826      	ldr	r0, [pc, #152]	; (1e768 <entropy_nrf5_get_entropy_isr+0xcc>)
   1e6d0:	4622      	mov	r2, r4
   1e6d2:	4631      	mov	r1, r6
   1e6d4:	f7ff ff9a 	bl	1e60c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e6dc:	2c00      	cmp	r4, #0
   1e6de:	d033      	beq.n	1e748 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   1e6e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e6e4:	f3ef 8811 	mrs	r8, BASEPRI
   1e6e8:	f383 8811 	msr	BASEPRI, r3
   1e6ec:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e6f0:	200d      	movs	r0, #13
   1e6f2:	f7f5 fdc1 	bl	14278 <arch_irq_is_enabled>
   1e6f6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e6f8:	200d      	movs	r0, #13
   1e6fa:	f7f5 fda9 	bl	14250 <arch_irq_disable>
	__asm__ volatile(
   1e6fe:	f388 8811 	msr	BASEPRI, r8
   1e702:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e706:	4a19      	ldr	r2, [pc, #100]	; (1e76c <entropy_nrf5_get_entropy_isr+0xd0>)
   1e708:	6015      	str	r5, [r2, #0]
   1e70a:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e70c:	4b18      	ldr	r3, [pc, #96]	; (1e770 <entropy_nrf5_get_entropy_isr+0xd4>)
   1e70e:	2101      	movs	r1, #1
   1e710:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e712:	4918      	ldr	r1, [pc, #96]	; (1e774 <entropy_nrf5_get_entropy_isr+0xd8>)
   1e714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1e718:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1e71c:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e71e:	4691      	mov	r9, r2
   1e720:	468a      	mov	sl, r1
   1e722:	4698      	mov	r8, r3
   1e724:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1e728:	b183      	cbz	r3, 1e74c <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   1e72a:	f7ff ff51 	bl	1e5d0 <random_byte_get>
			if (byte < 0) {
   1e72e:	1e03      	subs	r3, r0, #0
   1e730:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1e734:	dbf6      	blt.n	1e724 <entropy_nrf5_get_entropy_isr+0x88>
   1e736:	3d01      	subs	r5, #1
   1e738:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1e73a:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e73c:	2d00      	cmp	r5, #0
   1e73e:	d1f1      	bne.n	1e724 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   1e740:	b117      	cbz	r7, 1e748 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   1e742:	200d      	movs	r0, #13
   1e744:	f7f5 fd74 	bl	14230 <arch_irq_enable>
	return cnt;
   1e748:	4620      	mov	r0, r4
   1e74a:	e7c5      	b.n	1e6d8 <entropy_nrf5_get_entropy_isr+0x3c>
   1e74c:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e750:	bf20      	wfe
				__SEV();
   1e752:	bf40      	sev
				__WFE();
   1e754:	bf20      	wfe
   1e756:	e7e5      	b.n	1e724 <entropy_nrf5_get_entropy_isr+0x88>
   1e758:	200031a8 	.word	0x200031a8
   1e75c:	00030e63 	.word	0x00030e63
   1e760:	0002dcd3 	.word	0x0002dcd3
   1e764:	00030e31 	.word	0x00030e31
   1e768:	200031d8 	.word	0x200031d8
   1e76c:	4000d100 	.word	0x4000d100
   1e770:	4000d000 	.word	0x4000d000
   1e774:	e000e100 	.word	0xe000e100

0001e778 <entropy_nrf5_get_entropy>:
{
   1e778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e77c:	4b1a      	ldr	r3, [pc, #104]	; (1e7e8 <entropy_nrf5_get_entropy+0x70>)
{
   1e77e:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e780:	6902      	ldr	r2, [r0, #16]
   1e782:	429a      	cmp	r2, r3
{
   1e784:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e786:	d009      	beq.n	1e79c <entropy_nrf5_get_entropy+0x24>
   1e788:	4918      	ldr	r1, [pc, #96]	; (1e7ec <entropy_nrf5_get_entropy+0x74>)
   1e78a:	4819      	ldr	r0, [pc, #100]	; (1e7f0 <entropy_nrf5_get_entropy+0x78>)
   1e78c:	4a19      	ldr	r2, [pc, #100]	; (1e7f4 <entropy_nrf5_get_entropy+0x7c>)
   1e78e:	23ea      	movs	r3, #234	; 0xea
   1e790:	f008 feb1 	bl	274f6 <printk>
   1e794:	4817      	ldr	r0, [pc, #92]	; (1e7f4 <entropy_nrf5_get_entropy+0x7c>)
   1e796:	21ea      	movs	r1, #234	; 0xea
   1e798:	f009 f952 	bl	27a40 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1e79c:	4e12      	ldr	r6, [pc, #72]	; (1e7e8 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e79e:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1e7a2:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1e7a6:	b914      	cbnz	r4, 1e7ae <entropy_nrf5_get_entropy+0x36>
}
   1e7a8:	4620      	mov	r0, r4
   1e7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e7ae:	f04f 33ff 	mov.w	r3, #4294967295
   1e7b2:	f04f 32ff 	mov.w	r2, #4294967295
   1e7b6:	4630      	mov	r0, r6
   1e7b8:	f003 f904 	bl	219c4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e7bc:	4622      	mov	r2, r4
   1e7be:	4649      	mov	r1, r9
   1e7c0:	4638      	mov	r0, r7
   1e7c2:	f7ff ff23 	bl	1e60c <rng_pool_get>
   1e7c6:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1e7c8:	4630      	mov	r0, r6
   1e7ca:	f003 f8b7 	bl	2193c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e7ce:	b93d      	cbnz	r5, 1e7e0 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   1e7d0:	f04f 32ff 	mov.w	r2, #4294967295
   1e7d4:	f04f 33ff 	mov.w	r3, #4294967295
   1e7d8:	4640      	mov	r0, r8
   1e7da:	f003 f8f3 	bl	219c4 <z_impl_k_sem_take>
			continue;
   1e7de:	e7e2      	b.n	1e7a6 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   1e7e0:	1b64      	subs	r4, r4, r5
   1e7e2:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e7e4:	44a9      	add	r9, r5
   1e7e6:	e7de      	b.n	1e7a6 <entropy_nrf5_get_entropy+0x2e>
   1e7e8:	200031a8 	.word	0x200031a8
   1e7ec:	00030e63 	.word	0x00030e63
   1e7f0:	0002dcd3 	.word	0x0002dcd3
   1e7f4:	00030e31 	.word	0x00030e31

0001e7f8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e7f8:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e7fa:	4c20      	ldr	r4, [pc, #128]	; (1e87c <entropy_nrf5_init+0x84>)
   1e7fc:	6903      	ldr	r3, [r0, #16]
   1e7fe:	42a3      	cmp	r3, r4
   1e800:	d00b      	beq.n	1e81a <entropy_nrf5_init+0x22>
   1e802:	491f      	ldr	r1, [pc, #124]	; (1e880 <entropy_nrf5_init+0x88>)
   1e804:	481f      	ldr	r0, [pc, #124]	; (1e884 <entropy_nrf5_init+0x8c>)
   1e806:	4a20      	ldr	r2, [pc, #128]	; (1e888 <entropy_nrf5_init+0x90>)
   1e808:	f240 1357 	movw	r3, #343	; 0x157
   1e80c:	f008 fe73 	bl	274f6 <printk>
   1e810:	481d      	ldr	r0, [pc, #116]	; (1e888 <entropy_nrf5_init+0x90>)
   1e812:	f240 1157 	movw	r1, #343	; 0x157
   1e816:	f009 f913 	bl	27a40 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e81a:	2201      	movs	r2, #1
   1e81c:	4611      	mov	r1, r2
   1e81e:	4817      	ldr	r0, [pc, #92]	; (1e87c <entropy_nrf5_init+0x84>)
   1e820:	f00d ff2b 	bl	2c67a <z_impl_k_sem_init>
   1e824:	2201      	movs	r2, #1
   1e826:	2100      	movs	r1, #0
   1e828:	4818      	ldr	r0, [pc, #96]	; (1e88c <entropy_nrf5_init+0x94>)
   1e82a:	f00d ff26 	bl	2c67a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e82e:	f240 4307 	movw	r3, #1031	; 0x407
   1e832:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e836:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e83a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e83c:	230c      	movs	r3, #12
   1e83e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e842:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e844:	4b12      	ldr	r3, [pc, #72]	; (1e890 <entropy_nrf5_init+0x98>)
   1e846:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e84a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e84e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e852:	f022 0201 	bic.w	r2, r2, #1
   1e856:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e85a:	4a0e      	ldr	r2, [pc, #56]	; (1e894 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   1e85c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e85e:	6015      	str	r5, [r2, #0]
   1e860:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1e862:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e866:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e868:	6019      	str	r1, [r3, #0]
   1e86a:	200d      	movs	r0, #13
   1e86c:	f7f5 fd12 	bl	14294 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e870:	200d      	movs	r0, #13
   1e872:	f7f5 fcdd 	bl	14230 <arch_irq_enable>

	return 0;
}
   1e876:	4628      	mov	r0, r5
   1e878:	bd38      	pop	{r3, r4, r5, pc}
   1e87a:	bf00      	nop
   1e87c:	200031a8 	.word	0x200031a8
   1e880:	00030e63 	.word	0x00030e63
   1e884:	0002dcd3 	.word	0x0002dcd3
   1e888:	00030e31 	.word	0x00030e31
   1e88c:	200031c0 	.word	0x200031c0
   1e890:	4000d000 	.word	0x4000d000
   1e894:	4000d100 	.word	0x4000d100

0001e898 <isr>:
{
   1e898:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e89a:	f7ff fe99 	bl	1e5d0 <random_byte_get>
	if (byte < 0) {
   1e89e:	2800      	cmp	r0, #0
   1e8a0:	db20      	blt.n	1e8e4 <isr+0x4c>
	uint8_t last  = rngp->last;
   1e8a2:	4b17      	ldr	r3, [pc, #92]	; (1e900 <isr+0x68>)
   1e8a4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e8a8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e8ac:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e8b0:	1a51      	subs	r1, r2, r1
   1e8b2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e8b6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e8b8:	d10d      	bne.n	1e8d6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1e8ba:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e8be:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e8c2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e8c6:	1a51      	subs	r1, r2, r1
   1e8c8:	ea34 0101 	bics.w	r1, r4, r1
   1e8cc:	d10b      	bne.n	1e8e6 <isr+0x4e>
   1e8ce:	4b0d      	ldr	r3, [pc, #52]	; (1e904 <isr+0x6c>)
   1e8d0:	2201      	movs	r2, #1
   1e8d2:	601a      	str	r2, [r3, #0]
}
   1e8d4:	e00e      	b.n	1e8f4 <isr+0x5c>
	rngp->buffer[last] = byte;
   1e8d6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e8d8:	3201      	adds	r2, #1
   1e8da:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e8dc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e8e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e8e4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e8e6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e8e8:	3201      	adds	r2, #1
   1e8ea:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e8ec:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e8f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e8f4:	4804      	ldr	r0, [pc, #16]	; (1e908 <isr+0x70>)
}
   1e8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e8fa:	f003 b81f 	b.w	2193c <z_impl_k_sem_give>
   1e8fe:	bf00      	nop
   1e900:	200031a8 	.word	0x200031a8
   1e904:	4000d004 	.word	0x4000d004
   1e908:	200031c0 	.word	0x200031c0

0001e90c <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1e90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e90e:	460f      	mov	r7, r1
   1e910:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1e912:	b948      	cbnz	r0, 1e928 <entropy_cc3xx_rng_get_entropy+0x1c>
   1e914:	4919      	ldr	r1, [pc, #100]	; (1e97c <entropy_cc3xx_rng_get_entropy+0x70>)
   1e916:	481a      	ldr	r0, [pc, #104]	; (1e980 <entropy_cc3xx_rng_get_entropy+0x74>)
   1e918:	4a1a      	ldr	r2, [pc, #104]	; (1e984 <entropy_cc3xx_rng_get_entropy+0x78>)
   1e91a:	2324      	movs	r3, #36	; 0x24
   1e91c:	f008 fdeb 	bl	274f6 <printk>
   1e920:	4818      	ldr	r0, [pc, #96]	; (1e984 <entropy_cc3xx_rng_get_entropy+0x78>)
   1e922:	2124      	movs	r1, #36	; 0x24
   1e924:	f009 f88c 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1e928:	b94f      	cbnz	r7, 1e93e <entropy_cc3xx_rng_get_entropy+0x32>
   1e92a:	4917      	ldr	r1, [pc, #92]	; (1e988 <entropy_cc3xx_rng_get_entropy+0x7c>)
   1e92c:	4814      	ldr	r0, [pc, #80]	; (1e980 <entropy_cc3xx_rng_get_entropy+0x74>)
   1e92e:	4a15      	ldr	r2, [pc, #84]	; (1e984 <entropy_cc3xx_rng_get_entropy+0x78>)
   1e930:	2325      	movs	r3, #37	; 0x25
   1e932:	f008 fde0 	bl	274f6 <printk>
   1e936:	4813      	ldr	r0, [pc, #76]	; (1e984 <entropy_cc3xx_rng_get_entropy+0x78>)
   1e938:	2125      	movs	r1, #37	; 0x25
   1e93a:	f009 f881 	bl	27a40 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e93e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1e942:	2400      	movs	r4, #0
   1e944:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   1e948:	42a6      	cmp	r6, r4
   1e94a:	d801      	bhi.n	1e950 <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   1e94c:	b003      	add	sp, #12
   1e94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e950:	1b33      	subs	r3, r6, r4
   1e952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e956:	bf38      	it	cc
   1e958:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1e95a:	462a      	mov	r2, r5
   1e95c:	ab01      	add	r3, sp, #4
   1e95e:	1939      	adds	r1, r7, r4
   1e960:	2000      	movs	r0, #0
   1e962:	f006 f967 	bl	24c34 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   1e966:	9b01      	ldr	r3, [sp, #4]
   1e968:	42ab      	cmp	r3, r5
   1e96a:	d103      	bne.n	1e974 <entropy_cc3xx_rng_get_entropy+0x68>
		if (res != 0) {
   1e96c:	2800      	cmp	r0, #0
   1e96e:	d1ed      	bne.n	1e94c <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   1e970:	442c      	add	r4, r5
   1e972:	e7e9      	b.n	1e948 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   1e974:	f06f 0015 	mvn.w	r0, #21
   1e978:	e7e8      	b.n	1e94c <entropy_cc3xx_rng_get_entropy+0x40>
   1e97a:	bf00      	nop
   1e97c:	00030edb 	.word	0x00030edb
   1e980:	0002dcd3 	.word	0x0002dcd3
   1e984:	00030eab 	.word	0x00030eab
   1e988:	00030eee 	.word	0x00030eee

0001e98c <z_impl_gpio_pin_configure>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e98c:	6843      	ldr	r3, [r0, #4]
{
   1e98e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e992:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
   1e994:	f8d0 9008 	ldr.w	r9, [r0, #8]
	struct gpio_driver_data *data =
   1e998:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e99c:	2601      	movs	r6, #1
   1e99e:	408e      	lsls	r6, r1
   1e9a0:	421e      	tst	r6, r3
{
   1e9a2:	4604      	mov	r4, r0
   1e9a4:	460d      	mov	r5, r1
   1e9a6:	4617      	mov	r7, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e9a8:	d10e      	bne.n	1e9c8 <z_impl_gpio_pin_configure+0x3c>
   1e9aa:	490e      	ldr	r1, [pc, #56]	; (1e9e4 <z_impl_gpio_pin_configure+0x58>)
   1e9ac:	4a0e      	ldr	r2, [pc, #56]	; (1e9e8 <z_impl_gpio_pin_configure+0x5c>)
   1e9ae:	480f      	ldr	r0, [pc, #60]	; (1e9ec <z_impl_gpio_pin_configure+0x60>)
   1e9b0:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1e9b4:	f008 fd9f 	bl	274f6 <printk>
   1e9b8:	480d      	ldr	r0, [pc, #52]	; (1e9f0 <z_impl_gpio_pin_configure+0x64>)
   1e9ba:	f008 fd9c 	bl	274f6 <printk>
   1e9be:	480a      	ldr	r0, [pc, #40]	; (1e9e8 <z_impl_gpio_pin_configure+0x5c>)
   1e9c0:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1e9c4:	f009 f83c 	bl	27a40 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e9c8:	f8d8 3000 	ldr.w	r3, [r8]
   1e9cc:	ea23 0606 	bic.w	r6, r3, r6
   1e9d0:	f8c8 6000 	str.w	r6, [r8]
	}

	return api->pin_configure(port, pin, flags);
   1e9d4:	f8d9 3000 	ldr.w	r3, [r9]
   1e9d8:	463a      	mov	r2, r7
   1e9da:	4629      	mov	r1, r5
   1e9dc:	4620      	mov	r0, r4
}
   1e9de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_configure(port, pin, flags);
   1e9e2:	4718      	bx	r3
   1e9e4:	00030f39 	.word	0x00030f39
   1e9e8:	00030f0f 	.word	0x00030f0f
   1e9ec:	0002dcd3 	.word	0x0002dcd3
   1e9f0:	00030f77 	.word	0x00030f77

0001e9f4 <z_impl_gpio_pin_interrupt_configure>:
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1e9f4:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   1e9f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   1e9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_driver_config *const cfg =
   1ea00:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
   1ea04:	4605      	mov	r5, r0
   1ea06:	460e      	mov	r6, r1
   1ea08:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1ea0a:	d142      	bne.n	1ea92 <z_impl_gpio_pin_interrupt_configure+0x9e>
   1ea0c:	4928      	ldr	r1, [pc, #160]	; (1eab0 <z_impl_gpio_pin_interrupt_configure+0xbc>)
   1ea0e:	4a29      	ldr	r2, [pc, #164]	; (1eab4 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   1ea10:	4829      	ldr	r0, [pc, #164]	; (1eab8 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   1ea12:	f44f 731f 	mov.w	r3, #636	; 0x27c
   1ea16:	f008 fd6e 	bl	274f6 <printk>
   1ea1a:	4828      	ldr	r0, [pc, #160]	; (1eabc <z_impl_gpio_pin_interrupt_configure+0xc8>)
   1ea1c:	f008 fd6b 	bl	274f6 <printk>
   1ea20:	f44f 711f 	mov.w	r1, #636	; 0x27c
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1ea24:	4823      	ldr	r0, [pc, #140]	; (1eab4 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   1ea26:	f009 f80b 	bl	27a40 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1ea2a:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1ea2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1ea32:	d10e      	bne.n	1ea52 <z_impl_gpio_pin_interrupt_configure+0x5e>
   1ea34:	4922      	ldr	r1, [pc, #136]	; (1eac0 <z_impl_gpio_pin_interrupt_configure+0xcc>)
   1ea36:	4a1f      	ldr	r2, [pc, #124]	; (1eab4 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   1ea38:	481f      	ldr	r0, [pc, #124]	; (1eab8 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   1ea3a:	f240 238a 	movw	r3, #650	; 0x28a
   1ea3e:	f008 fd5a 	bl	274f6 <printk>
   1ea42:	4820      	ldr	r0, [pc, #128]	; (1eac4 <z_impl_gpio_pin_interrupt_configure+0xd0>)
   1ea44:	f008 fd57 	bl	274f6 <printk>
   1ea48:	481a      	ldr	r0, [pc, #104]	; (1eab4 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   1ea4a:	f240 218a 	movw	r1, #650	; 0x28a
   1ea4e:	f008 fff7 	bl	27a40 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ea52:	f8d8 2000 	ldr.w	r2, [r8]
   1ea56:	2301      	movs	r3, #1
   1ea58:	40b3      	lsls	r3, r6
   1ea5a:	4213      	tst	r3, r2
   1ea5c:	d10e      	bne.n	1ea7c <z_impl_gpio_pin_interrupt_configure+0x88>
   1ea5e:	491a      	ldr	r1, [pc, #104]	; (1eac8 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1ea60:	4a14      	ldr	r2, [pc, #80]	; (1eab4 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   1ea62:	4815      	ldr	r0, [pc, #84]	; (1eab8 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   1ea64:	f44f 7324 	mov.w	r3, #656	; 0x290
   1ea68:	f008 fd45 	bl	274f6 <printk>
   1ea6c:	4817      	ldr	r0, [pc, #92]	; (1eacc <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1ea6e:	f008 fd42 	bl	274f6 <printk>
   1ea72:	4810      	ldr	r0, [pc, #64]	; (1eab4 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   1ea74:	f44f 7124 	mov.w	r1, #656	; 0x290
   1ea78:	f008 ffe2 	bl	27a40 <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ea7c:	69bf      	ldr	r7, [r7, #24]
   1ea7e:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1ea82:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
   1ea86:	4631      	mov	r1, r6
   1ea88:	4628      	mov	r0, r5
   1ea8a:	46bc      	mov	ip, r7
}
   1ea8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ea90:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1ea92:	2b00      	cmp	r3, #0
   1ea94:	d1c9      	bne.n	1ea2a <z_impl_gpio_pin_interrupt_configure+0x36>
   1ea96:	490e      	ldr	r1, [pc, #56]	; (1ead0 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1ea98:	4a06      	ldr	r2, [pc, #24]	; (1eab4 <z_impl_gpio_pin_interrupt_configure+0xc0>)
   1ea9a:	4807      	ldr	r0, [pc, #28]	; (1eab8 <z_impl_gpio_pin_interrupt_configure+0xc4>)
   1ea9c:	f44f 7320 	mov.w	r3, #640	; 0x280
   1eaa0:	f008 fd29 	bl	274f6 <printk>
   1eaa4:	480b      	ldr	r0, [pc, #44]	; (1ead4 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1eaa6:	f008 fd26 	bl	274f6 <printk>
   1eaaa:	f44f 7120 	mov.w	r1, #640	; 0x280
   1eaae:	e7b9      	b.n	1ea24 <z_impl_gpio_pin_interrupt_configure+0x30>
   1eab0:	00030f89 	.word	0x00030f89
   1eab4:	00030f0f 	.word	0x00030f0f
   1eab8:	0002dcd3 	.word	0x0002dcd3
   1eabc:	00030fca 	.word	0x00030fca
   1eac0:	0003104b 	.word	0x0003104b
   1eac4:	00031095 	.word	0x00031095
   1eac8:	00030f39 	.word	0x00030f39
   1eacc:	00030f77 	.word	0x00030f77
   1ead0:	00030ff6 	.word	0x00030ff6
   1ead4:	00031020 	.word	0x00031020

0001ead8 <gpio_pin_set_raw>:
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ead8:	6843      	ldr	r3, [r0, #4]
{
   1eada:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1eadc:	681b      	ldr	r3, [r3, #0]
   1eade:	2501      	movs	r5, #1
   1eae0:	408d      	lsls	r5, r1
   1eae2:	421d      	tst	r5, r3
{
   1eae4:	4604      	mov	r4, r0
   1eae6:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1eae8:	d10e      	bne.n	1eb08 <gpio_pin_set_raw+0x30>
   1eaea:	490d      	ldr	r1, [pc, #52]	; (1eb20 <gpio_pin_set_raw+0x48>)
   1eaec:	4a0d      	ldr	r2, [pc, #52]	; (1eb24 <gpio_pin_set_raw+0x4c>)
   1eaee:	480e      	ldr	r0, [pc, #56]	; (1eb28 <gpio_pin_set_raw+0x50>)
   1eaf0:	f240 4384 	movw	r3, #1156	; 0x484
   1eaf4:	f008 fcff 	bl	274f6 <printk>
   1eaf8:	480c      	ldr	r0, [pc, #48]	; (1eb2c <gpio_pin_set_raw+0x54>)
   1eafa:	f008 fcfc 	bl	274f6 <printk>
   1eafe:	4809      	ldr	r0, [pc, #36]	; (1eb24 <gpio_pin_set_raw+0x4c>)
   1eb00:	f240 4184 	movw	r1, #1156	; 0x484
   1eb04:	f008 ff9c 	bl	27a40 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   1eb08:	b136      	cbz	r6, 1eb18 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   1eb0a:	68a3      	ldr	r3, [r4, #8]
   1eb0c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1eb0e:	4629      	mov	r1, r5
   1eb10:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   1eb12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   1eb16:	4718      	bx	r3
   1eb18:	68a3      	ldr	r3, [r4, #8]
   1eb1a:	691b      	ldr	r3, [r3, #16]
   1eb1c:	e7f7      	b.n	1eb0e <gpio_pin_set_raw+0x36>
   1eb1e:	bf00      	nop
   1eb20:	00030f39 	.word	0x00030f39
   1eb24:	00030f0f 	.word	0x00030f0f
   1eb28:	0002dcd3 	.word	0x0002dcd3
   1eb2c:	00030f77 	.word	0x00030f77

0001eb30 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   1eb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   1eb34:	2400      	movs	r4, #0
   1eb36:	4f23      	ldr	r7, [pc, #140]	; (1ebc4 <get_buttons+0x94>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1eb38:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1ebdc <get_buttons+0xac>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1eb3c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1ebe0 <get_buttons+0xb0>
   1eb40:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1ebe4 <get_buttons+0xb4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1eb44:	4625      	mov	r5, r4
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1eb46:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   1eb4a:	f857 bb04 	ldr.w	fp, [r7], #4
   1eb4e:	791b      	ldrb	r3, [r3, #4]
   1eb50:	2601      	movs	r6, #1
   1eb52:	409e      	lsls	r6, r3
   1eb54:	f8db 3004 	ldr.w	r3, [fp, #4]
   1eb58:	681b      	ldr	r3, [r3, #0]
   1eb5a:	421e      	tst	r6, r3
   1eb5c:	d10e      	bne.n	1eb7c <get_buttons+0x4c>
   1eb5e:	4651      	mov	r1, sl
   1eb60:	4819      	ldr	r0, [pc, #100]	; (1ebc8 <get_buttons+0x98>)
   1eb62:	f240 432d 	movw	r3, #1069	; 0x42d
   1eb66:	4642      	mov	r2, r8
   1eb68:	f008 fcc5 	bl	274f6 <printk>
   1eb6c:	4817      	ldr	r0, [pc, #92]	; (1ebcc <get_buttons+0x9c>)
   1eb6e:	f008 fcc2 	bl	274f6 <printk>
   1eb72:	f240 412d 	movw	r1, #1069	; 0x42d
   1eb76:	4640      	mov	r0, r8
   1eb78:	f008 ff62 	bl	27a40 <assert_post_action>
	return api->port_get_raw(port, value);
   1eb7c:	f8db 3008 	ldr.w	r3, [fp, #8]
   1eb80:	a901      	add	r1, sp, #4
   1eb82:	685b      	ldr	r3, [r3, #4]
   1eb84:	4658      	mov	r0, fp
   1eb86:	4798      	blx	r3
	if (ret == 0) {
   1eb88:	2800      	cmp	r0, #0
   1eb8a:	d10a      	bne.n	1eba2 <get_buttons+0x72>
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1eb8c:	9b01      	ldr	r3, [sp, #4]
   1eb8e:	421e      	tst	r6, r3
   1eb90:	d003      	beq.n	1eb9a <get_buttons+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1eb92:	3501      	adds	r5, #1
   1eb94:	2d04      	cmp	r5, #4
   1eb96:	d1d6      	bne.n	1eb46 <get_buttons+0x16>
   1eb98:	e00f      	b.n	1ebba <get_buttons+0x8a>
		    (!val && IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS))) {
			ret |= 1U << i;
   1eb9a:	2301      	movs	r3, #1
   1eb9c:	40ab      	lsls	r3, r5
   1eb9e:	431c      	orrs	r4, r3
   1eba0:	e7f7      	b.n	1eb92 <get_buttons+0x62>
		if (val < 0) {
   1eba2:	daf6      	bge.n	1eb92 <get_buttons+0x62>
   1eba4:	4b0a      	ldr	r3, [pc, #40]	; (1ebd0 <get_buttons+0xa0>)
   1eba6:	490b      	ldr	r1, [pc, #44]	; (1ebd4 <get_buttons+0xa4>)
			LOG_ERR("Cannot read gpio pin");
   1eba8:	480b      	ldr	r0, [pc, #44]	; (1ebd8 <get_buttons+0xa8>)
   1ebaa:	1ac9      	subs	r1, r1, r3
   1ebac:	08c9      	lsrs	r1, r1, #3
   1ebae:	0189      	lsls	r1, r1, #6
   1ebb0:	f041 0101 	orr.w	r1, r1, #1
   1ebb4:	f008 ff72 	bl	27a9c <log_0>
			return 0;
   1ebb8:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   1ebba:	4620      	mov	r0, r4
   1ebbc:	b003      	add	sp, #12
   1ebbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebc2:	bf00      	nop
   1ebc4:	20003200 	.word	0x20003200
   1ebc8:	0002dcd3 	.word	0x0002dcd3
   1ebcc:	00030f77 	.word	0x00030f77
   1ebd0:	0002ccb8 	.word	0x0002ccb8
   1ebd4:	0002cd38 	.word	0x0002cd38
   1ebd8:	000310da 	.word	0x000310da
   1ebdc:	0002d6d0 	.word	0x0002d6d0
   1ebe0:	00030f0f 	.word	0x00030f0f
   1ebe4:	00030f39 	.word	0x00030f39

0001ebe8 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1ebe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   1ebec:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1ec50 <dk_set_leds_state.part.0+0x68>
   1ebf0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1ec54 <dk_set_leds_state.part.0+0x6c>
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1ebf4:	4606      	mov	r6, r0
   1ebf6:	460f      	mov	r7, r1
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1ebf8:	2400      	movs	r4, #0
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1ebfa:	fa26 f204 	lsr.w	r2, r6, r4
   1ebfe:	fa27 f304 	lsr.w	r3, r7, r4
   1ec02:	4313      	orrs	r3, r2
   1ec04:	07db      	lsls	r3, r3, #31
   1ec06:	d518      	bpl.n	1ec3a <dk_set_leds_state.part.0+0x52>
			int err = gpio_pin_set_raw(led_devs[i],
   1ec08:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1ec0c:	43d2      	mvns	r2, r2
   1ec0e:	7919      	ldrb	r1, [r3, #4]
   1ec10:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   1ec14:	f002 0201 	and.w	r2, r2, #1
   1ec18:	f7ff ff5e 	bl	1ead8 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   1ec1c:	4605      	mov	r5, r0
   1ec1e:	b160      	cbz	r0, 1ec3a <dk_set_leds_state.part.0+0x52>
   1ec20:	4908      	ldr	r1, [pc, #32]	; (1ec44 <dk_set_leds_state.part.0+0x5c>)
   1ec22:	4b09      	ldr	r3, [pc, #36]	; (1ec48 <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   1ec24:	4809      	ldr	r0, [pc, #36]	; (1ec4c <dk_set_leds_state.part.0+0x64>)
   1ec26:	1ac9      	subs	r1, r1, r3
   1ec28:	08c9      	lsrs	r1, r1, #3
   1ec2a:	0189      	lsls	r1, r1, #6
   1ec2c:	f041 0101 	orr.w	r1, r1, #1
   1ec30:	f008 ff34 	bl	27a9c <log_0>
			}
		}
	}

	return 0;
}
   1ec34:	4628      	mov	r0, r5
   1ec36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1ec3a:	3401      	adds	r4, #1
   1ec3c:	2c04      	cmp	r4, #4
   1ec3e:	d1dc      	bne.n	1ebfa <dk_set_leds_state.part.0+0x12>
	return 0;
   1ec40:	2500      	movs	r5, #0
   1ec42:	e7f7      	b.n	1ec34 <dk_set_leds_state.part.0+0x4c>
   1ec44:	0002cd38 	.word	0x0002cd38
   1ec48:	0002ccb8 	.word	0x0002ccb8
   1ec4c:	000310ef 	.word	0x000310ef
   1ec50:	0002d6f0 	.word	0x0002d6f0
   1ec54:	20003244 	.word	0x20003244

0001ec58 <button_pressed>:
{
   1ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1ec5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec5e:	f3ef 8511 	mrs	r5, BASEPRI
   1ec62:	f383 8811 	msr	BASEPRI, r3
   1ec66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ec6a:	482f      	ldr	r0, [pc, #188]	; (1ed28 <button_pressed+0xd0>)
   1ec6c:	f002 fae8 	bl	21240 <z_spin_lock_valid>
   1ec70:	b968      	cbnz	r0, 1ec8e <button_pressed+0x36>
   1ec72:	4a2e      	ldr	r2, [pc, #184]	; (1ed2c <button_pressed+0xd4>)
   1ec74:	492e      	ldr	r1, [pc, #184]	; (1ed30 <button_pressed+0xd8>)
   1ec76:	482f      	ldr	r0, [pc, #188]	; (1ed34 <button_pressed+0xdc>)
   1ec78:	2381      	movs	r3, #129	; 0x81
   1ec7a:	f008 fc3c 	bl	274f6 <printk>
   1ec7e:	492a      	ldr	r1, [pc, #168]	; (1ed28 <button_pressed+0xd0>)
   1ec80:	482d      	ldr	r0, [pc, #180]	; (1ed38 <button_pressed+0xe0>)
   1ec82:	f008 fc38 	bl	274f6 <printk>
   1ec86:	4829      	ldr	r0, [pc, #164]	; (1ed2c <button_pressed+0xd4>)
   1ec88:	2181      	movs	r1, #129	; 0x81
   1ec8a:	f008 fed9 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ec8e:	4826      	ldr	r0, [pc, #152]	; (1ed28 <button_pressed+0xd0>)
   1ec90:	4e2a      	ldr	r6, [pc, #168]	; (1ed3c <button_pressed+0xe4>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   1ec92:	4f2b      	ldr	r7, [pc, #172]	; (1ed40 <button_pressed+0xe8>)
   1ec94:	f002 faf2 	bl	2127c <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1ec98:	2400      	movs	r4, #0
			err = gpio_pin_interrupt_configure(button_devs[i],
   1ec9a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1ec9e:	f856 0b04 	ldr.w	r0, [r6], #4
   1eca2:	7919      	ldrb	r1, [r3, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1eca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1eca8:	3401      	adds	r4, #1
   1ecaa:	f7ff fea3 	bl	1e9f4 <z_impl_gpio_pin_interrupt_configure>
   1ecae:	2c04      	cmp	r4, #4
   1ecb0:	d00c      	beq.n	1eccc <button_pressed+0x74>
   1ecb2:	2800      	cmp	r0, #0
   1ecb4:	d0f1      	beq.n	1ec9a <button_pressed+0x42>
   1ecb6:	4b23      	ldr	r3, [pc, #140]	; (1ed44 <button_pressed+0xec>)
   1ecb8:	4923      	ldr	r1, [pc, #140]	; (1ed48 <button_pressed+0xf0>)
		LOG_ERR("Cannot disable callbacks");
   1ecba:	4824      	ldr	r0, [pc, #144]	; (1ed4c <button_pressed+0xf4>)
   1ecbc:	1ac9      	subs	r1, r1, r3
   1ecbe:	08c9      	lsrs	r1, r1, #3
   1ecc0:	0189      	lsls	r1, r1, #6
   1ecc2:	f041 0101 	orr.w	r1, r1, #1
   1ecc6:	f008 fee9 	bl	27a9c <log_0>
   1ecca:	e001      	b.n	1ecd0 <button_pressed+0x78>
	if (err) {
   1eccc:	2800      	cmp	r0, #0
   1ecce:	d1f2      	bne.n	1ecb6 <button_pressed+0x5e>
	switch (state) {
   1ecd0:	4b1f      	ldr	r3, [pc, #124]	; (1ed50 <button_pressed+0xf8>)
   1ecd2:	781a      	ldrb	r2, [r3, #0]
   1ecd4:	b9ea      	cbnz	r2, 1ed12 <button_pressed+0xba>
		state = STATE_SCANNING;
   1ecd6:	2201      	movs	r2, #1
   1ecd8:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1ecda:	481e      	ldr	r0, [pc, #120]	; (1ed54 <button_pressed+0xfc>)
   1ecdc:	2221      	movs	r2, #33	; 0x21
   1ecde:	2300      	movs	r3, #0
   1ece0:	f003 fb68 	bl	223b4 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ece4:	4810      	ldr	r0, [pc, #64]	; (1ed28 <button_pressed+0xd0>)
   1ece6:	f002 fab9 	bl	2125c <z_spin_unlock_valid>
   1ecea:	b968      	cbnz	r0, 1ed08 <button_pressed+0xb0>
   1ecec:	4a0f      	ldr	r2, [pc, #60]	; (1ed2c <button_pressed+0xd4>)
   1ecee:	491a      	ldr	r1, [pc, #104]	; (1ed58 <button_pressed+0x100>)
   1ecf0:	4810      	ldr	r0, [pc, #64]	; (1ed34 <button_pressed+0xdc>)
   1ecf2:	23ac      	movs	r3, #172	; 0xac
   1ecf4:	f008 fbff 	bl	274f6 <printk>
   1ecf8:	490b      	ldr	r1, [pc, #44]	; (1ed28 <button_pressed+0xd0>)
   1ecfa:	4818      	ldr	r0, [pc, #96]	; (1ed5c <button_pressed+0x104>)
   1ecfc:	f008 fbfb 	bl	274f6 <printk>
   1ed00:	480a      	ldr	r0, [pc, #40]	; (1ed2c <button_pressed+0xd4>)
   1ed02:	21ac      	movs	r1, #172	; 0xac
   1ed04:	f008 fe9c 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   1ed08:	f385 8811 	msr	BASEPRI, r5
   1ed0c:	f3bf 8f6f 	isb	sy
}
   1ed10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   1ed12:	4a13      	ldr	r2, [pc, #76]	; (1ed60 <button_pressed+0x108>)
   1ed14:	4913      	ldr	r1, [pc, #76]	; (1ed64 <button_pressed+0x10c>)
   1ed16:	4807      	ldr	r0, [pc, #28]	; (1ed34 <button_pressed+0xdc>)
   1ed18:	23e8      	movs	r3, #232	; 0xe8
   1ed1a:	f008 fbec 	bl	274f6 <printk>
   1ed1e:	4810      	ldr	r0, [pc, #64]	; (1ed60 <button_pressed+0x108>)
   1ed20:	21e8      	movs	r1, #232	; 0xe8
   1ed22:	f008 fe8d 	bl	27a40 <assert_post_action>
		break;
   1ed26:	e7dd      	b.n	1ece4 <button_pressed+0x8c>
   1ed28:	20003254 	.word	0x20003254
   1ed2c:	0002dd93 	.word	0x0002dd93
   1ed30:	0002dde5 	.word	0x0002dde5
   1ed34:	0002dcd3 	.word	0x0002dcd3
   1ed38:	0002ddfa 	.word	0x0002ddfa
   1ed3c:	20003200 	.word	0x20003200
   1ed40:	0002d6d0 	.word	0x0002d6d0
   1ed44:	0002ccb8 	.word	0x0002ccb8
   1ed48:	0002cd38 	.word	0x0002cd38
   1ed4c:	00031105 	.word	0x00031105
   1ed50:	20003eb4 	.word	0x20003eb4
   1ed54:	20001e78 	.word	0x20001e78
   1ed58:	0002ddb9 	.word	0x0002ddb9
   1ed5c:	0002ddd0 	.word	0x0002ddd0
   1ed60:	0003111e 	.word	0x0003111e
   1ed64:	00032142 	.word	0x00032142

0001ed68 <buttons_scan_fn>:
{
   1ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   1ed6c:	f7ff fee0 	bl	1eb30 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ed70:	f3bf 8f5b 	dmb	ish
   1ed74:	4b53      	ldr	r3, [pc, #332]	; (1eec4 <buttons_scan_fn+0x15c>)
   1ed76:	4604      	mov	r4, r0
   1ed78:	e853 2f00 	ldrex	r2, [r3]
   1ed7c:	e843 4100 	strex	r1, r4, [r3]
   1ed80:	2900      	cmp	r1, #0
   1ed82:	d1f9      	bne.n	1ed78 <buttons_scan_fn+0x10>
   1ed84:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1ed88:	4b4f      	ldr	r3, [pc, #316]	; (1eec8 <buttons_scan_fn+0x160>)
   1ed8a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 1ef14 <buttons_scan_fn+0x1ac>
   1ed8e:	781a      	ldrb	r2, [r3, #0]
   1ed90:	bb72      	cbnz	r2, 1edf0 <buttons_scan_fn+0x88>
		if (button_scan != last_button_scan) {
   1ed92:	f8d8 6000 	ldr.w	r6, [r8]
   1ed96:	42a6      	cmp	r6, r4
   1ed98:	d012      	beq.n	1edc0 <buttons_scan_fn+0x58>
	if (button_handler_cb != NULL) {
   1ed9a:	4b4c      	ldr	r3, [pc, #304]	; (1eecc <buttons_scan_fn+0x164>)
   1ed9c:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1ed9e:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1eda0:	b10b      	cbz	r3, 1eda6 <buttons_scan_fn+0x3e>
		button_handler_cb(button_state, has_changed);
   1eda2:	4631      	mov	r1, r6
   1eda4:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1eda6:	f04f 33ff 	mov.w	r3, #4294967295
   1edaa:	4849      	ldr	r0, [pc, #292]	; (1eed0 <buttons_scan_fn+0x168>)
   1edac:	f04f 32ff 	mov.w	r2, #4294967295
   1edb0:	f002 fa98 	bl	212e4 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1edb4:	4b47      	ldr	r3, [pc, #284]	; (1eed4 <buttons_scan_fn+0x16c>)
   1edb6:	681d      	ldr	r5, [r3, #0]
   1edb8:	b96d      	cbnz	r5, 1edd6 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   1edba:	4845      	ldr	r0, [pc, #276]	; (1eed0 <buttons_scan_fn+0x168>)
   1edbc:	f002 fb92 	bl	214e4 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1edc0:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   1edc4:	b1bc      	cbz	r4, 1edf6 <buttons_scan_fn+0x8e>
}
   1edc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   1edca:	4843      	ldr	r0, [pc, #268]	; (1eed8 <buttons_scan_fn+0x170>)
   1edcc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1edd0:	2300      	movs	r3, #0
   1edd2:	f003 baef 	b.w	223b4 <k_work_reschedule>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1edd6:	3d04      	subs	r5, #4
   1edd8:	2d00      	cmp	r5, #0
   1edda:	d0ee      	beq.n	1edba <buttons_scan_fn+0x52>
			handler->cb(button_state, has_changed);
   1eddc:	462f      	mov	r7, r5
   1edde:	4631      	mov	r1, r6
   1ede0:	f857 3b04 	ldr.w	r3, [r7], #4
   1ede4:	4620      	mov	r0, r4
   1ede6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ede8:	2f00      	cmp	r7, #0
   1edea:	d0e6      	beq.n	1edba <buttons_scan_fn+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1edec:	686d      	ldr	r5, [r5, #4]
	return node->next;
   1edee:	e7e3      	b.n	1edb8 <buttons_scan_fn+0x50>
		initial_run = false;
   1edf0:	2200      	movs	r2, #0
   1edf2:	701a      	strb	r2, [r3, #0]
   1edf4:	e7e4      	b.n	1edc0 <buttons_scan_fn+0x58>
	__asm__ volatile(
   1edf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1edfa:	f3ef 8711 	mrs	r7, BASEPRI
   1edfe:	f383 8811 	msr	BASEPRI, r3
   1ee02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ee06:	4835      	ldr	r0, [pc, #212]	; (1eedc <buttons_scan_fn+0x174>)
   1ee08:	f002 fa1a 	bl	21240 <z_spin_lock_valid>
   1ee0c:	b968      	cbnz	r0, 1ee2a <buttons_scan_fn+0xc2>
   1ee0e:	4a34      	ldr	r2, [pc, #208]	; (1eee0 <buttons_scan_fn+0x178>)
   1ee10:	4934      	ldr	r1, [pc, #208]	; (1eee4 <buttons_scan_fn+0x17c>)
   1ee12:	4835      	ldr	r0, [pc, #212]	; (1eee8 <buttons_scan_fn+0x180>)
   1ee14:	2381      	movs	r3, #129	; 0x81
   1ee16:	f008 fb6e 	bl	274f6 <printk>
   1ee1a:	4930      	ldr	r1, [pc, #192]	; (1eedc <buttons_scan_fn+0x174>)
   1ee1c:	4833      	ldr	r0, [pc, #204]	; (1eeec <buttons_scan_fn+0x184>)
   1ee1e:	f008 fb6a 	bl	274f6 <printk>
   1ee22:	482f      	ldr	r0, [pc, #188]	; (1eee0 <buttons_scan_fn+0x178>)
   1ee24:	2181      	movs	r1, #129	; 0x81
   1ee26:	f008 fe0b 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ee2a:	482c      	ldr	r0, [pc, #176]	; (1eedc <buttons_scan_fn+0x174>)
   1ee2c:	f002 fa26 	bl	2127c <z_spin_lock_set_owner>
		switch (state) {
   1ee30:	4b2f      	ldr	r3, [pc, #188]	; (1eef0 <buttons_scan_fn+0x188>)
   1ee32:	781a      	ldrb	r2, [r3, #0]
   1ee34:	2a01      	cmp	r2, #1
   1ee36:	d136      	bne.n	1eea6 <buttons_scan_fn+0x13e>
			state = STATE_WAITING;
   1ee38:	2200      	movs	r2, #0
   1ee3a:	4e2e      	ldr	r6, [pc, #184]	; (1eef4 <buttons_scan_fn+0x18c>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   1ee3c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1ef18 <buttons_scan_fn+0x1b0>
			state = STATE_WAITING;
   1ee40:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1ee42:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1ee46:	f856 0b04 	ldr.w	r0, [r6], #4
   1ee4a:	7919      	ldrb	r1, [r3, #4]
   1ee4c:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   1ee50:	f7ff fdd0 	bl	1e9f4 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1ee54:	3401      	adds	r4, #1
   1ee56:	2c04      	cmp	r4, #4
   1ee58:	4605      	mov	r5, r0
   1ee5a:	d001      	beq.n	1ee60 <buttons_scan_fn+0xf8>
   1ee5c:	2800      	cmp	r0, #0
   1ee5e:	d0f0      	beq.n	1ee42 <buttons_scan_fn+0xda>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ee60:	481e      	ldr	r0, [pc, #120]	; (1eedc <buttons_scan_fn+0x174>)
   1ee62:	f002 f9fb 	bl	2125c <z_spin_unlock_valid>
   1ee66:	b968      	cbnz	r0, 1ee84 <buttons_scan_fn+0x11c>
   1ee68:	4a1d      	ldr	r2, [pc, #116]	; (1eee0 <buttons_scan_fn+0x178>)
   1ee6a:	4923      	ldr	r1, [pc, #140]	; (1eef8 <buttons_scan_fn+0x190>)
   1ee6c:	481e      	ldr	r0, [pc, #120]	; (1eee8 <buttons_scan_fn+0x180>)
   1ee6e:	23ac      	movs	r3, #172	; 0xac
   1ee70:	f008 fb41 	bl	274f6 <printk>
   1ee74:	4919      	ldr	r1, [pc, #100]	; (1eedc <buttons_scan_fn+0x174>)
   1ee76:	4821      	ldr	r0, [pc, #132]	; (1eefc <buttons_scan_fn+0x194>)
   1ee78:	f008 fb3d 	bl	274f6 <printk>
   1ee7c:	4818      	ldr	r0, [pc, #96]	; (1eee0 <buttons_scan_fn+0x178>)
   1ee7e:	21ac      	movs	r1, #172	; 0xac
   1ee80:	f008 fdde 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   1ee84:	f387 8811 	msr	BASEPRI, r7
   1ee88:	f3bf 8f6f 	isb	sy
		if (err) {
   1ee8c:	b1bd      	cbz	r5, 1eebe <buttons_scan_fn+0x156>
   1ee8e:	491c      	ldr	r1, [pc, #112]	; (1ef00 <buttons_scan_fn+0x198>)
   1ee90:	4b1c      	ldr	r3, [pc, #112]	; (1ef04 <buttons_scan_fn+0x19c>)
			LOG_ERR("Cannot enable callbacks");
   1ee92:	481d      	ldr	r0, [pc, #116]	; (1ef08 <buttons_scan_fn+0x1a0>)
   1ee94:	1ac9      	subs	r1, r1, r3
   1ee96:	08c9      	lsrs	r1, r1, #3
   1ee98:	0189      	lsls	r1, r1, #6
}
   1ee9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
   1ee9e:	f041 0101 	orr.w	r1, r1, #1
   1eea2:	f008 bdfb 	b.w	27a9c <log_0>
			__ASSERT_NO_MSG(false);
   1eea6:	4a19      	ldr	r2, [pc, #100]	; (1ef0c <buttons_scan_fn+0x1a4>)
   1eea8:	4919      	ldr	r1, [pc, #100]	; (1ef10 <buttons_scan_fn+0x1a8>)
   1eeaa:	480f      	ldr	r0, [pc, #60]	; (1eee8 <buttons_scan_fn+0x180>)
   1eeac:	23b1      	movs	r3, #177	; 0xb1
   1eeae:	f008 fb22 	bl	274f6 <printk>
   1eeb2:	4816      	ldr	r0, [pc, #88]	; (1ef0c <buttons_scan_fn+0x1a4>)
   1eeb4:	21b1      	movs	r1, #177	; 0xb1
   1eeb6:	f008 fdc3 	bl	27a40 <assert_post_action>
		int err = 0;
   1eeba:	2500      	movs	r5, #0
			break;
   1eebc:	e7d0      	b.n	1ee60 <buttons_scan_fn+0xf8>
}
   1eebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eec2:	bf00      	nop
   1eec4:	20003258 	.word	0x20003258
   1eec8:	2000070f 	.word	0x2000070f
   1eecc:	20003210 	.word	0x20003210
   1eed0:	20003214 	.word	0x20003214
   1eed4:	20003228 	.word	0x20003228
   1eed8:	20001e78 	.word	0x20001e78
   1eedc:	20003254 	.word	0x20003254
   1eee0:	0002dd93 	.word	0x0002dd93
   1eee4:	0002dde5 	.word	0x0002dde5
   1eee8:	0002dcd3 	.word	0x0002dcd3
   1eeec:	0002ddfa 	.word	0x0002ddfa
   1eef0:	20003eb4 	.word	0x20003eb4
   1eef4:	20003200 	.word	0x20003200
   1eef8:	0002ddb9 	.word	0x0002ddb9
   1eefc:	0002ddd0 	.word	0x0002ddd0
   1ef00:	0002cd38 	.word	0x0002cd38
   1ef04:	0002ccb8 	.word	0x0002ccb8
   1ef08:	0003115c 	.word	0x0003115c
   1ef0c:	0003111e 	.word	0x0003111e
   1ef10:	00032142 	.word	0x00032142
   1ef14:	2000323c 	.word	0x2000323c
   1ef18:	0002d6d0 	.word	0x0002d6d0

0001ef1c <dk_leds_init>:
{
   1ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef1e:	4d19      	ldr	r5, [pc, #100]	; (1ef84 <dk_leds_init+0x68>)
   1ef20:	4f19      	ldr	r7, [pc, #100]	; (1ef88 <dk_leds_init+0x6c>)
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1ef22:	2600      	movs	r6, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   1ef24:	6828      	ldr	r0, [r5, #0]
   1ef26:	f001 fcb9 	bl	2089c <z_impl_device_get_binding>
   1ef2a:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   1ef2e:	b968      	cbnz	r0, 1ef4c <dk_leds_init+0x30>
   1ef30:	4b16      	ldr	r3, [pc, #88]	; (1ef8c <dk_leds_init+0x70>)
   1ef32:	4917      	ldr	r1, [pc, #92]	; (1ef90 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   1ef34:	4817      	ldr	r0, [pc, #92]	; (1ef94 <dk_leds_init+0x78>)
   1ef36:	1ac9      	subs	r1, r1, r3
   1ef38:	08c9      	lsrs	r1, r1, #3
   1ef3a:	0189      	lsls	r1, r1, #6
   1ef3c:	f041 0101 	orr.w	r1, r1, #1
   1ef40:	f008 fdac 	bl	27a9c <log_0>
			return -ENODEV;
   1ef44:	f06f 0412 	mvn.w	r4, #18
}
   1ef48:	4620      	mov	r0, r4
   1ef4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1ef4c:	7929      	ldrb	r1, [r5, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1ef4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ef52:	f7ff fd1b 	bl	1e98c <z_impl_gpio_pin_configure>
		if (err) {
   1ef56:	4604      	mov	r4, r0
   1ef58:	b150      	cbz	r0, 1ef70 <dk_leds_init+0x54>
   1ef5a:	4b0c      	ldr	r3, [pc, #48]	; (1ef8c <dk_leds_init+0x70>)
   1ef5c:	490c      	ldr	r1, [pc, #48]	; (1ef90 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   1ef5e:	480e      	ldr	r0, [pc, #56]	; (1ef98 <dk_leds_init+0x7c>)
   1ef60:	1ac9      	subs	r1, r1, r3
   1ef62:	08c9      	lsrs	r1, r1, #3
   1ef64:	0189      	lsls	r1, r1, #6
   1ef66:	f041 0101 	orr.w	r1, r1, #1
   1ef6a:	f008 fd97 	bl	27a9c <log_0>
			return err;
   1ef6e:	e7eb      	b.n	1ef48 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1ef70:	3601      	adds	r6, #1
   1ef72:	2e04      	cmp	r6, #4
   1ef74:	f105 0508 	add.w	r5, r5, #8
   1ef78:	d1d4      	bne.n	1ef24 <dk_leds_init+0x8>
}
   1ef7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ef7e:	210f      	movs	r1, #15
   1ef80:	f7ff be32 	b.w	1ebe8 <dk_set_leds_state.part.0>
   1ef84:	0002d6f0 	.word	0x0002d6f0
   1ef88:	20003244 	.word	0x20003244
   1ef8c:	0002ccb8 	.word	0x0002ccb8
   1ef90:	0002cd38 	.word	0x0002cd38
   1ef94:	00031174 	.word	0x00031174
   1ef98:	0003118c 	.word	0x0003118c

0001ef9c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ef9c:	4b07      	ldr	r3, [pc, #28]	; (1efbc <dk_read_buttons+0x20>)
   1ef9e:	f3bf 8f5b 	dmb	ish
   1efa2:	681b      	ldr	r3, [r3, #0]
   1efa4:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   1efa8:	b100      	cbz	r0, 1efac <dk_read_buttons+0x10>
		*button_state = current_state;
   1efaa:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1efac:	4804      	ldr	r0, [pc, #16]	; (1efc0 <dk_read_buttons+0x24>)
   1efae:	b111      	cbz	r1, 1efb6 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1efb0:	6802      	ldr	r2, [r0, #0]
   1efb2:	405a      	eors	r2, r3
   1efb4:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1efb6:	6003      	str	r3, [r0, #0]
}
   1efb8:	4770      	bx	lr
   1efba:	bf00      	nop
   1efbc:	20003258 	.word	0x20003258
   1efc0:	20003240 	.word	0x20003240

0001efc4 <dk_buttons_init>:
{
   1efc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   1efc8:	4b4a      	ldr	r3, [pc, #296]	; (1f0f4 <dk_buttons_init+0x130>)
   1efca:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1efcc:	484a      	ldr	r0, [pc, #296]	; (1f0f8 <dk_buttons_init+0x134>)
   1efce:	4d4b      	ldr	r5, [pc, #300]	; (1f0fc <dk_buttons_init+0x138>)
   1efd0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1f130 <dk_buttons_init+0x16c>
   1efd4:	f00d fb1c 	bl	2c610 <z_impl_k_mutex_init>
   1efd8:	4647      	mov	r7, r8
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1efda:	2600      	movs	r6, #0
   1efdc:	46a9      	mov	r9, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   1efde:	6828      	ldr	r0, [r5, #0]
   1efe0:	f001 fc5c 	bl	2089c <z_impl_device_get_binding>
   1efe4:	f847 0b04 	str.w	r0, [r7], #4
		if (!button_devs[i]) {
   1efe8:	b970      	cbnz	r0, 1f008 <dk_buttons_init+0x44>
   1efea:	4b45      	ldr	r3, [pc, #276]	; (1f100 <dk_buttons_init+0x13c>)
   1efec:	4945      	ldr	r1, [pc, #276]	; (1f104 <dk_buttons_init+0x140>)
			LOG_ERR("Cannot bind gpio device");
   1efee:	4846      	ldr	r0, [pc, #280]	; (1f108 <dk_buttons_init+0x144>)
   1eff0:	1ac9      	subs	r1, r1, r3
   1eff2:	08c9      	lsrs	r1, r1, #3
   1eff4:	0189      	lsls	r1, r1, #6
   1eff6:	f041 0101 	orr.w	r1, r1, #1
   1effa:	f008 fd4f 	bl	27a9c <log_0>
			return -ENODEV;
   1effe:	f06f 0412 	mvn.w	r4, #18
}
   1f002:	4620      	mov	r0, r4
   1f004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1f008:	7929      	ldrb	r1, [r5, #4]
   1f00a:	f44f 7288 	mov.w	r2, #272	; 0x110
   1f00e:	f7ff fcbd 	bl	1e98c <z_impl_gpio_pin_configure>
		if (err) {
   1f012:	4604      	mov	r4, r0
   1f014:	b150      	cbz	r0, 1f02c <dk_buttons_init+0x68>
   1f016:	493b      	ldr	r1, [pc, #236]	; (1f104 <dk_buttons_init+0x140>)
   1f018:	4b39      	ldr	r3, [pc, #228]	; (1f100 <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot configure button gpio");
   1f01a:	483c      	ldr	r0, [pc, #240]	; (1f10c <dk_buttons_init+0x148>)
   1f01c:	1ac9      	subs	r1, r1, r3
   1f01e:	08c9      	lsrs	r1, r1, #3
   1f020:	0189      	lsls	r1, r1, #6
   1f022:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot disable callbacks()");
   1f026:	f008 fd39 	bl	27a9c <log_0>
			return err;
   1f02a:	e7ea      	b.n	1f002 <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f02c:	3601      	adds	r6, #1
   1f02e:	2e04      	cmp	r6, #4
   1f030:	f105 0508 	add.w	r5, r5, #8
   1f034:	d1d3      	bne.n	1efde <dk_buttons_init+0x1a>
   1f036:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 1f130 <dk_buttons_init+0x16c>
	uint32_t pin_mask = 0;
   1f03a:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f03c:	4606      	mov	r6, r0
		pin_mask |= BIT(button_pins[i].number);
   1f03e:	f04f 0b01 	mov.w	fp, #1
		err = gpio_pin_interrupt_configure(button_devs[i],
   1f042:	eb09 03c6 	add.w	r3, r9, r6, lsl #3
   1f046:	f85a 0b04 	ldr.w	r0, [sl], #4
   1f04a:	791f      	ldrb	r7, [r3, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1f04c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1f050:	4639      	mov	r1, r7
   1f052:	f7ff fccf 	bl	1e9f4 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1f056:	4604      	mov	r4, r0
   1f058:	b140      	cbz	r0, 1f06c <dk_buttons_init+0xa8>
   1f05a:	492a      	ldr	r1, [pc, #168]	; (1f104 <dk_buttons_init+0x140>)
   1f05c:	4b28      	ldr	r3, [pc, #160]	; (1f100 <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot disable callbacks()");
   1f05e:	482c      	ldr	r0, [pc, #176]	; (1f110 <dk_buttons_init+0x14c>)
   1f060:	1ac9      	subs	r1, r1, r3
   1f062:	08c9      	lsrs	r1, r1, #3
   1f064:	0189      	lsls	r1, r1, #6
   1f066:	f041 0101 	orr.w	r1, r1, #1
   1f06a:	e7dc      	b.n	1f026 <dk_buttons_init+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f06c:	3601      	adds	r6, #1
		pin_mask |= BIT(button_pins[i].number);
   1f06e:	fa0b f707 	lsl.w	r7, fp, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f072:	2e04      	cmp	r6, #4
		pin_mask |= BIT(button_pins[i].number);
   1f074:	ea45 0507 	orr.w	r5, r5, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f078:	d1e3      	bne.n	1f042 <dk_buttons_init+0x7e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1f07a:	4926      	ldr	r1, [pc, #152]	; (1f114 <dk_buttons_init+0x150>)
   1f07c:	4b26      	ldr	r3, [pc, #152]	; (1f118 <dk_buttons_init+0x154>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f07e:	4606      	mov	r6, r0
	callback->pin_mask = pin_mask;
   1f080:	e9c1 3501 	strd	r3, r5, [r1, #4]

	if (api->manage_callback == NULL) {
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1f084:	460d      	mov	r5, r1
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1f086:	f858 0b04 	ldr.w	r0, [r8], #4
	if (api->manage_callback == NULL) {
   1f08a:	6883      	ldr	r3, [r0, #8]
   1f08c:	69db      	ldr	r3, [r3, #28]
   1f08e:	b16b      	cbz	r3, 1f0ac <dk_buttons_init+0xe8>
	return api->manage_callback(port, callback, true);
   1f090:	2201      	movs	r2, #1
   1f092:	4629      	mov	r1, r5
   1f094:	4798      	blx	r3
		if (err) {
   1f096:	4604      	mov	r4, r0
   1f098:	b158      	cbz	r0, 1f0b2 <dk_buttons_init+0xee>
   1f09a:	491a      	ldr	r1, [pc, #104]	; (1f104 <dk_buttons_init+0x140>)
   1f09c:	4b18      	ldr	r3, [pc, #96]	; (1f100 <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot add callback");
   1f09e:	481f      	ldr	r0, [pc, #124]	; (1f11c <dk_buttons_init+0x158>)
   1f0a0:	1ac9      	subs	r1, r1, r3
   1f0a2:	08c9      	lsrs	r1, r1, #3
   1f0a4:	0189      	lsls	r1, r1, #6
   1f0a6:	f041 0101 	orr.w	r1, r1, #1
   1f0aa:	e7bc      	b.n	1f026 <dk_buttons_init+0x62>
		return -ENOTSUP;
   1f0ac:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1f0b0:	e7f3      	b.n	1f09a <dk_buttons_init+0xd6>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1f0b2:	3601      	adds	r6, #1
   1f0b4:	2e04      	cmp	r6, #4
   1f0b6:	d1e6      	bne.n	1f086 <dk_buttons_init+0xc2>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1f0b8:	4919      	ldr	r1, [pc, #100]	; (1f120 <dk_buttons_init+0x15c>)
   1f0ba:	481a      	ldr	r0, [pc, #104]	; (1f124 <dk_buttons_init+0x160>)
   1f0bc:	f003 f856 	bl	2216c <k_work_init_delayable>
	state = STATE_SCANNING;
   1f0c0:	4b19      	ldr	r3, [pc, #100]	; (1f128 <dk_buttons_init+0x164>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1f0c2:	4818      	ldr	r0, [pc, #96]	; (1f124 <dk_buttons_init+0x160>)
	state = STATE_SCANNING;
   1f0c4:	2201      	movs	r2, #1
   1f0c6:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1f0c8:	2300      	movs	r3, #0
   1f0ca:	2200      	movs	r2, #0
   1f0cc:	f003 f8f6 	bl	222bc <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1f0d0:	4621      	mov	r1, r4
   1f0d2:	4620      	mov	r0, r4
   1f0d4:	f7ff ff62 	bl	1ef9c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1f0d8:	f7ff fd2a 	bl	1eb30 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f0dc:	f3bf 8f5b 	dmb	ish
   1f0e0:	4b12      	ldr	r3, [pc, #72]	; (1f12c <dk_buttons_init+0x168>)
   1f0e2:	e853 2f00 	ldrex	r2, [r3]
   1f0e6:	e843 0100 	strex	r1, r0, [r3]
   1f0ea:	2900      	cmp	r1, #0
   1f0ec:	d1f9      	bne.n	1f0e2 <dk_buttons_init+0x11e>
   1f0ee:	f3bf 8f5b 	dmb	ish
   1f0f2:	e786      	b.n	1f002 <dk_buttons_init+0x3e>
   1f0f4:	20003210 	.word	0x20003210
   1f0f8:	20003214 	.word	0x20003214
   1f0fc:	0002d6d0 	.word	0x0002d6d0
   1f100:	0002ccb8 	.word	0x0002ccb8
   1f104:	0002cd38 	.word	0x0002cd38
   1f108:	00031174 	.word	0x00031174
   1f10c:	000311a6 	.word	0x000311a6
   1f110:	000311c3 	.word	0x000311c3
   1f114:	20003230 	.word	0x20003230
   1f118:	0001ec59 	.word	0x0001ec59
   1f11c:	000311de 	.word	0x000311de
   1f120:	0001ed69 	.word	0x0001ed69
   1f124:	20001e78 	.word	0x20001e78
   1f128:	20003eb4 	.word	0x20003eb4
   1f12c:	20003258 	.word	0x20003258
   1f130:	20003200 	.word	0x20003200

0001f134 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(led_pins)) {
   1f134:	2803      	cmp	r0, #3
{
   1f136:	b510      	push	{r4, lr}
	if (led_idx >= ARRAY_SIZE(led_pins)) {
   1f138:	d90d      	bls.n	1f156 <dk_set_led+0x22>
   1f13a:	4b14      	ldr	r3, [pc, #80]	; (1f18c <dk_set_led+0x58>)
   1f13c:	4914      	ldr	r1, [pc, #80]	; (1f190 <dk_set_led+0x5c>)
		LOG_ERR("LED index out of the range");
   1f13e:	4815      	ldr	r0, [pc, #84]	; (1f194 <dk_set_led+0x60>)
   1f140:	1ac9      	subs	r1, r1, r3
   1f142:	08c9      	lsrs	r1, r1, #3
   1f144:	0189      	lsls	r1, r1, #6
   1f146:	f041 0101 	orr.w	r1, r1, #1
   1f14a:	f008 fca7 	bl	27a9c <log_0>
		return -EINVAL;
   1f14e:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1f152:	4620      	mov	r0, r4
   1f154:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   1f156:	4b10      	ldr	r3, [pc, #64]	; (1f198 <dk_set_led+0x64>)
   1f158:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1f15c:	fab1 f281 	clz	r2, r1
   1f160:	7919      	ldrb	r1, [r3, #4]
   1f162:	4b0e      	ldr	r3, [pc, #56]	; (1f19c <dk_set_led+0x68>)
   1f164:	0952      	lsrs	r2, r2, #5
   1f166:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1f16a:	f7ff fcb5 	bl	1ead8 <gpio_pin_set_raw>
	if (err) {
   1f16e:	4604      	mov	r4, r0
   1f170:	2800      	cmp	r0, #0
   1f172:	d0ee      	beq.n	1f152 <dk_set_led+0x1e>
   1f174:	4b05      	ldr	r3, [pc, #20]	; (1f18c <dk_set_led+0x58>)
   1f176:	4906      	ldr	r1, [pc, #24]	; (1f190 <dk_set_led+0x5c>)
		LOG_ERR("Cannot write LED gpio");
   1f178:	4809      	ldr	r0, [pc, #36]	; (1f1a0 <dk_set_led+0x6c>)
   1f17a:	1ac9      	subs	r1, r1, r3
   1f17c:	08c9      	lsrs	r1, r1, #3
   1f17e:	0189      	lsls	r1, r1, #6
   1f180:	f041 0101 	orr.w	r1, r1, #1
   1f184:	f008 fc8a 	bl	27a9c <log_0>
   1f188:	e7e3      	b.n	1f152 <dk_set_led+0x1e>
   1f18a:	bf00      	nop
   1f18c:	0002ccb8 	.word	0x0002ccb8
   1f190:	0002cd38 	.word	0x0002cd38
   1f194:	000311f2 	.word	0x000311f2
   1f198:	0002d6f0 	.word	0x0002d6f0
   1f19c:	20003244 	.word	0x20003244
   1f1a0:	000310ef 	.word	0x000310ef

0001f1a4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1f1a4:	4602      	mov	r2, r0
   1f1a6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1f1a8:	4801      	ldr	r0, [pc, #4]	; (1f1b0 <multithreading_lock_acquire+0xc>)
   1f1aa:	f002 b89b 	b.w	212e4 <z_impl_k_mutex_lock>
   1f1ae:	bf00      	nop
   1f1b0:	200007cc 	.word	0x200007cc

0001f1b4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1f1b4:	4801      	ldr	r0, [pc, #4]	; (1f1bc <multithreading_lock_release+0x8>)
   1f1b6:	f002 b995 	b.w	214e4 <z_impl_k_mutex_unlock>
   1f1ba:	bf00      	nop
   1f1bc:	200007cc 	.word	0x200007cc

0001f1c0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1f1c0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1f1c2:	f7f2 fdbf 	bl	11d44 <z_impl_log_panic>
   1f1c6:	4b06      	ldr	r3, [pc, #24]	; (1f1e0 <k_sys_fatal_error_handler+0x20>)
   1f1c8:	4906      	ldr	r1, [pc, #24]	; (1f1e4 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1f1ca:	4807      	ldr	r0, [pc, #28]	; (1f1e8 <k_sys_fatal_error_handler+0x28>)
   1f1cc:	1ac9      	subs	r1, r1, r3
   1f1ce:	08c9      	lsrs	r1, r1, #3
   1f1d0:	0189      	lsls	r1, r1, #6
   1f1d2:	f041 0101 	orr.w	r1, r1, #1
   1f1d6:	f008 fc61 	bl	27a9c <log_0>
		sys_arch_reboot(0);
   1f1da:	2000      	movs	r0, #0
   1f1dc:	f7f5 fdf2 	bl	14dc4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1f1e0:	0002ccb8 	.word	0x0002ccb8
   1f1e4:	0002cd40 	.word	0x0002cd40
   1f1e8:	00031221 	.word	0x00031221

0001f1ec <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1f1ec:	b538      	push	{r3, r4, r5, lr}
   1f1ee:	4b0b      	ldr	r3, [pc, #44]	; (1f21c <sdc_assertion_handler+0x30>)
   1f1f0:	4c0b      	ldr	r4, [pc, #44]	; (1f220 <sdc_assertion_handler+0x34>)
   1f1f2:	1ae4      	subs	r4, r4, r3
   1f1f4:	460d      	mov	r5, r1
   1f1f6:	08e4      	lsrs	r4, r4, #3
   1f1f8:	f7f2 fc0c 	bl	11a14 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1f1fc:	01a4      	lsls	r4, r4, #6
   1f1fe:	f044 0401 	orr.w	r4, r4, #1
   1f202:	4601      	mov	r1, r0
   1f204:	4623      	mov	r3, r4
   1f206:	4807      	ldr	r0, [pc, #28]	; (1f224 <sdc_assertion_handler+0x38>)
   1f208:	462a      	mov	r2, r5
   1f20a:	f008 fc68 	bl	27ade <log_2>
	k_oops();
   1f20e:	4040      	eors	r0, r0
   1f210:	f380 8811 	msr	BASEPRI, r0
   1f214:	f04f 0003 	mov.w	r0, #3
   1f218:	df02      	svc	2
}
   1f21a:	bd38      	pop	{r3, r4, r5, pc}
   1f21c:	0002ccb8 	.word	0x0002ccb8
   1f220:	0002cda0 	.word	0x0002cda0
   1f224:	0003123e 	.word	0x0003123e

0001f228 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1f228:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1f22a:	4804      	ldr	r0, [pc, #16]	; (1f23c <hci_driver_init+0x14>)
   1f22c:	f7f7 fb9e 	bl	1696c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1f230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1f234:	4802      	ldr	r0, [pc, #8]	; (1f240 <hci_driver_init+0x18>)
   1f236:	f7e4 bd23 	b.w	3c80 <sdc_init>
   1f23a:	bf00      	nop
   1f23c:	0002d710 	.word	0x0002d710
   1f240:	0001f1ed 	.word	0x0001f1ed

0001f244 <rand_prio_low_vector_get_blocking>:
{
   1f244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1f246:	4b16      	ldr	r3, [pc, #88]	; (1f2a0 <rand_prio_low_vector_get_blocking+0x5c>)
{
   1f248:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1f24a:	681e      	ldr	r6, [r3, #0]
   1f24c:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1f24e:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1f250:	683b      	ldr	r3, [r7, #0]
   1f252:	b963      	cbnz	r3, 1f26e <rand_prio_low_vector_get_blocking+0x2a>
   1f254:	4913      	ldr	r1, [pc, #76]	; (1f2a4 <rand_prio_low_vector_get_blocking+0x60>)
   1f256:	4a14      	ldr	r2, [pc, #80]	; (1f2a8 <rand_prio_low_vector_get_blocking+0x64>)
   1f258:	4814      	ldr	r0, [pc, #80]	; (1f2ac <rand_prio_low_vector_get_blocking+0x68>)
   1f25a:	234b      	movs	r3, #75	; 0x4b
   1f25c:	f008 f94b 	bl	274f6 <printk>
   1f260:	4813      	ldr	r0, [pc, #76]	; (1f2b0 <rand_prio_low_vector_get_blocking+0x6c>)
   1f262:	f008 f948 	bl	274f6 <printk>
   1f266:	4810      	ldr	r0, [pc, #64]	; (1f2a8 <rand_prio_low_vector_get_blocking+0x64>)
   1f268:	214b      	movs	r1, #75	; 0x4b
   1f26a:	f008 fbe9 	bl	27a40 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1f26e:	683b      	ldr	r3, [r7, #0]
   1f270:	462a      	mov	r2, r5
   1f272:	4621      	mov	r1, r4
   1f274:	4630      	mov	r0, r6
   1f276:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1f278:	b180      	cbz	r0, 1f29c <rand_prio_low_vector_get_blocking+0x58>
   1f27a:	490e      	ldr	r1, [pc, #56]	; (1f2b4 <rand_prio_low_vector_get_blocking+0x70>)
   1f27c:	4a0e      	ldr	r2, [pc, #56]	; (1f2b8 <rand_prio_low_vector_get_blocking+0x74>)
   1f27e:	480b      	ldr	r0, [pc, #44]	; (1f2ac <rand_prio_low_vector_get_blocking+0x68>)
   1f280:	f240 139b 	movw	r3, #411	; 0x19b
   1f284:	f008 f937 	bl	274f6 <printk>
   1f288:	480c      	ldr	r0, [pc, #48]	; (1f2bc <rand_prio_low_vector_get_blocking+0x78>)
   1f28a:	f008 f934 	bl	274f6 <printk>
}
   1f28e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1f292:	4809      	ldr	r0, [pc, #36]	; (1f2b8 <rand_prio_low_vector_get_blocking+0x74>)
   1f294:	f240 119b 	movw	r1, #411	; 0x19b
   1f298:	f008 bbd2 	b.w	27a40 <assert_post_action>
}
   1f29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f29e:	bf00      	nop
   1f2a0:	2000325c 	.word	0x2000325c
   1f2a4:	00031290 	.word	0x00031290
   1f2a8:	00031263 	.word	0x00031263
   1f2ac:	0002dcd3 	.word	0x0002dcd3
   1f2b0:	000312b0 	.word	0x000312b0
   1f2b4:	0002f540 	.word	0x0002f540
   1f2b8:	000312d6 	.word	0x000312d6
   1f2bc:	0003130f 	.word	0x0003130f

0001f2c0 <rand_prio_high_vector_get>:
{
   1f2c0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f2c2:	4b11      	ldr	r3, [pc, #68]	; (1f308 <rand_prio_high_vector_get+0x48>)
{
   1f2c4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f2c6:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1f2c8:	6883      	ldr	r3, [r0, #8]
   1f2ca:	685d      	ldr	r5, [r3, #4]
   1f2cc:	460a      	mov	r2, r1
   1f2ce:	b1bd      	cbz	r5, 1f300 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1f2d0:	4621      	mov	r1, r4
   1f2d2:	2300      	movs	r3, #0
   1f2d4:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1f2d6:	1e04      	subs	r4, r0, #0
   1f2d8:	da0e      	bge.n	1f2f8 <rand_prio_high_vector_get+0x38>
   1f2da:	490c      	ldr	r1, [pc, #48]	; (1f30c <rand_prio_high_vector_get+0x4c>)
   1f2dc:	4a0c      	ldr	r2, [pc, #48]	; (1f310 <rand_prio_high_vector_get+0x50>)
   1f2de:	480d      	ldr	r0, [pc, #52]	; (1f314 <rand_prio_high_vector_get+0x54>)
   1f2e0:	f240 1393 	movw	r3, #403	; 0x193
   1f2e4:	f008 f907 	bl	274f6 <printk>
   1f2e8:	480b      	ldr	r0, [pc, #44]	; (1f318 <rand_prio_high_vector_get+0x58>)
   1f2ea:	f008 f904 	bl	274f6 <printk>
   1f2ee:	4808      	ldr	r0, [pc, #32]	; (1f310 <rand_prio_high_vector_get+0x50>)
   1f2f0:	f240 1193 	movw	r1, #403	; 0x193
   1f2f4:	f008 fba4 	bl	27a40 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1f2f8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1f2fc:	b2c0      	uxtb	r0, r0
   1f2fe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1f300:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1f304:	e7e9      	b.n	1f2da <rand_prio_high_vector_get+0x1a>
   1f306:	bf00      	nop
   1f308:	2000325c 	.word	0x2000325c
   1f30c:	00031349 	.word	0x00031349
   1f310:	000312d6 	.word	0x000312d6
   1f314:	0002dcd3 	.word	0x0002dcd3
   1f318:	00031352 	.word	0x00031352

0001f31c <hci_driver_open>:
{
   1f31c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f31e:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f320:	2200      	movs	r2, #0
   1f322:	2300      	movs	r3, #0
   1f324:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f328:	2300      	movs	r3, #0
   1f32a:	f06f 0209 	mvn.w	r2, #9
   1f32e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1f332:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1f336:	9300      	str	r3, [sp, #0]
   1f338:	4951      	ldr	r1, [pc, #324]	; (1f480 <hci_driver_open+0x164>)
   1f33a:	4b52      	ldr	r3, [pc, #328]	; (1f484 <hci_driver_open+0x168>)
   1f33c:	4852      	ldr	r0, [pc, #328]	; (1f488 <hci_driver_open+0x16c>)
   1f33e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f342:	f001 fe9f 	bl	21084 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f346:	4951      	ldr	r1, [pc, #324]	; (1f48c <hci_driver_open+0x170>)
   1f348:	484f      	ldr	r0, [pc, #316]	; (1f488 <hci_driver_open+0x16c>)
   1f34a:	4c51      	ldr	r4, [pc, #324]	; (1f490 <hci_driver_open+0x174>)
   1f34c:	f00d f952 	bl	2c5f4 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1f350:	a80b      	add	r0, sp, #44	; 0x2c
   1f352:	f7e4 fc17 	bl	3b84 <sdc_build_revision_get>
   1f356:	4b4f      	ldr	r3, [pc, #316]	; (1f494 <hci_driver_open+0x178>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1f358:	484f      	ldr	r0, [pc, #316]	; (1f498 <hci_driver_open+0x17c>)
   1f35a:	1ae4      	subs	r4, r4, r3
   1f35c:	08e4      	lsrs	r4, r4, #3
   1f35e:	01a4      	lsls	r4, r4, #6
   1f360:	f044 0303 	orr.w	r3, r4, #3
   1f364:	2214      	movs	r2, #20
   1f366:	a90b      	add	r1, sp, #44	; 0x2c
   1f368:	f008 fbf9 	bl	27b5e <log_hexdump>
			err = sdc_support_adv();
   1f36c:	f7e4 fd06 	bl	3d7c <sdc_support_adv>
			if (err) {
   1f370:	b110      	cbz	r0, 1f378 <hci_driver_open+0x5c>
		return -err;
   1f372:	2086      	movs	r0, #134	; 0x86
}
   1f374:	b011      	add	sp, #68	; 0x44
   1f376:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sdc_support_slave();
   1f378:	f7e4 fd30 	bl	3ddc <sdc_support_slave>
		if (err) {
   1f37c:	2800      	cmp	r0, #0
   1f37e:	d1f8      	bne.n	1f372 <hci_driver_open+0x56>
		err = sdc_support_dle();
   1f380:	f7e4 fd0c 	bl	3d9c <sdc_support_dle>
		if (err) {
   1f384:	2800      	cmp	r0, #0
   1f386:	d1f4      	bne.n	1f372 <hci_driver_open+0x56>
		err = sdc_support_le_2m_phy();
   1f388:	f7e4 fd18 	bl	3dbc <sdc_support_le_2m_phy>
		if (err) {
   1f38c:	4606      	mov	r6, r0
   1f38e:	2800      	cmp	r0, #0
   1f390:	d1ef      	bne.n	1f372 <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f392:	ad08      	add	r5, sp, #32
   1f394:	462a      	mov	r2, r5
   1f396:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   1f398:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f39c:	f7e4 fc00 	bl	3ba0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f3a0:	2800      	cmp	r0, #0
   1f3a2:	dbe7      	blt.n	1f374 <hci_driver_open+0x58>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1f3a4:	2701      	movs	r7, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f3a6:	462a      	mov	r2, r5
   1f3a8:	2102      	movs	r1, #2
   1f3aa:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1f3ac:	f88d 7020 	strb.w	r7, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f3b0:	f7e4 fbf6 	bl	3ba0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f3b4:	2800      	cmp	r0, #0
   1f3b6:	dbdd      	blt.n	1f374 <hci_driver_open+0x58>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1f3b8:	4b38      	ldr	r3, [pc, #224]	; (1f49c <hci_driver_open+0x180>)
   1f3ba:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f3bc:	462a      	mov	r2, r5
   1f3be:	2103      	movs	r1, #3
   1f3c0:	4630      	mov	r0, r6
   1f3c2:	f7e4 fbed 	bl	3ba0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f3c6:	2800      	cmp	r0, #0
   1f3c8:	dbd4      	blt.n	1f374 <hci_driver_open+0x58>
	cfg.event_length.event_length_us =
   1f3ca:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f3ce:	462a      	mov	r2, r5
   1f3d0:	2104      	movs	r1, #4
   1f3d2:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   1f3d4:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f3d6:	f7e4 fbe3 	bl	3ba0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f3da:	2800      	cmp	r0, #0
   1f3dc:	dbca      	blt.n	1f374 <hci_driver_open+0x58>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f3de:	462a      	mov	r2, r5
   1f3e0:	2105      	movs	r1, #5
   1f3e2:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1f3e4:	f88d 7020 	strb.w	r7, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f3e8:	f7e4 fbda 	bl	3ba0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f3ec:	2800      	cmp	r0, #0
   1f3ee:	dbc1      	blt.n	1f374 <hci_driver_open+0x58>
	if (required_memory > sizeof(sdc_mempool)) {
   1f3f0:	f240 63e6 	movw	r3, #1766	; 0x6e6
   1f3f4:	4298      	cmp	r0, r3
   1f3f6:	dd10      	ble.n	1f41a <hci_driver_open+0xfe>
		BT_ERR("Allocated memory too low: %u < %u",
   1f3f8:	4602      	mov	r2, r0
   1f3fa:	ea44 0307 	orr.w	r3, r4, r7
   1f3fe:	4828      	ldr	r0, [pc, #160]	; (1f4a0 <hci_driver_open+0x184>)
   1f400:	f240 61e6 	movw	r1, #1766	; 0x6e6
   1f404:	f008 fb6b 	bl	27ade <log_2>
		k_panic();
   1f408:	4040      	eors	r0, r0
   1f40a:	f380 8811 	msr	BASEPRI, r0
   1f40e:	f04f 0004 	mov.w	r0, #4
   1f412:	df02      	svc	2
		return -ENOMEM;
   1f414:	f06f 000b 	mvn.w	r0, #11
   1f418:	e7ac      	b.n	1f374 <hci_driver_open+0x58>
   1f41a:	4822      	ldr	r0, [pc, #136]	; (1f4a4 <hci_driver_open+0x188>)
   1f41c:	f001 fa3e 	bl	2089c <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1f420:	4b21      	ldr	r3, [pc, #132]	; (1f4a8 <hci_driver_open+0x18c>)
   1f422:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1f424:	b938      	cbnz	r0, 1f436 <hci_driver_open+0x11a>
		BT_ERR("An entropy source is required");
   1f426:	4821      	ldr	r0, [pc, #132]	; (1f4ac <hci_driver_open+0x190>)
   1f428:	f044 0101 	orr.w	r1, r4, #1
   1f42c:	f008 fb36 	bl	27a9c <log_0>
		return -ENODEV;
   1f430:	f06f 0012 	mvn.w	r0, #18
   1f434:	e79e      	b.n	1f374 <hci_driver_open+0x58>
	sdc_rand_source_t rand_functions = {
   1f436:	4b1e      	ldr	r3, [pc, #120]	; (1f4b0 <hci_driver_open+0x194>)
   1f438:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1f43c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1f440:	4628      	mov	r0, r5
   1f442:	f7e4 fd37 	bl	3eb4 <sdc_rand_source_register>
	if (err) {
   1f446:	4601      	mov	r1, r0
   1f448:	b138      	cbz	r0, 1f45a <hci_driver_open+0x13e>
		BT_ERR("Failed to register rand source (%d)", err);
   1f44a:	481a      	ldr	r0, [pc, #104]	; (1f4b4 <hci_driver_open+0x198>)
   1f44c:	f044 0201 	orr.w	r2, r4, #1
   1f450:	f008 fb31 	bl	27ab6 <log_1>
		return -EINVAL;
   1f454:	f06f 0015 	mvn.w	r0, #21
   1f458:	e78c      	b.n	1f374 <hci_driver_open+0x58>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1f45a:	f04f 30ff 	mov.w	r0, #4294967295
   1f45e:	f04f 31ff 	mov.w	r1, #4294967295
   1f462:	f7ff fe9f 	bl	1f1a4 <multithreading_lock_acquire>
	if (!err) {
   1f466:	4604      	mov	r4, r0
   1f468:	b930      	cbnz	r0, 1f478 <hci_driver_open+0x15c>
		err = sdc_enable(host_signal, sdc_mempool);
   1f46a:	4913      	ldr	r1, [pc, #76]	; (1f4b8 <hci_driver_open+0x19c>)
   1f46c:	4813      	ldr	r0, [pc, #76]	; (1f4bc <hci_driver_open+0x1a0>)
   1f46e:	f7e4 fbd9 	bl	3c24 <sdc_enable>
   1f472:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f474:	f7ff fe9e 	bl	1f1b4 <multithreading_lock_release>
	if (err < 0) {
   1f478:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1f47c:	e77a      	b.n	1f374 <hci_driver_open+0x58>
   1f47e:	bf00      	nop
   1f480:	200066c0 	.word	0x200066c0
   1f484:	0001f4c1 	.word	0x0001f4c1
   1f488:	20001ea8 	.word	0x20001ea8
   1f48c:	00031396 	.word	0x00031396
   1f490:	0002cda0 	.word	0x0002cda0
   1f494:	0002ccb8 	.word	0x0002ccb8
   1f498:	0003139d 	.word	0x0003139d
   1f49c:	02031b1b 	.word	0x02031b1b
   1f4a0:	000313c4 	.word	0x000313c4
   1f4a4:	00030ea7 	.word	0x00030ea7
   1f4a8:	2000325c 	.word	0x2000325c
   1f4ac:	000313e6 	.word	0x000313e6
   1f4b0:	0002cecc 	.word	0x0002cecc
   1f4b4:	00031404 	.word	0x00031404
   1f4b8:	20003efe 	.word	0x20003efe
   1f4bc:	0001f5dd 	.word	0x0001f5dd

0001f4c0 <recv_thread>:
{
   1f4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f4c4:	4b3f      	ldr	r3, [pc, #252]	; (1f5c4 <recv_thread+0x104>)
   1f4c6:	4e40      	ldr	r6, [pc, #256]	; (1f5c8 <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   1f4c8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1f5d8 <recv_thread+0x118>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f4cc:	4d3f      	ldr	r5, [pc, #252]	; (1f5cc <recv_thread+0x10c>)
   1f4ce:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1f4d0:	2700      	movs	r7, #0
   1f4d2:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1f4d4:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1f4d6:	b93c      	cbnz	r4, 1f4e8 <recv_thread+0x28>
   1f4d8:	b937      	cbnz	r7, 1f4e8 <recv_thread+0x28>
   1f4da:	f04f 32ff 	mov.w	r2, #4294967295
   1f4de:	f04f 33ff 	mov.w	r3, #4294967295
   1f4e2:	4640      	mov	r0, r8
   1f4e4:	f002 fa6e 	bl	219c4 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f4e8:	f04f 30ff 	mov.w	r0, #4294967295
   1f4ec:	f04f 31ff 	mov.w	r1, #4294967295
   1f4f0:	f7ff fe58 	bl	1f1a4 <multithreading_lock_acquire>
	if (!errcode) {
   1f4f4:	b160      	cbz	r0, 1f510 <recv_thread+0x50>
		return false;
   1f4f6:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f4f8:	f04f 30ff 	mov.w	r0, #4294967295
   1f4fc:	f04f 31ff 	mov.w	r1, #4294967295
   1f500:	f7ff fe50 	bl	1f1a4 <multithreading_lock_acquire>
	if (!errcode) {
   1f504:	2800      	cmp	r0, #0
   1f506:	d03a      	beq.n	1f57e <recv_thread+0xbe>
		return false;
   1f508:	2700      	movs	r7, #0
	z_impl_k_yield();
   1f50a:	f003 ffc9 	bl	234a0 <z_impl_k_yield>
}
   1f50e:	e7e2      	b.n	1f4d6 <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f510:	482e      	ldr	r0, [pc, #184]	; (1f5cc <recv_thread+0x10c>)
   1f512:	f000 fbe3 	bl	1fcdc <hci_internal_evt_get>
   1f516:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f518:	f7ff fe4c 	bl	1f1b4 <multithreading_lock_release>
	if (errcode) {
   1f51c:	2c00      	cmp	r4, #0
   1f51e:	d1ea      	bne.n	1f4f6 <recv_thread+0x36>
	switch (hdr->evt) {
   1f520:	7828      	ldrb	r0, [r5, #0]
   1f522:	283e      	cmp	r0, #62	; 0x3e
   1f524:	d007      	beq.n	1f536 <recv_thread+0x76>
   1f526:	28ff      	cmp	r0, #255	; 0xff
   1f528:	d01c      	beq.n	1f564 <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f52a:	f04f 32ff 	mov.w	r2, #4294967295
   1f52e:	f04f 33ff 	mov.w	r3, #4294967295
   1f532:	2400      	movs	r4, #0
   1f534:	e007      	b.n	1f546 <recv_thread+0x86>
		switch (me->subevent) {
   1f536:	78ab      	ldrb	r3, [r5, #2]
   1f538:	2b02      	cmp	r3, #2
   1f53a:	d001      	beq.n	1f540 <recv_thread+0x80>
   1f53c:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1f53e:	d1f4      	bne.n	1f52a <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f540:	2200      	movs	r2, #0
   1f542:	2300      	movs	r3, #0
   1f544:	2401      	movs	r4, #1
   1f546:	4621      	mov	r1, r4
   1f548:	f7f6 f870 	bl	1562c <bt_buf_get_evt>
	if (!evt_buf) {
   1f54c:	4607      	mov	r7, r0
   1f54e:	b960      	cbnz	r0, 1f56a <recv_thread+0xaa>
		if (discardable) {
   1f550:	2c00      	cmp	r4, #0
   1f552:	d1d1      	bne.n	1f4f8 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1f554:	01b1      	lsls	r1, r6, #6
   1f556:	481e      	ldr	r0, [pc, #120]	; (1f5d0 <recv_thread+0x110>)
   1f558:	f041 0101 	orr.w	r1, r1, #1
   1f55c:	f008 fa9e 	bl	27a9c <log_0>
	return true;
   1f560:	2401      	movs	r4, #1
   1f562:	e7c9      	b.n	1f4f8 <recv_thread+0x38>
		switch (subevent) {
   1f564:	78ab      	ldrb	r3, [r5, #2]
   1f566:	2b80      	cmp	r3, #128	; 0x80
   1f568:	e7e9      	b.n	1f53e <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1f56a:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f56c:	4629      	mov	r1, r5
   1f56e:	3202      	adds	r2, #2
   1f570:	3008      	adds	r0, #8
   1f572:	f00c fa2b 	bl	2b9cc <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1f576:	4638      	mov	r0, r7
   1f578:	f7f7 f9c4 	bl	16904 <bt_recv>
   1f57c:	e7f0      	b.n	1f560 <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1f57e:	4813      	ldr	r0, [pc, #76]	; (1f5cc <recv_thread+0x10c>)
   1f580:	f7ec ffc7 	bl	c512 <sdc_hci_data_get>
   1f584:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1f586:	f7ff fe15 	bl	1f1b4 <multithreading_lock_release>
	if (errcode) {
   1f58a:	2f00      	cmp	r7, #0
   1f58c:	d1bc      	bne.n	1f508 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1f58e:	f04f 32ff 	mov.w	r2, #4294967295
   1f592:	f04f 33ff 	mov.w	r3, #4294967295
   1f596:	2003      	movs	r0, #3
   1f598:	f7f5 fff2 	bl	15580 <bt_buf_get_rx>
	if (!data_buf) {
   1f59c:	4607      	mov	r7, r0
   1f59e:	b938      	cbnz	r0, 1f5b0 <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   1f5a0:	01b1      	lsls	r1, r6, #6
   1f5a2:	480c      	ldr	r0, [pc, #48]	; (1f5d4 <recv_thread+0x114>)
   1f5a4:	f041 0101 	orr.w	r1, r1, #1
   1f5a8:	f008 fa78 	bl	27a9c <log_0>
	return true;
   1f5ac:	2701      	movs	r7, #1
   1f5ae:	e7ac      	b.n	1f50a <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1f5b0:	886a      	ldrh	r2, [r5, #2]
   1f5b2:	4629      	mov	r1, r5
   1f5b4:	3204      	adds	r2, #4
   1f5b6:	3008      	adds	r0, #8
   1f5b8:	f00c fa08 	bl	2b9cc <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1f5bc:	4638      	mov	r0, r7
   1f5be:	f7f7 f9a1 	bl	16904 <bt_recv>
   1f5c2:	e7f3      	b.n	1f5ac <recv_thread+0xec>
   1f5c4:	0002ccb8 	.word	0x0002ccb8
   1f5c8:	0002cda0 	.word	0x0002cda0
   1f5cc:	20003eb5 	.word	0x20003eb5
   1f5d0:	00031428 	.word	0x00031428
   1f5d4:	00031442 	.word	0x00031442
   1f5d8:	200008a4 	.word	0x200008a4

0001f5dc <host_signal>:
	z_impl_k_sem_give(sem);
   1f5dc:	4801      	ldr	r0, [pc, #4]	; (1f5e4 <host_signal+0x8>)
   1f5de:	f002 b9ad 	b.w	2193c <z_impl_k_sem_give>
   1f5e2:	bf00      	nop
   1f5e4:	200008a4 	.word	0x200008a4

0001f5e8 <hci_driver_send>:
{
   1f5e8:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1f5ea:	8983      	ldrh	r3, [r0, #12]
{
   1f5ec:	4605      	mov	r5, r0
	if (!buf->len) {
   1f5ee:	b383      	cbz	r3, 1f652 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1f5f0:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1f5f2:	b1ab      	cbz	r3, 1f620 <hci_driver_send+0x38>
   1f5f4:	2b02      	cmp	r3, #2
   1f5f6:	d12c      	bne.n	1f652 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f5f8:	f04f 30ff 	mov.w	r0, #4294967295
   1f5fc:	f04f 31ff 	mov.w	r1, #4294967295
   1f600:	f7ff fdd0 	bl	1f1a4 <multithreading_lock_acquire>
	if (!errcode) {
   1f604:	4604      	mov	r4, r0
   1f606:	b948      	cbnz	r0, 1f61c <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1f608:	68a8      	ldr	r0, [r5, #8]
   1f60a:	f7ec ff8f 	bl	c52c <sdc_hci_data_put>
   1f60e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f610:	f7ff fdd0 	bl	1f1b4 <multithreading_lock_release>
		if (errcode) {
   1f614:	b1c4      	cbz	r4, 1f648 <hci_driver_send+0x60>
   1f616:	4810      	ldr	r0, [pc, #64]	; (1f658 <hci_driver_send+0x70>)
   1f618:	f002 f990 	bl	2193c <z_impl_k_sem_give>
}
   1f61c:	4620      	mov	r0, r4
   1f61e:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f620:	f04f 30ff 	mov.w	r0, #4294967295
   1f624:	f04f 31ff 	mov.w	r1, #4294967295
   1f628:	f7ff fdbc 	bl	1f1a4 <multithreading_lock_acquire>
	if (!errcode) {
   1f62c:	4604      	mov	r4, r0
   1f62e:	2800      	cmp	r0, #0
   1f630:	d1f4      	bne.n	1f61c <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1f632:	68a8      	ldr	r0, [r5, #8]
   1f634:	f000 f840 	bl	1f6b8 <hci_internal_cmd_put>
   1f638:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f63a:	f7ff fdbb 	bl	1f1b4 <multithreading_lock_release>
	if (errcode) {
   1f63e:	2c00      	cmp	r4, #0
   1f640:	d1ec      	bne.n	1f61c <hci_driver_send+0x34>
   1f642:	4805      	ldr	r0, [pc, #20]	; (1f658 <hci_driver_send+0x70>)
   1f644:	f002 f97a 	bl	2193c <z_impl_k_sem_give>
		net_buf_unref(buf);
   1f648:	4628      	mov	r0, r5
   1f64a:	f7fd fefb 	bl	1d444 <net_buf_unref>
   1f64e:	2400      	movs	r4, #0
   1f650:	e7e4      	b.n	1f61c <hci_driver_send+0x34>
	switch (type) {
   1f652:	f06f 0415 	mvn.w	r4, #21
   1f656:	e7e1      	b.n	1f61c <hci_driver_send+0x34>
   1f658:	200008a4 	.word	0x200008a4

0001f65c <rand_prio_low_vector_get>:
{
   1f65c:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f65e:	4b11      	ldr	r3, [pc, #68]	; (1f6a4 <rand_prio_low_vector_get+0x48>)
{
   1f660:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f662:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   1f664:	6883      	ldr	r3, [r0, #8]
   1f666:	685d      	ldr	r5, [r3, #4]
   1f668:	460a      	mov	r2, r1
   1f66a:	b1bd      	cbz	r5, 1f69c <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1f66c:	4621      	mov	r1, r4
   1f66e:	2300      	movs	r3, #0
   1f670:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1f672:	1e04      	subs	r4, r0, #0
   1f674:	da0e      	bge.n	1f694 <rand_prio_low_vector_get+0x38>
   1f676:	490c      	ldr	r1, [pc, #48]	; (1f6a8 <rand_prio_low_vector_get+0x4c>)
   1f678:	4a0c      	ldr	r2, [pc, #48]	; (1f6ac <rand_prio_low_vector_get+0x50>)
   1f67a:	480d      	ldr	r0, [pc, #52]	; (1f6b0 <rand_prio_low_vector_get+0x54>)
   1f67c:	f240 138b 	movw	r3, #395	; 0x18b
   1f680:	f007 ff39 	bl	274f6 <printk>
   1f684:	480b      	ldr	r0, [pc, #44]	; (1f6b4 <rand_prio_low_vector_get+0x58>)
   1f686:	f007 ff36 	bl	274f6 <printk>
   1f68a:	4808      	ldr	r0, [pc, #32]	; (1f6ac <rand_prio_low_vector_get+0x50>)
   1f68c:	f240 118b 	movw	r1, #395	; 0x18b
   1f690:	f008 f9d6 	bl	27a40 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1f694:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1f698:	b2c0      	uxtb	r0, r0
   1f69a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1f69c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1f6a0:	e7e9      	b.n	1f676 <rand_prio_low_vector_get+0x1a>
   1f6a2:	bf00      	nop
   1f6a4:	2000325c 	.word	0x2000325c
   1f6a8:	00031349 	.word	0x00031349
   1f6ac:	000312d6 	.word	0x000312d6
   1f6b0:	0002dcd3 	.word	0x0002dcd3
   1f6b4:	0003145b 	.word	0x0003145b

0001f6b8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1f6b8:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1f6ba:	4c8e      	ldr	r4, [pc, #568]	; (1f8f4 <hci_internal_cmd_put+0x23c>)
   1f6bc:	7823      	ldrb	r3, [r4, #0]
   1f6be:	2b00      	cmp	r3, #0
   1f6c0:	f040 82f7 	bne.w	1fcb2 <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   1f6c4:	7843      	ldrb	r3, [r0, #1]
   1f6c6:	7805      	ldrb	r5, [r0, #0]
   1f6c8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1f6cc:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1f6d0:	b22e      	sxth	r6, r5
   1f6d2:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1f6d6:	d20d      	bcs.n	1f6f4 <hci_internal_cmd_put+0x3c>
   1f6d8:	b17b      	cbz	r3, 1f6fa <hci_internal_cmd_put+0x42>
   1f6da:	3b01      	subs	r3, #1
   1f6dc:	2b07      	cmp	r3, #7
   1f6de:	d80c      	bhi.n	1f6fa <hci_internal_cmd_put+0x42>
   1f6e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f6e4:	000b000e 	.word	0x000b000e
   1f6e8:	0060002c 	.word	0x0060002c
   1f6ec:	000b000b 	.word	0x000b000b
   1f6f0:	010c000b 	.word	0x010c000b
   1f6f4:	2b3f      	cmp	r3, #63	; 0x3f
   1f6f6:	f000 8233 	beq.w	1fb60 <hci_internal_cmd_put+0x4a8>
   1f6fa:	2304      	movs	r3, #4
   1f6fc:	2001      	movs	r0, #1
   1f6fe:	e26b      	b.n	1fbd8 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   1f700:	f240 4306 	movw	r3, #1030	; 0x406
   1f704:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f706:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f70a:	d005      	beq.n	1f718 <hci_internal_cmd_put+0x60>
   1f70c:	f240 431d 	movw	r3, #1053	; 0x41d
   1f710:	429e      	cmp	r6, r3
   1f712:	d010      	beq.n	1f736 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1f714:	2001      	movs	r0, #1
   1f716:	e001      	b.n	1f71c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1f718:	f7ed f82a 	bl	c770 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f71c:	230f      	movs	r3, #15
   1f71e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1f720:	2304      	movs	r3, #4
   1f722:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f724:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1f726:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1f728:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1f72a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1f72e:	2301      	movs	r3, #1
   1f730:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1f732:	2000      	movs	r0, #0
}
   1f734:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1f736:	f7ed f81d 	bl	c774 <sdc_hci_cmd_lc_read_remote_version_information>
   1f73a:	e7ef      	b.n	1f71c <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1f73c:	f640 4363 	movw	r3, #3171	; 0xc63
   1f740:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f742:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f746:	d025      	beq.n	1f794 <hci_internal_cmd_put+0xdc>
   1f748:	dc0f      	bgt.n	1f76a <hci_internal_cmd_put+0xb2>
   1f74a:	f640 4303 	movw	r3, #3075	; 0xc03
   1f74e:	429e      	cmp	r6, r3
   1f750:	d018      	beq.n	1f784 <hci_internal_cmd_put+0xcc>
   1f752:	f640 432d 	movw	r3, #3117	; 0xc2d
   1f756:	429e      	cmp	r6, r3
   1f758:	d017      	beq.n	1f78a <hci_internal_cmd_put+0xd2>
   1f75a:	f640 4301 	movw	r3, #3073	; 0xc01
   1f75e:	429e      	cmp	r6, r3
   1f760:	d1d8      	bne.n	1f714 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1f762:	f7ec feff 	bl	c564 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f766:	2304      	movs	r3, #4
   1f768:	e0b8      	b.n	1f8dc <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f76a:	f640 437b 	movw	r3, #3195	; 0xc7b
   1f76e:	429e      	cmp	r6, r3
   1f770:	d013      	beq.n	1f79a <hci_internal_cmd_put+0xe2>
   1f772:	f640 437c 	movw	r3, #3196	; 0xc7c
   1f776:	429e      	cmp	r6, r3
   1f778:	d1cc      	bne.n	1f714 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1f77a:	495f      	ldr	r1, [pc, #380]	; (1f8f8 <hci_internal_cmd_put+0x240>)
   1f77c:	f7ec fefc 	bl	c578 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1f780:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f782:	e0ab      	b.n	1f8dc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1f784:	f7e4 fc8c 	bl	40a0 <sdc_hci_cmd_cb_reset>
   1f788:	e7ed      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1f78a:	495b      	ldr	r1, [pc, #364]	; (1f8f8 <hci_internal_cmd_put+0x240>)
   1f78c:	f7ec fee8 	bl	c560 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1f790:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f792:	e0a3      	b.n	1f8dc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1f794:	f7ec feeb 	bl	c56e <sdc_hci_cmd_cb_set_event_mask_page_2>
   1f798:	e7e5      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1f79a:	4957      	ldr	r1, [pc, #348]	; (1f8f8 <hci_internal_cmd_put+0x240>)
   1f79c:	f7ec fede 	bl	c55c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1f7a0:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f7a2:	e09b      	b.n	1f8dc <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f7a4:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1f7a8:	3e01      	subs	r6, #1
   1f7aa:	2e08      	cmp	r6, #8
   1f7ac:	d8b2      	bhi.n	1f714 <hci_internal_cmd_put+0x5c>
   1f7ae:	a301      	add	r3, pc, #4	; (adr r3, 1f7b4 <hci_internal_cmd_put+0xfc>)
   1f7b0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1f7b4:	0001f7d9 	.word	0x0001f7d9
   1f7b8:	0001f7e3 	.word	0x0001f7e3
   1f7bc:	0001f8bd 	.word	0x0001f8bd
   1f7c0:	0001f715 	.word	0x0001f715
   1f7c4:	0001f715 	.word	0x0001f715
   1f7c8:	0001f715 	.word	0x0001f715
   1f7cc:	0001f715 	.word	0x0001f715
   1f7d0:	0001f715 	.word	0x0001f715
   1f7d4:	0001f8d5 	.word	0x0001f8d5
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1f7d8:	4847      	ldr	r0, [pc, #284]	; (1f8f8 <hci_internal_cmd_put+0x240>)
   1f7da:	f7ec ff7e 	bl	c6da <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1f7de:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f7e0:	e07c      	b.n	1f8dc <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1f7e2:	4845      	ldr	r0, [pc, #276]	; (1f8f8 <hci_internal_cmd_put+0x240>)
   1f7e4:	222e      	movs	r2, #46	; 0x2e
   1f7e6:	2100      	movs	r1, #0
   1f7e8:	f00a f942 	bl	29a70 <memset>
	cmds->hci_disconnect = 1;
   1f7ec:	79e3      	ldrb	r3, [r4, #7]
   1f7ee:	f043 0320 	orr.w	r3, r3, #32
   1f7f2:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1f7f4:	7a63      	ldrb	r3, [r4, #9]
   1f7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f7fa:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1f7fc:	7b23      	ldrb	r3, [r4, #12]
   1f7fe:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f802:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1f804:	7c63      	ldrb	r3, [r4, #17]
   1f806:	f043 0304 	orr.w	r3, r3, #4
   1f80a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1f80c:	7d63      	ldrb	r3, [r4, #21]
   1f80e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1f812:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1f816:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1f818:	7da3      	ldrb	r3, [r4, #22]
   1f81a:	f043 0302 	orr.w	r3, r3, #2
   1f81e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1f820:	7f63      	ldrb	r3, [r4, #29]
   1f822:	f043 0304 	orr.w	r3, r3, #4
   1f826:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1f828:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f82c:	f063 0308 	orn	r3, r3, #8
   1f830:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1f834:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1f838:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1f83c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1f840:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1f844:	f063 030c 	orn	r3, r3, #12
   1f848:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1f84c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1f854:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1f858:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1f85c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1f860:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f864:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1f868:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1f86c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f870:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f874:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1f878:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f87c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1f880:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1f884:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1f888:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1f88c:	f063 0301 	orn	r3, r3, #1
   1f890:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1f894:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1f898:	f043 0301 	orr.w	r3, r3, #1
   1f89c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1f8a0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1f8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f8a8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1f8ac:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1f8b0:	f043 0304 	orr.w	r3, r3, #4
   1f8b4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1f8b8:	2344      	movs	r3, #68	; 0x44
   1f8ba:	e0de      	b.n	1fa7a <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   1f8bc:	480e      	ldr	r0, [pc, #56]	; (1f8f8 <hci_internal_cmd_put+0x240>)
   1f8be:	2208      	movs	r2, #8
   1f8c0:	2100      	movs	r1, #0
   1f8c2:	f00a f8d5 	bl	29a70 <memset>
	features->bdedr_not_supported = 1;
   1f8c6:	7ae3      	ldrb	r3, [r4, #11]
   1f8c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1f8cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1f8d0:	72e3      	strb	r3, [r4, #11]
   1f8d2:	e0d1      	b.n	1fa78 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1f8d4:	4808      	ldr	r0, [pc, #32]	; (1f8f8 <hci_internal_cmd_put+0x240>)
   1f8d6:	f7ec fefe 	bl	c6d6 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f8da:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1f8dc:	2801      	cmp	r0, #1
   1f8de:	f43f af1d 	beq.w	1f71c <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f8e2:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1f8e4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f8e6:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f8e8:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1f8ea:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1f8ec:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1f8ee:	71a0      	strb	r0, [r4, #6]
}
   1f8f0:	e71d      	b.n	1f72e <hci_internal_cmd_put+0x76>
   1f8f2:	bf00      	nop
   1f8f4:	200045e4 	.word	0x200045e4
   1f8f8:	200045eb 	.word	0x200045eb
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f8fc:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1f900:	3e01      	subs	r6, #1
   1f902:	3003      	adds	r0, #3
	switch (opcode)	{
   1f904:	2e4d      	cmp	r6, #77	; 0x4d
   1f906:	f63f af05 	bhi.w	1f714 <hci_internal_cmd_put+0x5c>
   1f90a:	a301      	add	r3, pc, #4	; (adr r3, 1f910 <hci_internal_cmd_put+0x258>)
   1f90c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1f910:	0001fa49 	.word	0x0001fa49
   1f914:	0001fa4f 	.word	0x0001fa4f
   1f918:	0001fa57 	.word	0x0001fa57
   1f91c:	0001f715 	.word	0x0001f715
   1f920:	0001fa7f 	.word	0x0001fa7f
   1f924:	0001fa85 	.word	0x0001fa85
   1f928:	0001fa8b 	.word	0x0001fa8b
   1f92c:	0001fa95 	.word	0x0001fa95
   1f930:	0001fa9b 	.word	0x0001fa9b
   1f934:	0001faa1 	.word	0x0001faa1
   1f938:	0001f715 	.word	0x0001f715
   1f93c:	0001f715 	.word	0x0001f715
   1f940:	0001f715 	.word	0x0001f715
   1f944:	0001f715 	.word	0x0001f715
   1f948:	0001faa7 	.word	0x0001faa7
   1f94c:	0001faaf 	.word	0x0001faaf
   1f950:	0001fab5 	.word	0x0001fab5
   1f954:	0001fabb 	.word	0x0001fabb
   1f958:	0001f715 	.word	0x0001f715
   1f95c:	0001f715 	.word	0x0001f715
   1f960:	0001fac1 	.word	0x0001fac1
   1f964:	0001facb 	.word	0x0001facb
   1f968:	0001fad1 	.word	0x0001fad1
   1f96c:	0001fadb 	.word	0x0001fadb
   1f970:	0001f715 	.word	0x0001f715
   1f974:	0001fae3 	.word	0x0001fae3
   1f978:	0001faeb 	.word	0x0001faeb
   1f97c:	0001faf3 	.word	0x0001faf3
   1f980:	0001f715 	.word	0x0001f715
   1f984:	0001f715 	.word	0x0001f715
   1f988:	0001f715 	.word	0x0001f715
   1f98c:	0001f715 	.word	0x0001f715
   1f990:	0001f715 	.word	0x0001f715
   1f994:	0001fafb 	.word	0x0001fafb
   1f998:	0001fb03 	.word	0x0001fb03
   1f99c:	0001fb0b 	.word	0x0001fb0b
   1f9a0:	0001f715 	.word	0x0001f715
   1f9a4:	0001f715 	.word	0x0001f715
   1f9a8:	0001fb11 	.word	0x0001fb11
   1f9ac:	0001fb17 	.word	0x0001fb17
   1f9b0:	0001fb1d 	.word	0x0001fb1d
   1f9b4:	0001fb23 	.word	0x0001fb23
   1f9b8:	0001f715 	.word	0x0001f715
   1f9bc:	0001f715 	.word	0x0001f715
   1f9c0:	0001fb2b 	.word	0x0001fb2b
   1f9c4:	0001fb31 	.word	0x0001fb31
   1f9c8:	0001fb37 	.word	0x0001fb37
   1f9cc:	0001fb3f 	.word	0x0001fb3f
   1f9d0:	0001fb47 	.word	0x0001fb47
   1f9d4:	0001fb4d 	.word	0x0001fb4d
   1f9d8:	0001f715 	.word	0x0001f715
   1f9dc:	0001f715 	.word	0x0001f715
   1f9e0:	0001f715 	.word	0x0001f715
   1f9e4:	0001f715 	.word	0x0001f715
   1f9e8:	0001f715 	.word	0x0001f715
   1f9ec:	0001f715 	.word	0x0001f715
   1f9f0:	0001f715 	.word	0x0001f715
   1f9f4:	0001f715 	.word	0x0001f715
   1f9f8:	0001f715 	.word	0x0001f715
   1f9fc:	0001f715 	.word	0x0001f715
   1fa00:	0001f715 	.word	0x0001f715
   1fa04:	0001f715 	.word	0x0001f715
   1fa08:	0001f715 	.word	0x0001f715
   1fa0c:	0001f715 	.word	0x0001f715
   1fa10:	0001f715 	.word	0x0001f715
   1fa14:	0001f715 	.word	0x0001f715
   1fa18:	0001f715 	.word	0x0001f715
   1fa1c:	0001f715 	.word	0x0001f715
   1fa20:	0001f715 	.word	0x0001f715
   1fa24:	0001f715 	.word	0x0001f715
   1fa28:	0001f715 	.word	0x0001f715
   1fa2c:	0001f715 	.word	0x0001f715
   1fa30:	0001f715 	.word	0x0001f715
   1fa34:	0001f715 	.word	0x0001f715
   1fa38:	0001fb53 	.word	0x0001fb53
   1fa3c:	0001f715 	.word	0x0001f715
   1fa40:	0001f715 	.word	0x0001f715
   1fa44:	0001fb5b 	.word	0x0001fb5b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1fa48:	f7ec fe81 	bl	c74e <sdc_hci_cmd_le_set_event_mask>
   1fa4c:	e68b      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1fa4e:	48a2      	ldr	r0, [pc, #648]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fa50:	f7ec fe5b 	bl	c70a <sdc_hci_cmd_le_read_buffer_size>
   1fa54:	e69c      	b.n	1f790 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1fa56:	48a0      	ldr	r0, [pc, #640]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fa58:	2205      	movs	r2, #5
   1fa5a:	2100      	movs	r1, #0
   1fa5c:	f00a f808 	bl	29a70 <memset>
	features->le_encryption = 1;
   1fa60:	79e3      	ldrb	r3, [r4, #7]
   1fa62:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1fa66:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1fa6a:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1fa6c:	7a23      	ldrb	r3, [r4, #8]
   1fa6e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1fa72:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1fa76:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1fa78:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1fa7a:	2000      	movs	r0, #0
   1fa7c:	e731      	b.n	1f8e2 <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1fa7e:	f7ec fe6f 	bl	c760 <sdc_hci_cmd_le_set_random_address>
   1fa82:	e670      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1fa84:	f7ec fe5d 	bl	c742 <sdc_hci_cmd_le_set_adv_params>
   1fa88:	e66d      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1fa8a:	4893      	ldr	r0, [pc, #588]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fa8c:	f7ec fe3b 	bl	c706 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1fa90:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1fa92:	e723      	b.n	1f8dc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1fa94:	f7ec fe51 	bl	c73a <sdc_hci_cmd_le_set_adv_data>
   1fa98:	e665      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1fa9a:	f7ec fe65 	bl	c768 <sdc_hci_cmd_le_set_scan_response_data>
   1fa9e:	e662      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1faa0:	f7ec fe4d 	bl	c73e <sdc_hci_cmd_le_set_adv_enable>
   1faa4:	e65f      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1faa6:	488c      	ldr	r0, [pc, #560]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1faa8:	f7ec fe3f 	bl	c72a <sdc_hci_cmd_le_read_white_list_size>
   1faac:	e7f0      	b.n	1fa90 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1faae:	f7ec fe1c 	bl	c6ea <sdc_hci_cmd_le_clear_white_list>
   1fab2:	e658      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1fab4:	f7ec fe15 	bl	c6e2 <sdc_hci_cmd_le_add_device_to_white_list>
   1fab8:	e655      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1faba:	f7ec fe3a 	bl	c732 <sdc_hci_cmd_le_remove_device_from_white_list>
   1fabe:	e652      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1fac0:	4985      	ldr	r1, [pc, #532]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fac2:	f7ec fe24 	bl	c70e <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1fac6:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1fac8:	e708      	b.n	1f8dc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1faca:	f7ec fe26 	bl	c71a <sdc_hci_cmd_le_read_remote_features>
   1face:	e625      	b.n	1f71c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1fad0:	4981      	ldr	r1, [pc, #516]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fad2:	f7ec fe0c 	bl	c6ee <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1fad6:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1fad8:	e700      	b.n	1f8dc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1fada:	487f      	ldr	r0, [pc, #508]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fadc:	f7ec fe11 	bl	c702 <sdc_hci_cmd_le_rand>
   1fae0:	e67d      	b.n	1f7de <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1fae2:	497d      	ldr	r1, [pc, #500]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fae4:	f7ec fe09 	bl	c6fa <sdc_hci_cmd_le_long_term_key_request_reply>
   1fae8:	e64a      	b.n	1f780 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1faea:	497b      	ldr	r1, [pc, #492]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1faec:	f7ec fe01 	bl	c6f2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1faf0:	e646      	b.n	1f780 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1faf2:	238f      	movs	r3, #143	; 0x8f
   1faf4:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1faf6:	23c0      	movs	r3, #192	; 0xc0
   1faf8:	e6ea      	b.n	1f8d0 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1fafa:	4977      	ldr	r1, [pc, #476]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fafc:	f7ec fe23 	bl	c746 <sdc_hci_cmd_le_set_data_length>
   1fb00:	e63e      	b.n	1f780 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1fb02:	4875      	ldr	r0, [pc, #468]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fb04:	f7ec fe0d 	bl	c722 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1fb08:	e64a      	b.n	1f7a0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1fb0a:	f7ec fe2f 	bl	c76c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1fb0e:	e62a      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1fb10:	f7ec fde5 	bl	c6de <sdc_hci_cmd_le_add_device_to_resolving_list>
   1fb14:	e627      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1fb16:	f7ec fe0a 	bl	c72e <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1fb1a:	e624      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1fb1c:	f7ec fde3 	bl	c6e6 <sdc_hci_cmd_le_clear_resolving_list>
   1fb20:	e621      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1fb22:	486d      	ldr	r0, [pc, #436]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fb24:	f7ec fdfb 	bl	c71e <sdc_hci_cmd_le_read_resolving_list_size>
   1fb28:	e7b2      	b.n	1fa90 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1fb2a:	f7ec fe04 	bl	c736 <sdc_hci_cmd_le_set_address_resolution_enable>
   1fb2e:	e61a      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1fb30:	f7ec fe18 	bl	c764 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1fb34:	e617      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1fb36:	4868      	ldr	r0, [pc, #416]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fb38:	f7ec fdeb 	bl	c712 <sdc_hci_cmd_le_read_max_data_length>
   1fb3c:	e64f      	b.n	1f7de <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1fb3e:	4966      	ldr	r1, [pc, #408]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fb40:	f7ec fde9 	bl	c716 <sdc_hci_cmd_le_read_phy>
   1fb44:	e62c      	b.n	1f7a0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1fb46:	f7ec fe00 	bl	c74a <sdc_hci_cmd_le_set_default_phy>
   1fb4a:	e60c      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1fb4c:	f7ec fe04 	bl	c758 <sdc_hci_cmd_le_set_phy>
   1fb50:	e5e4      	b.n	1f71c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1fb52:	4861      	ldr	r0, [pc, #388]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fb54:	f7ec fde7 	bl	c726 <sdc_hci_cmd_le_read_transmit_power>
   1fb58:	e612      	b.n	1f780 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1fb5a:	f7ec fdff 	bl	c75c <sdc_hci_cmd_le_set_privacy_mode>
   1fb5e:	e602      	b.n	1f766 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1fb60:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1fb64:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1fb66:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1fb6a:	d821      	bhi.n	1fbb0 <hci_internal_cmd_put+0x4f8>
   1fb6c:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1fb70:	f43f add0 	beq.w	1f714 <hci_internal_cmd_put+0x5c>
   1fb74:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1fb78:	3b01      	subs	r3, #1
   1fb7a:	2b09      	cmp	r3, #9
   1fb7c:	f63f adca 	bhi.w	1f714 <hci_internal_cmd_put+0x5c>
   1fb80:	a201      	add	r2, pc, #4	; (adr r2, 1fb88 <hci_internal_cmd_put+0x4d0>)
   1fb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fb86:	bf00      	nop
   1fb88:	0001fbd1 	.word	0x0001fbd1
   1fb8c:	0001fbff 	.word	0x0001fbff
   1fb90:	0001f715 	.word	0x0001f715
   1fb94:	0001f715 	.word	0x0001f715
   1fb98:	0001f715 	.word	0x0001f715
   1fb9c:	0001fc4b 	.word	0x0001fc4b
   1fba0:	0001f715 	.word	0x0001f715
   1fba4:	0001f715 	.word	0x0001f715
   1fba8:	0001fc37 	.word	0x0001fc37
   1fbac:	0001fc41 	.word	0x0001fc41
   1fbb0:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1fbb4:	b29b      	uxth	r3, r3
   1fbb6:	2b05      	cmp	r3, #5
   1fbb8:	f63f adac 	bhi.w	1f714 <hci_internal_cmd_put+0x5c>
   1fbbc:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1fbc0:	2b05      	cmp	r3, #5
   1fbc2:	f63f ada7 	bhi.w	1f714 <hci_internal_cmd_put+0x5c>
   1fbc6:	e8df f003 	tbb	[pc, r3]
   1fbca:	5044      	.short	0x5044
   1fbcc:	5c595653 	.word	0x5c595653
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1fbd0:	4841      	ldr	r0, [pc, #260]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fbd2:	f7e4 fa79 	bl	40c8 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1fbd6:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1fbd8:	f242 0219 	movw	r2, #8217	; 0x2019
   1fbdc:	4296      	cmp	r6, r2
   1fbde:	dc60      	bgt.n	1fca2 <hci_internal_cmd_put+0x5ea>
   1fbe0:	f242 020c 	movw	r2, #8204	; 0x200c
   1fbe4:	4296      	cmp	r6, r2
   1fbe6:	dc4f      	bgt.n	1fc88 <hci_internal_cmd_put+0x5d0>
   1fbe8:	f240 4206 	movw	r2, #1030	; 0x406
   1fbec:	4296      	cmp	r6, r2
   1fbee:	f43f ad95 	beq.w	1f71c <hci_internal_cmd_put+0x64>
   1fbf2:	f240 421d 	movw	r2, #1053	; 0x41d
   1fbf6:	4296      	cmp	r6, r2
   1fbf8:	f43f ad90 	beq.w	1f71c <hci_internal_cmd_put+0x64>
   1fbfc:	e66e      	b.n	1f8dc <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1fbfe:	4836      	ldr	r0, [pc, #216]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fc00:	2202      	movs	r2, #2
   1fc02:	2100      	movs	r1, #0
   1fc04:	f009 ff34 	bl	29a70 <memset>
	cmds->read_version_info = 1;
   1fc08:	79e3      	ldrb	r3, [r4, #7]
   1fc0a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1fc0e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1fc12:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1fc14:	7a23      	ldrb	r3, [r4, #8]
   1fc16:	f023 0307 	bic.w	r3, r3, #7
   1fc1a:	f043 0307 	orr.w	r3, r3, #7
   1fc1e:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1fc20:	f242 0319 	movw	r3, #8217	; 0x2019
   1fc24:	429e      	cmp	r6, r3
   1fc26:	dd47      	ble.n	1fcb8 <hci_internal_cmd_put+0x600>
   1fc28:	f242 0332 	movw	r3, #8242	; 0x2032
   1fc2c:	429e      	cmp	r6, r3
   1fc2e:	d051      	beq.n	1fcd4 <hci_internal_cmd_put+0x61c>
   1fc30:	f242 0343 	movw	r3, #8259	; 0x2043
   1fc34:	e04b      	b.n	1fcce <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fc36:	4828      	ldr	r0, [pc, #160]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fc38:	f7ec fd00 	bl	c63c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1fc3c:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fc3e:	e7cb      	b.n	1fbd8 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1fc40:	4825      	ldr	r0, [pc, #148]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fc42:	f7ec fcae 	bl	c5a2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1fc46:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1fc48:	e7c6      	b.n	1fbd8 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1fc4a:	f7ec fd42 	bl	c6d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1fc4e:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1fc50:	e7c2      	b.n	1fbd8 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   1fc52:	4821      	ldr	r0, [pc, #132]	; (1fcd8 <hci_internal_cmd_put+0x620>)
   1fc54:	2201      	movs	r2, #1
   1fc56:	2100      	movs	r1, #0
   1fc58:	f009 ff0a 	bl	29a70 <memset>
	cmds->read_supported_vs_commands = 1;
   1fc5c:	79e3      	ldrb	r3, [r4, #7]
   1fc5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1fc62:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1fc66:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1fc68:	e626      	b.n	1f8b8 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1fc6a:	f7ec fc93 	bl	c594 <sdc_hci_cmd_vs_llpm_mode_set>
   1fc6e:	e57a      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1fc70:	f7ec fc8c 	bl	c58c <sdc_hci_cmd_vs_conn_update>
   1fc74:	e577      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1fc76:	f7ec fc81 	bl	c57c <sdc_hci_cmd_vs_conn_event_extend>
   1fc7a:	e574      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1fc7c:	f7ec fc8c 	bl	c598 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1fc80:	e571      	b.n	1f766 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1fc82:	f7ec fc85 	bl	c590 <sdc_hci_cmd_vs_event_length_set>
   1fc86:	e56e      	b.n	1f766 <hci_internal_cmd_put+0xae>
   1fc88:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1fc8c:	3a0d      	subs	r2, #13
   1fc8e:	2101      	movs	r1, #1
   1fc90:	b292      	uxth	r2, r2
   1fc92:	fa01 f202 	lsl.w	r2, r1, r2
   1fc96:	f241 2141 	movw	r1, #4673	; 0x1241
   1fc9a:	420a      	tst	r2, r1
   1fc9c:	f43f ae1e 	beq.w	1f8dc <hci_internal_cmd_put+0x224>
   1fca0:	e53c      	b.n	1f71c <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1fca2:	f242 0232 	movw	r2, #8242	; 0x2032
   1fca6:	4296      	cmp	r6, r2
   1fca8:	f43f ad38 	beq.w	1f71c <hci_internal_cmd_put+0x64>
   1fcac:	f242 0243 	movw	r2, #8259	; 0x2043
   1fcb0:	e7a1      	b.n	1fbf6 <hci_internal_cmd_put+0x53e>
		return -NRF_EPERM;
   1fcb2:	f04f 30ff 	mov.w	r0, #4294967295
   1fcb6:	e53d      	b.n	1f734 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   1fcb8:	f242 030c 	movw	r3, #8204	; 0x200c
   1fcbc:	429e      	cmp	r6, r3
   1fcbe:	f73f adfb 	bgt.w	1f8b8 <hci_internal_cmd_put+0x200>
   1fcc2:	f240 4306 	movw	r3, #1030	; 0x406
   1fcc6:	429e      	cmp	r6, r3
   1fcc8:	d004      	beq.n	1fcd4 <hci_internal_cmd_put+0x61c>
   1fcca:	f240 431d 	movw	r3, #1053	; 0x41d
   1fcce:	429e      	cmp	r6, r3
   1fcd0:	f47f adf2 	bne.w	1f8b8 <hci_internal_cmd_put+0x200>
   1fcd4:	2000      	movs	r0, #0
   1fcd6:	e521      	b.n	1f71c <hci_internal_cmd_put+0x64>
   1fcd8:	200045eb 	.word	0x200045eb

0001fcdc <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1fcdc:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1fcde:	4c07      	ldr	r4, [pc, #28]	; (1fcfc <hci_internal_evt_get+0x20>)
   1fce0:	7823      	ldrb	r3, [r4, #0]
   1fce2:	b13b      	cbz	r3, 1fcf4 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1fce4:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1fce6:	1c61      	adds	r1, r4, #1
   1fce8:	3202      	adds	r2, #2
   1fcea:	f009 feb6 	bl	29a5a <memcpy>
		cmd_complete_or_status.occurred = false;
   1fcee:	2000      	movs	r0, #0
   1fcf0:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1fcf2:	bd10      	pop	{r4, pc}
   1fcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1fcf8:	f7ec bc23 	b.w	c542 <sdc_hci_evt_get>
   1fcfc:	200045e4 	.word	0x200045e4

0001fd00 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fd00:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1fd02:	b570      	push	{r4, r5, r6, lr}
   1fd04:	4604      	mov	r4, r0
   1fd06:	460d      	mov	r5, r1
   1fd08:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fd0c:	d919      	bls.n	1fd42 <sys_memcpy_swap.constprop.0+0x42>
   1fd0e:	42b0      	cmp	r0, r6
   1fd10:	d20e      	bcs.n	1fd30 <sys_memcpy_swap.constprop.0+0x30>
   1fd12:	490e      	ldr	r1, [pc, #56]	; (1fd4c <sys_memcpy_swap.constprop.0+0x4c>)
   1fd14:	4a0e      	ldr	r2, [pc, #56]	; (1fd50 <sys_memcpy_swap.constprop.0+0x50>)
   1fd16:	480f      	ldr	r0, [pc, #60]	; (1fd54 <sys_memcpy_swap.constprop.0+0x54>)
   1fd18:	f240 2317 	movw	r3, #535	; 0x217
   1fd1c:	f007 fbeb 	bl	274f6 <printk>
   1fd20:	480d      	ldr	r0, [pc, #52]	; (1fd58 <sys_memcpy_swap.constprop.0+0x58>)
   1fd22:	f007 fbe8 	bl	274f6 <printk>
   1fd26:	480a      	ldr	r0, [pc, #40]	; (1fd50 <sys_memcpy_swap.constprop.0+0x50>)
   1fd28:	f240 2117 	movw	r1, #535	; 0x217
   1fd2c:	f007 fe88 	bl	27a40 <assert_post_action>
	for (; length > 0; length--) {
   1fd30:	4633      	mov	r3, r6
   1fd32:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1fd34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fd38:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1fd3c:	42ab      	cmp	r3, r5
   1fd3e:	d1f9      	bne.n	1fd34 <sys_memcpy_swap.constprop.0+0x34>
}
   1fd40:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fd42:	d0e6      	beq.n	1fd12 <sys_memcpy_swap.constprop.0+0x12>
   1fd44:	f100 0310 	add.w	r3, r0, #16
   1fd48:	4299      	cmp	r1, r3
   1fd4a:	e7e1      	b.n	1fd10 <sys_memcpy_swap.constprop.0+0x10>
   1fd4c:	0002ee89 	.word	0x0002ee89
   1fd50:	0002ee5e 	.word	0x0002ee5e
   1fd54:	0002dcd3 	.word	0x0002dcd3
   1fd58:	0002eee0 	.word	0x0002eee0

0001fd5c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1fd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1fd60:	4e14      	ldr	r6, [pc, #80]	; (1fdb4 <bt_rand+0x58>)
   1fd62:	6833      	ldr	r3, [r6, #0]
{
   1fd64:	4605      	mov	r5, r0
   1fd66:	460c      	mov	r4, r1
   1fd68:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   1fd6a:	b1c3      	cbz	r3, 1fd9e <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1fd6c:	683e      	ldr	r6, [r7, #0]
   1fd6e:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   1fd70:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   1fd72:	683b      	ldr	r3, [r7, #0]
   1fd74:	b963      	cbnz	r3, 1fd90 <bt_rand+0x34>
   1fd76:	4910      	ldr	r1, [pc, #64]	; (1fdb8 <bt_rand+0x5c>)
   1fd78:	4a10      	ldr	r2, [pc, #64]	; (1fdbc <bt_rand+0x60>)
   1fd7a:	4811      	ldr	r0, [pc, #68]	; (1fdc0 <bt_rand+0x64>)
   1fd7c:	234b      	movs	r3, #75	; 0x4b
   1fd7e:	f007 fbba 	bl	274f6 <printk>
   1fd82:	4810      	ldr	r0, [pc, #64]	; (1fdc4 <bt_rand+0x68>)
   1fd84:	f007 fbb7 	bl	274f6 <printk>
   1fd88:	480c      	ldr	r0, [pc, #48]	; (1fdbc <bt_rand+0x60>)
   1fd8a:	214b      	movs	r1, #75	; 0x4b
   1fd8c:	f007 fe58 	bl	27a40 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1fd90:	683b      	ldr	r3, [r7, #0]
   1fd92:	4622      	mov	r2, r4
   1fd94:	4629      	mov	r1, r5
   1fd96:	4630      	mov	r0, r6
}
   1fd98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fd9c:	4718      	bx	r3
   1fd9e:	480a      	ldr	r0, [pc, #40]	; (1fdc8 <bt_rand+0x6c>)
   1fda0:	f000 fd7c 	bl	2089c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1fda4:	6030      	str	r0, [r6, #0]
		if (!dev) {
   1fda6:	2800      	cmp	r0, #0
   1fda8:	d1e0      	bne.n	1fd6c <bt_rand+0x10>
}
   1fdaa:	f06f 0012 	mvn.w	r0, #18
   1fdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fdb2:	bf00      	nop
   1fdb4:	20003260 	.word	0x20003260
   1fdb8:	00031290 	.word	0x00031290
   1fdbc:	00031263 	.word	0x00031263
   1fdc0:	0002dcd3 	.word	0x0002dcd3
   1fdc4:	000312b0 	.word	0x000312b0
   1fdc8:	00030ea7 	.word	0x00030ea7

0001fdcc <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1fdcc:	b538      	push	{r3, r4, r5, lr}
   1fdce:	4b0b      	ldr	r3, [pc, #44]	; (1fdfc <m_assert_handler+0x30>)
   1fdd0:	4c0b      	ldr	r4, [pc, #44]	; (1fe00 <m_assert_handler+0x34>)
   1fdd2:	1ae4      	subs	r4, r4, r3
   1fdd4:	460d      	mov	r5, r1
   1fdd6:	08e4      	lsrs	r4, r4, #3
   1fdd8:	f7f1 fe1c 	bl	11a14 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1fddc:	01a4      	lsls	r4, r4, #6
   1fdde:	f044 0401 	orr.w	r4, r4, #1
   1fde2:	4601      	mov	r1, r0
   1fde4:	4623      	mov	r3, r4
   1fde6:	4807      	ldr	r0, [pc, #28]	; (1fe04 <m_assert_handler+0x38>)
   1fde8:	462a      	mov	r2, r5
   1fdea:	f007 fe78 	bl	27ade <log_2>
	k_oops();
   1fdee:	4040      	eors	r0, r0
   1fdf0:	f380 8811 	msr	BASEPRI, r0
   1fdf4:	f04f 0003 	mov.w	r0, #3
   1fdf8:	df02      	svc	2
}
   1fdfa:	bd38      	pop	{r3, r4, r5, pc}
   1fdfc:	0002ccb8 	.word	0x0002ccb8
   1fe00:	0002cd68 	.word	0x0002cd68
   1fe04:	000314df 	.word	0x000314df

0001fe08 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1fe08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1fe0a:	2332      	movs	r3, #50	; 0x32
   1fe0c:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fe10:	4a13      	ldr	r2, [pc, #76]	; (1fe60 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1fe12:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1fe14:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fe16:	2119      	movs	r1, #25
   1fe18:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1fe1a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1fe1e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1fe22:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fe26:	f7e3 fd03 	bl	3830 <mpsl_init>
	if (err) {
   1fe2a:	4604      	mov	r4, r0
   1fe2c:	b9a0      	cbnz	r0, 1fe58 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1fe2e:	480d      	ldr	r0, [pc, #52]	; (1fe64 <mpsl_lib_init+0x5c>)
   1fe30:	4629      	mov	r1, r5
   1fe32:	f7eb fdfa 	bl	ba2a <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1fe36:	4604      	mov	r4, r0
   1fe38:	b970      	cbnz	r0, 1fe58 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fe3a:	4601      	mov	r1, r0
   1fe3c:	462a      	mov	r2, r5
   1fe3e:	2008      	movs	r0, #8
   1fe40:	f7f4 fa28 	bl	14294 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fe44:	462a      	mov	r2, r5
   1fe46:	4621      	mov	r1, r4
   1fe48:	200b      	movs	r0, #11
   1fe4a:	f7f4 fa23 	bl	14294 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fe4e:	462a      	mov	r2, r5
   1fe50:	4621      	mov	r1, r4
   1fe52:	4628      	mov	r0, r5
   1fe54:	f7f4 fa1e 	bl	14294 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1fe58:	4620      	mov	r0, r4
   1fe5a:	b003      	add	sp, #12
   1fe5c:	bd30      	pop	{r4, r5, pc}
   1fe5e:	bf00      	nop
   1fe60:	0001fdcd 	.word	0x0001fdcd
   1fe64:	20003264 	.word	0x20003264

0001fe68 <mpsl_low_prio_irq_handler>:
   1fe68:	4801      	ldr	r0, [pc, #4]	; (1fe70 <mpsl_low_prio_irq_handler+0x8>)
   1fe6a:	f001 bd67 	b.w	2193c <z_impl_k_sem_give>
   1fe6e:	bf00      	nop
   1fe70:	200008bc 	.word	0x200008bc

0001fe74 <signal_thread>:
{
   1fe74:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   1fe76:	4d0f      	ldr	r5, [pc, #60]	; (1feb4 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   1fe78:	4c0f      	ldr	r4, [pc, #60]	; (1feb8 <signal_thread+0x44>)
   1fe7a:	f04f 32ff 	mov.w	r2, #4294967295
   1fe7e:	f04f 33ff 	mov.w	r3, #4294967295
   1fe82:	4628      	mov	r0, r5
   1fe84:	f001 fd9e 	bl	219c4 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fe88:	f04f 30ff 	mov.w	r0, #4294967295
   1fe8c:	f04f 31ff 	mov.w	r1, #4294967295
   1fe90:	f7ff f988 	bl	1f1a4 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   1fe94:	b148      	cbz	r0, 1feaa <signal_thread+0x36>
   1fe96:	4909      	ldr	r1, [pc, #36]	; (1febc <signal_thread+0x48>)
   1fe98:	4809      	ldr	r0, [pc, #36]	; (1fec0 <signal_thread+0x4c>)
   1fe9a:	2346      	movs	r3, #70	; 0x46
   1fe9c:	4622      	mov	r2, r4
   1fe9e:	f007 fb2a 	bl	274f6 <printk>
   1fea2:	2146      	movs	r1, #70	; 0x46
   1fea4:	4620      	mov	r0, r4
   1fea6:	f007 fdcb 	bl	27a40 <assert_post_action>
		mpsl_low_priority_process();
   1feaa:	f7eb fee0 	bl	bc6e <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1feae:	f7ff f981 	bl	1f1b4 <multithreading_lock_release>
	while (true) {
   1feb2:	e7e2      	b.n	1fe7a <signal_thread+0x6>
   1feb4:	200008bc 	.word	0x200008bc
   1feb8:	000314f3 	.word	0x000314f3
   1febc:	00031520 	.word	0x00031520
   1fec0:	0002dcd3 	.word	0x0002dcd3

0001fec4 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1fec4:	b530      	push	{r4, r5, lr}
   1fec6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fec8:	4d0f      	ldr	r5, [pc, #60]	; (1ff08 <mpsl_signal_thread_init+0x44>)
   1feca:	4910      	ldr	r1, [pc, #64]	; (1ff0c <mpsl_signal_thread_init+0x48>)
   1fecc:	2200      	movs	r2, #0
   1fece:	2300      	movs	r3, #0
   1fed0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fed4:	2400      	movs	r4, #0
   1fed6:	f06f 0309 	mvn.w	r3, #9
   1feda:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1fede:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1fee2:	4b0b      	ldr	r3, [pc, #44]	; (1ff10 <mpsl_signal_thread_init+0x4c>)
   1fee4:	9400      	str	r4, [sp, #0]
   1fee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1feea:	4628      	mov	r0, r5
   1feec:	f001 f8ca 	bl	21084 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1fef0:	4908      	ldr	r1, [pc, #32]	; (1ff14 <mpsl_signal_thread_init+0x50>)
   1fef2:	4628      	mov	r0, r5
   1fef4:	f00c fb7e 	bl	2c5f4 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1fef8:	4622      	mov	r2, r4
   1fefa:	2104      	movs	r1, #4
   1fefc:	2019      	movs	r0, #25
   1fefe:	f7f4 f9c9 	bl	14294 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ff02:	4620      	mov	r0, r4
   1ff04:	b009      	add	sp, #36	; 0x24
   1ff06:	bd30      	pop	{r4, r5, pc}
   1ff08:	20001f28 	.word	0x20001f28
   1ff0c:	20006ae0 	.word	0x20006ae0
   1ff10:	0001fe75 	.word	0x0001fe75
   1ff14:	0003152d 	.word	0x0003152d

0001ff18 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ff18:	4b01      	ldr	r3, [pc, #4]	; (1ff20 <mpsl_hfclk_callback+0x8>)
   1ff1a:	2000      	movs	r0, #0
   1ff1c:	681b      	ldr	r3, [r3, #0]
   1ff1e:	4718      	bx	r3
   1ff20:	20003288 	.word	0x20003288

0001ff24 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1ff24:	b510      	push	{r4, lr}
	switch (domain) {
   1ff26:	b130      	cbz	r0, 1ff36 <nrfx_clock_start+0x12>
   1ff28:	2801      	cmp	r0, #1
   1ff2a:	d10a      	bne.n	1ff42 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1ff2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1ff30:	480b      	ldr	r0, [pc, #44]	; (1ff60 <nrfx_clock_start+0x3c>)
   1ff32:	f7e3 badd 	b.w	34f0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ff36:	4b0b      	ldr	r3, [pc, #44]	; (1ff64 <nrfx_clock_start+0x40>)
}
   1ff38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ff3c:	681b      	ldr	r3, [r3, #0]
   1ff3e:	2001      	movs	r0, #1
   1ff40:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1ff42:	4909      	ldr	r1, [pc, #36]	; (1ff68 <nrfx_clock_start+0x44>)
   1ff44:	4a09      	ldr	r2, [pc, #36]	; (1ff6c <nrfx_clock_start+0x48>)
   1ff46:	480a      	ldr	r0, [pc, #40]	; (1ff70 <nrfx_clock_start+0x4c>)
   1ff48:	231c      	movs	r3, #28
   1ff4a:	f007 fad4 	bl	274f6 <printk>
   1ff4e:	4809      	ldr	r0, [pc, #36]	; (1ff74 <nrfx_clock_start+0x50>)
   1ff50:	f007 fad1 	bl	274f6 <printk>
}
   1ff54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   1ff58:	4804      	ldr	r0, [pc, #16]	; (1ff6c <nrfx_clock_start+0x48>)
   1ff5a:	211c      	movs	r1, #28
   1ff5c:	f007 bd70 	b.w	27a40 <assert_post_action>
   1ff60:	0001ff19 	.word	0x0001ff19
   1ff64:	20003288 	.word	0x20003288
   1ff68:	00032142 	.word	0x00032142
   1ff6c:	00031543 	.word	0x00031543
   1ff70:	0002dcd3 	.word	0x0002dcd3
   1ff74:	00031580 	.word	0x00031580

0001ff78 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ff78:	b508      	push	{r3, lr}
	switch (domain) {
   1ff7a:	b1a0      	cbz	r0, 1ffa6 <nrfx_clock_stop+0x2e>
   1ff7c:	2801      	cmp	r0, #1
   1ff7e:	d103      	bne.n	1ff88 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1ff80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1ff84:	f7e3 baa6 	b.w	34d4 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1ff88:	4907      	ldr	r1, [pc, #28]	; (1ffa8 <nrfx_clock_stop+0x30>)
   1ff8a:	4a08      	ldr	r2, [pc, #32]	; (1ffac <nrfx_clock_stop+0x34>)
   1ff8c:	4808      	ldr	r0, [pc, #32]	; (1ffb0 <nrfx_clock_stop+0x38>)
   1ff8e:	232a      	movs	r3, #42	; 0x2a
   1ff90:	f007 fab1 	bl	274f6 <printk>
   1ff94:	4807      	ldr	r0, [pc, #28]	; (1ffb4 <nrfx_clock_stop+0x3c>)
   1ff96:	f007 faae 	bl	274f6 <printk>
}
   1ff9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   1ff9e:	4803      	ldr	r0, [pc, #12]	; (1ffac <nrfx_clock_stop+0x34>)
   1ffa0:	212a      	movs	r1, #42	; 0x2a
   1ffa2:	f007 bd4d 	b.w	27a40 <assert_post_action>
}
   1ffa6:	bd08      	pop	{r3, pc}
   1ffa8:	00032142 	.word	0x00032142
   1ffac:	00031543 	.word	0x00031543
   1ffb0:	0002dcd3 	.word	0x0002dcd3
   1ffb4:	00031580 	.word	0x00031580

0001ffb8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1ffb8:	4b01      	ldr	r3, [pc, #4]	; (1ffc0 <nrfx_clock_init+0x8>)
   1ffba:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1ffbc:	4801      	ldr	r0, [pc, #4]	; (1ffc4 <nrfx_clock_init+0xc>)
   1ffbe:	4770      	bx	lr
   1ffc0:	20003288 	.word	0x20003288
   1ffc4:	0bad0000 	.word	0x0bad0000

0001ffc8 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1ffc8:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1ffca:	4d37      	ldr	r5, [pc, #220]	; (200a8 <timeslot_callback+0xe0>)
   1ffcc:	7e2b      	ldrb	r3, [r5, #24]
   1ffce:	4283      	cmp	r3, r0
{
   1ffd0:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1ffd2:	d009      	beq.n	1ffe8 <timeslot_callback+0x20>
   1ffd4:	4935      	ldr	r1, [pc, #212]	; (200ac <timeslot_callback+0xe4>)
   1ffd6:	4836      	ldr	r0, [pc, #216]	; (200b0 <timeslot_callback+0xe8>)
   1ffd8:	4a36      	ldr	r2, [pc, #216]	; (200b4 <timeslot_callback+0xec>)
   1ffda:	234c      	movs	r3, #76	; 0x4c
   1ffdc:	f007 fa8b 	bl	274f6 <printk>
   1ffe0:	4834      	ldr	r0, [pc, #208]	; (200b4 <timeslot_callback+0xec>)
   1ffe2:	214c      	movs	r1, #76	; 0x4c
   1ffe4:	f007 fd2c 	bl	27a40 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ffe8:	f3bf 8f5b 	dmb	ish
   1ffec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1ffee:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   1fff2:	b10b      	cbz	r3, 1fff8 <timeslot_callback+0x30>
   1fff4:	2000      	movs	r0, #0
   1fff6:	e024      	b.n	20042 <timeslot_callback+0x7a>
		return NULL;
	}

	switch (signal) {
   1fff8:	2c09      	cmp	r4, #9
   1fffa:	d849      	bhi.n	20090 <timeslot_callback+0xc8>
   1fffc:	a301      	add	r3, pc, #4	; (adr r3, 20004 <timeslot_callback+0x3c>)
   1fffe:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   20002:	bf00      	nop
   20004:	0002002d 	.word	0x0002002d
   20008:	00020091 	.word	0x00020091
   2000c:	00020091 	.word	0x00020091
   20010:	00020091 	.word	0x00020091
   20014:	00020091 	.word	0x00020091
   20018:	0002005f 	.word	0x0002005f
   2001c:	0002005f 	.word	0x0002005f
   20020:	00020057 	.word	0x00020057
   20024:	00020091 	.word	0x00020091
   20028:	0001fff5 	.word	0x0001fff5
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   2002c:	6a2b      	ldr	r3, [r5, #32]
   2002e:	e9d3 2000 	ldrd	r2, r0, [r3]
   20032:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   20034:	2801      	cmp	r0, #1
   20036:	d005      	beq.n	20044 <timeslot_callback+0x7c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   20038:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   2003a:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   2003c:	481e      	ldr	r0, [pc, #120]	; (200b8 <timeslot_callback+0xf0>)
			_context.return_param.callback_action =
   2003e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   20042:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.priority =
   20044:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   20048:	481c      	ldr	r0, [pc, #112]	; (200bc <timeslot_callback+0xf4>)
   2004a:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   2004c:	2303      	movs	r3, #3
   2004e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   20052:	3010      	adds	r0, #16
   20054:	e7f5      	b.n	20042 <timeslot_callback+0x7a>
	z_impl_k_sem_give(sem);
   20056:	4814      	ldr	r0, [pc, #80]	; (200a8 <timeslot_callback+0xe0>)
   20058:	f001 fc70 	bl	2193c <z_impl_k_sem_give>
   2005c:	e7ca      	b.n	1fff4 <timeslot_callback+0x2c>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2005e:	7e28      	ldrb	r0, [r5, #24]
   20060:	4916      	ldr	r1, [pc, #88]	; (200bc <timeslot_callback+0xf4>)
	_context.timeslot_request.params.earliest.priority =
   20062:	2400      	movs	r4, #0
   20064:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20068:	f7eb fc88 	bl	b97c <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2006c:	4605      	mov	r5, r0
   2006e:	2800      	cmp	r0, #0
   20070:	d0c0      	beq.n	1fff4 <timeslot_callback+0x2c>
   20072:	4a10      	ldr	r2, [pc, #64]	; (200b4 <timeslot_callback+0xec>)
   20074:	4912      	ldr	r1, [pc, #72]	; (200c0 <timeslot_callback+0xf8>)
   20076:	480e      	ldr	r0, [pc, #56]	; (200b0 <timeslot_callback+0xe8>)
   20078:	2344      	movs	r3, #68	; 0x44
   2007a:	f007 fa3c 	bl	274f6 <printk>
   2007e:	4629      	mov	r1, r5
   20080:	4810      	ldr	r0, [pc, #64]	; (200c4 <timeslot_callback+0xfc>)
   20082:	f007 fa38 	bl	274f6 <printk>
   20086:	2144      	movs	r1, #68	; 0x44
		__ASSERT(false, "unexpected signal: %u", signal);
   20088:	480a      	ldr	r0, [pc, #40]	; (200b4 <timeslot_callback+0xec>)
   2008a:	f007 fcd9 	bl	27a40 <assert_post_action>
		return NULL;
   2008e:	e7b1      	b.n	1fff4 <timeslot_callback+0x2c>
		__ASSERT(false, "unexpected signal: %u", signal);
   20090:	4a08      	ldr	r2, [pc, #32]	; (200b4 <timeslot_callback+0xec>)
   20092:	490d      	ldr	r1, [pc, #52]	; (200c8 <timeslot_callback+0x100>)
   20094:	4806      	ldr	r0, [pc, #24]	; (200b0 <timeslot_callback+0xe8>)
   20096:	2376      	movs	r3, #118	; 0x76
   20098:	f007 fa2d 	bl	274f6 <printk>
   2009c:	4621      	mov	r1, r4
   2009e:	480b      	ldr	r0, [pc, #44]	; (200cc <timeslot_callback+0x104>)
   200a0:	f007 fa29 	bl	274f6 <printk>
   200a4:	2176      	movs	r1, #118	; 0x76
   200a6:	e7ef      	b.n	20088 <timeslot_callback+0xc0>
   200a8:	2000328c 	.word	0x2000328c
   200ac:	000315ca 	.word	0x000315ca
   200b0:	0002dcd3 	.word	0x0002dcd3
   200b4:	00031590 	.word	0x00031590
   200b8:	200032c0 	.word	0x200032c0
   200bc:	200032b0 	.word	0x200032b0
   200c0:	000315ec 	.word	0x000315ec
   200c4:	000315f5 	.word	0x000315f5
   200c8:	00032142 	.word	0x00032142
   200cc:	00031618 	.word	0x00031618

000200d0 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   200d0:	4802      	ldr	r0, [pc, #8]	; (200dc <nrf_flash_sync_init+0xc>)
   200d2:	2201      	movs	r2, #1
   200d4:	2100      	movs	r1, #0
   200d6:	f00c bad0 	b.w	2c67a <z_impl_k_sem_init>
   200da:	bf00      	nop
   200dc:	2000328c 	.word	0x2000328c

000200e0 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   200e0:	4b01      	ldr	r3, [pc, #4]	; (200e8 <nrf_flash_sync_set_context+0x8>)
   200e2:	61d8      	str	r0, [r3, #28]
}
   200e4:	4770      	bx	lr
   200e6:	bf00      	nop
   200e8:	2000328c 	.word	0x2000328c

000200ec <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   200ec:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   200ee:	f04f 31ff 	mov.w	r1, #4294967295
{
   200f2:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   200f4:	f04f 30ff 	mov.w	r0, #4294967295
   200f8:	f7ff f854 	bl	1f1a4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   200fc:	b148      	cbz	r0, 20112 <nrf_flash_sync_exe+0x26>
   200fe:	4957      	ldr	r1, [pc, #348]	; (2025c <nrf_flash_sync_exe+0x170>)
   20100:	4857      	ldr	r0, [pc, #348]	; (20260 <nrf_flash_sync_exe+0x174>)
   20102:	4a58      	ldr	r2, [pc, #352]	; (20264 <nrf_flash_sync_exe+0x178>)
   20104:	2393      	movs	r3, #147	; 0x93
   20106:	f007 f9f6 	bl	274f6 <printk>
   2010a:	4856      	ldr	r0, [pc, #344]	; (20264 <nrf_flash_sync_exe+0x178>)
   2010c:	2193      	movs	r1, #147	; 0x93
   2010e:	f007 fc97 	bl	27a40 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20112:	4c55      	ldr	r4, [pc, #340]	; (20268 <nrf_flash_sync_exe+0x17c>)
   20114:	4855      	ldr	r0, [pc, #340]	; (2026c <nrf_flash_sync_exe+0x180>)
   20116:	f104 0118 	add.w	r1, r4, #24
   2011a:	f7e0 f9c1 	bl	4a0 <mpsl_timeslot_session_open>
   2011e:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   20120:	f7ff f848 	bl	1f1b4 <multithreading_lock_release>

	if (ret < 0) {
   20124:	2d00      	cmp	r5, #0
   20126:	da0d      	bge.n	20144 <nrf_flash_sync_exe+0x58>
   20128:	4b51      	ldr	r3, [pc, #324]	; (20270 <nrf_flash_sync_exe+0x184>)
   2012a:	4a52      	ldr	r2, [pc, #328]	; (20274 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   2012c:	4852      	ldr	r0, [pc, #328]	; (20278 <nrf_flash_sync_exe+0x18c>)
   2012e:	1ad2      	subs	r2, r2, r3
   20130:	08d2      	lsrs	r2, r2, #3
   20132:	0192      	lsls	r2, r2, #6
   20134:	f042 0201 	orr.w	r2, r2, #1
   20138:	4629      	mov	r1, r5
   2013a:	f007 fcbc 	bl	27ab6 <log_1>
		return -ENOMEM;
   2013e:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   20142:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   20144:	f240 1301 	movw	r3, #257	; 0x101
   20148:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2014a:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   2014c:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2014e:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   20150:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   20152:	4b4a      	ldr	r3, [pc, #296]	; (2027c <nrf_flash_sync_exe+0x190>)
   20154:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20156:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   20158:	f06f 0373 	mvn.w	r3, #115	; 0x73
   2015c:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2015e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20162:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20166:	f3bf 8f5b 	dmb	ish
   2016a:	e853 1f00 	ldrex	r1, [r3]
   2016e:	e843 2000 	strex	r0, r2, [r3]
   20172:	2800      	cmp	r0, #0
   20174:	d1f9      	bne.n	2016a <nrf_flash_sync_exe+0x7e>
   20176:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   2017a:	68a2      	ldr	r2, [r4, #8]
   2017c:	461e      	mov	r6, r3
   2017e:	b14a      	cbz	r2, 20194 <nrf_flash_sync_exe+0xa8>
   20180:	493f      	ldr	r1, [pc, #252]	; (20280 <nrf_flash_sync_exe+0x194>)
   20182:	4837      	ldr	r0, [pc, #220]	; (20260 <nrf_flash_sync_exe+0x174>)
   20184:	4a37      	ldr	r2, [pc, #220]	; (20264 <nrf_flash_sync_exe+0x178>)
   20186:	23a9      	movs	r3, #169	; 0xa9
   20188:	f007 f9b5 	bl	274f6 <printk>
   2018c:	4835      	ldr	r0, [pc, #212]	; (20264 <nrf_flash_sync_exe+0x178>)
   2018e:	21a9      	movs	r1, #169	; 0xa9
   20190:	f007 fc56 	bl	27a40 <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20194:	f04f 30ff 	mov.w	r0, #4294967295
   20198:	f04f 31ff 	mov.w	r1, #4294967295
   2019c:	f7ff f802 	bl	1f1a4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   201a0:	b148      	cbz	r0, 201b6 <nrf_flash_sync_exe+0xca>
   201a2:	492e      	ldr	r1, [pc, #184]	; (2025c <nrf_flash_sync_exe+0x170>)
   201a4:	482e      	ldr	r0, [pc, #184]	; (20260 <nrf_flash_sync_exe+0x174>)
   201a6:	4a2f      	ldr	r2, [pc, #188]	; (20264 <nrf_flash_sync_exe+0x178>)
   201a8:	23ac      	movs	r3, #172	; 0xac
   201aa:	f007 f9a4 	bl	274f6 <printk>
   201ae:	482d      	ldr	r0, [pc, #180]	; (20264 <nrf_flash_sync_exe+0x178>)
   201b0:	21ac      	movs	r1, #172	; 0xac
   201b2:	f007 fc45 	bl	27a40 <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   201b6:	4933      	ldr	r1, [pc, #204]	; (20284 <nrf_flash_sync_exe+0x198>)
   201b8:	7e20      	ldrb	r0, [r4, #24]
   201ba:	f7eb fbdf 	bl	b97c <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   201be:	4605      	mov	r5, r0
   201c0:	b168      	cbz	r0, 201de <nrf_flash_sync_exe+0xf2>
   201c2:	4a28      	ldr	r2, [pc, #160]	; (20264 <nrf_flash_sync_exe+0x178>)
   201c4:	4930      	ldr	r1, [pc, #192]	; (20288 <nrf_flash_sync_exe+0x19c>)
   201c6:	4826      	ldr	r0, [pc, #152]	; (20260 <nrf_flash_sync_exe+0x174>)
   201c8:	23ae      	movs	r3, #174	; 0xae
   201ca:	f007 f994 	bl	274f6 <printk>
   201ce:	482f      	ldr	r0, [pc, #188]	; (2028c <nrf_flash_sync_exe+0x1a0>)
   201d0:	4629      	mov	r1, r5
   201d2:	f007 f990 	bl	274f6 <printk>
   201d6:	4823      	ldr	r0, [pc, #140]	; (20264 <nrf_flash_sync_exe+0x178>)
   201d8:	21ae      	movs	r1, #174	; 0xae
   201da:	f007 fc31 	bl	27a40 <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   201de:	f7fe ffe9 	bl	1f1b4 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   201e2:	4a2b      	ldr	r2, [pc, #172]	; (20290 <nrf_flash_sync_exe+0x1a4>)
   201e4:	4820      	ldr	r0, [pc, #128]	; (20268 <nrf_flash_sync_exe+0x17c>)
   201e6:	2300      	movs	r3, #0
   201e8:	f001 fbec 	bl	219c4 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   201ec:	2800      	cmp	r0, #0
   201ee:	da14      	bge.n	2021a <nrf_flash_sync_exe+0x12e>
   201f0:	4b1f      	ldr	r3, [pc, #124]	; (20270 <nrf_flash_sync_exe+0x184>)
   201f2:	4920      	ldr	r1, [pc, #128]	; (20274 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("timeout");
   201f4:	4827      	ldr	r0, [pc, #156]	; (20294 <nrf_flash_sync_exe+0x1a8>)
   201f6:	1ac9      	subs	r1, r1, r3
   201f8:	08c9      	lsrs	r1, r1, #3
   201fa:	0189      	lsls	r1, r1, #6
   201fc:	f041 0101 	orr.w	r1, r1, #1
   20200:	f007 fc4c 	bl	27a9c <log_0>
   20204:	f3bf 8f5b 	dmb	ish
   20208:	2301      	movs	r3, #1
   2020a:	e856 2f00 	ldrex	r2, [r6]
   2020e:	e846 3100 	strex	r1, r3, [r6]
   20212:	2900      	cmp	r1, #0
   20214:	d1f9      	bne.n	2020a <nrf_flash_sync_exe+0x11e>
   20216:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2021a:	f04f 30ff 	mov.w	r0, #4294967295
   2021e:	f04f 31ff 	mov.w	r1, #4294967295
   20222:	f7fe ffbf 	bl	1f1a4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20226:	b148      	cbz	r0, 2023c <nrf_flash_sync_exe+0x150>
   20228:	490c      	ldr	r1, [pc, #48]	; (2025c <nrf_flash_sync_exe+0x170>)
   2022a:	480d      	ldr	r0, [pc, #52]	; (20260 <nrf_flash_sync_exe+0x174>)
   2022c:	4a0d      	ldr	r2, [pc, #52]	; (20264 <nrf_flash_sync_exe+0x178>)
   2022e:	23b9      	movs	r3, #185	; 0xb9
   20230:	f007 f961 	bl	274f6 <printk>
   20234:	480b      	ldr	r0, [pc, #44]	; (20264 <nrf_flash_sync_exe+0x178>)
   20236:	21b9      	movs	r1, #185	; 0xb9
   20238:	f007 fc02 	bl	27a40 <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   2023c:	7e20      	ldrb	r0, [r4, #24]
   2023e:	f7eb fbd6 	bl	b9ee <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   20242:	f7fe ffb7 	bl	1f1b4 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20246:	f3bf 8f5b 	dmb	ish
   2024a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2024c:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   20250:	b113      	cbz	r3, 20258 <nrf_flash_sync_exe+0x16c>
	z_impl_k_sem_reset(sem);
   20252:	4805      	ldr	r0, [pc, #20]	; (20268 <nrf_flash_sync_exe+0x17c>)
   20254:	f001 fc40 	bl	21ad8 <z_impl_k_sem_reset>
	return _context.status;
   20258:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2025a:	e772      	b.n	20142 <nrf_flash_sync_exe+0x56>
   2025c:	00031520 	.word	0x00031520
   20260:	0002dcd3 	.word	0x0002dcd3
   20264:	00031590 	.word	0x00031590
   20268:	2000328c 	.word	0x2000328c
   2026c:	0001ffc9 	.word	0x0001ffc9
   20270:	0002ccb8 	.word	0x0002ccb8
   20274:	0002cd50 	.word	0x0002cd50
   20278:	00031630 	.word	0x00031630
   2027c:	07a11fff 	.word	0x07a11fff
   20280:	00031656 	.word	0x00031656
   20284:	200032b0 	.word	0x200032b0
   20288:	000315ec 	.word	0x000315ec
   2028c:	000315f5 	.word	0x000315f5
   20290:	000b7b44 	.word	0x000b7b44
   20294:	0002ff2b 	.word	0x0002ff2b

00020298 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20298:	4b07      	ldr	r3, [pc, #28]	; (202b8 <nrf_flash_sync_check_time_limit+0x20>)
   2029a:	2201      	movs	r2, #1
   2029c:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   2029e:	3b40      	subs	r3, #64	; 0x40
   202a0:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   202a4:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   202a8:	4418      	add	r0, r3
   202aa:	4b04      	ldr	r3, [pc, #16]	; (202bc <nrf_flash_sync_check_time_limit+0x24>)
   202ac:	69db      	ldr	r3, [r3, #28]
}
   202ae:	4298      	cmp	r0, r3
   202b0:	bf34      	ite	cc
   202b2:	2000      	movcc	r0, #0
   202b4:	2001      	movcs	r0, #1
   202b6:	4770      	bx	lr
   202b8:	40008040 	.word	0x40008040
   202bc:	2000328c 	.word	0x2000328c

000202c0 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   202c0:	4b03      	ldr	r3, [pc, #12]	; (202d0 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   202c2:	6818      	ldr	r0, [r3, #0]
}
   202c4:	f1a0 0308 	sub.w	r3, r0, #8
   202c8:	4258      	negs	r0, r3
   202ca:	4158      	adcs	r0, r3
   202cc:	4770      	bx	lr
   202ce:	bf00      	nop
   202d0:	10000130 	.word	0x10000130

000202d4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   202d4:	4b06      	ldr	r3, [pc, #24]	; (202f0 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   202d6:	681b      	ldr	r3, [r3, #0]
   202d8:	2b08      	cmp	r3, #8
   202da:	d106      	bne.n	202ea <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   202dc:	4b05      	ldr	r3, [pc, #20]	; (202f4 <nrf52_errata_103+0x20>)
   202de:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   202e0:	2b05      	cmp	r3, #5
   202e2:	d802      	bhi.n	202ea <nrf52_errata_103+0x16>
   202e4:	4a04      	ldr	r2, [pc, #16]	; (202f8 <nrf52_errata_103+0x24>)
   202e6:	5cd0      	ldrb	r0, [r2, r3]
   202e8:	4770      	bx	lr
        return false;
   202ea:	2000      	movs	r0, #0
}
   202ec:	4770      	bx	lr
   202ee:	bf00      	nop
   202f0:	10000130 	.word	0x10000130
   202f4:	10000134 	.word	0x10000134
   202f8:	00031698 	.word	0x00031698

000202fc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   202fc:	4a02      	ldr	r2, [pc, #8]	; (20308 <nvmc_wait+0xc>)
   202fe:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   20302:	2b00      	cmp	r3, #0
   20304:	d0fb      	beq.n	202fe <nvmc_wait+0x2>
}
   20306:	4770      	bx	lr
   20308:	4001e000 	.word	0x4001e000

0002030c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   2030c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   2030e:	f7ff ffd7 	bl	202c0 <nrf52_errata_136>
   20312:	b140      	cbz	r0, 20326 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20318:	2200      	movs	r2, #0
   2031a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2031e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   20322:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   20326:	f7ff ffcb 	bl	202c0 <nrf52_errata_136>
   2032a:	2800      	cmp	r0, #0
   2032c:	d046      	beq.n	203bc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2032e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20332:	4b5b      	ldr	r3, [pc, #364]	; (204a0 <SystemInit+0x194>)
   20334:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   20338:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2033c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20340:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20344:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20348:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2034c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20350:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20354:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20358:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2035c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20360:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20364:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20368:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2036c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20370:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20374:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20378:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2037c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20380:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20384:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20388:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2038c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20390:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20394:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20398:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2039c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   203a0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   203a4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   203a8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   203ac:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   203b0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   203b4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   203b8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   203bc:	f7ff ff8a 	bl	202d4 <nrf52_errata_103>
   203c0:	b110      	cbz	r0, 203c8 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   203c2:	4b38      	ldr	r3, [pc, #224]	; (204a4 <SystemInit+0x198>)
   203c4:	4a38      	ldr	r2, [pc, #224]	; (204a8 <SystemInit+0x19c>)
   203c6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   203c8:	f7ff ff84 	bl	202d4 <nrf52_errata_103>
   203cc:	b118      	cbz	r0, 203d6 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   203ce:	4b37      	ldr	r3, [pc, #220]	; (204ac <SystemInit+0x1a0>)
   203d0:	22fb      	movs	r2, #251	; 0xfb
   203d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   203d6:	f7ff ff7d 	bl	202d4 <nrf52_errata_103>
   203da:	b148      	cbz	r0, 203f0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   203dc:	4934      	ldr	r1, [pc, #208]	; (204b0 <SystemInit+0x1a4>)
   203de:	4b35      	ldr	r3, [pc, #212]	; (204b4 <SystemInit+0x1a8>)
   203e0:	680a      	ldr	r2, [r1, #0]
   203e2:	681b      	ldr	r3, [r3, #0]
   203e4:	f022 020f 	bic.w	r2, r2, #15
   203e8:	f003 030f 	and.w	r3, r3, #15
   203ec:	4313      	orrs	r3, r2
   203ee:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   203f0:	f7ff ff70 	bl	202d4 <nrf52_errata_103>
   203f4:	b118      	cbz	r0, 203fe <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   203f6:	4b30      	ldr	r3, [pc, #192]	; (204b8 <SystemInit+0x1ac>)
   203f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   203fc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   203fe:	f7ff ff5f 	bl	202c0 <nrf52_errata_136>
   20402:	b148      	cbz	r0, 20418 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20408:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2040c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2040e:	bf44      	itt	mi
   20410:	f06f 0201 	mvnmi.w	r2, #1
   20414:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20418:	4b28      	ldr	r3, [pc, #160]	; (204bc <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2041a:	681b      	ldr	r3, [r3, #0]
   2041c:	2b08      	cmp	r3, #8
   2041e:	d10e      	bne.n	2043e <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20420:	4b27      	ldr	r3, [pc, #156]	; (204c0 <SystemInit+0x1b4>)
   20422:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   20424:	2b05      	cmp	r3, #5
   20426:	d802      	bhi.n	2042e <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   20428:	4a26      	ldr	r2, [pc, #152]	; (204c4 <SystemInit+0x1b8>)
   2042a:	5cd3      	ldrb	r3, [r2, r3]
   2042c:	b13b      	cbz	r3, 2043e <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2042e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20432:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   20436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2043a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2043e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20442:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   20446:	2a00      	cmp	r2, #0
   20448:	db03      	blt.n	20452 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2044a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2044e:	2b00      	cmp	r3, #0
   20450:	da22      	bge.n	20498 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20452:	491d      	ldr	r1, [pc, #116]	; (204c8 <SystemInit+0x1bc>)
   20454:	2301      	movs	r3, #1
   20456:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2045a:	f7ff ff4f 	bl	202fc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2045e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   20462:	2412      	movs	r4, #18
   20464:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   20468:	f7ff ff48 	bl	202fc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2046c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   20470:	f7ff ff44 	bl	202fc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20474:	2300      	movs	r3, #0
   20476:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2047a:	f7ff ff3f 	bl	202fc <nvmc_wait>
   2047e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20482:	4912      	ldr	r1, [pc, #72]	; (204cc <SystemInit+0x1c0>)
   20484:	4b12      	ldr	r3, [pc, #72]	; (204d0 <SystemInit+0x1c4>)
   20486:	68ca      	ldr	r2, [r1, #12]
   20488:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2048c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2048e:	60cb      	str	r3, [r1, #12]
   20490:	f3bf 8f4f 	dsb	sy
    __NOP();
   20494:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20496:	e7fd      	b.n	20494 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20498:	4b0e      	ldr	r3, [pc, #56]	; (204d4 <SystemInit+0x1c8>)
   2049a:	4a0f      	ldr	r2, [pc, #60]	; (204d8 <SystemInit+0x1cc>)
   2049c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2049e:	bd10      	pop	{r4, pc}
   204a0:	4000c000 	.word	0x4000c000
   204a4:	4000568c 	.word	0x4000568c
   204a8:	00038148 	.word	0x00038148
   204ac:	4000f000 	.word	0x4000f000
   204b0:	40000ee4 	.word	0x40000ee4
   204b4:	10000258 	.word	0x10000258
   204b8:	40029640 	.word	0x40029640
   204bc:	10000130 	.word	0x10000130
   204c0:	10000134 	.word	0x10000134
   204c4:	00031692 	.word	0x00031692
   204c8:	4001e000 	.word	0x4001e000
   204cc:	e000ed00 	.word	0xe000ed00
   204d0:	05fa0004 	.word	0x05fa0004
   204d4:	200005b8 	.word	0x200005b8
   204d8:	03d09000 	.word	0x03d09000

000204dc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   204dc:	2301      	movs	r3, #1
   204de:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   204e2:	f010 0fff 	tst.w	r0, #255	; 0xff
   204e6:	d012      	beq.n	2050e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   204e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   204ec:	f3ef 8111 	mrs	r1, BASEPRI
   204f0:	f383 8811 	msr	BASEPRI, r3
   204f4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   204f8:	4a06      	ldr	r2, [pc, #24]	; (20514 <nrfx_gpiote_channel_free+0x38>)
   204fa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   204fc:	ea23 0000 	bic.w	r0, r3, r0
   20500:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   20502:	f381 8811 	msr	BASEPRI, r1
   20506:	f3bf 8f6f 	isb	sy
   2050a:	4803      	ldr	r0, [pc, #12]	; (20518 <nrfx_gpiote_channel_free+0x3c>)
   2050c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   2050e:	4803      	ldr	r0, [pc, #12]	; (2051c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20510:	4770      	bx	lr
   20512:	bf00      	nop
   20514:	200032d0 	.word	0x200032d0
   20518:	0bad0000 	.word	0x0bad0000
   2051c:	0bad0004 	.word	0x0bad0004

00020520 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   20520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20524:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   20526:	f8df e060 	ldr.w	lr, [pc, #96]	; 20588 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   2052a:	4816      	ldr	r0, [pc, #88]	; (20584 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   2052c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2058c <nrfx_gpiote_channel_alloc+0x6c>
{
   20530:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   20532:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   20534:	2601      	movs	r6, #1
   20536:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   20538:	f04f 0140 	mov.w	r1, #64	; 0x40
   2053c:	f3ef 8c11 	mrs	ip, BASEPRI
   20540:	f381 8811 	msr	BASEPRI, r1
   20544:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   20548:	fa22 f103 	lsr.w	r1, r2, r3
   2054c:	07c9      	lsls	r1, r1, #31
   2054e:	d50a      	bpl.n	20566 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   20550:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   20554:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   20558:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   2055a:	bf01      	itttt	eq
   2055c:	4339      	orreq	r1, r7
   2055e:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   20562:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   20564:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   20566:	f38c 8811 	msr	BASEPRI, ip
   2056a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   2056e:	4540      	cmp	r0, r8
   20570:	d005      	beq.n	2057e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   20572:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   20576:	439a      	bics	r2, r3
   20578:	f104 0401 	add.w	r4, r4, #1
   2057c:	d1db      	bne.n	20536 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20582:	bf00      	nop
   20584:	0bad0002 	.word	0x0bad0002
   20588:	200032d0 	.word	0x200032d0
   2058c:	0bad0000 	.word	0x0bad0000

00020590 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   20590:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   20592:	2100      	movs	r1, #0
{
   20594:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   20596:	f00b ff7b 	bl	2c490 <is_valid_address>
   2059a:	b958      	cbnz	r0, 205b4 <nrfx_nvmc_page_erase+0x24>
   2059c:	4912      	ldr	r1, [pc, #72]	; (205e8 <nrfx_nvmc_page_erase+0x58>)
   2059e:	4813      	ldr	r0, [pc, #76]	; (205ec <nrfx_nvmc_page_erase+0x5c>)
   205a0:	4a13      	ldr	r2, [pc, #76]	; (205f0 <nrfx_nvmc_page_erase+0x60>)
   205a2:	f44f 7383 	mov.w	r3, #262	; 0x106
   205a6:	f006 ffa6 	bl	274f6 <printk>
   205aa:	4811      	ldr	r0, [pc, #68]	; (205f0 <nrfx_nvmc_page_erase+0x60>)
   205ac:	f44f 7183 	mov.w	r1, #262	; 0x106
   205b0:	f007 fa46 	bl	27a40 <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   205b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   205b8:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   205ba:	fbb4 f3f2 	udiv	r3, r4, r2
   205be:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   205c2:	b973      	cbnz	r3, 205e2 <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   205c4:	4b0b      	ldr	r3, [pc, #44]	; (205f4 <nrfx_nvmc_page_erase+0x64>)
   205c6:	2202      	movs	r2, #2
   205c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   205cc:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   205d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   205d4:	07d2      	lsls	r2, r2, #31
   205d6:	d5fb      	bpl.n	205d0 <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
   205d8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   205da:	4807      	ldr	r0, [pc, #28]	; (205f8 <nrfx_nvmc_page_erase+0x68>)
   205dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   205e0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   205e2:	4806      	ldr	r0, [pc, #24]	; (205fc <nrfx_nvmc_page_erase+0x6c>)
   205e4:	e7fc      	b.n	205e0 <nrfx_nvmc_page_erase+0x50>
   205e6:	bf00      	nop
   205e8:	000316fa 	.word	0x000316fa
   205ec:	0002dcd3 	.word	0x0002dcd3
   205f0:	0003169e 	.word	0x0003169e
   205f4:	4001e000 	.word	0x4001e000
   205f8:	0bad0000 	.word	0x0bad0000
   205fc:	0bad000a 	.word	0x0bad000a

00020600 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   20600:	b538      	push	{r3, r4, r5, lr}
   20602:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   20604:	2101      	movs	r1, #1
{
   20606:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   20608:	f00b ff42 	bl	2c490 <is_valid_address>
   2060c:	b958      	cbnz	r0, 20626 <nrfx_nvmc_word_write+0x26>
   2060e:	4914      	ldr	r1, [pc, #80]	; (20660 <nrfx_nvmc_word_write+0x60>)
   20610:	4814      	ldr	r0, [pc, #80]	; (20664 <nrfx_nvmc_word_write+0x64>)
   20612:	4a15      	ldr	r2, [pc, #84]	; (20668 <nrfx_nvmc_word_write+0x68>)
   20614:	f44f 73ca 	mov.w	r3, #404	; 0x194
   20618:	f006 ff6d 	bl	274f6 <printk>
   2061c:	4812      	ldr	r0, [pc, #72]	; (20668 <nrfx_nvmc_word_write+0x68>)
   2061e:	f44f 71ca 	mov.w	r1, #404	; 0x194
   20622:	f007 fa0d 	bl	27a40 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   20626:	07a1      	lsls	r1, r4, #30
   20628:	d00b      	beq.n	20642 <nrfx_nvmc_word_write+0x42>
   2062a:	4910      	ldr	r1, [pc, #64]	; (2066c <nrfx_nvmc_word_write+0x6c>)
   2062c:	480d      	ldr	r0, [pc, #52]	; (20664 <nrfx_nvmc_word_write+0x64>)
   2062e:	4a0e      	ldr	r2, [pc, #56]	; (20668 <nrfx_nvmc_word_write+0x68>)
   20630:	f240 1395 	movw	r3, #405	; 0x195
   20634:	f006 ff5f 	bl	274f6 <printk>
   20638:	480b      	ldr	r0, [pc, #44]	; (20668 <nrfx_nvmc_word_write+0x68>)
   2063a:	f240 1195 	movw	r1, #405	; 0x195
   2063e:	f007 f9ff 	bl	27a40 <assert_post_action>
   20642:	4b0b      	ldr	r3, [pc, #44]	; (20670 <nrfx_nvmc_word_write+0x70>)
   20644:	2201      	movs	r2, #1
   20646:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2064a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2064e:	07d2      	lsls	r2, r2, #31
   20650:	d5fb      	bpl.n	2064a <nrfx_nvmc_word_write+0x4a>
    *(volatile uint32_t *)addr = value;
   20652:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   20654:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   20658:	2200      	movs	r2, #0
   2065a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   2065e:	bd38      	pop	{r3, r4, r5, pc}
   20660:	00031714 	.word	0x00031714
   20664:	0002dcd3 	.word	0x0002dcd3
   20668:	0003169e 	.word	0x0003169e
   2066c:	0003172e 	.word	0x0003172e
   20670:	4001e000 	.word	0x4001e000

00020674 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   20674:	4b18      	ldr	r3, [pc, #96]	; (206d8 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   20676:	f8df c06c 	ldr.w	ip, [pc, #108]	; 206e4 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   2067a:	681b      	ldr	r3, [r3, #0]
{
   2067c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   20680:	43db      	mvns	r3, r3
{
   20682:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   20684:	4f15      	ldr	r7, [pc, #84]	; (206dc <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   20686:	4816      	ldr	r0, [pc, #88]	; (206e0 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   20688:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   2068c:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   2068e:	f04f 0e01 	mov.w	lr, #1
   20692:	b2e6      	uxtb	r6, r4
   20694:	b90b      	cbnz	r3, 2069a <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   2069a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2069e:	f3ef 8811 	mrs	r8, BASEPRI
   206a2:	f382 8811 	msr	BASEPRI, r2
   206a6:	f3bf 8f6f 	isb	sy
   206aa:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   206ae:	421a      	tst	r2, r3
   206b0:	d006      	beq.n	206c0 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   206b2:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   206b4:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   206b6:	bf01      	itttt	eq
   206b8:	4311      	orreq	r1, r2
   206ba:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   206bc:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   206be:	4660      	moveq	r0, ip
	__asm__ volatile(
   206c0:	f388 8811 	msr	BASEPRI, r8
   206c4:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   206c8:	4560      	cmp	r0, ip
   206ca:	f104 0401 	add.w	r4, r4, #1
   206ce:	d0e2      	beq.n	20696 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   206d0:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   206d4:	e7dd      	b.n	20692 <nrfx_ppi_channel_alloc+0x1e>
   206d6:	bf00      	nop
   206d8:	0002d724 	.word	0x0002d724
   206dc:	20003330 	.word	0x20003330
   206e0:	0bad0002 	.word	0x0bad0002
   206e4:	0bad0000 	.word	0x0bad0000

000206e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   206e8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   206ea:	4c11      	ldr	r4, [pc, #68]	; (20730 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   206ec:	4a11      	ldr	r2, [pc, #68]	; (20734 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   206ee:	4912      	ldr	r1, [pc, #72]	; (20738 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   206f0:	2303      	movs	r3, #3
   206f2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   206f4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   206f6:	4b11      	ldr	r3, [pc, #68]	; (2073c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   206f8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   206fa:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   206fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   20700:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   20702:	2300      	movs	r3, #0
   20704:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   20706:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20708:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   2070a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   2070c:	4a0c      	ldr	r2, [pc, #48]	; (20740 <_DoInit+0x58>)
   2070e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   20710:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   20712:	2210      	movs	r2, #16
   20714:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   20716:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   20718:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2071a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   2071c:	f009 f92e 	bl	2997c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   20720:	4908      	ldr	r1, [pc, #32]	; (20744 <_DoInit+0x5c>)
   20722:	4620      	mov	r0, r4
   20724:	f009 f92a 	bl	2997c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   20728:	2320      	movs	r3, #32
   2072a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2072c:	bd10      	pop	{r4, pc}
   2072e:	bf00      	nop
   20730:	20003334 	.word	0x20003334
   20734:	00031757 	.word	0x00031757
   20738:	00031760 	.word	0x00031760
   2073c:	2000463b 	.word	0x2000463b
   20740:	2000462b 	.word	0x2000462b
   20744:	00031764 	.word	0x00031764

00020748 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2074c:	4f23      	ldr	r7, [pc, #140]	; (207dc <SEGGER_RTT_WriteSkipNoLock+0x94>)
   2074e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20752:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   20754:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20758:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   2075a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2075c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2075e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20760:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20762:	d834      	bhi.n	207ce <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   20764:	f8d2 a020 	ldr.w	sl, [r2, #32]
   20768:	ebaa 0905 	sub.w	r9, sl, r5
   2076c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   20770:	4294      	cmp	r4, r2
   20772:	d811      	bhi.n	20798 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20774:	f04f 0918 	mov.w	r9, #24
   20778:	fb06 9309 	mla	r3, r6, r9, r9
   2077c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   2077e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20780:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   20782:	4641      	mov	r1, r8
   20784:	4428      	add	r0, r5
   20786:	f009 f968 	bl	29a5a <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   2078a:	fb09 7606 	mla	r6, r9, r6, r7
   2078e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   20790:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   20792:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   20794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   20798:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2079a:	429c      	cmp	r4, r3
   2079c:	d81b      	bhi.n	207d6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2079e:	fb00 bb0b 	mla	fp, r0, fp, fp
   207a2:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   207a4:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   207a6:	f8db 0004 	ldr.w	r0, [fp, #4]
   207aa:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   207ac:	4428      	add	r0, r5
   207ae:	f009 f954 	bl	29a5a <memcpy>
      if (NumBytes) {
   207b2:	ebb4 040a 	subs.w	r4, r4, sl
   207b6:	d006      	beq.n	207c6 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   207b8:	f8db 0004 	ldr.w	r0, [fp, #4]
   207bc:	4622      	mov	r2, r4
   207be:	eb08 0109 	add.w	r1, r8, r9
   207c2:	f009 f94a 	bl	29a5a <memcpy>
      pRing->WrOff = NumBytes;
   207c6:	2018      	movs	r0, #24
   207c8:	fb00 7606 	mla	r6, r0, r6, r7
   207cc:	e7e0      	b.n	20790 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   207ce:	3b01      	subs	r3, #1
   207d0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   207d2:	42a3      	cmp	r3, r4
   207d4:	d2ce      	bcs.n	20774 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   207d6:	2000      	movs	r0, #0
   207d8:	e7dc      	b.n	20794 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   207da:	bf00      	nop
   207dc:	20003334 	.word	0x20003334

000207e0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   207e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   207e2:	4c18      	ldr	r4, [pc, #96]	; (20844 <SEGGER_RTT_WriteNoLock+0x64>)
   207e4:	2318      	movs	r3, #24
   207e6:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   207ea:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   207ee:	4425      	add	r5, r4
  switch (pRing->Flags) {
   207f0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   207f2:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   207f4:	460f      	mov	r7, r1
   207f6:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   207f8:	d00f      	beq.n	2081a <SEGGER_RTT_WriteNoLock+0x3a>
   207fa:	2c02      	cmp	r4, #2
   207fc:	d01a      	beq.n	20834 <SEGGER_RTT_WriteNoLock+0x54>
   207fe:	b9f4      	cbnz	r4, 2083e <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   20800:	4628      	mov	r0, r5
   20802:	f00b fe68 	bl	2c4d6 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   20806:	4286      	cmp	r6, r0
   20808:	d805      	bhi.n	20816 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   2080a:	4632      	mov	r2, r6
   2080c:	4639      	mov	r1, r7
   2080e:	4628      	mov	r0, r5
   20810:	f00b fe6f 	bl	2c4f2 <_WriteNoCheck>
   20814:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   20816:	4620      	mov	r0, r4
   20818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   2081a:	4628      	mov	r0, r5
   2081c:	f00b fe5b 	bl	2c4d6 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   20820:	4286      	cmp	r6, r0
   20822:	4634      	mov	r4, r6
   20824:	bf28      	it	cs
   20826:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   20828:	4622      	mov	r2, r4
   2082a:	4639      	mov	r1, r7
   2082c:	4628      	mov	r0, r5
   2082e:	f00b fe60 	bl	2c4f2 <_WriteNoCheck>
    break;
   20832:	e7f0      	b.n	20816 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   20834:	4628      	mov	r0, r5
}
   20836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   2083a:	f00b be76 	b.w	2c52a <_WriteBlocking>
  switch (pRing->Flags) {
   2083e:	2400      	movs	r4, #0
  return Status;
   20840:	e7e9      	b.n	20816 <SEGGER_RTT_WriteNoLock+0x36>
   20842:	bf00      	nop
   20844:	20003334 	.word	0x20003334

00020848 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   20848:	4b03      	ldr	r3, [pc, #12]	; (20858 <SEGGER_RTT_HasDataUp+0x10>)
   2084a:	2218      	movs	r2, #24
   2084c:	fb02 3300 	mla	r3, r2, r0, r3
   20850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   20852:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   20854:	1a80      	subs	r0, r0, r2
   20856:	4770      	bx	lr
   20858:	20003334 	.word	0x20003334

0002085c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2085c:	4b0e      	ldr	r3, [pc, #56]	; (20898 <z_sys_init_run_level+0x3c>)
{
   2085e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20860:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20864:	3001      	adds	r0, #1
   20866:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2086a:	42a6      	cmp	r6, r4
   2086c:	d800      	bhi.n	20870 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2086e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20870:	e9d4 3500 	ldrd	r3, r5, [r4]
   20874:	4628      	mov	r0, r5
   20876:	4798      	blx	r3
		if (dev != NULL) {
   20878:	b165      	cbz	r5, 20894 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   2087a:	68eb      	ldr	r3, [r5, #12]
   2087c:	b130      	cbz	r0, 2088c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2087e:	2800      	cmp	r0, #0
   20880:	bfb8      	it	lt
   20882:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   20884:	28ff      	cmp	r0, #255	; 0xff
   20886:	bfa8      	it	ge
   20888:	20ff      	movge	r0, #255	; 0xff
   2088a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2088c:	785a      	ldrb	r2, [r3, #1]
   2088e:	f042 0201 	orr.w	r2, r2, #1
   20892:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20894:	3408      	adds	r4, #8
   20896:	e7e8      	b.n	2086a <z_sys_init_run_level+0xe>
   20898:	0002d728 	.word	0x0002d728

0002089c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   2089c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   2089e:	4605      	mov	r5, r0
   208a0:	b910      	cbnz	r0, 208a8 <z_impl_device_get_binding+0xc>
		return NULL;
   208a2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   208a4:	4620      	mov	r0, r4
   208a6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   208a8:	7803      	ldrb	r3, [r0, #0]
   208aa:	2b00      	cmp	r3, #0
   208ac:	d0f9      	beq.n	208a2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   208ae:	4a0f      	ldr	r2, [pc, #60]	; (208ec <z_impl_device_get_binding+0x50>)
   208b0:	4c0f      	ldr	r4, [pc, #60]	; (208f0 <z_impl_device_get_binding+0x54>)
   208b2:	4616      	mov	r6, r2
   208b4:	4294      	cmp	r4, r2
   208b6:	d108      	bne.n	208ca <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   208b8:	4c0d      	ldr	r4, [pc, #52]	; (208f0 <z_impl_device_get_binding+0x54>)
   208ba:	42b4      	cmp	r4, r6
   208bc:	d0f1      	beq.n	208a2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   208be:	4620      	mov	r0, r4
   208c0:	f00b fe64 	bl	2c58c <z_device_ready>
   208c4:	b950      	cbnz	r0, 208dc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   208c6:	3418      	adds	r4, #24
   208c8:	e7f7      	b.n	208ba <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   208ca:	4620      	mov	r0, r4
   208cc:	f00b fe5e 	bl	2c58c <z_device_ready>
   208d0:	b110      	cbz	r0, 208d8 <z_impl_device_get_binding+0x3c>
   208d2:	6823      	ldr	r3, [r4, #0]
   208d4:	42ab      	cmp	r3, r5
   208d6:	d0e5      	beq.n	208a4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   208d8:	3418      	adds	r4, #24
   208da:	e7eb      	b.n	208b4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   208dc:	6821      	ldr	r1, [r4, #0]
   208de:	4628      	mov	r0, r5
   208e0:	f009 f879 	bl	299d6 <strcmp>
   208e4:	2800      	cmp	r0, #0
   208e6:	d1ee      	bne.n	208c6 <z_impl_device_get_binding+0x2a>
   208e8:	e7dc      	b.n	208a4 <z_impl_device_get_binding+0x8>
   208ea:	bf00      	nop
   208ec:	0002ca84 	.word	0x0002ca84
   208f0:	0002c9ac 	.word	0x0002c9ac

000208f4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   208f4:	4b01      	ldr	r3, [pc, #4]	; (208fc <z_impl_z_errno+0x8>)
   208f6:	6898      	ldr	r0, [r3, #8]
}
   208f8:	3064      	adds	r0, #100	; 0x64
   208fa:	4770      	bx	lr
   208fc:	200033dc 	.word	0x200033dc

00020900 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20904:	4605      	mov	r5, r0
   20906:	460f      	mov	r7, r1
	__asm__ volatile(
   20908:	f04f 0340 	mov.w	r3, #64	; 0x40
   2090c:	f3ef 8811 	mrs	r8, BASEPRI
   20910:	f383 8811 	msr	BASEPRI, r3
   20914:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   20918:	f002 ff4e 	bl	237b8 <z_impl_k_current_get>
   2091c:	4c27      	ldr	r4, [pc, #156]	; (209bc <z_fatal_error+0xbc>)
   2091e:	4b28      	ldr	r3, [pc, #160]	; (209c0 <z_fatal_error+0xc0>)
   20920:	1ae4      	subs	r4, r4, r3
   20922:	2d04      	cmp	r5, #4
   20924:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   20928:	bf96      	itet	ls
   2092a:	4a26      	ldrls	r2, [pc, #152]	; (209c4 <z_fatal_error+0xc4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2092c:	4a26      	ldrhi	r2, [pc, #152]	; (209c8 <z_fatal_error+0xc8>)
   2092e:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   20932:	01a4      	lsls	r4, r4, #6
   20934:	f044 0301 	orr.w	r3, r4, #1
   20938:	4606      	mov	r6, r0
   2093a:	f8ad 3000 	strh.w	r3, [sp]
   2093e:	4823      	ldr	r0, [pc, #140]	; (209cc <z_fatal_error+0xcc>)
   20940:	2300      	movs	r3, #0
   20942:	4629      	mov	r1, r5
   20944:	f007 f8e4 	bl	27b10 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20948:	b147      	cbz	r7, 2095c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2094a:	69fb      	ldr	r3, [r7, #28]
   2094c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20950:	b123      	cbz	r3, 2095c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   20952:	481f      	ldr	r0, [pc, #124]	; (209d0 <z_fatal_error+0xd0>)
   20954:	f044 0101 	orr.w	r1, r4, #1
   20958:	f007 f8a0 	bl	27a9c <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2095c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20960:	b12e      	cbz	r6, 2096e <z_fatal_error+0x6e>
   20962:	4630      	mov	r0, r6
   20964:	f00b fe49 	bl	2c5fa <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   20968:	b108      	cbz	r0, 2096e <z_fatal_error+0x6e>
   2096a:	7803      	ldrb	r3, [r0, #0]
   2096c:	b903      	cbnz	r3, 20970 <z_fatal_error+0x70>
		thread_name = "unknown";
   2096e:	4819      	ldr	r0, [pc, #100]	; (209d4 <z_fatal_error+0xd4>)
   20970:	f7f1 f850 	bl	11a14 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   20974:	4623      	mov	r3, r4
   20976:	4602      	mov	r2, r0
   20978:	4631      	mov	r1, r6
   2097a:	4817      	ldr	r0, [pc, #92]	; (209d8 <z_fatal_error+0xd8>)
   2097c:	f007 f8af 	bl	27ade <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   20980:	4639      	mov	r1, r7
   20982:	4628      	mov	r0, r5
   20984:	f7fe fc1c 	bl	1f1c0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   20988:	2d04      	cmp	r5, #4
   2098a:	d10c      	bne.n	209a6 <z_fatal_error+0xa6>
   2098c:	4913      	ldr	r1, [pc, #76]	; (209dc <z_fatal_error+0xdc>)
   2098e:	4a14      	ldr	r2, [pc, #80]	; (209e0 <z_fatal_error+0xe0>)
   20990:	4814      	ldr	r0, [pc, #80]	; (209e4 <z_fatal_error+0xe4>)
   20992:	238f      	movs	r3, #143	; 0x8f
   20994:	f006 fdaf 	bl	274f6 <printk>
   20998:	4813      	ldr	r0, [pc, #76]	; (209e8 <z_fatal_error+0xe8>)
   2099a:	f006 fdac 	bl	274f6 <printk>
   2099e:	4810      	ldr	r0, [pc, #64]	; (209e0 <z_fatal_error+0xe0>)
   209a0:	218f      	movs	r1, #143	; 0x8f
   209a2:	f007 f84d 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   209a6:	f388 8811 	msr	BASEPRI, r8
   209aa:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   209ae:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   209b0:	b002      	add	sp, #8
   209b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   209b6:	f7f4 b87b 	b.w	14ab0 <z_impl_k_thread_abort>
   209ba:	bf00      	nop
   209bc:	0002cd80 	.word	0x0002cd80
   209c0:	0002ccb8 	.word	0x0002ccb8
   209c4:	0002d740 	.word	0x0002d740
   209c8:	0003176b 	.word	0x0003176b
   209cc:	00031779 	.word	0x00031779
   209d0:	000317a1 	.word	0x000317a1
   209d4:	0002f2a6 	.word	0x0002f2a6
   209d8:	000317c2 	.word	0x000317c2
   209dc:	000317fc 	.word	0x000317fc
   209e0:	000317da 	.word	0x000317da
   209e4:	0002dcd3 	.word	0x0002dcd3
   209e8:	00031819 	.word	0x00031819

000209ec <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   209ec:	4802      	ldr	r0, [pc, #8]	; (209f8 <z_bss_zero+0xc>)
   209ee:	4a03      	ldr	r2, [pc, #12]	; (209fc <z_bss_zero+0x10>)
   209f0:	2100      	movs	r1, #0
   209f2:	1a12      	subs	r2, r2, r0
   209f4:	f009 b83c 	b.w	29a70 <memset>
   209f8:	20000a30 	.word	0x20000a30
   209fc:	20004bf8 	.word	0x20004bf8

00020a00 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20a00:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   20a02:	4b0a      	ldr	r3, [pc, #40]	; (20a2c <bg_thread_main+0x2c>)
   20a04:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20a06:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   20a08:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20a0a:	f7ff ff27 	bl	2085c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   20a0e:	f004 f875 	bl	24afc <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20a12:	2003      	movs	r0, #3
   20a14:	f7ff ff22 	bl	2085c <z_sys_init_run_level>

	z_init_static_threads();
   20a18:	f000 fb82 	bl	21120 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   20a1c:	f7ef fd22 	bl	10464 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20a20:	4a03      	ldr	r2, [pc, #12]	; (20a30 <bg_thread_main+0x30>)
   20a22:	7b13      	ldrb	r3, [r2, #12]
   20a24:	f023 0301 	bic.w	r3, r3, #1
   20a28:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20a2a:	bd08      	pop	{r3, pc}
   20a2c:	20004a3b 	.word	0x20004a3b
   20a30:	20002028 	.word	0x20002028

00020a34 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20a34:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   20a38:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20a3a:	f7f0 fef7 	bl	1182c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   20a3e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 20b40 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20a42:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   20a46:	4d36      	ldr	r5, [pc, #216]	; (20b20 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   20a48:	4e36      	ldr	r6, [pc, #216]	; (20b24 <z_cstart+0xf0>)
   20a4a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20a4c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 20b44 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
   20a50:	4f35      	ldr	r7, [pc, #212]	; (20b28 <z_cstart+0xf4>)
   20a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20a56:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20a58:	23e0      	movs	r3, #224	; 0xe0
   20a5a:	2400      	movs	r4, #0
   20a5c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20a60:	2320      	movs	r3, #32
   20a62:	77eb      	strb	r3, [r5, #31]
   20a64:	762c      	strb	r4, [r5, #24]
   20a66:	766c      	strb	r4, [r5, #25]
   20a68:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20a6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20a6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20a70:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20a72:	f7f3 ffb9 	bl	149e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20a76:	f7f3 fc9f 	bl	143b8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20a7a:	f04f 33ff 	mov.w	r3, #4294967295
   20a7e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20a80:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   20a82:	f7f4 f90b 	bl	14c9c <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   20a86:	4d29      	ldr	r5, [pc, #164]	; (20b2c <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   20a88:	f7f4 f824 	bl	14ad4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20a8c:	f240 1301 	movw	r3, #257	; 0x101
   20a90:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   20a94:	ab06      	add	r3, sp, #24
   20a96:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   20a98:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20a9c:	f00b fd75 	bl	2c58a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20aa0:	4620      	mov	r0, r4
   20aa2:	f7ff fedb 	bl	2085c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20aa6:	2001      	movs	r0, #1
   20aa8:	f7ff fed8 	bl	2085c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20aac:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   20ab0:	f002 fcea 	bl	23488 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20ab4:	4b1e      	ldr	r3, [pc, #120]	; (20b30 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
   20ab6:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20ab8:	491e      	ldr	r1, [pc, #120]	; (20b34 <z_cstart+0x100>)
   20aba:	9305      	str	r3, [sp, #20]
   20abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20ac0:	4653      	mov	r3, sl
   20ac2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   20ac6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20aca:	9400      	str	r4, [sp, #0]
   20acc:	4630      	mov	r0, r6
   20ace:	f000 fa75 	bl	20fbc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20ad2:	7b73      	ldrb	r3, [r6, #13]
   20ad4:	4680      	mov	r8, r0
   20ad6:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   20ada:	4630      	mov	r0, r6
   20adc:	7373      	strb	r3, [r6, #13]
   20ade:	f002 faa3 	bl	23028 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   20ae2:	230f      	movs	r3, #15
   20ae4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   20ae8:	4913      	ldr	r1, [pc, #76]	; (20b38 <z_cstart+0x104>)
   20aea:	4b14      	ldr	r3, [pc, #80]	; (20b3c <z_cstart+0x108>)
   20aec:	f44f 72a0 	mov.w	r2, #320	; 0x140
   20af0:	e9cd b404 	strd	fp, r4, [sp, #16]
   20af4:	e9cd 5400 	strd	r5, r4, [sp]
   20af8:	4638      	mov	r0, r7
   20afa:	f000 fa5f 	bl	20fbc <z_setup_new_thread>
   20afe:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   20b00:	60ef      	str	r7, [r5, #12]
   20b02:	f023 0304 	bic.w	r3, r3, #4
   20b06:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   20b08:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   20b0c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   20b10:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   20b12:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20b16:	4652      	mov	r2, sl
   20b18:	4641      	mov	r1, r8
   20b1a:	4630      	mov	r0, r6
   20b1c:	f7f3 fc36 	bl	1438c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20b20:	e000ed00 	.word	0xe000ed00
   20b24:	20002028 	.word	0x20002028
   20b28:	20001fa8 	.word	0x20001fa8
   20b2c:	200033dc 	.word	0x200033dc
   20b30:	00031898 	.word	0x00031898
   20b34:	20006f00 	.word	0x20006f00
   20b38:	20007720 	.word	0x20007720
   20b3c:	0002128d 	.word	0x0002128d
   20b40:	200080a0 	.word	0x200080a0
   20b44:	00020a01 	.word	0x00020a01

00020b48 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   20b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20b4a:	4d0f      	ldr	r5, [pc, #60]	; (20b88 <statics_init+0x40>)
   20b4c:	4c0f      	ldr	r4, [pc, #60]	; (20b8c <statics_init+0x44>)
   20b4e:	4e10      	ldr	r6, [pc, #64]	; (20b90 <statics_init+0x48>)
   20b50:	462f      	mov	r7, r5
   20b52:	42ac      	cmp	r4, r5
   20b54:	d90c      	bls.n	20b70 <statics_init+0x28>
   20b56:	490f      	ldr	r1, [pc, #60]	; (20b94 <statics_init+0x4c>)
   20b58:	480f      	ldr	r0, [pc, #60]	; (20b98 <statics_init+0x50>)
   20b5a:	2317      	movs	r3, #23
   20b5c:	4632      	mov	r2, r6
   20b5e:	f006 fcca 	bl	274f6 <printk>
   20b62:	480e      	ldr	r0, [pc, #56]	; (20b9c <statics_init+0x54>)
   20b64:	f006 fcc7 	bl	274f6 <printk>
   20b68:	2117      	movs	r1, #23
   20b6a:	4630      	mov	r0, r6
   20b6c:	f006 ff68 	bl	27a40 <assert_post_action>
   20b70:	42bc      	cmp	r4, r7
   20b72:	d301      	bcc.n	20b78 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   20b74:	2000      	movs	r0, #0
   20b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20b78:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20b7c:	4620      	mov	r0, r4
   20b7e:	f00b fd0f 	bl	2c5a0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20b82:	3418      	adds	r4, #24
   20b84:	e7e5      	b.n	20b52 <statics_init+0xa>
   20b86:	bf00      	nop
   20b88:	200007b8 	.word	0x200007b8
   20b8c:	200007a0 	.word	0x200007a0
   20b90:	000318a0 	.word	0x000318a0
   20b94:	000318c2 	.word	0x000318c2
   20b98:	0002dcd3 	.word	0x0002dcd3
   20b9c:	0002e3f4 	.word	0x0002e3f4

00020ba0 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ba4:	b087      	sub	sp, #28
   20ba6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   20baa:	4606      	mov	r6, r0
   20bac:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20bae:	4640      	mov	r0, r8
   20bb0:	4649      	mov	r1, r9
{
   20bb2:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20bb4:	f00b fdfa 	bl	2c7ac <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20bb8:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   20bc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   20bc4:	f3ef 8511 	mrs	r5, BASEPRI
   20bc8:	f383 8811 	msr	BASEPRI, r3
   20bcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20bd0:	4620      	mov	r0, r4
   20bd2:	f000 fb35 	bl	21240 <z_spin_lock_valid>
   20bd6:	b968      	cbnz	r0, 20bf4 <k_heap_aligned_alloc+0x54>
   20bd8:	4a3f      	ldr	r2, [pc, #252]	; (20cd8 <k_heap_aligned_alloc+0x138>)
   20bda:	4940      	ldr	r1, [pc, #256]	; (20cdc <k_heap_aligned_alloc+0x13c>)
   20bdc:	4840      	ldr	r0, [pc, #256]	; (20ce0 <k_heap_aligned_alloc+0x140>)
   20bde:	2381      	movs	r3, #129	; 0x81
   20be0:	f006 fc89 	bl	274f6 <printk>
   20be4:	483f      	ldr	r0, [pc, #252]	; (20ce4 <k_heap_aligned_alloc+0x144>)
   20be6:	4621      	mov	r1, r4
   20be8:	f006 fc85 	bl	274f6 <printk>
   20bec:	483a      	ldr	r0, [pc, #232]	; (20cd8 <k_heap_aligned_alloc+0x138>)
   20bee:	2181      	movs	r1, #129	; 0x81
   20bf0:	f006 ff26 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   20bf4:	4620      	mov	r0, r4
   20bf6:	f000 fb41 	bl	2127c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20bfa:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20bfe:	b17b      	cbz	r3, 20c20 <k_heap_aligned_alloc+0x80>
   20c00:	ea58 0309 	orrs.w	r3, r8, r9
   20c04:	d00c      	beq.n	20c20 <k_heap_aligned_alloc+0x80>
   20c06:	4938      	ldr	r1, [pc, #224]	; (20ce8 <k_heap_aligned_alloc+0x148>)
   20c08:	4a38      	ldr	r2, [pc, #224]	; (20cec <k_heap_aligned_alloc+0x14c>)
   20c0a:	4835      	ldr	r0, [pc, #212]	; (20ce0 <k_heap_aligned_alloc+0x140>)
   20c0c:	2328      	movs	r3, #40	; 0x28
   20c0e:	f006 fc72 	bl	274f6 <printk>
   20c12:	4837      	ldr	r0, [pc, #220]	; (20cf0 <k_heap_aligned_alloc+0x150>)
   20c14:	f006 fc6f 	bl	274f6 <printk>
   20c18:	4834      	ldr	r0, [pc, #208]	; (20cec <k_heap_aligned_alloc+0x14c>)
   20c1a:	2128      	movs	r1, #40	; 0x28
   20c1c:	f006 ff10 	bl	27a40 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c20:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 20cd8 <k_heap_aligned_alloc+0x138>
   20c24:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 20cdc <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20c28:	4652      	mov	r2, sl
   20c2a:	4659      	mov	r1, fp
   20c2c:	4630      	mov	r0, r6
   20c2e:	f7f0 f88f 	bl	10d50 <sys_heap_aligned_alloc>
   20c32:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   20c34:	f003 f9e4 	bl	24000 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20c38:	b1cf      	cbz	r7, 20c6e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c3a:	4620      	mov	r0, r4
   20c3c:	f000 fb0e 	bl	2125c <z_spin_unlock_valid>
   20c40:	b968      	cbnz	r0, 20c5e <k_heap_aligned_alloc+0xbe>
   20c42:	4a25      	ldr	r2, [pc, #148]	; (20cd8 <k_heap_aligned_alloc+0x138>)
   20c44:	492b      	ldr	r1, [pc, #172]	; (20cf4 <k_heap_aligned_alloc+0x154>)
   20c46:	4826      	ldr	r0, [pc, #152]	; (20ce0 <k_heap_aligned_alloc+0x140>)
   20c48:	23ac      	movs	r3, #172	; 0xac
   20c4a:	f006 fc54 	bl	274f6 <printk>
   20c4e:	482a      	ldr	r0, [pc, #168]	; (20cf8 <k_heap_aligned_alloc+0x158>)
   20c50:	4621      	mov	r1, r4
   20c52:	f006 fc50 	bl	274f6 <printk>
   20c56:	4820      	ldr	r0, [pc, #128]	; (20cd8 <k_heap_aligned_alloc+0x138>)
   20c58:	21ac      	movs	r1, #172	; 0xac
   20c5a:	f006 fef1 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   20c5e:	f385 8811 	msr	BASEPRI, r5
   20c62:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20c66:	4638      	mov	r0, r7
   20c68:	b007      	add	sp, #28
   20c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   20c6e:	9b04      	ldr	r3, [sp, #16]
   20c70:	1a1b      	subs	r3, r3, r0
   20c72:	9302      	str	r3, [sp, #8]
   20c74:	9b05      	ldr	r3, [sp, #20]
   20c76:	eb63 0301 	sbc.w	r3, r3, r1
   20c7a:	9303      	str	r3, [sp, #12]
   20c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20c80:	2a01      	cmp	r2, #1
   20c82:	f173 0300 	sbcs.w	r3, r3, #0
   20c86:	dbd8      	blt.n	20c3a <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20c8c:	4629      	mov	r1, r5
   20c8e:	e9cd 2300 	strd	r2, r3, [sp]
   20c92:	4620      	mov	r0, r4
   20c94:	f106 020c 	add.w	r2, r6, #12
   20c98:	f001 ff8c 	bl	22bb4 <z_pend_curr>
	__asm__ volatile(
   20c9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ca0:	f3ef 8511 	mrs	r5, BASEPRI
   20ca4:	f383 8811 	msr	BASEPRI, r3
   20ca8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cac:	4620      	mov	r0, r4
   20cae:	f000 fac7 	bl	21240 <z_spin_lock_valid>
   20cb2:	b968      	cbnz	r0, 20cd0 <k_heap_aligned_alloc+0x130>
   20cb4:	480a      	ldr	r0, [pc, #40]	; (20ce0 <k_heap_aligned_alloc+0x140>)
   20cb6:	2381      	movs	r3, #129	; 0x81
   20cb8:	4642      	mov	r2, r8
   20cba:	4649      	mov	r1, r9
   20cbc:	f006 fc1b 	bl	274f6 <printk>
   20cc0:	4808      	ldr	r0, [pc, #32]	; (20ce4 <k_heap_aligned_alloc+0x144>)
   20cc2:	4621      	mov	r1, r4
   20cc4:	f006 fc17 	bl	274f6 <printk>
   20cc8:	2181      	movs	r1, #129	; 0x81
   20cca:	4640      	mov	r0, r8
   20ccc:	f006 feb8 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   20cd0:	4620      	mov	r0, r4
   20cd2:	f000 fad3 	bl	2127c <z_spin_lock_set_owner>
	return k;
   20cd6:	e7a7      	b.n	20c28 <k_heap_aligned_alloc+0x88>
   20cd8:	0002dd93 	.word	0x0002dd93
   20cdc:	0002dde5 	.word	0x0002dde5
   20ce0:	0002dcd3 	.word	0x0002dcd3
   20ce4:	0002ddfa 	.word	0x0002ddfa
   20ce8:	000318d8 	.word	0x000318d8
   20cec:	000318a0 	.word	0x000318a0
   20cf0:	00030be6 	.word	0x00030be6
   20cf4:	0002ddb9 	.word	0x0002ddb9
   20cf8:	0002ddd0 	.word	0x0002ddd0

00020cfc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cfe:	4605      	mov	r5, r0
   20d00:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20d02:	f100 0414 	add.w	r4, r0, #20
   20d06:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d0a:	f3ef 8711 	mrs	r7, BASEPRI
   20d0e:	f383 8811 	msr	BASEPRI, r3
   20d12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d16:	4620      	mov	r0, r4
   20d18:	f000 fa92 	bl	21240 <z_spin_lock_valid>
   20d1c:	b968      	cbnz	r0, 20d3a <k_heap_free+0x3e>
   20d1e:	4a1b      	ldr	r2, [pc, #108]	; (20d8c <k_heap_free+0x90>)
   20d20:	491b      	ldr	r1, [pc, #108]	; (20d90 <k_heap_free+0x94>)
   20d22:	481c      	ldr	r0, [pc, #112]	; (20d94 <k_heap_free+0x98>)
   20d24:	2381      	movs	r3, #129	; 0x81
   20d26:	f006 fbe6 	bl	274f6 <printk>
   20d2a:	481b      	ldr	r0, [pc, #108]	; (20d98 <k_heap_free+0x9c>)
   20d2c:	4621      	mov	r1, r4
   20d2e:	f006 fbe2 	bl	274f6 <printk>
   20d32:	4816      	ldr	r0, [pc, #88]	; (20d8c <k_heap_free+0x90>)
   20d34:	2181      	movs	r1, #129	; 0x81
   20d36:	f006 fe83 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   20d3a:	4620      	mov	r0, r4
   20d3c:	f000 fa9e 	bl	2127c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   20d40:	4628      	mov	r0, r5
   20d42:	4631      	mov	r1, r6
   20d44:	f7ef ffae 	bl	10ca4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20d48:	f105 000c 	add.w	r0, r5, #12
   20d4c:	f00b fd16 	bl	2c77c <z_unpend_all>
   20d50:	b128      	cbz	r0, 20d5e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   20d52:	4639      	mov	r1, r7
   20d54:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20d5a:	f001 bced 	b.w	22738 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d5e:	4620      	mov	r0, r4
   20d60:	f000 fa7c 	bl	2125c <z_spin_unlock_valid>
   20d64:	b968      	cbnz	r0, 20d82 <k_heap_free+0x86>
   20d66:	4a09      	ldr	r2, [pc, #36]	; (20d8c <k_heap_free+0x90>)
   20d68:	490c      	ldr	r1, [pc, #48]	; (20d9c <k_heap_free+0xa0>)
   20d6a:	480a      	ldr	r0, [pc, #40]	; (20d94 <k_heap_free+0x98>)
   20d6c:	23ac      	movs	r3, #172	; 0xac
   20d6e:	f006 fbc2 	bl	274f6 <printk>
   20d72:	480b      	ldr	r0, [pc, #44]	; (20da0 <k_heap_free+0xa4>)
   20d74:	4621      	mov	r1, r4
   20d76:	f006 fbbe 	bl	274f6 <printk>
   20d7a:	4804      	ldr	r0, [pc, #16]	; (20d8c <k_heap_free+0x90>)
   20d7c:	21ac      	movs	r1, #172	; 0xac
   20d7e:	f006 fe5f 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   20d82:	f387 8811 	msr	BASEPRI, r7
   20d86:	f3bf 8f6f 	isb	sy
}
   20d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d8c:	0002dd93 	.word	0x0002dd93
   20d90:	0002dde5 	.word	0x0002dde5
   20d94:	0002dcd3 	.word	0x0002dcd3
   20d98:	0002ddfa 	.word	0x0002ddfa
   20d9c:	0002ddb9 	.word	0x0002ddb9
   20da0:	0002ddd0 	.word	0x0002ddd0

00020da4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   20da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20da8:	4d16      	ldr	r5, [pc, #88]	; (20e04 <init_mem_slab_module+0x60>)
   20daa:	4c17      	ldr	r4, [pc, #92]	; (20e08 <init_mem_slab_module+0x64>)
   20dac:	4e17      	ldr	r6, [pc, #92]	; (20e0c <init_mem_slab_module+0x68>)
   20dae:	46a8      	mov	r8, r5
   20db0:	42ac      	cmp	r4, r5
   20db2:	d90c      	bls.n	20dce <init_mem_slab_module+0x2a>
   20db4:	4916      	ldr	r1, [pc, #88]	; (20e10 <init_mem_slab_module+0x6c>)
   20db6:	4817      	ldr	r0, [pc, #92]	; (20e14 <init_mem_slab_module+0x70>)
   20db8:	233c      	movs	r3, #60	; 0x3c
   20dba:	4632      	mov	r2, r6
   20dbc:	f006 fb9b 	bl	274f6 <printk>
   20dc0:	4815      	ldr	r0, [pc, #84]	; (20e18 <init_mem_slab_module+0x74>)
   20dc2:	f006 fb98 	bl	274f6 <printk>
   20dc6:	213c      	movs	r1, #60	; 0x3c
   20dc8:	4630      	mov	r0, r6
   20dca:	f006 fe39 	bl	27a40 <assert_post_action>
   20dce:	4544      	cmp	r4, r8
   20dd0:	d302      	bcc.n	20dd8 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   20dd2:	2000      	movs	r0, #0
	return rc;
}
   20dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20dd8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   20ddc:	ea41 0302 	orr.w	r3, r1, r2
   20de0:	f013 0303 	ands.w	r3, r3, #3
   20de4:	d10b      	bne.n	20dfe <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   20de6:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   20de8:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   20dea:	4283      	cmp	r3, r0
   20dec:	d101      	bne.n	20df2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20dee:	3420      	adds	r4, #32
   20df0:	e7de      	b.n	20db0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   20df2:	69a7      	ldr	r7, [r4, #24]
   20df4:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20df6:	3301      	adds	r3, #1
		slab->free_list = p;
   20df8:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   20dfa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   20dfc:	e7f5      	b.n	20dea <init_mem_slab_module+0x46>
		return -EINVAL;
   20dfe:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20e02:	e7e7      	b.n	20dd4 <init_mem_slab_module+0x30>
   20e04:	200007a0 	.word	0x200007a0
   20e08:	20000740 	.word	0x20000740
   20e0c:	0003191d 	.word	0x0003191d
   20e10:	00031942 	.word	0x00031942
   20e14:	0002dcd3 	.word	0x0002dcd3
   20e18:	0002e3f4 	.word	0x0002e3f4

00020e1c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20e20:	4604      	mov	r4, r0
   20e22:	460e      	mov	r6, r1
   20e24:	4690      	mov	r8, r2
   20e26:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20e28:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20e2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e30:	f3ef 8711 	mrs	r7, BASEPRI
   20e34:	f383 8811 	msr	BASEPRI, r3
   20e38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e3c:	4628      	mov	r0, r5
   20e3e:	f000 f9ff 	bl	21240 <z_spin_lock_valid>
   20e42:	b968      	cbnz	r0, 20e60 <k_mem_slab_alloc+0x44>
   20e44:	4a24      	ldr	r2, [pc, #144]	; (20ed8 <k_mem_slab_alloc+0xbc>)
   20e46:	4925      	ldr	r1, [pc, #148]	; (20edc <k_mem_slab_alloc+0xc0>)
   20e48:	4825      	ldr	r0, [pc, #148]	; (20ee0 <k_mem_slab_alloc+0xc4>)
   20e4a:	2381      	movs	r3, #129	; 0x81
   20e4c:	f006 fb53 	bl	274f6 <printk>
   20e50:	4824      	ldr	r0, [pc, #144]	; (20ee4 <k_mem_slab_alloc+0xc8>)
   20e52:	4629      	mov	r1, r5
   20e54:	f006 fb4f 	bl	274f6 <printk>
   20e58:	481f      	ldr	r0, [pc, #124]	; (20ed8 <k_mem_slab_alloc+0xbc>)
   20e5a:	2181      	movs	r1, #129	; 0x81
   20e5c:	f006 fdf0 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   20e60:	4628      	mov	r0, r5
   20e62:	f000 fa0b 	bl	2127c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20e66:	69a3      	ldr	r3, [r4, #24]
   20e68:	b1eb      	cbz	r3, 20ea6 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   20e6a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   20e6c:	681b      	ldr	r3, [r3, #0]
   20e6e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20e70:	69e3      	ldr	r3, [r4, #28]
   20e72:	3301      	adds	r3, #1
   20e74:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20e76:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e78:	4628      	mov	r0, r5
   20e7a:	f000 f9ef 	bl	2125c <z_spin_unlock_valid>
   20e7e:	b968      	cbnz	r0, 20e9c <k_mem_slab_alloc+0x80>
   20e80:	4a15      	ldr	r2, [pc, #84]	; (20ed8 <k_mem_slab_alloc+0xbc>)
   20e82:	4919      	ldr	r1, [pc, #100]	; (20ee8 <k_mem_slab_alloc+0xcc>)
   20e84:	4816      	ldr	r0, [pc, #88]	; (20ee0 <k_mem_slab_alloc+0xc4>)
   20e86:	23ac      	movs	r3, #172	; 0xac
   20e88:	f006 fb35 	bl	274f6 <printk>
   20e8c:	4817      	ldr	r0, [pc, #92]	; (20eec <k_mem_slab_alloc+0xd0>)
   20e8e:	4629      	mov	r1, r5
   20e90:	f006 fb31 	bl	274f6 <printk>
   20e94:	4810      	ldr	r0, [pc, #64]	; (20ed8 <k_mem_slab_alloc+0xbc>)
   20e96:	21ac      	movs	r1, #172	; 0xac
   20e98:	f006 fdd2 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   20e9c:	f387 8811 	msr	BASEPRI, r7
   20ea0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   20ea4:	e013      	b.n	20ece <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20ea6:	ea58 0209 	orrs.w	r2, r8, r9
   20eaa:	d103      	bne.n	20eb4 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   20eac:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   20eae:	f06f 040b 	mvn.w	r4, #11
   20eb2:	e7e1      	b.n	20e78 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   20eb4:	4622      	mov	r2, r4
   20eb6:	e9cd 8900 	strd	r8, r9, [sp]
   20eba:	4639      	mov	r1, r7
   20ebc:	4628      	mov	r0, r5
   20ebe:	f001 fe79 	bl	22bb4 <z_pend_curr>
		if (result == 0) {
   20ec2:	4604      	mov	r4, r0
   20ec4:	b918      	cbnz	r0, 20ece <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   20ec6:	4b0a      	ldr	r3, [pc, #40]	; (20ef0 <k_mem_slab_alloc+0xd4>)
   20ec8:	689b      	ldr	r3, [r3, #8]
   20eca:	695b      	ldr	r3, [r3, #20]
   20ecc:	6033      	str	r3, [r6, #0]
}
   20ece:	4620      	mov	r0, r4
   20ed0:	b003      	add	sp, #12
   20ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20ed6:	bf00      	nop
   20ed8:	0002dd93 	.word	0x0002dd93
   20edc:	0002dde5 	.word	0x0002dde5
   20ee0:	0002dcd3 	.word	0x0002dcd3
   20ee4:	0002ddfa 	.word	0x0002ddfa
   20ee8:	0002ddb9 	.word	0x0002ddb9
   20eec:	0002ddd0 	.word	0x0002ddd0
   20ef0:	200033dc 	.word	0x200033dc

00020ef4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ef8:	4604      	mov	r4, r0
   20efa:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20efc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20f00:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f04:	f3ef 8711 	mrs	r7, BASEPRI
   20f08:	f383 8811 	msr	BASEPRI, r3
   20f0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f10:	4628      	mov	r0, r5
   20f12:	f000 f995 	bl	21240 <z_spin_lock_valid>
   20f16:	b968      	cbnz	r0, 20f34 <k_mem_slab_free+0x40>
   20f18:	4a22      	ldr	r2, [pc, #136]	; (20fa4 <k_mem_slab_free+0xb0>)
   20f1a:	4923      	ldr	r1, [pc, #140]	; (20fa8 <k_mem_slab_free+0xb4>)
   20f1c:	4823      	ldr	r0, [pc, #140]	; (20fac <k_mem_slab_free+0xb8>)
   20f1e:	2381      	movs	r3, #129	; 0x81
   20f20:	f006 fae9 	bl	274f6 <printk>
   20f24:	4822      	ldr	r0, [pc, #136]	; (20fb0 <k_mem_slab_free+0xbc>)
   20f26:	4629      	mov	r1, r5
   20f28:	f006 fae5 	bl	274f6 <printk>
   20f2c:	481d      	ldr	r0, [pc, #116]	; (20fa4 <k_mem_slab_free+0xb0>)
   20f2e:	2181      	movs	r1, #129	; 0x81
   20f30:	f006 fd86 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   20f34:	4628      	mov	r0, r5
   20f36:	f000 f9a1 	bl	2127c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20f3a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   20f3e:	f1b8 0f00 	cmp.w	r8, #0
   20f42:	d10f      	bne.n	20f64 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20f44:	4620      	mov	r0, r4
   20f46:	f002 fa4f 	bl	233e8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20f4a:	b158      	cbz	r0, 20f64 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20f4c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20f4e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20f50:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20f54:	f002 f868 	bl	23028 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20f58:	4639      	mov	r1, r7
   20f5a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   20f60:	f001 bbea 	b.w	22738 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20f64:	6833      	ldr	r3, [r6, #0]
   20f66:	69a2      	ldr	r2, [r4, #24]
   20f68:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20f6a:	6833      	ldr	r3, [r6, #0]
   20f6c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   20f6e:	69e3      	ldr	r3, [r4, #28]
   20f70:	3b01      	subs	r3, #1
   20f72:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f74:	4628      	mov	r0, r5
   20f76:	f000 f971 	bl	2125c <z_spin_unlock_valid>
   20f7a:	b968      	cbnz	r0, 20f98 <k_mem_slab_free+0xa4>
   20f7c:	4a09      	ldr	r2, [pc, #36]	; (20fa4 <k_mem_slab_free+0xb0>)
   20f7e:	490d      	ldr	r1, [pc, #52]	; (20fb4 <k_mem_slab_free+0xc0>)
   20f80:	480a      	ldr	r0, [pc, #40]	; (20fac <k_mem_slab_free+0xb8>)
   20f82:	23ac      	movs	r3, #172	; 0xac
   20f84:	f006 fab7 	bl	274f6 <printk>
   20f88:	480b      	ldr	r0, [pc, #44]	; (20fb8 <k_mem_slab_free+0xc4>)
   20f8a:	4629      	mov	r1, r5
   20f8c:	f006 fab3 	bl	274f6 <printk>
   20f90:	4804      	ldr	r0, [pc, #16]	; (20fa4 <k_mem_slab_free+0xb0>)
   20f92:	21ac      	movs	r1, #172	; 0xac
   20f94:	f006 fd54 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   20f98:	f387 8811 	msr	BASEPRI, r7
   20f9c:	f3bf 8f6f 	isb	sy
}
   20fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20fa4:	0002dd93 	.word	0x0002dd93
   20fa8:	0002dde5 	.word	0x0002dde5
   20fac:	0002dcd3 	.word	0x0002dcd3
   20fb0:	0002ddfa 	.word	0x0002ddfa
   20fb4:	0002ddb9 	.word	0x0002ddb9
   20fb8:	0002ddd0 	.word	0x0002ddd0

00020fbc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20fc0:	b085      	sub	sp, #20
   20fc2:	4604      	mov	r4, r0
   20fc4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   20fc8:	f1b8 0f0f 	cmp.w	r8, #15
{
   20fcc:	460f      	mov	r7, r1
   20fce:	4615      	mov	r5, r2
   20fd0:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   20fd2:	d132      	bne.n	2103a <z_setup_new_thread+0x7e>
   20fd4:	4b25      	ldr	r3, [pc, #148]	; (2106c <z_setup_new_thread+0xb0>)
   20fd6:	4599      	cmp	r9, r3
   20fd8:	d133      	bne.n	21042 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   20fda:	f104 0358 	add.w	r3, r4, #88	; 0x58
   20fde:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   20fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20fe4:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20fe6:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   20fe8:	2304      	movs	r3, #4
   20fea:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20fec:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   20ff0:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   20ff4:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   20ffa:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20ffe:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21000:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21006:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   21008:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2100a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2100c:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   2100e:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21010:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   21012:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   21016:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   21018:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   2101a:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2101c:	4642      	mov	r2, r8
   2101e:	4639      	mov	r1, r7
   21020:	4620      	mov	r0, r4
   21022:	f7f3 f97d 	bl	14320 <arch_new_thread>
	if (!_current) {
   21026:	4b12      	ldr	r3, [pc, #72]	; (21070 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   21028:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   2102a:	689b      	ldr	r3, [r3, #8]
   2102c:	b103      	cbz	r3, 21030 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   2102e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   21030:	6763      	str	r3, [r4, #116]	; 0x74
}
   21032:	4640      	mov	r0, r8
   21034:	b005      	add	sp, #20
   21036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2103a:	f108 0310 	add.w	r3, r8, #16
   2103e:	2b1e      	cmp	r3, #30
   21040:	d9cb      	bls.n	20fda <z_setup_new_thread+0x1e>
   21042:	4a0c      	ldr	r2, [pc, #48]	; (21074 <z_setup_new_thread+0xb8>)
   21044:	490c      	ldr	r1, [pc, #48]	; (21078 <z_setup_new_thread+0xbc>)
   21046:	480d      	ldr	r0, [pc, #52]	; (2107c <z_setup_new_thread+0xc0>)
   21048:	f240 2305 	movw	r3, #517	; 0x205
   2104c:	f006 fa53 	bl	274f6 <printk>
   21050:	4641      	mov	r1, r8
   21052:	480b      	ldr	r0, [pc, #44]	; (21080 <z_setup_new_thread+0xc4>)
   21054:	f06f 030f 	mvn.w	r3, #15
   21058:	220e      	movs	r2, #14
   2105a:	f006 fa4c 	bl	274f6 <printk>
   2105e:	4805      	ldr	r0, [pc, #20]	; (21074 <z_setup_new_thread+0xb8>)
   21060:	f240 2105 	movw	r1, #517	; 0x205
   21064:	f006 fcec 	bl	27a40 <assert_post_action>
   21068:	e7b7      	b.n	20fda <z_setup_new_thread+0x1e>
   2106a:	bf00      	nop
   2106c:	0002128d 	.word	0x0002128d
   21070:	200033dc 	.word	0x200033dc
   21074:	0003195f 	.word	0x0003195f
   21078:	00031982 	.word	0x00031982
   2107c:	0002dcd3 	.word	0x0002dcd3
   21080:	00031a02 	.word	0x00031a02

00021084 <z_impl_k_thread_create>:
{
   21084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21088:	b087      	sub	sp, #28
   2108a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   2108e:	4604      	mov	r4, r0
   21090:	460d      	mov	r5, r1
   21092:	4690      	mov	r8, r2
   21094:	4699      	mov	r9, r3
   21096:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2109a:	b173      	cbz	r3, 210ba <z_impl_k_thread_create+0x36>
   2109c:	491b      	ldr	r1, [pc, #108]	; (2110c <z_impl_k_thread_create+0x88>)
   2109e:	4a1c      	ldr	r2, [pc, #112]	; (21110 <z_impl_k_thread_create+0x8c>)
   210a0:	481c      	ldr	r0, [pc, #112]	; (21114 <z_impl_k_thread_create+0x90>)
   210a2:	f240 236e 	movw	r3, #622	; 0x26e
   210a6:	f006 fa26 	bl	274f6 <printk>
   210aa:	481b      	ldr	r0, [pc, #108]	; (21118 <z_impl_k_thread_create+0x94>)
   210ac:	f006 fa23 	bl	274f6 <printk>
   210b0:	4817      	ldr	r0, [pc, #92]	; (21110 <z_impl_k_thread_create+0x8c>)
   210b2:	f240 216e 	movw	r1, #622	; 0x26e
   210b6:	f006 fcc3 	bl	27a40 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   210ba:	2300      	movs	r3, #0
   210bc:	9305      	str	r3, [sp, #20]
   210be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   210c0:	9304      	str	r3, [sp, #16]
   210c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   210c4:	9303      	str	r3, [sp, #12]
   210c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   210c8:	9302      	str	r3, [sp, #8]
   210ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   210cc:	9301      	str	r3, [sp, #4]
   210ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   210d0:	9300      	str	r3, [sp, #0]
   210d2:	4642      	mov	r2, r8
   210d4:	464b      	mov	r3, r9
   210d6:	4629      	mov	r1, r5
   210d8:	4620      	mov	r0, r4
   210da:	f7ff ff6f 	bl	20fbc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   210de:	1c7b      	adds	r3, r7, #1
   210e0:	bf08      	it	eq
   210e2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   210e6:	d005      	beq.n	210f4 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   210e8:	ea56 0307 	orrs.w	r3, r6, r7
   210ec:	d106      	bne.n	210fc <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   210ee:	4620      	mov	r0, r4
   210f0:	f001 ffe2 	bl	230b8 <z_sched_start>
}
   210f4:	4620      	mov	r0, r4
   210f6:	b007      	add	sp, #28
   210f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   210fc:	4907      	ldr	r1, [pc, #28]	; (2111c <z_impl_k_thread_create+0x98>)
   210fe:	4632      	mov	r2, r6
   21100:	463b      	mov	r3, r7
   21102:	f104 0018 	add.w	r0, r4, #24
   21106:	f002 fcf5 	bl	23af4 <z_add_timeout>
   2110a:	e7f3      	b.n	210f4 <z_impl_k_thread_create+0x70>
   2110c:	00031a33 	.word	0x00031a33
   21110:	0003195f 	.word	0x0003195f
   21114:	0002dcd3 	.word	0x0002dcd3
   21118:	00031a45 	.word	0x00031a45
   2111c:	00023161 	.word	0x00023161

00021120 <z_init_static_threads>:
{
   21120:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   21124:	4f3f      	ldr	r7, [pc, #252]	; (21224 <z_init_static_threads+0x104>)
   21126:	4d40      	ldr	r5, [pc, #256]	; (21228 <z_init_static_threads+0x108>)
   21128:	f8df 810c 	ldr.w	r8, [pc, #268]	; 21238 <z_init_static_threads+0x118>
{
   2112c:	b086      	sub	sp, #24
   2112e:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   21130:	42bd      	cmp	r5, r7
   21132:	d90e      	bls.n	21152 <z_init_static_threads+0x32>
   21134:	493d      	ldr	r1, [pc, #244]	; (2122c <z_init_static_threads+0x10c>)
   21136:	483e      	ldr	r0, [pc, #248]	; (21230 <z_init_static_threads+0x110>)
   21138:	f240 23d5 	movw	r3, #725	; 0x2d5
   2113c:	4642      	mov	r2, r8
   2113e:	f006 f9da 	bl	274f6 <printk>
   21142:	483c      	ldr	r0, [pc, #240]	; (21234 <z_init_static_threads+0x114>)
   21144:	f006 f9d7 	bl	274f6 <printk>
   21148:	f240 21d5 	movw	r1, #725	; 0x2d5
   2114c:	4640      	mov	r0, r8
   2114e:	f006 fc77 	bl	27a40 <assert_post_action>
   21152:	42b5      	cmp	r5, r6
   21154:	f105 0430 	add.w	r4, r5, #48	; 0x30
   21158:	d31f      	bcc.n	2119a <z_init_static_threads+0x7a>
	k_sched_lock();
   2115a:	f001 fb31 	bl	227c0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2115e:	4c32      	ldr	r4, [pc, #200]	; (21228 <z_init_static_threads+0x108>)
   21160:	4d35      	ldr	r5, [pc, #212]	; (21238 <z_init_static_threads+0x118>)
   21162:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2122c <z_init_static_threads+0x10c>
   21166:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 21230 <z_init_static_threads+0x110>
   2116a:	42b4      	cmp	r4, r6
   2116c:	d90e      	bls.n	2118c <z_init_static_threads+0x6c>
   2116e:	4641      	mov	r1, r8
   21170:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   21174:	462a      	mov	r2, r5
   21176:	4648      	mov	r0, r9
   21178:	f006 f9bd 	bl	274f6 <printk>
   2117c:	482d      	ldr	r0, [pc, #180]	; (21234 <z_init_static_threads+0x114>)
   2117e:	f006 f9ba 	bl	274f6 <printk>
   21182:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   21186:	4628      	mov	r0, r5
   21188:	f006 fc5a 	bl	27a40 <assert_post_action>
   2118c:	42b4      	cmp	r4, r6
   2118e:	d321      	bcc.n	211d4 <z_init_static_threads+0xb4>
}
   21190:	b006      	add	sp, #24
   21192:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   21196:	f001 bda7 	b.w	22ce8 <k_sched_unlock>
		z_setup_new_thread(
   2119a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2119e:	9305      	str	r3, [sp, #20]
   211a0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   211a4:	9304      	str	r3, [sp, #16]
   211a6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   211aa:	9303      	str	r3, [sp, #12]
   211ac:	f854 3c18 	ldr.w	r3, [r4, #-24]
   211b0:	9302      	str	r3, [sp, #8]
   211b2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   211b6:	9301      	str	r3, [sp, #4]
   211b8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   211bc:	9300      	str	r3, [sp, #0]
   211be:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   211c2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   211c6:	f7ff fef9 	bl	20fbc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   211ca:	f854 3c30 	ldr.w	r3, [r4, #-48]
   211ce:	655d      	str	r5, [r3, #84]	; 0x54
   211d0:	4625      	mov	r5, r4
   211d2:	e7ad      	b.n	21130 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   211d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   211d6:	1c4b      	adds	r3, r1, #1
   211d8:	d014      	beq.n	21204 <z_init_static_threads+0xe4>
		} else {
			return (t * to_hz + off) / from_hz;
   211da:	f240 32e7 	movw	r2, #999	; 0x3e7
   211de:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   211e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   211e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   211e8:	4693      	mov	fp, r2
   211ea:	469c      	mov	ip, r3
   211ec:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   211f0:	459c      	cmp	ip, r3
   211f2:	bf08      	it	eq
   211f4:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   211f6:	6827      	ldr	r7, [r4, #0]
   211f8:	4658      	mov	r0, fp
   211fa:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   211fc:	d104      	bne.n	21208 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   211fe:	4638      	mov	r0, r7
   21200:	f001 ff5a 	bl	230b8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   21204:	3430      	adds	r4, #48	; 0x30
   21206:	e7b0      	b.n	2116a <z_init_static_threads+0x4a>
   21208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2120c:	2300      	movs	r3, #0
   2120e:	f7de ff77 	bl	100 <__aeabi_uldivmod>
   21212:	4602      	mov	r2, r0
   21214:	460b      	mov	r3, r1
   21216:	f107 0018 	add.w	r0, r7, #24
   2121a:	4908      	ldr	r1, [pc, #32]	; (2123c <z_init_static_threads+0x11c>)
   2121c:	f002 fc6a 	bl	23af4 <z_add_timeout>
   21220:	e7f0      	b.n	21204 <z_init_static_threads+0xe4>
   21222:	bf00      	nop
   21224:	20000740 	.word	0x20000740
   21228:	20000710 	.word	0x20000710
   2122c:	00031a6a 	.word	0x00031a6a
   21230:	0002dcd3 	.word	0x0002dcd3
   21234:	0002e3f4 	.word	0x0002e3f4
   21238:	0003195f 	.word	0x0003195f
   2123c:	00023161 	.word	0x00023161

00021240 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   21240:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   21242:	b138      	cbz	r0, 21254 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   21244:	4b04      	ldr	r3, [pc, #16]	; (21258 <z_spin_lock_valid+0x18>)
   21246:	7d1b      	ldrb	r3, [r3, #20]
   21248:	f000 0003 	and.w	r0, r0, #3
   2124c:	1ac0      	subs	r0, r0, r3
   2124e:	bf18      	it	ne
   21250:	2001      	movne	r0, #1
   21252:	4770      	bx	lr
			return false;
		}
	}
	return true;
   21254:	2001      	movs	r0, #1
}
   21256:	4770      	bx	lr
   21258:	200033dc 	.word	0x200033dc

0002125c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2125c:	4906      	ldr	r1, [pc, #24]	; (21278 <z_spin_unlock_valid+0x1c>)
{
   2125e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21260:	688a      	ldr	r2, [r1, #8]
   21262:	7d08      	ldrb	r0, [r1, #20]
   21264:	6819      	ldr	r1, [r3, #0]
   21266:	4302      	orrs	r2, r0
   21268:	4291      	cmp	r1, r2
   2126a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   2126e:	bf04      	itt	eq
   21270:	6018      	streq	r0, [r3, #0]
	return true;
   21272:	2001      	moveq	r0, #1
}
   21274:	4770      	bx	lr
   21276:	bf00      	nop
   21278:	200033dc 	.word	0x200033dc

0002127c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2127c:	4a02      	ldr	r2, [pc, #8]	; (21288 <z_spin_lock_set_owner+0xc>)
   2127e:	7d11      	ldrb	r1, [r2, #20]
   21280:	6893      	ldr	r3, [r2, #8]
   21282:	430b      	orrs	r3, r1
   21284:	6003      	str	r3, [r0, #0]
}
   21286:	4770      	bx	lr
   21288:	200033dc 	.word	0x200033dc

0002128c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2128c:	4c11      	ldr	r4, [pc, #68]	; (212d4 <idle+0x48>)
   2128e:	68a2      	ldr	r2, [r4, #8]
   21290:	f992 200e 	ldrsb.w	r2, [r2, #14]
   21294:	2a00      	cmp	r2, #0
{
   21296:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   21298:	da09      	bge.n	212ae <idle+0x22>
   2129a:	490f      	ldr	r1, [pc, #60]	; (212d8 <idle+0x4c>)
   2129c:	480f      	ldr	r0, [pc, #60]	; (212dc <idle+0x50>)
   2129e:	4a10      	ldr	r2, [pc, #64]	; (212e0 <idle+0x54>)
   212a0:	2346      	movs	r3, #70	; 0x46
   212a2:	f006 f928 	bl	274f6 <printk>
   212a6:	480e      	ldr	r0, [pc, #56]	; (212e0 <idle+0x54>)
   212a8:	2146      	movs	r1, #70	; 0x46
   212aa:	f006 fbc9 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   212ae:	f04f 0240 	mov.w	r2, #64	; 0x40
   212b2:	f3ef 8311 	mrs	r3, BASEPRI
   212b6:	f382 8811 	msr	BASEPRI, r2
   212ba:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   212be:	f002 fd3b 	bl	23d38 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   212c2:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   212c4:	f7f2 f86e 	bl	133a4 <pm_system_suspend>
   212c8:	2800      	cmp	r0, #0
   212ca:	d1f0      	bne.n	212ae <idle+0x22>
	arch_cpu_idle();
   212cc:	f7f3 f87a 	bl	143c4 <arch_cpu_idle>
}
   212d0:	e7ed      	b.n	212ae <idle+0x22>
   212d2:	bf00      	nop
   212d4:	200033dc 	.word	0x200033dc
   212d8:	00031ab8 	.word	0x00031ab8
   212dc:	0002dcd3 	.word	0x0002dcd3
   212e0:	00031a97 	.word	0x00031a97

000212e4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   212e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   212e8:	4604      	mov	r4, r0
   212ea:	4616      	mov	r6, r2
   212ec:	461f      	mov	r7, r3
   212ee:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   212f2:	b163      	cbz	r3, 2130e <z_impl_k_mutex_lock+0x2a>
   212f4:	4970      	ldr	r1, [pc, #448]	; (214b8 <z_impl_k_mutex_lock+0x1d4>)
   212f6:	4a71      	ldr	r2, [pc, #452]	; (214bc <z_impl_k_mutex_lock+0x1d8>)
   212f8:	4871      	ldr	r0, [pc, #452]	; (214c0 <z_impl_k_mutex_lock+0x1dc>)
   212fa:	2365      	movs	r3, #101	; 0x65
   212fc:	f006 f8fb 	bl	274f6 <printk>
   21300:	4870      	ldr	r0, [pc, #448]	; (214c4 <z_impl_k_mutex_lock+0x1e0>)
   21302:	f006 f8f8 	bl	274f6 <printk>
   21306:	486d      	ldr	r0, [pc, #436]	; (214bc <z_impl_k_mutex_lock+0x1d8>)
   21308:	2165      	movs	r1, #101	; 0x65
   2130a:	f006 fb99 	bl	27a40 <assert_post_action>
   2130e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21312:	f3ef 8811 	mrs	r8, BASEPRI
   21316:	f383 8811 	msr	BASEPRI, r3
   2131a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2131e:	486a      	ldr	r0, [pc, #424]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   21320:	f7ff ff8e 	bl	21240 <z_spin_lock_valid>
   21324:	b968      	cbnz	r0, 21342 <z_impl_k_mutex_lock+0x5e>
   21326:	4a69      	ldr	r2, [pc, #420]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   21328:	4969      	ldr	r1, [pc, #420]	; (214d0 <z_impl_k_mutex_lock+0x1ec>)
   2132a:	4865      	ldr	r0, [pc, #404]	; (214c0 <z_impl_k_mutex_lock+0x1dc>)
   2132c:	2381      	movs	r3, #129	; 0x81
   2132e:	f006 f8e2 	bl	274f6 <printk>
   21332:	4965      	ldr	r1, [pc, #404]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   21334:	4867      	ldr	r0, [pc, #412]	; (214d4 <z_impl_k_mutex_lock+0x1f0>)
   21336:	f006 f8de 	bl	274f6 <printk>
   2133a:	4864      	ldr	r0, [pc, #400]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   2133c:	2181      	movs	r1, #129	; 0x81
   2133e:	f006 fb7f 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   21342:	4861      	ldr	r0, [pc, #388]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   21344:	f7ff ff9a 	bl	2127c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21348:	68e3      	ldr	r3, [r4, #12]
   2134a:	4a63      	ldr	r2, [pc, #396]	; (214d8 <z_impl_k_mutex_lock+0x1f4>)
   2134c:	b1fb      	cbz	r3, 2138e <z_impl_k_mutex_lock+0xaa>
   2134e:	68a0      	ldr	r0, [r4, #8]
   21350:	6891      	ldr	r1, [r2, #8]
   21352:	4288      	cmp	r0, r1
   21354:	d03d      	beq.n	213d2 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   21356:	ea56 0307 	orrs.w	r3, r6, r7
   2135a:	d13c      	bne.n	213d6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2135c:	485a      	ldr	r0, [pc, #360]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   2135e:	f7ff ff7d 	bl	2125c <z_spin_unlock_valid>
   21362:	b968      	cbnz	r0, 21380 <z_impl_k_mutex_lock+0x9c>
   21364:	4a59      	ldr	r2, [pc, #356]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   21366:	495d      	ldr	r1, [pc, #372]	; (214dc <z_impl_k_mutex_lock+0x1f8>)
   21368:	4855      	ldr	r0, [pc, #340]	; (214c0 <z_impl_k_mutex_lock+0x1dc>)
   2136a:	23ac      	movs	r3, #172	; 0xac
   2136c:	f006 f8c3 	bl	274f6 <printk>
   21370:	4955      	ldr	r1, [pc, #340]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   21372:	485b      	ldr	r0, [pc, #364]	; (214e0 <z_impl_k_mutex_lock+0x1fc>)
   21374:	f006 f8bf 	bl	274f6 <printk>
   21378:	4854      	ldr	r0, [pc, #336]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   2137a:	21ac      	movs	r1, #172	; 0xac
   2137c:	f006 fb60 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   21380:	f388 8811 	msr	BASEPRI, r8
   21384:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21388:	f06f 000f 	mvn.w	r0, #15
   2138c:	e01e      	b.n	213cc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   2138e:	6891      	ldr	r1, [r2, #8]
   21390:	f991 100e 	ldrsb.w	r1, [r1, #14]
   21394:	484c      	ldr	r0, [pc, #304]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   21396:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   21398:	3301      	adds	r3, #1
   2139a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2139c:	6893      	ldr	r3, [r2, #8]
   2139e:	60a3      	str	r3, [r4, #8]
   213a0:	f7ff ff5c 	bl	2125c <z_spin_unlock_valid>
   213a4:	b968      	cbnz	r0, 213c2 <z_impl_k_mutex_lock+0xde>
   213a6:	4a49      	ldr	r2, [pc, #292]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   213a8:	494c      	ldr	r1, [pc, #304]	; (214dc <z_impl_k_mutex_lock+0x1f8>)
   213aa:	4845      	ldr	r0, [pc, #276]	; (214c0 <z_impl_k_mutex_lock+0x1dc>)
   213ac:	23ac      	movs	r3, #172	; 0xac
   213ae:	f006 f8a2 	bl	274f6 <printk>
   213b2:	4945      	ldr	r1, [pc, #276]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   213b4:	484a      	ldr	r0, [pc, #296]	; (214e0 <z_impl_k_mutex_lock+0x1fc>)
   213b6:	f006 f89e 	bl	274f6 <printk>
   213ba:	4844      	ldr	r0, [pc, #272]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   213bc:	21ac      	movs	r1, #172	; 0xac
   213be:	f006 fb3f 	bl	27a40 <assert_post_action>
   213c2:	f388 8811 	msr	BASEPRI, r8
   213c6:	f3bf 8f6f 	isb	sy
		return 0;
   213ca:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   213cc:	b002      	add	sp, #8
   213ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   213d2:	6921      	ldr	r1, [r4, #16]
   213d4:	e7de      	b.n	21394 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   213d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
   213da:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   213de:	4299      	cmp	r1, r3
   213e0:	bfa8      	it	ge
   213e2:	4619      	movge	r1, r3
   213e4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   213e8:	4291      	cmp	r1, r2
   213ea:	bfb8      	it	lt
   213ec:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   213ee:	428b      	cmp	r3, r1
   213f0:	dd44      	ble.n	2147c <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   213f2:	f001 ff0f 	bl	23214 <z_set_prio>
   213f6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   213f8:	e9cd 6700 	strd	r6, r7, [sp]
   213fc:	4832      	ldr	r0, [pc, #200]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   213fe:	4622      	mov	r2, r4
   21400:	4641      	mov	r1, r8
   21402:	f001 fbd7 	bl	22bb4 <z_pend_curr>
	if (got_mutex == 0) {
   21406:	2800      	cmp	r0, #0
   21408:	d0e0      	beq.n	213cc <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   2140a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2140e:	f3ef 8611 	mrs	r6, BASEPRI
   21412:	f383 8811 	msr	BASEPRI, r3
   21416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2141a:	482b      	ldr	r0, [pc, #172]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   2141c:	f7ff ff10 	bl	21240 <z_spin_lock_valid>
   21420:	b968      	cbnz	r0, 2143e <z_impl_k_mutex_lock+0x15a>
   21422:	4a2a      	ldr	r2, [pc, #168]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   21424:	492a      	ldr	r1, [pc, #168]	; (214d0 <z_impl_k_mutex_lock+0x1ec>)
   21426:	4826      	ldr	r0, [pc, #152]	; (214c0 <z_impl_k_mutex_lock+0x1dc>)
   21428:	2381      	movs	r3, #129	; 0x81
   2142a:	f006 f864 	bl	274f6 <printk>
   2142e:	4926      	ldr	r1, [pc, #152]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   21430:	4828      	ldr	r0, [pc, #160]	; (214d4 <z_impl_k_mutex_lock+0x1f0>)
   21432:	f006 f860 	bl	274f6 <printk>
   21436:	4825      	ldr	r0, [pc, #148]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   21438:	2181      	movs	r1, #129	; 0x81
   2143a:	f006 fb01 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2143e:	4822      	ldr	r0, [pc, #136]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   21440:	f7ff ff1c 	bl	2127c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   21444:	6823      	ldr	r3, [r4, #0]
   21446:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21448:	429c      	cmp	r4, r3
   2144a:	d00a      	beq.n	21462 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2144c:	b14b      	cbz	r3, 21462 <z_impl_k_mutex_lock+0x17e>
   2144e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   21452:	4299      	cmp	r1, r3
   21454:	bfa8      	it	ge
   21456:	4619      	movge	r1, r3
   21458:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2145c:	4299      	cmp	r1, r3
   2145e:	bfb8      	it	lt
   21460:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   21462:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   21464:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21468:	4299      	cmp	r1, r3
   2146a:	d109      	bne.n	21480 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   2146c:	b16d      	cbz	r5, 2148a <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   2146e:	4816      	ldr	r0, [pc, #88]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   21470:	4631      	mov	r1, r6
   21472:	f001 f961 	bl	22738 <z_reschedule>
	return -EAGAIN;
   21476:	f06f 000a 	mvn.w	r0, #10
   2147a:	e7a7      	b.n	213cc <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   2147c:	2500      	movs	r5, #0
   2147e:	e7bb      	b.n	213f8 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   21480:	f001 fec8 	bl	23214 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   21484:	2800      	cmp	r0, #0
   21486:	d1f2      	bne.n	2146e <z_impl_k_mutex_lock+0x18a>
   21488:	e7f0      	b.n	2146c <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2148a:	480f      	ldr	r0, [pc, #60]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   2148c:	f7ff fee6 	bl	2125c <z_spin_unlock_valid>
   21490:	b968      	cbnz	r0, 214ae <z_impl_k_mutex_lock+0x1ca>
   21492:	4a0e      	ldr	r2, [pc, #56]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   21494:	4911      	ldr	r1, [pc, #68]	; (214dc <z_impl_k_mutex_lock+0x1f8>)
   21496:	480a      	ldr	r0, [pc, #40]	; (214c0 <z_impl_k_mutex_lock+0x1dc>)
   21498:	23ac      	movs	r3, #172	; 0xac
   2149a:	f006 f82c 	bl	274f6 <printk>
   2149e:	490a      	ldr	r1, [pc, #40]	; (214c8 <z_impl_k_mutex_lock+0x1e4>)
   214a0:	480f      	ldr	r0, [pc, #60]	; (214e0 <z_impl_k_mutex_lock+0x1fc>)
   214a2:	f006 f828 	bl	274f6 <printk>
   214a6:	4809      	ldr	r0, [pc, #36]	; (214cc <z_impl_k_mutex_lock+0x1e8>)
   214a8:	21ac      	movs	r1, #172	; 0xac
   214aa:	f006 fac9 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   214ae:	f386 8811 	msr	BASEPRI, r6
   214b2:	f3bf 8f6f 	isb	sy
   214b6:	e7de      	b.n	21476 <z_impl_k_mutex_lock+0x192>
   214b8:	00031a33 	.word	0x00031a33
   214bc:	00031ae0 	.word	0x00031ae0
   214c0:	0002dcd3 	.word	0x0002dcd3
   214c4:	00031b02 	.word	0x00031b02
   214c8:	2000340c 	.word	0x2000340c
   214cc:	0002dd93 	.word	0x0002dd93
   214d0:	0002dde5 	.word	0x0002dde5
   214d4:	0002ddfa 	.word	0x0002ddfa
   214d8:	200033dc 	.word	0x200033dc
   214dc:	0002ddb9 	.word	0x0002ddb9
   214e0:	0002ddd0 	.word	0x0002ddd0

000214e4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   214e4:	b538      	push	{r3, r4, r5, lr}
   214e6:	4604      	mov	r4, r0
   214e8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   214ec:	b163      	cbz	r3, 21508 <z_impl_k_mutex_unlock+0x24>
   214ee:	4952      	ldr	r1, [pc, #328]	; (21638 <z_impl_k_mutex_unlock+0x154>)
   214f0:	4a52      	ldr	r2, [pc, #328]	; (2163c <z_impl_k_mutex_unlock+0x158>)
   214f2:	4853      	ldr	r0, [pc, #332]	; (21640 <z_impl_k_mutex_unlock+0x15c>)
   214f4:	23c7      	movs	r3, #199	; 0xc7
   214f6:	f005 fffe 	bl	274f6 <printk>
   214fa:	4852      	ldr	r0, [pc, #328]	; (21644 <z_impl_k_mutex_unlock+0x160>)
   214fc:	f005 fffb 	bl	274f6 <printk>
   21500:	484e      	ldr	r0, [pc, #312]	; (2163c <z_impl_k_mutex_unlock+0x158>)
   21502:	21c7      	movs	r1, #199	; 0xc7
   21504:	f006 fa9c 	bl	27a40 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   21508:	68a3      	ldr	r3, [r4, #8]
   2150a:	2b00      	cmp	r3, #0
   2150c:	f000 808d 	beq.w	2162a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   21510:	4d4d      	ldr	r5, [pc, #308]	; (21648 <z_impl_k_mutex_unlock+0x164>)
   21512:	68aa      	ldr	r2, [r5, #8]
   21514:	4293      	cmp	r3, r2
   21516:	f040 808b 	bne.w	21630 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2151a:	68e3      	ldr	r3, [r4, #12]
   2151c:	b94b      	cbnz	r3, 21532 <z_impl_k_mutex_unlock+0x4e>
   2151e:	494b      	ldr	r1, [pc, #300]	; (2164c <z_impl_k_mutex_unlock+0x168>)
   21520:	4847      	ldr	r0, [pc, #284]	; (21640 <z_impl_k_mutex_unlock+0x15c>)
   21522:	4a46      	ldr	r2, [pc, #280]	; (2163c <z_impl_k_mutex_unlock+0x158>)
   21524:	23df      	movs	r3, #223	; 0xdf
   21526:	f005 ffe6 	bl	274f6 <printk>
   2152a:	4844      	ldr	r0, [pc, #272]	; (2163c <z_impl_k_mutex_unlock+0x158>)
   2152c:	21df      	movs	r1, #223	; 0xdf
   2152e:	f006 fa87 	bl	27a40 <assert_post_action>
   21532:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   21536:	b163      	cbz	r3, 21552 <z_impl_k_mutex_unlock+0x6e>
   21538:	493f      	ldr	r1, [pc, #252]	; (21638 <z_impl_k_mutex_unlock+0x154>)
   2153a:	4a45      	ldr	r2, [pc, #276]	; (21650 <z_impl_k_mutex_unlock+0x16c>)
   2153c:	4840      	ldr	r0, [pc, #256]	; (21640 <z_impl_k_mutex_unlock+0x15c>)
   2153e:	23fd      	movs	r3, #253	; 0xfd
   21540:	f005 ffd9 	bl	274f6 <printk>
   21544:	4843      	ldr	r0, [pc, #268]	; (21654 <z_impl_k_mutex_unlock+0x170>)
   21546:	f005 ffd6 	bl	274f6 <printk>
   2154a:	4841      	ldr	r0, [pc, #260]	; (21650 <z_impl_k_mutex_unlock+0x16c>)
   2154c:	21fd      	movs	r1, #253	; 0xfd
   2154e:	f006 fa77 	bl	27a40 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   21552:	68ab      	ldr	r3, [r5, #8]
   21554:	7bdb      	ldrb	r3, [r3, #15]
   21556:	2b01      	cmp	r3, #1
   21558:	d10c      	bne.n	21574 <z_impl_k_mutex_unlock+0x90>
   2155a:	493f      	ldr	r1, [pc, #252]	; (21658 <z_impl_k_mutex_unlock+0x174>)
   2155c:	4a3c      	ldr	r2, [pc, #240]	; (21650 <z_impl_k_mutex_unlock+0x16c>)
   2155e:	4838      	ldr	r0, [pc, #224]	; (21640 <z_impl_k_mutex_unlock+0x15c>)
   21560:	23fe      	movs	r3, #254	; 0xfe
   21562:	f005 ffc8 	bl	274f6 <printk>
   21566:	483b      	ldr	r0, [pc, #236]	; (21654 <z_impl_k_mutex_unlock+0x170>)
   21568:	f005 ffc5 	bl	274f6 <printk>
   2156c:	4838      	ldr	r0, [pc, #224]	; (21650 <z_impl_k_mutex_unlock+0x16c>)
   2156e:	21fe      	movs	r1, #254	; 0xfe
   21570:	f006 fa66 	bl	27a40 <assert_post_action>

	--_current->base.sched_locked;
   21574:	68aa      	ldr	r2, [r5, #8]
   21576:	7bd3      	ldrb	r3, [r2, #15]
   21578:	3b01      	subs	r3, #1
   2157a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2157c:	68e3      	ldr	r3, [r4, #12]
   2157e:	2b01      	cmp	r3, #1
   21580:	d905      	bls.n	2158e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   21582:	3b01      	subs	r3, #1
   21584:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   21586:	f001 fbaf 	bl	22ce8 <k_sched_unlock>

	return 0;
   2158a:	2000      	movs	r0, #0
}
   2158c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2158e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21592:	f3ef 8511 	mrs	r5, BASEPRI
   21596:	f383 8811 	msr	BASEPRI, r3
   2159a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2159e:	482f      	ldr	r0, [pc, #188]	; (2165c <z_impl_k_mutex_unlock+0x178>)
   215a0:	f7ff fe4e 	bl	21240 <z_spin_lock_valid>
   215a4:	b968      	cbnz	r0, 215c2 <z_impl_k_mutex_unlock+0xde>
   215a6:	4a2e      	ldr	r2, [pc, #184]	; (21660 <z_impl_k_mutex_unlock+0x17c>)
   215a8:	492e      	ldr	r1, [pc, #184]	; (21664 <z_impl_k_mutex_unlock+0x180>)
   215aa:	4825      	ldr	r0, [pc, #148]	; (21640 <z_impl_k_mutex_unlock+0x15c>)
   215ac:	2381      	movs	r3, #129	; 0x81
   215ae:	f005 ffa2 	bl	274f6 <printk>
   215b2:	492a      	ldr	r1, [pc, #168]	; (2165c <z_impl_k_mutex_unlock+0x178>)
   215b4:	482c      	ldr	r0, [pc, #176]	; (21668 <z_impl_k_mutex_unlock+0x184>)
   215b6:	f005 ff9e 	bl	274f6 <printk>
   215ba:	4829      	ldr	r0, [pc, #164]	; (21660 <z_impl_k_mutex_unlock+0x17c>)
   215bc:	2181      	movs	r1, #129	; 0x81
   215be:	f006 fa3f 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   215c2:	4826      	ldr	r0, [pc, #152]	; (2165c <z_impl_k_mutex_unlock+0x178>)
   215c4:	f7ff fe5a 	bl	2127c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   215c8:	68a0      	ldr	r0, [r4, #8]
   215ca:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   215cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   215d0:	4299      	cmp	r1, r3
   215d2:	d001      	beq.n	215d8 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   215d4:	f001 fe1e 	bl	23214 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   215d8:	4620      	mov	r0, r4
   215da:	f001 ff05 	bl	233e8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   215de:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   215e0:	b158      	cbz	r0, 215fa <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   215e2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   215e6:	6122      	str	r2, [r4, #16]
   215e8:	2200      	movs	r2, #0
   215ea:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   215ec:	f001 fd1c 	bl	23028 <z_ready_thread>
		z_reschedule(&lock, key);
   215f0:	481a      	ldr	r0, [pc, #104]	; (2165c <z_impl_k_mutex_unlock+0x178>)
   215f2:	4629      	mov	r1, r5
   215f4:	f001 f8a0 	bl	22738 <z_reschedule>
   215f8:	e7c5      	b.n	21586 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   215fa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215fc:	4817      	ldr	r0, [pc, #92]	; (2165c <z_impl_k_mutex_unlock+0x178>)
   215fe:	f7ff fe2d 	bl	2125c <z_spin_unlock_valid>
   21602:	b968      	cbnz	r0, 21620 <z_impl_k_mutex_unlock+0x13c>
   21604:	4a16      	ldr	r2, [pc, #88]	; (21660 <z_impl_k_mutex_unlock+0x17c>)
   21606:	4919      	ldr	r1, [pc, #100]	; (2166c <z_impl_k_mutex_unlock+0x188>)
   21608:	480d      	ldr	r0, [pc, #52]	; (21640 <z_impl_k_mutex_unlock+0x15c>)
   2160a:	23ac      	movs	r3, #172	; 0xac
   2160c:	f005 ff73 	bl	274f6 <printk>
   21610:	4912      	ldr	r1, [pc, #72]	; (2165c <z_impl_k_mutex_unlock+0x178>)
   21612:	4817      	ldr	r0, [pc, #92]	; (21670 <z_impl_k_mutex_unlock+0x18c>)
   21614:	f005 ff6f 	bl	274f6 <printk>
   21618:	4811      	ldr	r0, [pc, #68]	; (21660 <z_impl_k_mutex_unlock+0x17c>)
   2161a:	21ac      	movs	r1, #172	; 0xac
   2161c:	f006 fa10 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   21620:	f385 8811 	msr	BASEPRI, r5
   21624:	f3bf 8f6f 	isb	sy
   21628:	e7ad      	b.n	21586 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   2162a:	f06f 0015 	mvn.w	r0, #21
   2162e:	e7ad      	b.n	2158c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   21630:	f04f 30ff 	mov.w	r0, #4294967295
   21634:	e7aa      	b.n	2158c <z_impl_k_mutex_unlock+0xa8>
   21636:	bf00      	nop
   21638:	00031a33 	.word	0x00031a33
   2163c:	00031ae0 	.word	0x00031ae0
   21640:	0002dcd3 	.word	0x0002dcd3
   21644:	00031b02 	.word	0x00031b02
   21648:	200033dc 	.word	0x200033dc
   2164c:	00031b27 	.word	0x00031b27
   21650:	00031b3e 	.word	0x00031b3e
   21654:	00030be6 	.word	0x00030be6
   21658:	00031b69 	.word	0x00031b69
   2165c:	2000340c 	.word	0x2000340c
   21660:	0002dd93 	.word	0x0002dd93
   21664:	0002dde5 	.word	0x0002dde5
   21668:	0002ddfa 	.word	0x0002ddfa
   2166c:	0002ddb9 	.word	0x0002ddb9
   21670:	0002ddd0 	.word	0x0002ddd0

00021674 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   21674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21678:	4604      	mov	r4, r0
   2167a:	f89d a020 	ldrb.w	sl, [sp, #32]
   2167e:	460e      	mov	r6, r1
   21680:	4690      	mov	r8, r2
   21682:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21684:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21688:	f04f 0340 	mov.w	r3, #64	; 0x40
   2168c:	f3ef 8711 	mrs	r7, BASEPRI
   21690:	f383 8811 	msr	BASEPRI, r3
   21694:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21698:	4628      	mov	r0, r5
   2169a:	f7ff fdd1 	bl	21240 <z_spin_lock_valid>
   2169e:	b968      	cbnz	r0, 216bc <queue_insert+0x48>
   216a0:	4a3b      	ldr	r2, [pc, #236]	; (21790 <queue_insert+0x11c>)
   216a2:	493c      	ldr	r1, [pc, #240]	; (21794 <queue_insert+0x120>)
   216a4:	483c      	ldr	r0, [pc, #240]	; (21798 <queue_insert+0x124>)
   216a6:	2381      	movs	r3, #129	; 0x81
   216a8:	f005 ff25 	bl	274f6 <printk>
   216ac:	483b      	ldr	r0, [pc, #236]	; (2179c <queue_insert+0x128>)
   216ae:	4629      	mov	r1, r5
   216b0:	f005 ff21 	bl	274f6 <printk>
   216b4:	4836      	ldr	r0, [pc, #216]	; (21790 <queue_insert+0x11c>)
   216b6:	2181      	movs	r1, #129	; 0x81
   216b8:	f006 f9c2 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   216bc:	4628      	mov	r0, r5
   216be:	f7ff fddd 	bl	2127c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   216c2:	f1ba 0f00 	cmp.w	sl, #0
   216c6:	d000      	beq.n	216ca <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   216c8:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   216ca:	f104 000c 	add.w	r0, r4, #12
   216ce:	f001 fe8b 	bl	233e8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   216d2:	b158      	cbz	r0, 216ec <queue_insert+0x78>
   216d4:	2400      	movs	r4, #0
   216d6:	67c4      	str	r4, [r0, #124]	; 0x7c
   216d8:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   216dc:	f001 fca4 	bl	23028 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   216e0:	4628      	mov	r0, r5
   216e2:	4639      	mov	r1, r7
   216e4:	f001 f828 	bl	22738 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   216e8:	2000      	movs	r0, #0
   216ea:	e01e      	b.n	2172a <queue_insert+0xb6>
	if (alloc) {
   216ec:	f1b9 0f00 	cmp.w	r9, #0
   216f0:	d02d      	beq.n	2174e <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   216f2:	2108      	movs	r1, #8
   216f4:	f003 f9ea 	bl	24acc <z_thread_aligned_alloc>
		if (anode == NULL) {
   216f8:	b9c8      	cbnz	r0, 2172e <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216fa:	4628      	mov	r0, r5
   216fc:	f7ff fdae 	bl	2125c <z_spin_unlock_valid>
   21700:	b968      	cbnz	r0, 2171e <queue_insert+0xaa>
   21702:	4a23      	ldr	r2, [pc, #140]	; (21790 <queue_insert+0x11c>)
   21704:	4926      	ldr	r1, [pc, #152]	; (217a0 <queue_insert+0x12c>)
   21706:	4824      	ldr	r0, [pc, #144]	; (21798 <queue_insert+0x124>)
   21708:	23ac      	movs	r3, #172	; 0xac
   2170a:	f005 fef4 	bl	274f6 <printk>
   2170e:	4825      	ldr	r0, [pc, #148]	; (217a4 <queue_insert+0x130>)
   21710:	4629      	mov	r1, r5
   21712:	f005 fef0 	bl	274f6 <printk>
   21716:	481e      	ldr	r0, [pc, #120]	; (21790 <queue_insert+0x11c>)
   21718:	21ac      	movs	r1, #172	; 0xac
   2171a:	f006 f991 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   2171e:	f387 8811 	msr	BASEPRI, r7
   21722:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   21726:	f06f 000b 	mvn.w	r0, #11
}
   2172a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2172e:	2301      	movs	r3, #1
		anode->data = data;
   21730:	f8c0 8004 	str.w	r8, [r0, #4]
   21734:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   21736:	6803      	ldr	r3, [r0, #0]
   21738:	f003 0303 	and.w	r3, r3, #3
   2173c:	b95e      	cbnz	r6, 21756 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2173e:	6822      	ldr	r2, [r4, #0]
   21740:	4313      	orrs	r3, r2
   21742:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21744:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   21746:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21748:	b973      	cbnz	r3, 21768 <queue_insert+0xf4>
	list->tail = node;
   2174a:	6060      	str	r0, [r4, #4]
}
   2174c:	e00c      	b.n	21768 <queue_insert+0xf4>
	node->next_and_flags = flags;
   2174e:	f8c8 9000 	str.w	r9, [r8]
}
   21752:	4640      	mov	r0, r8
   21754:	e7ef      	b.n	21736 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21756:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   21758:	f032 0203 	bics.w	r2, r2, #3
   2175c:	d110      	bne.n	21780 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   2175e:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21760:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   21762:	b93a      	cbnz	r2, 21774 <queue_insert+0x100>
	list->head = node;
   21764:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21768:	2104      	movs	r1, #4
   2176a:	f104 0014 	add.w	r0, r4, #20
   2176e:	f00b f8a4 	bl	2c8ba <z_handle_obj_poll_events>
   21772:	e7b5      	b.n	216e0 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21774:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21776:	f003 0303 	and.w	r3, r3, #3
   2177a:	4303      	orrs	r3, r0
   2177c:	6013      	str	r3, [r2, #0]
   2177e:	e7e4      	b.n	2174a <queue_insert+0xd6>
   21780:	4313      	orrs	r3, r2
   21782:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21784:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21786:	f003 0303 	and.w	r3, r3, #3
   2178a:	4303      	orrs	r3, r0
   2178c:	6033      	str	r3, [r6, #0]
}
   2178e:	e7eb      	b.n	21768 <queue_insert+0xf4>
   21790:	0002dd93 	.word	0x0002dd93
   21794:	0002dde5 	.word	0x0002dde5
   21798:	0002dcd3 	.word	0x0002dcd3
   2179c:	0002ddfa 	.word	0x0002ddfa
   217a0:	0002ddb9 	.word	0x0002ddb9
   217a4:	0002ddd0 	.word	0x0002ddd0

000217a8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   217a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   217ac:	4605      	mov	r5, r0
   217ae:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   217b0:	460c      	mov	r4, r1
   217b2:	2900      	cmp	r1, #0
   217b4:	d04a      	beq.n	2184c <k_queue_append_list+0xa4>
   217b6:	2a00      	cmp	r2, #0
   217b8:	d048      	beq.n	2184c <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   217ba:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   217be:	f04f 0340 	mov.w	r3, #64	; 0x40
   217c2:	f3ef 8911 	mrs	r9, BASEPRI
   217c6:	f383 8811 	msr	BASEPRI, r3
   217ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217ce:	4630      	mov	r0, r6
   217d0:	f7ff fd36 	bl	21240 <z_spin_lock_valid>
   217d4:	b968      	cbnz	r0, 217f2 <k_queue_append_list+0x4a>
   217d6:	4a1f      	ldr	r2, [pc, #124]	; (21854 <k_queue_append_list+0xac>)
   217d8:	491f      	ldr	r1, [pc, #124]	; (21858 <k_queue_append_list+0xb0>)
   217da:	4820      	ldr	r0, [pc, #128]	; (2185c <k_queue_append_list+0xb4>)
   217dc:	2381      	movs	r3, #129	; 0x81
   217de:	f005 fe8a 	bl	274f6 <printk>
   217e2:	481f      	ldr	r0, [pc, #124]	; (21860 <k_queue_append_list+0xb8>)
   217e4:	4631      	mov	r1, r6
   217e6:	f005 fe86 	bl	274f6 <printk>
   217ea:	481a      	ldr	r0, [pc, #104]	; (21854 <k_queue_append_list+0xac>)
   217ec:	2181      	movs	r1, #129	; 0x81
   217ee:	f006 f927 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   217f2:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   217f4:	f105 080c 	add.w	r8, r5, #12
   217f8:	f7ff fd40 	bl	2127c <z_spin_lock_set_owner>
   217fc:	4640      	mov	r0, r8
   217fe:	f001 fdf3 	bl	233e8 <z_unpend_first_thread>
   21802:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   21806:	b920      	cbnz	r0, 21812 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   21808:	686b      	ldr	r3, [r5, #4]
   2180a:	b9cb      	cbnz	r3, 21840 <k_queue_append_list+0x98>
	list->head = node;
   2180c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2180e:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   21810:	e00a      	b.n	21828 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   21812:	6144      	str	r4, [r0, #20]
   21814:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   21818:	f001 fc06 	bl	23028 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   2181c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2181e:	4640      	mov	r0, r8
   21820:	f001 fde2 	bl	233e8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   21824:	2c00      	cmp	r4, #0
   21826:	d1ee      	bne.n	21806 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   21828:	2104      	movs	r1, #4
   2182a:	f105 0014 	add.w	r0, r5, #20
   2182e:	f00b f844 	bl	2c8ba <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   21832:	4630      	mov	r0, r6
   21834:	4649      	mov	r1, r9
   21836:	f000 ff7f 	bl	22738 <z_reschedule>
	return 0;
   2183a:	2000      	movs	r0, #0
}
   2183c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21840:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21842:	f001 0103 	and.w	r1, r1, #3
   21846:	430c      	orrs	r4, r1
   21848:	601c      	str	r4, [r3, #0]
}
   2184a:	e7e0      	b.n	2180e <k_queue_append_list+0x66>
		return -EINVAL;
   2184c:	f06f 0015 	mvn.w	r0, #21
   21850:	e7f4      	b.n	2183c <k_queue_append_list+0x94>
   21852:	bf00      	nop
   21854:	0002dd93 	.word	0x0002dd93
   21858:	0002dde5 	.word	0x0002dde5
   2185c:	0002dcd3 	.word	0x0002dcd3
   21860:	0002ddfa 	.word	0x0002ddfa

00021864 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   21864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21868:	4606      	mov	r6, r0
   2186a:	4690      	mov	r8, r2
   2186c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2186e:	f100 0508 	add.w	r5, r0, #8
   21872:	f04f 0340 	mov.w	r3, #64	; 0x40
   21876:	f3ef 8711 	mrs	r7, BASEPRI
   2187a:	f383 8811 	msr	BASEPRI, r3
   2187e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21882:	4628      	mov	r0, r5
   21884:	f7ff fcdc 	bl	21240 <z_spin_lock_valid>
   21888:	b968      	cbnz	r0, 218a6 <z_impl_k_queue_get+0x42>
   2188a:	4a25      	ldr	r2, [pc, #148]	; (21920 <z_impl_k_queue_get+0xbc>)
   2188c:	4925      	ldr	r1, [pc, #148]	; (21924 <z_impl_k_queue_get+0xc0>)
   2188e:	4826      	ldr	r0, [pc, #152]	; (21928 <z_impl_k_queue_get+0xc4>)
   21890:	2381      	movs	r3, #129	; 0x81
   21892:	f005 fe30 	bl	274f6 <printk>
   21896:	4825      	ldr	r0, [pc, #148]	; (2192c <z_impl_k_queue_get+0xc8>)
   21898:	4629      	mov	r1, r5
   2189a:	f005 fe2c 	bl	274f6 <printk>
   2189e:	4820      	ldr	r0, [pc, #128]	; (21920 <z_impl_k_queue_get+0xbc>)
   218a0:	2181      	movs	r1, #129	; 0x81
   218a2:	f006 f8cd 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   218a6:	4628      	mov	r0, r5
   218a8:	f7ff fce8 	bl	2127c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   218ac:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   218ae:	b334      	cbz	r4, 218fe <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   218b0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   218b2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   218b4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   218b8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   218ba:	4620      	mov	r0, r4
	list->head = node;
   218bc:	6033      	str	r3, [r6, #0]
	list->tail = node;
   218be:	bf08      	it	eq
   218c0:	6073      	streq	r3, [r6, #4]
   218c2:	2101      	movs	r1, #1
   218c4:	f00a feab 	bl	2c61e <z_queue_node_peek>
   218c8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218ca:	4628      	mov	r0, r5
   218cc:	f7ff fcc6 	bl	2125c <z_spin_unlock_valid>
   218d0:	b968      	cbnz	r0, 218ee <z_impl_k_queue_get+0x8a>
   218d2:	4a13      	ldr	r2, [pc, #76]	; (21920 <z_impl_k_queue_get+0xbc>)
   218d4:	4916      	ldr	r1, [pc, #88]	; (21930 <z_impl_k_queue_get+0xcc>)
   218d6:	4814      	ldr	r0, [pc, #80]	; (21928 <z_impl_k_queue_get+0xc4>)
   218d8:	23ac      	movs	r3, #172	; 0xac
   218da:	f005 fe0c 	bl	274f6 <printk>
   218de:	4815      	ldr	r0, [pc, #84]	; (21934 <z_impl_k_queue_get+0xd0>)
   218e0:	4629      	mov	r1, r5
   218e2:	f005 fe08 	bl	274f6 <printk>
   218e6:	480e      	ldr	r0, [pc, #56]	; (21920 <z_impl_k_queue_get+0xbc>)
   218e8:	21ac      	movs	r1, #172	; 0xac
   218ea:	f006 f8a9 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   218ee:	f387 8811 	msr	BASEPRI, r7
   218f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   218f6:	4620      	mov	r0, r4
   218f8:	b003      	add	sp, #12
   218fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   218fe:	ea58 0309 	orrs.w	r3, r8, r9
   21902:	d0e2      	beq.n	218ca <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   21904:	e9cd 8900 	strd	r8, r9, [sp]
   21908:	f106 020c 	add.w	r2, r6, #12
   2190c:	4639      	mov	r1, r7
   2190e:	4628      	mov	r0, r5
   21910:	f001 f950 	bl	22bb4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   21914:	2800      	cmp	r0, #0
   21916:	d1ee      	bne.n	218f6 <z_impl_k_queue_get+0x92>
   21918:	4b07      	ldr	r3, [pc, #28]	; (21938 <z_impl_k_queue_get+0xd4>)
   2191a:	689b      	ldr	r3, [r3, #8]
   2191c:	695c      	ldr	r4, [r3, #20]
   2191e:	e7ea      	b.n	218f6 <z_impl_k_queue_get+0x92>
   21920:	0002dd93 	.word	0x0002dd93
   21924:	0002dde5 	.word	0x0002dde5
   21928:	0002dcd3 	.word	0x0002dcd3
   2192c:	0002ddfa 	.word	0x0002ddfa
   21930:	0002ddb9 	.word	0x0002ddb9
   21934:	0002ddd0 	.word	0x0002ddd0
   21938:	200033dc 	.word	0x200033dc

0002193c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2193c:	b538      	push	{r3, r4, r5, lr}
   2193e:	4604      	mov	r4, r0
	__asm__ volatile(
   21940:	f04f 0340 	mov.w	r3, #64	; 0x40
   21944:	f3ef 8511 	mrs	r5, BASEPRI
   21948:	f383 8811 	msr	BASEPRI, r3
   2194c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21950:	4817      	ldr	r0, [pc, #92]	; (219b0 <z_impl_k_sem_give+0x74>)
   21952:	f7ff fc75 	bl	21240 <z_spin_lock_valid>
   21956:	b968      	cbnz	r0, 21974 <z_impl_k_sem_give+0x38>
   21958:	4a16      	ldr	r2, [pc, #88]	; (219b4 <z_impl_k_sem_give+0x78>)
   2195a:	4917      	ldr	r1, [pc, #92]	; (219b8 <z_impl_k_sem_give+0x7c>)
   2195c:	4817      	ldr	r0, [pc, #92]	; (219bc <z_impl_k_sem_give+0x80>)
   2195e:	2381      	movs	r3, #129	; 0x81
   21960:	f005 fdc9 	bl	274f6 <printk>
   21964:	4912      	ldr	r1, [pc, #72]	; (219b0 <z_impl_k_sem_give+0x74>)
   21966:	4816      	ldr	r0, [pc, #88]	; (219c0 <z_impl_k_sem_give+0x84>)
   21968:	f005 fdc5 	bl	274f6 <printk>
   2196c:	4811      	ldr	r0, [pc, #68]	; (219b4 <z_impl_k_sem_give+0x78>)
   2196e:	2181      	movs	r1, #129	; 0x81
   21970:	f006 f866 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   21974:	480e      	ldr	r0, [pc, #56]	; (219b0 <z_impl_k_sem_give+0x74>)
   21976:	f7ff fc81 	bl	2127c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2197a:	4620      	mov	r0, r4
   2197c:	f001 fd34 	bl	233e8 <z_unpend_first_thread>

	if (thread != NULL) {
   21980:	b148      	cbz	r0, 21996 <z_impl_k_sem_give+0x5a>
   21982:	2200      	movs	r2, #0
   21984:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21986:	f001 fb4f 	bl	23028 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2198a:	4629      	mov	r1, r5
   2198c:	4808      	ldr	r0, [pc, #32]	; (219b0 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2198e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21992:	f000 bed1 	b.w	22738 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21996:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2199a:	429a      	cmp	r2, r3
   2199c:	bf18      	it	ne
   2199e:	3301      	addne	r3, #1
   219a0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   219a2:	2102      	movs	r1, #2
   219a4:	f104 0010 	add.w	r0, r4, #16
   219a8:	f00a ff87 	bl	2c8ba <z_handle_obj_poll_events>
}
   219ac:	e7ed      	b.n	2198a <z_impl_k_sem_give+0x4e>
   219ae:	bf00      	nop
   219b0:	20003410 	.word	0x20003410
   219b4:	0002dd93 	.word	0x0002dd93
   219b8:	0002dde5 	.word	0x0002dde5
   219bc:	0002dcd3 	.word	0x0002dcd3
   219c0:	0002ddfa 	.word	0x0002ddfa

000219c4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   219c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   219c6:	4604      	mov	r4, r0
   219c8:	4616      	mov	r6, r2
   219ca:	461f      	mov	r7, r3
   219cc:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   219d0:	b17b      	cbz	r3, 219f2 <z_impl_k_sem_take+0x2e>
   219d2:	ea56 0307 	orrs.w	r3, r6, r7
   219d6:	d00c      	beq.n	219f2 <z_impl_k_sem_take+0x2e>
   219d8:	4935      	ldr	r1, [pc, #212]	; (21ab0 <z_impl_k_sem_take+0xec>)
   219da:	4a36      	ldr	r2, [pc, #216]	; (21ab4 <z_impl_k_sem_take+0xf0>)
   219dc:	4836      	ldr	r0, [pc, #216]	; (21ab8 <z_impl_k_sem_take+0xf4>)
   219de:	2379      	movs	r3, #121	; 0x79
   219e0:	f005 fd89 	bl	274f6 <printk>
   219e4:	4835      	ldr	r0, [pc, #212]	; (21abc <z_impl_k_sem_take+0xf8>)
   219e6:	f005 fd86 	bl	274f6 <printk>
   219ea:	4832      	ldr	r0, [pc, #200]	; (21ab4 <z_impl_k_sem_take+0xf0>)
   219ec:	2179      	movs	r1, #121	; 0x79
   219ee:	f006 f827 	bl	27a40 <assert_post_action>
   219f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   219f6:	f3ef 8511 	mrs	r5, BASEPRI
   219fa:	f383 8811 	msr	BASEPRI, r3
   219fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a02:	482f      	ldr	r0, [pc, #188]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21a04:	f7ff fc1c 	bl	21240 <z_spin_lock_valid>
   21a08:	b968      	cbnz	r0, 21a26 <z_impl_k_sem_take+0x62>
   21a0a:	4a2e      	ldr	r2, [pc, #184]	; (21ac4 <z_impl_k_sem_take+0x100>)
   21a0c:	492e      	ldr	r1, [pc, #184]	; (21ac8 <z_impl_k_sem_take+0x104>)
   21a0e:	482a      	ldr	r0, [pc, #168]	; (21ab8 <z_impl_k_sem_take+0xf4>)
   21a10:	2381      	movs	r3, #129	; 0x81
   21a12:	f005 fd70 	bl	274f6 <printk>
   21a16:	492a      	ldr	r1, [pc, #168]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21a18:	482c      	ldr	r0, [pc, #176]	; (21acc <z_impl_k_sem_take+0x108>)
   21a1a:	f005 fd6c 	bl	274f6 <printk>
   21a1e:	4829      	ldr	r0, [pc, #164]	; (21ac4 <z_impl_k_sem_take+0x100>)
   21a20:	2181      	movs	r1, #129	; 0x81
   21a22:	f006 f80d 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a26:	4826      	ldr	r0, [pc, #152]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21a28:	f7ff fc28 	bl	2127c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21a2c:	68a3      	ldr	r3, [r4, #8]
   21a2e:	b1d3      	cbz	r3, 21a66 <z_impl_k_sem_take+0xa2>
		sem->count--;
   21a30:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a32:	4823      	ldr	r0, [pc, #140]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21a34:	60a3      	str	r3, [r4, #8]
   21a36:	f7ff fc11 	bl	2125c <z_spin_unlock_valid>
   21a3a:	b968      	cbnz	r0, 21a58 <z_impl_k_sem_take+0x94>
   21a3c:	4a21      	ldr	r2, [pc, #132]	; (21ac4 <z_impl_k_sem_take+0x100>)
   21a3e:	4924      	ldr	r1, [pc, #144]	; (21ad0 <z_impl_k_sem_take+0x10c>)
   21a40:	481d      	ldr	r0, [pc, #116]	; (21ab8 <z_impl_k_sem_take+0xf4>)
   21a42:	23ac      	movs	r3, #172	; 0xac
   21a44:	f005 fd57 	bl	274f6 <printk>
   21a48:	491d      	ldr	r1, [pc, #116]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21a4a:	4822      	ldr	r0, [pc, #136]	; (21ad4 <z_impl_k_sem_take+0x110>)
   21a4c:	f005 fd53 	bl	274f6 <printk>
   21a50:	481c      	ldr	r0, [pc, #112]	; (21ac4 <z_impl_k_sem_take+0x100>)
   21a52:	21ac      	movs	r1, #172	; 0xac
   21a54:	f005 fff4 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   21a58:	f385 8811 	msr	BASEPRI, r5
   21a5c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21a60:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21a62:	b003      	add	sp, #12
   21a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21a66:	ea56 0307 	orrs.w	r3, r6, r7
   21a6a:	d118      	bne.n	21a9e <z_impl_k_sem_take+0xda>
   21a6c:	4814      	ldr	r0, [pc, #80]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21a6e:	f7ff fbf5 	bl	2125c <z_spin_unlock_valid>
   21a72:	b968      	cbnz	r0, 21a90 <z_impl_k_sem_take+0xcc>
   21a74:	4a13      	ldr	r2, [pc, #76]	; (21ac4 <z_impl_k_sem_take+0x100>)
   21a76:	4916      	ldr	r1, [pc, #88]	; (21ad0 <z_impl_k_sem_take+0x10c>)
   21a78:	480f      	ldr	r0, [pc, #60]	; (21ab8 <z_impl_k_sem_take+0xf4>)
   21a7a:	23ac      	movs	r3, #172	; 0xac
   21a7c:	f005 fd3b 	bl	274f6 <printk>
   21a80:	490f      	ldr	r1, [pc, #60]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21a82:	4814      	ldr	r0, [pc, #80]	; (21ad4 <z_impl_k_sem_take+0x110>)
   21a84:	f005 fd37 	bl	274f6 <printk>
   21a88:	480e      	ldr	r0, [pc, #56]	; (21ac4 <z_impl_k_sem_take+0x100>)
   21a8a:	21ac      	movs	r1, #172	; 0xac
   21a8c:	f005 ffd8 	bl	27a40 <assert_post_action>
   21a90:	f385 8811 	msr	BASEPRI, r5
   21a94:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21a98:	f06f 000f 	mvn.w	r0, #15
   21a9c:	e7e1      	b.n	21a62 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21a9e:	e9cd 6700 	strd	r6, r7, [sp]
   21aa2:	4622      	mov	r2, r4
   21aa4:	4629      	mov	r1, r5
   21aa6:	4806      	ldr	r0, [pc, #24]	; (21ac0 <z_impl_k_sem_take+0xfc>)
   21aa8:	f001 f884 	bl	22bb4 <z_pend_curr>
	return ret;
   21aac:	e7d9      	b.n	21a62 <z_impl_k_sem_take+0x9e>
   21aae:	bf00      	nop
   21ab0:	00031bba 	.word	0x00031bba
   21ab4:	00031b9a 	.word	0x00031b9a
   21ab8:	0002dcd3 	.word	0x0002dcd3
   21abc:	00030be6 	.word	0x00030be6
   21ac0:	20003410 	.word	0x20003410
   21ac4:	0002dd93 	.word	0x0002dd93
   21ac8:	0002dde5 	.word	0x0002dde5
   21acc:	0002ddfa 	.word	0x0002ddfa
   21ad0:	0002ddb9 	.word	0x0002ddb9
   21ad4:	0002ddd0 	.word	0x0002ddd0

00021ad8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   21ad8:	b570      	push	{r4, r5, r6, lr}
   21ada:	4604      	mov	r4, r0
	__asm__ volatile(
   21adc:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ae0:	f3ef 8511 	mrs	r5, BASEPRI
   21ae4:	f383 8811 	msr	BASEPRI, r3
   21ae8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21aec:	4815      	ldr	r0, [pc, #84]	; (21b44 <z_impl_k_sem_reset+0x6c>)
   21aee:	f7ff fba7 	bl	21240 <z_spin_lock_valid>
   21af2:	b968      	cbnz	r0, 21b10 <z_impl_k_sem_reset+0x38>
   21af4:	4a14      	ldr	r2, [pc, #80]	; (21b48 <z_impl_k_sem_reset+0x70>)
   21af6:	4915      	ldr	r1, [pc, #84]	; (21b4c <z_impl_k_sem_reset+0x74>)
   21af8:	4815      	ldr	r0, [pc, #84]	; (21b50 <z_impl_k_sem_reset+0x78>)
   21afa:	2381      	movs	r3, #129	; 0x81
   21afc:	f005 fcfb 	bl	274f6 <printk>
   21b00:	4910      	ldr	r1, [pc, #64]	; (21b44 <z_impl_k_sem_reset+0x6c>)
   21b02:	4814      	ldr	r0, [pc, #80]	; (21b54 <z_impl_k_sem_reset+0x7c>)
   21b04:	f005 fcf7 	bl	274f6 <printk>
   21b08:	480f      	ldr	r0, [pc, #60]	; (21b48 <z_impl_k_sem_reset+0x70>)
   21b0a:	2181      	movs	r1, #129	; 0x81
   21b0c:	f005 ff98 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b10:	480c      	ldr	r0, [pc, #48]	; (21b44 <z_impl_k_sem_reset+0x6c>)
   21b12:	f7ff fbb3 	bl	2127c <z_spin_lock_set_owner>
   21b16:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   21b1a:	4620      	mov	r0, r4
   21b1c:	f001 fc64 	bl	233e8 <z_unpend_first_thread>
		if (thread == NULL) {
   21b20:	b118      	cbz	r0, 21b2a <z_impl_k_sem_reset+0x52>
   21b22:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   21b24:	f001 fa80 	bl	23028 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   21b28:	e7f7      	b.n	21b1a <z_impl_k_sem_reset+0x42>
	}
	sem->count = 0;
   21b2a:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21b2c:	2102      	movs	r1, #2
   21b2e:	f104 0010 	add.w	r0, r4, #16
   21b32:	f00a fec2 	bl	2c8ba <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   21b36:	4629      	mov	r1, r5
   21b38:	4802      	ldr	r0, [pc, #8]	; (21b44 <z_impl_k_sem_reset+0x6c>)
}
   21b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   21b3e:	f000 bdfb 	b.w	22738 <z_reschedule>
   21b42:	bf00      	nop
   21b44:	20003410 	.word	0x20003410
   21b48:	0002dd93 	.word	0x0002dd93
   21b4c:	0002dde5 	.word	0x0002dde5
   21b50:	0002dcd3 	.word	0x0002dcd3
   21b54:	0002ddfa 	.word	0x0002ddfa

00021b58 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21b5a:	4b09      	ldr	r3, [pc, #36]	; (21b80 <k_sys_work_q_init+0x28>)
   21b5c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21b5e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   21b60:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   21b62:	9300      	str	r3, [sp, #0]
   21b64:	4907      	ldr	r1, [pc, #28]	; (21b84 <k_sys_work_q_init+0x2c>)
   21b66:	4808      	ldr	r0, [pc, #32]	; (21b88 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21b68:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21b6c:	f04f 33ff 	mov.w	r3, #4294967295
   21b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21b74:	f000 fa88 	bl	22088 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21b78:	4620      	mov	r0, r4
   21b7a:	b004      	add	sp, #16
   21b7c:	bd10      	pop	{r4, pc}
   21b7e:	bf00      	nop
   21b80:	00031c07 	.word	0x00031c07
   21b84:	200080a0 	.word	0x200080a0
   21b88:	200020a8 	.word	0x200020a8

00021b8c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b90:	4e7e      	ldr	r6, [pc, #504]	; (21d8c <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21b92:	4f7f      	ldr	r7, [pc, #508]	; (21d90 <work_queue_main+0x204>)
{
   21b94:	b085      	sub	sp, #20
   21b96:	4604      	mov	r4, r0
   21b98:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b9c:	f3ef 8811 	mrs	r8, BASEPRI
   21ba0:	f383 8811 	msr	BASEPRI, r3
   21ba4:	f3bf 8f6f 	isb	sy
   21ba8:	4630      	mov	r0, r6
   21baa:	f7ff fb49 	bl	21240 <z_spin_lock_valid>
   21bae:	b968      	cbnz	r0, 21bcc <work_queue_main+0x40>
   21bb0:	4a78      	ldr	r2, [pc, #480]	; (21d94 <work_queue_main+0x208>)
   21bb2:	4979      	ldr	r1, [pc, #484]	; (21d98 <work_queue_main+0x20c>)
   21bb4:	4879      	ldr	r0, [pc, #484]	; (21d9c <work_queue_main+0x210>)
   21bb6:	2381      	movs	r3, #129	; 0x81
   21bb8:	f005 fc9d 	bl	274f6 <printk>
   21bbc:	4878      	ldr	r0, [pc, #480]	; (21da0 <work_queue_main+0x214>)
   21bbe:	4631      	mov	r1, r6
   21bc0:	f005 fc99 	bl	274f6 <printk>
   21bc4:	4873      	ldr	r0, [pc, #460]	; (21d94 <work_queue_main+0x208>)
   21bc6:	2181      	movs	r1, #129	; 0x81
   21bc8:	f005 ff3a 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   21bcc:	4630      	mov	r0, r6
   21bce:	f7ff fb55 	bl	2127c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   21bd2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   21bd6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   21bda:	b9ad      	cbnz	r5, 21c08 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   21bdc:	f023 0204 	bic.w	r2, r3, #4
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   21be0:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   21be2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   21be6:	f100 8092 	bmi.w	21d0e <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21bea:	2300      	movs	r3, #0
   21bec:	9302      	str	r3, [sp, #8]
   21bee:	f04f 32ff 	mov.w	r2, #4294967295
   21bf2:	f04f 33ff 	mov.w	r3, #4294967295
   21bf6:	e9cd 2300 	strd	r2, r3, [sp]
   21bfa:	4641      	mov	r1, r8
   21bfc:	f104 0288 	add.w	r2, r4, #136	; 0x88
   21c00:	4630      	mov	r0, r6
   21c02:	f001 fefb 	bl	239fc <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   21c06:	e7c7      	b.n	21b98 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21c08:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   21c0c:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   21c0e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21c12:	428d      	cmp	r5, r1
   21c14:	d101      	bne.n	21c1a <work_queue_main+0x8e>
	list->tail = node;
   21c16:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   21c1a:	f043 0302 	orr.w	r3, r3, #2
   21c1e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   21c22:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   21c24:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   21c28:	f023 0304 	bic.w	r3, r3, #4
   21c2c:	f043 0301 	orr.w	r3, r3, #1
   21c30:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c32:	4630      	mov	r0, r6
   21c34:	f7ff fb12 	bl	2125c <z_spin_unlock_valid>
   21c38:	b968      	cbnz	r0, 21c56 <work_queue_main+0xca>
   21c3a:	4a56      	ldr	r2, [pc, #344]	; (21d94 <work_queue_main+0x208>)
   21c3c:	4959      	ldr	r1, [pc, #356]	; (21da4 <work_queue_main+0x218>)
   21c3e:	4857      	ldr	r0, [pc, #348]	; (21d9c <work_queue_main+0x210>)
   21c40:	23ac      	movs	r3, #172	; 0xac
   21c42:	f005 fc58 	bl	274f6 <printk>
   21c46:	4858      	ldr	r0, [pc, #352]	; (21da8 <work_queue_main+0x21c>)
   21c48:	4631      	mov	r1, r6
   21c4a:	f005 fc54 	bl	274f6 <printk>
   21c4e:	4851      	ldr	r0, [pc, #324]	; (21d94 <work_queue_main+0x208>)
   21c50:	21ac      	movs	r1, #172	; 0xac
   21c52:	f005 fef5 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   21c56:	f388 8811 	msr	BASEPRI, r8
   21c5a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   21c5e:	f1b9 0f00 	cmp.w	r9, #0
   21c62:	d10b      	bne.n	21c7c <work_queue_main+0xf0>
   21c64:	4951      	ldr	r1, [pc, #324]	; (21dac <work_queue_main+0x220>)
   21c66:	484d      	ldr	r0, [pc, #308]	; (21d9c <work_queue_main+0x210>)
   21c68:	4a51      	ldr	r2, [pc, #324]	; (21db0 <work_queue_main+0x224>)
   21c6a:	f240 237d 	movw	r3, #637	; 0x27d
   21c6e:	f005 fc42 	bl	274f6 <printk>
   21c72:	484f      	ldr	r0, [pc, #316]	; (21db0 <work_queue_main+0x224>)
   21c74:	f240 217d 	movw	r1, #637	; 0x27d
   21c78:	f005 fee2 	bl	27a40 <assert_post_action>
			handler(work);
   21c7c:	4628      	mov	r0, r5
   21c7e:	47c8      	blx	r9
	__asm__ volatile(
   21c80:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c84:	f3ef 8a11 	mrs	sl, BASEPRI
   21c88:	f383 8811 	msr	BASEPRI, r3
   21c8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c90:	4630      	mov	r0, r6
   21c92:	f7ff fad5 	bl	21240 <z_spin_lock_valid>
   21c96:	b968      	cbnz	r0, 21cb4 <work_queue_main+0x128>
   21c98:	4a3e      	ldr	r2, [pc, #248]	; (21d94 <work_queue_main+0x208>)
   21c9a:	493f      	ldr	r1, [pc, #252]	; (21d98 <work_queue_main+0x20c>)
   21c9c:	483f      	ldr	r0, [pc, #252]	; (21d9c <work_queue_main+0x210>)
   21c9e:	2381      	movs	r3, #129	; 0x81
   21ca0:	f005 fc29 	bl	274f6 <printk>
   21ca4:	483e      	ldr	r0, [pc, #248]	; (21da0 <work_queue_main+0x214>)
   21ca6:	4631      	mov	r1, r6
   21ca8:	f005 fc25 	bl	274f6 <printk>
   21cac:	4839      	ldr	r0, [pc, #228]	; (21d94 <work_queue_main+0x208>)
   21cae:	2181      	movs	r1, #129	; 0x81
   21cb0:	f005 fec6 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   21cb4:	4630      	mov	r0, r6
   21cb6:	f7ff fae1 	bl	2127c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   21cba:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21cbc:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   21cbe:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21cc2:	d42e      	bmi.n	21d22 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   21cc4:	60ea      	str	r2, [r5, #12]
   21cc6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   21cca:	f023 0302 	bic.w	r3, r3, #2
   21cce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cd2:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   21cd4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   21cd8:	f7ff fac0 	bl	2125c <z_spin_unlock_valid>
   21cdc:	b968      	cbnz	r0, 21cfa <work_queue_main+0x16e>
   21cde:	4a2d      	ldr	r2, [pc, #180]	; (21d94 <work_queue_main+0x208>)
   21ce0:	4930      	ldr	r1, [pc, #192]	; (21da4 <work_queue_main+0x218>)
   21ce2:	482e      	ldr	r0, [pc, #184]	; (21d9c <work_queue_main+0x210>)
   21ce4:	23ac      	movs	r3, #172	; 0xac
   21ce6:	f005 fc06 	bl	274f6 <printk>
   21cea:	482f      	ldr	r0, [pc, #188]	; (21da8 <work_queue_main+0x21c>)
   21cec:	4631      	mov	r1, r6
   21cee:	f005 fc02 	bl	274f6 <printk>
   21cf2:	4828      	ldr	r0, [pc, #160]	; (21d94 <work_queue_main+0x208>)
   21cf4:	21ac      	movs	r1, #172	; 0xac
   21cf6:	f005 fea3 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   21cfa:	f38a 8811 	msr	BASEPRI, sl
   21cfe:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   21d02:	2d00      	cmp	r5, #0
   21d04:	f47f af48 	bne.w	21b98 <work_queue_main+0xc>
	z_impl_k_yield();
   21d08:	f001 fbca 	bl	234a0 <z_impl_k_yield>
}
   21d0c:	e744      	b.n	21b98 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21d0e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21d12:	2200      	movs	r2, #0
   21d14:	2101      	movs	r1, #1
   21d16:	4628      	mov	r0, r5
   21d18:	f001 fe18 	bl	2394c <z_sched_wake>
   21d1c:	2800      	cmp	r0, #0
   21d1e:	d1f8      	bne.n	21d12 <work_queue_main+0x186>
   21d20:	e763      	b.n	21bea <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21d22:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   21d24:	f023 0303 	bic.w	r3, r3, #3
   21d28:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21d2a:	2800      	cmp	r0, #0
   21d2c:	d0cb      	beq.n	21cc6 <work_queue_main+0x13a>
	return node->next;
   21d2e:	6803      	ldr	r3, [r0, #0]
   21d30:	2b00      	cmp	r3, #0
   21d32:	bf38      	it	cc
   21d34:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21d36:	f04f 0900 	mov.w	r9, #0
   21d3a:	4698      	mov	r8, r3
	parent->next = child;
   21d3c:	46cb      	mov	fp, r9
		if (wc->work == work) {
   21d3e:	6843      	ldr	r3, [r0, #4]
   21d40:	429d      	cmp	r5, r3
   21d42:	4602      	mov	r2, r0
   21d44:	d10d      	bne.n	21d62 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   21d46:	6802      	ldr	r2, [r0, #0]
   21d48:	f1b9 0f00 	cmp.w	r9, #0
   21d4c:	d115      	bne.n	21d7a <work_queue_main+0x1ee>
   21d4e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   21d50:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21d52:	4283      	cmp	r3, r0
   21d54:	d100      	bne.n	21d58 <work_queue_main+0x1cc>
	list->tail = node;
   21d56:	607a      	str	r2, [r7, #4]
	parent->next = child;
   21d58:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   21d5c:	f7ff fdee 	bl	2193c <z_impl_k_sem_give>
}
   21d60:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21d62:	f1b8 0f00 	cmp.w	r8, #0
   21d66:	d0ae      	beq.n	21cc6 <work_queue_main+0x13a>
	return node->next;
   21d68:	f8d8 3000 	ldr.w	r3, [r8]
   21d6c:	2b00      	cmp	r3, #0
   21d6e:	bf38      	it	cc
   21d70:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21d72:	4640      	mov	r0, r8
   21d74:	4691      	mov	r9, r2
   21d76:	4698      	mov	r8, r3
   21d78:	e7e1      	b.n	21d3e <work_queue_main+0x1b2>
	parent->next = child;
   21d7a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   21d7e:	687b      	ldr	r3, [r7, #4]
   21d80:	4283      	cmp	r3, r0
	list->tail = node;
   21d82:	bf08      	it	eq
   21d84:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   21d88:	e7e6      	b.n	21d58 <work_queue_main+0x1cc>
   21d8a:	bf00      	nop
   21d8c:	20003414 	.word	0x20003414
   21d90:	20003418 	.word	0x20003418
   21d94:	0002dd93 	.word	0x0002dd93
   21d98:	0002dde5 	.word	0x0002dde5
   21d9c:	0002dcd3 	.word	0x0002dcd3
   21da0:	0002ddfa 	.word	0x0002ddfa
   21da4:	0002ddb9 	.word	0x0002ddb9
   21da8:	0002ddd0 	.word	0x0002ddd0
   21dac:	00031c31 	.word	0x00031c31
   21db0:	00031c10 	.word	0x00031c10

00021db4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   21db4:	68c3      	ldr	r3, [r0, #12]
{
   21db6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21db8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   21dbc:	079b      	lsls	r3, r3, #30
{
   21dbe:	4605      	mov	r5, r0
   21dc0:	460c      	mov	r4, r1
	if (ret) {
   21dc2:	d50d      	bpl.n	21de0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21dc4:	2201      	movs	r2, #1
   21dc6:	2100      	movs	r1, #0
   21dc8:	f104 0008 	add.w	r0, r4, #8
   21dcc:	f00a fc55 	bl	2c67a <z_impl_k_sem_init>
	parent->next = child;
   21dd0:	2300      	movs	r3, #0
   21dd2:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21dd4:	4b05      	ldr	r3, [pc, #20]	; (21dec <cancel_sync_locked+0x38>)
	canceler->work = work;
   21dd6:	6065      	str	r5, [r4, #4]
   21dd8:	685a      	ldr	r2, [r3, #4]
   21dda:	b91a      	cbnz	r2, 21de4 <cancel_sync_locked+0x30>
	list->head = node;
   21ddc:	e9c3 4400 	strd	r4, r4, [r3]
}
   21de0:	4630      	mov	r0, r6
   21de2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21de4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21de6:	605c      	str	r4, [r3, #4]
}
   21de8:	e7fa      	b.n	21de0 <cancel_sync_locked+0x2c>
   21dea:	bf00      	nop
   21dec:	20003418 	.word	0x20003418

00021df0 <submit_to_queue_locked>:
{
   21df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21df2:	68c3      	ldr	r3, [r0, #12]
   21df4:	079a      	lsls	r2, r3, #30
{
   21df6:	4604      	mov	r4, r0
   21df8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21dfa:	f3c3 0540 	ubfx	r5, r3, #1, #1
   21dfe:	d42b      	bmi.n	21e58 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21e00:	075f      	lsls	r7, r3, #29
   21e02:	d42b      	bmi.n	21e5c <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   21e04:	680a      	ldr	r2, [r1, #0]
   21e06:	b90a      	cbnz	r2, 21e0c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21e08:	6882      	ldr	r2, [r0, #8]
   21e0a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   21e0c:	07d8      	lsls	r0, r3, #31
   21e0e:	d528      	bpl.n	21e62 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   21e10:	68a3      	ldr	r3, [r4, #8]
   21e12:	b95b      	cbnz	r3, 21e2c <submit_to_queue_locked+0x3c>
   21e14:	4924      	ldr	r1, [pc, #144]	; (21ea8 <submit_to_queue_locked+0xb8>)
   21e16:	4825      	ldr	r0, [pc, #148]	; (21eac <submit_to_queue_locked+0xbc>)
   21e18:	4a25      	ldr	r2, [pc, #148]	; (21eb0 <submit_to_queue_locked+0xc0>)
   21e1a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   21e1e:	f005 fb6a 	bl	274f6 <printk>
   21e22:	4823      	ldr	r0, [pc, #140]	; (21eb0 <submit_to_queue_locked+0xc0>)
   21e24:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   21e28:	f005 fe0a 	bl	27a40 <assert_post_action>
			*queuep = work->queue;
   21e2c:	68a3      	ldr	r3, [r4, #8]
   21e2e:	6033      	str	r3, [r6, #0]
			ret = 2;
   21e30:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   21e32:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   21e34:	b38f      	cbz	r7, 21e9a <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21e36:	4b1f      	ldr	r3, [pc, #124]	; (21eb4 <submit_to_queue_locked+0xc4>)
   21e38:	689b      	ldr	r3, [r3, #8]
   21e3a:	42bb      	cmp	r3, r7
   21e3c:	d113      	bne.n	21e66 <submit_to_queue_locked+0x76>
   21e3e:	f00a fbd3 	bl	2c5e8 <k_is_in_isr>
   21e42:	f080 0001 	eor.w	r0, r0, #1
   21e46:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   21e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21e4c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21e4e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21e52:	d525      	bpl.n	21ea0 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   21e54:	b14a      	cbz	r2, 21e6a <submit_to_queue_locked+0x7a>
   21e56:	b950      	cbnz	r0, 21e6e <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   21e58:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   21e5c:	2300      	movs	r3, #0
   21e5e:	6033      	str	r3, [r6, #0]
	return ret;
   21e60:	e015      	b.n	21e8e <submit_to_queue_locked+0x9e>
		ret = 1;
   21e62:	2501      	movs	r5, #1
   21e64:	e7e5      	b.n	21e32 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21e66:	2000      	movs	r0, #0
   21e68:	e7ee      	b.n	21e48 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   21e6a:	071b      	lsls	r3, r3, #28
   21e6c:	d4f4      	bmi.n	21e58 <submit_to_queue_locked+0x68>
	parent->next = child;
   21e6e:	2300      	movs	r3, #0
   21e70:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   21e76:	b963      	cbnz	r3, 21e92 <submit_to_queue_locked+0xa2>
	list->head = node;
   21e78:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   21e7c:	4638      	mov	r0, r7
   21e7e:	f00a fc0c 	bl	2c69a <notify_queue_locked>
	*flagp |= BIT(bit);
   21e82:	68e3      	ldr	r3, [r4, #12]
   21e84:	f043 0304 	orr.w	r3, r3, #4
   21e88:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21e8a:	6833      	ldr	r3, [r6, #0]
   21e8c:	60a3      	str	r3, [r4, #8]
}
   21e8e:	4628      	mov	r0, r5
   21e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21e92:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21e94:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   21e98:	e7f0      	b.n	21e7c <submit_to_queue_locked+0x8c>
		return -EINVAL;
   21e9a:	f06f 0515 	mvn.w	r5, #21
   21e9e:	e7dd      	b.n	21e5c <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   21ea0:	f06f 0512 	mvn.w	r5, #18
   21ea4:	e7da      	b.n	21e5c <submit_to_queue_locked+0x6c>
   21ea6:	bf00      	nop
   21ea8:	00031c48 	.word	0x00031c48
   21eac:	0002dcd3 	.word	0x0002dcd3
   21eb0:	00031c10 	.word	0x00031c10
   21eb4:	200033dc 	.word	0x200033dc

00021eb8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21eba:	4604      	mov	r4, r0
	__asm__ volatile(
   21ebc:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ec0:	f3ef 8511 	mrs	r5, BASEPRI
   21ec4:	f383 8811 	msr	BASEPRI, r3
   21ec8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ecc:	481e      	ldr	r0, [pc, #120]	; (21f48 <work_timeout+0x90>)
   21ece:	f7ff f9b7 	bl	21240 <z_spin_lock_valid>
   21ed2:	b968      	cbnz	r0, 21ef0 <work_timeout+0x38>
   21ed4:	4a1d      	ldr	r2, [pc, #116]	; (21f4c <work_timeout+0x94>)
   21ed6:	491e      	ldr	r1, [pc, #120]	; (21f50 <work_timeout+0x98>)
   21ed8:	481e      	ldr	r0, [pc, #120]	; (21f54 <work_timeout+0x9c>)
   21eda:	2381      	movs	r3, #129	; 0x81
   21edc:	f005 fb0b 	bl	274f6 <printk>
   21ee0:	4919      	ldr	r1, [pc, #100]	; (21f48 <work_timeout+0x90>)
   21ee2:	481d      	ldr	r0, [pc, #116]	; (21f58 <work_timeout+0xa0>)
   21ee4:	f005 fb07 	bl	274f6 <printk>
   21ee8:	4818      	ldr	r0, [pc, #96]	; (21f4c <work_timeout+0x94>)
   21eea:	2181      	movs	r1, #129	; 0x81
   21eec:	f005 fda8 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ef0:	4815      	ldr	r0, [pc, #84]	; (21f48 <work_timeout+0x90>)
   21ef2:	f7ff f9c3 	bl	2127c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   21ef6:	2300      	movs	r3, #0
   21ef8:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   21efa:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   21efe:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21f02:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   21f04:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21f08:	d506      	bpl.n	21f18 <work_timeout+0x60>
		queue = dw->queue;
   21f0a:	69a3      	ldr	r3, [r4, #24]
   21f0c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21f0e:	a901      	add	r1, sp, #4
   21f10:	f1a4 0010 	sub.w	r0, r4, #16
   21f14:	f7ff ff6c 	bl	21df0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f18:	480b      	ldr	r0, [pc, #44]	; (21f48 <work_timeout+0x90>)
   21f1a:	f7ff f99f 	bl	2125c <z_spin_unlock_valid>
   21f1e:	b968      	cbnz	r0, 21f3c <work_timeout+0x84>
   21f20:	4a0a      	ldr	r2, [pc, #40]	; (21f4c <work_timeout+0x94>)
   21f22:	490e      	ldr	r1, [pc, #56]	; (21f5c <work_timeout+0xa4>)
   21f24:	480b      	ldr	r0, [pc, #44]	; (21f54 <work_timeout+0x9c>)
   21f26:	23ac      	movs	r3, #172	; 0xac
   21f28:	f005 fae5 	bl	274f6 <printk>
   21f2c:	4906      	ldr	r1, [pc, #24]	; (21f48 <work_timeout+0x90>)
   21f2e:	480c      	ldr	r0, [pc, #48]	; (21f60 <work_timeout+0xa8>)
   21f30:	f005 fae1 	bl	274f6 <printk>
   21f34:	4805      	ldr	r0, [pc, #20]	; (21f4c <work_timeout+0x94>)
   21f36:	21ac      	movs	r1, #172	; 0xac
   21f38:	f005 fd82 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   21f3c:	f385 8811 	msr	BASEPRI, r5
   21f40:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   21f44:	b003      	add	sp, #12
   21f46:	bd30      	pop	{r4, r5, pc}
   21f48:	20003414 	.word	0x20003414
   21f4c:	0002dd93 	.word	0x0002dd93
   21f50:	0002dde5 	.word	0x0002dde5
   21f54:	0002dcd3 	.word	0x0002dcd3
   21f58:	0002ddfa 	.word	0x0002ddfa
   21f5c:	0002ddb9 	.word	0x0002ddb9
   21f60:	0002ddd0 	.word	0x0002ddd0

00021f64 <k_work_init>:
{
   21f64:	b538      	push	{r3, r4, r5, lr}
   21f66:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   21f68:	4604      	mov	r4, r0
   21f6a:	b948      	cbnz	r0, 21f80 <k_work_init+0x1c>
   21f6c:	490d      	ldr	r1, [pc, #52]	; (21fa4 <k_work_init+0x40>)
   21f6e:	480e      	ldr	r0, [pc, #56]	; (21fa8 <k_work_init+0x44>)
   21f70:	4a0e      	ldr	r2, [pc, #56]	; (21fac <k_work_init+0x48>)
   21f72:	2389      	movs	r3, #137	; 0x89
   21f74:	f005 fabf 	bl	274f6 <printk>
   21f78:	480c      	ldr	r0, [pc, #48]	; (21fac <k_work_init+0x48>)
   21f7a:	2189      	movs	r1, #137	; 0x89
   21f7c:	f005 fd60 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   21f80:	b94d      	cbnz	r5, 21f96 <k_work_init+0x32>
   21f82:	490b      	ldr	r1, [pc, #44]	; (21fb0 <k_work_init+0x4c>)
   21f84:	4808      	ldr	r0, [pc, #32]	; (21fa8 <k_work_init+0x44>)
   21f86:	4a09      	ldr	r2, [pc, #36]	; (21fac <k_work_init+0x48>)
   21f88:	238a      	movs	r3, #138	; 0x8a
   21f8a:	f005 fab4 	bl	274f6 <printk>
   21f8e:	4807      	ldr	r0, [pc, #28]	; (21fac <k_work_init+0x48>)
   21f90:	218a      	movs	r1, #138	; 0x8a
   21f92:	f005 fd55 	bl	27a40 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21f96:	2210      	movs	r2, #16
   21f98:	2100      	movs	r1, #0
   21f9a:	4620      	mov	r0, r4
   21f9c:	f007 fd68 	bl	29a70 <memset>
   21fa0:	6065      	str	r5, [r4, #4]
}
   21fa2:	bd38      	pop	{r3, r4, r5, pc}
   21fa4:	00031ce7 	.word	0x00031ce7
   21fa8:	0002dcd3 	.word	0x0002dcd3
   21fac:	00031c10 	.word	0x00031c10
   21fb0:	00031c31 	.word	0x00031c31

00021fb4 <k_work_submit_to_queue>:
{
   21fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   21fb6:	460c      	mov	r4, r1
{
   21fb8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   21fba:	b959      	cbnz	r1, 21fd4 <k_work_submit_to_queue+0x20>
   21fbc:	4926      	ldr	r1, [pc, #152]	; (22058 <k_work_submit_to_queue+0xa4>)
   21fbe:	4827      	ldr	r0, [pc, #156]	; (2205c <k_work_submit_to_queue+0xa8>)
   21fc0:	4a27      	ldr	r2, [pc, #156]	; (22060 <k_work_submit_to_queue+0xac>)
   21fc2:	f240 1369 	movw	r3, #361	; 0x169
   21fc6:	f005 fa96 	bl	274f6 <printk>
   21fca:	4825      	ldr	r0, [pc, #148]	; (22060 <k_work_submit_to_queue+0xac>)
   21fcc:	f240 1169 	movw	r1, #361	; 0x169
   21fd0:	f005 fd36 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   21fd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21fd8:	f3ef 8511 	mrs	r5, BASEPRI
   21fdc:	f383 8811 	msr	BASEPRI, r3
   21fe0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fe4:	481f      	ldr	r0, [pc, #124]	; (22064 <k_work_submit_to_queue+0xb0>)
   21fe6:	f7ff f92b 	bl	21240 <z_spin_lock_valid>
   21fea:	b968      	cbnz	r0, 22008 <k_work_submit_to_queue+0x54>
   21fec:	4a1e      	ldr	r2, [pc, #120]	; (22068 <k_work_submit_to_queue+0xb4>)
   21fee:	491f      	ldr	r1, [pc, #124]	; (2206c <k_work_submit_to_queue+0xb8>)
   21ff0:	481a      	ldr	r0, [pc, #104]	; (2205c <k_work_submit_to_queue+0xa8>)
   21ff2:	2381      	movs	r3, #129	; 0x81
   21ff4:	f005 fa7f 	bl	274f6 <printk>
   21ff8:	491a      	ldr	r1, [pc, #104]	; (22064 <k_work_submit_to_queue+0xb0>)
   21ffa:	481d      	ldr	r0, [pc, #116]	; (22070 <k_work_submit_to_queue+0xbc>)
   21ffc:	f005 fa7b 	bl	274f6 <printk>
   22000:	4819      	ldr	r0, [pc, #100]	; (22068 <k_work_submit_to_queue+0xb4>)
   22002:	2181      	movs	r1, #129	; 0x81
   22004:	f005 fd1c 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22008:	4816      	ldr	r0, [pc, #88]	; (22064 <k_work_submit_to_queue+0xb0>)
   2200a:	f7ff f937 	bl	2127c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   2200e:	4620      	mov	r0, r4
   22010:	a901      	add	r1, sp, #4
   22012:	f7ff feed 	bl	21df0 <submit_to_queue_locked>
   22016:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22018:	4812      	ldr	r0, [pc, #72]	; (22064 <k_work_submit_to_queue+0xb0>)
   2201a:	f7ff f91f 	bl	2125c <z_spin_unlock_valid>
   2201e:	b968      	cbnz	r0, 2203c <k_work_submit_to_queue+0x88>
   22020:	4a11      	ldr	r2, [pc, #68]	; (22068 <k_work_submit_to_queue+0xb4>)
   22022:	4914      	ldr	r1, [pc, #80]	; (22074 <k_work_submit_to_queue+0xc0>)
   22024:	480d      	ldr	r0, [pc, #52]	; (2205c <k_work_submit_to_queue+0xa8>)
   22026:	23ac      	movs	r3, #172	; 0xac
   22028:	f005 fa65 	bl	274f6 <printk>
   2202c:	490d      	ldr	r1, [pc, #52]	; (22064 <k_work_submit_to_queue+0xb0>)
   2202e:	4812      	ldr	r0, [pc, #72]	; (22078 <k_work_submit_to_queue+0xc4>)
   22030:	f005 fa61 	bl	274f6 <printk>
   22034:	480c      	ldr	r0, [pc, #48]	; (22068 <k_work_submit_to_queue+0xb4>)
   22036:	21ac      	movs	r1, #172	; 0xac
   22038:	f005 fd02 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   2203c:	f385 8811 	msr	BASEPRI, r5
   22040:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   22044:	2c00      	cmp	r4, #0
   22046:	dd04      	ble.n	22052 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   22048:	f001 fbbc 	bl	237c4 <z_impl_k_is_preempt_thread>
   2204c:	b108      	cbz	r0, 22052 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   2204e:	f001 fa27 	bl	234a0 <z_impl_k_yield>
}
   22052:	4620      	mov	r0, r4
   22054:	b003      	add	sp, #12
   22056:	bd30      	pop	{r4, r5, pc}
   22058:	00031ce7 	.word	0x00031ce7
   2205c:	0002dcd3 	.word	0x0002dcd3
   22060:	00031c10 	.word	0x00031c10
   22064:	20003414 	.word	0x20003414
   22068:	0002dd93 	.word	0x0002dd93
   2206c:	0002dde5 	.word	0x0002dde5
   22070:	0002ddfa 	.word	0x0002ddfa
   22074:	0002ddb9 	.word	0x0002ddb9
   22078:	0002ddd0 	.word	0x0002ddd0

0002207c <k_work_submit>:
{
   2207c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2207e:	4801      	ldr	r0, [pc, #4]	; (22084 <k_work_submit+0x8>)
   22080:	f7ff bf98 	b.w	21fb4 <k_work_submit_to_queue>
   22084:	200020a8 	.word	0x200020a8

00022088 <k_work_queue_start>:
{
   22088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2208c:	b088      	sub	sp, #32
   2208e:	460e      	mov	r6, r1
   22090:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22092:	4617      	mov	r7, r2
   22094:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   22096:	4604      	mov	r4, r0
   22098:	b958      	cbnz	r0, 220b2 <k_work_queue_start+0x2a>
   2209a:	492e      	ldr	r1, [pc, #184]	; (22154 <k_work_queue_start+0xcc>)
   2209c:	482e      	ldr	r0, [pc, #184]	; (22158 <k_work_queue_start+0xd0>)
   2209e:	4a2f      	ldr	r2, [pc, #188]	; (2215c <k_work_queue_start+0xd4>)
   220a0:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   220a4:	f005 fa27 	bl	274f6 <printk>
   220a8:	482c      	ldr	r0, [pc, #176]	; (2215c <k_work_queue_start+0xd4>)
   220aa:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   220ae:	f005 fcc7 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   220b2:	b95e      	cbnz	r6, 220cc <k_work_queue_start+0x44>
   220b4:	492a      	ldr	r1, [pc, #168]	; (22160 <k_work_queue_start+0xd8>)
   220b6:	4828      	ldr	r0, [pc, #160]	; (22158 <k_work_queue_start+0xd0>)
   220b8:	4a28      	ldr	r2, [pc, #160]	; (2215c <k_work_queue_start+0xd4>)
   220ba:	f240 23a1 	movw	r3, #673	; 0x2a1
   220be:	f005 fa1a 	bl	274f6 <printk>
   220c2:	4826      	ldr	r0, [pc, #152]	; (2215c <k_work_queue_start+0xd4>)
   220c4:	f240 21a1 	movw	r1, #673	; 0x2a1
   220c8:	f005 fcba 	bl	27a40 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   220cc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   220d0:	07db      	lsls	r3, r3, #31
   220d2:	d50b      	bpl.n	220ec <k_work_queue_start+0x64>
   220d4:	4923      	ldr	r1, [pc, #140]	; (22164 <k_work_queue_start+0xdc>)
   220d6:	4820      	ldr	r0, [pc, #128]	; (22158 <k_work_queue_start+0xd0>)
   220d8:	4a20      	ldr	r2, [pc, #128]	; (2215c <k_work_queue_start+0xd4>)
   220da:	f240 23a2 	movw	r3, #674	; 0x2a2
   220de:	f005 fa0a 	bl	274f6 <printk>
   220e2:	481e      	ldr	r0, [pc, #120]	; (2215c <k_work_queue_start+0xd4>)
   220e4:	f240 21a2 	movw	r1, #674	; 0x2a2
   220e8:	f005 fcaa 	bl	27a40 <assert_post_action>
	list->head = NULL;
   220ec:	2300      	movs	r3, #0
	list->tail = NULL;
   220ee:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   220f2:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   220f6:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   220fa:	f104 0390 	add.w	r3, r4, #144	; 0x90
   220fe:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   22102:	b32d      	cbz	r5, 22150 <k_work_queue_start+0xc8>
   22104:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   22106:	2b00      	cmp	r3, #0
   22108:	f240 1101 	movw	r1, #257	; 0x101
   2210c:	bf08      	it	eq
   2210e:	2101      	moveq	r1, #1
	*flagp = flags;
   22110:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22114:	f04f 32ff 	mov.w	r2, #4294967295
   22118:	f04f 33ff 	mov.w	r3, #4294967295
   2211c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22120:	2200      	movs	r2, #0
   22122:	e9cd 8203 	strd	r8, r2, [sp, #12]
   22126:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2212a:	4b0f      	ldr	r3, [pc, #60]	; (22168 <k_work_queue_start+0xe0>)
   2212c:	9400      	str	r4, [sp, #0]
   2212e:	463a      	mov	r2, r7
   22130:	4631      	mov	r1, r6
   22132:	4620      	mov	r0, r4
   22134:	f7fe ffa6 	bl	21084 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22138:	b125      	cbz	r5, 22144 <k_work_queue_start+0xbc>
   2213a:	6829      	ldr	r1, [r5, #0]
   2213c:	b111      	cbz	r1, 22144 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   2213e:	4620      	mov	r0, r4
   22140:	f00a fa58 	bl	2c5f4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22144:	4620      	mov	r0, r4
}
   22146:	b008      	add	sp, #32
   22148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2214c:	f00a ba57 	b.w	2c5fe <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22150:	2101      	movs	r1, #1
   22152:	e7dd      	b.n	22110 <k_work_queue_start+0x88>
   22154:	00031ca6 	.word	0x00031ca6
   22158:	0002dcd3 	.word	0x0002dcd3
   2215c:	00031c10 	.word	0x00031c10
   22160:	00031cac 	.word	0x00031cac
   22164:	00031cb2 	.word	0x00031cb2
   22168:	00021b8d 	.word	0x00021b8d

0002216c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   2216c:	b538      	push	{r3, r4, r5, lr}
   2216e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   22170:	4604      	mov	r4, r0
   22172:	b958      	cbnz	r0, 2218c <k_work_init_delayable+0x20>
   22174:	4911      	ldr	r1, [pc, #68]	; (221bc <k_work_init_delayable+0x50>)
   22176:	4812      	ldr	r0, [pc, #72]	; (221c0 <k_work_init_delayable+0x54>)
   22178:	4a12      	ldr	r2, [pc, #72]	; (221c4 <k_work_init_delayable+0x58>)
   2217a:	f44f 7346 	mov.w	r3, #792	; 0x318
   2217e:	f005 f9ba 	bl	274f6 <printk>
   22182:	4810      	ldr	r0, [pc, #64]	; (221c4 <k_work_init_delayable+0x58>)
   22184:	f44f 7146 	mov.w	r1, #792	; 0x318
   22188:	f005 fc5a 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   2218c:	b95d      	cbnz	r5, 221a6 <k_work_init_delayable+0x3a>
   2218e:	490e      	ldr	r1, [pc, #56]	; (221c8 <k_work_init_delayable+0x5c>)
   22190:	480b      	ldr	r0, [pc, #44]	; (221c0 <k_work_init_delayable+0x54>)
   22192:	4a0c      	ldr	r2, [pc, #48]	; (221c4 <k_work_init_delayable+0x58>)
   22194:	f240 3319 	movw	r3, #793	; 0x319
   22198:	f005 f9ad 	bl	274f6 <printk>
   2219c:	4809      	ldr	r0, [pc, #36]	; (221c4 <k_work_init_delayable+0x58>)
   2219e:	f240 3119 	movw	r1, #793	; 0x319
   221a2:	f005 fc4d 	bl	27a40 <assert_post_action>

	*dwork = (struct k_work_delayable){
   221a6:	2230      	movs	r2, #48	; 0x30
   221a8:	2100      	movs	r1, #0
   221aa:	4620      	mov	r0, r4
   221ac:	f007 fc60 	bl	29a70 <memset>
   221b0:	f44f 7380 	mov.w	r3, #256	; 0x100
   221b4:	6065      	str	r5, [r4, #4]
   221b6:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   221b8:	bd38      	pop	{r3, r4, r5, pc}
   221ba:	bf00      	nop
   221bc:	00031ce6 	.word	0x00031ce6
   221c0:	0002dcd3 	.word	0x0002dcd3
   221c4:	00031c10 	.word	0x00031c10
   221c8:	00031c31 	.word	0x00031c31

000221cc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   221cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   221ce:	4616      	mov	r6, r2
   221d0:	9001      	str	r0, [sp, #4]
   221d2:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   221d4:	460c      	mov	r4, r1
   221d6:	b959      	cbnz	r1, 221f0 <k_work_schedule_for_queue+0x24>
   221d8:	492e      	ldr	r1, [pc, #184]	; (22294 <k_work_schedule_for_queue+0xc8>)
   221da:	482f      	ldr	r0, [pc, #188]	; (22298 <k_work_schedule_for_queue+0xcc>)
   221dc:	4a2f      	ldr	r2, [pc, #188]	; (2229c <k_work_schedule_for_queue+0xd0>)
   221de:	f240 338f 	movw	r3, #911	; 0x38f
   221e2:	f005 f988 	bl	274f6 <printk>
   221e6:	482d      	ldr	r0, [pc, #180]	; (2229c <k_work_schedule_for_queue+0xd0>)
   221e8:	f240 318f 	movw	r1, #911	; 0x38f
   221ec:	f005 fc28 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   221f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   221f4:	f3ef 8511 	mrs	r5, BASEPRI
   221f8:	f383 8811 	msr	BASEPRI, r3
   221fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22200:	4827      	ldr	r0, [pc, #156]	; (222a0 <k_work_schedule_for_queue+0xd4>)
   22202:	f7ff f81d 	bl	21240 <z_spin_lock_valid>
   22206:	b968      	cbnz	r0, 22224 <k_work_schedule_for_queue+0x58>
   22208:	4a26      	ldr	r2, [pc, #152]	; (222a4 <k_work_schedule_for_queue+0xd8>)
   2220a:	4927      	ldr	r1, [pc, #156]	; (222a8 <k_work_schedule_for_queue+0xdc>)
   2220c:	4822      	ldr	r0, [pc, #136]	; (22298 <k_work_schedule_for_queue+0xcc>)
   2220e:	2381      	movs	r3, #129	; 0x81
   22210:	f005 f971 	bl	274f6 <printk>
   22214:	4922      	ldr	r1, [pc, #136]	; (222a0 <k_work_schedule_for_queue+0xd4>)
   22216:	4825      	ldr	r0, [pc, #148]	; (222ac <k_work_schedule_for_queue+0xe0>)
   22218:	f005 f96d 	bl	274f6 <printk>
   2221c:	4821      	ldr	r0, [pc, #132]	; (222a4 <k_work_schedule_for_queue+0xd8>)
   2221e:	2181      	movs	r1, #129	; 0x81
   22220:	f005 fc0e 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22224:	481e      	ldr	r0, [pc, #120]	; (222a0 <k_work_schedule_for_queue+0xd4>)
   22226:	f7ff f829 	bl	2127c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2222a:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2222c:	f013 0f0e 	tst.w	r3, #14
   22230:	d12e      	bne.n	22290 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22232:	ea56 0207 	orrs.w	r2, r6, r7
   22236:	d11d      	bne.n	22274 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   22238:	4620      	mov	r0, r4
   2223a:	a901      	add	r1, sp, #4
   2223c:	f7ff fdd8 	bl	21df0 <submit_to_queue_locked>
   22240:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22242:	4817      	ldr	r0, [pc, #92]	; (222a0 <k_work_schedule_for_queue+0xd4>)
   22244:	f7ff f80a 	bl	2125c <z_spin_unlock_valid>
   22248:	b968      	cbnz	r0, 22266 <k_work_schedule_for_queue+0x9a>
   2224a:	4a16      	ldr	r2, [pc, #88]	; (222a4 <k_work_schedule_for_queue+0xd8>)
   2224c:	4918      	ldr	r1, [pc, #96]	; (222b0 <k_work_schedule_for_queue+0xe4>)
   2224e:	4812      	ldr	r0, [pc, #72]	; (22298 <k_work_schedule_for_queue+0xcc>)
   22250:	23ac      	movs	r3, #172	; 0xac
   22252:	f005 f950 	bl	274f6 <printk>
   22256:	4912      	ldr	r1, [pc, #72]	; (222a0 <k_work_schedule_for_queue+0xd4>)
   22258:	4816      	ldr	r0, [pc, #88]	; (222b4 <k_work_schedule_for_queue+0xe8>)
   2225a:	f005 f94c 	bl	274f6 <printk>
   2225e:	4811      	ldr	r0, [pc, #68]	; (222a4 <k_work_schedule_for_queue+0xd8>)
   22260:	21ac      	movs	r1, #172	; 0xac
   22262:	f005 fbed 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22266:	f385 8811 	msr	BASEPRI, r5
   2226a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2226e:	4620      	mov	r0, r4
   22270:	b003      	add	sp, #12
   22272:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   22274:	f043 0308 	orr.w	r3, r3, #8
   22278:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2227a:	9b01      	ldr	r3, [sp, #4]
   2227c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2227e:	f104 0010 	add.w	r0, r4, #16
   22282:	490d      	ldr	r1, [pc, #52]	; (222b8 <k_work_schedule_for_queue+0xec>)
   22284:	4632      	mov	r2, r6
   22286:	463b      	mov	r3, r7
   22288:	f001 fc34 	bl	23af4 <z_add_timeout>
	return ret;
   2228c:	2401      	movs	r4, #1
   2228e:	e7d8      	b.n	22242 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   22290:	2400      	movs	r4, #0
   22292:	e7d6      	b.n	22242 <k_work_schedule_for_queue+0x76>
   22294:	00031ce6 	.word	0x00031ce6
   22298:	0002dcd3 	.word	0x0002dcd3
   2229c:	00031c10 	.word	0x00031c10
   222a0:	20003414 	.word	0x20003414
   222a4:	0002dd93 	.word	0x0002dd93
   222a8:	0002dde5 	.word	0x0002dde5
   222ac:	0002ddfa 	.word	0x0002ddfa
   222b0:	0002ddb9 	.word	0x0002ddb9
   222b4:	0002ddd0 	.word	0x0002ddd0
   222b8:	00021eb9 	.word	0x00021eb9

000222bc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   222bc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   222be:	4801      	ldr	r0, [pc, #4]	; (222c4 <k_work_schedule+0x8>)
   222c0:	f7ff bf84 	b.w	221cc <k_work_schedule_for_queue>
   222c4:	200020a8 	.word	0x200020a8

000222c8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   222c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   222ca:	4616      	mov	r6, r2
   222cc:	9001      	str	r0, [sp, #4]
   222ce:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   222d0:	460c      	mov	r4, r1
   222d2:	b959      	cbnz	r1, 222ec <k_work_reschedule_for_queue+0x24>
   222d4:	492d      	ldr	r1, [pc, #180]	; (2238c <k_work_reschedule_for_queue+0xc4>)
   222d6:	482e      	ldr	r0, [pc, #184]	; (22390 <k_work_reschedule_for_queue+0xc8>)
   222d8:	4a2e      	ldr	r2, [pc, #184]	; (22394 <k_work_reschedule_for_queue+0xcc>)
   222da:	f240 33b3 	movw	r3, #947	; 0x3b3
   222de:	f005 f90a 	bl	274f6 <printk>
   222e2:	482c      	ldr	r0, [pc, #176]	; (22394 <k_work_reschedule_for_queue+0xcc>)
   222e4:	f240 31b3 	movw	r1, #947	; 0x3b3
   222e8:	f005 fbaa 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   222ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   222f0:	f3ef 8511 	mrs	r5, BASEPRI
   222f4:	f383 8811 	msr	BASEPRI, r3
   222f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222fc:	4826      	ldr	r0, [pc, #152]	; (22398 <k_work_reschedule_for_queue+0xd0>)
   222fe:	f7fe ff9f 	bl	21240 <z_spin_lock_valid>
   22302:	b968      	cbnz	r0, 22320 <k_work_reschedule_for_queue+0x58>
   22304:	4a25      	ldr	r2, [pc, #148]	; (2239c <k_work_reschedule_for_queue+0xd4>)
   22306:	4926      	ldr	r1, [pc, #152]	; (223a0 <k_work_reschedule_for_queue+0xd8>)
   22308:	4821      	ldr	r0, [pc, #132]	; (22390 <k_work_reschedule_for_queue+0xc8>)
   2230a:	2381      	movs	r3, #129	; 0x81
   2230c:	f005 f8f3 	bl	274f6 <printk>
   22310:	4921      	ldr	r1, [pc, #132]	; (22398 <k_work_reschedule_for_queue+0xd0>)
   22312:	4824      	ldr	r0, [pc, #144]	; (223a4 <k_work_reschedule_for_queue+0xdc>)
   22314:	f005 f8ef 	bl	274f6 <printk>
   22318:	4820      	ldr	r0, [pc, #128]	; (2239c <k_work_reschedule_for_queue+0xd4>)
   2231a:	2181      	movs	r1, #129	; 0x81
   2231c:	f005 fb90 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22320:	481d      	ldr	r0, [pc, #116]	; (22398 <k_work_reschedule_for_queue+0xd0>)
   22322:	f7fe ffab 	bl	2127c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   22326:	4620      	mov	r0, r4
   22328:	f00a f9be 	bl	2c6a8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2232c:	ea56 0307 	orrs.w	r3, r6, r7
   22330:	d11d      	bne.n	2236e <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   22332:	4620      	mov	r0, r4
   22334:	a901      	add	r1, sp, #4
   22336:	f7ff fd5b 	bl	21df0 <submit_to_queue_locked>
   2233a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2233c:	4816      	ldr	r0, [pc, #88]	; (22398 <k_work_reschedule_for_queue+0xd0>)
   2233e:	f7fe ff8d 	bl	2125c <z_spin_unlock_valid>
   22342:	b968      	cbnz	r0, 22360 <k_work_reschedule_for_queue+0x98>
   22344:	4a15      	ldr	r2, [pc, #84]	; (2239c <k_work_reschedule_for_queue+0xd4>)
   22346:	4918      	ldr	r1, [pc, #96]	; (223a8 <k_work_reschedule_for_queue+0xe0>)
   22348:	4811      	ldr	r0, [pc, #68]	; (22390 <k_work_reschedule_for_queue+0xc8>)
   2234a:	23ac      	movs	r3, #172	; 0xac
   2234c:	f005 f8d3 	bl	274f6 <printk>
   22350:	4911      	ldr	r1, [pc, #68]	; (22398 <k_work_reschedule_for_queue+0xd0>)
   22352:	4816      	ldr	r0, [pc, #88]	; (223ac <k_work_reschedule_for_queue+0xe4>)
   22354:	f005 f8cf 	bl	274f6 <printk>
   22358:	4810      	ldr	r0, [pc, #64]	; (2239c <k_work_reschedule_for_queue+0xd4>)
   2235a:	21ac      	movs	r1, #172	; 0xac
   2235c:	f005 fb70 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22360:	f385 8811 	msr	BASEPRI, r5
   22364:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   22368:	4620      	mov	r0, r4
   2236a:	b003      	add	sp, #12
   2236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2236e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22370:	490f      	ldr	r1, [pc, #60]	; (223b0 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   22372:	f043 0308 	orr.w	r3, r3, #8
   22376:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   22378:	9b01      	ldr	r3, [sp, #4]
   2237a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2237c:	f104 0010 	add.w	r0, r4, #16
   22380:	4632      	mov	r2, r6
   22382:	463b      	mov	r3, r7
   22384:	f001 fbb6 	bl	23af4 <z_add_timeout>
	return ret;
   22388:	2401      	movs	r4, #1
   2238a:	e7d7      	b.n	2233c <k_work_reschedule_for_queue+0x74>
   2238c:	00031ce6 	.word	0x00031ce6
   22390:	0002dcd3 	.word	0x0002dcd3
   22394:	00031c10 	.word	0x00031c10
   22398:	20003414 	.word	0x20003414
   2239c:	0002dd93 	.word	0x0002dd93
   223a0:	0002dde5 	.word	0x0002dde5
   223a4:	0002ddfa 	.word	0x0002ddfa
   223a8:	0002ddb9 	.word	0x0002ddb9
   223ac:	0002ddd0 	.word	0x0002ddd0
   223b0:	00021eb9 	.word	0x00021eb9

000223b4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   223b4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   223b6:	4801      	ldr	r0, [pc, #4]	; (223bc <k_work_reschedule+0x8>)
   223b8:	f7ff bf86 	b.w	222c8 <k_work_reschedule_for_queue>
   223bc:	200020a8 	.word	0x200020a8

000223c0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   223c0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   223c2:	4604      	mov	r4, r0
   223c4:	b958      	cbnz	r0, 223de <k_work_cancel_delayable+0x1e>
   223c6:	4924      	ldr	r1, [pc, #144]	; (22458 <k_work_cancel_delayable+0x98>)
   223c8:	4824      	ldr	r0, [pc, #144]	; (2245c <k_work_cancel_delayable+0x9c>)
   223ca:	4a25      	ldr	r2, [pc, #148]	; (22460 <k_work_cancel_delayable+0xa0>)
   223cc:	f240 33d5 	movw	r3, #981	; 0x3d5
   223d0:	f005 f891 	bl	274f6 <printk>
   223d4:	4822      	ldr	r0, [pc, #136]	; (22460 <k_work_cancel_delayable+0xa0>)
   223d6:	f240 31d5 	movw	r1, #981	; 0x3d5
   223da:	f005 fb31 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   223de:	f04f 0340 	mov.w	r3, #64	; 0x40
   223e2:	f3ef 8511 	mrs	r5, BASEPRI
   223e6:	f383 8811 	msr	BASEPRI, r3
   223ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223ee:	481d      	ldr	r0, [pc, #116]	; (22464 <k_work_cancel_delayable+0xa4>)
   223f0:	f7fe ff26 	bl	21240 <z_spin_lock_valid>
   223f4:	b968      	cbnz	r0, 22412 <k_work_cancel_delayable+0x52>
   223f6:	4a1c      	ldr	r2, [pc, #112]	; (22468 <k_work_cancel_delayable+0xa8>)
   223f8:	491c      	ldr	r1, [pc, #112]	; (2246c <k_work_cancel_delayable+0xac>)
   223fa:	4818      	ldr	r0, [pc, #96]	; (2245c <k_work_cancel_delayable+0x9c>)
   223fc:	2381      	movs	r3, #129	; 0x81
   223fe:	f005 f87a 	bl	274f6 <printk>
   22402:	4918      	ldr	r1, [pc, #96]	; (22464 <k_work_cancel_delayable+0xa4>)
   22404:	481a      	ldr	r0, [pc, #104]	; (22470 <k_work_cancel_delayable+0xb0>)
   22406:	f005 f876 	bl	274f6 <printk>
   2240a:	4817      	ldr	r0, [pc, #92]	; (22468 <k_work_cancel_delayable+0xa8>)
   2240c:	2181      	movs	r1, #129	; 0x81
   2240e:	f005 fb17 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22412:	4814      	ldr	r0, [pc, #80]	; (22464 <k_work_cancel_delayable+0xa4>)
   22414:	f7fe ff32 	bl	2127c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   22418:	4620      	mov	r0, r4
   2241a:	f00a f945 	bl	2c6a8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2241e:	4620      	mov	r0, r4
   22420:	f00a f950 	bl	2c6c4 <cancel_async_locked>
   22424:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22426:	480f      	ldr	r0, [pc, #60]	; (22464 <k_work_cancel_delayable+0xa4>)
   22428:	f7fe ff18 	bl	2125c <z_spin_unlock_valid>
   2242c:	b968      	cbnz	r0, 2244a <k_work_cancel_delayable+0x8a>
   2242e:	4a0e      	ldr	r2, [pc, #56]	; (22468 <k_work_cancel_delayable+0xa8>)
   22430:	4910      	ldr	r1, [pc, #64]	; (22474 <k_work_cancel_delayable+0xb4>)
   22432:	480a      	ldr	r0, [pc, #40]	; (2245c <k_work_cancel_delayable+0x9c>)
   22434:	23ac      	movs	r3, #172	; 0xac
   22436:	f005 f85e 	bl	274f6 <printk>
   2243a:	490a      	ldr	r1, [pc, #40]	; (22464 <k_work_cancel_delayable+0xa4>)
   2243c:	480e      	ldr	r0, [pc, #56]	; (22478 <k_work_cancel_delayable+0xb8>)
   2243e:	f005 f85a 	bl	274f6 <printk>
   22442:	4809      	ldr	r0, [pc, #36]	; (22468 <k_work_cancel_delayable+0xa8>)
   22444:	21ac      	movs	r1, #172	; 0xac
   22446:	f005 fafb 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   2244a:	f385 8811 	msr	BASEPRI, r5
   2244e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   22452:	4620      	mov	r0, r4
   22454:	bd38      	pop	{r3, r4, r5, pc}
   22456:	bf00      	nop
   22458:	00031ce6 	.word	0x00031ce6
   2245c:	0002dcd3 	.word	0x0002dcd3
   22460:	00031c10 	.word	0x00031c10
   22464:	20003414 	.word	0x20003414
   22468:	0002dd93 	.word	0x0002dd93
   2246c:	0002dde5 	.word	0x0002dde5
   22470:	0002ddfa 	.word	0x0002ddfa
   22474:	0002ddb9 	.word	0x0002ddb9
   22478:	0002ddd0 	.word	0x0002ddd0

0002247c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22480:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   22482:	4605      	mov	r5, r0
   22484:	b958      	cbnz	r0, 2249e <k_work_cancel_delayable_sync+0x22>
   22486:	493f      	ldr	r1, [pc, #252]	; (22584 <k_work_cancel_delayable_sync+0x108>)
   22488:	483f      	ldr	r0, [pc, #252]	; (22588 <k_work_cancel_delayable_sync+0x10c>)
   2248a:	4a40      	ldr	r2, [pc, #256]	; (2258c <k_work_cancel_delayable_sync+0x110>)
   2248c:	f240 33e6 	movw	r3, #998	; 0x3e6
   22490:	f005 f831 	bl	274f6 <printk>
   22494:	483d      	ldr	r0, [pc, #244]	; (2258c <k_work_cancel_delayable_sync+0x110>)
   22496:	f240 31e6 	movw	r1, #998	; 0x3e6
   2249a:	f005 fad1 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   2249e:	b95e      	cbnz	r6, 224b8 <k_work_cancel_delayable_sync+0x3c>
   224a0:	493b      	ldr	r1, [pc, #236]	; (22590 <k_work_cancel_delayable_sync+0x114>)
   224a2:	4839      	ldr	r0, [pc, #228]	; (22588 <k_work_cancel_delayable_sync+0x10c>)
   224a4:	4a39      	ldr	r2, [pc, #228]	; (2258c <k_work_cancel_delayable_sync+0x110>)
   224a6:	f240 33e7 	movw	r3, #999	; 0x3e7
   224aa:	f005 f824 	bl	274f6 <printk>
   224ae:	4837      	ldr	r0, [pc, #220]	; (2258c <k_work_cancel_delayable_sync+0x110>)
   224b0:	f240 31e7 	movw	r1, #999	; 0x3e7
   224b4:	f005 fac4 	bl	27a40 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   224b8:	f00a f896 	bl	2c5e8 <k_is_in_isr>
   224bc:	b158      	cbz	r0, 224d6 <k_work_cancel_delayable_sync+0x5a>
   224be:	4935      	ldr	r1, [pc, #212]	; (22594 <k_work_cancel_delayable_sync+0x118>)
   224c0:	4831      	ldr	r0, [pc, #196]	; (22588 <k_work_cancel_delayable_sync+0x10c>)
   224c2:	4a32      	ldr	r2, [pc, #200]	; (2258c <k_work_cancel_delayable_sync+0x110>)
   224c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   224c8:	f005 f815 	bl	274f6 <printk>
   224cc:	482f      	ldr	r0, [pc, #188]	; (2258c <k_work_cancel_delayable_sync+0x110>)
   224ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   224d2:	f005 fab5 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   224d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   224da:	f3ef 8811 	mrs	r8, BASEPRI
   224de:	f383 8811 	msr	BASEPRI, r3
   224e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224e6:	482c      	ldr	r0, [pc, #176]	; (22598 <k_work_cancel_delayable_sync+0x11c>)
   224e8:	f7fe feaa 	bl	21240 <z_spin_lock_valid>
   224ec:	b968      	cbnz	r0, 2250a <k_work_cancel_delayable_sync+0x8e>
   224ee:	4a2b      	ldr	r2, [pc, #172]	; (2259c <k_work_cancel_delayable_sync+0x120>)
   224f0:	492b      	ldr	r1, [pc, #172]	; (225a0 <k_work_cancel_delayable_sync+0x124>)
   224f2:	4825      	ldr	r0, [pc, #148]	; (22588 <k_work_cancel_delayable_sync+0x10c>)
   224f4:	2381      	movs	r3, #129	; 0x81
   224f6:	f004 fffe 	bl	274f6 <printk>
   224fa:	4927      	ldr	r1, [pc, #156]	; (22598 <k_work_cancel_delayable_sync+0x11c>)
   224fc:	4829      	ldr	r0, [pc, #164]	; (225a4 <k_work_cancel_delayable_sync+0x128>)
   224fe:	f004 fffa 	bl	274f6 <printk>
   22502:	4826      	ldr	r0, [pc, #152]	; (2259c <k_work_cancel_delayable_sync+0x120>)
   22504:	2181      	movs	r1, #129	; 0x81
   22506:	f005 fa9b 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2250a:	4823      	ldr	r0, [pc, #140]	; (22598 <k_work_cancel_delayable_sync+0x11c>)
   2250c:	f7fe feb6 	bl	2127c <z_spin_lock_set_owner>
   22510:	f3bf 8f5b 	dmb	ish
   22514:	68ec      	ldr	r4, [r5, #12]
   22516:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2251a:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2251e:	2c00      	cmp	r4, #0
   22520:	bf14      	ite	ne
   22522:	2701      	movne	r7, #1
   22524:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   22526:	d00a      	beq.n	2253e <k_work_cancel_delayable_sync+0xc2>
	(void)unschedule_locked(dwork);
   22528:	4628      	mov	r0, r5
   2252a:	f00a f8bd 	bl	2c6a8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2252e:	4628      	mov	r0, r5
   22530:	f00a f8c8 	bl	2c6c4 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   22534:	4631      	mov	r1, r6
   22536:	4628      	mov	r0, r5
   22538:	f7ff fc3c 	bl	21db4 <cancel_sync_locked>
   2253c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2253e:	4816      	ldr	r0, [pc, #88]	; (22598 <k_work_cancel_delayable_sync+0x11c>)
   22540:	f7fe fe8c 	bl	2125c <z_spin_unlock_valid>
   22544:	b968      	cbnz	r0, 22562 <k_work_cancel_delayable_sync+0xe6>
   22546:	4a15      	ldr	r2, [pc, #84]	; (2259c <k_work_cancel_delayable_sync+0x120>)
   22548:	4917      	ldr	r1, [pc, #92]	; (225a8 <k_work_cancel_delayable_sync+0x12c>)
   2254a:	480f      	ldr	r0, [pc, #60]	; (22588 <k_work_cancel_delayable_sync+0x10c>)
   2254c:	23ac      	movs	r3, #172	; 0xac
   2254e:	f004 ffd2 	bl	274f6 <printk>
   22552:	4911      	ldr	r1, [pc, #68]	; (22598 <k_work_cancel_delayable_sync+0x11c>)
   22554:	4815      	ldr	r0, [pc, #84]	; (225ac <k_work_cancel_delayable_sync+0x130>)
   22556:	f004 ffce 	bl	274f6 <printk>
   2255a:	4810      	ldr	r0, [pc, #64]	; (2259c <k_work_cancel_delayable_sync+0x120>)
   2255c:	21ac      	movs	r1, #172	; 0xac
   2255e:	f005 fa6f 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22562:	f388 8811 	msr	BASEPRI, r8
   22566:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2256a:	b13c      	cbz	r4, 2257c <k_work_cancel_delayable_sync+0x100>
	return z_impl_k_sem_take(sem, timeout);
   2256c:	f04f 32ff 	mov.w	r2, #4294967295
   22570:	f04f 33ff 	mov.w	r3, #4294967295
   22574:	f106 0008 	add.w	r0, r6, #8
   22578:	f7ff fa24 	bl	219c4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2257c:	4638      	mov	r0, r7
   2257e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22582:	bf00      	nop
   22584:	00031ce6 	.word	0x00031ce6
   22588:	0002dcd3 	.word	0x0002dcd3
   2258c:	00031c10 	.word	0x00031c10
   22590:	00031c92 	.word	0x00031c92
   22594:	0002fefb 	.word	0x0002fefb
   22598:	20003414 	.word	0x20003414
   2259c:	0002dd93 	.word	0x0002dd93
   225a0:	0002dde5 	.word	0x0002dde5
   225a4:	0002ddfa 	.word	0x0002ddfa
   225a8:	0002ddb9 	.word	0x0002ddb9
   225ac:	0002ddd0 	.word	0x0002ddd0

000225b0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   225b0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   225b2:	4c08      	ldr	r4, [pc, #32]	; (225d4 <z_reset_time_slice+0x24>)
   225b4:	6823      	ldr	r3, [r4, #0]
   225b6:	b15b      	cbz	r3, 225d0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   225b8:	f7f1 fada 	bl	13b70 <sys_clock_elapsed>
   225bc:	4603      	mov	r3, r0
   225be:	6820      	ldr	r0, [r4, #0]
   225c0:	4a05      	ldr	r2, [pc, #20]	; (225d8 <z_reset_time_slice+0x28>)
   225c2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   225c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   225c8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   225ca:	2100      	movs	r1, #0
   225cc:	f001 bbfc 	b.w	23dc8 <z_set_timeout_expiry>
}
   225d0:	bd10      	pop	{r4, pc}
   225d2:	bf00      	nop
   225d4:	2000342c 	.word	0x2000342c
   225d8:	200033dc 	.word	0x200033dc

000225dc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   225dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225de:	4604      	mov	r4, r0
   225e0:	460d      	mov	r5, r1
	__asm__ volatile(
   225e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   225e6:	f3ef 8611 	mrs	r6, BASEPRI
   225ea:	f383 8811 	msr	BASEPRI, r3
   225ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225f2:	4823      	ldr	r0, [pc, #140]	; (22680 <k_sched_time_slice_set+0xa4>)
   225f4:	f7fe fe24 	bl	21240 <z_spin_lock_valid>
   225f8:	b968      	cbnz	r0, 22616 <k_sched_time_slice_set+0x3a>
   225fa:	4a22      	ldr	r2, [pc, #136]	; (22684 <k_sched_time_slice_set+0xa8>)
   225fc:	4922      	ldr	r1, [pc, #136]	; (22688 <k_sched_time_slice_set+0xac>)
   225fe:	4823      	ldr	r0, [pc, #140]	; (2268c <k_sched_time_slice_set+0xb0>)
   22600:	2381      	movs	r3, #129	; 0x81
   22602:	f004 ff78 	bl	274f6 <printk>
   22606:	491e      	ldr	r1, [pc, #120]	; (22680 <k_sched_time_slice_set+0xa4>)
   22608:	4821      	ldr	r0, [pc, #132]	; (22690 <k_sched_time_slice_set+0xb4>)
   2260a:	f004 ff74 	bl	274f6 <printk>
   2260e:	481d      	ldr	r0, [pc, #116]	; (22684 <k_sched_time_slice_set+0xa8>)
   22610:	2181      	movs	r1, #129	; 0x81
   22612:	f005 fa15 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22616:	481a      	ldr	r0, [pc, #104]	; (22680 <k_sched_time_slice_set+0xa4>)
   22618:	f7fe fe30 	bl	2127c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2261c:	4b1d      	ldr	r3, [pc, #116]	; (22694 <k_sched_time_slice_set+0xb8>)
   2261e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   22620:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   22624:	f240 30e7 	movw	r0, #999	; 0x3e7
   22628:	2100      	movs	r1, #0
   2262a:	611a      	str	r2, [r3, #16]
   2262c:	fbe7 0104 	umlal	r0, r1, r7, r4
   22630:	2300      	movs	r3, #0
   22632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22636:	f7dd fd63 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2263a:	2c00      	cmp	r4, #0
   2263c:	4b16      	ldr	r3, [pc, #88]	; (22698 <k_sched_time_slice_set+0xbc>)
   2263e:	dc1b      	bgt.n	22678 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   22640:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   22642:	4b16      	ldr	r3, [pc, #88]	; (2269c <k_sched_time_slice_set+0xc0>)
   22644:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   22646:	f7ff ffb3 	bl	225b0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2264a:	480d      	ldr	r0, [pc, #52]	; (22680 <k_sched_time_slice_set+0xa4>)
   2264c:	f7fe fe06 	bl	2125c <z_spin_unlock_valid>
   22650:	b968      	cbnz	r0, 2266e <k_sched_time_slice_set+0x92>
   22652:	4a0c      	ldr	r2, [pc, #48]	; (22684 <k_sched_time_slice_set+0xa8>)
   22654:	4912      	ldr	r1, [pc, #72]	; (226a0 <k_sched_time_slice_set+0xc4>)
   22656:	480d      	ldr	r0, [pc, #52]	; (2268c <k_sched_time_slice_set+0xb0>)
   22658:	23ac      	movs	r3, #172	; 0xac
   2265a:	f004 ff4c 	bl	274f6 <printk>
   2265e:	4908      	ldr	r1, [pc, #32]	; (22680 <k_sched_time_slice_set+0xa4>)
   22660:	4810      	ldr	r0, [pc, #64]	; (226a4 <k_sched_time_slice_set+0xc8>)
   22662:	f004 ff48 	bl	274f6 <printk>
   22666:	4807      	ldr	r0, [pc, #28]	; (22684 <k_sched_time_slice_set+0xa8>)
   22668:	21ac      	movs	r1, #172	; 0xac
   2266a:	f005 f9e9 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   2266e:	f386 8811 	msr	BASEPRI, r6
   22672:	f3bf 8f6f 	isb	sy
	}
}
   22676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   22678:	2802      	cmp	r0, #2
   2267a:	bfb8      	it	lt
   2267c:	2002      	movlt	r0, #2
   2267e:	e7df      	b.n	22640 <k_sched_time_slice_set+0x64>
   22680:	20003424 	.word	0x20003424
   22684:	0002dd93 	.word	0x0002dd93
   22688:	0002dde5 	.word	0x0002dde5
   2268c:	0002dcd3 	.word	0x0002dcd3
   22690:	0002ddfa 	.word	0x0002ddfa
   22694:	200033dc 	.word	0x200033dc
   22698:	2000342c 	.word	0x2000342c
   2269c:	20003428 	.word	0x20003428
   226a0:	0002ddb9 	.word	0x0002ddb9
   226a4:	0002ddd0 	.word	0x0002ddd0

000226a8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   226a8:	b538      	push	{r3, r4, r5, lr}
   226aa:	4604      	mov	r4, r0
	__asm__ volatile(
   226ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   226b0:	f3ef 8511 	mrs	r5, BASEPRI
   226b4:	f383 8811 	msr	BASEPRI, r3
   226b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226bc:	4817      	ldr	r0, [pc, #92]	; (2271c <z_unpend_thread_no_timeout+0x74>)
   226be:	f7fe fdbf 	bl	21240 <z_spin_lock_valid>
   226c2:	b968      	cbnz	r0, 226e0 <z_unpend_thread_no_timeout+0x38>
   226c4:	4a16      	ldr	r2, [pc, #88]	; (22720 <z_unpend_thread_no_timeout+0x78>)
   226c6:	4917      	ldr	r1, [pc, #92]	; (22724 <z_unpend_thread_no_timeout+0x7c>)
   226c8:	4817      	ldr	r0, [pc, #92]	; (22728 <z_unpend_thread_no_timeout+0x80>)
   226ca:	2381      	movs	r3, #129	; 0x81
   226cc:	f004 ff13 	bl	274f6 <printk>
   226d0:	4912      	ldr	r1, [pc, #72]	; (2271c <z_unpend_thread_no_timeout+0x74>)
   226d2:	4816      	ldr	r0, [pc, #88]	; (2272c <z_unpend_thread_no_timeout+0x84>)
   226d4:	f004 ff0f 	bl	274f6 <printk>
   226d8:	4811      	ldr	r0, [pc, #68]	; (22720 <z_unpend_thread_no_timeout+0x78>)
   226da:	2181      	movs	r1, #129	; 0x81
   226dc:	f005 f9b0 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   226e0:	480e      	ldr	r0, [pc, #56]	; (2271c <z_unpend_thread_no_timeout+0x74>)
   226e2:	f7fe fdcb 	bl	2127c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   226e6:	4620      	mov	r0, r4
   226e8:	f000 f900 	bl	228ec <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226ec:	480b      	ldr	r0, [pc, #44]	; (2271c <z_unpend_thread_no_timeout+0x74>)
   226ee:	f7fe fdb5 	bl	2125c <z_spin_unlock_valid>
   226f2:	b968      	cbnz	r0, 22710 <z_unpend_thread_no_timeout+0x68>
   226f4:	4a0a      	ldr	r2, [pc, #40]	; (22720 <z_unpend_thread_no_timeout+0x78>)
   226f6:	490e      	ldr	r1, [pc, #56]	; (22730 <z_unpend_thread_no_timeout+0x88>)
   226f8:	480b      	ldr	r0, [pc, #44]	; (22728 <z_unpend_thread_no_timeout+0x80>)
   226fa:	23ac      	movs	r3, #172	; 0xac
   226fc:	f004 fefb 	bl	274f6 <printk>
   22700:	4906      	ldr	r1, [pc, #24]	; (2271c <z_unpend_thread_no_timeout+0x74>)
   22702:	480c      	ldr	r0, [pc, #48]	; (22734 <z_unpend_thread_no_timeout+0x8c>)
   22704:	f004 fef7 	bl	274f6 <printk>
   22708:	4805      	ldr	r0, [pc, #20]	; (22720 <z_unpend_thread_no_timeout+0x78>)
   2270a:	21ac      	movs	r1, #172	; 0xac
   2270c:	f005 f998 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22710:	f385 8811 	msr	BASEPRI, r5
   22714:	f3bf 8f6f 	isb	sy
	}
}
   22718:	bd38      	pop	{r3, r4, r5, pc}
   2271a:	bf00      	nop
   2271c:	20003424 	.word	0x20003424
   22720:	0002dd93 	.word	0x0002dd93
   22724:	0002dde5 	.word	0x0002dde5
   22728:	0002dcd3 	.word	0x0002dcd3
   2272c:	0002ddfa 	.word	0x0002ddfa
   22730:	0002ddb9 	.word	0x0002ddb9
   22734:	0002ddd0 	.word	0x0002ddd0

00022738 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   22738:	b538      	push	{r3, r4, r5, lr}
   2273a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2273c:	460d      	mov	r5, r1
   2273e:	b9e9      	cbnz	r1, 2277c <z_reschedule+0x44>
   22740:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   22744:	b9d3      	cbnz	r3, 2277c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   22746:	4b19      	ldr	r3, [pc, #100]	; (227ac <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   22748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2274a:	689b      	ldr	r3, [r3, #8]
   2274c:	429a      	cmp	r2, r3
   2274e:	d015      	beq.n	2277c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22750:	f7fe fd84 	bl	2125c <z_spin_unlock_valid>
   22754:	b968      	cbnz	r0, 22772 <z_reschedule+0x3a>
   22756:	4a16      	ldr	r2, [pc, #88]	; (227b0 <z_reschedule+0x78>)
   22758:	4916      	ldr	r1, [pc, #88]	; (227b4 <z_reschedule+0x7c>)
   2275a:	4817      	ldr	r0, [pc, #92]	; (227b8 <z_reschedule+0x80>)
   2275c:	23c3      	movs	r3, #195	; 0xc3
   2275e:	f004 feca 	bl	274f6 <printk>
   22762:	4816      	ldr	r0, [pc, #88]	; (227bc <z_reschedule+0x84>)
   22764:	4621      	mov	r1, r4
   22766:	f004 fec6 	bl	274f6 <printk>
   2276a:	4811      	ldr	r0, [pc, #68]	; (227b0 <z_reschedule+0x78>)
   2276c:	21c3      	movs	r1, #195	; 0xc3
   2276e:	f005 f967 	bl	27a40 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   22772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   22776:	2000      	movs	r0, #0
   22778:	f7f1 bd06 	b.w	14188 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2277c:	4620      	mov	r0, r4
   2277e:	f7fe fd6d 	bl	2125c <z_spin_unlock_valid>
   22782:	b968      	cbnz	r0, 227a0 <z_reschedule+0x68>
   22784:	4a0a      	ldr	r2, [pc, #40]	; (227b0 <z_reschedule+0x78>)
   22786:	490b      	ldr	r1, [pc, #44]	; (227b4 <z_reschedule+0x7c>)
   22788:	480b      	ldr	r0, [pc, #44]	; (227b8 <z_reschedule+0x80>)
   2278a:	23ac      	movs	r3, #172	; 0xac
   2278c:	f004 feb3 	bl	274f6 <printk>
   22790:	480a      	ldr	r0, [pc, #40]	; (227bc <z_reschedule+0x84>)
   22792:	4621      	mov	r1, r4
   22794:	f004 feaf 	bl	274f6 <printk>
   22798:	4805      	ldr	r0, [pc, #20]	; (227b0 <z_reschedule+0x78>)
   2279a:	21ac      	movs	r1, #172	; 0xac
   2279c:	f005 f950 	bl	27a40 <assert_post_action>
   227a0:	f385 8811 	msr	BASEPRI, r5
   227a4:	f3bf 8f6f 	isb	sy
   227a8:	bd38      	pop	{r3, r4, r5, pc}
   227aa:	bf00      	nop
   227ac:	200033dc 	.word	0x200033dc
   227b0:	0002dd93 	.word	0x0002dd93
   227b4:	0002ddb9 	.word	0x0002ddb9
   227b8:	0002dcd3 	.word	0x0002dcd3
   227bc:	0002ddd0 	.word	0x0002ddd0

000227c0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   227c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   227c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   227c6:	f3ef 8511 	mrs	r5, BASEPRI
   227ca:	f383 8811 	msr	BASEPRI, r3
   227ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227d2:	4829      	ldr	r0, [pc, #164]	; (22878 <k_sched_lock+0xb8>)
   227d4:	f7fe fd34 	bl	21240 <z_spin_lock_valid>
   227d8:	b968      	cbnz	r0, 227f6 <k_sched_lock+0x36>
   227da:	4a28      	ldr	r2, [pc, #160]	; (2287c <k_sched_lock+0xbc>)
   227dc:	4928      	ldr	r1, [pc, #160]	; (22880 <k_sched_lock+0xc0>)
   227de:	4829      	ldr	r0, [pc, #164]	; (22884 <k_sched_lock+0xc4>)
   227e0:	2381      	movs	r3, #129	; 0x81
   227e2:	f004 fe88 	bl	274f6 <printk>
   227e6:	4924      	ldr	r1, [pc, #144]	; (22878 <k_sched_lock+0xb8>)
   227e8:	4827      	ldr	r0, [pc, #156]	; (22888 <k_sched_lock+0xc8>)
   227ea:	f004 fe84 	bl	274f6 <printk>
   227ee:	4823      	ldr	r0, [pc, #140]	; (2287c <k_sched_lock+0xbc>)
   227f0:	2181      	movs	r1, #129	; 0x81
   227f2:	f005 f925 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   227f6:	4820      	ldr	r0, [pc, #128]	; (22878 <k_sched_lock+0xb8>)
   227f8:	f7fe fd40 	bl	2127c <z_spin_lock_set_owner>
   227fc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   22800:	b163      	cbz	r3, 2281c <k_sched_lock+0x5c>
   22802:	4922      	ldr	r1, [pc, #136]	; (2288c <k_sched_lock+0xcc>)
   22804:	4a22      	ldr	r2, [pc, #136]	; (22890 <k_sched_lock+0xd0>)
   22806:	481f      	ldr	r0, [pc, #124]	; (22884 <k_sched_lock+0xc4>)
   22808:	23fd      	movs	r3, #253	; 0xfd
   2280a:	f004 fe74 	bl	274f6 <printk>
   2280e:	4821      	ldr	r0, [pc, #132]	; (22894 <k_sched_lock+0xd4>)
   22810:	f004 fe71 	bl	274f6 <printk>
   22814:	481e      	ldr	r0, [pc, #120]	; (22890 <k_sched_lock+0xd0>)
   22816:	21fd      	movs	r1, #253	; 0xfd
   22818:	f005 f912 	bl	27a40 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2281c:	4c1e      	ldr	r4, [pc, #120]	; (22898 <k_sched_lock+0xd8>)
   2281e:	68a2      	ldr	r2, [r4, #8]
   22820:	7bd2      	ldrb	r2, [r2, #15]
   22822:	2a01      	cmp	r2, #1
   22824:	d10c      	bne.n	22840 <k_sched_lock+0x80>
   22826:	491d      	ldr	r1, [pc, #116]	; (2289c <k_sched_lock+0xdc>)
   22828:	4a19      	ldr	r2, [pc, #100]	; (22890 <k_sched_lock+0xd0>)
   2282a:	4816      	ldr	r0, [pc, #88]	; (22884 <k_sched_lock+0xc4>)
   2282c:	23fe      	movs	r3, #254	; 0xfe
   2282e:	f004 fe62 	bl	274f6 <printk>
   22832:	4818      	ldr	r0, [pc, #96]	; (22894 <k_sched_lock+0xd4>)
   22834:	f004 fe5f 	bl	274f6 <printk>
   22838:	4815      	ldr	r0, [pc, #84]	; (22890 <k_sched_lock+0xd0>)
   2283a:	21fe      	movs	r1, #254	; 0xfe
   2283c:	f005 f900 	bl	27a40 <assert_post_action>
	--_current->base.sched_locked;
   22840:	68a2      	ldr	r2, [r4, #8]
   22842:	7bd3      	ldrb	r3, [r2, #15]
   22844:	3b01      	subs	r3, #1
   22846:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22848:	480b      	ldr	r0, [pc, #44]	; (22878 <k_sched_lock+0xb8>)
   2284a:	f7fe fd07 	bl	2125c <z_spin_unlock_valid>
   2284e:	b968      	cbnz	r0, 2286c <k_sched_lock+0xac>
   22850:	4a0a      	ldr	r2, [pc, #40]	; (2287c <k_sched_lock+0xbc>)
   22852:	4913      	ldr	r1, [pc, #76]	; (228a0 <k_sched_lock+0xe0>)
   22854:	480b      	ldr	r0, [pc, #44]	; (22884 <k_sched_lock+0xc4>)
   22856:	23ac      	movs	r3, #172	; 0xac
   22858:	f004 fe4d 	bl	274f6 <printk>
   2285c:	4906      	ldr	r1, [pc, #24]	; (22878 <k_sched_lock+0xb8>)
   2285e:	4811      	ldr	r0, [pc, #68]	; (228a4 <k_sched_lock+0xe4>)
   22860:	f004 fe49 	bl	274f6 <printk>
   22864:	4805      	ldr	r0, [pc, #20]	; (2287c <k_sched_lock+0xbc>)
   22866:	21ac      	movs	r1, #172	; 0xac
   22868:	f005 f8ea 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   2286c:	f385 8811 	msr	BASEPRI, r5
   22870:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   22874:	bd38      	pop	{r3, r4, r5, pc}
   22876:	bf00      	nop
   22878:	20003424 	.word	0x20003424
   2287c:	0002dd93 	.word	0x0002dd93
   22880:	0002dde5 	.word	0x0002dde5
   22884:	0002dcd3 	.word	0x0002dcd3
   22888:	0002ddfa 	.word	0x0002ddfa
   2288c:	00031a33 	.word	0x00031a33
   22890:	00031b3e 	.word	0x00031b3e
   22894:	00030be6 	.word	0x00030be6
   22898:	200033dc 	.word	0x200033dc
   2289c:	00031b69 	.word	0x00031b69
   228a0:	0002ddb9 	.word	0x0002ddb9
   228a4:	0002ddd0 	.word	0x0002ddd0

000228a8 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   228a8:	4b0c      	ldr	r3, [pc, #48]	; (228dc <z_priq_dumb_remove+0x34>)
   228aa:	4299      	cmp	r1, r3
{
   228ac:	b510      	push	{r4, lr}
   228ae:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   228b0:	d10b      	bne.n	228ca <z_priq_dumb_remove+0x22>
   228b2:	490b      	ldr	r1, [pc, #44]	; (228e0 <z_priq_dumb_remove+0x38>)
   228b4:	480b      	ldr	r0, [pc, #44]	; (228e4 <z_priq_dumb_remove+0x3c>)
   228b6:	4a0c      	ldr	r2, [pc, #48]	; (228e8 <z_priq_dumb_remove+0x40>)
   228b8:	f240 33b5 	movw	r3, #949	; 0x3b5
   228bc:	f004 fe1b 	bl	274f6 <printk>
   228c0:	4809      	ldr	r0, [pc, #36]	; (228e8 <z_priq_dumb_remove+0x40>)
   228c2:	f240 31b5 	movw	r1, #949	; 0x3b5
   228c6:	f005 f8bb 	bl	27a40 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   228ca:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   228ce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   228d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   228d2:	2300      	movs	r3, #0
	node->prev = NULL;
   228d4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   228d8:	bd10      	pop	{r4, pc}
   228da:	bf00      	nop
   228dc:	20001fa8 	.word	0x20001fa8
   228e0:	00031d1d 	.word	0x00031d1d
   228e4:	0002dcd3 	.word	0x0002dcd3
   228e8:	00031cfb 	.word	0x00031cfb

000228ec <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   228ec:	6883      	ldr	r3, [r0, #8]
{
   228ee:	b510      	push	{r4, lr}
   228f0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   228f2:	b95b      	cbnz	r3, 2290c <unpend_thread_no_timeout+0x20>
   228f4:	490b      	ldr	r1, [pc, #44]	; (22924 <unpend_thread_no_timeout+0x38>)
   228f6:	480c      	ldr	r0, [pc, #48]	; (22928 <unpend_thread_no_timeout+0x3c>)
   228f8:	4a0c      	ldr	r2, [pc, #48]	; (2292c <unpend_thread_no_timeout+0x40>)
   228fa:	f240 2342 	movw	r3, #578	; 0x242
   228fe:	f004 fdfa 	bl	274f6 <printk>
   22902:	480a      	ldr	r0, [pc, #40]	; (2292c <unpend_thread_no_timeout+0x40>)
   22904:	f240 2142 	movw	r1, #578	; 0x242
   22908:	f005 f89a 	bl	27a40 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2290c:	68a0      	ldr	r0, [r4, #8]
   2290e:	4621      	mov	r1, r4
   22910:	f7ff ffca 	bl	228a8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22914:	7b63      	ldrb	r3, [r4, #13]
   22916:	f023 0302 	bic.w	r3, r3, #2
   2291a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2291c:	2300      	movs	r3, #0
   2291e:	60a3      	str	r3, [r4, #8]
}
   22920:	bd10      	pop	{r4, pc}
   22922:	bf00      	nop
   22924:	00031d3e 	.word	0x00031d3e
   22928:	0002dcd3 	.word	0x0002dcd3
   2292c:	00031cfb 	.word	0x00031cfb

00022930 <z_unpend_thread>:
{
   22930:	b538      	push	{r3, r4, r5, lr}
   22932:	4604      	mov	r4, r0
	__asm__ volatile(
   22934:	f04f 0340 	mov.w	r3, #64	; 0x40
   22938:	f3ef 8511 	mrs	r5, BASEPRI
   2293c:	f383 8811 	msr	BASEPRI, r3
   22940:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22944:	4819      	ldr	r0, [pc, #100]	; (229ac <z_unpend_thread+0x7c>)
   22946:	f7fe fc7b 	bl	21240 <z_spin_lock_valid>
   2294a:	b968      	cbnz	r0, 22968 <z_unpend_thread+0x38>
   2294c:	4a18      	ldr	r2, [pc, #96]	; (229b0 <z_unpend_thread+0x80>)
   2294e:	4919      	ldr	r1, [pc, #100]	; (229b4 <z_unpend_thread+0x84>)
   22950:	4819      	ldr	r0, [pc, #100]	; (229b8 <z_unpend_thread+0x88>)
   22952:	2381      	movs	r3, #129	; 0x81
   22954:	f004 fdcf 	bl	274f6 <printk>
   22958:	4914      	ldr	r1, [pc, #80]	; (229ac <z_unpend_thread+0x7c>)
   2295a:	4818      	ldr	r0, [pc, #96]	; (229bc <z_unpend_thread+0x8c>)
   2295c:	f004 fdcb 	bl	274f6 <printk>
   22960:	4813      	ldr	r0, [pc, #76]	; (229b0 <z_unpend_thread+0x80>)
   22962:	2181      	movs	r1, #129	; 0x81
   22964:	f005 f86c 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22968:	4810      	ldr	r0, [pc, #64]	; (229ac <z_unpend_thread+0x7c>)
   2296a:	f7fe fc87 	bl	2127c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   2296e:	4620      	mov	r0, r4
   22970:	f7ff ffbc 	bl	228ec <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22974:	480d      	ldr	r0, [pc, #52]	; (229ac <z_unpend_thread+0x7c>)
   22976:	f7fe fc71 	bl	2125c <z_spin_unlock_valid>
   2297a:	b968      	cbnz	r0, 22998 <z_unpend_thread+0x68>
   2297c:	4a0c      	ldr	r2, [pc, #48]	; (229b0 <z_unpend_thread+0x80>)
   2297e:	4910      	ldr	r1, [pc, #64]	; (229c0 <z_unpend_thread+0x90>)
   22980:	480d      	ldr	r0, [pc, #52]	; (229b8 <z_unpend_thread+0x88>)
   22982:	23ac      	movs	r3, #172	; 0xac
   22984:	f004 fdb7 	bl	274f6 <printk>
   22988:	4908      	ldr	r1, [pc, #32]	; (229ac <z_unpend_thread+0x7c>)
   2298a:	480e      	ldr	r0, [pc, #56]	; (229c4 <z_unpend_thread+0x94>)
   2298c:	f004 fdb3 	bl	274f6 <printk>
   22990:	4807      	ldr	r0, [pc, #28]	; (229b0 <z_unpend_thread+0x80>)
   22992:	21ac      	movs	r1, #172	; 0xac
   22994:	f005 f854 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22998:	f385 8811 	msr	BASEPRI, r5
   2299c:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   229a0:	f104 0018 	add.w	r0, r4, #24
}
   229a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   229a8:	f001 b978 	b.w	23c9c <z_abort_timeout>
   229ac:	20003424 	.word	0x20003424
   229b0:	0002dd93 	.word	0x0002dd93
   229b4:	0002dde5 	.word	0x0002dde5
   229b8:	0002dcd3 	.word	0x0002dcd3
   229bc:	0002ddfa 	.word	0x0002ddfa
   229c0:	0002ddb9 	.word	0x0002ddb9
   229c4:	0002ddd0 	.word	0x0002ddd0

000229c8 <update_cache>:
{
   229c8:	b538      	push	{r3, r4, r5, lr}
   229ca:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   229cc:	4814      	ldr	r0, [pc, #80]	; (22a20 <update_cache+0x58>)
   229ce:	4d15      	ldr	r5, [pc, #84]	; (22a24 <update_cache+0x5c>)
   229d0:	f009 feca 	bl	2c768 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   229d4:	4604      	mov	r4, r0
   229d6:	b900      	cbnz	r0, 229da <update_cache+0x12>
   229d8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   229da:	b9ca      	cbnz	r2, 22a10 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   229dc:	68ab      	ldr	r3, [r5, #8]
   229de:	b963      	cbnz	r3, 229fa <update_cache+0x32>
   229e0:	4911      	ldr	r1, [pc, #68]	; (22a28 <update_cache+0x60>)
   229e2:	4a12      	ldr	r2, [pc, #72]	; (22a2c <update_cache+0x64>)
   229e4:	4812      	ldr	r0, [pc, #72]	; (22a30 <update_cache+0x68>)
   229e6:	2381      	movs	r3, #129	; 0x81
   229e8:	f004 fd85 	bl	274f6 <printk>
   229ec:	4811      	ldr	r0, [pc, #68]	; (22a34 <update_cache+0x6c>)
   229ee:	f004 fd82 	bl	274f6 <printk>
   229f2:	480e      	ldr	r0, [pc, #56]	; (22a2c <update_cache+0x64>)
   229f4:	2181      	movs	r1, #129	; 0x81
   229f6:	f005 f823 	bl	27a40 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   229fa:	68ab      	ldr	r3, [r5, #8]
   229fc:	7b5a      	ldrb	r2, [r3, #13]
   229fe:	06d2      	lsls	r2, r2, #27
   22a00:	d106      	bne.n	22a10 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22a02:	69a2      	ldr	r2, [r4, #24]
   22a04:	b922      	cbnz	r2, 22a10 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   22a06:	89da      	ldrh	r2, [r3, #14]
   22a08:	2a7f      	cmp	r2, #127	; 0x7f
   22a0a:	d901      	bls.n	22a10 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   22a0c:	626b      	str	r3, [r5, #36]	; 0x24
}
   22a0e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   22a10:	68ab      	ldr	r3, [r5, #8]
   22a12:	42a3      	cmp	r3, r4
   22a14:	d001      	beq.n	22a1a <update_cache+0x52>
			z_reset_time_slice();
   22a16:	f7ff fdcb 	bl	225b0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   22a1a:	626c      	str	r4, [r5, #36]	; 0x24
}
   22a1c:	e7f7      	b.n	22a0e <update_cache+0x46>
   22a1e:	bf00      	nop
   22a20:	20003404 	.word	0x20003404
   22a24:	200033dc 	.word	0x200033dc
   22a28:	00031d55 	.word	0x00031d55
   22a2c:	00031cfb 	.word	0x00031cfb
   22a30:	0002dcd3 	.word	0x0002dcd3
   22a34:	00030be6 	.word	0x00030be6

00022a38 <unready_thread>:
{
   22a38:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   22a3a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   22a3e:	7b43      	ldrb	r3, [r0, #13]
   22a40:	2a00      	cmp	r2, #0
{
   22a42:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22a44:	da06      	bge.n	22a54 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22a4a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   22a4c:	4601      	mov	r1, r0
   22a4e:	4806      	ldr	r0, [pc, #24]	; (22a68 <unready_thread+0x30>)
   22a50:	f7ff ff2a 	bl	228a8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   22a54:	4b05      	ldr	r3, [pc, #20]	; (22a6c <unready_thread+0x34>)
   22a56:	6898      	ldr	r0, [r3, #8]
   22a58:	1b03      	subs	r3, r0, r4
   22a5a:	4258      	negs	r0, r3
}
   22a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   22a60:	4158      	adcs	r0, r3
   22a62:	f7ff bfb1 	b.w	229c8 <update_cache>
   22a66:	bf00      	nop
   22a68:	20003404 	.word	0x20003404
   22a6c:	200033dc 	.word	0x200033dc

00022a70 <add_to_waitq_locked>:
{
   22a70:	b538      	push	{r3, r4, r5, lr}
   22a72:	4604      	mov	r4, r0
   22a74:	460d      	mov	r5, r1
	unready_thread(thread);
   22a76:	f7ff ffdf 	bl	22a38 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22a7a:	7b63      	ldrb	r3, [r4, #13]
   22a7c:	f043 0302 	orr.w	r3, r3, #2
   22a80:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22a82:	b32d      	cbz	r5, 22ad0 <add_to_waitq_locked+0x60>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22a84:	4b18      	ldr	r3, [pc, #96]	; (22ae8 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
   22a86:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22a88:	429c      	cmp	r4, r3
   22a8a:	d10b      	bne.n	22aa4 <add_to_waitq_locked+0x34>
   22a8c:	4917      	ldr	r1, [pc, #92]	; (22aec <add_to_waitq_locked+0x7c>)
   22a8e:	4818      	ldr	r0, [pc, #96]	; (22af0 <add_to_waitq_locked+0x80>)
   22a90:	4a18      	ldr	r2, [pc, #96]	; (22af4 <add_to_waitq_locked+0x84>)
   22a92:	f240 33a6 	movw	r3, #934	; 0x3a6
   22a96:	f004 fd2e 	bl	274f6 <printk>
   22a9a:	4816      	ldr	r0, [pc, #88]	; (22af4 <add_to_waitq_locked+0x84>)
   22a9c:	f240 31a6 	movw	r1, #934	; 0x3a6
   22aa0:	f004 ffce 	bl	27a40 <assert_post_action>
	return list->head == list;
   22aa4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22aa6:	429d      	cmp	r5, r3
   22aa8:	bf08      	it	eq
   22aaa:	2300      	moveq	r3, #0
   22aac:	2b00      	cmp	r3, #0
   22aae:	bf38      	it	cc
   22ab0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22ab2:	b19b      	cbz	r3, 22adc <add_to_waitq_locked+0x6c>
	int32_t b1 = thread_1->base.prio;
   22ab4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22ab8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22abc:	4291      	cmp	r1, r2
   22abe:	d008      	beq.n	22ad2 <add_to_waitq_locked+0x62>
		return b2 - b1;
   22ac0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22ac2:	2a00      	cmp	r2, #0
   22ac4:	dd05      	ble.n	22ad2 <add_to_waitq_locked+0x62>
	sys_dnode_t *const prev = successor->prev;
   22ac6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22ac8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22acc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22ace:	605c      	str	r4, [r3, #4]
}
   22ad0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22ad2:	686a      	ldr	r2, [r5, #4]
   22ad4:	4293      	cmp	r3, r2
   22ad6:	d001      	beq.n	22adc <add_to_waitq_locked+0x6c>
   22ad8:	681b      	ldr	r3, [r3, #0]
   22ada:	e7ea      	b.n	22ab2 <add_to_waitq_locked+0x42>
	sys_dnode_t *const tail = list->tail;
   22adc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22ade:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22ae2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22ae4:	606c      	str	r4, [r5, #4]
   22ae6:	e7f3      	b.n	22ad0 <add_to_waitq_locked+0x60>
   22ae8:	20001fa8 	.word	0x20001fa8
   22aec:	00031d1d 	.word	0x00031d1d
   22af0:	0002dcd3 	.word	0x0002dcd3
   22af4:	00031cfb 	.word	0x00031cfb

00022af8 <pend>:
{
   22af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22afc:	4604      	mov	r4, r0
   22afe:	460d      	mov	r5, r1
   22b00:	4616      	mov	r6, r2
   22b02:	461f      	mov	r7, r3
	__asm__ volatile(
   22b04:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b08:	f3ef 8811 	mrs	r8, BASEPRI
   22b0c:	f383 8811 	msr	BASEPRI, r3
   22b10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b14:	481f      	ldr	r0, [pc, #124]	; (22b94 <pend+0x9c>)
   22b16:	f7fe fb93 	bl	21240 <z_spin_lock_valid>
   22b1a:	b968      	cbnz	r0, 22b38 <pend+0x40>
   22b1c:	4a1e      	ldr	r2, [pc, #120]	; (22b98 <pend+0xa0>)
   22b1e:	491f      	ldr	r1, [pc, #124]	; (22b9c <pend+0xa4>)
   22b20:	481f      	ldr	r0, [pc, #124]	; (22ba0 <pend+0xa8>)
   22b22:	2381      	movs	r3, #129	; 0x81
   22b24:	f004 fce7 	bl	274f6 <printk>
   22b28:	491a      	ldr	r1, [pc, #104]	; (22b94 <pend+0x9c>)
   22b2a:	481e      	ldr	r0, [pc, #120]	; (22ba4 <pend+0xac>)
   22b2c:	f004 fce3 	bl	274f6 <printk>
   22b30:	4819      	ldr	r0, [pc, #100]	; (22b98 <pend+0xa0>)
   22b32:	2181      	movs	r1, #129	; 0x81
   22b34:	f004 ff84 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b38:	4816      	ldr	r0, [pc, #88]	; (22b94 <pend+0x9c>)
   22b3a:	f7fe fb9f 	bl	2127c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   22b3e:	4620      	mov	r0, r4
   22b40:	4629      	mov	r1, r5
   22b42:	f7ff ff95 	bl	22a70 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b46:	4813      	ldr	r0, [pc, #76]	; (22b94 <pend+0x9c>)
   22b48:	f7fe fb88 	bl	2125c <z_spin_unlock_valid>
   22b4c:	b968      	cbnz	r0, 22b6a <pend+0x72>
   22b4e:	4a12      	ldr	r2, [pc, #72]	; (22b98 <pend+0xa0>)
   22b50:	4915      	ldr	r1, [pc, #84]	; (22ba8 <pend+0xb0>)
   22b52:	4813      	ldr	r0, [pc, #76]	; (22ba0 <pend+0xa8>)
   22b54:	23ac      	movs	r3, #172	; 0xac
   22b56:	f004 fcce 	bl	274f6 <printk>
   22b5a:	490e      	ldr	r1, [pc, #56]	; (22b94 <pend+0x9c>)
   22b5c:	4813      	ldr	r0, [pc, #76]	; (22bac <pend+0xb4>)
   22b5e:	f004 fcca 	bl	274f6 <printk>
   22b62:	480d      	ldr	r0, [pc, #52]	; (22b98 <pend+0xa0>)
   22b64:	21ac      	movs	r1, #172	; 0xac
   22b66:	f004 ff6b 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22b6a:	f388 8811 	msr	BASEPRI, r8
   22b6e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22b72:	1c7b      	adds	r3, r7, #1
   22b74:	bf08      	it	eq
   22b76:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22b7a:	d008      	beq.n	22b8e <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22b7c:	4632      	mov	r2, r6
   22b7e:	463b      	mov	r3, r7
   22b80:	f104 0018 	add.w	r0, r4, #24
   22b84:	490a      	ldr	r1, [pc, #40]	; (22bb0 <pend+0xb8>)
}
   22b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22b8a:	f000 bfb3 	b.w	23af4 <z_add_timeout>
   22b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b92:	bf00      	nop
   22b94:	20003424 	.word	0x20003424
   22b98:	0002dd93 	.word	0x0002dd93
   22b9c:	0002dde5 	.word	0x0002dde5
   22ba0:	0002dcd3 	.word	0x0002dcd3
   22ba4:	0002ddfa 	.word	0x0002ddfa
   22ba8:	0002ddb9 	.word	0x0002ddb9
   22bac:	0002ddd0 	.word	0x0002ddd0
   22bb0:	00023161 	.word	0x00023161

00022bb4 <z_pend_curr>:
{
   22bb4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   22bb6:	4b11      	ldr	r3, [pc, #68]	; (22bfc <z_pend_curr+0x48>)
{
   22bb8:	4604      	mov	r4, r0
	pending_current = _current;
   22bba:	6898      	ldr	r0, [r3, #8]
   22bbc:	4b10      	ldr	r3, [pc, #64]	; (22c00 <z_pend_curr+0x4c>)
{
   22bbe:	460d      	mov	r5, r1
	pending_current = _current;
   22bc0:	6018      	str	r0, [r3, #0]
{
   22bc2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   22bc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   22bc8:	f7ff ff96 	bl	22af8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bcc:	4620      	mov	r0, r4
   22bce:	f7fe fb45 	bl	2125c <z_spin_unlock_valid>
   22bd2:	b968      	cbnz	r0, 22bf0 <z_pend_curr+0x3c>
   22bd4:	4a0b      	ldr	r2, [pc, #44]	; (22c04 <z_pend_curr+0x50>)
   22bd6:	490c      	ldr	r1, [pc, #48]	; (22c08 <z_pend_curr+0x54>)
   22bd8:	480c      	ldr	r0, [pc, #48]	; (22c0c <z_pend_curr+0x58>)
   22bda:	23c3      	movs	r3, #195	; 0xc3
   22bdc:	f004 fc8b 	bl	274f6 <printk>
   22be0:	480b      	ldr	r0, [pc, #44]	; (22c10 <z_pend_curr+0x5c>)
   22be2:	4621      	mov	r1, r4
   22be4:	f004 fc87 	bl	274f6 <printk>
   22be8:	4806      	ldr	r0, [pc, #24]	; (22c04 <z_pend_curr+0x50>)
   22bea:	21c3      	movs	r1, #195	; 0xc3
   22bec:	f004 ff28 	bl	27a40 <assert_post_action>
   22bf0:	4628      	mov	r0, r5
}
   22bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22bf6:	f7f1 bac7 	b.w	14188 <arch_swap>
   22bfa:	bf00      	nop
   22bfc:	200033dc 	.word	0x200033dc
   22c00:	20003420 	.word	0x20003420
   22c04:	0002dd93 	.word	0x0002dd93
   22c08:	0002ddb9 	.word	0x0002ddb9
   22c0c:	0002dcd3 	.word	0x0002dcd3
   22c10:	0002ddd0 	.word	0x0002ddd0

00022c14 <z_impl_k_thread_suspend>:
{
   22c14:	b570      	push	{r4, r5, r6, lr}
   22c16:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   22c18:	3018      	adds	r0, #24
   22c1a:	f001 f83f 	bl	23c9c <z_abort_timeout>
	__asm__ volatile(
   22c1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c22:	f3ef 8611 	mrs	r6, BASEPRI
   22c26:	f383 8811 	msr	BASEPRI, r3
   22c2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c2e:	4825      	ldr	r0, [pc, #148]	; (22cc4 <z_impl_k_thread_suspend+0xb0>)
   22c30:	f7fe fb06 	bl	21240 <z_spin_lock_valid>
   22c34:	b968      	cbnz	r0, 22c52 <z_impl_k_thread_suspend+0x3e>
   22c36:	4a24      	ldr	r2, [pc, #144]	; (22cc8 <z_impl_k_thread_suspend+0xb4>)
   22c38:	4924      	ldr	r1, [pc, #144]	; (22ccc <z_impl_k_thread_suspend+0xb8>)
   22c3a:	4825      	ldr	r0, [pc, #148]	; (22cd0 <z_impl_k_thread_suspend+0xbc>)
   22c3c:	2381      	movs	r3, #129	; 0x81
   22c3e:	f004 fc5a 	bl	274f6 <printk>
   22c42:	4920      	ldr	r1, [pc, #128]	; (22cc4 <z_impl_k_thread_suspend+0xb0>)
   22c44:	4823      	ldr	r0, [pc, #140]	; (22cd4 <z_impl_k_thread_suspend+0xc0>)
   22c46:	f004 fc56 	bl	274f6 <printk>
   22c4a:	481f      	ldr	r0, [pc, #124]	; (22cc8 <z_impl_k_thread_suspend+0xb4>)
   22c4c:	2181      	movs	r1, #129	; 0x81
   22c4e:	f004 fef7 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22c52:	481c      	ldr	r0, [pc, #112]	; (22cc4 <z_impl_k_thread_suspend+0xb0>)
   22c54:	f7fe fb12 	bl	2127c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   22c58:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   22c5c:	7b63      	ldrb	r3, [r4, #13]
   22c5e:	2a00      	cmp	r2, #0
   22c60:	da06      	bge.n	22c70 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   22c66:	481c      	ldr	r0, [pc, #112]	; (22cd8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22c68:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   22c6a:	4621      	mov	r1, r4
   22c6c:	f7ff fe1c 	bl	228a8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   22c70:	4d1a      	ldr	r5, [pc, #104]	; (22cdc <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22c72:	7b63      	ldrb	r3, [r4, #13]
   22c74:	68a8      	ldr	r0, [r5, #8]
   22c76:	f043 0310 	orr.w	r3, r3, #16
   22c7a:	7363      	strb	r3, [r4, #13]
   22c7c:	1b03      	subs	r3, r0, r4
   22c7e:	4258      	negs	r0, r3
   22c80:	4158      	adcs	r0, r3
   22c82:	f7ff fea1 	bl	229c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c86:	480f      	ldr	r0, [pc, #60]	; (22cc4 <z_impl_k_thread_suspend+0xb0>)
   22c88:	f7fe fae8 	bl	2125c <z_spin_unlock_valid>
   22c8c:	b968      	cbnz	r0, 22caa <z_impl_k_thread_suspend+0x96>
   22c8e:	4a0e      	ldr	r2, [pc, #56]	; (22cc8 <z_impl_k_thread_suspend+0xb4>)
   22c90:	4913      	ldr	r1, [pc, #76]	; (22ce0 <z_impl_k_thread_suspend+0xcc>)
   22c92:	480f      	ldr	r0, [pc, #60]	; (22cd0 <z_impl_k_thread_suspend+0xbc>)
   22c94:	23ac      	movs	r3, #172	; 0xac
   22c96:	f004 fc2e 	bl	274f6 <printk>
   22c9a:	490a      	ldr	r1, [pc, #40]	; (22cc4 <z_impl_k_thread_suspend+0xb0>)
   22c9c:	4811      	ldr	r0, [pc, #68]	; (22ce4 <z_impl_k_thread_suspend+0xd0>)
   22c9e:	f004 fc2a 	bl	274f6 <printk>
   22ca2:	4809      	ldr	r0, [pc, #36]	; (22cc8 <z_impl_k_thread_suspend+0xb4>)
   22ca4:	21ac      	movs	r1, #172	; 0xac
   22ca6:	f004 fecb 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22caa:	f386 8811 	msr	BASEPRI, r6
   22cae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   22cb2:	68ab      	ldr	r3, [r5, #8]
   22cb4:	42a3      	cmp	r3, r4
   22cb6:	d103      	bne.n	22cc0 <z_impl_k_thread_suspend+0xac>
}
   22cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   22cbc:	f009 bd4a 	b.w	2c754 <z_reschedule_unlocked>
}
   22cc0:	bd70      	pop	{r4, r5, r6, pc}
   22cc2:	bf00      	nop
   22cc4:	20003424 	.word	0x20003424
   22cc8:	0002dd93 	.word	0x0002dd93
   22ccc:	0002dde5 	.word	0x0002dde5
   22cd0:	0002dcd3 	.word	0x0002dcd3
   22cd4:	0002ddfa 	.word	0x0002ddfa
   22cd8:	20003404 	.word	0x20003404
   22cdc:	200033dc 	.word	0x200033dc
   22ce0:	0002ddb9 	.word	0x0002ddb9
   22ce4:	0002ddd0 	.word	0x0002ddd0

00022ce8 <k_sched_unlock>:
{
   22ce8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22cea:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cee:	f3ef 8511 	mrs	r5, BASEPRI
   22cf2:	f383 8811 	msr	BASEPRI, r3
   22cf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cfa:	482d      	ldr	r0, [pc, #180]	; (22db0 <k_sched_unlock+0xc8>)
   22cfc:	f7fe faa0 	bl	21240 <z_spin_lock_valid>
   22d00:	b968      	cbnz	r0, 22d1e <k_sched_unlock+0x36>
   22d02:	4a2c      	ldr	r2, [pc, #176]	; (22db4 <k_sched_unlock+0xcc>)
   22d04:	492c      	ldr	r1, [pc, #176]	; (22db8 <k_sched_unlock+0xd0>)
   22d06:	482d      	ldr	r0, [pc, #180]	; (22dbc <k_sched_unlock+0xd4>)
   22d08:	2381      	movs	r3, #129	; 0x81
   22d0a:	f004 fbf4 	bl	274f6 <printk>
   22d0e:	4928      	ldr	r1, [pc, #160]	; (22db0 <k_sched_unlock+0xc8>)
   22d10:	482b      	ldr	r0, [pc, #172]	; (22dc0 <k_sched_unlock+0xd8>)
   22d12:	f004 fbf0 	bl	274f6 <printk>
   22d16:	4827      	ldr	r0, [pc, #156]	; (22db4 <k_sched_unlock+0xcc>)
   22d18:	2181      	movs	r1, #129	; 0x81
   22d1a:	f004 fe91 	bl	27a40 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   22d1e:	4c29      	ldr	r4, [pc, #164]	; (22dc4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   22d20:	4823      	ldr	r0, [pc, #140]	; (22db0 <k_sched_unlock+0xc8>)
   22d22:	f7fe faab 	bl	2127c <z_spin_lock_set_owner>
   22d26:	68a2      	ldr	r2, [r4, #8]
   22d28:	7bd2      	ldrb	r2, [r2, #15]
   22d2a:	b972      	cbnz	r2, 22d4a <k_sched_unlock+0x62>
   22d2c:	4926      	ldr	r1, [pc, #152]	; (22dc8 <k_sched_unlock+0xe0>)
   22d2e:	4a27      	ldr	r2, [pc, #156]	; (22dcc <k_sched_unlock+0xe4>)
   22d30:	4822      	ldr	r0, [pc, #136]	; (22dbc <k_sched_unlock+0xd4>)
   22d32:	f44f 7351 	mov.w	r3, #836	; 0x344
   22d36:	f004 fbde 	bl	274f6 <printk>
   22d3a:	4825      	ldr	r0, [pc, #148]	; (22dd0 <k_sched_unlock+0xe8>)
   22d3c:	f004 fbdb 	bl	274f6 <printk>
   22d40:	4822      	ldr	r0, [pc, #136]	; (22dcc <k_sched_unlock+0xe4>)
   22d42:	f44f 7151 	mov.w	r1, #836	; 0x344
   22d46:	f004 fe7b 	bl	27a40 <assert_post_action>
   22d4a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   22d4e:	b173      	cbz	r3, 22d6e <k_sched_unlock+0x86>
   22d50:	4920      	ldr	r1, [pc, #128]	; (22dd4 <k_sched_unlock+0xec>)
   22d52:	4a1e      	ldr	r2, [pc, #120]	; (22dcc <k_sched_unlock+0xe4>)
   22d54:	4819      	ldr	r0, [pc, #100]	; (22dbc <k_sched_unlock+0xd4>)
   22d56:	f240 3345 	movw	r3, #837	; 0x345
   22d5a:	f004 fbcc 	bl	274f6 <printk>
   22d5e:	481c      	ldr	r0, [pc, #112]	; (22dd0 <k_sched_unlock+0xe8>)
   22d60:	f004 fbc9 	bl	274f6 <printk>
   22d64:	4819      	ldr	r0, [pc, #100]	; (22dcc <k_sched_unlock+0xe4>)
   22d66:	f240 3145 	movw	r1, #837	; 0x345
   22d6a:	f004 fe69 	bl	27a40 <assert_post_action>
		++_current->base.sched_locked;
   22d6e:	68a2      	ldr	r2, [r4, #8]
   22d70:	7bd3      	ldrb	r3, [r2, #15]
   22d72:	3301      	adds	r3, #1
		update_cache(0);
   22d74:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   22d76:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22d78:	f7ff fe26 	bl	229c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d7c:	480c      	ldr	r0, [pc, #48]	; (22db0 <k_sched_unlock+0xc8>)
   22d7e:	f7fe fa6d 	bl	2125c <z_spin_unlock_valid>
   22d82:	b968      	cbnz	r0, 22da0 <k_sched_unlock+0xb8>
   22d84:	4a0b      	ldr	r2, [pc, #44]	; (22db4 <k_sched_unlock+0xcc>)
   22d86:	4914      	ldr	r1, [pc, #80]	; (22dd8 <k_sched_unlock+0xf0>)
   22d88:	480c      	ldr	r0, [pc, #48]	; (22dbc <k_sched_unlock+0xd4>)
   22d8a:	23ac      	movs	r3, #172	; 0xac
   22d8c:	f004 fbb3 	bl	274f6 <printk>
   22d90:	4907      	ldr	r1, [pc, #28]	; (22db0 <k_sched_unlock+0xc8>)
   22d92:	4812      	ldr	r0, [pc, #72]	; (22ddc <k_sched_unlock+0xf4>)
   22d94:	f004 fbaf 	bl	274f6 <printk>
   22d98:	4806      	ldr	r0, [pc, #24]	; (22db4 <k_sched_unlock+0xcc>)
   22d9a:	21ac      	movs	r1, #172	; 0xac
   22d9c:	f004 fe50 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22da0:	f385 8811 	msr	BASEPRI, r5
   22da4:	f3bf 8f6f 	isb	sy
}
   22da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   22dac:	f009 bcd2 	b.w	2c754 <z_reschedule_unlocked>
   22db0:	20003424 	.word	0x20003424
   22db4:	0002dd93 	.word	0x0002dd93
   22db8:	0002dde5 	.word	0x0002dde5
   22dbc:	0002dcd3 	.word	0x0002dcd3
   22dc0:	0002ddfa 	.word	0x0002ddfa
   22dc4:	200033dc 	.word	0x200033dc
   22dc8:	00031d7c 	.word	0x00031d7c
   22dcc:	00031cfb 	.word	0x00031cfb
   22dd0:	00030be6 	.word	0x00030be6
   22dd4:	00031a33 	.word	0x00031a33
   22dd8:	0002ddb9 	.word	0x0002ddb9
   22ddc:	0002ddd0 	.word	0x0002ddd0

00022de0 <move_thread_to_end_of_prio_q>:
{
   22de0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22de2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   22de6:	7b43      	ldrb	r3, [r0, #13]
   22de8:	2a00      	cmp	r2, #0
{
   22dea:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22dec:	da06      	bge.n	22dfc <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22df2:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   22df4:	4601      	mov	r1, r0
   22df6:	4820      	ldr	r0, [pc, #128]	; (22e78 <move_thread_to_end_of_prio_q+0x98>)
   22df8:	f7ff fd56 	bl	228a8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22dfc:	7b63      	ldrb	r3, [r4, #13]
   22dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22e02:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22e04:	4b1d      	ldr	r3, [pc, #116]	; (22e7c <move_thread_to_end_of_prio_q+0x9c>)
   22e06:	429c      	cmp	r4, r3
   22e08:	d10b      	bne.n	22e22 <move_thread_to_end_of_prio_q+0x42>
   22e0a:	491d      	ldr	r1, [pc, #116]	; (22e80 <move_thread_to_end_of_prio_q+0xa0>)
   22e0c:	481d      	ldr	r0, [pc, #116]	; (22e84 <move_thread_to_end_of_prio_q+0xa4>)
   22e0e:	4a1e      	ldr	r2, [pc, #120]	; (22e88 <move_thread_to_end_of_prio_q+0xa8>)
   22e10:	f240 33a6 	movw	r3, #934	; 0x3a6
   22e14:	f004 fb6f 	bl	274f6 <printk>
   22e18:	481b      	ldr	r0, [pc, #108]	; (22e88 <move_thread_to_end_of_prio_q+0xa8>)
   22e1a:	f240 31a6 	movw	r1, #934	; 0x3a6
   22e1e:	f004 fe0f 	bl	27a40 <assert_post_action>
	return list->head == list;
   22e22:	4a1a      	ldr	r2, [pc, #104]	; (22e8c <move_thread_to_end_of_prio_q+0xac>)
   22e24:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22e26:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
   22e28:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e2c:	428b      	cmp	r3, r1
   22e2e:	bf08      	it	eq
   22e30:	2300      	moveq	r3, #0
   22e32:	2b00      	cmp	r3, #0
   22e34:	bf38      	it	cc
   22e36:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22e38:	b1cb      	cbz	r3, 22e6e <move_thread_to_end_of_prio_q+0x8e>
	int32_t b1 = thread_1->base.prio;
   22e3a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22e3e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   22e42:	4286      	cmp	r6, r0
   22e44:	d00f      	beq.n	22e66 <move_thread_to_end_of_prio_q+0x86>
		return b2 - b1;
   22e46:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22e48:	2800      	cmp	r0, #0
   22e4a:	dd0c      	ble.n	22e66 <move_thread_to_end_of_prio_q+0x86>
	sys_dnode_t *const prev = successor->prev;
   22e4c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22e4e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   22e52:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22e54:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   22e56:	6890      	ldr	r0, [r2, #8]
   22e58:	1b03      	subs	r3, r0, r4
   22e5a:	4258      	negs	r0, r3
}
   22e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   22e60:	4158      	adcs	r0, r3
   22e62:	f7ff bdb1 	b.w	229c8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22e66:	42ab      	cmp	r3, r5
   22e68:	d001      	beq.n	22e6e <move_thread_to_end_of_prio_q+0x8e>
   22e6a:	681b      	ldr	r3, [r3, #0]
   22e6c:	e7e4      	b.n	22e38 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   22e6e:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   22e72:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22e74:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   22e76:	e7ee      	b.n	22e56 <move_thread_to_end_of_prio_q+0x76>
   22e78:	20003404 	.word	0x20003404
   22e7c:	20001fa8 	.word	0x20001fa8
   22e80:	00031d1d 	.word	0x00031d1d
   22e84:	0002dcd3 	.word	0x0002dcd3
   22e88:	00031cfb 	.word	0x00031cfb
   22e8c:	200033dc 	.word	0x200033dc

00022e90 <z_time_slice>:
{
   22e90:	b570      	push	{r4, r5, r6, lr}
   22e92:	4604      	mov	r4, r0
	__asm__ volatile(
   22e94:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e98:	f3ef 8511 	mrs	r5, BASEPRI
   22e9c:	f383 8811 	msr	BASEPRI, r3
   22ea0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ea4:	482a      	ldr	r0, [pc, #168]	; (22f50 <z_time_slice+0xc0>)
   22ea6:	f7fe f9cb 	bl	21240 <z_spin_lock_valid>
   22eaa:	b968      	cbnz	r0, 22ec8 <z_time_slice+0x38>
   22eac:	4a29      	ldr	r2, [pc, #164]	; (22f54 <z_time_slice+0xc4>)
   22eae:	492a      	ldr	r1, [pc, #168]	; (22f58 <z_time_slice+0xc8>)
   22eb0:	482a      	ldr	r0, [pc, #168]	; (22f5c <z_time_slice+0xcc>)
   22eb2:	2381      	movs	r3, #129	; 0x81
   22eb4:	f004 fb1f 	bl	274f6 <printk>
   22eb8:	4925      	ldr	r1, [pc, #148]	; (22f50 <z_time_slice+0xc0>)
   22eba:	4829      	ldr	r0, [pc, #164]	; (22f60 <z_time_slice+0xd0>)
   22ebc:	f004 fb1b 	bl	274f6 <printk>
   22ec0:	4824      	ldr	r0, [pc, #144]	; (22f54 <z_time_slice+0xc4>)
   22ec2:	2181      	movs	r1, #129	; 0x81
   22ec4:	f004 fdbc 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ec8:	4821      	ldr	r0, [pc, #132]	; (22f50 <z_time_slice+0xc0>)
   22eca:	f7fe f9d7 	bl	2127c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   22ece:	4b25      	ldr	r3, [pc, #148]	; (22f64 <z_time_slice+0xd4>)
   22ed0:	4a25      	ldr	r2, [pc, #148]	; (22f68 <z_time_slice+0xd8>)
   22ed2:	6898      	ldr	r0, [r3, #8]
   22ed4:	6811      	ldr	r1, [r2, #0]
   22ed6:	4288      	cmp	r0, r1
   22ed8:	4619      	mov	r1, r3
   22eda:	d118      	bne.n	22f0e <z_time_slice+0x7e>
			z_reset_time_slice();
   22edc:	f7ff fb68 	bl	225b0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ee0:	481b      	ldr	r0, [pc, #108]	; (22f50 <z_time_slice+0xc0>)
   22ee2:	f7fe f9bb 	bl	2125c <z_spin_unlock_valid>
   22ee6:	b968      	cbnz	r0, 22f04 <z_time_slice+0x74>
   22ee8:	4a1a      	ldr	r2, [pc, #104]	; (22f54 <z_time_slice+0xc4>)
   22eea:	4920      	ldr	r1, [pc, #128]	; (22f6c <z_time_slice+0xdc>)
   22eec:	481b      	ldr	r0, [pc, #108]	; (22f5c <z_time_slice+0xcc>)
   22eee:	23ac      	movs	r3, #172	; 0xac
   22ef0:	f004 fb01 	bl	274f6 <printk>
   22ef4:	4916      	ldr	r1, [pc, #88]	; (22f50 <z_time_slice+0xc0>)
   22ef6:	481e      	ldr	r0, [pc, #120]	; (22f70 <z_time_slice+0xe0>)
   22ef8:	f004 fafd 	bl	274f6 <printk>
   22efc:	4815      	ldr	r0, [pc, #84]	; (22f54 <z_time_slice+0xc4>)
   22efe:	21ac      	movs	r1, #172	; 0xac
   22f00:	f004 fd9e 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   22f04:	f385 8811 	msr	BASEPRI, r5
   22f08:	f3bf 8f6f 	isb	sy
}
   22f0c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   22f0e:	2600      	movs	r6, #0
   22f10:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   22f12:	4a18      	ldr	r2, [pc, #96]	; (22f74 <z_time_slice+0xe4>)
   22f14:	6812      	ldr	r2, [r2, #0]
   22f16:	b1ba      	cbz	r2, 22f48 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   22f18:	89c2      	ldrh	r2, [r0, #14]
   22f1a:	2a7f      	cmp	r2, #127	; 0x7f
   22f1c:	d814      	bhi.n	22f48 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   22f1e:	7b42      	ldrb	r2, [r0, #13]
   22f20:	06d2      	lsls	r2, r2, #27
   22f22:	d111      	bne.n	22f48 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   22f24:	4a14      	ldr	r2, [pc, #80]	; (22f78 <z_time_slice+0xe8>)
   22f26:	f990 600e 	ldrsb.w	r6, [r0, #14]
   22f2a:	6812      	ldr	r2, [r2, #0]
   22f2c:	4296      	cmp	r6, r2
   22f2e:	db0b      	blt.n	22f48 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   22f30:	4a12      	ldr	r2, [pc, #72]	; (22f7c <z_time_slice+0xec>)
   22f32:	4290      	cmp	r0, r2
   22f34:	d008      	beq.n	22f48 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   22f36:	691a      	ldr	r2, [r3, #16]
   22f38:	42a2      	cmp	r2, r4
   22f3a:	dc02      	bgt.n	22f42 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   22f3c:	f7ff ff50 	bl	22de0 <move_thread_to_end_of_prio_q>
   22f40:	e7cc      	b.n	22edc <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   22f42:	1b12      	subs	r2, r2, r4
   22f44:	611a      	str	r2, [r3, #16]
   22f46:	e7cb      	b.n	22ee0 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   22f48:	2300      	movs	r3, #0
   22f4a:	610b      	str	r3, [r1, #16]
   22f4c:	e7c8      	b.n	22ee0 <z_time_slice+0x50>
   22f4e:	bf00      	nop
   22f50:	20003424 	.word	0x20003424
   22f54:	0002dd93 	.word	0x0002dd93
   22f58:	0002dde5 	.word	0x0002dde5
   22f5c:	0002dcd3 	.word	0x0002dcd3
   22f60:	0002ddfa 	.word	0x0002ddfa
   22f64:	200033dc 	.word	0x200033dc
   22f68:	20003420 	.word	0x20003420
   22f6c:	0002ddb9 	.word	0x0002ddb9
   22f70:	0002ddd0 	.word	0x0002ddd0
   22f74:	2000342c 	.word	0x2000342c
   22f78:	20003428 	.word	0x20003428
   22f7c:	20001fa8 	.word	0x20001fa8

00022f80 <ready_thread>:
{
   22f80:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22f82:	f990 200d 	ldrsb.w	r2, [r0, #13]
   22f86:	7b43      	ldrb	r3, [r0, #13]
   22f88:	2a00      	cmp	r2, #0
{
   22f8a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22f8c:	db40      	blt.n	23010 <ready_thread+0x90>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22f8e:	06da      	lsls	r2, r3, #27
   22f90:	d13e      	bne.n	23010 <ready_thread+0x90>
	return !sys_dnode_is_linked(&to->node);
   22f92:	6985      	ldr	r5, [r0, #24]
   22f94:	2d00      	cmp	r5, #0
   22f96:	d13b      	bne.n	23010 <ready_thread+0x90>
	thread->base.thread_state |= _THREAD_QUEUED;
   22f98:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22f9c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22f9e:	4b1d      	ldr	r3, [pc, #116]	; (23014 <ready_thread+0x94>)
   22fa0:	4298      	cmp	r0, r3
   22fa2:	d10b      	bne.n	22fbc <ready_thread+0x3c>
   22fa4:	491c      	ldr	r1, [pc, #112]	; (23018 <ready_thread+0x98>)
   22fa6:	481d      	ldr	r0, [pc, #116]	; (2301c <ready_thread+0x9c>)
   22fa8:	4a1d      	ldr	r2, [pc, #116]	; (23020 <ready_thread+0xa0>)
   22faa:	f240 33a6 	movw	r3, #934	; 0x3a6
   22fae:	f004 faa2 	bl	274f6 <printk>
   22fb2:	481b      	ldr	r0, [pc, #108]	; (23020 <ready_thread+0xa0>)
   22fb4:	f240 31a6 	movw	r1, #934	; 0x3a6
   22fb8:	f004 fd42 	bl	27a40 <assert_post_action>
	return list->head == list;
   22fbc:	4919      	ldr	r1, [pc, #100]	; (23024 <ready_thread+0xa4>)
   22fbe:	460b      	mov	r3, r1
   22fc0:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22fc4:	4298      	cmp	r0, r3
   22fc6:	bf18      	it	ne
   22fc8:	4605      	movne	r5, r0
   22fca:	2d00      	cmp	r5, #0
   22fcc:	461a      	mov	r2, r3
   22fce:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22fd0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   22fd2:	bf38      	it	cc
   22fd4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22fd6:	b1b3      	cbz	r3, 23006 <ready_thread+0x86>
	int32_t b1 = thread_1->base.prio;
   22fd8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22fdc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   22fe0:	4286      	cmp	r6, r0
   22fe2:	d00c      	beq.n	22ffe <ready_thread+0x7e>
		return b2 - b1;
   22fe4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22fe6:	2800      	cmp	r0, #0
   22fe8:	dd09      	ble.n	22ffe <ready_thread+0x7e>
	sys_dnode_t *const prev = successor->prev;
   22fea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22fec:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22ff0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22ff2:	605c      	str	r4, [r3, #4]
}
   22ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   22ff8:	2000      	movs	r0, #0
   22ffa:	f7ff bce5 	b.w	229c8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22ffe:	42ab      	cmp	r3, r5
   23000:	d001      	beq.n	23006 <ready_thread+0x86>
   23002:	681b      	ldr	r3, [r3, #0]
   23004:	e7e7      	b.n	22fd6 <ready_thread+0x56>
	node->prev = tail;
   23006:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2300a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2300c:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   2300e:	e7f1      	b.n	22ff4 <ready_thread+0x74>
}
   23010:	bd70      	pop	{r4, r5, r6, pc}
   23012:	bf00      	nop
   23014:	20001fa8 	.word	0x20001fa8
   23018:	00031d1d 	.word	0x00031d1d
   2301c:	0002dcd3 	.word	0x0002dcd3
   23020:	00031cfb 	.word	0x00031cfb
   23024:	200033dc 	.word	0x200033dc

00023028 <z_ready_thread>:
{
   23028:	b538      	push	{r3, r4, r5, lr}
   2302a:	4604      	mov	r4, r0
	__asm__ volatile(
   2302c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23030:	f3ef 8511 	mrs	r5, BASEPRI
   23034:	f383 8811 	msr	BASEPRI, r3
   23038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2303c:	4817      	ldr	r0, [pc, #92]	; (2309c <z_ready_thread+0x74>)
   2303e:	f7fe f8ff 	bl	21240 <z_spin_lock_valid>
   23042:	b968      	cbnz	r0, 23060 <z_ready_thread+0x38>
   23044:	4a16      	ldr	r2, [pc, #88]	; (230a0 <z_ready_thread+0x78>)
   23046:	4917      	ldr	r1, [pc, #92]	; (230a4 <z_ready_thread+0x7c>)
   23048:	4817      	ldr	r0, [pc, #92]	; (230a8 <z_ready_thread+0x80>)
   2304a:	2381      	movs	r3, #129	; 0x81
   2304c:	f004 fa53 	bl	274f6 <printk>
   23050:	4912      	ldr	r1, [pc, #72]	; (2309c <z_ready_thread+0x74>)
   23052:	4816      	ldr	r0, [pc, #88]	; (230ac <z_ready_thread+0x84>)
   23054:	f004 fa4f 	bl	274f6 <printk>
   23058:	4811      	ldr	r0, [pc, #68]	; (230a0 <z_ready_thread+0x78>)
   2305a:	2181      	movs	r1, #129	; 0x81
   2305c:	f004 fcf0 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23060:	480e      	ldr	r0, [pc, #56]	; (2309c <z_ready_thread+0x74>)
   23062:	f7fe f90b 	bl	2127c <z_spin_lock_set_owner>
			ready_thread(thread);
   23066:	4620      	mov	r0, r4
   23068:	f7ff ff8a 	bl	22f80 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2306c:	480b      	ldr	r0, [pc, #44]	; (2309c <z_ready_thread+0x74>)
   2306e:	f7fe f8f5 	bl	2125c <z_spin_unlock_valid>
   23072:	b968      	cbnz	r0, 23090 <z_ready_thread+0x68>
   23074:	4a0a      	ldr	r2, [pc, #40]	; (230a0 <z_ready_thread+0x78>)
   23076:	490e      	ldr	r1, [pc, #56]	; (230b0 <z_ready_thread+0x88>)
   23078:	480b      	ldr	r0, [pc, #44]	; (230a8 <z_ready_thread+0x80>)
   2307a:	23ac      	movs	r3, #172	; 0xac
   2307c:	f004 fa3b 	bl	274f6 <printk>
   23080:	4906      	ldr	r1, [pc, #24]	; (2309c <z_ready_thread+0x74>)
   23082:	480c      	ldr	r0, [pc, #48]	; (230b4 <z_ready_thread+0x8c>)
   23084:	f004 fa37 	bl	274f6 <printk>
   23088:	4805      	ldr	r0, [pc, #20]	; (230a0 <z_ready_thread+0x78>)
   2308a:	21ac      	movs	r1, #172	; 0xac
   2308c:	f004 fcd8 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23090:	f385 8811 	msr	BASEPRI, r5
   23094:	f3bf 8f6f 	isb	sy
}
   23098:	bd38      	pop	{r3, r4, r5, pc}
   2309a:	bf00      	nop
   2309c:	20003424 	.word	0x20003424
   230a0:	0002dd93 	.word	0x0002dd93
   230a4:	0002dde5 	.word	0x0002dde5
   230a8:	0002dcd3 	.word	0x0002dcd3
   230ac:	0002ddfa 	.word	0x0002ddfa
   230b0:	0002ddb9 	.word	0x0002ddb9
   230b4:	0002ddd0 	.word	0x0002ddd0

000230b8 <z_sched_start>:
{
   230b8:	b538      	push	{r3, r4, r5, lr}
   230ba:	4604      	mov	r4, r0
	__asm__ volatile(
   230bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   230c0:	f3ef 8511 	mrs	r5, BASEPRI
   230c4:	f383 8811 	msr	BASEPRI, r3
   230c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230cc:	481d      	ldr	r0, [pc, #116]	; (23144 <z_sched_start+0x8c>)
   230ce:	f7fe f8b7 	bl	21240 <z_spin_lock_valid>
   230d2:	b968      	cbnz	r0, 230f0 <z_sched_start+0x38>
   230d4:	4a1c      	ldr	r2, [pc, #112]	; (23148 <z_sched_start+0x90>)
   230d6:	491d      	ldr	r1, [pc, #116]	; (2314c <z_sched_start+0x94>)
   230d8:	481d      	ldr	r0, [pc, #116]	; (23150 <z_sched_start+0x98>)
   230da:	2381      	movs	r3, #129	; 0x81
   230dc:	f004 fa0b 	bl	274f6 <printk>
   230e0:	4918      	ldr	r1, [pc, #96]	; (23144 <z_sched_start+0x8c>)
   230e2:	481c      	ldr	r0, [pc, #112]	; (23154 <z_sched_start+0x9c>)
   230e4:	f004 fa07 	bl	274f6 <printk>
   230e8:	4817      	ldr	r0, [pc, #92]	; (23148 <z_sched_start+0x90>)
   230ea:	2181      	movs	r1, #129	; 0x81
   230ec:	f004 fca8 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   230f0:	4814      	ldr	r0, [pc, #80]	; (23144 <z_sched_start+0x8c>)
   230f2:	f7fe f8c3 	bl	2127c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   230f6:	7b63      	ldrb	r3, [r4, #13]
   230f8:	075a      	lsls	r2, r3, #29
   230fa:	d416      	bmi.n	2312a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230fc:	4811      	ldr	r0, [pc, #68]	; (23144 <z_sched_start+0x8c>)
   230fe:	f7fe f8ad 	bl	2125c <z_spin_unlock_valid>
   23102:	b968      	cbnz	r0, 23120 <z_sched_start+0x68>
   23104:	4a10      	ldr	r2, [pc, #64]	; (23148 <z_sched_start+0x90>)
   23106:	4914      	ldr	r1, [pc, #80]	; (23158 <z_sched_start+0xa0>)
   23108:	4811      	ldr	r0, [pc, #68]	; (23150 <z_sched_start+0x98>)
   2310a:	23ac      	movs	r3, #172	; 0xac
   2310c:	f004 f9f3 	bl	274f6 <printk>
   23110:	490c      	ldr	r1, [pc, #48]	; (23144 <z_sched_start+0x8c>)
   23112:	4812      	ldr	r0, [pc, #72]	; (2315c <z_sched_start+0xa4>)
   23114:	f004 f9ef 	bl	274f6 <printk>
   23118:	480b      	ldr	r0, [pc, #44]	; (23148 <z_sched_start+0x90>)
   2311a:	21ac      	movs	r1, #172	; 0xac
   2311c:	f004 fc90 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23120:	f385 8811 	msr	BASEPRI, r5
   23124:	f3bf 8f6f 	isb	sy
}
   23128:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2312a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2312e:	4620      	mov	r0, r4
   23130:	7363      	strb	r3, [r4, #13]
   23132:	f7ff ff25 	bl	22f80 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23136:	4629      	mov	r1, r5
   23138:	4802      	ldr	r0, [pc, #8]	; (23144 <z_sched_start+0x8c>)
}
   2313a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2313e:	f7ff bafb 	b.w	22738 <z_reschedule>
   23142:	bf00      	nop
   23144:	20003424 	.word	0x20003424
   23148:	0002dd93 	.word	0x0002dd93
   2314c:	0002dde5 	.word	0x0002dde5
   23150:	0002dcd3 	.word	0x0002dcd3
   23154:	0002ddfa 	.word	0x0002ddfa
   23158:	0002ddb9 	.word	0x0002ddb9
   2315c:	0002ddd0 	.word	0x0002ddd0

00023160 <z_thread_timeout>:
{
   23160:	b570      	push	{r4, r5, r6, lr}
   23162:	4604      	mov	r4, r0
	__asm__ volatile(
   23164:	f04f 0340 	mov.w	r3, #64	; 0x40
   23168:	f3ef 8611 	mrs	r6, BASEPRI
   2316c:	f383 8811 	msr	BASEPRI, r3
   23170:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23174:	4820      	ldr	r0, [pc, #128]	; (231f8 <z_thread_timeout+0x98>)
   23176:	f7fe f863 	bl	21240 <z_spin_lock_valid>
   2317a:	b968      	cbnz	r0, 23198 <z_thread_timeout+0x38>
   2317c:	4a1f      	ldr	r2, [pc, #124]	; (231fc <z_thread_timeout+0x9c>)
   2317e:	4920      	ldr	r1, [pc, #128]	; (23200 <z_thread_timeout+0xa0>)
   23180:	4820      	ldr	r0, [pc, #128]	; (23204 <z_thread_timeout+0xa4>)
   23182:	2381      	movs	r3, #129	; 0x81
   23184:	f004 f9b7 	bl	274f6 <printk>
   23188:	491b      	ldr	r1, [pc, #108]	; (231f8 <z_thread_timeout+0x98>)
   2318a:	481f      	ldr	r0, [pc, #124]	; (23208 <z_thread_timeout+0xa8>)
   2318c:	f004 f9b3 	bl	274f6 <printk>
   23190:	481a      	ldr	r0, [pc, #104]	; (231fc <z_thread_timeout+0x9c>)
   23192:	2181      	movs	r1, #129	; 0x81
   23194:	f004 fc54 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23198:	4817      	ldr	r0, [pc, #92]	; (231f8 <z_thread_timeout+0x98>)
   2319a:	f7fe f86f 	bl	2127c <z_spin_lock_set_owner>
		if (!killed) {
   2319e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   231a2:	f013 0f28 	tst.w	r3, #40	; 0x28
   231a6:	d110      	bne.n	231ca <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   231a8:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   231ac:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   231b0:	b113      	cbz	r3, 231b8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   231b2:	4628      	mov	r0, r5
   231b4:	f7ff fb9a 	bl	228ec <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   231b8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   231bc:	f023 0314 	bic.w	r3, r3, #20
   231c0:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   231c4:	4628      	mov	r0, r5
   231c6:	f7ff fedb 	bl	22f80 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231ca:	480b      	ldr	r0, [pc, #44]	; (231f8 <z_thread_timeout+0x98>)
   231cc:	f7fe f846 	bl	2125c <z_spin_unlock_valid>
   231d0:	b968      	cbnz	r0, 231ee <z_thread_timeout+0x8e>
   231d2:	4a0a      	ldr	r2, [pc, #40]	; (231fc <z_thread_timeout+0x9c>)
   231d4:	490d      	ldr	r1, [pc, #52]	; (2320c <z_thread_timeout+0xac>)
   231d6:	480b      	ldr	r0, [pc, #44]	; (23204 <z_thread_timeout+0xa4>)
   231d8:	23ac      	movs	r3, #172	; 0xac
   231da:	f004 f98c 	bl	274f6 <printk>
   231de:	4906      	ldr	r1, [pc, #24]	; (231f8 <z_thread_timeout+0x98>)
   231e0:	480b      	ldr	r0, [pc, #44]	; (23210 <z_thread_timeout+0xb0>)
   231e2:	f004 f988 	bl	274f6 <printk>
   231e6:	4805      	ldr	r0, [pc, #20]	; (231fc <z_thread_timeout+0x9c>)
   231e8:	21ac      	movs	r1, #172	; 0xac
   231ea:	f004 fc29 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   231ee:	f386 8811 	msr	BASEPRI, r6
   231f2:	f3bf 8f6f 	isb	sy
}
   231f6:	bd70      	pop	{r4, r5, r6, pc}
   231f8:	20003424 	.word	0x20003424
   231fc:	0002dd93 	.word	0x0002dd93
   23200:	0002dde5 	.word	0x0002dde5
   23204:	0002dcd3 	.word	0x0002dcd3
   23208:	0002ddfa 	.word	0x0002ddfa
   2320c:	0002ddb9 	.word	0x0002ddb9
   23210:	0002ddd0 	.word	0x0002ddd0

00023214 <z_set_prio>:
{
   23214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23216:	4604      	mov	r4, r0
   23218:	460e      	mov	r6, r1
	__asm__ volatile(
   2321a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2321e:	f3ef 8711 	mrs	r7, BASEPRI
   23222:	f383 8811 	msr	BASEPRI, r3
   23226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2322a:	483d      	ldr	r0, [pc, #244]	; (23320 <z_set_prio+0x10c>)
   2322c:	f7fe f808 	bl	21240 <z_spin_lock_valid>
   23230:	b968      	cbnz	r0, 2324e <z_set_prio+0x3a>
   23232:	4a3c      	ldr	r2, [pc, #240]	; (23324 <z_set_prio+0x110>)
   23234:	493c      	ldr	r1, [pc, #240]	; (23328 <z_set_prio+0x114>)
   23236:	483d      	ldr	r0, [pc, #244]	; (2332c <z_set_prio+0x118>)
   23238:	2381      	movs	r3, #129	; 0x81
   2323a:	f004 f95c 	bl	274f6 <printk>
   2323e:	4938      	ldr	r1, [pc, #224]	; (23320 <z_set_prio+0x10c>)
   23240:	483b      	ldr	r0, [pc, #236]	; (23330 <z_set_prio+0x11c>)
   23242:	f004 f958 	bl	274f6 <printk>
   23246:	4837      	ldr	r0, [pc, #220]	; (23324 <z_set_prio+0x110>)
   23248:	2181      	movs	r1, #129	; 0x81
   2324a:	f004 fbf9 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2324e:	4834      	ldr	r0, [pc, #208]	; (23320 <z_set_prio+0x10c>)
   23250:	f7fe f814 	bl	2127c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23254:	7b63      	ldrb	r3, [r4, #13]
   23256:	06da      	lsls	r2, r3, #27
   23258:	b276      	sxtb	r6, r6
   2325a:	d15e      	bne.n	2331a <z_set_prio+0x106>
   2325c:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   2325e:	2d00      	cmp	r5, #0
   23260:	d15b      	bne.n	2331a <z_set_prio+0x106>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23266:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   23268:	4832      	ldr	r0, [pc, #200]	; (23334 <z_set_prio+0x120>)
   2326a:	4621      	mov	r1, r4
   2326c:	f7ff fb1c 	bl	228a8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23270:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   23272:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23274:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23278:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2327a:	4b2f      	ldr	r3, [pc, #188]	; (23338 <z_set_prio+0x124>)
   2327c:	429c      	cmp	r4, r3
   2327e:	d10b      	bne.n	23298 <z_set_prio+0x84>
   23280:	492e      	ldr	r1, [pc, #184]	; (2333c <z_set_prio+0x128>)
   23282:	482a      	ldr	r0, [pc, #168]	; (2332c <z_set_prio+0x118>)
   23284:	4a2e      	ldr	r2, [pc, #184]	; (23340 <z_set_prio+0x12c>)
   23286:	f240 33a6 	movw	r3, #934	; 0x3a6
   2328a:	f004 f934 	bl	274f6 <printk>
   2328e:	482c      	ldr	r0, [pc, #176]	; (23340 <z_set_prio+0x12c>)
   23290:	f240 31a6 	movw	r1, #934	; 0x3a6
   23294:	f004 fbd4 	bl	27a40 <assert_post_action>
	return list->head == list;
   23298:	492a      	ldr	r1, [pc, #168]	; (23344 <z_set_prio+0x130>)
   2329a:	460b      	mov	r3, r1
   2329c:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   232a0:	4298      	cmp	r0, r3
   232a2:	bf18      	it	ne
   232a4:	4605      	movne	r5, r0
   232a6:	2d00      	cmp	r5, #0
   232a8:	461a      	mov	r2, r3
   232aa:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   232ac:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   232ae:	bf38      	it	cc
   232b0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   232b2:	b36b      	cbz	r3, 23310 <z_set_prio+0xfc>
	int32_t b1 = thread_1->base.prio;
   232b4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   232b8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   232bc:	4286      	cmp	r6, r0
   232be:	d023      	beq.n	23308 <z_set_prio+0xf4>
		return b2 - b1;
   232c0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   232c2:	2800      	cmp	r0, #0
   232c4:	dd20      	ble.n	23308 <z_set_prio+0xf4>
	sys_dnode_t *const prev = successor->prev;
   232c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   232c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   232cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   232ce:	605c      	str	r4, [r3, #4]
			update_cache(1);
   232d0:	2001      	movs	r0, #1
   232d2:	f7ff fb79 	bl	229c8 <update_cache>
   232d6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232d8:	4811      	ldr	r0, [pc, #68]	; (23320 <z_set_prio+0x10c>)
   232da:	f7fd ffbf 	bl	2125c <z_spin_unlock_valid>
   232de:	b968      	cbnz	r0, 232fc <z_set_prio+0xe8>
   232e0:	4a10      	ldr	r2, [pc, #64]	; (23324 <z_set_prio+0x110>)
   232e2:	4919      	ldr	r1, [pc, #100]	; (23348 <z_set_prio+0x134>)
   232e4:	4811      	ldr	r0, [pc, #68]	; (2332c <z_set_prio+0x118>)
   232e6:	23ac      	movs	r3, #172	; 0xac
   232e8:	f004 f905 	bl	274f6 <printk>
   232ec:	490c      	ldr	r1, [pc, #48]	; (23320 <z_set_prio+0x10c>)
   232ee:	4817      	ldr	r0, [pc, #92]	; (2334c <z_set_prio+0x138>)
   232f0:	f004 f901 	bl	274f6 <printk>
   232f4:	480b      	ldr	r0, [pc, #44]	; (23324 <z_set_prio+0x110>)
   232f6:	21ac      	movs	r1, #172	; 0xac
   232f8:	f004 fba2 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   232fc:	f387 8811 	msr	BASEPRI, r7
   23300:	f3bf 8f6f 	isb	sy
}
   23304:	4620      	mov	r0, r4
   23306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   23308:	42ab      	cmp	r3, r5
   2330a:	d001      	beq.n	23310 <z_set_prio+0xfc>
   2330c:	681b      	ldr	r3, [r3, #0]
   2330e:	e7d0      	b.n	232b2 <z_set_prio+0x9e>
	node->prev = tail;
   23310:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   23314:	602c      	str	r4, [r5, #0]
	list->tail = node;
   23316:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   23318:	e7da      	b.n	232d0 <z_set_prio+0xbc>
			thread->base.prio = prio;
   2331a:	73a6      	strb	r6, [r4, #14]
   2331c:	2400      	movs	r4, #0
   2331e:	e7db      	b.n	232d8 <z_set_prio+0xc4>
   23320:	20003424 	.word	0x20003424
   23324:	0002dd93 	.word	0x0002dd93
   23328:	0002dde5 	.word	0x0002dde5
   2332c:	0002dcd3 	.word	0x0002dcd3
   23330:	0002ddfa 	.word	0x0002ddfa
   23334:	20003404 	.word	0x20003404
   23338:	20001fa8 	.word	0x20001fa8
   2333c:	00031d1d 	.word	0x00031d1d
   23340:	00031cfb 	.word	0x00031cfb
   23344:	200033dc 	.word	0x200033dc
   23348:	0002ddb9 	.word	0x0002ddb9
   2334c:	0002ddd0 	.word	0x0002ddd0

00023350 <z_unpend1_no_timeout>:
{
   23350:	b538      	push	{r3, r4, r5, lr}
   23352:	4604      	mov	r4, r0
	__asm__ volatile(
   23354:	f04f 0340 	mov.w	r3, #64	; 0x40
   23358:	f3ef 8511 	mrs	r5, BASEPRI
   2335c:	f383 8811 	msr	BASEPRI, r3
   23360:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23364:	4819      	ldr	r0, [pc, #100]	; (233cc <z_unpend1_no_timeout+0x7c>)
   23366:	f7fd ff6b 	bl	21240 <z_spin_lock_valid>
   2336a:	b968      	cbnz	r0, 23388 <z_unpend1_no_timeout+0x38>
   2336c:	4a18      	ldr	r2, [pc, #96]	; (233d0 <z_unpend1_no_timeout+0x80>)
   2336e:	4919      	ldr	r1, [pc, #100]	; (233d4 <z_unpend1_no_timeout+0x84>)
   23370:	4819      	ldr	r0, [pc, #100]	; (233d8 <z_unpend1_no_timeout+0x88>)
   23372:	2381      	movs	r3, #129	; 0x81
   23374:	f004 f8bf 	bl	274f6 <printk>
   23378:	4914      	ldr	r1, [pc, #80]	; (233cc <z_unpend1_no_timeout+0x7c>)
   2337a:	4818      	ldr	r0, [pc, #96]	; (233dc <z_unpend1_no_timeout+0x8c>)
   2337c:	f004 f8bb 	bl	274f6 <printk>
   23380:	4813      	ldr	r0, [pc, #76]	; (233d0 <z_unpend1_no_timeout+0x80>)
   23382:	2181      	movs	r1, #129	; 0x81
   23384:	f004 fb5c 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23388:	4810      	ldr	r0, [pc, #64]	; (233cc <z_unpend1_no_timeout+0x7c>)
   2338a:	f7fd ff77 	bl	2127c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2338e:	4620      	mov	r0, r4
   23390:	f009 f9ea 	bl	2c768 <z_priq_dumb_best>
		if (thread != NULL) {
   23394:	4604      	mov	r4, r0
   23396:	b108      	cbz	r0, 2339c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   23398:	f7ff faa8 	bl	228ec <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2339c:	480b      	ldr	r0, [pc, #44]	; (233cc <z_unpend1_no_timeout+0x7c>)
   2339e:	f7fd ff5d 	bl	2125c <z_spin_unlock_valid>
   233a2:	b968      	cbnz	r0, 233c0 <z_unpend1_no_timeout+0x70>
   233a4:	4a0a      	ldr	r2, [pc, #40]	; (233d0 <z_unpend1_no_timeout+0x80>)
   233a6:	490e      	ldr	r1, [pc, #56]	; (233e0 <z_unpend1_no_timeout+0x90>)
   233a8:	480b      	ldr	r0, [pc, #44]	; (233d8 <z_unpend1_no_timeout+0x88>)
   233aa:	23ac      	movs	r3, #172	; 0xac
   233ac:	f004 f8a3 	bl	274f6 <printk>
   233b0:	4906      	ldr	r1, [pc, #24]	; (233cc <z_unpend1_no_timeout+0x7c>)
   233b2:	480c      	ldr	r0, [pc, #48]	; (233e4 <z_unpend1_no_timeout+0x94>)
   233b4:	f004 f89f 	bl	274f6 <printk>
   233b8:	4805      	ldr	r0, [pc, #20]	; (233d0 <z_unpend1_no_timeout+0x80>)
   233ba:	21ac      	movs	r1, #172	; 0xac
   233bc:	f004 fb40 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   233c0:	f385 8811 	msr	BASEPRI, r5
   233c4:	f3bf 8f6f 	isb	sy
}
   233c8:	4620      	mov	r0, r4
   233ca:	bd38      	pop	{r3, r4, r5, pc}
   233cc:	20003424 	.word	0x20003424
   233d0:	0002dd93 	.word	0x0002dd93
   233d4:	0002dde5 	.word	0x0002dde5
   233d8:	0002dcd3 	.word	0x0002dcd3
   233dc:	0002ddfa 	.word	0x0002ddfa
   233e0:	0002ddb9 	.word	0x0002ddb9
   233e4:	0002ddd0 	.word	0x0002ddd0

000233e8 <z_unpend_first_thread>:
{
   233e8:	b538      	push	{r3, r4, r5, lr}
   233ea:	4604      	mov	r4, r0
	__asm__ volatile(
   233ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   233f0:	f3ef 8511 	mrs	r5, BASEPRI
   233f4:	f383 8811 	msr	BASEPRI, r3
   233f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233fc:	481b      	ldr	r0, [pc, #108]	; (2346c <z_unpend_first_thread+0x84>)
   233fe:	f7fd ff1f 	bl	21240 <z_spin_lock_valid>
   23402:	b968      	cbnz	r0, 23420 <z_unpend_first_thread+0x38>
   23404:	4a1a      	ldr	r2, [pc, #104]	; (23470 <z_unpend_first_thread+0x88>)
   23406:	491b      	ldr	r1, [pc, #108]	; (23474 <z_unpend_first_thread+0x8c>)
   23408:	481b      	ldr	r0, [pc, #108]	; (23478 <z_unpend_first_thread+0x90>)
   2340a:	2381      	movs	r3, #129	; 0x81
   2340c:	f004 f873 	bl	274f6 <printk>
   23410:	4916      	ldr	r1, [pc, #88]	; (2346c <z_unpend_first_thread+0x84>)
   23412:	481a      	ldr	r0, [pc, #104]	; (2347c <z_unpend_first_thread+0x94>)
   23414:	f004 f86f 	bl	274f6 <printk>
   23418:	4815      	ldr	r0, [pc, #84]	; (23470 <z_unpend_first_thread+0x88>)
   2341a:	2181      	movs	r1, #129	; 0x81
   2341c:	f004 fb10 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23420:	4812      	ldr	r0, [pc, #72]	; (2346c <z_unpend_first_thread+0x84>)
   23422:	f7fd ff2b 	bl	2127c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   23426:	4620      	mov	r0, r4
   23428:	f009 f99e 	bl	2c768 <z_priq_dumb_best>
		if (thread != NULL) {
   2342c:	4604      	mov	r4, r0
   2342e:	b128      	cbz	r0, 2343c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   23430:	f7ff fa5c 	bl	228ec <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   23434:	f104 0018 	add.w	r0, r4, #24
   23438:	f000 fc30 	bl	23c9c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2343c:	480b      	ldr	r0, [pc, #44]	; (2346c <z_unpend_first_thread+0x84>)
   2343e:	f7fd ff0d 	bl	2125c <z_spin_unlock_valid>
   23442:	b968      	cbnz	r0, 23460 <z_unpend_first_thread+0x78>
   23444:	4a0a      	ldr	r2, [pc, #40]	; (23470 <z_unpend_first_thread+0x88>)
   23446:	490e      	ldr	r1, [pc, #56]	; (23480 <z_unpend_first_thread+0x98>)
   23448:	480b      	ldr	r0, [pc, #44]	; (23478 <z_unpend_first_thread+0x90>)
   2344a:	23ac      	movs	r3, #172	; 0xac
   2344c:	f004 f853 	bl	274f6 <printk>
   23450:	4906      	ldr	r1, [pc, #24]	; (2346c <z_unpend_first_thread+0x84>)
   23452:	480c      	ldr	r0, [pc, #48]	; (23484 <z_unpend_first_thread+0x9c>)
   23454:	f004 f84f 	bl	274f6 <printk>
   23458:	4805      	ldr	r0, [pc, #20]	; (23470 <z_unpend_first_thread+0x88>)
   2345a:	21ac      	movs	r1, #172	; 0xac
   2345c:	f004 faf0 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23460:	f385 8811 	msr	BASEPRI, r5
   23464:	f3bf 8f6f 	isb	sy
}
   23468:	4620      	mov	r0, r4
   2346a:	bd38      	pop	{r3, r4, r5, pc}
   2346c:	20003424 	.word	0x20003424
   23470:	0002dd93 	.word	0x0002dd93
   23474:	0002dde5 	.word	0x0002dde5
   23478:	0002dcd3 	.word	0x0002dcd3
   2347c:	0002ddfa 	.word	0x0002ddfa
   23480:	0002ddb9 	.word	0x0002ddb9
   23484:	0002ddd0 	.word	0x0002ddd0

00023488 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   23488:	4b04      	ldr	r3, [pc, #16]	; (2349c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2348a:	2100      	movs	r1, #0
   2348c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   23490:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   23494:	4608      	mov	r0, r1
   23496:	f7ff b8a1 	b.w	225dc <k_sched_time_slice_set>
   2349a:	bf00      	nop
   2349c:	200033dc 	.word	0x200033dc

000234a0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   234a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234a2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   234a6:	b173      	cbz	r3, 234c6 <z_impl_k_yield+0x26>
   234a8:	4942      	ldr	r1, [pc, #264]	; (235b4 <z_impl_k_yield+0x114>)
   234aa:	4a43      	ldr	r2, [pc, #268]	; (235b8 <z_impl_k_yield+0x118>)
   234ac:	4843      	ldr	r0, [pc, #268]	; (235bc <z_impl_k_yield+0x11c>)
   234ae:	f240 43a1 	movw	r3, #1185	; 0x4a1
   234b2:	f004 f820 	bl	274f6 <printk>
   234b6:	4842      	ldr	r0, [pc, #264]	; (235c0 <z_impl_k_yield+0x120>)
   234b8:	f004 f81d 	bl	274f6 <printk>
   234bc:	483e      	ldr	r0, [pc, #248]	; (235b8 <z_impl_k_yield+0x118>)
   234be:	f240 41a1 	movw	r1, #1185	; 0x4a1
   234c2:	f004 fabd 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   234c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   234ca:	f3ef 8611 	mrs	r6, BASEPRI
   234ce:	f383 8811 	msr	BASEPRI, r3
   234d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   234d6:	483b      	ldr	r0, [pc, #236]	; (235c4 <z_impl_k_yield+0x124>)
   234d8:	f7fd feb2 	bl	21240 <z_spin_lock_valid>
   234dc:	b968      	cbnz	r0, 234fa <z_impl_k_yield+0x5a>
   234de:	4a3a      	ldr	r2, [pc, #232]	; (235c8 <z_impl_k_yield+0x128>)
   234e0:	493a      	ldr	r1, [pc, #232]	; (235cc <z_impl_k_yield+0x12c>)
   234e2:	4836      	ldr	r0, [pc, #216]	; (235bc <z_impl_k_yield+0x11c>)
   234e4:	2381      	movs	r3, #129	; 0x81
   234e6:	f004 f806 	bl	274f6 <printk>
   234ea:	4936      	ldr	r1, [pc, #216]	; (235c4 <z_impl_k_yield+0x124>)
   234ec:	4838      	ldr	r0, [pc, #224]	; (235d0 <z_impl_k_yield+0x130>)
   234ee:	f004 f802 	bl	274f6 <printk>
   234f2:	4835      	ldr	r0, [pc, #212]	; (235c8 <z_impl_k_yield+0x128>)
   234f4:	2181      	movs	r1, #129	; 0x81
   234f6:	f004 faa3 	bl	27a40 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   234fa:	4d36      	ldr	r5, [pc, #216]	; (235d4 <z_impl_k_yield+0x134>)
	z_spin_lock_set_owner(l);
   234fc:	4831      	ldr	r0, [pc, #196]	; (235c4 <z_impl_k_yield+0x124>)
   234fe:	f7fd febd 	bl	2127c <z_spin_lock_set_owner>
   23502:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23504:	7b4b      	ldrb	r3, [r1, #13]
   23506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2350a:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   2350c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   23510:	f7ff f9ca 	bl	228a8 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   23514:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23516:	7b63      	ldrb	r3, [r4, #13]
   23518:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2351c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2351e:	4b2e      	ldr	r3, [pc, #184]	; (235d8 <z_impl_k_yield+0x138>)
   23520:	429c      	cmp	r4, r3
   23522:	d10b      	bne.n	2353c <z_impl_k_yield+0x9c>
   23524:	492d      	ldr	r1, [pc, #180]	; (235dc <z_impl_k_yield+0x13c>)
   23526:	4825      	ldr	r0, [pc, #148]	; (235bc <z_impl_k_yield+0x11c>)
   23528:	4a23      	ldr	r2, [pc, #140]	; (235b8 <z_impl_k_yield+0x118>)
   2352a:	f240 33a6 	movw	r3, #934	; 0x3a6
   2352e:	f003 ffe2 	bl	274f6 <printk>
   23532:	4821      	ldr	r0, [pc, #132]	; (235b8 <z_impl_k_yield+0x118>)
   23534:	f240 31a6 	movw	r1, #934	; 0x3a6
   23538:	f004 fa82 	bl	27a40 <assert_post_action>
	return list->head == list;
   2353c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2353e:	4828      	ldr	r0, [pc, #160]	; (235e0 <z_impl_k_yield+0x140>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23540:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23542:	4283      	cmp	r3, r0
   23544:	bf08      	it	eq
   23546:	2300      	moveq	r3, #0
   23548:	2b00      	cmp	r3, #0
   2354a:	bf38      	it	cc
   2354c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2354e:	b35b      	cbz	r3, 235a8 <z_impl_k_yield+0x108>
	int32_t b1 = thread_1->base.prio;
   23550:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23554:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23558:	4297      	cmp	r7, r2
   2355a:	d021      	beq.n	235a0 <z_impl_k_yield+0x100>
		return b2 - b1;
   2355c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   2355e:	2a00      	cmp	r2, #0
   23560:	dd1e      	ble.n	235a0 <z_impl_k_yield+0x100>
	sys_dnode_t *const prev = successor->prev;
   23562:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23564:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23568:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2356a:	605c      	str	r4, [r3, #4]
	update_cache(1);
   2356c:	2001      	movs	r0, #1
   2356e:	f7ff fa2b 	bl	229c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23572:	4814      	ldr	r0, [pc, #80]	; (235c4 <z_impl_k_yield+0x124>)
   23574:	f7fd fe72 	bl	2125c <z_spin_unlock_valid>
   23578:	b968      	cbnz	r0, 23596 <z_impl_k_yield+0xf6>
   2357a:	4a13      	ldr	r2, [pc, #76]	; (235c8 <z_impl_k_yield+0x128>)
   2357c:	4919      	ldr	r1, [pc, #100]	; (235e4 <z_impl_k_yield+0x144>)
   2357e:	480f      	ldr	r0, [pc, #60]	; (235bc <z_impl_k_yield+0x11c>)
   23580:	23c3      	movs	r3, #195	; 0xc3
   23582:	f003 ffb8 	bl	274f6 <printk>
   23586:	490f      	ldr	r1, [pc, #60]	; (235c4 <z_impl_k_yield+0x124>)
   23588:	4817      	ldr	r0, [pc, #92]	; (235e8 <z_impl_k_yield+0x148>)
   2358a:	f003 ffb4 	bl	274f6 <printk>
   2358e:	480e      	ldr	r0, [pc, #56]	; (235c8 <z_impl_k_yield+0x128>)
   23590:	21c3      	movs	r1, #195	; 0xc3
   23592:	f004 fa55 	bl	27a40 <assert_post_action>
   23596:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   23598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2359c:	f7f0 bdf4 	b.w	14188 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   235a0:	428b      	cmp	r3, r1
   235a2:	d001      	beq.n	235a8 <z_impl_k_yield+0x108>
   235a4:	681b      	ldr	r3, [r3, #0]
   235a6:	e7d2      	b.n	2354e <z_impl_k_yield+0xae>
	node->prev = tail;
   235a8:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   235ac:	600c      	str	r4, [r1, #0]
	list->tail = node;
   235ae:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   235b0:	e7dc      	b.n	2356c <z_impl_k_yield+0xcc>
   235b2:	bf00      	nop
   235b4:	00031a33 	.word	0x00031a33
   235b8:	00031cfb 	.word	0x00031cfb
   235bc:	0002dcd3 	.word	0x0002dcd3
   235c0:	00030be6 	.word	0x00030be6
   235c4:	20003424 	.word	0x20003424
   235c8:	0002dd93 	.word	0x0002dd93
   235cc:	0002dde5 	.word	0x0002dde5
   235d0:	0002ddfa 	.word	0x0002ddfa
   235d4:	200033dc 	.word	0x200033dc
   235d8:	20001fa8 	.word	0x20001fa8
   235dc:	00031d1d 	.word	0x00031d1d
   235e0:	20003404 	.word	0x20003404
   235e4:	0002ddb9 	.word	0x0002ddb9
   235e8:	0002ddd0 	.word	0x0002ddd0

000235ec <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   235ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235f0:	4604      	mov	r4, r0
   235f2:	460d      	mov	r5, r1
   235f4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   235f8:	b173      	cbz	r3, 23618 <z_tick_sleep+0x2c>
   235fa:	4945      	ldr	r1, [pc, #276]	; (23710 <z_tick_sleep+0x124>)
   235fc:	4a45      	ldr	r2, [pc, #276]	; (23714 <z_tick_sleep+0x128>)
   235fe:	4846      	ldr	r0, [pc, #280]	; (23718 <z_tick_sleep+0x12c>)
   23600:	f240 43be 	movw	r3, #1214	; 0x4be
   23604:	f003 ff77 	bl	274f6 <printk>
   23608:	4844      	ldr	r0, [pc, #272]	; (2371c <z_tick_sleep+0x130>)
   2360a:	f003 ff74 	bl	274f6 <printk>
   2360e:	4841      	ldr	r0, [pc, #260]	; (23714 <z_tick_sleep+0x128>)
   23610:	f240 41be 	movw	r1, #1214	; 0x4be
   23614:	f004 fa14 	bl	27a40 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   23618:	ea54 0305 	orrs.w	r3, r4, r5
   2361c:	d104      	bne.n	23628 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   2361e:	f7ff ff3f 	bl	234a0 <z_impl_k_yield>
		k_yield();
		return 0;
   23622:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   23624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   23628:	f06f 0301 	mvn.w	r3, #1
   2362c:	1b1e      	subs	r6, r3, r4
   2362e:	f04f 33ff 	mov.w	r3, #4294967295
   23632:	eb63 0705 	sbc.w	r7, r3, r5
   23636:	2e01      	cmp	r6, #1
   23638:	f177 0300 	sbcs.w	r3, r7, #0
   2363c:	da64      	bge.n	23708 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2363e:	f009 f8ad 	bl	2c79c <sys_clock_tick_get_32>
   23642:	1906      	adds	r6, r0, r4
   23644:	f04f 0340 	mov.w	r3, #64	; 0x40
   23648:	f3ef 8811 	mrs	r8, BASEPRI
   2364c:	f383 8811 	msr	BASEPRI, r3
   23650:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23654:	4832      	ldr	r0, [pc, #200]	; (23720 <z_tick_sleep+0x134>)
   23656:	f7fd fdf3 	bl	21240 <z_spin_lock_valid>
   2365a:	b968      	cbnz	r0, 23678 <z_tick_sleep+0x8c>
   2365c:	4a31      	ldr	r2, [pc, #196]	; (23724 <z_tick_sleep+0x138>)
   2365e:	4932      	ldr	r1, [pc, #200]	; (23728 <z_tick_sleep+0x13c>)
   23660:	482d      	ldr	r0, [pc, #180]	; (23718 <z_tick_sleep+0x12c>)
   23662:	2381      	movs	r3, #129	; 0x81
   23664:	f003 ff47 	bl	274f6 <printk>
   23668:	492d      	ldr	r1, [pc, #180]	; (23720 <z_tick_sleep+0x134>)
   2366a:	4830      	ldr	r0, [pc, #192]	; (2372c <z_tick_sleep+0x140>)
   2366c:	f003 ff43 	bl	274f6 <printk>
   23670:	482c      	ldr	r0, [pc, #176]	; (23724 <z_tick_sleep+0x138>)
   23672:	2181      	movs	r1, #129	; 0x81
   23674:	f004 f9e4 	bl	27a40 <assert_post_action>
	pending_current = _current;
   23678:	4f2d      	ldr	r7, [pc, #180]	; (23730 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   2367a:	4829      	ldr	r0, [pc, #164]	; (23720 <z_tick_sleep+0x134>)
   2367c:	f7fd fdfe 	bl	2127c <z_spin_lock_set_owner>
   23680:	4b2c      	ldr	r3, [pc, #176]	; (23734 <z_tick_sleep+0x148>)
   23682:	68b8      	ldr	r0, [r7, #8]
   23684:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   23686:	f7ff f9d7 	bl	22a38 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2368a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2368c:	492a      	ldr	r1, [pc, #168]	; (23738 <z_tick_sleep+0x14c>)
   2368e:	4622      	mov	r2, r4
   23690:	462b      	mov	r3, r5
   23692:	3018      	adds	r0, #24
   23694:	f000 fa2e 	bl	23af4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23698:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2369a:	4821      	ldr	r0, [pc, #132]	; (23720 <z_tick_sleep+0x134>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2369c:	7b53      	ldrb	r3, [r2, #13]
   2369e:	f043 0310 	orr.w	r3, r3, #16
   236a2:	7353      	strb	r3, [r2, #13]
   236a4:	f7fd fdda 	bl	2125c <z_spin_unlock_valid>
   236a8:	b968      	cbnz	r0, 236c6 <z_tick_sleep+0xda>
   236aa:	4a1e      	ldr	r2, [pc, #120]	; (23724 <z_tick_sleep+0x138>)
   236ac:	4923      	ldr	r1, [pc, #140]	; (2373c <z_tick_sleep+0x150>)
   236ae:	481a      	ldr	r0, [pc, #104]	; (23718 <z_tick_sleep+0x12c>)
   236b0:	23c3      	movs	r3, #195	; 0xc3
   236b2:	f003 ff20 	bl	274f6 <printk>
   236b6:	491a      	ldr	r1, [pc, #104]	; (23720 <z_tick_sleep+0x134>)
   236b8:	4821      	ldr	r0, [pc, #132]	; (23740 <z_tick_sleep+0x154>)
   236ba:	f003 ff1c 	bl	274f6 <printk>
   236be:	4819      	ldr	r0, [pc, #100]	; (23724 <z_tick_sleep+0x138>)
   236c0:	21c3      	movs	r1, #195	; 0xc3
   236c2:	f004 f9bd 	bl	27a40 <assert_post_action>
   236c6:	4640      	mov	r0, r8
   236c8:	f7f0 fd5e 	bl	14188 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   236cc:	68bb      	ldr	r3, [r7, #8]
   236ce:	7b5b      	ldrb	r3, [r3, #13]
   236d0:	06db      	lsls	r3, r3, #27
   236d2:	d50e      	bpl.n	236f2 <z_tick_sleep+0x106>
   236d4:	491b      	ldr	r1, [pc, #108]	; (23744 <z_tick_sleep+0x158>)
   236d6:	4a0f      	ldr	r2, [pc, #60]	; (23714 <z_tick_sleep+0x128>)
   236d8:	480f      	ldr	r0, [pc, #60]	; (23718 <z_tick_sleep+0x12c>)
   236da:	f240 43df 	movw	r3, #1247	; 0x4df
   236de:	f003 ff0a 	bl	274f6 <printk>
   236e2:	480e      	ldr	r0, [pc, #56]	; (2371c <z_tick_sleep+0x130>)
   236e4:	f003 ff07 	bl	274f6 <printk>
   236e8:	480a      	ldr	r0, [pc, #40]	; (23714 <z_tick_sleep+0x128>)
   236ea:	f240 41df 	movw	r1, #1247	; 0x4df
   236ee:	f004 f9a7 	bl	27a40 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   236f2:	f009 f853 	bl	2c79c <sys_clock_tick_get_32>
   236f6:	1a30      	subs	r0, r6, r0
   236f8:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   236fc:	2801      	cmp	r0, #1
   236fe:	f171 0300 	sbcs.w	r3, r1, #0
   23702:	bfb8      	it	lt
   23704:	2000      	movlt	r0, #0
   23706:	e78d      	b.n	23624 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   23708:	f06f 0601 	mvn.w	r6, #1
   2370c:	1b36      	subs	r6, r6, r4
   2370e:	e799      	b.n	23644 <z_tick_sleep+0x58>
   23710:	00031a33 	.word	0x00031a33
   23714:	00031cfb 	.word	0x00031cfb
   23718:	0002dcd3 	.word	0x0002dcd3
   2371c:	00030be6 	.word	0x00030be6
   23720:	20003424 	.word	0x20003424
   23724:	0002dd93 	.word	0x0002dd93
   23728:	0002dde5 	.word	0x0002dde5
   2372c:	0002ddfa 	.word	0x0002ddfa
   23730:	200033dc 	.word	0x200033dc
   23734:	20003420 	.word	0x20003420
   23738:	00023161 	.word	0x00023161
   2373c:	0002ddb9 	.word	0x0002ddb9
   23740:	0002ddd0 	.word	0x0002ddd0
   23744:	00031dad 	.word	0x00031dad

00023748 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   23748:	b538      	push	{r3, r4, r5, lr}
   2374a:	4604      	mov	r4, r0
   2374c:	460d      	mov	r5, r1
   2374e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23752:	b173      	cbz	r3, 23772 <z_impl_k_sleep+0x2a>
   23754:	4913      	ldr	r1, [pc, #76]	; (237a4 <z_impl_k_sleep+0x5c>)
   23756:	4a14      	ldr	r2, [pc, #80]	; (237a8 <z_impl_k_sleep+0x60>)
   23758:	4814      	ldr	r0, [pc, #80]	; (237ac <z_impl_k_sleep+0x64>)
   2375a:	f240 43ee 	movw	r3, #1262	; 0x4ee
   2375e:	f003 feca 	bl	274f6 <printk>
   23762:	4813      	ldr	r0, [pc, #76]	; (237b0 <z_impl_k_sleep+0x68>)
   23764:	f003 fec7 	bl	274f6 <printk>
   23768:	480f      	ldr	r0, [pc, #60]	; (237a8 <z_impl_k_sleep+0x60>)
   2376a:	f240 41ee 	movw	r1, #1262	; 0x4ee
   2376e:	f004 f967 	bl	27a40 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23772:	1c6b      	adds	r3, r5, #1
   23774:	bf08      	it	eq
   23776:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2377a:	d106      	bne.n	2378a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   2377c:	4b0d      	ldr	r3, [pc, #52]	; (237b4 <z_impl_k_sleep+0x6c>)
   2377e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23780:	f7ff fa48 	bl	22c14 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   23784:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   23788:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   2378a:	4620      	mov	r0, r4
   2378c:	4629      	mov	r1, r5
   2378e:	f7ff ff2d 	bl	235ec <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   23792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23796:	fb80 3403 	smull	r3, r4, r0, r3
   2379a:	0bd8      	lsrs	r0, r3, #15
   2379c:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   237a0:	e7f2      	b.n	23788 <z_impl_k_sleep+0x40>
   237a2:	bf00      	nop
   237a4:	00031a33 	.word	0x00031a33
   237a8:	00031cfb 	.word	0x00031cfb
   237ac:	0002dcd3 	.word	0x0002dcd3
   237b0:	00030be6 	.word	0x00030be6
   237b4:	200033dc 	.word	0x200033dc

000237b8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   237b8:	4b01      	ldr	r3, [pc, #4]	; (237c0 <z_impl_k_current_get+0x8>)
   237ba:	6898      	ldr	r0, [r3, #8]
   237bc:	4770      	bx	lr
   237be:	bf00      	nop
   237c0:	200033dc 	.word	0x200033dc

000237c4 <z_impl_k_is_preempt_thread>:
   237c4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   237c8:	b93b      	cbnz	r3, 237da <z_impl_k_is_preempt_thread+0x16>
   237ca:	4b05      	ldr	r3, [pc, #20]	; (237e0 <z_impl_k_is_preempt_thread+0x1c>)
   237cc:	689b      	ldr	r3, [r3, #8]
   237ce:	89d8      	ldrh	r0, [r3, #14]
   237d0:	287f      	cmp	r0, #127	; 0x7f
   237d2:	bf8c      	ite	hi
   237d4:	2000      	movhi	r0, #0
   237d6:	2001      	movls	r0, #1
   237d8:	4770      	bx	lr
   237da:	2000      	movs	r0, #0
}
   237dc:	4770      	bx	lr
   237de:	bf00      	nop
   237e0:	200033dc 	.word	0x200033dc

000237e4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   237e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237e8:	4604      	mov	r4, r0
   237ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   237ee:	f3ef 8611 	mrs	r6, BASEPRI
   237f2:	f383 8811 	msr	BASEPRI, r3
   237f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237fa:	4848      	ldr	r0, [pc, #288]	; (2391c <z_thread_abort+0x138>)
   237fc:	f7fd fd20 	bl	21240 <z_spin_lock_valid>
   23800:	b968      	cbnz	r0, 2381e <z_thread_abort+0x3a>
   23802:	4a47      	ldr	r2, [pc, #284]	; (23920 <z_thread_abort+0x13c>)
   23804:	4947      	ldr	r1, [pc, #284]	; (23924 <z_thread_abort+0x140>)
   23806:	4848      	ldr	r0, [pc, #288]	; (23928 <z_thread_abort+0x144>)
   23808:	2381      	movs	r3, #129	; 0x81
   2380a:	f003 fe74 	bl	274f6 <printk>
   2380e:	4943      	ldr	r1, [pc, #268]	; (2391c <z_thread_abort+0x138>)
   23810:	4846      	ldr	r0, [pc, #280]	; (2392c <z_thread_abort+0x148>)
   23812:	f003 fe70 	bl	274f6 <printk>
   23816:	4842      	ldr	r0, [pc, #264]	; (23920 <z_thread_abort+0x13c>)
   23818:	2181      	movs	r1, #129	; 0x81
   2381a:	f004 f911 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2381e:	483f      	ldr	r0, [pc, #252]	; (2391c <z_thread_abort+0x138>)
   23820:	f7fd fd2c 	bl	2127c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   23824:	7b63      	ldrb	r3, [r4, #13]
   23826:	071a      	lsls	r2, r3, #28
   23828:	d517      	bpl.n	2385a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2382a:	483c      	ldr	r0, [pc, #240]	; (2391c <z_thread_abort+0x138>)
   2382c:	f7fd fd16 	bl	2125c <z_spin_unlock_valid>
   23830:	b968      	cbnz	r0, 2384e <z_thread_abort+0x6a>
   23832:	4a3b      	ldr	r2, [pc, #236]	; (23920 <z_thread_abort+0x13c>)
   23834:	493e      	ldr	r1, [pc, #248]	; (23930 <z_thread_abort+0x14c>)
   23836:	483c      	ldr	r0, [pc, #240]	; (23928 <z_thread_abort+0x144>)
   23838:	23ac      	movs	r3, #172	; 0xac
   2383a:	f003 fe5c 	bl	274f6 <printk>
   2383e:	4937      	ldr	r1, [pc, #220]	; (2391c <z_thread_abort+0x138>)
   23840:	483c      	ldr	r0, [pc, #240]	; (23934 <z_thread_abort+0x150>)
   23842:	f003 fe58 	bl	274f6 <printk>
   23846:	4836      	ldr	r0, [pc, #216]	; (23920 <z_thread_abort+0x13c>)
   23848:	21ac      	movs	r1, #172	; 0xac
   2384a:	f004 f8f9 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   2384e:	f386 8811 	msr	BASEPRI, r6
   23852:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   23856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2385a:	f023 0220 	bic.w	r2, r3, #32
   2385e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   23862:	09d2      	lsrs	r2, r2, #7
   23864:	d142      	bne.n	238ec <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23866:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   23868:	68a3      	ldr	r3, [r4, #8]
   2386a:	b113      	cbz	r3, 23872 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   2386c:	4620      	mov	r0, r4
   2386e:	f7ff f83d 	bl	228ec <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   23872:	f104 0018 	add.w	r0, r4, #24
   23876:	f000 fa11 	bl	23c9c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2387a:	f104 0758 	add.w	r7, r4, #88	; 0x58
   2387e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   23882:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23884:	42bd      	cmp	r5, r7
   23886:	d001      	beq.n	2388c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23888:	2d00      	cmp	r5, #0
   2388a:	d139      	bne.n	23900 <z_thread_abort+0x11c>
		update_cache(1);
   2388c:	2001      	movs	r0, #1
   2388e:	f7ff f89b 	bl	229c8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   23892:	4b29      	ldr	r3, [pc, #164]	; (23938 <z_thread_abort+0x154>)
   23894:	689b      	ldr	r3, [r3, #8]
   23896:	42a3      	cmp	r3, r4
   23898:	d1c7      	bne.n	2382a <z_thread_abort+0x46>
   2389a:	f3ef 8305 	mrs	r3, IPSR
   2389e:	2b00      	cmp	r3, #0
   238a0:	d1c3      	bne.n	2382a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238a2:	481e      	ldr	r0, [pc, #120]	; (2391c <z_thread_abort+0x138>)
   238a4:	f7fd fcda 	bl	2125c <z_spin_unlock_valid>
   238a8:	b968      	cbnz	r0, 238c6 <z_thread_abort+0xe2>
   238aa:	4a1d      	ldr	r2, [pc, #116]	; (23920 <z_thread_abort+0x13c>)
   238ac:	4920      	ldr	r1, [pc, #128]	; (23930 <z_thread_abort+0x14c>)
   238ae:	481e      	ldr	r0, [pc, #120]	; (23928 <z_thread_abort+0x144>)
   238b0:	23c3      	movs	r3, #195	; 0xc3
   238b2:	f003 fe20 	bl	274f6 <printk>
   238b6:	4919      	ldr	r1, [pc, #100]	; (2391c <z_thread_abort+0x138>)
   238b8:	481e      	ldr	r0, [pc, #120]	; (23934 <z_thread_abort+0x150>)
   238ba:	f003 fe1c 	bl	274f6 <printk>
   238be:	4818      	ldr	r0, [pc, #96]	; (23920 <z_thread_abort+0x13c>)
   238c0:	21c3      	movs	r1, #195	; 0xc3
   238c2:	f004 f8bd 	bl	27a40 <assert_post_action>
   238c6:	4630      	mov	r0, r6
   238c8:	f7f0 fc5e 	bl	14188 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   238cc:	4a1b      	ldr	r2, [pc, #108]	; (2393c <z_thread_abort+0x158>)
   238ce:	491c      	ldr	r1, [pc, #112]	; (23940 <z_thread_abort+0x15c>)
   238d0:	4815      	ldr	r0, [pc, #84]	; (23928 <z_thread_abort+0x144>)
   238d2:	f240 6301 	movw	r3, #1537	; 0x601
   238d6:	f003 fe0e 	bl	274f6 <printk>
   238da:	481a      	ldr	r0, [pc, #104]	; (23944 <z_thread_abort+0x160>)
   238dc:	f003 fe0b 	bl	274f6 <printk>
   238e0:	4816      	ldr	r0, [pc, #88]	; (2393c <z_thread_abort+0x158>)
   238e2:	f240 6101 	movw	r1, #1537	; 0x601
   238e6:	f004 f8ab 	bl	27a40 <assert_post_action>
   238ea:	e79e      	b.n	2382a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   238ec:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   238f0:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   238f4:	4814      	ldr	r0, [pc, #80]	; (23948 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   238f6:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   238f8:	4621      	mov	r1, r4
   238fa:	f7fe ffd5 	bl	228a8 <z_priq_dumb_remove>
}
   238fe:	e7b3      	b.n	23868 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   23900:	4628      	mov	r0, r5
   23902:	f7fe fff3 	bl	228ec <unpend_thread_no_timeout>
   23906:	f105 0018 	add.w	r0, r5, #24
   2390a:	f000 f9c7 	bl	23c9c <z_abort_timeout>
   2390e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   23912:	4628      	mov	r0, r5
   23914:	f7ff fb34 	bl	22f80 <ready_thread>
   23918:	e7b3      	b.n	23882 <z_thread_abort+0x9e>
   2391a:	bf00      	nop
   2391c:	20003424 	.word	0x20003424
   23920:	0002dd93 	.word	0x0002dd93
   23924:	0002dde5 	.word	0x0002dde5
   23928:	0002dcd3 	.word	0x0002dcd3
   2392c:	0002ddfa 	.word	0x0002ddfa
   23930:	0002ddb9 	.word	0x0002ddb9
   23934:	0002ddd0 	.word	0x0002ddd0
   23938:	200033dc 	.word	0x200033dc
   2393c:	00031cfb 	.word	0x00031cfb
   23940:	00032142 	.word	0x00032142
   23944:	00031ded 	.word	0x00031ded
   23948:	20003404 	.word	0x20003404

0002394c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2394e:	4604      	mov	r4, r0
   23950:	460e      	mov	r6, r1
   23952:	4615      	mov	r5, r2
	__asm__ volatile(
   23954:	f04f 0340 	mov.w	r3, #64	; 0x40
   23958:	f3ef 8711 	mrs	r7, BASEPRI
   2395c:	f383 8811 	msr	BASEPRI, r3
   23960:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23964:	481e      	ldr	r0, [pc, #120]	; (239e0 <z_sched_wake+0x94>)
   23966:	f7fd fc6b 	bl	21240 <z_spin_lock_valid>
   2396a:	b968      	cbnz	r0, 23988 <z_sched_wake+0x3c>
   2396c:	4a1d      	ldr	r2, [pc, #116]	; (239e4 <z_sched_wake+0x98>)
   2396e:	491e      	ldr	r1, [pc, #120]	; (239e8 <z_sched_wake+0x9c>)
   23970:	481e      	ldr	r0, [pc, #120]	; (239ec <z_sched_wake+0xa0>)
   23972:	2381      	movs	r3, #129	; 0x81
   23974:	f003 fdbf 	bl	274f6 <printk>
   23978:	4919      	ldr	r1, [pc, #100]	; (239e0 <z_sched_wake+0x94>)
   2397a:	481d      	ldr	r0, [pc, #116]	; (239f0 <z_sched_wake+0xa4>)
   2397c:	f003 fdbb 	bl	274f6 <printk>
   23980:	4818      	ldr	r0, [pc, #96]	; (239e4 <z_sched_wake+0x98>)
   23982:	2181      	movs	r1, #129	; 0x81
   23984:	f004 f85c 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23988:	4815      	ldr	r0, [pc, #84]	; (239e0 <z_sched_wake+0x94>)
   2398a:	f7fd fc77 	bl	2127c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   2398e:	4620      	mov	r0, r4
   23990:	f008 feea 	bl	2c768 <z_priq_dumb_best>

		if (thread != NULL) {
   23994:	4604      	mov	r4, r0
   23996:	b158      	cbz	r0, 239b0 <z_sched_wake+0x64>
   23998:	67c6      	str	r6, [r0, #124]	; 0x7c
   2399a:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2399c:	f7fe ffa6 	bl	228ec <unpend_thread_no_timeout>
   239a0:	f104 0018 	add.w	r0, r4, #24
   239a4:	f000 f97a 	bl	23c9c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   239a8:	4620      	mov	r0, r4
   239aa:	f7ff fae9 	bl	22f80 <ready_thread>
			ret = true;
   239ae:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239b0:	480b      	ldr	r0, [pc, #44]	; (239e0 <z_sched_wake+0x94>)
   239b2:	f7fd fc53 	bl	2125c <z_spin_unlock_valid>
   239b6:	b968      	cbnz	r0, 239d4 <z_sched_wake+0x88>
   239b8:	4a0a      	ldr	r2, [pc, #40]	; (239e4 <z_sched_wake+0x98>)
   239ba:	490e      	ldr	r1, [pc, #56]	; (239f4 <z_sched_wake+0xa8>)
   239bc:	480b      	ldr	r0, [pc, #44]	; (239ec <z_sched_wake+0xa0>)
   239be:	23ac      	movs	r3, #172	; 0xac
   239c0:	f003 fd99 	bl	274f6 <printk>
   239c4:	4906      	ldr	r1, [pc, #24]	; (239e0 <z_sched_wake+0x94>)
   239c6:	480c      	ldr	r0, [pc, #48]	; (239f8 <z_sched_wake+0xac>)
   239c8:	f003 fd95 	bl	274f6 <printk>
   239cc:	4805      	ldr	r0, [pc, #20]	; (239e4 <z_sched_wake+0x98>)
   239ce:	21ac      	movs	r1, #172	; 0xac
   239d0:	f004 f836 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   239d4:	f387 8811 	msr	BASEPRI, r7
   239d8:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   239dc:	4620      	mov	r0, r4
   239de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   239e0:	20003424 	.word	0x20003424
   239e4:	0002dd93 	.word	0x0002dd93
   239e8:	0002dde5 	.word	0x0002dde5
   239ec:	0002dcd3 	.word	0x0002dcd3
   239f0:	0002ddfa 	.word	0x0002ddfa
   239f4:	0002ddb9 	.word	0x0002ddb9
   239f8:	0002ddd0 	.word	0x0002ddd0

000239fc <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   239fc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   239fe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   23a02:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23a04:	e9cd 6700 	strd	r6, r7, [sp]
   23a08:	f7ff f8d4 	bl	22bb4 <z_pend_curr>

	if (data != NULL) {
   23a0c:	b11c      	cbz	r4, 23a16 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   23a0e:	4b03      	ldr	r3, [pc, #12]	; (23a1c <z_sched_wait+0x20>)
   23a10:	689b      	ldr	r3, [r3, #8]
   23a12:	695b      	ldr	r3, [r3, #20]
   23a14:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   23a16:	b002      	add	sp, #8
   23a18:	bdd0      	pop	{r4, r6, r7, pc}
   23a1a:	bf00      	nop
   23a1c:	200033dc 	.word	0x200033dc

00023a20 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   23a20:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   23a22:	4806      	ldr	r0, [pc, #24]	; (23a3c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   23a24:	4a06      	ldr	r2, [pc, #24]	; (23a40 <z_data_copy+0x20>)
   23a26:	4907      	ldr	r1, [pc, #28]	; (23a44 <z_data_copy+0x24>)
   23a28:	1a12      	subs	r2, r2, r0
   23a2a:	f006 f816 	bl	29a5a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   23a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   23a32:	4a05      	ldr	r2, [pc, #20]	; (23a48 <z_data_copy+0x28>)
   23a34:	4905      	ldr	r1, [pc, #20]	; (23a4c <z_data_copy+0x2c>)
   23a36:	4806      	ldr	r0, [pc, #24]	; (23a50 <z_data_copy+0x30>)
   23a38:	f006 b80f 	b.w	29a5a <memcpy>
   23a3c:	20000000 	.word	0x20000000
   23a40:	20000a30 	.word	0x20000a30
   23a44:	000321a8 	.word	0x000321a8
   23a48:	00000000 	.word	0x00000000
   23a4c:	000321a8 	.word	0x000321a8
   23a50:	20000000 	.word	0x20000000

00023a54 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   23a54:	4b03      	ldr	r3, [pc, #12]	; (23a64 <elapsed+0x10>)
   23a56:	681b      	ldr	r3, [r3, #0]
   23a58:	b90b      	cbnz	r3, 23a5e <elapsed+0xa>
   23a5a:	f7f0 b889 	b.w	13b70 <sys_clock_elapsed>
}
   23a5e:	2000      	movs	r0, #0
   23a60:	4770      	bx	lr
   23a62:	bf00      	nop
   23a64:	20003430 	.word	0x20003430

00023a68 <next_timeout>:

static int32_t next_timeout(void)
{
   23a68:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   23a6a:	4b13      	ldr	r3, [pc, #76]	; (23ab8 <next_timeout+0x50>)
   23a6c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a6e:	429c      	cmp	r4, r3
   23a70:	bf08      	it	eq
   23a72:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   23a74:	f7ff ffee 	bl	23a54 <elapsed>
   23a78:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   23a7a:	b1bc      	cbz	r4, 23aac <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23a7c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   23a80:	1b40      	subs	r0, r0, r5
   23a82:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   23a86:	2801      	cmp	r0, #1
   23a88:	f171 0300 	sbcs.w	r3, r1, #0
   23a8c:	db11      	blt.n	23ab2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23a8e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   23a92:	2300      	movs	r3, #0
   23a94:	4282      	cmp	r2, r0
   23a96:	eb73 0401 	sbcs.w	r4, r3, r1
   23a9a:	da00      	bge.n	23a9e <next_timeout+0x36>
   23a9c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23a9e:	4b07      	ldr	r3, [pc, #28]	; (23abc <next_timeout+0x54>)
   23aa0:	691b      	ldr	r3, [r3, #16]
   23aa2:	b113      	cbz	r3, 23aaa <next_timeout+0x42>
   23aa4:	4298      	cmp	r0, r3
   23aa6:	bfa8      	it	ge
   23aa8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   23aaa:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   23aac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23ab0:	e7f5      	b.n	23a9e <next_timeout+0x36>
   23ab2:	2000      	movs	r0, #0
   23ab4:	e7f3      	b.n	23a9e <next_timeout+0x36>
   23ab6:	bf00      	nop
   23ab8:	200005bc 	.word	0x200005bc
   23abc:	200033dc 	.word	0x200033dc

00023ac0 <remove_timeout>:
{
   23ac0:	b530      	push	{r4, r5, lr}
   23ac2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23ac4:	b168      	cbz	r0, 23ae2 <remove_timeout+0x22>
   23ac6:	4a0a      	ldr	r2, [pc, #40]	; (23af0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   23ac8:	6852      	ldr	r2, [r2, #4]
   23aca:	4290      	cmp	r0, r2
   23acc:	d009      	beq.n	23ae2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   23ace:	b143      	cbz	r3, 23ae2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23ad0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23ad4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23ad8:	1912      	adds	r2, r2, r4
   23ada:	eb45 0101 	adc.w	r1, r5, r1
   23ade:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   23ae2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   23ae4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23ae6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23ae8:	2300      	movs	r3, #0
	node->prev = NULL;
   23aea:	e9c0 3300 	strd	r3, r3, [r0]
}
   23aee:	bd30      	pop	{r4, r5, pc}
   23af0:	200005bc 	.word	0x200005bc

00023af4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   23af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23af8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23afa:	1c6b      	adds	r3, r5, #1
   23afc:	bf08      	it	eq
   23afe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23b02:	4682      	mov	sl, r0
   23b04:	468b      	mov	fp, r1
   23b06:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23b08:	f000 80aa 	beq.w	23c60 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   23b0c:	6803      	ldr	r3, [r0, #0]
   23b0e:	b163      	cbz	r3, 23b2a <z_add_timeout+0x36>
   23b10:	4955      	ldr	r1, [pc, #340]	; (23c68 <z_add_timeout+0x174>)
   23b12:	4a56      	ldr	r2, [pc, #344]	; (23c6c <z_add_timeout+0x178>)
   23b14:	4856      	ldr	r0, [pc, #344]	; (23c70 <z_add_timeout+0x17c>)
   23b16:	235d      	movs	r3, #93	; 0x5d
   23b18:	f003 fced 	bl	274f6 <printk>
   23b1c:	4855      	ldr	r0, [pc, #340]	; (23c74 <z_add_timeout+0x180>)
   23b1e:	f003 fcea 	bl	274f6 <printk>
   23b22:	4852      	ldr	r0, [pc, #328]	; (23c6c <z_add_timeout+0x178>)
   23b24:	215d      	movs	r1, #93	; 0x5d
   23b26:	f003 ff8b 	bl	27a40 <assert_post_action>
	to->fn = fn;
   23b2a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   23b2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b32:	f3ef 8b11 	mrs	fp, BASEPRI
   23b36:	f383 8811 	msr	BASEPRI, r3
   23b3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b3e:	484e      	ldr	r0, [pc, #312]	; (23c78 <z_add_timeout+0x184>)
   23b40:	f7fd fb7e 	bl	21240 <z_spin_lock_valid>
   23b44:	b968      	cbnz	r0, 23b62 <z_add_timeout+0x6e>
   23b46:	4a4d      	ldr	r2, [pc, #308]	; (23c7c <z_add_timeout+0x188>)
   23b48:	494d      	ldr	r1, [pc, #308]	; (23c80 <z_add_timeout+0x18c>)
   23b4a:	4849      	ldr	r0, [pc, #292]	; (23c70 <z_add_timeout+0x17c>)
   23b4c:	2381      	movs	r3, #129	; 0x81
   23b4e:	f003 fcd2 	bl	274f6 <printk>
   23b52:	4949      	ldr	r1, [pc, #292]	; (23c78 <z_add_timeout+0x184>)
   23b54:	484b      	ldr	r0, [pc, #300]	; (23c84 <z_add_timeout+0x190>)
   23b56:	f003 fcce 	bl	274f6 <printk>
   23b5a:	4848      	ldr	r0, [pc, #288]	; (23c7c <z_add_timeout+0x188>)
   23b5c:	2181      	movs	r1, #129	; 0x81
   23b5e:	f003 ff6f 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23b62:	4845      	ldr	r0, [pc, #276]	; (23c78 <z_add_timeout+0x184>)
   23b64:	f7fd fb8a 	bl	2127c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   23b68:	f06f 0301 	mvn.w	r3, #1
   23b6c:	ebb3 0804 	subs.w	r8, r3, r4
   23b70:	f04f 32ff 	mov.w	r2, #4294967295
   23b74:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   23b78:	f1b8 0f00 	cmp.w	r8, #0
   23b7c:	f179 0100 	sbcs.w	r1, r9, #0
   23b80:	db1c      	blt.n	23bbc <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   23b82:	4841      	ldr	r0, [pc, #260]	; (23c88 <z_add_timeout+0x194>)
   23b84:	e9d0 1000 	ldrd	r1, r0, [r0]
   23b88:	1a5b      	subs	r3, r3, r1
   23b8a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   23b8e:	1b1e      	subs	r6, r3, r4
   23b90:	eb62 0705 	sbc.w	r7, r2, r5
   23b94:	2e01      	cmp	r6, #1
   23b96:	f177 0300 	sbcs.w	r3, r7, #0
   23b9a:	bfbc      	itt	lt
   23b9c:	2601      	movlt	r6, #1
   23b9e:	2700      	movlt	r7, #0
   23ba0:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   23ba4:	4a39      	ldr	r2, [pc, #228]	; (23c8c <z_add_timeout+0x198>)
   23ba6:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23baa:	4293      	cmp	r3, r2
   23bac:	d11d      	bne.n	23bea <z_add_timeout+0xf6>
	node->prev = tail;
   23bae:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   23bb2:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   23bb6:	f8c2 a004 	str.w	sl, [r2, #4]
}
   23bba:	e02c      	b.n	23c16 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   23bbc:	f7ff ff4a 	bl	23a54 <elapsed>
   23bc0:	1c63      	adds	r3, r4, #1
   23bc2:	9300      	str	r3, [sp, #0]
   23bc4:	f145 0300 	adc.w	r3, r5, #0
   23bc8:	9301      	str	r3, [sp, #4]
   23bca:	e9dd 2300 	ldrd	r2, r3, [sp]
   23bce:	1812      	adds	r2, r2, r0
   23bd0:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   23bd4:	e9ca 2304 	strd	r2, r3, [sl, #16]
   23bd8:	e7e4      	b.n	23ba4 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   23bda:	1be0      	subs	r0, r4, r7
   23bdc:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   23be0:	42b3      	cmp	r3, r6
   23be2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   23be6:	d0e2      	beq.n	23bae <z_add_timeout+0xba>
   23be8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   23bea:	2b00      	cmp	r3, #0
   23bec:	d0df      	beq.n	23bae <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   23bee:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   23bf2:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   23bf6:	42bc      	cmp	r4, r7
   23bf8:	eb75 0108 	sbcs.w	r1, r5, r8
   23bfc:	daed      	bge.n	23bda <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   23bfe:	1b38      	subs	r0, r7, r4
   23c00:	eb68 0105 	sbc.w	r1, r8, r5
   23c04:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   23c08:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23c0a:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   23c0e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   23c12:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   23c16:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23c18:	4293      	cmp	r3, r2
   23c1a:	d00b      	beq.n	23c34 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   23c1c:	459a      	cmp	sl, r3
   23c1e:	d109      	bne.n	23c34 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   23c20:	f7ff ff22 	bl	23a68 <next_timeout>

			if (next_time == 0 ||
   23c24:	b118      	cbz	r0, 23c2e <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   23c26:	4b1a      	ldr	r3, [pc, #104]	; (23c90 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   23c28:	691b      	ldr	r3, [r3, #16]
   23c2a:	4283      	cmp	r3, r0
   23c2c:	d002      	beq.n	23c34 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   23c2e:	2100      	movs	r1, #0
   23c30:	f7ef ff6c 	bl	13b0c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c34:	4810      	ldr	r0, [pc, #64]	; (23c78 <z_add_timeout+0x184>)
   23c36:	f7fd fb11 	bl	2125c <z_spin_unlock_valid>
   23c3a:	b968      	cbnz	r0, 23c58 <z_add_timeout+0x164>
   23c3c:	4a0f      	ldr	r2, [pc, #60]	; (23c7c <z_add_timeout+0x188>)
   23c3e:	4915      	ldr	r1, [pc, #84]	; (23c94 <z_add_timeout+0x1a0>)
   23c40:	480b      	ldr	r0, [pc, #44]	; (23c70 <z_add_timeout+0x17c>)
   23c42:	23ac      	movs	r3, #172	; 0xac
   23c44:	f003 fc57 	bl	274f6 <printk>
   23c48:	490b      	ldr	r1, [pc, #44]	; (23c78 <z_add_timeout+0x184>)
   23c4a:	4813      	ldr	r0, [pc, #76]	; (23c98 <z_add_timeout+0x1a4>)
   23c4c:	f003 fc53 	bl	274f6 <printk>
   23c50:	480a      	ldr	r0, [pc, #40]	; (23c7c <z_add_timeout+0x188>)
   23c52:	21ac      	movs	r1, #172	; 0xac
   23c54:	f003 fef4 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23c58:	f38b 8811 	msr	BASEPRI, fp
   23c5c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   23c60:	b003      	add	sp, #12
   23c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c66:	bf00      	nop
   23c68:	00031e33 	.word	0x00031e33
   23c6c:	00031e0f 	.word	0x00031e0f
   23c70:	0002dcd3 	.word	0x0002dcd3
   23c74:	00030be6 	.word	0x00030be6
   23c78:	20003434 	.word	0x20003434
   23c7c:	0002dd93 	.word	0x0002dd93
   23c80:	0002dde5 	.word	0x0002dde5
   23c84:	0002ddfa 	.word	0x0002ddfa
   23c88:	20002148 	.word	0x20002148
   23c8c:	200005bc 	.word	0x200005bc
   23c90:	200033dc 	.word	0x200033dc
   23c94:	0002ddb9 	.word	0x0002ddb9
   23c98:	0002ddd0 	.word	0x0002ddd0

00023c9c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   23c9c:	b538      	push	{r3, r4, r5, lr}
   23c9e:	4604      	mov	r4, r0
	__asm__ volatile(
   23ca0:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ca4:	f3ef 8511 	mrs	r5, BASEPRI
   23ca8:	f383 8811 	msr	BASEPRI, r3
   23cac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cb0:	481a      	ldr	r0, [pc, #104]	; (23d1c <z_abort_timeout+0x80>)
   23cb2:	f7fd fac5 	bl	21240 <z_spin_lock_valid>
   23cb6:	b968      	cbnz	r0, 23cd4 <z_abort_timeout+0x38>
   23cb8:	4a19      	ldr	r2, [pc, #100]	; (23d20 <z_abort_timeout+0x84>)
   23cba:	491a      	ldr	r1, [pc, #104]	; (23d24 <z_abort_timeout+0x88>)
   23cbc:	481a      	ldr	r0, [pc, #104]	; (23d28 <z_abort_timeout+0x8c>)
   23cbe:	2381      	movs	r3, #129	; 0x81
   23cc0:	f003 fc19 	bl	274f6 <printk>
   23cc4:	4915      	ldr	r1, [pc, #84]	; (23d1c <z_abort_timeout+0x80>)
   23cc6:	4819      	ldr	r0, [pc, #100]	; (23d2c <z_abort_timeout+0x90>)
   23cc8:	f003 fc15 	bl	274f6 <printk>
   23ccc:	4814      	ldr	r0, [pc, #80]	; (23d20 <z_abort_timeout+0x84>)
   23cce:	2181      	movs	r1, #129	; 0x81
   23cd0:	f003 feb6 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23cd4:	4811      	ldr	r0, [pc, #68]	; (23d1c <z_abort_timeout+0x80>)
   23cd6:	f7fd fad1 	bl	2127c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   23cda:	6823      	ldr	r3, [r4, #0]
   23cdc:	b1db      	cbz	r3, 23d16 <z_abort_timeout+0x7a>
			remove_timeout(to);
   23cde:	4620      	mov	r0, r4
   23ce0:	f7ff feee 	bl	23ac0 <remove_timeout>
			ret = 0;
   23ce4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ce6:	480d      	ldr	r0, [pc, #52]	; (23d1c <z_abort_timeout+0x80>)
   23ce8:	f7fd fab8 	bl	2125c <z_spin_unlock_valid>
   23cec:	b968      	cbnz	r0, 23d0a <z_abort_timeout+0x6e>
   23cee:	4a0c      	ldr	r2, [pc, #48]	; (23d20 <z_abort_timeout+0x84>)
   23cf0:	490f      	ldr	r1, [pc, #60]	; (23d30 <z_abort_timeout+0x94>)
   23cf2:	480d      	ldr	r0, [pc, #52]	; (23d28 <z_abort_timeout+0x8c>)
   23cf4:	23ac      	movs	r3, #172	; 0xac
   23cf6:	f003 fbfe 	bl	274f6 <printk>
   23cfa:	4908      	ldr	r1, [pc, #32]	; (23d1c <z_abort_timeout+0x80>)
   23cfc:	480d      	ldr	r0, [pc, #52]	; (23d34 <z_abort_timeout+0x98>)
   23cfe:	f003 fbfa 	bl	274f6 <printk>
   23d02:	4807      	ldr	r0, [pc, #28]	; (23d20 <z_abort_timeout+0x84>)
   23d04:	21ac      	movs	r1, #172	; 0xac
   23d06:	f003 fe9b 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23d0a:	f385 8811 	msr	BASEPRI, r5
   23d0e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   23d12:	4620      	mov	r0, r4
   23d14:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   23d16:	f06f 0415 	mvn.w	r4, #21
   23d1a:	e7e4      	b.n	23ce6 <z_abort_timeout+0x4a>
   23d1c:	20003434 	.word	0x20003434
   23d20:	0002dd93 	.word	0x0002dd93
   23d24:	0002dde5 	.word	0x0002dde5
   23d28:	0002dcd3 	.word	0x0002dcd3
   23d2c:	0002ddfa 	.word	0x0002ddfa
   23d30:	0002ddb9 	.word	0x0002ddb9
   23d34:	0002ddd0 	.word	0x0002ddd0

00023d38 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   23d38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23d3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d3e:	f3ef 8511 	mrs	r5, BASEPRI
   23d42:	f383 8811 	msr	BASEPRI, r3
   23d46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d4a:	4818      	ldr	r0, [pc, #96]	; (23dac <z_get_next_timeout_expiry+0x74>)
   23d4c:	f7fd fa78 	bl	21240 <z_spin_lock_valid>
   23d50:	b968      	cbnz	r0, 23d6e <z_get_next_timeout_expiry+0x36>
   23d52:	4a17      	ldr	r2, [pc, #92]	; (23db0 <z_get_next_timeout_expiry+0x78>)
   23d54:	4917      	ldr	r1, [pc, #92]	; (23db4 <z_get_next_timeout_expiry+0x7c>)
   23d56:	4818      	ldr	r0, [pc, #96]	; (23db8 <z_get_next_timeout_expiry+0x80>)
   23d58:	2381      	movs	r3, #129	; 0x81
   23d5a:	f003 fbcc 	bl	274f6 <printk>
   23d5e:	4913      	ldr	r1, [pc, #76]	; (23dac <z_get_next_timeout_expiry+0x74>)
   23d60:	4816      	ldr	r0, [pc, #88]	; (23dbc <z_get_next_timeout_expiry+0x84>)
   23d62:	f003 fbc8 	bl	274f6 <printk>
   23d66:	4812      	ldr	r0, [pc, #72]	; (23db0 <z_get_next_timeout_expiry+0x78>)
   23d68:	2181      	movs	r1, #129	; 0x81
   23d6a:	f003 fe69 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23d6e:	480f      	ldr	r0, [pc, #60]	; (23dac <z_get_next_timeout_expiry+0x74>)
   23d70:	f7fd fa84 	bl	2127c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   23d74:	f7ff fe78 	bl	23a68 <next_timeout>
   23d78:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d7a:	480c      	ldr	r0, [pc, #48]	; (23dac <z_get_next_timeout_expiry+0x74>)
   23d7c:	f7fd fa6e 	bl	2125c <z_spin_unlock_valid>
   23d80:	b968      	cbnz	r0, 23d9e <z_get_next_timeout_expiry+0x66>
   23d82:	4a0b      	ldr	r2, [pc, #44]	; (23db0 <z_get_next_timeout_expiry+0x78>)
   23d84:	490e      	ldr	r1, [pc, #56]	; (23dc0 <z_get_next_timeout_expiry+0x88>)
   23d86:	480c      	ldr	r0, [pc, #48]	; (23db8 <z_get_next_timeout_expiry+0x80>)
   23d88:	23ac      	movs	r3, #172	; 0xac
   23d8a:	f003 fbb4 	bl	274f6 <printk>
   23d8e:	4907      	ldr	r1, [pc, #28]	; (23dac <z_get_next_timeout_expiry+0x74>)
   23d90:	480c      	ldr	r0, [pc, #48]	; (23dc4 <z_get_next_timeout_expiry+0x8c>)
   23d92:	f003 fbb0 	bl	274f6 <printk>
   23d96:	4806      	ldr	r0, [pc, #24]	; (23db0 <z_get_next_timeout_expiry+0x78>)
   23d98:	21ac      	movs	r1, #172	; 0xac
   23d9a:	f003 fe51 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23d9e:	f385 8811 	msr	BASEPRI, r5
   23da2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   23da6:	4620      	mov	r0, r4
   23da8:	bd38      	pop	{r3, r4, r5, pc}
   23daa:	bf00      	nop
   23dac:	20003434 	.word	0x20003434
   23db0:	0002dd93 	.word	0x0002dd93
   23db4:	0002dde5 	.word	0x0002dde5
   23db8:	0002dcd3 	.word	0x0002dcd3
   23dbc:	0002ddfa 	.word	0x0002ddfa
   23dc0:	0002ddb9 	.word	0x0002ddb9
   23dc4:	0002ddd0 	.word	0x0002ddd0

00023dc8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   23dc8:	b570      	push	{r4, r5, r6, lr}
   23dca:	4604      	mov	r4, r0
   23dcc:	460d      	mov	r5, r1
	__asm__ volatile(
   23dce:	f04f 0340 	mov.w	r3, #64	; 0x40
   23dd2:	f3ef 8611 	mrs	r6, BASEPRI
   23dd6:	f383 8811 	msr	BASEPRI, r3
   23dda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23dde:	481b      	ldr	r0, [pc, #108]	; (23e4c <z_set_timeout_expiry+0x84>)
   23de0:	f7fd fa2e 	bl	21240 <z_spin_lock_valid>
   23de4:	b968      	cbnz	r0, 23e02 <z_set_timeout_expiry+0x3a>
   23de6:	4a1a      	ldr	r2, [pc, #104]	; (23e50 <z_set_timeout_expiry+0x88>)
   23de8:	491a      	ldr	r1, [pc, #104]	; (23e54 <z_set_timeout_expiry+0x8c>)
   23dea:	481b      	ldr	r0, [pc, #108]	; (23e58 <z_set_timeout_expiry+0x90>)
   23dec:	2381      	movs	r3, #129	; 0x81
   23dee:	f003 fb82 	bl	274f6 <printk>
   23df2:	4916      	ldr	r1, [pc, #88]	; (23e4c <z_set_timeout_expiry+0x84>)
   23df4:	4819      	ldr	r0, [pc, #100]	; (23e5c <z_set_timeout_expiry+0x94>)
   23df6:	f003 fb7e 	bl	274f6 <printk>
   23dfa:	4815      	ldr	r0, [pc, #84]	; (23e50 <z_set_timeout_expiry+0x88>)
   23dfc:	2181      	movs	r1, #129	; 0x81
   23dfe:	f003 fe1f 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23e02:	4812      	ldr	r0, [pc, #72]	; (23e4c <z_set_timeout_expiry+0x84>)
   23e04:	f7fd fa3a 	bl	2127c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   23e08:	f7ff fe2e 	bl	23a68 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   23e0c:	2801      	cmp	r0, #1
   23e0e:	dd05      	ble.n	23e1c <z_set_timeout_expiry+0x54>
   23e10:	42a0      	cmp	r0, r4
   23e12:	db03      	blt.n	23e1c <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23e14:	4629      	mov	r1, r5
   23e16:	4620      	mov	r0, r4
   23e18:	f7ef fe78 	bl	13b0c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e1c:	480b      	ldr	r0, [pc, #44]	; (23e4c <z_set_timeout_expiry+0x84>)
   23e1e:	f7fd fa1d 	bl	2125c <z_spin_unlock_valid>
   23e22:	b968      	cbnz	r0, 23e40 <z_set_timeout_expiry+0x78>
   23e24:	4a0a      	ldr	r2, [pc, #40]	; (23e50 <z_set_timeout_expiry+0x88>)
   23e26:	490e      	ldr	r1, [pc, #56]	; (23e60 <z_set_timeout_expiry+0x98>)
   23e28:	480b      	ldr	r0, [pc, #44]	; (23e58 <z_set_timeout_expiry+0x90>)
   23e2a:	23ac      	movs	r3, #172	; 0xac
   23e2c:	f003 fb63 	bl	274f6 <printk>
   23e30:	4906      	ldr	r1, [pc, #24]	; (23e4c <z_set_timeout_expiry+0x84>)
   23e32:	480c      	ldr	r0, [pc, #48]	; (23e64 <z_set_timeout_expiry+0x9c>)
   23e34:	f003 fb5f 	bl	274f6 <printk>
   23e38:	4805      	ldr	r0, [pc, #20]	; (23e50 <z_set_timeout_expiry+0x88>)
   23e3a:	21ac      	movs	r1, #172	; 0xac
   23e3c:	f003 fe00 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23e40:	f386 8811 	msr	BASEPRI, r6
   23e44:	f3bf 8f6f 	isb	sy
		}
	}
}
   23e48:	bd70      	pop	{r4, r5, r6, pc}
   23e4a:	bf00      	nop
   23e4c:	20003434 	.word	0x20003434
   23e50:	0002dd93 	.word	0x0002dd93
   23e54:	0002dde5 	.word	0x0002dde5
   23e58:	0002dcd3 	.word	0x0002dcd3
   23e5c:	0002ddfa 	.word	0x0002ddfa
   23e60:	0002ddb9 	.word	0x0002ddb9
   23e64:	0002ddd0 	.word	0x0002ddd0

00023e68 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   23e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e6c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   23e6e:	f7ff f80f 	bl	22e90 <z_time_slice>
	__asm__ volatile(
   23e72:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e76:	f3ef 8711 	mrs	r7, BASEPRI
   23e7a:	f383 8811 	msr	BASEPRI, r3
   23e7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e82:	4855      	ldr	r0, [pc, #340]	; (23fd8 <sys_clock_announce+0x170>)
   23e84:	f7fd f9dc 	bl	21240 <z_spin_lock_valid>
   23e88:	b968      	cbnz	r0, 23ea6 <sys_clock_announce+0x3e>
   23e8a:	4a54      	ldr	r2, [pc, #336]	; (23fdc <sys_clock_announce+0x174>)
   23e8c:	4954      	ldr	r1, [pc, #336]	; (23fe0 <sys_clock_announce+0x178>)
   23e8e:	4855      	ldr	r0, [pc, #340]	; (23fe4 <sys_clock_announce+0x17c>)
   23e90:	2381      	movs	r3, #129	; 0x81
   23e92:	f003 fb30 	bl	274f6 <printk>
   23e96:	4950      	ldr	r1, [pc, #320]	; (23fd8 <sys_clock_announce+0x170>)
   23e98:	4853      	ldr	r0, [pc, #332]	; (23fe8 <sys_clock_announce+0x180>)
   23e9a:	f003 fb2c 	bl	274f6 <printk>
   23e9e:	484f      	ldr	r0, [pc, #316]	; (23fdc <sys_clock_announce+0x174>)
   23ea0:	2181      	movs	r1, #129	; 0x81
   23ea2:	f003 fdcd 	bl	27a40 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   23ea6:	4d51      	ldr	r5, [pc, #324]	; (23fec <sys_clock_announce+0x184>)
   23ea8:	4e51      	ldr	r6, [pc, #324]	; (23ff0 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   23eaa:	484b      	ldr	r0, [pc, #300]	; (23fd8 <sys_clock_announce+0x170>)
	return list->head == list;
   23eac:	f8df a14c 	ldr.w	sl, [pc, #332]	; 23ffc <sys_clock_announce+0x194>
   23eb0:	f7fd f9e4 	bl	2127c <z_spin_lock_set_owner>
   23eb4:	46b3      	mov	fp, r6
   23eb6:	602c      	str	r4, [r5, #0]
   23eb8:	e9d6 2300 	ldrd	r2, r3, [r6]
   23ebc:	f8d5 c000 	ldr.w	ip, [r5]
   23ec0:	f8da 4000 	ldr.w	r4, [sl]
   23ec4:	e9cd 2300 	strd	r2, r3, [sp]
   23ec8:	4662      	mov	r2, ip
   23eca:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23ecc:	4554      	cmp	r4, sl
   23ece:	46e0      	mov	r8, ip
   23ed0:	4699      	mov	r9, r3
   23ed2:	d00c      	beq.n	23eee <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   23ed4:	b15c      	cbz	r4, 23eee <sys_clock_announce+0x86>
   23ed6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   23eda:	458c      	cmp	ip, r1
   23edc:	eb79 0302 	sbcs.w	r3, r9, r2
   23ee0:	da2e      	bge.n	23f40 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   23ee2:	ebb1 000c 	subs.w	r0, r1, ip
   23ee6:	eb62 0109 	sbc.w	r1, r2, r9
   23eea:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   23eee:	9a00      	ldr	r2, [sp, #0]
   23ef0:	9901      	ldr	r1, [sp, #4]
   23ef2:	eb18 0202 	adds.w	r2, r8, r2
   23ef6:	464b      	mov	r3, r9
   23ef8:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   23efc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   23efe:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   23f02:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   23f04:	f7ff fdb0 	bl	23a68 <next_timeout>
   23f08:	4621      	mov	r1, r4
   23f0a:	f7ef fdff 	bl	13b0c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f0e:	4832      	ldr	r0, [pc, #200]	; (23fd8 <sys_clock_announce+0x170>)
   23f10:	f7fd f9a4 	bl	2125c <z_spin_unlock_valid>
   23f14:	b968      	cbnz	r0, 23f32 <sys_clock_announce+0xca>
   23f16:	4a31      	ldr	r2, [pc, #196]	; (23fdc <sys_clock_announce+0x174>)
   23f18:	4936      	ldr	r1, [pc, #216]	; (23ff4 <sys_clock_announce+0x18c>)
   23f1a:	4832      	ldr	r0, [pc, #200]	; (23fe4 <sys_clock_announce+0x17c>)
   23f1c:	23ac      	movs	r3, #172	; 0xac
   23f1e:	f003 faea 	bl	274f6 <printk>
   23f22:	492d      	ldr	r1, [pc, #180]	; (23fd8 <sys_clock_announce+0x170>)
   23f24:	4834      	ldr	r0, [pc, #208]	; (23ff8 <sys_clock_announce+0x190>)
   23f26:	f003 fae6 	bl	274f6 <printk>
   23f2a:	482c      	ldr	r0, [pc, #176]	; (23fdc <sys_clock_announce+0x174>)
   23f2c:	21ac      	movs	r1, #172	; 0xac
   23f2e:	f003 fd87 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   23f32:	f387 8811 	msr	BASEPRI, r7
   23f36:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   23f3a:	b003      	add	sp, #12
   23f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   23f40:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   23f44:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   23f48:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   23f4c:	f04f 0200 	mov.w	r2, #0
   23f50:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   23f54:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   23f58:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   23f5a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   23f5e:	4620      	mov	r0, r4
		curr_tick += dt;
   23f60:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   23f64:	f7ff fdac 	bl	23ac0 <remove_timeout>
   23f68:	481b      	ldr	r0, [pc, #108]	; (23fd8 <sys_clock_announce+0x170>)
   23f6a:	f7fd f977 	bl	2125c <z_spin_unlock_valid>
   23f6e:	b968      	cbnz	r0, 23f8c <sys_clock_announce+0x124>
   23f70:	4a1a      	ldr	r2, [pc, #104]	; (23fdc <sys_clock_announce+0x174>)
   23f72:	4920      	ldr	r1, [pc, #128]	; (23ff4 <sys_clock_announce+0x18c>)
   23f74:	481b      	ldr	r0, [pc, #108]	; (23fe4 <sys_clock_announce+0x17c>)
   23f76:	23ac      	movs	r3, #172	; 0xac
   23f78:	f003 fabd 	bl	274f6 <printk>
   23f7c:	4916      	ldr	r1, [pc, #88]	; (23fd8 <sys_clock_announce+0x170>)
   23f7e:	481e      	ldr	r0, [pc, #120]	; (23ff8 <sys_clock_announce+0x190>)
   23f80:	f003 fab9 	bl	274f6 <printk>
   23f84:	4815      	ldr	r0, [pc, #84]	; (23fdc <sys_clock_announce+0x174>)
   23f86:	21ac      	movs	r1, #172	; 0xac
   23f88:	f003 fd5a 	bl	27a40 <assert_post_action>
   23f8c:	f387 8811 	msr	BASEPRI, r7
   23f90:	f3bf 8f6f 	isb	sy
		t->fn(t);
   23f94:	68a3      	ldr	r3, [r4, #8]
   23f96:	4620      	mov	r0, r4
   23f98:	4798      	blx	r3
	__asm__ volatile(
   23f9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f9e:	f3ef 8711 	mrs	r7, BASEPRI
   23fa2:	f383 8811 	msr	BASEPRI, r3
   23fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23faa:	480b      	ldr	r0, [pc, #44]	; (23fd8 <sys_clock_announce+0x170>)
   23fac:	f7fd f948 	bl	21240 <z_spin_lock_valid>
   23fb0:	b968      	cbnz	r0, 23fce <sys_clock_announce+0x166>
   23fb2:	4a0a      	ldr	r2, [pc, #40]	; (23fdc <sys_clock_announce+0x174>)
   23fb4:	490a      	ldr	r1, [pc, #40]	; (23fe0 <sys_clock_announce+0x178>)
   23fb6:	480b      	ldr	r0, [pc, #44]	; (23fe4 <sys_clock_announce+0x17c>)
   23fb8:	2381      	movs	r3, #129	; 0x81
   23fba:	f003 fa9c 	bl	274f6 <printk>
   23fbe:	4906      	ldr	r1, [pc, #24]	; (23fd8 <sys_clock_announce+0x170>)
   23fc0:	4809      	ldr	r0, [pc, #36]	; (23fe8 <sys_clock_announce+0x180>)
   23fc2:	f003 fa98 	bl	274f6 <printk>
   23fc6:	4805      	ldr	r0, [pc, #20]	; (23fdc <sys_clock_announce+0x174>)
   23fc8:	2181      	movs	r1, #129	; 0x81
   23fca:	f003 fd39 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   23fce:	4802      	ldr	r0, [pc, #8]	; (23fd8 <sys_clock_announce+0x170>)
   23fd0:	f7fd f954 	bl	2127c <z_spin_lock_set_owner>
	return k;
   23fd4:	e770      	b.n	23eb8 <sys_clock_announce+0x50>
   23fd6:	bf00      	nop
   23fd8:	20003434 	.word	0x20003434
   23fdc:	0002dd93 	.word	0x0002dd93
   23fe0:	0002dde5 	.word	0x0002dde5
   23fe4:	0002dcd3 	.word	0x0002dcd3
   23fe8:	0002ddfa 	.word	0x0002ddfa
   23fec:	20003430 	.word	0x20003430
   23ff0:	20002148 	.word	0x20002148
   23ff4:	0002ddb9 	.word	0x0002ddb9
   23ff8:	0002ddd0 	.word	0x0002ddd0
   23ffc:	200005bc 	.word	0x200005bc

00024000 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24000:	b570      	push	{r4, r5, r6, lr}
   24002:	f04f 0340 	mov.w	r3, #64	; 0x40
   24006:	f3ef 8611 	mrs	r6, BASEPRI
   2400a:	f383 8811 	msr	BASEPRI, r3
   2400e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24012:	481b      	ldr	r0, [pc, #108]	; (24080 <sys_clock_tick_get+0x80>)
   24014:	f7fd f914 	bl	21240 <z_spin_lock_valid>
   24018:	b968      	cbnz	r0, 24036 <sys_clock_tick_get+0x36>
   2401a:	4a1a      	ldr	r2, [pc, #104]	; (24084 <sys_clock_tick_get+0x84>)
   2401c:	491a      	ldr	r1, [pc, #104]	; (24088 <sys_clock_tick_get+0x88>)
   2401e:	481b      	ldr	r0, [pc, #108]	; (2408c <sys_clock_tick_get+0x8c>)
   24020:	2381      	movs	r3, #129	; 0x81
   24022:	f003 fa68 	bl	274f6 <printk>
   24026:	4916      	ldr	r1, [pc, #88]	; (24080 <sys_clock_tick_get+0x80>)
   24028:	4819      	ldr	r0, [pc, #100]	; (24090 <sys_clock_tick_get+0x90>)
   2402a:	f003 fa64 	bl	274f6 <printk>
   2402e:	4815      	ldr	r0, [pc, #84]	; (24084 <sys_clock_tick_get+0x84>)
   24030:	2181      	movs	r1, #129	; 0x81
   24032:	f003 fd05 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   24036:	4812      	ldr	r0, [pc, #72]	; (24080 <sys_clock_tick_get+0x80>)
   24038:	f7fd f920 	bl	2127c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2403c:	f7ef fd98 	bl	13b70 <sys_clock_elapsed>
   24040:	4b14      	ldr	r3, [pc, #80]	; (24094 <sys_clock_tick_get+0x94>)
   24042:	e9d3 4500 	ldrd	r4, r5, [r3]
   24046:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24048:	480d      	ldr	r0, [pc, #52]	; (24080 <sys_clock_tick_get+0x80>)
   2404a:	f145 0500 	adc.w	r5, r5, #0
   2404e:	f7fd f905 	bl	2125c <z_spin_unlock_valid>
   24052:	b968      	cbnz	r0, 24070 <sys_clock_tick_get+0x70>
   24054:	4a0b      	ldr	r2, [pc, #44]	; (24084 <sys_clock_tick_get+0x84>)
   24056:	4910      	ldr	r1, [pc, #64]	; (24098 <sys_clock_tick_get+0x98>)
   24058:	480c      	ldr	r0, [pc, #48]	; (2408c <sys_clock_tick_get+0x8c>)
   2405a:	23ac      	movs	r3, #172	; 0xac
   2405c:	f003 fa4b 	bl	274f6 <printk>
   24060:	4907      	ldr	r1, [pc, #28]	; (24080 <sys_clock_tick_get+0x80>)
   24062:	480e      	ldr	r0, [pc, #56]	; (2409c <sys_clock_tick_get+0x9c>)
   24064:	f003 fa47 	bl	274f6 <printk>
   24068:	4806      	ldr	r0, [pc, #24]	; (24084 <sys_clock_tick_get+0x84>)
   2406a:	21ac      	movs	r1, #172	; 0xac
   2406c:	f003 fce8 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   24070:	f386 8811 	msr	BASEPRI, r6
   24074:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24078:	4620      	mov	r0, r4
   2407a:	4629      	mov	r1, r5
   2407c:	bd70      	pop	{r4, r5, r6, pc}
   2407e:	bf00      	nop
   24080:	20003434 	.word	0x20003434
   24084:	0002dd93 	.word	0x0002dd93
   24088:	0002dde5 	.word	0x0002dde5
   2408c:	0002dcd3 	.word	0x0002dcd3
   24090:	0002ddfa 	.word	0x0002ddfa
   24094:	20002148 	.word	0x20002148
   24098:	0002ddb9 	.word	0x0002ddb9
   2409c:	0002ddd0 	.word	0x0002ddd0

000240a0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   240a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   240a2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   240a6:	1c56      	adds	r6, r2, #1
   240a8:	f143 0700 	adc.w	r7, r3, #0
   240ac:	2f00      	cmp	r7, #0
   240ae:	bf08      	it	eq
   240b0:	2e02      	cmpeq	r6, #2
{
   240b2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   240b4:	d302      	bcc.n	240bc <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   240b6:	490d      	ldr	r1, [pc, #52]	; (240ec <z_timer_expiration_handler+0x4c>)
   240b8:	f7ff fd1c 	bl	23af4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   240bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   240be:	3301      	adds	r3, #1
   240c0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   240c2:	6a23      	ldr	r3, [r4, #32]
   240c4:	b10b      	cbz	r3, 240ca <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   240c6:	4620      	mov	r0, r4
   240c8:	4798      	blx	r3
	return list->head == list;
   240ca:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240ce:	42a5      	cmp	r5, r4
   240d0:	d00a      	beq.n	240e8 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   240d2:	b14d      	cbz	r5, 240e8 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   240d4:	4628      	mov	r0, r5
   240d6:	f7fe fae7 	bl	226a8 <z_unpend_thread_no_timeout>
   240da:	2300      	movs	r3, #0
   240dc:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   240de:	4628      	mov	r0, r5
}
   240e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   240e4:	f7fe bfa0 	b.w	23028 <z_ready_thread>
}
   240e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   240ea:	bf00      	nop
   240ec:	000240a1 	.word	0x000240a1

000240f0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   240f0:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   240f4:	4619      	mov	r1, r3
   240f6:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   240f8:	1c4c      	adds	r4, r1, #1
{
   240fa:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   240fc:	bf08      	it	eq
   240fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   24102:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   24106:	4680      	mov	r8, r0
   24108:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2410a:	d04c      	beq.n	241a6 <z_impl_k_timer_start+0xb6>
   2410c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2410e:	1c6b      	adds	r3, r5, #1
   24110:	bf08      	it	eq
   24112:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   24116:	4614      	mov	r4, r2
   24118:	d019      	beq.n	2414e <z_impl_k_timer_start+0x5e>
   2411a:	ea54 0305 	orrs.w	r3, r4, r5
   2411e:	d016      	beq.n	2414e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   24120:	f06f 0301 	mvn.w	r3, #1
   24124:	ebb3 0a02 	subs.w	sl, r3, r2
   24128:	f04f 33ff 	mov.w	r3, #4294967295
   2412c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24130:	f1ba 0f00 	cmp.w	sl, #0
   24134:	f17b 0300 	sbcs.w	r3, fp, #0
   24138:	da09      	bge.n	2414e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   2413a:	f112 34ff 	adds.w	r4, r2, #4294967295
   2413e:	f145 35ff 	adc.w	r5, r5, #4294967295
   24142:	2c01      	cmp	r4, #1
   24144:	f175 0300 	sbcs.w	r3, r5, #0
   24148:	bfbc      	itt	lt
   2414a:	2401      	movlt	r4, #1
   2414c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2414e:	f06f 0301 	mvn.w	r3, #1
   24152:	1a1b      	subs	r3, r3, r0
   24154:	9300      	str	r3, [sp, #0]
   24156:	f04f 33ff 	mov.w	r3, #4294967295
   2415a:	eb63 0301 	sbc.w	r3, r3, r1
   2415e:	9301      	str	r3, [sp, #4]
   24160:	e9dd 2300 	ldrd	r2, r3, [sp]
   24164:	2a00      	cmp	r2, #0
   24166:	f173 0300 	sbcs.w	r3, r3, #0
   2416a:	da0c      	bge.n	24186 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2416c:	f110 38ff 	adds.w	r8, r0, #4294967295
   24170:	f141 39ff 	adc.w	r9, r1, #4294967295
   24174:	f1b8 0f00 	cmp.w	r8, #0
   24178:	f179 0300 	sbcs.w	r3, r9, #0
   2417c:	bfbc      	itt	lt
   2417e:	f04f 0800 	movlt.w	r8, #0
   24182:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   24186:	4630      	mov	r0, r6
   24188:	f7ff fd88 	bl	23c9c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2418c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2418e:	4907      	ldr	r1, [pc, #28]	; (241ac <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   24190:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24192:	4642      	mov	r2, r8
   24194:	464b      	mov	r3, r9
   24196:	4630      	mov	r0, r6
	timer->period = period;
   24198:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   2419c:	b002      	add	sp, #8
   2419e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   241a2:	f7ff bca7 	b.w	23af4 <z_add_timeout>
}
   241a6:	b002      	add	sp, #8
   241a8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   241ac:	000240a1 	.word	0x000240a1

000241b0 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   241b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   241b4:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   241b6:	4d53      	ldr	r5, [pc, #332]	; (24304 <clear_event_registrations+0x154>)
   241b8:	f8df 918c 	ldr.w	r9, [pc, #396]	; 24348 <clear_event_registrations+0x198>
   241bc:	4e52      	ldr	r6, [pc, #328]	; (24308 <clear_event_registrations+0x158>)
{
   241be:	4680      	mov	r8, r0
   241c0:	4617      	mov	r7, r2
	while (num_events--) {
   241c2:	fb04 0401 	mla	r4, r4, r1, r0
   241c6:	45a0      	cmp	r8, r4
   241c8:	d101      	bne.n	241ce <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   241ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   241ce:	2300      	movs	r3, #0
   241d0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   241d4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   241d8:	f003 031f 	and.w	r3, r3, #31
   241dc:	2b08      	cmp	r3, #8
   241de:	d84f      	bhi.n	24280 <clear_event_registrations+0xd0>
   241e0:	e8df f003 	tbb	[pc, r3]
   241e4:	4e05305b 	.word	0x4e05305b
   241e8:	4e4e4e21 	.word	0x4e4e4e21
   241ec:	3f          	.byte	0x3f
   241ed:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   241ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   241f2:	b963      	cbnz	r3, 2420e <clear_event_registrations+0x5e>
   241f4:	4945      	ldr	r1, [pc, #276]	; (2430c <clear_event_registrations+0x15c>)
   241f6:	23a9      	movs	r3, #169	; 0xa9
   241f8:	462a      	mov	r2, r5
   241fa:	4630      	mov	r0, r6
   241fc:	f003 f97b 	bl	274f6 <printk>
   24200:	4843      	ldr	r0, [pc, #268]	; (24310 <clear_event_registrations+0x160>)
   24202:	f003 f978 	bl	274f6 <printk>
   24206:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24208:	4628      	mov	r0, r5
   2420a:	f003 fc19 	bl	27a40 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2420e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24212:	2b00      	cmp	r3, #0
   24214:	d041      	beq.n	2429a <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   24216:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   2421a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2421c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2421e:	2300      	movs	r3, #0
	node->prev = NULL;
   24220:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   24224:	e039      	b.n	2429a <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24226:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2422a:	2b00      	cmp	r3, #0
   2422c:	d1ef      	bne.n	2420e <clear_event_registrations+0x5e>
   2422e:	4939      	ldr	r1, [pc, #228]	; (24314 <clear_event_registrations+0x164>)
   24230:	23ad      	movs	r3, #173	; 0xad
   24232:	462a      	mov	r2, r5
   24234:	4630      	mov	r0, r6
   24236:	f003 f95e 	bl	274f6 <printk>
   2423a:	4837      	ldr	r0, [pc, #220]	; (24318 <clear_event_registrations+0x168>)
   2423c:	f003 f95b 	bl	274f6 <printk>
   24240:	21ad      	movs	r1, #173	; 0xad
   24242:	e7e1      	b.n	24208 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24244:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24248:	2b00      	cmp	r3, #0
   2424a:	d1e0      	bne.n	2420e <clear_event_registrations+0x5e>
   2424c:	4933      	ldr	r1, [pc, #204]	; (2431c <clear_event_registrations+0x16c>)
   2424e:	23b1      	movs	r3, #177	; 0xb1
   24250:	462a      	mov	r2, r5
   24252:	4630      	mov	r0, r6
   24254:	f003 f94f 	bl	274f6 <printk>
   24258:	4831      	ldr	r0, [pc, #196]	; (24320 <clear_event_registrations+0x170>)
   2425a:	f003 f94c 	bl	274f6 <printk>
   2425e:	21b1      	movs	r1, #177	; 0xb1
   24260:	e7d2      	b.n	24208 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24262:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24266:	2b00      	cmp	r3, #0
   24268:	d1d1      	bne.n	2420e <clear_event_registrations+0x5e>
   2426a:	492e      	ldr	r1, [pc, #184]	; (24324 <clear_event_registrations+0x174>)
   2426c:	23b5      	movs	r3, #181	; 0xb5
   2426e:	462a      	mov	r2, r5
   24270:	4630      	mov	r0, r6
   24272:	f003 f940 	bl	274f6 <printk>
   24276:	482c      	ldr	r0, [pc, #176]	; (24328 <clear_event_registrations+0x178>)
   24278:	f003 f93d 	bl	274f6 <printk>
   2427c:	21b5      	movs	r1, #181	; 0xb5
   2427e:	e7c3      	b.n	24208 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   24280:	4649      	mov	r1, r9
   24282:	23bc      	movs	r3, #188	; 0xbc
   24284:	462a      	mov	r2, r5
   24286:	4630      	mov	r0, r6
   24288:	f003 f935 	bl	274f6 <printk>
   2428c:	4827      	ldr	r0, [pc, #156]	; (2432c <clear_event_registrations+0x17c>)
   2428e:	f003 f932 	bl	274f6 <printk>
   24292:	21bc      	movs	r1, #188	; 0xbc
   24294:	4628      	mov	r0, r5
   24296:	f003 fbd3 	bl	27a40 <assert_post_action>
   2429a:	4825      	ldr	r0, [pc, #148]	; (24330 <clear_event_registrations+0x180>)
   2429c:	f7fc ffde 	bl	2125c <z_spin_unlock_valid>
   242a0:	b968      	cbnz	r0, 242be <clear_event_registrations+0x10e>
   242a2:	4a24      	ldr	r2, [pc, #144]	; (24334 <clear_event_registrations+0x184>)
   242a4:	4924      	ldr	r1, [pc, #144]	; (24338 <clear_event_registrations+0x188>)
   242a6:	23ac      	movs	r3, #172	; 0xac
   242a8:	4630      	mov	r0, r6
   242aa:	f003 f924 	bl	274f6 <printk>
   242ae:	4920      	ldr	r1, [pc, #128]	; (24330 <clear_event_registrations+0x180>)
   242b0:	4822      	ldr	r0, [pc, #136]	; (2433c <clear_event_registrations+0x18c>)
   242b2:	f003 f920 	bl	274f6 <printk>
   242b6:	481f      	ldr	r0, [pc, #124]	; (24334 <clear_event_registrations+0x184>)
   242b8:	21ac      	movs	r1, #172	; 0xac
   242ba:	f003 fbc1 	bl	27a40 <assert_post_action>
   242be:	f387 8811 	msr	BASEPRI, r7
   242c2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   242c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   242ca:	f3ef 8711 	mrs	r7, BASEPRI
   242ce:	f383 8811 	msr	BASEPRI, r3
   242d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242d6:	4816      	ldr	r0, [pc, #88]	; (24330 <clear_event_registrations+0x180>)
   242d8:	f7fc ffb2 	bl	21240 <z_spin_lock_valid>
   242dc:	b968      	cbnz	r0, 242fa <clear_event_registrations+0x14a>
   242de:	4a15      	ldr	r2, [pc, #84]	; (24334 <clear_event_registrations+0x184>)
   242e0:	4917      	ldr	r1, [pc, #92]	; (24340 <clear_event_registrations+0x190>)
   242e2:	2381      	movs	r3, #129	; 0x81
   242e4:	4630      	mov	r0, r6
   242e6:	f003 f906 	bl	274f6 <printk>
   242ea:	4911      	ldr	r1, [pc, #68]	; (24330 <clear_event_registrations+0x180>)
   242ec:	4815      	ldr	r0, [pc, #84]	; (24344 <clear_event_registrations+0x194>)
   242ee:	f003 f902 	bl	274f6 <printk>
   242f2:	4810      	ldr	r0, [pc, #64]	; (24334 <clear_event_registrations+0x184>)
   242f4:	2181      	movs	r1, #129	; 0x81
   242f6:	f003 fba3 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   242fa:	480d      	ldr	r0, [pc, #52]	; (24330 <clear_event_registrations+0x180>)
   242fc:	f7fc ffbe 	bl	2127c <z_spin_lock_set_owner>
	return k;
   24300:	3c14      	subs	r4, #20
   24302:	e760      	b.n	241c6 <clear_event_registrations+0x16>
   24304:	00031e53 	.word	0x00031e53
   24308:	0002dcd3 	.word	0x0002dcd3
   2430c:	00031e74 	.word	0x00031e74
   24310:	00031e8e 	.word	0x00031e8e
   24314:	00031ea3 	.word	0x00031ea3
   24318:	00031ebf 	.word	0x00031ebf
   2431c:	00031ed0 	.word	0x00031ed0
   24320:	00031eed 	.word	0x00031eed
   24324:	00031f04 	.word	0x00031f04
   24328:	00031f1f 	.word	0x00031f1f
   2432c:	00031f38 	.word	0x00031f38
   24330:	20003438 	.word	0x20003438
   24334:	0002dd93 	.word	0x0002dd93
   24338:	0002ddb9 	.word	0x0002ddb9
   2433c:	0002ddd0 	.word	0x0002ddd0
   24340:	0002dde5 	.word	0x0002dde5
   24344:	0002ddfa 	.word	0x0002ddfa
   24348:	00032142 	.word	0x00032142

0002434c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2434c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   24350:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24352:	4e7c      	ldr	r6, [pc, #496]	; (24544 <register_events+0x1f8>)
   24354:	f8df 8230 	ldr.w	r8, [pc, #560]	; 24588 <register_events+0x23c>
   24358:	f8df a230 	ldr.w	sl, [pc, #560]	; 2458c <register_events+0x240>
{
   2435c:	9100      	str	r1, [sp, #0]
   2435e:	4615      	mov	r5, r2
   24360:	9301      	str	r3, [sp, #4]
   24362:	4604      	mov	r4, r0
	int events_registered = 0;
   24364:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   24366:	9b00      	ldr	r3, [sp, #0]
   24368:	429f      	cmp	r7, r3
   2436a:	db03      	blt.n	24374 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2436c:	4648      	mov	r0, r9
   2436e:	b003      	add	sp, #12
   24370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24374:	f04f 0340 	mov.w	r3, #64	; 0x40
   24378:	f3ef 8b11 	mrs	fp, BASEPRI
   2437c:	f383 8811 	msr	BASEPRI, r3
   24380:	f3bf 8f6f 	isb	sy
   24384:	4630      	mov	r0, r6
   24386:	f7fc ff5b 	bl	21240 <z_spin_lock_valid>
   2438a:	b968      	cbnz	r0, 243a8 <register_events+0x5c>
   2438c:	486e      	ldr	r0, [pc, #440]	; (24548 <register_events+0x1fc>)
   2438e:	2381      	movs	r3, #129	; 0x81
   24390:	4642      	mov	r2, r8
   24392:	4651      	mov	r1, sl
   24394:	f003 f8af 	bl	274f6 <printk>
   24398:	486c      	ldr	r0, [pc, #432]	; (2454c <register_events+0x200>)
   2439a:	4631      	mov	r1, r6
   2439c:	f003 f8ab 	bl	274f6 <printk>
   243a0:	2181      	movs	r1, #129	; 0x81
   243a2:	4640      	mov	r0, r8
   243a4:	f003 fb4c 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   243a8:	4630      	mov	r0, r6
   243aa:	f7fc ff67 	bl	2127c <z_spin_lock_set_owner>
	switch (event->type) {
   243ae:	7b63      	ldrb	r3, [r4, #13]
   243b0:	f003 031f 	and.w	r3, r3, #31
   243b4:	2b08      	cmp	r3, #8
   243b6:	d84f      	bhi.n	24458 <register_events+0x10c>
   243b8:	e8df f003 	tbb	[pc, r3]
   243bc:	4e054230 	.word	0x4e054230
   243c0:	4e4e4e2c 	.word	0x4e4e4e2c
   243c4:	48          	.byte	0x48
   243c5:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   243c6:	6923      	ldr	r3, [r4, #16]
   243c8:	689b      	ldr	r3, [r3, #8]
   243ca:	b33b      	cbz	r3, 2441c <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   243cc:	2302      	movs	r3, #2
	event->state |= state;
   243ce:	68e2      	ldr	r2, [r4, #12]
   243d0:	f3c2 3045 	ubfx	r0, r2, #13, #6
   243d4:	4303      	orrs	r3, r0
	event->poller = NULL;
   243d6:	2100      	movs	r1, #0
	event->state |= state;
   243d8:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   243dc:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   243de:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   243e0:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   243e2:	4630      	mov	r0, r6
   243e4:	f7fc ff3a 	bl	2125c <z_spin_unlock_valid>
   243e8:	b968      	cbnz	r0, 24406 <register_events+0xba>
   243ea:	4959      	ldr	r1, [pc, #356]	; (24550 <register_events+0x204>)
   243ec:	4856      	ldr	r0, [pc, #344]	; (24548 <register_events+0x1fc>)
   243ee:	23ac      	movs	r3, #172	; 0xac
   243f0:	4642      	mov	r2, r8
   243f2:	f003 f880 	bl	274f6 <printk>
   243f6:	4857      	ldr	r0, [pc, #348]	; (24554 <register_events+0x208>)
   243f8:	4631      	mov	r1, r6
   243fa:	f003 f87c 	bl	274f6 <printk>
   243fe:	21ac      	movs	r1, #172	; 0xac
   24400:	4640      	mov	r0, r8
   24402:	f003 fb1d 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   24406:	f38b 8811 	msr	BASEPRI, fp
   2440a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2440e:	3701      	adds	r7, #1
   24410:	3414      	adds	r4, #20
   24412:	e7a8      	b.n	24366 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   24414:	6923      	ldr	r3, [r4, #16]
   24416:	681b      	ldr	r3, [r3, #0]
   24418:	2b00      	cmp	r3, #0
   2441a:	d12e      	bne.n	2447a <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   2441c:	9b01      	ldr	r3, [sp, #4]
   2441e:	2b00      	cmp	r3, #0
   24420:	d1df      	bne.n	243e2 <register_events+0x96>
   24422:	782b      	ldrb	r3, [r5, #0]
   24424:	2b00      	cmp	r3, #0
   24426:	d0dc      	beq.n	243e2 <register_events+0x96>
	switch (event->type) {
   24428:	7b63      	ldrb	r3, [r4, #13]
   2442a:	f003 031f 	and.w	r3, r3, #31
   2442e:	2b08      	cmp	r3, #8
   24430:	d879      	bhi.n	24526 <register_events+0x1da>
   24432:	e8df f003 	tbb	[pc, r3]
   24436:	5139      	.short	0x5139
   24438:	783d7824 	.word	0x783d7824
   2443c:	7878      	.short	0x7878
   2443e:	64          	.byte	0x64
   2443f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   24440:	6923      	ldr	r3, [r4, #16]
   24442:	689b      	ldr	r3, [r3, #8]
   24444:	2b00      	cmp	r3, #0
   24446:	d0e9      	beq.n	2441c <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   24448:	2301      	movs	r3, #1
   2444a:	e7c0      	b.n	243ce <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   2444c:	6923      	ldr	r3, [r4, #16]
   2444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24450:	2b00      	cmp	r3, #0
   24452:	d0e3      	beq.n	2441c <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24454:	2310      	movs	r3, #16
   24456:	e7ba      	b.n	243ce <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24458:	4a3f      	ldr	r2, [pc, #252]	; (24558 <register_events+0x20c>)
   2445a:	4940      	ldr	r1, [pc, #256]	; (2455c <register_events+0x210>)
   2445c:	483a      	ldr	r0, [pc, #232]	; (24548 <register_events+0x1fc>)
   2445e:	235c      	movs	r3, #92	; 0x5c
   24460:	f003 f849 	bl	274f6 <printk>
   24464:	7b61      	ldrb	r1, [r4, #13]
   24466:	483e      	ldr	r0, [pc, #248]	; (24560 <register_events+0x214>)
   24468:	f001 011f 	and.w	r1, r1, #31
   2446c:	f003 f843 	bl	274f6 <printk>
   24470:	4839      	ldr	r0, [pc, #228]	; (24558 <register_events+0x20c>)
   24472:	215c      	movs	r1, #92	; 0x5c
   24474:	f003 fae4 	bl	27a40 <assert_post_action>
		break;
   24478:	e7d0      	b.n	2441c <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2447a:	2304      	movs	r3, #4
   2447c:	e7a7      	b.n	243ce <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2447e:	6923      	ldr	r3, [r4, #16]
   24480:	b963      	cbnz	r3, 2449c <register_events+0x150>
   24482:	4938      	ldr	r1, [pc, #224]	; (24564 <register_events+0x218>)
   24484:	4a34      	ldr	r2, [pc, #208]	; (24558 <register_events+0x20c>)
   24486:	4830      	ldr	r0, [pc, #192]	; (24548 <register_events+0x1fc>)
   24488:	2386      	movs	r3, #134	; 0x86
   2448a:	f003 f834 	bl	274f6 <printk>
   2448e:	4836      	ldr	r0, [pc, #216]	; (24568 <register_events+0x21c>)
   24490:	f003 f831 	bl	274f6 <printk>
   24494:	4830      	ldr	r0, [pc, #192]	; (24558 <register_events+0x20c>)
   24496:	2186      	movs	r1, #134	; 0x86
   24498:	f003 fad2 	bl	27a40 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2449c:	6920      	ldr	r0, [r4, #16]
   2449e:	462a      	mov	r2, r5
   244a0:	4621      	mov	r1, r4
   244a2:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   244a4:	f008 f9d4 	bl	2c850 <add_event>
	event->poller = poller;
   244a8:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   244aa:	f109 0901 	add.w	r9, r9, #1
   244ae:	e798      	b.n	243e2 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   244b0:	6923      	ldr	r3, [r4, #16]
   244b2:	b963      	cbnz	r3, 244ce <register_events+0x182>
   244b4:	492d      	ldr	r1, [pc, #180]	; (2456c <register_events+0x220>)
   244b6:	4a28      	ldr	r2, [pc, #160]	; (24558 <register_events+0x20c>)
   244b8:	4823      	ldr	r0, [pc, #140]	; (24548 <register_events+0x1fc>)
   244ba:	238a      	movs	r3, #138	; 0x8a
   244bc:	f003 f81b 	bl	274f6 <printk>
   244c0:	482b      	ldr	r0, [pc, #172]	; (24570 <register_events+0x224>)
   244c2:	f003 f818 	bl	274f6 <printk>
   244c6:	4824      	ldr	r0, [pc, #144]	; (24558 <register_events+0x20c>)
   244c8:	218a      	movs	r1, #138	; 0x8a
   244ca:	f003 fab9 	bl	27a40 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   244ce:	6920      	ldr	r0, [r4, #16]
   244d0:	462a      	mov	r2, r5
   244d2:	4621      	mov	r1, r4
   244d4:	3014      	adds	r0, #20
   244d6:	e7e5      	b.n	244a4 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   244d8:	6923      	ldr	r3, [r4, #16]
   244da:	b963      	cbnz	r3, 244f6 <register_events+0x1aa>
   244dc:	4925      	ldr	r1, [pc, #148]	; (24574 <register_events+0x228>)
   244de:	4a1e      	ldr	r2, [pc, #120]	; (24558 <register_events+0x20c>)
   244e0:	4819      	ldr	r0, [pc, #100]	; (24548 <register_events+0x1fc>)
   244e2:	238e      	movs	r3, #142	; 0x8e
   244e4:	f003 f807 	bl	274f6 <printk>
   244e8:	4823      	ldr	r0, [pc, #140]	; (24578 <register_events+0x22c>)
   244ea:	f003 f804 	bl	274f6 <printk>
   244ee:	481a      	ldr	r0, [pc, #104]	; (24558 <register_events+0x20c>)
   244f0:	218e      	movs	r1, #142	; 0x8e
   244f2:	f003 faa5 	bl	27a40 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   244f6:	6920      	ldr	r0, [r4, #16]
   244f8:	462a      	mov	r2, r5
   244fa:	4621      	mov	r1, r4
   244fc:	e7d2      	b.n	244a4 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   244fe:	6923      	ldr	r3, [r4, #16]
   24500:	b963      	cbnz	r3, 2451c <register_events+0x1d0>
   24502:	491e      	ldr	r1, [pc, #120]	; (2457c <register_events+0x230>)
   24504:	4a14      	ldr	r2, [pc, #80]	; (24558 <register_events+0x20c>)
   24506:	4810      	ldr	r0, [pc, #64]	; (24548 <register_events+0x1fc>)
   24508:	2392      	movs	r3, #146	; 0x92
   2450a:	f002 fff4 	bl	274f6 <printk>
   2450e:	481c      	ldr	r0, [pc, #112]	; (24580 <register_events+0x234>)
   24510:	f002 fff1 	bl	274f6 <printk>
   24514:	4810      	ldr	r0, [pc, #64]	; (24558 <register_events+0x20c>)
   24516:	2192      	movs	r1, #146	; 0x92
   24518:	f003 fa92 	bl	27a40 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   2451c:	6920      	ldr	r0, [r4, #16]
   2451e:	462a      	mov	r2, r5
   24520:	4621      	mov	r1, r4
   24522:	3028      	adds	r0, #40	; 0x28
   24524:	e7be      	b.n	244a4 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   24526:	4a0c      	ldr	r2, [pc, #48]	; (24558 <register_events+0x20c>)
   24528:	490c      	ldr	r1, [pc, #48]	; (2455c <register_events+0x210>)
   2452a:	4807      	ldr	r0, [pc, #28]	; (24548 <register_events+0x1fc>)
   2452c:	2399      	movs	r3, #153	; 0x99
   2452e:	f002 ffe2 	bl	274f6 <printk>
   24532:	4814      	ldr	r0, [pc, #80]	; (24584 <register_events+0x238>)
   24534:	f002 ffdf 	bl	274f6 <printk>
   24538:	4807      	ldr	r0, [pc, #28]	; (24558 <register_events+0x20c>)
   2453a:	2199      	movs	r1, #153	; 0x99
   2453c:	f003 fa80 	bl	27a40 <assert_post_action>
		break;
   24540:	e7b2      	b.n	244a8 <register_events+0x15c>
   24542:	bf00      	nop
   24544:	20003438 	.word	0x20003438
   24548:	0002dcd3 	.word	0x0002dcd3
   2454c:	0002ddfa 	.word	0x0002ddfa
   24550:	0002ddb9 	.word	0x0002ddb9
   24554:	0002ddd0 	.word	0x0002ddd0
   24558:	00031e53 	.word	0x00031e53
   2455c:	00032142 	.word	0x00032142
   24560:	00031f4e 	.word	0x00031f4e
   24564:	00031e74 	.word	0x00031e74
   24568:	00031e8e 	.word	0x00031e8e
   2456c:	00031ea3 	.word	0x00031ea3
   24570:	00031ebf 	.word	0x00031ebf
   24574:	00031ed0 	.word	0x00031ed0
   24578:	00031eed 	.word	0x00031eed
   2457c:	00031f04 	.word	0x00031f04
   24580:	00031f1f 	.word	0x00031f1f
   24584:	00031f38 	.word	0x00031f38
   24588:	0002dd93 	.word	0x0002dd93
   2458c:	0002dde5 	.word	0x0002dde5

00024590 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   24590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   24594:	6884      	ldr	r4, [r0, #8]
{
   24596:	4605      	mov	r5, r0
   24598:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   2459a:	b1d4      	cbz	r4, 245d2 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   2459c:	7863      	ldrb	r3, [r4, #1]
   2459e:	2b01      	cmp	r3, #1
   245a0:	d14b      	bne.n	2463a <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   245a2:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   245a6:	d10e      	bne.n	245c6 <signal_poll_event+0x36>
   245a8:	4a30      	ldr	r2, [pc, #192]	; (2466c <signal_poll_event+0xdc>)
   245aa:	4931      	ldr	r1, [pc, #196]	; (24670 <signal_poll_event+0xe0>)
   245ac:	4831      	ldr	r0, [pc, #196]	; (24674 <signal_poll_event+0xe4>)
   245ae:	23f9      	movs	r3, #249	; 0xf9
   245b0:	f002 ffa1 	bl	274f6 <printk>
   245b4:	4830      	ldr	r0, [pc, #192]	; (24678 <signal_poll_event+0xe8>)
   245b6:	f002 ff9e 	bl	274f6 <printk>
   245ba:	482c      	ldr	r0, [pc, #176]	; (2466c <signal_poll_event+0xdc>)
   245bc:	21f9      	movs	r1, #249	; 0xf9
   245be:	f003 fa3f 	bl	27a40 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   245c2:	7b7b      	ldrb	r3, [r7, #13]
   245c4:	deff      	udf	#255	; 0xff
   245c6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   245ca:	f013 0302 	ands.w	r3, r3, #2
   245ce:	d10a      	bne.n	245e6 <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   245d0:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   245d2:	68eb      	ldr	r3, [r5, #12]
   245d4:	f3c3 3145 	ubfx	r1, r3, #13, #6
   245d8:	430e      	orrs	r6, r1
	event->poller = NULL;
   245da:	2000      	movs	r0, #0
	event->state |= state;
   245dc:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   245e0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   245e2:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   245e4:	e00d      	b.n	24602 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   245e6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   245ea:	f04f 31ff 	mov.w	r1, #4294967295
   245ee:	f06f 0001 	mvn.w	r0, #1
   245f2:	428b      	cmp	r3, r1
   245f4:	bf08      	it	eq
   245f6:	4282      	cmpeq	r2, r0
   245f8:	d105      	bne.n	24606 <signal_poll_event+0x76>
		poller->is_polling = false;
   245fa:	2300      	movs	r3, #0
   245fc:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   245fe:	f06f 000a 	mvn.w	r0, #10
}
   24602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   24606:	4638      	mov	r0, r7
   24608:	f7fe f992 	bl	22930 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2460c:	2e08      	cmp	r6, #8
   2460e:	bf0c      	ite	eq
   24610:	f06f 0303 	mvneq.w	r3, #3
   24614:	2300      	movne	r3, #0
   24616:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24618:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2461c:	06db      	lsls	r3, r3, #27
   2461e:	d104      	bne.n	2462a <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   24620:	f854 8c48 	ldr.w	r8, [r4, #-72]
   24624:	f1b8 0f00 	cmp.w	r8, #0
   24628:	d001      	beq.n	2462e <signal_poll_event+0x9e>
		poller->is_polling = false;
   2462a:	2300      	movs	r3, #0
   2462c:	e7d0      	b.n	245d0 <signal_poll_event+0x40>
	z_ready_thread(thread);
   2462e:	4638      	mov	r0, r7
   24630:	f7fe fcfa 	bl	23028 <z_ready_thread>
		poller->is_polling = false;
   24634:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   24638:	e7cb      	b.n	245d2 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   2463a:	2b02      	cmp	r3, #2
   2463c:	d1f5      	bne.n	2462a <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2463e:	7823      	ldrb	r3, [r4, #0]
   24640:	2b00      	cmp	r3, #0
   24642:	d0c6      	beq.n	245d2 <signal_poll_event+0x42>
   24644:	f854 7c04 	ldr.w	r7, [r4, #-4]
   24648:	b177      	cbz	r7, 24668 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2464a:	f1a4 0914 	sub.w	r9, r4, #20
   2464e:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   24652:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   24656:	f7ff fb21 	bl	23c9c <z_abort_timeout>
		twork->poll_result = 0;
   2465a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2465e:	4649      	mov	r1, r9
   24660:	4638      	mov	r0, r7
   24662:	f7fd fca7 	bl	21fb4 <k_work_submit_to_queue>
   24666:	e7e5      	b.n	24634 <signal_poll_event+0xa4>
		poller->is_polling = false;
   24668:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2466a:	e7b2      	b.n	245d2 <signal_poll_event+0x42>
   2466c:	00031e53 	.word	0x00031e53
   24670:	00031f6b 	.word	0x00031f6b
   24674:	0002dcd3 	.word	0x0002dcd3
   24678:	00031f81 	.word	0x00031f81

0002467c <k_poll_event_init>:
{
   2467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2467e:	4605      	mov	r5, r0
   24680:	460f      	mov	r7, r1
   24682:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24684:	4614      	mov	r4, r2
   24686:	b162      	cbz	r2, 246a2 <k_poll_event_init+0x26>
   24688:	491b      	ldr	r1, [pc, #108]	; (246f8 <k_poll_event_init+0x7c>)
   2468a:	4a1c      	ldr	r2, [pc, #112]	; (246fc <k_poll_event_init+0x80>)
   2468c:	481c      	ldr	r0, [pc, #112]	; (24700 <k_poll_event_init+0x84>)
   2468e:	232d      	movs	r3, #45	; 0x2d
   24690:	f002 ff31 	bl	274f6 <printk>
   24694:	481b      	ldr	r0, [pc, #108]	; (24704 <k_poll_event_init+0x88>)
   24696:	f002 ff2e 	bl	274f6 <printk>
   2469a:	4818      	ldr	r0, [pc, #96]	; (246fc <k_poll_event_init+0x80>)
   2469c:	212d      	movs	r1, #45	; 0x2d
   2469e:	f003 f9cf 	bl	27a40 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   246a2:	2f1f      	cmp	r7, #31
   246a4:	d90c      	bls.n	246c0 <k_poll_event_init+0x44>
   246a6:	4918      	ldr	r1, [pc, #96]	; (24708 <k_poll_event_init+0x8c>)
   246a8:	4a14      	ldr	r2, [pc, #80]	; (246fc <k_poll_event_init+0x80>)
   246aa:	4815      	ldr	r0, [pc, #84]	; (24700 <k_poll_event_init+0x84>)
   246ac:	232f      	movs	r3, #47	; 0x2f
   246ae:	f002 ff22 	bl	274f6 <printk>
   246b2:	4816      	ldr	r0, [pc, #88]	; (2470c <k_poll_event_init+0x90>)
   246b4:	f002 ff1f 	bl	274f6 <printk>
   246b8:	4810      	ldr	r0, [pc, #64]	; (246fc <k_poll_event_init+0x80>)
   246ba:	212f      	movs	r1, #47	; 0x2f
   246bc:	f003 f9c0 	bl	27a40 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   246c0:	b966      	cbnz	r6, 246dc <k_poll_event_init+0x60>
   246c2:	4913      	ldr	r1, [pc, #76]	; (24710 <k_poll_event_init+0x94>)
   246c4:	4a0d      	ldr	r2, [pc, #52]	; (246fc <k_poll_event_init+0x80>)
   246c6:	480e      	ldr	r0, [pc, #56]	; (24700 <k_poll_event_init+0x84>)
   246c8:	2330      	movs	r3, #48	; 0x30
   246ca:	f002 ff14 	bl	274f6 <printk>
   246ce:	4811      	ldr	r0, [pc, #68]	; (24714 <k_poll_event_init+0x98>)
   246d0:	f002 ff11 	bl	274f6 <printk>
   246d4:	4809      	ldr	r0, [pc, #36]	; (246fc <k_poll_event_init+0x80>)
   246d6:	2130      	movs	r1, #48	; 0x30
   246d8:	f003 f9b2 	bl	27a40 <assert_post_action>
	event->poller = NULL;
   246dc:	2300      	movs	r3, #0
	event->type = type;
   246de:	04e4      	lsls	r4, r4, #19
   246e0:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   246e2:	60ab      	str	r3, [r5, #8]
	event->type = type;
   246e4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   246e8:	7b2b      	ldrb	r3, [r5, #12]
   246ea:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   246ee:	433c      	orrs	r4, r7
   246f0:	431c      	orrs	r4, r3
	event->obj = obj;
   246f2:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   246f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   246f8:	00031fa0 	.word	0x00031fa0
   246fc:	00031e53 	.word	0x00031e53
   24700:	0002dcd3 	.word	0x0002dcd3
   24704:	00031fc0 	.word	0x00031fc0
   24708:	00031fe6 	.word	0x00031fe6
   2470c:	0003200a 	.word	0x0003200a
   24710:	0003201a 	.word	0x0003201a
   24714:	0003202d 	.word	0x0003202d

00024718 <z_impl_k_poll>:
{
   24718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2471c:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   2471e:	4b75      	ldr	r3, [pc, #468]	; (248f4 <z_impl_k_poll+0x1dc>)
   24720:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   24722:	2301      	movs	r3, #1
{
   24724:	4604      	mov	r4, r0
   24726:	4688      	mov	r8, r1
   24728:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   2472a:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   2472e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   24732:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   24736:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2473a:	b173      	cbz	r3, 2475a <z_impl_k_poll+0x42>
   2473c:	496e      	ldr	r1, [pc, #440]	; (248f8 <z_impl_k_poll+0x1e0>)
   2473e:	4a6f      	ldr	r2, [pc, #444]	; (248fc <z_impl_k_poll+0x1e4>)
   24740:	486f      	ldr	r0, [pc, #444]	; (24900 <z_impl_k_poll+0x1e8>)
   24742:	f44f 738d 	mov.w	r3, #282	; 0x11a
   24746:	f002 fed6 	bl	274f6 <printk>
   2474a:	486e      	ldr	r0, [pc, #440]	; (24904 <z_impl_k_poll+0x1ec>)
   2474c:	f002 fed3 	bl	274f6 <printk>
   24750:	486a      	ldr	r0, [pc, #424]	; (248fc <z_impl_k_poll+0x1e4>)
   24752:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24756:	f003 f973 	bl	27a40 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2475a:	b974      	cbnz	r4, 2477a <z_impl_k_poll+0x62>
   2475c:	496a      	ldr	r1, [pc, #424]	; (24908 <z_impl_k_poll+0x1f0>)
   2475e:	4a67      	ldr	r2, [pc, #412]	; (248fc <z_impl_k_poll+0x1e4>)
   24760:	4867      	ldr	r0, [pc, #412]	; (24900 <z_impl_k_poll+0x1e8>)
   24762:	f240 131b 	movw	r3, #283	; 0x11b
   24766:	f002 fec6 	bl	274f6 <printk>
   2476a:	4868      	ldr	r0, [pc, #416]	; (2490c <z_impl_k_poll+0x1f4>)
   2476c:	f002 fec3 	bl	274f6 <printk>
   24770:	4862      	ldr	r0, [pc, #392]	; (248fc <z_impl_k_poll+0x1e4>)
   24772:	f240 111b 	movw	r1, #283	; 0x11b
   24776:	f003 f963 	bl	27a40 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2477a:	f1b8 0f00 	cmp.w	r8, #0
   2477e:	da0e      	bge.n	2479e <z_impl_k_poll+0x86>
   24780:	4963      	ldr	r1, [pc, #396]	; (24910 <z_impl_k_poll+0x1f8>)
   24782:	4a5e      	ldr	r2, [pc, #376]	; (248fc <z_impl_k_poll+0x1e4>)
   24784:	485e      	ldr	r0, [pc, #376]	; (24900 <z_impl_k_poll+0x1e8>)
   24786:	f44f 738e 	mov.w	r3, #284	; 0x11c
   2478a:	f002 feb4 	bl	274f6 <printk>
   2478e:	4861      	ldr	r0, [pc, #388]	; (24914 <z_impl_k_poll+0x1fc>)
   24790:	f002 feb1 	bl	274f6 <printk>
   24794:	4859      	ldr	r0, [pc, #356]	; (248fc <z_impl_k_poll+0x1e4>)
   24796:	f44f 718e 	mov.w	r1, #284	; 0x11c
   2479a:	f003 f951 	bl	27a40 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   2479e:	ea56 0307 	orrs.w	r3, r6, r7
   247a2:	bf0c      	ite	eq
   247a4:	2301      	moveq	r3, #1
   247a6:	2300      	movne	r3, #0
   247a8:	4641      	mov	r1, r8
   247aa:	464a      	mov	r2, r9
   247ac:	4620      	mov	r0, r4
   247ae:	f7ff fdcd 	bl	2434c <register_events>
   247b2:	4680      	mov	r8, r0
	__asm__ volatile(
   247b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   247b8:	f3ef 8911 	mrs	r9, BASEPRI
   247bc:	f383 8811 	msr	BASEPRI, r3
   247c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247c4:	4854      	ldr	r0, [pc, #336]	; (24918 <z_impl_k_poll+0x200>)
   247c6:	f7fc fd3b 	bl	21240 <z_spin_lock_valid>
   247ca:	b968      	cbnz	r0, 247e8 <z_impl_k_poll+0xd0>
   247cc:	4a53      	ldr	r2, [pc, #332]	; (2491c <z_impl_k_poll+0x204>)
   247ce:	4954      	ldr	r1, [pc, #336]	; (24920 <z_impl_k_poll+0x208>)
   247d0:	484b      	ldr	r0, [pc, #300]	; (24900 <z_impl_k_poll+0x1e8>)
   247d2:	2381      	movs	r3, #129	; 0x81
   247d4:	f002 fe8f 	bl	274f6 <printk>
   247d8:	494f      	ldr	r1, [pc, #316]	; (24918 <z_impl_k_poll+0x200>)
   247da:	4852      	ldr	r0, [pc, #328]	; (24924 <z_impl_k_poll+0x20c>)
   247dc:	f002 fe8b 	bl	274f6 <printk>
   247e0:	484e      	ldr	r0, [pc, #312]	; (2491c <z_impl_k_poll+0x204>)
   247e2:	2181      	movs	r1, #129	; 0x81
   247e4:	f003 f92c 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   247e8:	484b      	ldr	r0, [pc, #300]	; (24918 <z_impl_k_poll+0x200>)
   247ea:	f7fc fd47 	bl	2127c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   247ee:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   247f2:	b9fb      	cbnz	r3, 24834 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   247f4:	4620      	mov	r0, r4
   247f6:	464a      	mov	r2, r9
   247f8:	4641      	mov	r1, r8
   247fa:	f7ff fcd9 	bl	241b0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247fe:	4846      	ldr	r0, [pc, #280]	; (24918 <z_impl_k_poll+0x200>)
   24800:	f7fc fd2c 	bl	2125c <z_spin_unlock_valid>
   24804:	b968      	cbnz	r0, 24822 <z_impl_k_poll+0x10a>
   24806:	4a45      	ldr	r2, [pc, #276]	; (2491c <z_impl_k_poll+0x204>)
   24808:	4947      	ldr	r1, [pc, #284]	; (24928 <z_impl_k_poll+0x210>)
   2480a:	483d      	ldr	r0, [pc, #244]	; (24900 <z_impl_k_poll+0x1e8>)
   2480c:	23ac      	movs	r3, #172	; 0xac
   2480e:	f002 fe72 	bl	274f6 <printk>
   24812:	4941      	ldr	r1, [pc, #260]	; (24918 <z_impl_k_poll+0x200>)
   24814:	4845      	ldr	r0, [pc, #276]	; (2492c <z_impl_k_poll+0x214>)
   24816:	f002 fe6e 	bl	274f6 <printk>
   2481a:	4840      	ldr	r0, [pc, #256]	; (2491c <z_impl_k_poll+0x204>)
   2481c:	21ac      	movs	r1, #172	; 0xac
   2481e:	f003 f90f 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   24822:	f389 8811 	msr	BASEPRI, r9
   24826:	f3bf 8f6f 	isb	sy
		return 0;
   2482a:	2500      	movs	r5, #0
}
   2482c:	4628      	mov	r0, r5
   2482e:	b003      	add	sp, #12
   24830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   24834:	2300      	movs	r3, #0
   24836:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2483a:	ea56 0307 	orrs.w	r3, r6, r7
   2483e:	d118      	bne.n	24872 <z_impl_k_poll+0x15a>
   24840:	4835      	ldr	r0, [pc, #212]	; (24918 <z_impl_k_poll+0x200>)
   24842:	f7fc fd0b 	bl	2125c <z_spin_unlock_valid>
   24846:	b968      	cbnz	r0, 24864 <z_impl_k_poll+0x14c>
   24848:	4a34      	ldr	r2, [pc, #208]	; (2491c <z_impl_k_poll+0x204>)
   2484a:	4937      	ldr	r1, [pc, #220]	; (24928 <z_impl_k_poll+0x210>)
   2484c:	482c      	ldr	r0, [pc, #176]	; (24900 <z_impl_k_poll+0x1e8>)
   2484e:	23ac      	movs	r3, #172	; 0xac
   24850:	f002 fe51 	bl	274f6 <printk>
   24854:	4930      	ldr	r1, [pc, #192]	; (24918 <z_impl_k_poll+0x200>)
   24856:	4835      	ldr	r0, [pc, #212]	; (2492c <z_impl_k_poll+0x214>)
   24858:	f002 fe4d 	bl	274f6 <printk>
   2485c:	482f      	ldr	r0, [pc, #188]	; (2491c <z_impl_k_poll+0x204>)
   2485e:	21ac      	movs	r1, #172	; 0xac
   24860:	f003 f8ee 	bl	27a40 <assert_post_action>
   24864:	f389 8811 	msr	BASEPRI, r9
   24868:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2486c:	f06f 050a 	mvn.w	r5, #10
   24870:	e7dc      	b.n	2482c <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24872:	e9cd 6700 	strd	r6, r7, [sp]
   24876:	4a2e      	ldr	r2, [pc, #184]	; (24930 <z_impl_k_poll+0x218>)
   24878:	4827      	ldr	r0, [pc, #156]	; (24918 <z_impl_k_poll+0x200>)
   2487a:	4649      	mov	r1, r9
   2487c:	f7fe f99a 	bl	22bb4 <z_pend_curr>
   24880:	4605      	mov	r5, r0
	__asm__ volatile(
   24882:	f04f 0340 	mov.w	r3, #64	; 0x40
   24886:	f3ef 8611 	mrs	r6, BASEPRI
   2488a:	f383 8811 	msr	BASEPRI, r3
   2488e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24892:	4821      	ldr	r0, [pc, #132]	; (24918 <z_impl_k_poll+0x200>)
   24894:	f7fc fcd4 	bl	21240 <z_spin_lock_valid>
   24898:	b968      	cbnz	r0, 248b6 <z_impl_k_poll+0x19e>
   2489a:	4a20      	ldr	r2, [pc, #128]	; (2491c <z_impl_k_poll+0x204>)
   2489c:	4920      	ldr	r1, [pc, #128]	; (24920 <z_impl_k_poll+0x208>)
   2489e:	4818      	ldr	r0, [pc, #96]	; (24900 <z_impl_k_poll+0x1e8>)
   248a0:	2381      	movs	r3, #129	; 0x81
   248a2:	f002 fe28 	bl	274f6 <printk>
   248a6:	491c      	ldr	r1, [pc, #112]	; (24918 <z_impl_k_poll+0x200>)
   248a8:	481e      	ldr	r0, [pc, #120]	; (24924 <z_impl_k_poll+0x20c>)
   248aa:	f002 fe24 	bl	274f6 <printk>
   248ae:	481b      	ldr	r0, [pc, #108]	; (2491c <z_impl_k_poll+0x204>)
   248b0:	2181      	movs	r1, #129	; 0x81
   248b2:	f003 f8c5 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   248b6:	4818      	ldr	r0, [pc, #96]	; (24918 <z_impl_k_poll+0x200>)
   248b8:	f7fc fce0 	bl	2127c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   248bc:	4620      	mov	r0, r4
   248be:	4632      	mov	r2, r6
   248c0:	4641      	mov	r1, r8
   248c2:	f7ff fc75 	bl	241b0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   248c6:	4814      	ldr	r0, [pc, #80]	; (24918 <z_impl_k_poll+0x200>)
   248c8:	f7fc fcc8 	bl	2125c <z_spin_unlock_valid>
   248cc:	b968      	cbnz	r0, 248ea <z_impl_k_poll+0x1d2>
   248ce:	4a13      	ldr	r2, [pc, #76]	; (2491c <z_impl_k_poll+0x204>)
   248d0:	4915      	ldr	r1, [pc, #84]	; (24928 <z_impl_k_poll+0x210>)
   248d2:	480b      	ldr	r0, [pc, #44]	; (24900 <z_impl_k_poll+0x1e8>)
   248d4:	23ac      	movs	r3, #172	; 0xac
   248d6:	f002 fe0e 	bl	274f6 <printk>
   248da:	490f      	ldr	r1, [pc, #60]	; (24918 <z_impl_k_poll+0x200>)
   248dc:	4813      	ldr	r0, [pc, #76]	; (2492c <z_impl_k_poll+0x214>)
   248de:	f002 fe0a 	bl	274f6 <printk>
   248e2:	480e      	ldr	r0, [pc, #56]	; (2491c <z_impl_k_poll+0x204>)
   248e4:	21ac      	movs	r1, #172	; 0xac
   248e6:	f003 f8ab 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   248ea:	f386 8811 	msr	BASEPRI, r6
   248ee:	f3bf 8f6f 	isb	sy
	return swap_rc;
   248f2:	e79b      	b.n	2482c <z_impl_k_poll+0x114>
   248f4:	200033dc 	.word	0x200033dc
   248f8:	00031a33 	.word	0x00031a33
   248fc:	00031e53 	.word	0x00031e53
   24900:	0002dcd3 	.word	0x0002dcd3
   24904:	00030be6 	.word	0x00030be6
   24908:	00032047 	.word	0x00032047
   2490c:	0003205d 	.word	0x0003205d
   24910:	0003206c 	.word	0x0003206c
   24914:	0003207c 	.word	0x0003207c
   24918:	20003438 	.word	0x20003438
   2491c:	0002dd93 	.word	0x0002dd93
   24920:	0002dde5 	.word	0x0002dde5
   24924:	0002ddfa 	.word	0x0002ddfa
   24928:	0002ddb9 	.word	0x0002ddb9
   2492c:	0002ddd0 	.word	0x0002ddd0
   24930:	200005c4 	.word	0x200005c4

00024934 <z_impl_k_poll_signal_raise>:
{
   24934:	b570      	push	{r4, r5, r6, lr}
   24936:	4604      	mov	r4, r0
   24938:	460d      	mov	r5, r1
	__asm__ volatile(
   2493a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2493e:	f3ef 8611 	mrs	r6, BASEPRI
   24942:	f383 8811 	msr	BASEPRI, r3
   24946:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2494a:	4821      	ldr	r0, [pc, #132]	; (249d0 <z_impl_k_poll_signal_raise+0x9c>)
   2494c:	f7fc fc78 	bl	21240 <z_spin_lock_valid>
   24950:	b968      	cbnz	r0, 2496e <z_impl_k_poll_signal_raise+0x3a>
   24952:	4a20      	ldr	r2, [pc, #128]	; (249d4 <z_impl_k_poll_signal_raise+0xa0>)
   24954:	4920      	ldr	r1, [pc, #128]	; (249d8 <z_impl_k_poll_signal_raise+0xa4>)
   24956:	4821      	ldr	r0, [pc, #132]	; (249dc <z_impl_k_poll_signal_raise+0xa8>)
   24958:	2381      	movs	r3, #129	; 0x81
   2495a:	f002 fdcc 	bl	274f6 <printk>
   2495e:	491c      	ldr	r1, [pc, #112]	; (249d0 <z_impl_k_poll_signal_raise+0x9c>)
   24960:	481f      	ldr	r0, [pc, #124]	; (249e0 <z_impl_k_poll_signal_raise+0xac>)
   24962:	f002 fdc8 	bl	274f6 <printk>
   24966:	481b      	ldr	r0, [pc, #108]	; (249d4 <z_impl_k_poll_signal_raise+0xa0>)
   24968:	2181      	movs	r1, #129	; 0x81
   2496a:	f003 f869 	bl	27a40 <assert_post_action>
	z_spin_lock_set_owner(l);
   2496e:	4818      	ldr	r0, [pc, #96]	; (249d0 <z_impl_k_poll_signal_raise+0x9c>)
   24970:	f7fc fc84 	bl	2127c <z_spin_lock_set_owner>
	return list->head == list;
   24974:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   24976:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   24978:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2497a:	4284      	cmp	r4, r0
   2497c:	60a1      	str	r1, [r4, #8]
   2497e:	d117      	bne.n	249b0 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24980:	4813      	ldr	r0, [pc, #76]	; (249d0 <z_impl_k_poll_signal_raise+0x9c>)
   24982:	f7fc fc6b 	bl	2125c <z_spin_unlock_valid>
   24986:	b968      	cbnz	r0, 249a4 <z_impl_k_poll_signal_raise+0x70>
   24988:	4a12      	ldr	r2, [pc, #72]	; (249d4 <z_impl_k_poll_signal_raise+0xa0>)
   2498a:	4916      	ldr	r1, [pc, #88]	; (249e4 <z_impl_k_poll_signal_raise+0xb0>)
   2498c:	4813      	ldr	r0, [pc, #76]	; (249dc <z_impl_k_poll_signal_raise+0xa8>)
   2498e:	23ac      	movs	r3, #172	; 0xac
   24990:	f002 fdb1 	bl	274f6 <printk>
   24994:	490e      	ldr	r1, [pc, #56]	; (249d0 <z_impl_k_poll_signal_raise+0x9c>)
   24996:	4814      	ldr	r0, [pc, #80]	; (249e8 <z_impl_k_poll_signal_raise+0xb4>)
   24998:	f002 fdad 	bl	274f6 <printk>
   2499c:	480d      	ldr	r0, [pc, #52]	; (249d4 <z_impl_k_poll_signal_raise+0xa0>)
   2499e:	21ac      	movs	r1, #172	; 0xac
   249a0:	f003 f84e 	bl	27a40 <assert_post_action>
	__asm__ volatile(
   249a4:	f386 8811 	msr	BASEPRI, r6
   249a8:	f3bf 8f6f 	isb	sy
		return 0;
   249ac:	2400      	movs	r4, #0
   249ae:	e00d      	b.n	249cc <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   249b0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   249b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   249b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   249b8:	2300      	movs	r3, #0
	node->prev = NULL;
   249ba:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   249be:	f7ff fde7 	bl	24590 <signal_poll_event>
	z_reschedule(&lock, key);
   249c2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   249c4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   249c6:	4802      	ldr	r0, [pc, #8]	; (249d0 <z_impl_k_poll_signal_raise+0x9c>)
   249c8:	f7fd feb6 	bl	22738 <z_reschedule>
}
   249cc:	4620      	mov	r0, r4
   249ce:	bd70      	pop	{r4, r5, r6, pc}
   249d0:	20003438 	.word	0x20003438
   249d4:	0002dd93 	.word	0x0002dd93
   249d8:	0002dde5 	.word	0x0002dde5
   249dc:	0002dcd3 	.word	0x0002dcd3
   249e0:	0002ddfa 	.word	0x0002ddfa
   249e4:	0002ddb9 	.word	0x0002ddb9
   249e8:	0002ddd0 	.word	0x0002ddd0

000249ec <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   249ec:	2304      	movs	r3, #4
   249ee:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   249f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   249f4:	4606      	mov	r6, r0
   249f6:	460d      	mov	r5, r1
   249f8:	d20a      	bcs.n	24a10 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   249fa:	f04f 0800 	mov.w	r8, #0
   249fe:	f04f 0900 	mov.w	r9, #0
   24a02:	e9cd 8900 	strd	r8, r9, [sp]
   24a06:	4319      	orrs	r1, r3
   24a08:	f7fc f8ca 	bl	20ba0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24a0c:	4604      	mov	r4, r0
   24a0e:	b920      	cbnz	r0, 24a1a <z_heap_aligned_alloc+0x2e>
		return NULL;
   24a10:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   24a12:	4620      	mov	r0, r4
   24a14:	b002      	add	sp, #8
   24a16:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   24a1a:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   24a1e:	2d00      	cmp	r5, #0
   24a20:	d0f7      	beq.n	24a12 <z_heap_aligned_alloc+0x26>
   24a22:	1e6b      	subs	r3, r5, #1
   24a24:	421c      	tst	r4, r3
   24a26:	d0f4      	beq.n	24a12 <z_heap_aligned_alloc+0x26>
   24a28:	2325      	movs	r3, #37	; 0x25
   24a2a:	4a07      	ldr	r2, [pc, #28]	; (24a48 <z_heap_aligned_alloc+0x5c>)
   24a2c:	4907      	ldr	r1, [pc, #28]	; (24a4c <z_heap_aligned_alloc+0x60>)
   24a2e:	4808      	ldr	r0, [pc, #32]	; (24a50 <z_heap_aligned_alloc+0x64>)
   24a30:	f002 fd61 	bl	274f6 <printk>
   24a34:	4621      	mov	r1, r4
   24a36:	4807      	ldr	r0, [pc, #28]	; (24a54 <z_heap_aligned_alloc+0x68>)
   24a38:	462a      	mov	r2, r5
   24a3a:	f002 fd5c 	bl	274f6 <printk>
   24a3e:	4802      	ldr	r0, [pc, #8]	; (24a48 <z_heap_aligned_alloc+0x5c>)
   24a40:	2125      	movs	r1, #37	; 0x25
   24a42:	f002 fffd 	bl	27a40 <assert_post_action>
   24a46:	e7e4      	b.n	24a12 <z_heap_aligned_alloc+0x26>
   24a48:	00032089 	.word	0x00032089
   24a4c:	000320ad 	.word	0x000320ad
   24a50:	0002dcd3 	.word	0x0002dcd3
   24a54:	000320df 	.word	0x000320df

00024a58 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   24a58:	2803      	cmp	r0, #3
{
   24a5a:	b538      	push	{r3, r4, r5, lr}
   24a5c:	4604      	mov	r4, r0
   24a5e:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   24a60:	d901      	bls.n	24a66 <k_aligned_alloc+0xe>
   24a62:	0783      	lsls	r3, r0, #30
   24a64:	d00c      	beq.n	24a80 <k_aligned_alloc+0x28>
   24a66:	4912      	ldr	r1, [pc, #72]	; (24ab0 <k_aligned_alloc+0x58>)
   24a68:	4a12      	ldr	r2, [pc, #72]	; (24ab4 <k_aligned_alloc+0x5c>)
   24a6a:	4813      	ldr	r0, [pc, #76]	; (24ab8 <k_aligned_alloc+0x60>)
   24a6c:	2342      	movs	r3, #66	; 0x42
   24a6e:	f002 fd42 	bl	274f6 <printk>
   24a72:	4812      	ldr	r0, [pc, #72]	; (24abc <k_aligned_alloc+0x64>)
   24a74:	f002 fd3f 	bl	274f6 <printk>
   24a78:	480e      	ldr	r0, [pc, #56]	; (24ab4 <k_aligned_alloc+0x5c>)
   24a7a:	2142      	movs	r1, #66	; 0x42
   24a7c:	f002 ffe0 	bl	27a40 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   24a80:	1e63      	subs	r3, r4, #1
   24a82:	4223      	tst	r3, r4
   24a84:	d00c      	beq.n	24aa0 <k_aligned_alloc+0x48>
   24a86:	490e      	ldr	r1, [pc, #56]	; (24ac0 <k_aligned_alloc+0x68>)
   24a88:	4a0a      	ldr	r2, [pc, #40]	; (24ab4 <k_aligned_alloc+0x5c>)
   24a8a:	480b      	ldr	r0, [pc, #44]	; (24ab8 <k_aligned_alloc+0x60>)
   24a8c:	2346      	movs	r3, #70	; 0x46
   24a8e:	f002 fd32 	bl	274f6 <printk>
   24a92:	480c      	ldr	r0, [pc, #48]	; (24ac4 <k_aligned_alloc+0x6c>)
   24a94:	f002 fd2f 	bl	274f6 <printk>
   24a98:	4806      	ldr	r0, [pc, #24]	; (24ab4 <k_aligned_alloc+0x5c>)
   24a9a:	2146      	movs	r1, #70	; 0x46
   24a9c:	f002 ffd0 	bl	27a40 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24aa0:	462a      	mov	r2, r5
   24aa2:	4621      	mov	r1, r4
   24aa4:	4808      	ldr	r0, [pc, #32]	; (24ac8 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   24aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24aaa:	f7ff bf9f 	b.w	249ec <z_heap_aligned_alloc>
   24aae:	bf00      	nop
   24ab0:	00032107 	.word	0x00032107
   24ab4:	00032089 	.word	0x00032089
   24ab8:	0002dcd3 	.word	0x0002dcd3
   24abc:	00032144 	.word	0x00032144
   24ac0:	0002dede 	.word	0x0002dede
   24ac4:	0002def9 	.word	0x0002def9
   24ac8:	200007a0 	.word	0x200007a0

00024acc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24acc:	b538      	push	{r3, r4, r5, lr}
   24ace:	4604      	mov	r4, r0
   24ad0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24ad2:	f007 fd89 	bl	2c5e8 <k_is_in_isr>
   24ad6:	b950      	cbnz	r0, 24aee <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24ad8:	4b06      	ldr	r3, [pc, #24]	; (24af4 <z_thread_aligned_alloc+0x28>)
   24ada:	689b      	ldr	r3, [r3, #8]
   24adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24ade:	b143      	cbz	r3, 24af2 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   24ae0:	462a      	mov	r2, r5
   24ae2:	4621      	mov	r1, r4
   24ae4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   24ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24aea:	f7ff bf7f 	b.w	249ec <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   24aee:	4b02      	ldr	r3, [pc, #8]	; (24af8 <z_thread_aligned_alloc+0x2c>)
   24af0:	e7f6      	b.n	24ae0 <z_thread_aligned_alloc+0x14>
}
   24af2:	bd38      	pop	{r3, r4, r5, pc}
   24af4:	200033dc 	.word	0x200033dc
   24af8:	200007a0 	.word	0x200007a0

00024afc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   24afc:	4a02      	ldr	r2, [pc, #8]	; (24b08 <boot_banner+0xc>)
   24afe:	4903      	ldr	r1, [pc, #12]	; (24b0c <boot_banner+0x10>)
   24b00:	4803      	ldr	r0, [pc, #12]	; (24b10 <boot_banner+0x14>)
   24b02:	f002 bcf8 	b.w	274f6 <printk>
   24b06:	bf00      	nop
   24b08:	00030be8 	.word	0x00030be8
   24b0c:	00032171 	.word	0x00032171
   24b10:	0003217e 	.word	0x0003217e

00024b14 <nrf_cc3xx_platform_init>:
   24b14:	b510      	push	{r4, lr}
   24b16:	4c0c      	ldr	r4, [pc, #48]	; (24b48 <nrf_cc3xx_platform_init+0x34>)
   24b18:	6823      	ldr	r3, [r4, #0]
   24b1a:	b113      	cbz	r3, 24b22 <nrf_cc3xx_platform_init+0xe>
   24b1c:	4b0b      	ldr	r3, [pc, #44]	; (24b4c <nrf_cc3xx_platform_init+0x38>)
   24b1e:	681b      	ldr	r3, [r3, #0]
   24b20:	b92b      	cbnz	r3, 24b2e <nrf_cc3xx_platform_init+0x1a>
   24b22:	f000 fabd 	bl	250a0 <CC_LibInit>
   24b26:	b930      	cbnz	r0, 24b36 <nrf_cc3xx_platform_init+0x22>
   24b28:	4b08      	ldr	r3, [pc, #32]	; (24b4c <nrf_cc3xx_platform_init+0x38>)
   24b2a:	2201      	movs	r2, #1
   24b2c:	601a      	str	r2, [r3, #0]
   24b2e:	2301      	movs	r3, #1
   24b30:	6023      	str	r3, [r4, #0]
   24b32:	2000      	movs	r0, #0
   24b34:	bd10      	pop	{r4, pc}
   24b36:	3801      	subs	r0, #1
   24b38:	2806      	cmp	r0, #6
   24b3a:	d901      	bls.n	24b40 <nrf_cc3xx_platform_init+0x2c>
   24b3c:	4804      	ldr	r0, [pc, #16]	; (24b50 <nrf_cc3xx_platform_init+0x3c>)
   24b3e:	bd10      	pop	{r4, pc}
   24b40:	4b04      	ldr	r3, [pc, #16]	; (24b54 <nrf_cc3xx_platform_init+0x40>)
   24b42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24b46:	bd10      	pop	{r4, pc}
   24b48:	2000343c 	.word	0x2000343c
   24b4c:	20003440 	.word	0x20003440
   24b50:	ffff8ffe 	.word	0xffff8ffe
   24b54:	0002d754 	.word	0x0002d754

00024b58 <nrf_cc3xx_platform_abort>:
   24b58:	f3bf 8f4f 	dsb	sy
   24b5c:	4905      	ldr	r1, [pc, #20]	; (24b74 <nrf_cc3xx_platform_abort+0x1c>)
   24b5e:	4b06      	ldr	r3, [pc, #24]	; (24b78 <nrf_cc3xx_platform_abort+0x20>)
   24b60:	68ca      	ldr	r2, [r1, #12]
   24b62:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24b66:	4313      	orrs	r3, r2
   24b68:	60cb      	str	r3, [r1, #12]
   24b6a:	f3bf 8f4f 	dsb	sy
   24b6e:	bf00      	nop
   24b70:	e7fd      	b.n	24b6e <nrf_cc3xx_platform_abort+0x16>
   24b72:	bf00      	nop
   24b74:	e000ed00 	.word	0xe000ed00
   24b78:	05fa0004 	.word	0x05fa0004

00024b7c <CC_PalAbort>:
   24b7c:	b4f0      	push	{r4, r5, r6, r7}
   24b7e:	4f09      	ldr	r7, [pc, #36]	; (24ba4 <CC_PalAbort+0x28>)
   24b80:	4e09      	ldr	r6, [pc, #36]	; (24ba8 <CC_PalAbort+0x2c>)
   24b82:	4c0a      	ldr	r4, [pc, #40]	; (24bac <CC_PalAbort+0x30>)
   24b84:	4a0a      	ldr	r2, [pc, #40]	; (24bb0 <CC_PalAbort+0x34>)
   24b86:	4d0b      	ldr	r5, [pc, #44]	; (24bb4 <CC_PalAbort+0x38>)
   24b88:	490b      	ldr	r1, [pc, #44]	; (24bb8 <CC_PalAbort+0x3c>)
   24b8a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   24b8e:	603b      	str	r3, [r7, #0]
   24b90:	6852      	ldr	r2, [r2, #4]
   24b92:	6033      	str	r3, [r6, #0]
   24b94:	6023      	str	r3, [r4, #0]
   24b96:	2400      	movs	r4, #0
   24b98:	602b      	str	r3, [r5, #0]
   24b9a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   24b9e:	bcf0      	pop	{r4, r5, r6, r7}
   24ba0:	4710      	bx	r2
   24ba2:	bf00      	nop
   24ba4:	5002b400 	.word	0x5002b400
   24ba8:	5002b404 	.word	0x5002b404
   24bac:	5002b408 	.word	0x5002b408
   24bb0:	200005cc 	.word	0x200005cc
   24bb4:	5002b40c 	.word	0x5002b40c
   24bb8:	5002a000 	.word	0x5002a000

00024bbc <nrf_cc3xx_platform_set_abort>:
   24bbc:	e9d0 1200 	ldrd	r1, r2, [r0]
   24bc0:	4b01      	ldr	r3, [pc, #4]	; (24bc8 <nrf_cc3xx_platform_set_abort+0xc>)
   24bc2:	e9c3 1200 	strd	r1, r2, [r3]
   24bc6:	4770      	bx	lr
   24bc8:	200005cc 	.word	0x200005cc

00024bcc <nrf_cc3xx_platform_ctr_drbg_init>:
   24bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24bd0:	4c15      	ldr	r4, [pc, #84]	; (24c28 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   24bd2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 24c30 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   24bd6:	2800      	cmp	r0, #0
   24bd8:	bf18      	it	ne
   24bda:	4604      	movne	r4, r0
   24bdc:	b083      	sub	sp, #12
   24bde:	6820      	ldr	r0, [r4, #0]
   24be0:	4540      	cmp	r0, r8
   24be2:	d01d      	beq.n	24c20 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   24be4:	460d      	mov	r5, r1
   24be6:	4620      	mov	r0, r4
   24be8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   24bec:	f104 0904 	add.w	r9, r4, #4
   24bf0:	4616      	mov	r6, r2
   24bf2:	f504 778c 	add.w	r7, r4, #280	; 0x118
   24bf6:	f000 fe9f 	bl	25938 <mbedtls_platform_zeroize>
   24bfa:	4648      	mov	r0, r9
   24bfc:	f000 f940 	bl	24e80 <cc_mbedtls_entropy_init>
   24c00:	4638      	mov	r0, r7
   24c02:	f001 fa75 	bl	260f0 <cc_mbedtls_ctr_drbg_init>
   24c06:	4909      	ldr	r1, [pc, #36]	; (24c2c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   24c08:	9600      	str	r6, [sp, #0]
   24c0a:	464a      	mov	r2, r9
   24c0c:	4638      	mov	r0, r7
   24c0e:	462b      	mov	r3, r5
   24c10:	f001 fa80 	bl	26114 <cc_mbedtls_ctr_drbg_seed>
   24c14:	b908      	cbnz	r0, 24c1a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   24c16:	f8c4 8000 	str.w	r8, [r4]
   24c1a:	b003      	add	sp, #12
   24c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24c20:	2000      	movs	r0, #0
   24c22:	b003      	add	sp, #12
   24c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24c28:	20004a3c 	.word	0x20004a3c
   24c2c:	00024efd 	.word	0x00024efd
   24c30:	5ac9bca5 	.word	0x5ac9bca5

00024c34 <nrf_cc3xx_platform_ctr_drbg_get>:
   24c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c36:	4c0d      	ldr	r4, [pc, #52]	; (24c6c <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   24c38:	4e0d      	ldr	r6, [pc, #52]	; (24c70 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   24c3a:	2800      	cmp	r0, #0
   24c3c:	bf08      	it	eq
   24c3e:	4620      	moveq	r0, r4
   24c40:	b083      	sub	sp, #12
   24c42:	6807      	ldr	r7, [r0, #0]
   24c44:	42b7      	cmp	r7, r6
   24c46:	d10e      	bne.n	24c66 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   24c48:	2600      	movs	r6, #0
   24c4a:	461d      	mov	r5, r3
   24c4c:	f500 708c 	add.w	r0, r0, #280	; 0x118
   24c50:	9600      	str	r6, [sp, #0]
   24c52:	4633      	mov	r3, r6
   24c54:	4614      	mov	r4, r2
   24c56:	f001 faad 	bl	261b4 <cc_mbedtls_ctr_drbg_random_with_add>
   24c5a:	2800      	cmp	r0, #0
   24c5c:	bf18      	it	ne
   24c5e:	4634      	movne	r4, r6
   24c60:	602c      	str	r4, [r5, #0]
   24c62:	b003      	add	sp, #12
   24c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24c66:	4803      	ldr	r0, [pc, #12]	; (24c74 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   24c68:	e7fb      	b.n	24c62 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   24c6a:	bf00      	nop
   24c6c:	20004a3c 	.word	0x20004a3c
   24c70:	5ac9bca5 	.word	0x5ac9bca5
   24c74:	ffff8fe8 	.word	0xffff8fe8

00024c78 <mutex_free>:
   24c78:	b510      	push	{r4, lr}
   24c7a:	4604      	mov	r4, r0
   24c7c:	b130      	cbz	r0, 24c8c <mutex_free+0x14>
   24c7e:	6863      	ldr	r3, [r4, #4]
   24c80:	06db      	lsls	r3, r3, #27
   24c82:	d502      	bpl.n	24c8a <mutex_free+0x12>
   24c84:	2300      	movs	r3, #0
   24c86:	6023      	str	r3, [r4, #0]
   24c88:	6063      	str	r3, [r4, #4]
   24c8a:	bd10      	pop	{r4, pc}
   24c8c:	4b02      	ldr	r3, [pc, #8]	; (24c98 <mutex_free+0x20>)
   24c8e:	4803      	ldr	r0, [pc, #12]	; (24c9c <mutex_free+0x24>)
   24c90:	685b      	ldr	r3, [r3, #4]
   24c92:	4798      	blx	r3
   24c94:	e7f3      	b.n	24c7e <mutex_free+0x6>
   24c96:	bf00      	nop
   24c98:	200005cc 	.word	0x200005cc
   24c9c:	0002d770 	.word	0x0002d770

00024ca0 <mutex_unlock>:
   24ca0:	b168      	cbz	r0, 24cbe <mutex_unlock+0x1e>
   24ca2:	6843      	ldr	r3, [r0, #4]
   24ca4:	b13b      	cbz	r3, 24cb6 <mutex_unlock+0x16>
   24ca6:	06db      	lsls	r3, r3, #27
   24ca8:	d507      	bpl.n	24cba <mutex_unlock+0x1a>
   24caa:	f3bf 8f5f 	dmb	sy
   24cae:	2300      	movs	r3, #0
   24cb0:	6003      	str	r3, [r0, #0]
   24cb2:	4618      	mov	r0, r3
   24cb4:	4770      	bx	lr
   24cb6:	4803      	ldr	r0, [pc, #12]	; (24cc4 <mutex_unlock+0x24>)
   24cb8:	4770      	bx	lr
   24cba:	4803      	ldr	r0, [pc, #12]	; (24cc8 <mutex_unlock+0x28>)
   24cbc:	4770      	bx	lr
   24cbe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   24cc2:	4770      	bx	lr
   24cc4:	ffff8fea 	.word	0xffff8fea
   24cc8:	ffff8fe9 	.word	0xffff8fe9

00024ccc <mutex_init>:
   24ccc:	b510      	push	{r4, lr}
   24cce:	4604      	mov	r4, r0
   24cd0:	b120      	cbz	r0, 24cdc <mutex_init+0x10>
   24cd2:	2200      	movs	r2, #0
   24cd4:	2311      	movs	r3, #17
   24cd6:	6022      	str	r2, [r4, #0]
   24cd8:	6063      	str	r3, [r4, #4]
   24cda:	bd10      	pop	{r4, pc}
   24cdc:	4801      	ldr	r0, [pc, #4]	; (24ce4 <mutex_init+0x18>)
   24cde:	f7ff ff4d 	bl	24b7c <CC_PalAbort>
   24ce2:	e7f6      	b.n	24cd2 <mutex_init+0x6>
   24ce4:	0002d798 	.word	0x0002d798

00024ce8 <mutex_lock>:
   24ce8:	b1c0      	cbz	r0, 24d1c <mutex_lock+0x34>
   24cea:	6843      	ldr	r3, [r0, #4]
   24cec:	b1a3      	cbz	r3, 24d18 <mutex_lock+0x30>
   24cee:	06db      	lsls	r3, r3, #27
   24cf0:	d510      	bpl.n	24d14 <mutex_lock+0x2c>
   24cf2:	2201      	movs	r2, #1
   24cf4:	f3bf 8f5b 	dmb	ish
   24cf8:	e850 3f00 	ldrex	r3, [r0]
   24cfc:	e840 2100 	strex	r1, r2, [r0]
   24d00:	2900      	cmp	r1, #0
   24d02:	d1f9      	bne.n	24cf8 <mutex_lock+0x10>
   24d04:	f3bf 8f5b 	dmb	ish
   24d08:	2b01      	cmp	r3, #1
   24d0a:	d0f3      	beq.n	24cf4 <mutex_lock+0xc>
   24d0c:	f3bf 8f5f 	dmb	sy
   24d10:	2000      	movs	r0, #0
   24d12:	4770      	bx	lr
   24d14:	4803      	ldr	r0, [pc, #12]	; (24d24 <mutex_lock+0x3c>)
   24d16:	4770      	bx	lr
   24d18:	4803      	ldr	r0, [pc, #12]	; (24d28 <mutex_lock+0x40>)
   24d1a:	4770      	bx	lr
   24d1c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   24d20:	4770      	bx	lr
   24d22:	bf00      	nop
   24d24:	ffff8fe9 	.word	0xffff8fe9
   24d28:	ffff8fea 	.word	0xffff8fea

00024d2c <nrf_cc3xx_platform_set_mutexes>:
   24d2c:	b570      	push	{r4, r5, r6, lr}
   24d2e:	e9d0 2300 	ldrd	r2, r3, [r0]
   24d32:	4c13      	ldr	r4, [pc, #76]	; (24d80 <nrf_cc3xx_platform_set_mutexes+0x54>)
   24d34:	4d13      	ldr	r5, [pc, #76]	; (24d84 <nrf_cc3xx_platform_set_mutexes+0x58>)
   24d36:	e9c4 2300 	strd	r2, r3, [r4]
   24d3a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   24d3e:	e9c4 6302 	strd	r6, r3, [r4, #8]
   24d42:	4b11      	ldr	r3, [pc, #68]	; (24d88 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   24d44:	6808      	ldr	r0, [r1, #0]
   24d46:	6018      	str	r0, [r3, #0]
   24d48:	6848      	ldr	r0, [r1, #4]
   24d4a:	6058      	str	r0, [r3, #4]
   24d4c:	6888      	ldr	r0, [r1, #8]
   24d4e:	6098      	str	r0, [r3, #8]
   24d50:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   24d54:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   24d58:	60de      	str	r6, [r3, #12]
   24d5a:	6118      	str	r0, [r3, #16]
   24d5c:	06cb      	lsls	r3, r1, #27
   24d5e:	d50d      	bpl.n	24d7c <nrf_cc3xx_platform_set_mutexes+0x50>
   24d60:	2300      	movs	r3, #0
   24d62:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   24d66:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   24d6a:	f505 7088 	add.w	r0, r5, #272	; 0x110
   24d6e:	4790      	blx	r2
   24d70:	6823      	ldr	r3, [r4, #0]
   24d72:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   24d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24d7a:	4718      	bx	r3
   24d7c:	bd70      	pop	{r4, r5, r6, pc}
   24d7e:	bf00      	nop
   24d80:	200005dc 	.word	0x200005dc
   24d84:	20004a3c 	.word	0x20004a3c
   24d88:	200005ec 	.word	0x200005ec

00024d8c <entropy_update>:
   24d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24d90:	2b20      	cmp	r3, #32
   24d92:	b08b      	sub	sp, #44	; 0x2c
   24d94:	461d      	mov	r5, r3
   24d96:	4606      	mov	r6, r0
   24d98:	4689      	mov	r9, r1
   24d9a:	4690      	mov	r8, r2
   24d9c:	d826      	bhi.n	24dec <entropy_update+0x60>
   24d9e:	b2db      	uxtb	r3, r3
   24da0:	af02      	add	r7, sp, #8
   24da2:	6831      	ldr	r1, [r6, #0]
   24da4:	f88d 9004 	strb.w	r9, [sp, #4]
   24da8:	f88d 3005 	strb.w	r3, [sp, #5]
   24dac:	f106 0904 	add.w	r9, r6, #4
   24db0:	b921      	cbnz	r1, 24dbc <entropy_update+0x30>
   24db2:	4648      	mov	r0, r9
   24db4:	f000 fe62 	bl	25a7c <cc_mbedtls_sha256_starts_ret>
   24db8:	4604      	mov	r4, r0
   24dba:	b940      	cbnz	r0, 24dce <entropy_update+0x42>
   24dbc:	2301      	movs	r3, #1
   24dbe:	6033      	str	r3, [r6, #0]
   24dc0:	2202      	movs	r2, #2
   24dc2:	a901      	add	r1, sp, #4
   24dc4:	4648      	mov	r0, r9
   24dc6:	f000 fe6d 	bl	25aa4 <cc_mbedtls_sha256_update_ret>
   24dca:	4604      	mov	r4, r0
   24dcc:	b138      	cbz	r0, 24dde <entropy_update+0x52>
   24dce:	4638      	mov	r0, r7
   24dd0:	2120      	movs	r1, #32
   24dd2:	f000 fdb1 	bl	25938 <mbedtls_platform_zeroize>
   24dd6:	4620      	mov	r0, r4
   24dd8:	b00b      	add	sp, #44	; 0x2c
   24dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24dde:	462a      	mov	r2, r5
   24de0:	4641      	mov	r1, r8
   24de2:	4648      	mov	r0, r9
   24de4:	f000 fe5e 	bl	25aa4 <cc_mbedtls_sha256_update_ret>
   24de8:	4604      	mov	r4, r0
   24dea:	e7f0      	b.n	24dce <entropy_update+0x42>
   24dec:	af02      	add	r7, sp, #8
   24dee:	4619      	mov	r1, r3
   24df0:	4610      	mov	r0, r2
   24df2:	2300      	movs	r3, #0
   24df4:	463a      	mov	r2, r7
   24df6:	f001 fad1 	bl	2639c <cc_mbedtls_sha256_ret>
   24dfa:	4604      	mov	r4, r0
   24dfc:	2800      	cmp	r0, #0
   24dfe:	d1e6      	bne.n	24dce <entropy_update+0x42>
   24e00:	2320      	movs	r3, #32
   24e02:	461d      	mov	r5, r3
   24e04:	46b8      	mov	r8, r7
   24e06:	e7cc      	b.n	24da2 <entropy_update+0x16>

00024e08 <entropy_gather_internal.part.0>:
   24e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   24e0a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   24e0e:	b0a7      	sub	sp, #156	; 0x9c
   24e10:	2b00      	cmp	r3, #0
   24e12:	bfd8      	it	le
   24e14:	ae02      	addle	r6, sp, #8
   24e16:	dd2c      	ble.n	24e72 <entropy_gather_internal.part.0+0x6a>
   24e18:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   24e1c:	4605      	mov	r5, r0
   24e1e:	2300      	movs	r3, #0
   24e20:	ae02      	add	r6, sp, #8
   24e22:	9301      	str	r3, [sp, #4]
   24e24:	f1a4 0701 	sub.w	r7, r4, #1
   24e28:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   24e2c:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   24e30:	4631      	mov	r1, r6
   24e32:	ab01      	add	r3, sp, #4
   24e34:	2290      	movs	r2, #144	; 0x90
   24e36:	47a0      	blx	r4
   24e38:	fab7 f787 	clz	r7, r7
   24e3c:	097f      	lsrs	r7, r7, #5
   24e3e:	4604      	mov	r4, r0
   24e40:	b910      	cbnz	r0, 24e48 <entropy_gather_internal.part.0+0x40>
   24e42:	9b01      	ldr	r3, [sp, #4]
   24e44:	b93b      	cbnz	r3, 24e56 <entropy_gather_internal.part.0+0x4e>
   24e46:	b1a7      	cbz	r7, 24e72 <entropy_gather_internal.part.0+0x6a>
   24e48:	4630      	mov	r0, r6
   24e4a:	2190      	movs	r1, #144	; 0x90
   24e4c:	f000 fd74 	bl	25938 <mbedtls_platform_zeroize>
   24e50:	4620      	mov	r0, r4
   24e52:	b027      	add	sp, #156	; 0x9c
   24e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24e56:	4601      	mov	r1, r0
   24e58:	4632      	mov	r2, r6
   24e5a:	4628      	mov	r0, r5
   24e5c:	f7ff ff96 	bl	24d8c <entropy_update>
   24e60:	b950      	cbnz	r0, 24e78 <entropy_gather_internal.part.0+0x70>
   24e62:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   24e66:	9a01      	ldr	r2, [sp, #4]
   24e68:	4413      	add	r3, r2
   24e6a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   24e6e:	2f00      	cmp	r7, #0
   24e70:	d1ea      	bne.n	24e48 <entropy_gather_internal.part.0+0x40>
   24e72:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   24e76:	e7e7      	b.n	24e48 <entropy_gather_internal.part.0+0x40>
   24e78:	4604      	mov	r4, r0
   24e7a:	4620      	mov	r0, r4
   24e7c:	b027      	add	sp, #156	; 0x9c
   24e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024e80 <cc_mbedtls_entropy_init>:
   24e80:	b570      	push	{r4, r5, r6, lr}
   24e82:	2500      	movs	r5, #0
   24e84:	4604      	mov	r4, r0
   24e86:	4629      	mov	r1, r5
   24e88:	2214      	movs	r2, #20
   24e8a:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   24e8e:	30f8      	adds	r0, #248	; 0xf8
   24e90:	f004 fdee 	bl	29a70 <memset>
   24e94:	4b15      	ldr	r3, [pc, #84]	; (24eec <cc_mbedtls_entropy_init+0x6c>)
   24e96:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   24e9a:	681b      	ldr	r3, [r3, #0]
   24e9c:	4630      	mov	r0, r6
   24e9e:	4798      	blx	r3
   24ea0:	4620      	mov	r0, r4
   24ea2:	f840 5b04 	str.w	r5, [r0], #4
   24ea6:	f000 fdcf 	bl	25a48 <cc_mbedtls_sha256_init>
   24eaa:	4b11      	ldr	r3, [pc, #68]	; (24ef0 <cc_mbedtls_entropy_init+0x70>)
   24eac:	4630      	mov	r0, r6
   24eae:	681b      	ldr	r3, [r3, #0]
   24eb0:	4798      	blx	r3
   24eb2:	b9c8      	cbnz	r0, 24ee8 <cc_mbedtls_entropy_init+0x68>
   24eb4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   24eb8:	42ab      	cmp	r3, r5
   24eba:	dc0f      	bgt.n	24edc <cc_mbedtls_entropy_init+0x5c>
   24ebc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24ec0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   24ec4:	490b      	ldr	r1, [pc, #44]	; (24ef4 <cc_mbedtls_entropy_init+0x74>)
   24ec6:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   24eca:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   24ece:	3301      	adds	r3, #1
   24ed0:	2020      	movs	r0, #32
   24ed2:	2101      	movs	r1, #1
   24ed4:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   24ed8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   24edc:	4b06      	ldr	r3, [pc, #24]	; (24ef8 <cc_mbedtls_entropy_init+0x78>)
   24ede:	4630      	mov	r0, r6
   24ee0:	681b      	ldr	r3, [r3, #0]
   24ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24ee6:	4718      	bx	r3
   24ee8:	bd70      	pop	{r4, r5, r6, pc}
   24eea:	bf00      	nop
   24eec:	20000630 	.word	0x20000630
   24ef0:	20000634 	.word	0x20000634
   24ef4:	0002594d 	.word	0x0002594d
   24ef8:	20000638 	.word	0x20000638

00024efc <cc_mbedtls_entropy_func>:
   24efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f00:	2a20      	cmp	r2, #32
   24f02:	b088      	sub	sp, #32
   24f04:	d876      	bhi.n	24ff4 <cc_mbedtls_entropy_func+0xf8>
   24f06:	4b3d      	ldr	r3, [pc, #244]	; (24ffc <cc_mbedtls_entropy_func+0x100>)
   24f08:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   24f0c:	681b      	ldr	r3, [r3, #0]
   24f0e:	4604      	mov	r4, r0
   24f10:	4648      	mov	r0, r9
   24f12:	4617      	mov	r7, r2
   24f14:	4688      	mov	r8, r1
   24f16:	4798      	blx	r3
   24f18:	4605      	mov	r5, r0
   24f1a:	bba0      	cbnz	r0, 24f86 <cc_mbedtls_entropy_func+0x8a>
   24f1c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   24f20:	f240 1601 	movw	r6, #257	; 0x101
   24f24:	e001      	b.n	24f2a <cc_mbedtls_entropy_func+0x2e>
   24f26:	3e01      	subs	r6, #1
   24f28:	d060      	beq.n	24fec <cc_mbedtls_entropy_func+0xf0>
   24f2a:	4620      	mov	r0, r4
   24f2c:	b37b      	cbz	r3, 24f8e <cc_mbedtls_entropy_func+0x92>
   24f2e:	f7ff ff6b 	bl	24e08 <entropy_gather_internal.part.0>
   24f32:	4605      	mov	r5, r0
   24f34:	bb68      	cbnz	r0, 24f92 <cc_mbedtls_entropy_func+0x96>
   24f36:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   24f3a:	2b00      	cmp	r3, #0
   24f3c:	ddf3      	ble.n	24f26 <cc_mbedtls_entropy_func+0x2a>
   24f3e:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   24f42:	4290      	cmp	r0, r2
   24f44:	d3ef      	bcc.n	24f26 <cc_mbedtls_entropy_func+0x2a>
   24f46:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   24f4a:	2a01      	cmp	r2, #1
   24f4c:	d1eb      	bne.n	24f26 <cc_mbedtls_entropy_func+0x2a>
   24f4e:	281f      	cmp	r0, #31
   24f50:	d9e9      	bls.n	24f26 <cc_mbedtls_entropy_func+0x2a>
   24f52:	466e      	mov	r6, sp
   24f54:	4629      	mov	r1, r5
   24f56:	2220      	movs	r2, #32
   24f58:	4630      	mov	r0, r6
   24f5a:	f104 0a04 	add.w	sl, r4, #4
   24f5e:	f004 fd87 	bl	29a70 <memset>
   24f62:	4631      	mov	r1, r6
   24f64:	4650      	mov	r0, sl
   24f66:	f000 fda5 	bl	25ab4 <cc_mbedtls_sha256_finish_ret>
   24f6a:	4605      	mov	r5, r0
   24f6c:	b198      	cbz	r0, 24f96 <cc_mbedtls_entropy_func+0x9a>
   24f6e:	4630      	mov	r0, r6
   24f70:	2120      	movs	r1, #32
   24f72:	f000 fce1 	bl	25938 <mbedtls_platform_zeroize>
   24f76:	4b22      	ldr	r3, [pc, #136]	; (25000 <cc_mbedtls_entropy_func+0x104>)
   24f78:	4648      	mov	r0, r9
   24f7a:	681b      	ldr	r3, [r3, #0]
   24f7c:	4798      	blx	r3
   24f7e:	2800      	cmp	r0, #0
   24f80:	bf18      	it	ne
   24f82:	f06f 051d 	mvnne.w	r5, #29
   24f86:	4628      	mov	r0, r5
   24f88:	b008      	add	sp, #32
   24f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24f8e:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   24f92:	466e      	mov	r6, sp
   24f94:	e7eb      	b.n	24f6e <cc_mbedtls_entropy_func+0x72>
   24f96:	4650      	mov	r0, sl
   24f98:	f000 fd6a 	bl	25a70 <cc_mbedtls_sha256_free>
   24f9c:	4650      	mov	r0, sl
   24f9e:	f000 fd53 	bl	25a48 <cc_mbedtls_sha256_init>
   24fa2:	4629      	mov	r1, r5
   24fa4:	4650      	mov	r0, sl
   24fa6:	f000 fd69 	bl	25a7c <cc_mbedtls_sha256_starts_ret>
   24faa:	4605      	mov	r5, r0
   24fac:	2800      	cmp	r0, #0
   24fae:	d1de      	bne.n	24f6e <cc_mbedtls_entropy_func+0x72>
   24fb0:	4650      	mov	r0, sl
   24fb2:	2220      	movs	r2, #32
   24fb4:	4631      	mov	r1, r6
   24fb6:	f000 fd75 	bl	25aa4 <cc_mbedtls_sha256_update_ret>
   24fba:	4605      	mov	r5, r0
   24fbc:	2800      	cmp	r0, #0
   24fbe:	d1d6      	bne.n	24f6e <cc_mbedtls_entropy_func+0x72>
   24fc0:	4603      	mov	r3, r0
   24fc2:	4632      	mov	r2, r6
   24fc4:	2120      	movs	r1, #32
   24fc6:	4630      	mov	r0, r6
   24fc8:	f001 f9e8 	bl	2639c <cc_mbedtls_sha256_ret>
   24fcc:	4605      	mov	r5, r0
   24fce:	2800      	cmp	r0, #0
   24fd0:	d1cd      	bne.n	24f6e <cc_mbedtls_entropy_func+0x72>
   24fd2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   24fd6:	2b00      	cmp	r3, #0
   24fd8:	bfc4      	itt	gt
   24fda:	2300      	movgt	r3, #0
   24fdc:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   24fe0:	463a      	mov	r2, r7
   24fe2:	4640      	mov	r0, r8
   24fe4:	4631      	mov	r1, r6
   24fe6:	f004 fd38 	bl	29a5a <memcpy>
   24fea:	e7c0      	b.n	24f6e <cc_mbedtls_entropy_func+0x72>
   24fec:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24ff0:	466e      	mov	r6, sp
   24ff2:	e7bc      	b.n	24f6e <cc_mbedtls_entropy_func+0x72>
   24ff4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24ff8:	e7c5      	b.n	24f86 <cc_mbedtls_entropy_func+0x8a>
   24ffa:	bf00      	nop
   24ffc:	20000634 	.word	0x20000634
   25000:	20000638 	.word	0x20000638

00025004 <RndStartupTest.constprop.0>:
   25004:	b530      	push	{r4, r5, lr}
   25006:	b08d      	sub	sp, #52	; 0x34
   25008:	2100      	movs	r1, #0
   2500a:	2228      	movs	r2, #40	; 0x28
   2500c:	a802      	add	r0, sp, #8
   2500e:	9101      	str	r1, [sp, #4]
   25010:	f004 fd2e 	bl	29a70 <memset>
   25014:	a802      	add	r0, sp, #8
   25016:	f001 f9e9 	bl	263ec <RNG_PLAT_SetUserRngParameters>
   2501a:	4604      	mov	r4, r0
   2501c:	b110      	cbz	r0, 25024 <RndStartupTest.constprop.0+0x20>
   2501e:	4620      	mov	r0, r4
   25020:	b00d      	add	sp, #52	; 0x34
   25022:	bd30      	pop	{r4, r5, pc}
   25024:	4d18      	ldr	r5, [pc, #96]	; (25088 <RndStartupTest.constprop.0+0x84>)
   25026:	f04f 31ff 	mov.w	r1, #4294967295
   2502a:	6828      	ldr	r0, [r5, #0]
   2502c:	f000 f93c 	bl	252a8 <CC_PalMutexLock>
   25030:	4604      	mov	r4, r0
   25032:	b9c0      	cbnz	r0, 25066 <RndStartupTest.constprop.0+0x62>
   25034:	2000      	movs	r0, #0
   25036:	f000 f967 	bl	25308 <CC_PalPowerSaveModeSelect>
   2503a:	bb00      	cbnz	r0, 2507e <RndStartupTest.constprop.0+0x7a>
   2503c:	4a13      	ldr	r2, [pc, #76]	; (2508c <RndStartupTest.constprop.0+0x88>)
   2503e:	a902      	add	r1, sp, #8
   25040:	a801      	add	r0, sp, #4
   25042:	f000 fc6b 	bl	2591c <LLF_RND_RunTrngStartupTest>
   25046:	4604      	mov	r4, r0
   25048:	2001      	movs	r0, #1
   2504a:	f000 f95d 	bl	25308 <CC_PalPowerSaveModeSelect>
   2504e:	b990      	cbnz	r0, 25076 <RndStartupTest.constprop.0+0x72>
   25050:	6828      	ldr	r0, [r5, #0]
   25052:	f000 f931 	bl	252b8 <CC_PalMutexUnlock>
   25056:	2800      	cmp	r0, #0
   25058:	d0e1      	beq.n	2501e <RndStartupTest.constprop.0+0x1a>
   2505a:	480d      	ldr	r0, [pc, #52]	; (25090 <RndStartupTest.constprop.0+0x8c>)
   2505c:	f7ff fd8e 	bl	24b7c <CC_PalAbort>
   25060:	4620      	mov	r0, r4
   25062:	b00d      	add	sp, #52	; 0x34
   25064:	bd30      	pop	{r4, r5, pc}
   25066:	480b      	ldr	r0, [pc, #44]	; (25094 <RndStartupTest.constprop.0+0x90>)
   25068:	f7ff fd88 	bl	24b7c <CC_PalAbort>
   2506c:	2c01      	cmp	r4, #1
   2506e:	bf08      	it	eq
   25070:	2405      	moveq	r4, #5
   25072:	d0ed      	beq.n	25050 <RndStartupTest.constprop.0+0x4c>
   25074:	e7de      	b.n	25034 <RndStartupTest.constprop.0+0x30>
   25076:	4808      	ldr	r0, [pc, #32]	; (25098 <RndStartupTest.constprop.0+0x94>)
   25078:	f7ff fd80 	bl	24b7c <CC_PalAbort>
   2507c:	e7e8      	b.n	25050 <RndStartupTest.constprop.0+0x4c>
   2507e:	4807      	ldr	r0, [pc, #28]	; (2509c <RndStartupTest.constprop.0+0x98>)
   25080:	f7ff fd7c 	bl	24b7c <CC_PalAbort>
   25084:	e7da      	b.n	2503c <RndStartupTest.constprop.0+0x38>
   25086:	bf00      	nop
   25088:	2000062c 	.word	0x2000062c
   2508c:	200034bc 	.word	0x200034bc
   25090:	0002d814 	.word	0x0002d814
   25094:	0002d7bc 	.word	0x0002d7bc
   25098:	0002d7f4 	.word	0x0002d7f4
   2509c:	0002d7d4 	.word	0x0002d7d4

000250a0 <CC_LibInit>:
   250a0:	b510      	push	{r4, lr}
   250a2:	b082      	sub	sp, #8
   250a4:	f000 f854 	bl	25150 <CC_HalInit>
   250a8:	b128      	cbz	r0, 250b6 <CC_LibInit+0x16>
   250aa:	f000 f8a3 	bl	251f4 <CC_PalTerminate>
   250ae:	2403      	movs	r4, #3
   250b0:	4620      	mov	r0, r4
   250b2:	b002      	add	sp, #8
   250b4:	bd10      	pop	{r4, pc}
   250b6:	f000 f86f 	bl	25198 <CC_PalInit>
   250ba:	b9d0      	cbnz	r0, 250f2 <CC_LibInit+0x52>
   250bc:	f000 f924 	bl	25308 <CC_PalPowerSaveModeSelect>
   250c0:	b9d8      	cbnz	r0, 250fa <CC_LibInit+0x5a>
   250c2:	4b1e      	ldr	r3, [pc, #120]	; (2513c <CC_LibInit+0x9c>)
   250c4:	681b      	ldr	r3, [r3, #0]
   250c6:	0e1b      	lsrs	r3, r3, #24
   250c8:	2bf0      	cmp	r3, #240	; 0xf0
   250ca:	d10a      	bne.n	250e2 <CC_LibInit+0x42>
   250cc:	4a1c      	ldr	r2, [pc, #112]	; (25140 <CC_LibInit+0xa0>)
   250ce:	4b1d      	ldr	r3, [pc, #116]	; (25144 <CC_LibInit+0xa4>)
   250d0:	6812      	ldr	r2, [r2, #0]
   250d2:	429a      	cmp	r2, r3
   250d4:	d029      	beq.n	2512a <CC_LibInit+0x8a>
   250d6:	f000 f83d 	bl	25154 <CC_HalTerminate>
   250da:	2407      	movs	r4, #7
   250dc:	f000 f88a 	bl	251f4 <CC_PalTerminate>
   250e0:	e7e6      	b.n	250b0 <CC_LibInit+0x10>
   250e2:	f000 f837 	bl	25154 <CC_HalTerminate>
   250e6:	f000 f885 	bl	251f4 <CC_PalTerminate>
   250ea:	2406      	movs	r4, #6
   250ec:	4620      	mov	r0, r4
   250ee:	b002      	add	sp, #8
   250f0:	bd10      	pop	{r4, pc}
   250f2:	2404      	movs	r4, #4
   250f4:	4620      	mov	r0, r4
   250f6:	b002      	add	sp, #8
   250f8:	bd10      	pop	{r4, pc}
   250fa:	f000 f82b 	bl	25154 <CC_HalTerminate>
   250fe:	f000 f879 	bl	251f4 <CC_PalTerminate>
   25102:	f7ff ff7f 	bl	25004 <RndStartupTest.constprop.0>
   25106:	4604      	mov	r4, r0
   25108:	b958      	cbnz	r0, 25122 <CC_LibInit+0x82>
   2510a:	4602      	mov	r2, r0
   2510c:	4601      	mov	r1, r0
   2510e:	f7ff fd5d 	bl	24bcc <nrf_cc3xx_platform_ctr_drbg_init>
   25112:	b930      	cbnz	r0, 25122 <CC_LibInit+0x82>
   25114:	490c      	ldr	r1, [pc, #48]	; (25148 <CC_LibInit+0xa8>)
   25116:	ab01      	add	r3, sp, #4
   25118:	2268      	movs	r2, #104	; 0x68
   2511a:	f7ff fd8b 	bl	24c34 <nrf_cc3xx_platform_ctr_drbg_get>
   2511e:	2800      	cmp	r0, #0
   25120:	d0c6      	beq.n	250b0 <CC_LibInit+0x10>
   25122:	2405      	movs	r4, #5
   25124:	4620      	mov	r0, r4
   25126:	b002      	add	sp, #8
   25128:	bd10      	pop	{r4, pc}
   2512a:	2001      	movs	r0, #1
   2512c:	f000 f8ec 	bl	25308 <CC_PalPowerSaveModeSelect>
   25130:	2800      	cmp	r0, #0
   25132:	d1e2      	bne.n	250fa <CC_LibInit+0x5a>
   25134:	4b05      	ldr	r3, [pc, #20]	; (2514c <CC_LibInit+0xac>)
   25136:	6018      	str	r0, [r3, #0]
   25138:	e7e3      	b.n	25102 <CC_LibInit+0x62>
   2513a:	bf00      	nop
   2513c:	5002b928 	.word	0x5002b928
   25140:	5002ba24 	.word	0x5002ba24
   25144:	20e00000 	.word	0x20e00000
   25148:	20003454 	.word	0x20003454
   2514c:	5002ba0c 	.word	0x5002ba0c

00025150 <CC_HalInit>:
   25150:	2000      	movs	r0, #0
   25152:	4770      	bx	lr

00025154 <CC_HalTerminate>:
   25154:	2000      	movs	r0, #0
   25156:	4770      	bx	lr

00025158 <CC_HalClearInterruptBit>:
   25158:	0543      	lsls	r3, r0, #21
   2515a:	d503      	bpl.n	25164 <CC_HalClearInterruptBit+0xc>
   2515c:	4b03      	ldr	r3, [pc, #12]	; (2516c <CC_HalClearInterruptBit+0x14>)
   2515e:	f04f 32ff 	mov.w	r2, #4294967295
   25162:	601a      	str	r2, [r3, #0]
   25164:	4b02      	ldr	r3, [pc, #8]	; (25170 <CC_HalClearInterruptBit+0x18>)
   25166:	6018      	str	r0, [r3, #0]
   25168:	4770      	bx	lr
   2516a:	bf00      	nop
   2516c:	5002b108 	.word	0x5002b108
   25170:	5002ba08 	.word	0x5002ba08

00025174 <CC_HalMaskInterrupt>:
   25174:	4b01      	ldr	r3, [pc, #4]	; (2517c <CC_HalMaskInterrupt+0x8>)
   25176:	6018      	str	r0, [r3, #0]
   25178:	4770      	bx	lr
   2517a:	bf00      	nop
   2517c:	5002ba04 	.word	0x5002ba04

00025180 <CC_HalWaitInterrupt>:
   25180:	b108      	cbz	r0, 25186 <CC_HalWaitInterrupt+0x6>
   25182:	f000 b86f 	b.w	25264 <CC_PalWaitInterrupt>
   25186:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2518a:	4770      	bx	lr

0002518c <CC_HalWaitInterruptRND>:
   2518c:	b108      	cbz	r0, 25192 <CC_HalWaitInterruptRND+0x6>
   2518e:	f000 b84f 	b.w	25230 <CC_PalWaitInterruptRND>
   25192:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   25196:	4770      	bx	lr

00025198 <CC_PalInit>:
   25198:	b510      	push	{r4, lr}
   2519a:	4811      	ldr	r0, [pc, #68]	; (251e0 <CC_PalInit+0x48>)
   2519c:	f000 f870 	bl	25280 <CC_PalMutexCreate>
   251a0:	b100      	cbz	r0, 251a4 <CC_PalInit+0xc>
   251a2:	bd10      	pop	{r4, pc}
   251a4:	480f      	ldr	r0, [pc, #60]	; (251e4 <CC_PalInit+0x4c>)
   251a6:	f000 f86b 	bl	25280 <CC_PalMutexCreate>
   251aa:	2800      	cmp	r0, #0
   251ac:	d1f9      	bne.n	251a2 <CC_PalInit+0xa>
   251ae:	4c0e      	ldr	r4, [pc, #56]	; (251e8 <CC_PalInit+0x50>)
   251b0:	4620      	mov	r0, r4
   251b2:	f000 f865 	bl	25280 <CC_PalMutexCreate>
   251b6:	2800      	cmp	r0, #0
   251b8:	d1f3      	bne.n	251a2 <CC_PalInit+0xa>
   251ba:	4b0c      	ldr	r3, [pc, #48]	; (251ec <CC_PalInit+0x54>)
   251bc:	480c      	ldr	r0, [pc, #48]	; (251f0 <CC_PalInit+0x58>)
   251be:	601c      	str	r4, [r3, #0]
   251c0:	f000 f85e 	bl	25280 <CC_PalMutexCreate>
   251c4:	4601      	mov	r1, r0
   251c6:	2800      	cmp	r0, #0
   251c8:	d1eb      	bne.n	251a2 <CC_PalInit+0xa>
   251ca:	f000 f82d 	bl	25228 <CC_PalDmaInit>
   251ce:	4604      	mov	r4, r0
   251d0:	b108      	cbz	r0, 251d6 <CC_PalInit+0x3e>
   251d2:	4620      	mov	r0, r4
   251d4:	bd10      	pop	{r4, pc}
   251d6:	f000 f879 	bl	252cc <CC_PalPowerSaveModeInit>
   251da:	4620      	mov	r0, r4
   251dc:	e7fa      	b.n	251d4 <CC_PalInit+0x3c>
   251de:	bf00      	nop
   251e0:	20000628 	.word	0x20000628
   251e4:	2000061c 	.word	0x2000061c
   251e8:	20000624 	.word	0x20000624
   251ec:	2000062c 	.word	0x2000062c
   251f0:	20000620 	.word	0x20000620

000251f4 <CC_PalTerminate>:
   251f4:	b508      	push	{r3, lr}
   251f6:	4808      	ldr	r0, [pc, #32]	; (25218 <CC_PalTerminate+0x24>)
   251f8:	f000 f84c 	bl	25294 <CC_PalMutexDestroy>
   251fc:	4807      	ldr	r0, [pc, #28]	; (2521c <CC_PalTerminate+0x28>)
   251fe:	f000 f849 	bl	25294 <CC_PalMutexDestroy>
   25202:	4807      	ldr	r0, [pc, #28]	; (25220 <CC_PalTerminate+0x2c>)
   25204:	f000 f846 	bl	25294 <CC_PalMutexDestroy>
   25208:	4806      	ldr	r0, [pc, #24]	; (25224 <CC_PalTerminate+0x30>)
   2520a:	f000 f843 	bl	25294 <CC_PalMutexDestroy>
   2520e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25212:	f000 b80b 	b.w	2522c <CC_PalDmaTerminate>
   25216:	bf00      	nop
   25218:	20000628 	.word	0x20000628
   2521c:	2000061c 	.word	0x2000061c
   25220:	20000624 	.word	0x20000624
   25224:	20000620 	.word	0x20000620

00025228 <CC_PalDmaInit>:
   25228:	2000      	movs	r0, #0
   2522a:	4770      	bx	lr

0002522c <CC_PalDmaTerminate>:
   2522c:	4770      	bx	lr
   2522e:	bf00      	nop

00025230 <CC_PalWaitInterruptRND>:
   25230:	b410      	push	{r4}
   25232:	4c08      	ldr	r4, [pc, #32]	; (25254 <CC_PalWaitInterruptRND+0x24>)
   25234:	4602      	mov	r2, r0
   25236:	6823      	ldr	r3, [r4, #0]
   25238:	4213      	tst	r3, r2
   2523a:	d0fc      	beq.n	25236 <CC_PalWaitInterruptRND+0x6>
   2523c:	b121      	cbz	r1, 25248 <CC_PalWaitInterruptRND+0x18>
   2523e:	4b06      	ldr	r3, [pc, #24]	; (25258 <CC_PalWaitInterruptRND+0x28>)
   25240:	4806      	ldr	r0, [pc, #24]	; (2525c <CC_PalWaitInterruptRND+0x2c>)
   25242:	681b      	ldr	r3, [r3, #0]
   25244:	600b      	str	r3, [r1, #0]
   25246:	6003      	str	r3, [r0, #0]
   25248:	4b05      	ldr	r3, [pc, #20]	; (25260 <CC_PalWaitInterruptRND+0x30>)
   2524a:	601a      	str	r2, [r3, #0]
   2524c:	2000      	movs	r0, #0
   2524e:	bc10      	pop	{r4}
   25250:	4770      	bx	lr
   25252:	bf00      	nop
   25254:	5002ba00 	.word	0x5002ba00
   25258:	5002b104 	.word	0x5002b104
   2525c:	5002b108 	.word	0x5002b108
   25260:	5002ba08 	.word	0x5002ba08

00025264 <CC_PalWaitInterrupt>:
   25264:	4904      	ldr	r1, [pc, #16]	; (25278 <CC_PalWaitInterrupt+0x14>)
   25266:	4602      	mov	r2, r0
   25268:	680b      	ldr	r3, [r1, #0]
   2526a:	421a      	tst	r2, r3
   2526c:	d0fc      	beq.n	25268 <CC_PalWaitInterrupt+0x4>
   2526e:	4b03      	ldr	r3, [pc, #12]	; (2527c <CC_PalWaitInterrupt+0x18>)
   25270:	2000      	movs	r0, #0
   25272:	601a      	str	r2, [r3, #0]
   25274:	4770      	bx	lr
   25276:	bf00      	nop
   25278:	5002ba00 	.word	0x5002ba00
   2527c:	5002ba08 	.word	0x5002ba08

00025280 <CC_PalMutexCreate>:
   25280:	b508      	push	{r3, lr}
   25282:	4b03      	ldr	r3, [pc, #12]	; (25290 <CC_PalMutexCreate+0x10>)
   25284:	6802      	ldr	r2, [r0, #0]
   25286:	681b      	ldr	r3, [r3, #0]
   25288:	6810      	ldr	r0, [r2, #0]
   2528a:	4798      	blx	r3
   2528c:	2000      	movs	r0, #0
   2528e:	bd08      	pop	{r3, pc}
   25290:	200005dc 	.word	0x200005dc

00025294 <CC_PalMutexDestroy>:
   25294:	b508      	push	{r3, lr}
   25296:	4b03      	ldr	r3, [pc, #12]	; (252a4 <CC_PalMutexDestroy+0x10>)
   25298:	6802      	ldr	r2, [r0, #0]
   2529a:	685b      	ldr	r3, [r3, #4]
   2529c:	6810      	ldr	r0, [r2, #0]
   2529e:	4798      	blx	r3
   252a0:	2000      	movs	r0, #0
   252a2:	bd08      	pop	{r3, pc}
   252a4:	200005dc 	.word	0x200005dc

000252a8 <CC_PalMutexLock>:
   252a8:	4b02      	ldr	r3, [pc, #8]	; (252b4 <CC_PalMutexLock+0xc>)
   252aa:	6802      	ldr	r2, [r0, #0]
   252ac:	689b      	ldr	r3, [r3, #8]
   252ae:	6810      	ldr	r0, [r2, #0]
   252b0:	4718      	bx	r3
   252b2:	bf00      	nop
   252b4:	200005dc 	.word	0x200005dc

000252b8 <CC_PalMutexUnlock>:
   252b8:	b508      	push	{r3, lr}
   252ba:	4b03      	ldr	r3, [pc, #12]	; (252c8 <CC_PalMutexUnlock+0x10>)
   252bc:	6802      	ldr	r2, [r0, #0]
   252be:	68db      	ldr	r3, [r3, #12]
   252c0:	6810      	ldr	r0, [r2, #0]
   252c2:	4798      	blx	r3
   252c4:	2000      	movs	r0, #0
   252c6:	bd08      	pop	{r3, pc}
   252c8:	200005dc 	.word	0x200005dc

000252cc <CC_PalPowerSaveModeInit>:
   252cc:	b570      	push	{r4, r5, r6, lr}
   252ce:	4c09      	ldr	r4, [pc, #36]	; (252f4 <CC_PalPowerSaveModeInit+0x28>)
   252d0:	4d09      	ldr	r5, [pc, #36]	; (252f8 <CC_PalPowerSaveModeInit+0x2c>)
   252d2:	6920      	ldr	r0, [r4, #16]
   252d4:	68ab      	ldr	r3, [r5, #8]
   252d6:	4798      	blx	r3
   252d8:	b118      	cbz	r0, 252e2 <CC_PalPowerSaveModeInit+0x16>
   252da:	4b08      	ldr	r3, [pc, #32]	; (252fc <CC_PalPowerSaveModeInit+0x30>)
   252dc:	4808      	ldr	r0, [pc, #32]	; (25300 <CC_PalPowerSaveModeInit+0x34>)
   252de:	685b      	ldr	r3, [r3, #4]
   252e0:	4798      	blx	r3
   252e2:	4a08      	ldr	r2, [pc, #32]	; (25304 <CC_PalPowerSaveModeInit+0x38>)
   252e4:	68eb      	ldr	r3, [r5, #12]
   252e6:	6920      	ldr	r0, [r4, #16]
   252e8:	2100      	movs	r1, #0
   252ea:	6011      	str	r1, [r2, #0]
   252ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   252f0:	4718      	bx	r3
   252f2:	bf00      	nop
   252f4:	200005ec 	.word	0x200005ec
   252f8:	200005dc 	.word	0x200005dc
   252fc:	200005cc 	.word	0x200005cc
   25300:	0002d82c 	.word	0x0002d82c
   25304:	200036dc 	.word	0x200036dc

00025308 <CC_PalPowerSaveModeSelect>:
   25308:	b570      	push	{r4, r5, r6, lr}
   2530a:	4d1a      	ldr	r5, [pc, #104]	; (25374 <CC_PalPowerSaveModeSelect+0x6c>)
   2530c:	4e1a      	ldr	r6, [pc, #104]	; (25378 <CC_PalPowerSaveModeSelect+0x70>)
   2530e:	4604      	mov	r4, r0
   25310:	68b2      	ldr	r2, [r6, #8]
   25312:	6928      	ldr	r0, [r5, #16]
   25314:	4790      	blx	r2
   25316:	b9f0      	cbnz	r0, 25356 <CC_PalPowerSaveModeSelect+0x4e>
   25318:	b15c      	cbz	r4, 25332 <CC_PalPowerSaveModeSelect+0x2a>
   2531a:	4c18      	ldr	r4, [pc, #96]	; (2537c <CC_PalPowerSaveModeSelect+0x74>)
   2531c:	6823      	ldr	r3, [r4, #0]
   2531e:	b1ab      	cbz	r3, 2534c <CC_PalPowerSaveModeSelect+0x44>
   25320:	2b01      	cmp	r3, #1
   25322:	d01a      	beq.n	2535a <CC_PalPowerSaveModeSelect+0x52>
   25324:	3b01      	subs	r3, #1
   25326:	6023      	str	r3, [r4, #0]
   25328:	6928      	ldr	r0, [r5, #16]
   2532a:	68f3      	ldr	r3, [r6, #12]
   2532c:	4798      	blx	r3
   2532e:	2000      	movs	r0, #0
   25330:	bd70      	pop	{r4, r5, r6, pc}
   25332:	4c12      	ldr	r4, [pc, #72]	; (2537c <CC_PalPowerSaveModeSelect+0x74>)
   25334:	6821      	ldr	r1, [r4, #0]
   25336:	b939      	cbnz	r1, 25348 <CC_PalPowerSaveModeSelect+0x40>
   25338:	4b11      	ldr	r3, [pc, #68]	; (25380 <CC_PalPowerSaveModeSelect+0x78>)
   2533a:	4a12      	ldr	r2, [pc, #72]	; (25384 <CC_PalPowerSaveModeSelect+0x7c>)
   2533c:	2001      	movs	r0, #1
   2533e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   25342:	6813      	ldr	r3, [r2, #0]
   25344:	2b00      	cmp	r3, #0
   25346:	d1fc      	bne.n	25342 <CC_PalPowerSaveModeSelect+0x3a>
   25348:	3101      	adds	r1, #1
   2534a:	6021      	str	r1, [r4, #0]
   2534c:	68f3      	ldr	r3, [r6, #12]
   2534e:	6928      	ldr	r0, [r5, #16]
   25350:	4798      	blx	r3
   25352:	2000      	movs	r0, #0
   25354:	bd70      	pop	{r4, r5, r6, pc}
   25356:	480c      	ldr	r0, [pc, #48]	; (25388 <CC_PalPowerSaveModeSelect+0x80>)
   25358:	bd70      	pop	{r4, r5, r6, pc}
   2535a:	4a0a      	ldr	r2, [pc, #40]	; (25384 <CC_PalPowerSaveModeSelect+0x7c>)
   2535c:	6813      	ldr	r3, [r2, #0]
   2535e:	2b00      	cmp	r3, #0
   25360:	d1fc      	bne.n	2535c <CC_PalPowerSaveModeSelect+0x54>
   25362:	4a07      	ldr	r2, [pc, #28]	; (25380 <CC_PalPowerSaveModeSelect+0x78>)
   25364:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   25368:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   2536c:	f7ff ff02 	bl	25174 <CC_HalMaskInterrupt>
   25370:	6823      	ldr	r3, [r4, #0]
   25372:	e7d7      	b.n	25324 <CC_PalPowerSaveModeSelect+0x1c>
   25374:	200005ec 	.word	0x200005ec
   25378:	200005dc 	.word	0x200005dc
   2537c:	200036dc 	.word	0x200036dc
   25380:	5002a000 	.word	0x5002a000
   25384:	5002b910 	.word	0x5002b910
   25388:	ffff8fe9 	.word	0xffff8fe9

0002538c <mutex_init>:
   2538c:	4b01      	ldr	r3, [pc, #4]	; (25394 <mutex_init+0x8>)
   2538e:	681b      	ldr	r3, [r3, #0]
   25390:	4718      	bx	r3
   25392:	bf00      	nop
   25394:	200005dc 	.word	0x200005dc

00025398 <mutex_lock>:
   25398:	4b01      	ldr	r3, [pc, #4]	; (253a0 <mutex_lock+0x8>)
   2539a:	689b      	ldr	r3, [r3, #8]
   2539c:	4718      	bx	r3
   2539e:	bf00      	nop
   253a0:	200005dc 	.word	0x200005dc

000253a4 <mutex_unlock>:
   253a4:	4b01      	ldr	r3, [pc, #4]	; (253ac <mutex_unlock+0x8>)
   253a6:	68db      	ldr	r3, [r3, #12]
   253a8:	4718      	bx	r3
   253aa:	bf00      	nop
   253ac:	200005dc 	.word	0x200005dc

000253b0 <startTrngHW>:
   253b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   253b4:	2800      	cmp	r0, #0
   253b6:	d077      	beq.n	254a8 <startTrngHW+0xf8>
   253b8:	460c      	mov	r4, r1
   253ba:	2900      	cmp	r1, #0
   253bc:	d074      	beq.n	254a8 <startTrngHW+0xf8>
   253be:	461d      	mov	r5, r3
   253c0:	2b00      	cmp	r3, #0
   253c2:	d071      	beq.n	254a8 <startTrngHW+0xf8>
   253c4:	4606      	mov	r6, r0
   253c6:	b11a      	cbz	r2, 253d0 <startTrngHW+0x20>
   253c8:	2201      	movs	r2, #1
   253ca:	2300      	movs	r3, #0
   253cc:	602a      	str	r2, [r5, #0]
   253ce:	6003      	str	r3, [r0, #0]
   253d0:	682b      	ldr	r3, [r5, #0]
   253d2:	2b00      	cmp	r3, #0
   253d4:	d064      	beq.n	254a0 <startTrngHW+0xf0>
   253d6:	4629      	mov	r1, r5
   253d8:	4620      	mov	r0, r4
   253da:	f001 f8cd 	bl	26578 <LLF_RND_GetFastestRosc>
   253de:	4607      	mov	r7, r0
   253e0:	2800      	cmp	r0, #0
   253e2:	d15e      	bne.n	254a2 <startTrngHW+0xf2>
   253e4:	6828      	ldr	r0, [r5, #0]
   253e6:	4621      	mov	r1, r4
   253e8:	f001 f8a8 	bl	2653c <LLF_RND_GetRoscSampleCnt>
   253ec:	4607      	mov	r7, r0
   253ee:	2800      	cmp	r0, #0
   253f0:	d157      	bne.n	254a2 <startTrngHW+0xf2>
   253f2:	682b      	ldr	r3, [r5, #0]
   253f4:	2b08      	cmp	r3, #8
   253f6:	d066      	beq.n	254c6 <startTrngHW+0x116>
   253f8:	2b04      	cmp	r3, #4
   253fa:	d067      	beq.n	254cc <startTrngHW+0x11c>
   253fc:	f1a3 0802 	sub.w	r8, r3, #2
   25400:	fab8 f888 	clz	r8, r8
   25404:	ea4f 1858 	mov.w	r8, r8, lsr #5
   25408:	4b32      	ldr	r3, [pc, #200]	; (254d4 <startTrngHW+0x124>)
   2540a:	4933      	ldr	r1, [pc, #204]	; (254d8 <startTrngHW+0x128>)
   2540c:	4a33      	ldr	r2, [pc, #204]	; (254dc <startTrngHW+0x12c>)
   2540e:	2001      	movs	r0, #1
   25410:	6018      	str	r0, [r3, #0]
   25412:	469c      	mov	ip, r3
   25414:	6008      	str	r0, [r1, #0]
   25416:	f8cc 0000 	str.w	r0, [ip]
   2541a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2541c:	6013      	str	r3, [r2, #0]
   2541e:	6811      	ldr	r1, [r2, #0]
   25420:	428b      	cmp	r3, r1
   25422:	d1f8      	bne.n	25416 <startTrngHW+0x66>
   25424:	4b2e      	ldr	r3, [pc, #184]	; (254e0 <startTrngHW+0x130>)
   25426:	f04f 0900 	mov.w	r9, #0
   2542a:	f8c3 9000 	str.w	r9, [r3]
   2542e:	f04f 30ff 	mov.w	r0, #4294967295
   25432:	f7ff fe91 	bl	25158 <CC_HalClearInterruptBit>
   25436:	4b2b      	ldr	r3, [pc, #172]	; (254e4 <startTrngHW+0x134>)
   25438:	f06f 021b 	mvn.w	r2, #27
   2543c:	601a      	str	r2, [r3, #0]
   2543e:	4648      	mov	r0, r9
   25440:	f7ff fe98 	bl	25174 <CC_HalMaskInterrupt>
   25444:	4a28      	ldr	r2, [pc, #160]	; (254e8 <startTrngHW+0x138>)
   25446:	4b29      	ldr	r3, [pc, #164]	; (254ec <startTrngHW+0x13c>)
   25448:	f8c2 8000 	str.w	r8, [r2]
   2544c:	6818      	ldr	r0, [r3, #0]
   2544e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   25452:	f7ff fe8f 	bl	25174 <CC_HalMaskInterrupt>
   25456:	4b26      	ldr	r3, [pc, #152]	; (254f0 <startTrngHW+0x140>)
   25458:	220a      	movs	r2, #10
   2545a:	601a      	str	r2, [r3, #0]
   2545c:	9908      	ldr	r1, [sp, #32]
   2545e:	6923      	ldr	r3, [r4, #16]
   25460:	6a62      	ldr	r2, [r4, #36]	; 0x24
   25462:	2901      	cmp	r1, #1
   25464:	d024      	beq.n	254b0 <startTrngHW+0x100>
   25466:	4923      	ldr	r1, [pc, #140]	; (254f4 <startTrngHW+0x144>)
   25468:	fba1 1303 	umull	r1, r3, r1, r3
   2546c:	091b      	lsrs	r3, r3, #4
   2546e:	fb03 f302 	mul.w	r3, r3, r2
   25472:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25476:	4920      	ldr	r1, [pc, #128]	; (254f8 <startTrngHW+0x148>)
   25478:	4a19      	ldr	r2, [pc, #100]	; (254e0 <startTrngHW+0x130>)
   2547a:	03db      	lsls	r3, r3, #15
   2547c:	099b      	lsrs	r3, r3, #6
   2547e:	600b      	str	r3, [r1, #0]
   25480:	2301      	movs	r3, #1
   25482:	6013      	str	r3, [r2, #0]
   25484:	6833      	ldr	r3, [r6, #0]
   25486:	682a      	ldr	r2, [r5, #0]
   25488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2548c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   25490:	6033      	str	r3, [r6, #0]
   25492:	682a      	ldr	r2, [r5, #0]
   25494:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25498:	6033      	str	r3, [r6, #0]
   2549a:	4638      	mov	r0, r7
   2549c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   254a0:	4f16      	ldr	r7, [pc, #88]	; (254fc <startTrngHW+0x14c>)
   254a2:	4638      	mov	r0, r7
   254a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   254a8:	4f15      	ldr	r7, [pc, #84]	; (25500 <startTrngHW+0x150>)
   254aa:	4638      	mov	r0, r7
   254ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   254b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   254b4:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   254b8:	3101      	adds	r1, #1
   254ba:	d002      	beq.n	254c2 <startTrngHW+0x112>
   254bc:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   254c0:	e7d1      	b.n	25466 <startTrngHW+0xb6>
   254c2:	2316      	movs	r3, #22
   254c4:	e7d3      	b.n	2546e <startTrngHW+0xbe>
   254c6:	f04f 0803 	mov.w	r8, #3
   254ca:	e79d      	b.n	25408 <startTrngHW+0x58>
   254cc:	f04f 0802 	mov.w	r8, #2
   254d0:	e79a      	b.n	25408 <startTrngHW+0x58>
   254d2:	bf00      	nop
   254d4:	5002b1c4 	.word	0x5002b1c4
   254d8:	5002b140 	.word	0x5002b140
   254dc:	5002b130 	.word	0x5002b130
   254e0:	5002b12c 	.word	0x5002b12c
   254e4:	5002b100 	.word	0x5002b100
   254e8:	5002b10c 	.word	0x5002b10c
   254ec:	5002ba04 	.word	0x5002ba04
   254f0:	5002b138 	.word	0x5002b138
   254f4:	aaaaaaab 	.word	0xaaaaaaab
   254f8:	5002b1d8 	.word	0x5002b1d8
   254fc:	00f10c31 	.word	0x00f10c31
   25500:	00f10c35 	.word	0x00f10c35

00025504 <LLF_RND_RepetitionCounterTest.part.0>:
   25504:	b4f0      	push	{r4, r5, r6, r7}
   25506:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   2550a:	2400      	movs	r4, #0
   2550c:	f10c 3cff 	add.w	ip, ip, #4294967295
   25510:	4626      	mov	r6, r4
   25512:	4627      	mov	r7, r4
   25514:	e006      	b.n	25524 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   25516:	429f      	cmp	r7, r3
   25518:	d016      	beq.n	25548 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2551a:	2601      	movs	r6, #1
   2551c:	4565      	cmp	r5, ip
   2551e:	d819      	bhi.n	25554 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   25520:	462c      	mov	r4, r5
   25522:	461f      	mov	r7, r3
   25524:	0963      	lsrs	r3, r4, #5
   25526:	f004 011f 	and.w	r1, r4, #31
   2552a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2552e:	291f      	cmp	r1, #31
   25530:	fa23 f301 	lsr.w	r3, r3, r1
   25534:	f104 0501 	add.w	r5, r4, #1
   25538:	bf18      	it	ne
   2553a:	f003 0301 	andne.w	r3, r3, #1
   2553e:	2c00      	cmp	r4, #0
   25540:	d1e9      	bne.n	25516 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   25542:	2601      	movs	r6, #1
   25544:	4635      	mov	r5, r6
   25546:	e7eb      	b.n	25520 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   25548:	3601      	adds	r6, #1
   2554a:	4296      	cmp	r6, r2
   2554c:	d1e6      	bne.n	2551c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2554e:	4803      	ldr	r0, [pc, #12]	; (2555c <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   25550:	bcf0      	pop	{r4, r5, r6, r7}
   25552:	4770      	bx	lr
   25554:	2000      	movs	r0, #0
   25556:	bcf0      	pop	{r4, r5, r6, r7}
   25558:	4770      	bx	lr
   2555a:	bf00      	nop
   2555c:	00f10c36 	.word	0x00f10c36

00025560 <LLF_RND_AdaptiveProportionTest>:
   25560:	2800      	cmp	r0, #0
   25562:	d061      	beq.n	25628 <LLF_RND_AdaptiveProportionTest+0xc8>
   25564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25568:	1e4c      	subs	r4, r1, #1
   2556a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2556e:	d227      	bcs.n	255c0 <LLF_RND_AdaptiveProportionTest+0x60>
   25570:	b333      	cbz	r3, 255c0 <LLF_RND_AdaptiveProportionTest+0x60>
   25572:	b32a      	cbz	r2, 255c0 <LLF_RND_AdaptiveProportionTest+0x60>
   25574:	00cd      	lsls	r5, r1, #3
   25576:	2b01      	cmp	r3, #1
   25578:	f105 3eff 	add.w	lr, r5, #4294967295
   2557c:	d030      	beq.n	255e0 <LLF_RND_AdaptiveProportionTest+0x80>
   2557e:	2100      	movs	r1, #0
   25580:	468c      	mov	ip, r1
   25582:	460f      	mov	r7, r1
   25584:	460e      	mov	r6, r1
   25586:	f103 38ff 	add.w	r8, r3, #4294967295
   2558a:	094c      	lsrs	r4, r1, #5
   2558c:	f001 051f 	and.w	r5, r1, #31
   25590:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   25594:	2d1f      	cmp	r5, #31
   25596:	fa24 f405 	lsr.w	r4, r4, r5
   2559a:	bf18      	it	ne
   2559c:	f004 0401 	andne.w	r4, r4, #1
   255a0:	b921      	cbnz	r1, 255ac <LLF_RND_AdaptiveProportionTest+0x4c>
   255a2:	2601      	movs	r6, #1
   255a4:	46b4      	mov	ip, r6
   255a6:	4631      	mov	r1, r6
   255a8:	4627      	mov	r7, r4
   255aa:	e7ee      	b.n	2558a <LLF_RND_AdaptiveProportionTest+0x2a>
   255ac:	42b3      	cmp	r3, r6
   255ae:	d013      	beq.n	255d8 <LLF_RND_AdaptiveProportionTest+0x78>
   255b0:	42a7      	cmp	r7, r4
   255b2:	d101      	bne.n	255b8 <LLF_RND_AdaptiveProportionTest+0x58>
   255b4:	f10c 0c01 	add.w	ip, ip, #1
   255b8:	4546      	cmp	r6, r8
   255ba:	d104      	bne.n	255c6 <LLF_RND_AdaptiveProportionTest+0x66>
   255bc:	4562      	cmp	r2, ip
   255be:	d202      	bcs.n	255c6 <LLF_RND_AdaptiveProportionTest+0x66>
   255c0:	481a      	ldr	r0, [pc, #104]	; (2562c <LLF_RND_AdaptiveProportionTest+0xcc>)
   255c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   255c6:	463c      	mov	r4, r7
   255c8:	3101      	adds	r1, #1
   255ca:	458e      	cmp	lr, r1
   255cc:	f106 0601 	add.w	r6, r6, #1
   255d0:	d2ea      	bcs.n	255a8 <LLF_RND_AdaptiveProportionTest+0x48>
   255d2:	2000      	movs	r0, #0
   255d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   255d8:	2600      	movs	r6, #0
   255da:	f04f 0c01 	mov.w	ip, #1
   255de:	e7f3      	b.n	255c8 <LLF_RND_AdaptiveProportionTest+0x68>
   255e0:	2600      	movs	r6, #0
   255e2:	46b4      	mov	ip, r6
   255e4:	4637      	mov	r7, r6
   255e6:	4634      	mov	r4, r6
   255e8:	0961      	lsrs	r1, r4, #5
   255ea:	f004 031f 	and.w	r3, r4, #31
   255ee:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   255f2:	2b1f      	cmp	r3, #31
   255f4:	fa21 f103 	lsr.w	r1, r1, r3
   255f8:	bf18      	it	ne
   255fa:	f001 0101 	andne.w	r1, r1, #1
   255fe:	b13c      	cbz	r4, 25610 <LLF_RND_AdaptiveProportionTest+0xb0>
   25600:	b95f      	cbnz	r7, 2561a <LLF_RND_AdaptiveProportionTest+0xba>
   25602:	458c      	cmp	ip, r1
   25604:	d001      	beq.n	2560a <LLF_RND_AdaptiveProportionTest+0xaa>
   25606:	4661      	mov	r1, ip
   25608:	e008      	b.n	2561c <LLF_RND_AdaptiveProportionTest+0xbc>
   2560a:	3601      	adds	r6, #1
   2560c:	4661      	mov	r1, ip
   2560e:	e005      	b.n	2561c <LLF_RND_AdaptiveProportionTest+0xbc>
   25610:	2601      	movs	r6, #1
   25612:	4634      	mov	r4, r6
   25614:	468c      	mov	ip, r1
   25616:	2701      	movs	r7, #1
   25618:	e7e6      	b.n	255e8 <LLF_RND_AdaptiveProportionTest+0x88>
   2561a:	463e      	mov	r6, r7
   2561c:	42b2      	cmp	r2, r6
   2561e:	d3cf      	bcc.n	255c0 <LLF_RND_AdaptiveProportionTest+0x60>
   25620:	3401      	adds	r4, #1
   25622:	42ac      	cmp	r4, r5
   25624:	d1f6      	bne.n	25614 <LLF_RND_AdaptiveProportionTest+0xb4>
   25626:	e7d4      	b.n	255d2 <LLF_RND_AdaptiveProportionTest+0x72>
   25628:	4800      	ldr	r0, [pc, #0]	; (2562c <LLF_RND_AdaptiveProportionTest+0xcc>)
   2562a:	4770      	bx	lr
   2562c:	00f10c37 	.word	0x00f10c37

00025630 <getTrngSource>:
   25630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25634:	b08d      	sub	sp, #52	; 0x34
   25636:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2563a:	4607      	mov	r7, r0
   2563c:	460c      	mov	r4, r1
   2563e:	2d00      	cmp	r5, #0
   25640:	d14c      	bne.n	256dc <getTrngSource+0xac>
   25642:	f8d1 a010 	ldr.w	sl, [r1, #16]
   25646:	601e      	str	r6, [r3, #0]
   25648:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2564a:	2100      	movs	r1, #0
   2564c:	6019      	str	r1, [r3, #0]
   2564e:	2a00      	cmp	r2, #0
   25650:	f000 811f 	beq.w	25892 <getTrngSource+0x262>
   25654:	4a9b      	ldr	r2, [pc, #620]	; (258c4 <getTrngSource+0x294>)
   25656:	4b9c      	ldr	r3, [pc, #624]	; (258c8 <getTrngSource+0x298>)
   25658:	6811      	ldr	r1, [r2, #0]
   2565a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2565c:	681b      	ldr	r3, [r3, #0]
   2565e:	429a      	cmp	r2, r3
   25660:	d147      	bne.n	256f2 <getTrngSource+0xc2>
   25662:	290a      	cmp	r1, #10
   25664:	d145      	bne.n	256f2 <getTrngSource+0xc2>
   25666:	78fb      	ldrb	r3, [r7, #3]
   25668:	9304      	str	r3, [sp, #16]
   2566a:	4b98      	ldr	r3, [pc, #608]	; (258cc <getTrngSource+0x29c>)
   2566c:	fba3 230a 	umull	r2, r3, r3, sl
   25670:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   25674:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   25678:	f106 0208 	add.w	r2, r6, #8
   2567c:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   25680:	2304      	movs	r3, #4
   25682:	9203      	str	r2, [sp, #12]
   25684:	9302      	str	r3, [sp, #8]
   25686:	46b8      	mov	r8, r7
   25688:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2568a:	f8c3 a000 	str.w	sl, [r3]
   2568e:	f1ba 0f00 	cmp.w	sl, #0
   25692:	f000 80c4 	beq.w	2581e <getTrngSource+0x1ee>
   25696:	9e03      	ldr	r6, [sp, #12]
   25698:	4655      	mov	r5, sl
   2569a:	f04f 0900 	mov.w	r9, #0
   2569e:	f000 ff7b 	bl	26598 <LLF_RND_TurnOffTrng>
   256a2:	2300      	movs	r3, #0
   256a4:	9305      	str	r3, [sp, #20]
   256a6:	f1b8 0f00 	cmp.w	r8, #0
   256aa:	f000 80e6 	beq.w	2587a <getTrngSource+0x24a>
   256ae:	2c00      	cmp	r4, #0
   256b0:	f000 80e3 	beq.w	2587a <getTrngSource+0x24a>
   256b4:	9b04      	ldr	r3, [sp, #16]
   256b6:	2b00      	cmp	r3, #0
   256b8:	f000 80dd 	beq.w	25876 <getTrngSource+0x246>
   256bc:	a904      	add	r1, sp, #16
   256be:	4620      	mov	r0, r4
   256c0:	f000 ff5a 	bl	26578 <LLF_RND_GetFastestRosc>
   256c4:	b1b8      	cbz	r0, 256f6 <getTrngSource+0xc6>
   256c6:	4b82      	ldr	r3, [pc, #520]	; (258d0 <getTrngSource+0x2a0>)
   256c8:	4298      	cmp	r0, r3
   256ca:	f040 80a8 	bne.w	2581e <getTrngSource+0x1ee>
   256ce:	9002      	str	r0, [sp, #8]
   256d0:	f000 ff62 	bl	26598 <LLF_RND_TurnOffTrng>
   256d4:	9802      	ldr	r0, [sp, #8]
   256d6:	b00d      	add	sp, #52	; 0x34
   256d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256dc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   256e0:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   256e4:	3001      	adds	r0, #1
   256e6:	bf14      	ite	ne
   256e8:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   256ec:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   256f0:	e7a9      	b.n	25646 <getTrngSource+0x16>
   256f2:	4878      	ldr	r0, [pc, #480]	; (258d4 <getTrngSource+0x2a4>)
   256f4:	e7eb      	b.n	256ce <getTrngSource+0x9e>
   256f6:	9804      	ldr	r0, [sp, #16]
   256f8:	4621      	mov	r1, r4
   256fa:	f000 ff1f 	bl	2653c <LLF_RND_GetRoscSampleCnt>
   256fe:	2800      	cmp	r0, #0
   25700:	d1e1      	bne.n	256c6 <getTrngSource+0x96>
   25702:	9f04      	ldr	r7, [sp, #16]
   25704:	2f08      	cmp	r7, #8
   25706:	f000 80ba 	beq.w	2587e <getTrngSource+0x24e>
   2570a:	2f04      	cmp	r7, #4
   2570c:	f000 80b9 	beq.w	25882 <getTrngSource+0x252>
   25710:	f1a7 0702 	sub.w	r7, r7, #2
   25714:	fab7 f787 	clz	r7, r7
   25718:	097f      	lsrs	r7, r7, #5
   2571a:	496f      	ldr	r1, [pc, #444]	; (258d8 <getTrngSource+0x2a8>)
   2571c:	2301      	movs	r3, #1
   2571e:	600b      	str	r3, [r1, #0]
   25720:	f841 3c84 	str.w	r3, [r1, #-132]
   25724:	4619      	mov	r1, r3
   25726:	4b6c      	ldr	r3, [pc, #432]	; (258d8 <getTrngSource+0x2a8>)
   25728:	4867      	ldr	r0, [pc, #412]	; (258c8 <getTrngSource+0x298>)
   2572a:	6019      	str	r1, [r3, #0]
   2572c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2572e:	6003      	str	r3, [r0, #0]
   25730:	6800      	ldr	r0, [r0, #0]
   25732:	4283      	cmp	r3, r0
   25734:	d1f7      	bne.n	25726 <getTrngSource+0xf6>
   25736:	4a69      	ldr	r2, [pc, #420]	; (258dc <getTrngSource+0x2ac>)
   25738:	2300      	movs	r3, #0
   2573a:	6013      	str	r3, [r2, #0]
   2573c:	f04f 30ff 	mov.w	r0, #4294967295
   25740:	f7ff fd0a 	bl	25158 <CC_HalClearInterruptBit>
   25744:	2300      	movs	r3, #0
   25746:	4618      	mov	r0, r3
   25748:	4b65      	ldr	r3, [pc, #404]	; (258e0 <getTrngSource+0x2b0>)
   2574a:	f06f 011b 	mvn.w	r1, #27
   2574e:	6019      	str	r1, [r3, #0]
   25750:	f7ff fd10 	bl	25174 <CC_HalMaskInterrupt>
   25754:	4963      	ldr	r1, [pc, #396]	; (258e4 <getTrngSource+0x2b4>)
   25756:	4b64      	ldr	r3, [pc, #400]	; (258e8 <getTrngSource+0x2b8>)
   25758:	600f      	str	r7, [r1, #0]
   2575a:	6818      	ldr	r0, [r3, #0]
   2575c:	4f5b      	ldr	r7, [pc, #364]	; (258cc <getTrngSource+0x29c>)
   2575e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   25762:	f7ff fd07 	bl	25174 <CC_HalMaskInterrupt>
   25766:	4b57      	ldr	r3, [pc, #348]	; (258c4 <getTrngSource+0x294>)
   25768:	4860      	ldr	r0, [pc, #384]	; (258ec <getTrngSource+0x2bc>)
   2576a:	210a      	movs	r1, #10
   2576c:	6019      	str	r1, [r3, #0]
   2576e:	6921      	ldr	r1, [r4, #16]
   25770:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25772:	fba7 c101 	umull	ip, r1, r7, r1
   25776:	0909      	lsrs	r1, r1, #4
   25778:	fb03 f301 	mul.w	r3, r3, r1
   2577c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25780:	03db      	lsls	r3, r3, #15
   25782:	099b      	lsrs	r3, r3, #6
   25784:	6003      	str	r3, [r0, #0]
   25786:	4b55      	ldr	r3, [pc, #340]	; (258dc <getTrngSource+0x2ac>)
   25788:	2201      	movs	r2, #1
   2578a:	601a      	str	r2, [r3, #0]
   2578c:	9904      	ldr	r1, [sp, #16]
   2578e:	f8d8 2000 	ldr.w	r2, [r8]
   25792:	020b      	lsls	r3, r1, #8
   25794:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   25798:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2579c:	4313      	orrs	r3, r2
   2579e:	f8c8 3000 	str.w	r3, [r8]
   257a2:	a805      	add	r0, sp, #20
   257a4:	f000 feba 	bl	2651c <LLF_RND_WaitRngInterrupt>
   257a8:	9b05      	ldr	r3, [sp, #20]
   257aa:	f003 031a 	and.w	r3, r3, #26
   257ae:	4303      	orrs	r3, r0
   257b0:	d135      	bne.n	2581e <getTrngSource+0x1ee>
   257b2:	4a4f      	ldr	r2, [pc, #316]	; (258f0 <getTrngSource+0x2c0>)
   257b4:	4b4f      	ldr	r3, [pc, #316]	; (258f4 <getTrngSource+0x2c4>)
   257b6:	6812      	ldr	r2, [r2, #0]
   257b8:	9206      	str	r2, [sp, #24]
   257ba:	681a      	ldr	r2, [r3, #0]
   257bc:	9207      	str	r2, [sp, #28]
   257be:	685a      	ldr	r2, [r3, #4]
   257c0:	9208      	str	r2, [sp, #32]
   257c2:	689a      	ldr	r2, [r3, #8]
   257c4:	9209      	str	r2, [sp, #36]	; 0x24
   257c6:	68da      	ldr	r2, [r3, #12]
   257c8:	920a      	str	r2, [sp, #40]	; 0x28
   257ca:	3310      	adds	r3, #16
   257cc:	fba7 2705 	umull	r2, r7, r7, r5
   257d0:	681b      	ldr	r3, [r3, #0]
   257d2:	930b      	str	r3, [sp, #44]	; 0x2c
   257d4:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   257d8:	d102      	bne.n	257e0 <getTrngSource+0x1b0>
   257da:	f1bb 0f00 	cmp.w	fp, #0
   257de:	d141      	bne.n	25864 <getTrngSource+0x234>
   257e0:	2218      	movs	r2, #24
   257e2:	4630      	mov	r0, r6
   257e4:	eb0d 0102 	add.w	r1, sp, r2
   257e8:	f000 fe3c 	bl	26464 <CC_PalMemCopyPlat>
   257ec:	3d18      	subs	r5, #24
   257ee:	3618      	adds	r6, #24
   257f0:	f109 0901 	add.w	r9, r9, #1
   257f4:	2d00      	cmp	r5, #0
   257f6:	f47f af52 	bne.w	2569e <getTrngSource+0x6e>
   257fa:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   257fe:	d85d      	bhi.n	258bc <getTrngSource+0x28c>
   25800:	9d03      	ldr	r5, [sp, #12]
   25802:	6962      	ldr	r2, [r4, #20]
   25804:	4651      	mov	r1, sl
   25806:	4628      	mov	r0, r5
   25808:	f7ff fe7c 	bl	25504 <LLF_RND_RepetitionCounterTest.part.0>
   2580c:	2800      	cmp	r0, #0
   2580e:	d04b      	beq.n	258a8 <getTrngSource+0x278>
   25810:	9a16      	ldr	r2, [sp, #88]	; 0x58
   25812:	2300      	movs	r3, #0
   25814:	6013      	str	r3, [r2, #0]
   25816:	4b2e      	ldr	r3, [pc, #184]	; (258d0 <getTrngSource+0x2a0>)
   25818:	4298      	cmp	r0, r3
   2581a:	f43f af58 	beq.w	256ce <getTrngSource+0x9e>
   2581e:	9d04      	ldr	r5, [sp, #16]
   25820:	2d08      	cmp	r5, #8
   25822:	d034      	beq.n	2588e <getTrngSource+0x25e>
   25824:	2200      	movs	r2, #0
   25826:	ab04      	add	r3, sp, #16
   25828:	006d      	lsls	r5, r5, #1
   2582a:	9200      	str	r2, [sp, #0]
   2582c:	4621      	mov	r1, r4
   2582e:	4640      	mov	r0, r8
   25830:	9504      	str	r5, [sp, #16]
   25832:	f7ff fdbd 	bl	253b0 <startTrngHW>
   25836:	4b30      	ldr	r3, [pc, #192]	; (258f8 <getTrngSource+0x2c8>)
   25838:	4298      	cmp	r0, r3
   2583a:	d024      	beq.n	25886 <getTrngSource+0x256>
   2583c:	2800      	cmp	r0, #0
   2583e:	f47f af46 	bne.w	256ce <getTrngSource+0x9e>
   25842:	f8d8 2000 	ldr.w	r2, [r8]
   25846:	0a13      	lsrs	r3, r2, #8
   25848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2584c:	4313      	orrs	r3, r2
   2584e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   25852:	f8c8 3000 	str.w	r3, [r8]
   25856:	9b02      	ldr	r3, [sp, #8]
   25858:	3b01      	subs	r3, #1
   2585a:	9302      	str	r3, [sp, #8]
   2585c:	f47f af14 	bne.w	25688 <getTrngSource+0x58>
   25860:	2000      	movs	r0, #0
   25862:	e734      	b.n	256ce <getTrngSource+0x9e>
   25864:	4630      	mov	r0, r6
   25866:	465a      	mov	r2, fp
   25868:	a906      	add	r1, sp, #24
   2586a:	f000 fdfb 	bl	26464 <CC_PalMemCopyPlat>
   2586e:	eba5 050b 	sub.w	r5, r5, fp
   25872:	445e      	add	r6, fp
   25874:	e7bc      	b.n	257f0 <getTrngSource+0x1c0>
   25876:	4820      	ldr	r0, [pc, #128]	; (258f8 <getTrngSource+0x2c8>)
   25878:	e725      	b.n	256c6 <getTrngSource+0x96>
   2587a:	4820      	ldr	r0, [pc, #128]	; (258fc <getTrngSource+0x2cc>)
   2587c:	e723      	b.n	256c6 <getTrngSource+0x96>
   2587e:	2703      	movs	r7, #3
   25880:	e74b      	b.n	2571a <getTrngSource+0xea>
   25882:	2702      	movs	r7, #2
   25884:	e749      	b.n	2571a <getTrngSource+0xea>
   25886:	6a23      	ldr	r3, [r4, #32]
   25888:	2b00      	cmp	r3, #0
   2588a:	f43f af20 	beq.w	256ce <getTrngSource+0x9e>
   2588e:	481c      	ldr	r0, [pc, #112]	; (25900 <getTrngSource+0x2d0>)
   25890:	e71d      	b.n	256ce <getTrngSource+0x9e>
   25892:	9500      	str	r5, [sp, #0]
   25894:	ab04      	add	r3, sp, #16
   25896:	2201      	movs	r2, #1
   25898:	4621      	mov	r1, r4
   2589a:	4638      	mov	r0, r7
   2589c:	f7ff fd88 	bl	253b0 <startTrngHW>
   258a0:	2800      	cmp	r0, #0
   258a2:	f43f aee2 	beq.w	2566a <getTrngSource+0x3a>
   258a6:	e712      	b.n	256ce <getTrngSource+0x9e>
   258a8:	69a2      	ldr	r2, [r4, #24]
   258aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   258ae:	4651      	mov	r1, sl
   258b0:	4628      	mov	r0, r5
   258b2:	f7ff fe55 	bl	25560 <LLF_RND_AdaptiveProportionTest>
   258b6:	2800      	cmp	r0, #0
   258b8:	d1aa      	bne.n	25810 <getTrngSource+0x1e0>
   258ba:	e7d1      	b.n	25860 <getTrngSource+0x230>
   258bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   258be:	601d      	str	r5, [r3, #0]
   258c0:	e7ad      	b.n	2581e <getTrngSource+0x1ee>
   258c2:	bf00      	nop
   258c4:	5002b138 	.word	0x5002b138
   258c8:	5002b130 	.word	0x5002b130
   258cc:	aaaaaaab 	.word	0xaaaaaaab
   258d0:	00f10c02 	.word	0x00f10c02
   258d4:	00f10c30 	.word	0x00f10c30
   258d8:	5002b1c4 	.word	0x5002b1c4
   258dc:	5002b12c 	.word	0x5002b12c
   258e0:	5002b100 	.word	0x5002b100
   258e4:	5002b10c 	.word	0x5002b10c
   258e8:	5002ba04 	.word	0x5002ba04
   258ec:	5002b1d8 	.word	0x5002b1d8
   258f0:	5002b114 	.word	0x5002b114
   258f4:	5002b118 	.word	0x5002b118
   258f8:	00f10c31 	.word	0x00f10c31
   258fc:	00f10c35 	.word	0x00f10c35
   25900:	00f10c32 	.word	0x00f10c32

00025904 <LLF_RND_GetTrngSource>:
   25904:	b430      	push	{r4, r5}
   25906:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   2590a:	9d04      	ldr	r5, [sp, #16]
   2590c:	9402      	str	r4, [sp, #8]
   2590e:	2400      	movs	r4, #0
   25910:	e9cd 5403 	strd	r5, r4, [sp, #12]
   25914:	bc30      	pop	{r4, r5}
   25916:	f7ff be8b 	b.w	25630 <getTrngSource>
   2591a:	bf00      	nop

0002591c <LLF_RND_RunTrngStartupTest>:
   2591c:	b510      	push	{r4, lr}
   2591e:	b086      	sub	sp, #24
   25920:	ab05      	add	r3, sp, #20
   25922:	2401      	movs	r4, #1
   25924:	e9cd 2401 	strd	r2, r4, [sp, #4]
   25928:	9300      	str	r3, [sp, #0]
   2592a:	2200      	movs	r2, #0
   2592c:	ab04      	add	r3, sp, #16
   2592e:	f7ff fe7f 	bl	25630 <getTrngSource>
   25932:	b006      	add	sp, #24
   25934:	bd10      	pop	{r4, pc}
   25936:	bf00      	nop

00025938 <mbedtls_platform_zeroize>:
   25938:	b138      	cbz	r0, 2594a <mbedtls_platform_zeroize+0x12>
   2593a:	b131      	cbz	r1, 2594a <mbedtls_platform_zeroize+0x12>
   2593c:	4401      	add	r1, r0
   2593e:	2200      	movs	r2, #0
   25940:	4603      	mov	r3, r0
   25942:	3001      	adds	r0, #1
   25944:	4281      	cmp	r1, r0
   25946:	701a      	strb	r2, [r3, #0]
   25948:	d1fa      	bne.n	25940 <mbedtls_platform_zeroize+0x8>
   2594a:	4770      	bx	lr

0002594c <mbedtls_hardware_poll>:
   2594c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2594e:	b089      	sub	sp, #36	; 0x24
   25950:	9205      	str	r2, [sp, #20]
   25952:	2900      	cmp	r1, #0
   25954:	d064      	beq.n	25a20 <mbedtls_hardware_poll+0xd4>
   25956:	461c      	mov	r4, r3
   25958:	2b00      	cmp	r3, #0
   2595a:	d061      	beq.n	25a20 <mbedtls_hardware_poll+0xd4>
   2595c:	4615      	mov	r5, r2
   2595e:	2a00      	cmp	r2, #0
   25960:	d05e      	beq.n	25a20 <mbedtls_hardware_poll+0xd4>
   25962:	4f31      	ldr	r7, [pc, #196]	; (25a28 <mbedtls_hardware_poll+0xdc>)
   25964:	460e      	mov	r6, r1
   25966:	6838      	ldr	r0, [r7, #0]
   25968:	f04f 31ff 	mov.w	r1, #4294967295
   2596c:	f7ff fc9c 	bl	252a8 <CC_PalMutexLock>
   25970:	2800      	cmp	r0, #0
   25972:	d14b      	bne.n	25a0c <mbedtls_hardware_poll+0xc0>
   25974:	2000      	movs	r0, #0
   25976:	f7ff fcc7 	bl	25308 <CC_PalPowerSaveModeSelect>
   2597a:	2800      	cmp	r0, #0
   2597c:	d142      	bne.n	25a04 <mbedtls_hardware_poll+0xb8>
   2597e:	482b      	ldr	r0, [pc, #172]	; (25a2c <mbedtls_hardware_poll+0xe0>)
   25980:	f000 fd34 	bl	263ec <RNG_PLAT_SetUserRngParameters>
   25984:	b1d8      	cbz	r0, 259be <mbedtls_hardware_poll+0x72>
   25986:	2001      	movs	r0, #1
   25988:	f04f 36ff 	mov.w	r6, #4294967295
   2598c:	f7ff fcbc 	bl	25308 <CC_PalPowerSaveModeSelect>
   25990:	2800      	cmp	r0, #0
   25992:	d133      	bne.n	259fc <mbedtls_hardware_poll+0xb0>
   25994:	4826      	ldr	r0, [pc, #152]	; (25a30 <mbedtls_hardware_poll+0xe4>)
   25996:	f44f 7108 	mov.w	r1, #544	; 0x220
   2599a:	f7ff ffcd 	bl	25938 <mbedtls_platform_zeroize>
   2599e:	4825      	ldr	r0, [pc, #148]	; (25a34 <mbedtls_hardware_poll+0xe8>)
   259a0:	2104      	movs	r1, #4
   259a2:	f7ff ffc9 	bl	25938 <mbedtls_platform_zeroize>
   259a6:	4821      	ldr	r0, [pc, #132]	; (25a2c <mbedtls_hardware_poll+0xe0>)
   259a8:	2128      	movs	r1, #40	; 0x28
   259aa:	f7ff ffc5 	bl	25938 <mbedtls_platform_zeroize>
   259ae:	6838      	ldr	r0, [r7, #0]
   259b0:	f7ff fc82 	bl	252b8 <CC_PalMutexUnlock>
   259b4:	2800      	cmp	r0, #0
   259b6:	d12d      	bne.n	25a14 <mbedtls_hardware_poll+0xc8>
   259b8:	4630      	mov	r0, r6
   259ba:	b009      	add	sp, #36	; 0x24
   259bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   259be:	491c      	ldr	r1, [pc, #112]	; (25a30 <mbedtls_hardware_poll+0xe4>)
   259c0:	9003      	str	r0, [sp, #12]
   259c2:	ab07      	add	r3, sp, #28
   259c4:	4602      	mov	r2, r0
   259c6:	9102      	str	r1, [sp, #8]
   259c8:	9300      	str	r3, [sp, #0]
   259ca:	4918      	ldr	r1, [pc, #96]	; (25a2c <mbedtls_hardware_poll+0xe0>)
   259cc:	4819      	ldr	r0, [pc, #100]	; (25a34 <mbedtls_hardware_poll+0xe8>)
   259ce:	9401      	str	r4, [sp, #4]
   259d0:	ab05      	add	r3, sp, #20
   259d2:	f7ff ff97 	bl	25904 <LLF_RND_GetTrngSource>
   259d6:	4603      	mov	r3, r0
   259d8:	2800      	cmp	r0, #0
   259da:	d1d4      	bne.n	25986 <mbedtls_hardware_poll+0x3a>
   259dc:	6822      	ldr	r2, [r4, #0]
   259de:	42aa      	cmp	r2, r5
   259e0:	d3d1      	bcc.n	25986 <mbedtls_hardware_poll+0x3a>
   259e2:	9907      	ldr	r1, [sp, #28]
   259e4:	4630      	mov	r0, r6
   259e6:	3108      	adds	r1, #8
   259e8:	462a      	mov	r2, r5
   259ea:	461e      	mov	r6, r3
   259ec:	f000 fd3a 	bl	26464 <CC_PalMemCopyPlat>
   259f0:	6025      	str	r5, [r4, #0]
   259f2:	2001      	movs	r0, #1
   259f4:	f7ff fc88 	bl	25308 <CC_PalPowerSaveModeSelect>
   259f8:	2800      	cmp	r0, #0
   259fa:	d0cb      	beq.n	25994 <mbedtls_hardware_poll+0x48>
   259fc:	480e      	ldr	r0, [pc, #56]	; (25a38 <mbedtls_hardware_poll+0xec>)
   259fe:	f7ff f8bd 	bl	24b7c <CC_PalAbort>
   25a02:	e7c7      	b.n	25994 <mbedtls_hardware_poll+0x48>
   25a04:	480d      	ldr	r0, [pc, #52]	; (25a3c <mbedtls_hardware_poll+0xf0>)
   25a06:	f7ff f8b9 	bl	24b7c <CC_PalAbort>
   25a0a:	e7b8      	b.n	2597e <mbedtls_hardware_poll+0x32>
   25a0c:	480c      	ldr	r0, [pc, #48]	; (25a40 <mbedtls_hardware_poll+0xf4>)
   25a0e:	f7ff f8b5 	bl	24b7c <CC_PalAbort>
   25a12:	e7af      	b.n	25974 <mbedtls_hardware_poll+0x28>
   25a14:	480b      	ldr	r0, [pc, #44]	; (25a44 <mbedtls_hardware_poll+0xf8>)
   25a16:	f7ff f8b1 	bl	24b7c <CC_PalAbort>
   25a1a:	4630      	mov	r0, r6
   25a1c:	b009      	add	sp, #36	; 0x24
   25a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25a20:	f04f 36ff 	mov.w	r6, #4294967295
   25a24:	e7c8      	b.n	259b8 <mbedtls_hardware_poll+0x6c>
   25a26:	bf00      	nop
   25a28:	2000062c 	.word	0x2000062c
   25a2c:	20003904 	.word	0x20003904
   25a30:	200036e4 	.word	0x200036e4
   25a34:	200036e0 	.word	0x200036e0
   25a38:	0002d7f4 	.word	0x0002d7f4
   25a3c:	0002d7d4 	.word	0x0002d7d4
   25a40:	0002d7bc 	.word	0x0002d7bc
   25a44:	0002d84c 	.word	0x0002d84c

00025a48 <cc_mbedtls_sha256_init>:
   25a48:	b510      	push	{r4, lr}
   25a4a:	4604      	mov	r4, r0
   25a4c:	b128      	cbz	r0, 25a5a <cc_mbedtls_sha256_init+0x12>
   25a4e:	4620      	mov	r0, r4
   25a50:	21f0      	movs	r1, #240	; 0xf0
   25a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25a56:	f000 bd09 	b.w	2646c <CC_PalMemSetZeroPlat>
   25a5a:	4804      	ldr	r0, [pc, #16]	; (25a6c <cc_mbedtls_sha256_init+0x24>)
   25a5c:	f7ff f88e 	bl	24b7c <CC_PalAbort>
   25a60:	4620      	mov	r0, r4
   25a62:	21f0      	movs	r1, #240	; 0xf0
   25a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25a68:	f000 bd00 	b.w	2646c <CC_PalMemSetZeroPlat>
   25a6c:	0002d864 	.word	0x0002d864

00025a70 <cc_mbedtls_sha256_free>:
   25a70:	b110      	cbz	r0, 25a78 <cc_mbedtls_sha256_free+0x8>
   25a72:	21f0      	movs	r1, #240	; 0xf0
   25a74:	f7ff bf60 	b.w	25938 <mbedtls_platform_zeroize>
   25a78:	4770      	bx	lr
   25a7a:	bf00      	nop

00025a7c <cc_mbedtls_sha256_starts_ret>:
   25a7c:	b508      	push	{r3, lr}
   25a7e:	b161      	cbz	r1, 25a9a <cc_mbedtls_sha256_starts_ret+0x1e>
   25a80:	2901      	cmp	r1, #1
   25a82:	d107      	bne.n	25a94 <cc_mbedtls_sha256_starts_ret+0x18>
   25a84:	2102      	movs	r1, #2
   25a86:	f000 f839 	bl	25afc <mbedtls_sha_starts_internal>
   25a8a:	2800      	cmp	r0, #0
   25a8c:	bf18      	it	ne
   25a8e:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   25a92:	bd08      	pop	{r3, pc}
   25a94:	f06f 0036 	mvn.w	r0, #54	; 0x36
   25a98:	bd08      	pop	{r3, pc}
   25a9a:	2101      	movs	r1, #1
   25a9c:	f000 f82e 	bl	25afc <mbedtls_sha_starts_internal>
   25aa0:	e7f3      	b.n	25a8a <cc_mbedtls_sha256_starts_ret+0xe>
   25aa2:	bf00      	nop

00025aa4 <cc_mbedtls_sha256_update_ret>:
   25aa4:	b508      	push	{r3, lr}
   25aa6:	f000 f86b 	bl	25b80 <mbedtls_sha_update_internal>
   25aaa:	2800      	cmp	r0, #0
   25aac:	bf18      	it	ne
   25aae:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   25ab2:	bd08      	pop	{r3, pc}

00025ab4 <cc_mbedtls_sha256_finish_ret>:
   25ab4:	b570      	push	{r4, r5, r6, lr}
   25ab6:	b1e8      	cbz	r0, 25af4 <cc_mbedtls_sha256_finish_ret+0x40>
   25ab8:	460e      	mov	r6, r1
   25aba:	b1d9      	cbz	r1, 25af4 <cc_mbedtls_sha256_finish_ret+0x40>
   25abc:	4604      	mov	r4, r0
   25abe:	f000 f831 	bl	25b24 <mbedtls_sha_finish_internal>
   25ac2:	4605      	mov	r5, r0
   25ac4:	b9b0      	cbnz	r0, 25af4 <cc_mbedtls_sha256_finish_ret+0x40>
   25ac6:	6823      	ldr	r3, [r4, #0]
   25ac8:	2b01      	cmp	r3, #1
   25aca:	d00b      	beq.n	25ae4 <cc_mbedtls_sha256_finish_ret+0x30>
   25acc:	2b02      	cmp	r3, #2
   25ace:	d001      	beq.n	25ad4 <cc_mbedtls_sha256_finish_ret+0x20>
   25ad0:	4628      	mov	r0, r5
   25ad2:	bd70      	pop	{r4, r5, r6, pc}
   25ad4:	f104 0108 	add.w	r1, r4, #8
   25ad8:	4630      	mov	r0, r6
   25ada:	221c      	movs	r2, #28
   25adc:	f000 fcc2 	bl	26464 <CC_PalMemCopyPlat>
   25ae0:	4628      	mov	r0, r5
   25ae2:	bd70      	pop	{r4, r5, r6, pc}
   25ae4:	f104 0108 	add.w	r1, r4, #8
   25ae8:	4630      	mov	r0, r6
   25aea:	2220      	movs	r2, #32
   25aec:	f000 fcba 	bl	26464 <CC_PalMemCopyPlat>
   25af0:	4628      	mov	r0, r5
   25af2:	bd70      	pop	{r4, r5, r6, pc}
   25af4:	f06f 0536 	mvn.w	r5, #54	; 0x36
   25af8:	e7ea      	b.n	25ad0 <cc_mbedtls_sha256_finish_ret+0x1c>
   25afa:	bf00      	nop

00025afc <mbedtls_sha_starts_internal>:
   25afc:	b178      	cbz	r0, 25b1e <mbedtls_sha_starts_internal+0x22>
   25afe:	b538      	push	{r3, r4, r5, lr}
   25b00:	4604      	mov	r4, r0
   25b02:	460d      	mov	r5, r1
   25b04:	21f0      	movs	r1, #240	; 0xf0
   25b06:	f000 fcb1 	bl	2646c <CC_PalMemSetZeroPlat>
   25b0a:	2340      	movs	r3, #64	; 0x40
   25b0c:	6025      	str	r5, [r4, #0]
   25b0e:	65e3      	str	r3, [r4, #92]	; 0x5c
   25b10:	4620      	mov	r0, r4
   25b12:	f000 fd83 	bl	2661c <InitHashDrv>
   25b16:	3800      	subs	r0, #0
   25b18:	bf18      	it	ne
   25b1a:	2001      	movne	r0, #1
   25b1c:	bd38      	pop	{r3, r4, r5, pc}
   25b1e:	2001      	movs	r0, #1
   25b20:	4770      	bx	lr
   25b22:	bf00      	nop

00025b24 <mbedtls_sha_finish_internal>:
   25b24:	b570      	push	{r4, r5, r6, lr}
   25b26:	6e05      	ldr	r5, [r0, #96]	; 0x60
   25b28:	b0a4      	sub	sp, #144	; 0x90
   25b2a:	4604      	mov	r4, r0
   25b2c:	ae04      	add	r6, sp, #16
   25b2e:	b9e5      	cbnz	r5, 25b6a <mbedtls_sha_finish_internal+0x46>
   25b30:	2201      	movs	r2, #1
   25b32:	2300      	movs	r3, #0
   25b34:	6062      	str	r2, [r4, #4]
   25b36:	4630      	mov	r0, r6
   25b38:	e9cd 3300 	strd	r3, r3, [sp]
   25b3c:	aa02      	add	r2, sp, #8
   25b3e:	4629      	mov	r1, r5
   25b40:	f000 fd38 	bl	265b4 <SetDataBuffersInfo>
   25b44:	b110      	cbz	r0, 25b4c <mbedtls_sha_finish_internal+0x28>
   25b46:	2001      	movs	r0, #1
   25b48:	b024      	add	sp, #144	; 0x90
   25b4a:	bd70      	pop	{r4, r5, r6, pc}
   25b4c:	462a      	mov	r2, r5
   25b4e:	a902      	add	r1, sp, #8
   25b50:	4620      	mov	r0, r4
   25b52:	f000 fd8d 	bl	26670 <ProcessHashDrv>
   25b56:	2800      	cmp	r0, #0
   25b58:	d1f5      	bne.n	25b46 <mbedtls_sha_finish_internal+0x22>
   25b5a:	4620      	mov	r0, r4
   25b5c:	f000 feb6 	bl	268cc <FinishHashDrv>
   25b60:	2800      	cmp	r0, #0
   25b62:	d1f0      	bne.n	25b46 <mbedtls_sha_finish_internal+0x22>
   25b64:	6620      	str	r0, [r4, #96]	; 0x60
   25b66:	b024      	add	sp, #144	; 0x90
   25b68:	bd70      	pop	{r4, r5, r6, pc}
   25b6a:	2d80      	cmp	r5, #128	; 0x80
   25b6c:	462a      	mov	r2, r5
   25b6e:	4630      	mov	r0, r6
   25b70:	bf28      	it	cs
   25b72:	2280      	movcs	r2, #128	; 0x80
   25b74:	f104 0164 	add.w	r1, r4, #100	; 0x64
   25b78:	f000 fc74 	bl	26464 <CC_PalMemCopyPlat>
   25b7c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   25b7e:	e7d7      	b.n	25b30 <mbedtls_sha_finish_internal+0xc>

00025b80 <mbedtls_sha_update_internal>:
   25b80:	2800      	cmp	r0, #0
   25b82:	d054      	beq.n	25c2e <mbedtls_sha_update_internal+0xae>
   25b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   25b86:	4614      	mov	r4, r2
   25b88:	b0a5      	sub	sp, #148	; 0x94
   25b8a:	b1b2      	cbz	r2, 25bba <mbedtls_sha_update_internal+0x3a>
   25b8c:	460e      	mov	r6, r1
   25b8e:	b351      	cbz	r1, 25be6 <mbedtls_sha_update_internal+0x66>
   25b90:	4605      	mov	r5, r0
   25b92:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   25b96:	1a1a      	subs	r2, r3, r0
   25b98:	fbb2 f7f3 	udiv	r7, r2, r3
   25b9c:	fb03 2717 	mls	r7, r3, r7, r2
   25ba0:	42a7      	cmp	r7, r4
   25ba2:	bf28      	it	cs
   25ba4:	4627      	movcs	r7, r4
   25ba6:	2f00      	cmp	r7, #0
   25ba8:	d143      	bne.n	25c32 <mbedtls_sha_update_internal+0xb2>
   25baa:	4283      	cmp	r3, r0
   25bac:	d008      	beq.n	25bc0 <mbedtls_sha_update_internal+0x40>
   25bae:	fbb4 f7f3 	udiv	r7, r4, r3
   25bb2:	fb03 f707 	mul.w	r7, r3, r7
   25bb6:	b9cf      	cbnz	r7, 25bec <mbedtls_sha_update_internal+0x6c>
   25bb8:	bb6c      	cbnz	r4, 25c16 <mbedtls_sha_update_internal+0x96>
   25bba:	2000      	movs	r0, #0
   25bbc:	b025      	add	sp, #148	; 0x94
   25bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25bc0:	2b80      	cmp	r3, #128	; 0x80
   25bc2:	bf28      	it	cs
   25bc4:	2380      	movcs	r3, #128	; 0x80
   25bc6:	461a      	mov	r2, r3
   25bc8:	f105 0164 	add.w	r1, r5, #100	; 0x64
   25bcc:	a804      	add	r0, sp, #16
   25bce:	f000 fc49 	bl	26464 <CC_PalMemCopyPlat>
   25bd2:	2300      	movs	r3, #0
   25bd4:	e9cd 3300 	strd	r3, r3, [sp]
   25bd8:	a804      	add	r0, sp, #16
   25bda:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   25bdc:	aa02      	add	r2, sp, #8
   25bde:	f000 fce9 	bl	265b4 <SetDataBuffersInfo>
   25be2:	2800      	cmp	r0, #0
   25be4:	d032      	beq.n	25c4c <mbedtls_sha_update_internal+0xcc>
   25be6:	2001      	movs	r0, #1
   25be8:	b025      	add	sp, #148	; 0x94
   25bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25bec:	2300      	movs	r3, #0
   25bee:	e9cd 3300 	strd	r3, r3, [sp]
   25bf2:	aa02      	add	r2, sp, #8
   25bf4:	4639      	mov	r1, r7
   25bf6:	4630      	mov	r0, r6
   25bf8:	f000 fcdc 	bl	265b4 <SetDataBuffersInfo>
   25bfc:	2800      	cmp	r0, #0
   25bfe:	d1f2      	bne.n	25be6 <mbedtls_sha_update_internal+0x66>
   25c00:	a902      	add	r1, sp, #8
   25c02:	463a      	mov	r2, r7
   25c04:	4628      	mov	r0, r5
   25c06:	f000 fd33 	bl	26670 <ProcessHashDrv>
   25c0a:	2800      	cmp	r0, #0
   25c0c:	d1eb      	bne.n	25be6 <mbedtls_sha_update_internal+0x66>
   25c0e:	1be4      	subs	r4, r4, r7
   25c10:	443e      	add	r6, r7
   25c12:	2c00      	cmp	r4, #0
   25c14:	d0d1      	beq.n	25bba <mbedtls_sha_update_internal+0x3a>
   25c16:	6e28      	ldr	r0, [r5, #96]	; 0x60
   25c18:	3019      	adds	r0, #25
   25c1a:	4622      	mov	r2, r4
   25c1c:	4631      	mov	r1, r6
   25c1e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   25c22:	f000 fc1f 	bl	26464 <CC_PalMemCopyPlat>
   25c26:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   25c28:	4422      	add	r2, r4
   25c2a:	662a      	str	r2, [r5, #96]	; 0x60
   25c2c:	e7c5      	b.n	25bba <mbedtls_sha_update_internal+0x3a>
   25c2e:	2001      	movs	r0, #1
   25c30:	4770      	bx	lr
   25c32:	f105 0364 	add.w	r3, r5, #100	; 0x64
   25c36:	4418      	add	r0, r3
   25c38:	463a      	mov	r2, r7
   25c3a:	f000 fc13 	bl	26464 <CC_PalMemCopyPlat>
   25c3e:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   25c42:	4438      	add	r0, r7
   25c44:	443e      	add	r6, r7
   25c46:	1be4      	subs	r4, r4, r7
   25c48:	6628      	str	r0, [r5, #96]	; 0x60
   25c4a:	e7ae      	b.n	25baa <mbedtls_sha_update_internal+0x2a>
   25c4c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25c4e:	a902      	add	r1, sp, #8
   25c50:	4628      	mov	r0, r5
   25c52:	f000 fd0d 	bl	26670 <ProcessHashDrv>
   25c56:	2800      	cmp	r0, #0
   25c58:	d1c5      	bne.n	25be6 <mbedtls_sha_update_internal+0x66>
   25c5a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25c5c:	6628      	str	r0, [r5, #96]	; 0x60
   25c5e:	e7a6      	b.n	25bae <mbedtls_sha_update_internal+0x2e>

00025c60 <block_cipher_df>:
   25c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c64:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   25c68:	b0b1      	sub	sp, #196	; 0xc4
   25c6a:	f200 812e 	bhi.w	25eca <block_cipher_df+0x26a>
   25c6e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 25edc <block_cipher_df+0x27c>
   25c72:	4614      	mov	r4, r2
   25c74:	460d      	mov	r5, r1
   25c76:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   25c7a:	2100      	movs	r1, #0
   25c7c:	4682      	mov	sl, r0
   25c7e:	4648      	mov	r0, r9
   25c80:	f003 fef6 	bl	29a70 <memset>
   25c84:	a813      	add	r0, sp, #76	; 0x4c
   25c86:	f000 fe63 	bl	26950 <cc_mbedtls_aes_init>
   25c8a:	2600      	movs	r6, #0
   25c8c:	4629      	mov	r1, r5
   25c8e:	2320      	movs	r3, #32
   25c90:	ba65      	rev16	r5, r4
   25c92:	4622      	mov	r2, r4
   25c94:	f109 0018 	add.w	r0, r9, #24
   25c98:	f8a9 5012 	strh.w	r5, [r9, #18]
   25c9c:	f889 3017 	strb.w	r3, [r9, #23]
   25ca0:	f8a9 6010 	strh.w	r6, [r9, #16]
   25ca4:	f003 fed9 	bl	29a5a <memcpy>
   25ca8:	eb09 0304 	add.w	r3, r9, r4
   25cac:	2280      	movs	r2, #128	; 0x80
   25cae:	4d88      	ldr	r5, [pc, #544]	; (25ed0 <block_cipher_df+0x270>)
   25cb0:	761a      	strb	r2, [r3, #24]
   25cb2:	4b88      	ldr	r3, [pc, #544]	; (25ed4 <block_cipher_df+0x274>)
   25cb4:	9503      	str	r5, [sp, #12]
   25cb6:	9304      	str	r3, [sp, #16]
   25cb8:	a813      	add	r0, sp, #76	; 0x4c
   25cba:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   25cbe:	a903      	add	r1, sp, #12
   25cc0:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   25cc4:	e9cd 5305 	strd	r5, r3, [sp, #20]
   25cc8:	f000 fe58 	bl	2697c <cc_mbedtls_aes_setkey_enc>
   25ccc:	4680      	mov	r8, r0
   25cce:	2800      	cmp	r0, #0
   25cd0:	f040 80da 	bne.w	25e88 <block_cipher_df+0x228>
   25cd4:	f104 0319 	add.w	r3, r4, #25
   25cd8:	9301      	str	r3, [sp, #4]
   25cda:	af07      	add	r7, sp, #28
   25cdc:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   25ce0:	2210      	movs	r2, #16
   25ce2:	2100      	movs	r1, #0
   25ce4:	4638      	mov	r0, r7
   25ce6:	f003 fec3 	bl	29a70 <memset>
   25cea:	4c7b      	ldr	r4, [pc, #492]	; (25ed8 <block_cipher_df+0x278>)
   25cec:	9d01      	ldr	r5, [sp, #4]
   25cee:	f89d 601d 	ldrb.w	r6, [sp, #29]
   25cf2:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   25cf6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   25cfa:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   25cfe:	f89d c01f 	ldrb.w	ip, [sp, #31]
   25d02:	f89d 001e 	ldrb.w	r0, [sp, #30]
   25d06:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   25d0a:	404e      	eors	r6, r1
   25d0c:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   25d10:	f88d 601d 	strb.w	r6, [sp, #29]
   25d14:	ea8e 0303 	eor.w	r3, lr, r3
   25d18:	4050      	eors	r0, r2
   25d1a:	ea8c 0101 	eor.w	r1, ip, r1
   25d1e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   25d22:	f88d 301c 	strb.w	r3, [sp, #28]
   25d26:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   25d2a:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   25d2e:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   25d32:	f88d 001e 	strb.w	r0, [sp, #30]
   25d36:	f88d 101f 	strb.w	r1, [sp, #31]
   25d3a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   25d3e:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   25d42:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   25d46:	405a      	eors	r2, r3
   25d48:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25d4c:	f88d 2020 	strb.w	r2, [sp, #32]
   25d50:	ea8c 0606 	eor.w	r6, ip, r6
   25d54:	4048      	eors	r0, r1
   25d56:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   25d5a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   25d5e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   25d62:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   25d66:	ea8e 0303 	eor.w	r3, lr, r3
   25d6a:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   25d6e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   25d72:	ea8c 0101 	eor.w	r1, ip, r1
   25d76:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   25d7a:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   25d7e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   25d82:	ea82 020c 	eor.w	r2, r2, ip
   25d86:	4073      	eors	r3, r6
   25d88:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   25d8c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   25d90:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   25d94:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   25d98:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   25d9c:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   25da0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   25da4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   25da8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   25dac:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   25db0:	ea8e 0202 	eor.w	r2, lr, r2
   25db4:	4041      	eors	r1, r0
   25db6:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   25dba:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   25dbe:	4073      	eors	r3, r6
   25dc0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   25dc4:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   25dc8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   25dcc:	ea8c 0000 	eor.w	r0, ip, r0
   25dd0:	4056      	eors	r6, r2
   25dd2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   25dd6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   25dda:	463b      	mov	r3, r7
   25ddc:	463a      	mov	r2, r7
   25dde:	2101      	movs	r1, #1
   25de0:	a813      	add	r0, sp, #76	; 0x4c
   25de2:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   25de6:	f000 fde3 	bl	269b0 <cc_mbedtls_aes_crypt_ecb>
   25dea:	2d10      	cmp	r5, #16
   25dec:	bf94      	ite	ls
   25dee:	1b6d      	subls	r5, r5, r5
   25df0:	3d10      	subhi	r5, #16
   25df2:	2800      	cmp	r0, #0
   25df4:	d167      	bne.n	25ec6 <block_cipher_df+0x266>
   25df6:	3410      	adds	r4, #16
   25df8:	2d00      	cmp	r5, #0
   25dfa:	f47f af78 	bne.w	25cee <block_cipher_df+0x8e>
   25dfe:	eb0b 0008 	add.w	r0, fp, r8
   25e02:	2210      	movs	r2, #16
   25e04:	4639      	mov	r1, r7
   25e06:	f003 fe28 	bl	29a5a <memcpy>
   25e0a:	f899 3003 	ldrb.w	r3, [r9, #3]
   25e0e:	f108 0810 	add.w	r8, r8, #16
   25e12:	3301      	adds	r3, #1
   25e14:	f1b8 0f20 	cmp.w	r8, #32
   25e18:	f889 3003 	strb.w	r3, [r9, #3]
   25e1c:	f47f af60 	bne.w	25ce0 <block_cipher_df+0x80>
   25e20:	2280      	movs	r2, #128	; 0x80
   25e22:	4659      	mov	r1, fp
   25e24:	a813      	add	r0, sp, #76	; 0x4c
   25e26:	f000 fda9 	bl	2697c <cc_mbedtls_aes_setkey_enc>
   25e2a:	4680      	mov	r8, r0
   25e2c:	bb78      	cbnz	r0, 25e8e <block_cipher_df+0x22e>
   25e2e:	f10a 0520 	add.w	r5, sl, #32
   25e32:	4654      	mov	r4, sl
   25e34:	ab0f      	add	r3, sp, #60	; 0x3c
   25e36:	461a      	mov	r2, r3
   25e38:	2101      	movs	r1, #1
   25e3a:	a813      	add	r0, sp, #76	; 0x4c
   25e3c:	f000 fdb8 	bl	269b0 <cc_mbedtls_aes_crypt_ecb>
   25e40:	2210      	movs	r2, #16
   25e42:	4680      	mov	r8, r0
   25e44:	a90f      	add	r1, sp, #60	; 0x3c
   25e46:	4620      	mov	r0, r4
   25e48:	4414      	add	r4, r2
   25e4a:	f1b8 0f00 	cmp.w	r8, #0
   25e4e:	d11e      	bne.n	25e8e <block_cipher_df+0x22e>
   25e50:	f003 fe03 	bl	29a5a <memcpy>
   25e54:	42ac      	cmp	r4, r5
   25e56:	d1ed      	bne.n	25e34 <block_cipher_df+0x1d4>
   25e58:	a813      	add	r0, sp, #76	; 0x4c
   25e5a:	f000 fd89 	bl	26970 <cc_mbedtls_aes_free>
   25e5e:	481f      	ldr	r0, [pc, #124]	; (25edc <block_cipher_df+0x27c>)
   25e60:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   25e64:	f7ff fd68 	bl	25938 <mbedtls_platform_zeroize>
   25e68:	4658      	mov	r0, fp
   25e6a:	2120      	movs	r1, #32
   25e6c:	f7ff fd64 	bl	25938 <mbedtls_platform_zeroize>
   25e70:	a803      	add	r0, sp, #12
   25e72:	2110      	movs	r1, #16
   25e74:	f7ff fd60 	bl	25938 <mbedtls_platform_zeroize>
   25e78:	4638      	mov	r0, r7
   25e7a:	2110      	movs	r1, #16
   25e7c:	f7ff fd5c 	bl	25938 <mbedtls_platform_zeroize>
   25e80:	4640      	mov	r0, r8
   25e82:	b031      	add	sp, #196	; 0xc4
   25e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e88:	af07      	add	r7, sp, #28
   25e8a:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   25e8e:	a813      	add	r0, sp, #76	; 0x4c
   25e90:	f000 fd6e 	bl	26970 <cc_mbedtls_aes_free>
   25e94:	4811      	ldr	r0, [pc, #68]	; (25edc <block_cipher_df+0x27c>)
   25e96:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   25e9a:	f7ff fd4d 	bl	25938 <mbedtls_platform_zeroize>
   25e9e:	4658      	mov	r0, fp
   25ea0:	2120      	movs	r1, #32
   25ea2:	f7ff fd49 	bl	25938 <mbedtls_platform_zeroize>
   25ea6:	a803      	add	r0, sp, #12
   25ea8:	2110      	movs	r1, #16
   25eaa:	f7ff fd45 	bl	25938 <mbedtls_platform_zeroize>
   25eae:	4638      	mov	r0, r7
   25eb0:	2110      	movs	r1, #16
   25eb2:	f7ff fd41 	bl	25938 <mbedtls_platform_zeroize>
   25eb6:	4650      	mov	r0, sl
   25eb8:	2120      	movs	r1, #32
   25eba:	f7ff fd3d 	bl	25938 <mbedtls_platform_zeroize>
   25ebe:	4640      	mov	r0, r8
   25ec0:	b031      	add	sp, #196	; 0xc4
   25ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ec6:	4680      	mov	r8, r0
   25ec8:	e7e1      	b.n	25e8e <block_cipher_df+0x22e>
   25eca:	f06f 0837 	mvn.w	r8, #55	; 0x37
   25ece:	e7f6      	b.n	25ebe <block_cipher_df+0x25e>
   25ed0:	03020100 	.word	0x03020100
   25ed4:	07060504 	.word	0x07060504
   25ed8:	2000393c 	.word	0x2000393c
   25edc:	2000392c 	.word	0x2000392c

00025ee0 <ctr_drbg_update_internal>:
   25ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ee4:	b088      	sub	sp, #32
   25ee6:	4604      	mov	r4, r0
   25ee8:	2220      	movs	r2, #32
   25eea:	460d      	mov	r5, r1
   25eec:	4668      	mov	r0, sp
   25eee:	2100      	movs	r1, #0
   25ef0:	eb04 0802 	add.w	r8, r4, r2
   25ef4:	f003 fdbc 	bl	29a70 <memset>
   25ef8:	466e      	mov	r6, sp
   25efa:	7be2      	ldrb	r2, [r4, #15]
   25efc:	3201      	adds	r2, #1
   25efe:	b2d2      	uxtb	r2, r2
   25f00:	73e2      	strb	r2, [r4, #15]
   25f02:	2a00      	cmp	r2, #0
   25f04:	d14d      	bne.n	25fa2 <ctr_drbg_update_internal+0xc2>
   25f06:	7ba2      	ldrb	r2, [r4, #14]
   25f08:	3201      	adds	r2, #1
   25f0a:	b2d2      	uxtb	r2, r2
   25f0c:	73a2      	strb	r2, [r4, #14]
   25f0e:	2a00      	cmp	r2, #0
   25f10:	d147      	bne.n	25fa2 <ctr_drbg_update_internal+0xc2>
   25f12:	7b63      	ldrb	r3, [r4, #13]
   25f14:	3301      	adds	r3, #1
   25f16:	b2db      	uxtb	r3, r3
   25f18:	7363      	strb	r3, [r4, #13]
   25f1a:	2b00      	cmp	r3, #0
   25f1c:	d141      	bne.n	25fa2 <ctr_drbg_update_internal+0xc2>
   25f1e:	7b23      	ldrb	r3, [r4, #12]
   25f20:	3301      	adds	r3, #1
   25f22:	b2db      	uxtb	r3, r3
   25f24:	7323      	strb	r3, [r4, #12]
   25f26:	2b00      	cmp	r3, #0
   25f28:	d13b      	bne.n	25fa2 <ctr_drbg_update_internal+0xc2>
   25f2a:	7ae3      	ldrb	r3, [r4, #11]
   25f2c:	3301      	adds	r3, #1
   25f2e:	b2db      	uxtb	r3, r3
   25f30:	72e3      	strb	r3, [r4, #11]
   25f32:	2b00      	cmp	r3, #0
   25f34:	d135      	bne.n	25fa2 <ctr_drbg_update_internal+0xc2>
   25f36:	7aa3      	ldrb	r3, [r4, #10]
   25f38:	3301      	adds	r3, #1
   25f3a:	b2db      	uxtb	r3, r3
   25f3c:	72a3      	strb	r3, [r4, #10]
   25f3e:	2b00      	cmp	r3, #0
   25f40:	d12f      	bne.n	25fa2 <ctr_drbg_update_internal+0xc2>
   25f42:	7a63      	ldrb	r3, [r4, #9]
   25f44:	3301      	adds	r3, #1
   25f46:	b2db      	uxtb	r3, r3
   25f48:	7263      	strb	r3, [r4, #9]
   25f4a:	bb53      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f4c:	7a23      	ldrb	r3, [r4, #8]
   25f4e:	3301      	adds	r3, #1
   25f50:	b2db      	uxtb	r3, r3
   25f52:	7223      	strb	r3, [r4, #8]
   25f54:	bb2b      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f56:	79e3      	ldrb	r3, [r4, #7]
   25f58:	3301      	adds	r3, #1
   25f5a:	b2db      	uxtb	r3, r3
   25f5c:	71e3      	strb	r3, [r4, #7]
   25f5e:	bb03      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f60:	79a3      	ldrb	r3, [r4, #6]
   25f62:	3301      	adds	r3, #1
   25f64:	b2db      	uxtb	r3, r3
   25f66:	71a3      	strb	r3, [r4, #6]
   25f68:	b9db      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f6a:	7963      	ldrb	r3, [r4, #5]
   25f6c:	3301      	adds	r3, #1
   25f6e:	b2db      	uxtb	r3, r3
   25f70:	7163      	strb	r3, [r4, #5]
   25f72:	b9b3      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f74:	7923      	ldrb	r3, [r4, #4]
   25f76:	3301      	adds	r3, #1
   25f78:	b2db      	uxtb	r3, r3
   25f7a:	7123      	strb	r3, [r4, #4]
   25f7c:	b98b      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f7e:	78e3      	ldrb	r3, [r4, #3]
   25f80:	3301      	adds	r3, #1
   25f82:	b2db      	uxtb	r3, r3
   25f84:	70e3      	strb	r3, [r4, #3]
   25f86:	b963      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f88:	78a3      	ldrb	r3, [r4, #2]
   25f8a:	3301      	adds	r3, #1
   25f8c:	b2db      	uxtb	r3, r3
   25f8e:	70a3      	strb	r3, [r4, #2]
   25f90:	b93b      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f92:	7863      	ldrb	r3, [r4, #1]
   25f94:	3301      	adds	r3, #1
   25f96:	b2db      	uxtb	r3, r3
   25f98:	7063      	strb	r3, [r4, #1]
   25f9a:	b913      	cbnz	r3, 25fa2 <ctr_drbg_update_internal+0xc2>
   25f9c:	7823      	ldrb	r3, [r4, #0]
   25f9e:	3301      	adds	r3, #1
   25fa0:	7023      	strb	r3, [r4, #0]
   25fa2:	4633      	mov	r3, r6
   25fa4:	4622      	mov	r2, r4
   25fa6:	2101      	movs	r1, #1
   25fa8:	4640      	mov	r0, r8
   25faa:	f000 fd01 	bl	269b0 <cc_mbedtls_aes_crypt_ecb>
   25fae:	4607      	mov	r7, r0
   25fb0:	2800      	cmp	r0, #0
   25fb2:	d12b      	bne.n	2600c <ctr_drbg_update_internal+0x12c>
   25fb4:	3610      	adds	r6, #16
   25fb6:	ab08      	add	r3, sp, #32
   25fb8:	429e      	cmp	r6, r3
   25fba:	d19e      	bne.n	25efa <ctr_drbg_update_internal+0x1a>
   25fbc:	9e01      	ldr	r6, [sp, #4]
   25fbe:	686a      	ldr	r2, [r5, #4]
   25fc0:	9f00      	ldr	r7, [sp, #0]
   25fc2:	6829      	ldr	r1, [r5, #0]
   25fc4:	68ab      	ldr	r3, [r5, #8]
   25fc6:	4072      	eors	r2, r6
   25fc8:	9e02      	ldr	r6, [sp, #8]
   25fca:	9201      	str	r2, [sp, #4]
   25fcc:	4079      	eors	r1, r7
   25fce:	4073      	eors	r3, r6
   25fd0:	9100      	str	r1, [sp, #0]
   25fd2:	9e03      	ldr	r6, [sp, #12]
   25fd4:	68e9      	ldr	r1, [r5, #12]
   25fd6:	692a      	ldr	r2, [r5, #16]
   25fd8:	9302      	str	r3, [sp, #8]
   25fda:	4071      	eors	r1, r6
   25fdc:	9e04      	ldr	r6, [sp, #16]
   25fde:	696b      	ldr	r3, [r5, #20]
   25fe0:	9103      	str	r1, [sp, #12]
   25fe2:	4056      	eors	r6, r2
   25fe4:	9a05      	ldr	r2, [sp, #20]
   25fe6:	9604      	str	r6, [sp, #16]
   25fe8:	ea83 0102 	eor.w	r1, r3, r2
   25fec:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   25ff0:	9d06      	ldr	r5, [sp, #24]
   25ff2:	9105      	str	r1, [sp, #20]
   25ff4:	4055      	eors	r5, r2
   25ff6:	9a07      	ldr	r2, [sp, #28]
   25ff8:	4640      	mov	r0, r8
   25ffa:	4053      	eors	r3, r2
   25ffc:	4669      	mov	r1, sp
   25ffe:	2280      	movs	r2, #128	; 0x80
   26000:	e9cd 5306 	strd	r5, r3, [sp, #24]
   26004:	f000 fcba 	bl	2697c <cc_mbedtls_aes_setkey_enc>
   26008:	4607      	mov	r7, r0
   2600a:	b138      	cbz	r0, 2601c <ctr_drbg_update_internal+0x13c>
   2600c:	4668      	mov	r0, sp
   2600e:	2120      	movs	r1, #32
   26010:	f7ff fc92 	bl	25938 <mbedtls_platform_zeroize>
   26014:	4638      	mov	r0, r7
   26016:	b008      	add	sp, #32
   26018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2601c:	2210      	movs	r2, #16
   2601e:	4620      	mov	r0, r4
   26020:	eb0d 0102 	add.w	r1, sp, r2
   26024:	f003 fd19 	bl	29a5a <memcpy>
   26028:	e7f0      	b.n	2600c <ctr_drbg_update_internal+0x12c>
   2602a:	bf00      	nop

0002602c <mbedtls_ctr_drbg_reseed_internal>:
   2602c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26030:	4604      	mov	r4, r0
   26032:	6980      	ldr	r0, [r0, #24]
   26034:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   26038:	d851      	bhi.n	260de <mbedtls_ctr_drbg_reseed_internal+0xb2>
   2603a:	461d      	mov	r5, r3
   2603c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   26040:	42ab      	cmp	r3, r5
   26042:	d34c      	bcc.n	260de <mbedtls_ctr_drbg_reseed_internal+0xb2>
   26044:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   26048:	1a18      	subs	r0, r3, r0
   2604a:	4290      	cmp	r0, r2
   2604c:	4616      	mov	r6, r2
   2604e:	d346      	bcc.n	260de <mbedtls_ctr_drbg_reseed_internal+0xb2>
   26050:	f8df 8098 	ldr.w	r8, [pc, #152]	; 260ec <mbedtls_ctr_drbg_reseed_internal+0xc0>
   26054:	f44f 72c0 	mov.w	r2, #384	; 0x180
   26058:	460f      	mov	r7, r1
   2605a:	4640      	mov	r0, r8
   2605c:	2100      	movs	r1, #0
   2605e:	f003 fd07 	bl	29a70 <memset>
   26062:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   26066:	69a2      	ldr	r2, [r4, #24]
   26068:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   2606c:	4641      	mov	r1, r8
   2606e:	4798      	blx	r3
   26070:	2800      	cmp	r0, #0
   26072:	d137      	bne.n	260e4 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   26074:	f8d4 9018 	ldr.w	r9, [r4, #24]
   26078:	b135      	cbz	r5, 26088 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   2607a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   2607e:	462a      	mov	r2, r5
   26080:	4641      	mov	r1, r8
   26082:	4798      	blx	r3
   26084:	bb70      	cbnz	r0, 260e4 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   26086:	44a9      	add	r9, r5
   26088:	b107      	cbz	r7, 2608c <mbedtls_ctr_drbg_reseed_internal+0x60>
   2608a:	b9c6      	cbnz	r6, 260be <mbedtls_ctr_drbg_reseed_internal+0x92>
   2608c:	4917      	ldr	r1, [pc, #92]	; (260ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2608e:	464a      	mov	r2, r9
   26090:	4608      	mov	r0, r1
   26092:	f7ff fde5 	bl	25c60 <block_cipher_df>
   26096:	4605      	mov	r5, r0
   26098:	b138      	cbz	r0, 260aa <mbedtls_ctr_drbg_reseed_internal+0x7e>
   2609a:	4814      	ldr	r0, [pc, #80]	; (260ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2609c:	f44f 71c0 	mov.w	r1, #384	; 0x180
   260a0:	f7ff fc4a 	bl	25938 <mbedtls_platform_zeroize>
   260a4:	4628      	mov	r0, r5
   260a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   260aa:	4910      	ldr	r1, [pc, #64]	; (260ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   260ac:	4620      	mov	r0, r4
   260ae:	f7ff ff17 	bl	25ee0 <ctr_drbg_update_internal>
   260b2:	4605      	mov	r5, r0
   260b4:	2800      	cmp	r0, #0
   260b6:	d1f0      	bne.n	2609a <mbedtls_ctr_drbg_reseed_internal+0x6e>
   260b8:	2301      	movs	r3, #1
   260ba:	6123      	str	r3, [r4, #16]
   260bc:	e7ed      	b.n	2609a <mbedtls_ctr_drbg_reseed_internal+0x6e>
   260be:	4639      	mov	r1, r7
   260c0:	eb08 0009 	add.w	r0, r8, r9
   260c4:	4632      	mov	r2, r6
   260c6:	f003 fcc8 	bl	29a5a <memcpy>
   260ca:	4908      	ldr	r1, [pc, #32]	; (260ec <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   260cc:	44b1      	add	r9, r6
   260ce:	464a      	mov	r2, r9
   260d0:	4608      	mov	r0, r1
   260d2:	f7ff fdc5 	bl	25c60 <block_cipher_df>
   260d6:	4605      	mov	r5, r0
   260d8:	2800      	cmp	r0, #0
   260da:	d1de      	bne.n	2609a <mbedtls_ctr_drbg_reseed_internal+0x6e>
   260dc:	e7e5      	b.n	260aa <mbedtls_ctr_drbg_reseed_internal+0x7e>
   260de:	f06f 0537 	mvn.w	r5, #55	; 0x37
   260e2:	e7df      	b.n	260a4 <mbedtls_ctr_drbg_reseed_internal+0x78>
   260e4:	f06f 0533 	mvn.w	r5, #51	; 0x33
   260e8:	e7dc      	b.n	260a4 <mbedtls_ctr_drbg_reseed_internal+0x78>
   260ea:	bf00      	nop
   260ec:	20003acc 	.word	0x20003acc

000260f0 <cc_mbedtls_ctr_drbg_init>:
   260f0:	b510      	push	{r4, lr}
   260f2:	22a4      	movs	r2, #164	; 0xa4
   260f4:	4604      	mov	r4, r0
   260f6:	2100      	movs	r1, #0
   260f8:	f003 fcba 	bl	29a70 <memset>
   260fc:	4b04      	ldr	r3, [pc, #16]	; (26110 <cc_mbedtls_ctr_drbg_init+0x20>)
   260fe:	f04f 32ff 	mov.w	r2, #4294967295
   26102:	6122      	str	r2, [r4, #16]
   26104:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   26108:	681b      	ldr	r3, [r3, #0]
   2610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2610e:	4718      	bx	r3
   26110:	20000630 	.word	0x20000630

00026114 <cc_mbedtls_ctr_drbg_seed>:
   26114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26118:	b085      	sub	sp, #20
   2611a:	4605      	mov	r5, r0
   2611c:	460f      	mov	r7, r1
   2611e:	4616      	mov	r6, r2
   26120:	4668      	mov	r0, sp
   26122:	2210      	movs	r2, #16
   26124:	2100      	movs	r1, #0
   26126:	4699      	mov	r9, r3
   26128:	f003 fca2 	bl	29a70 <memset>
   2612c:	4b1f      	ldr	r3, [pc, #124]	; (261ac <cc_mbedtls_ctr_drbg_seed+0x98>)
   2612e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   26132:	681b      	ldr	r3, [r3, #0]
   26134:	4640      	mov	r0, r8
   26136:	4798      	blx	r3
   26138:	b120      	cbz	r0, 26144 <cc_mbedtls_ctr_drbg_seed+0x30>
   2613a:	4604      	mov	r4, r0
   2613c:	4620      	mov	r0, r4
   2613e:	b005      	add	sp, #20
   26140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26144:	f105 0420 	add.w	r4, r5, #32
   26148:	4620      	mov	r0, r4
   2614a:	f000 fc01 	bl	26950 <cc_mbedtls_aes_init>
   2614e:	69aa      	ldr	r2, [r5, #24]
   26150:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   26154:	692e      	ldr	r6, [r5, #16]
   26156:	b9fa      	cbnz	r2, 26198 <cc_mbedtls_ctr_drbg_seed+0x84>
   26158:	2220      	movs	r2, #32
   2615a:	2e00      	cmp	r6, #0
   2615c:	61aa      	str	r2, [r5, #24]
   2615e:	db22      	blt.n	261a6 <cc_mbedtls_ctr_drbg_seed+0x92>
   26160:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   26164:	4620      	mov	r0, r4
   26166:	4669      	mov	r1, sp
   26168:	61eb      	str	r3, [r5, #28]
   2616a:	2280      	movs	r2, #128	; 0x80
   2616c:	f000 fc06 	bl	2697c <cc_mbedtls_aes_setkey_enc>
   26170:	4604      	mov	r4, r0
   26172:	b930      	cbnz	r0, 26182 <cc_mbedtls_ctr_drbg_seed+0x6e>
   26174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26176:	4633      	mov	r3, r6
   26178:	4649      	mov	r1, r9
   2617a:	4628      	mov	r0, r5
   2617c:	f7ff ff56 	bl	2602c <mbedtls_ctr_drbg_reseed_internal>
   26180:	4604      	mov	r4, r0
   26182:	4b0b      	ldr	r3, [pc, #44]	; (261b0 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   26184:	4640      	mov	r0, r8
   26186:	681b      	ldr	r3, [r3, #0]
   26188:	4798      	blx	r3
   2618a:	2800      	cmp	r0, #0
   2618c:	bf18      	it	ne
   2618e:	4604      	movne	r4, r0
   26190:	4620      	mov	r0, r4
   26192:	b005      	add	sp, #20
   26194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26198:	2e00      	cmp	r6, #0
   2619a:	dae1      	bge.n	26160 <cc_mbedtls_ctr_drbg_seed+0x4c>
   2619c:	2a17      	cmp	r2, #23
   2619e:	d802      	bhi.n	261a6 <cc_mbedtls_ctr_drbg_seed+0x92>
   261a0:	1c53      	adds	r3, r2, #1
   261a2:	085e      	lsrs	r6, r3, #1
   261a4:	e7dc      	b.n	26160 <cc_mbedtls_ctr_drbg_seed+0x4c>
   261a6:	2600      	movs	r6, #0
   261a8:	e7da      	b.n	26160 <cc_mbedtls_ctr_drbg_seed+0x4c>
   261aa:	bf00      	nop
   261ac:	20000634 	.word	0x20000634
   261b0:	20000638 	.word	0x20000638

000261b4 <cc_mbedtls_ctr_drbg_random_with_add>:
   261b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261b8:	b08d      	sub	sp, #52	; 0x34
   261ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   261be:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   261c2:	f200 80e4 	bhi.w	2638e <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   261c6:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   261ca:	f200 80dd 	bhi.w	26388 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   261ce:	4604      	mov	r4, r0
   261d0:	4615      	mov	r5, r2
   261d2:	460e      	mov	r6, r1
   261d4:	2220      	movs	r2, #32
   261d6:	2100      	movs	r1, #0
   261d8:	a804      	add	r0, sp, #16
   261da:	461f      	mov	r7, r3
   261dc:	f003 fc48 	bl	29a70 <memset>
   261e0:	4b6c      	ldr	r3, [pc, #432]	; (26394 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   261e2:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   261e6:	681b      	ldr	r3, [r3, #0]
   261e8:	4648      	mov	r0, r9
   261ea:	4798      	blx	r3
   261ec:	4683      	mov	fp, r0
   261ee:	2800      	cmp	r0, #0
   261f0:	f040 8093 	bne.w	2631a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   261f4:	6922      	ldr	r2, [r4, #16]
   261f6:	69e3      	ldr	r3, [r4, #28]
   261f8:	429a      	cmp	r2, r3
   261fa:	f300 8092 	bgt.w	26322 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   261fe:	6963      	ldr	r3, [r4, #20]
   26200:	2b00      	cmp	r3, #0
   26202:	f040 808e 	bne.w	26322 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   26206:	f1b8 0f00 	cmp.w	r8, #0
   2620a:	f040 80a9 	bne.w	26360 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   2620e:	f8df a188 	ldr.w	sl, [pc, #392]	; 26398 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   26212:	466f      	mov	r7, sp
   26214:	2d00      	cmp	r5, #0
   26216:	f000 8098 	beq.w	2634a <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   2621a:	f104 0820 	add.w	r8, r4, #32
   2621e:	466f      	mov	r7, sp
   26220:	e00e      	b.n	26240 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   26222:	2d10      	cmp	r5, #16
   26224:	46ab      	mov	fp, r5
   26226:	bf28      	it	cs
   26228:	f04f 0b10 	movcs.w	fp, #16
   2622c:	4630      	mov	r0, r6
   2622e:	465a      	mov	r2, fp
   26230:	4639      	mov	r1, r7
   26232:	f003 fc12 	bl	29a5a <memcpy>
   26236:	ebb5 050b 	subs.w	r5, r5, fp
   2623a:	445e      	add	r6, fp
   2623c:	f000 8085 	beq.w	2634a <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   26240:	7be3      	ldrb	r3, [r4, #15]
   26242:	3301      	adds	r3, #1
   26244:	b2db      	uxtb	r3, r3
   26246:	73e3      	strb	r3, [r4, #15]
   26248:	2b00      	cmp	r3, #0
   2624a:	d14d      	bne.n	262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2624c:	7ba3      	ldrb	r3, [r4, #14]
   2624e:	3301      	adds	r3, #1
   26250:	b2db      	uxtb	r3, r3
   26252:	73a3      	strb	r3, [r4, #14]
   26254:	2b00      	cmp	r3, #0
   26256:	d147      	bne.n	262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26258:	7b63      	ldrb	r3, [r4, #13]
   2625a:	3301      	adds	r3, #1
   2625c:	b2db      	uxtb	r3, r3
   2625e:	7363      	strb	r3, [r4, #13]
   26260:	2b00      	cmp	r3, #0
   26262:	d141      	bne.n	262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26264:	7b23      	ldrb	r3, [r4, #12]
   26266:	3301      	adds	r3, #1
   26268:	b2db      	uxtb	r3, r3
   2626a:	7323      	strb	r3, [r4, #12]
   2626c:	2b00      	cmp	r3, #0
   2626e:	d13b      	bne.n	262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26270:	7ae3      	ldrb	r3, [r4, #11]
   26272:	3301      	adds	r3, #1
   26274:	b2db      	uxtb	r3, r3
   26276:	72e3      	strb	r3, [r4, #11]
   26278:	2b00      	cmp	r3, #0
   2627a:	d135      	bne.n	262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2627c:	7aa3      	ldrb	r3, [r4, #10]
   2627e:	3301      	adds	r3, #1
   26280:	b2db      	uxtb	r3, r3
   26282:	72a3      	strb	r3, [r4, #10]
   26284:	2b00      	cmp	r3, #0
   26286:	d12f      	bne.n	262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26288:	7a63      	ldrb	r3, [r4, #9]
   2628a:	3301      	adds	r3, #1
   2628c:	b2db      	uxtb	r3, r3
   2628e:	7263      	strb	r3, [r4, #9]
   26290:	bb53      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26292:	7a23      	ldrb	r3, [r4, #8]
   26294:	3301      	adds	r3, #1
   26296:	b2db      	uxtb	r3, r3
   26298:	7223      	strb	r3, [r4, #8]
   2629a:	bb2b      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2629c:	79e3      	ldrb	r3, [r4, #7]
   2629e:	3301      	adds	r3, #1
   262a0:	b2db      	uxtb	r3, r3
   262a2:	71e3      	strb	r3, [r4, #7]
   262a4:	bb03      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   262a6:	79a3      	ldrb	r3, [r4, #6]
   262a8:	3301      	adds	r3, #1
   262aa:	b2db      	uxtb	r3, r3
   262ac:	71a3      	strb	r3, [r4, #6]
   262ae:	b9db      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   262b0:	7963      	ldrb	r3, [r4, #5]
   262b2:	3301      	adds	r3, #1
   262b4:	b2db      	uxtb	r3, r3
   262b6:	7163      	strb	r3, [r4, #5]
   262b8:	b9b3      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   262ba:	7923      	ldrb	r3, [r4, #4]
   262bc:	3301      	adds	r3, #1
   262be:	b2db      	uxtb	r3, r3
   262c0:	7123      	strb	r3, [r4, #4]
   262c2:	b98b      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   262c4:	78e3      	ldrb	r3, [r4, #3]
   262c6:	3301      	adds	r3, #1
   262c8:	b2db      	uxtb	r3, r3
   262ca:	70e3      	strb	r3, [r4, #3]
   262cc:	b963      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   262ce:	78a3      	ldrb	r3, [r4, #2]
   262d0:	3301      	adds	r3, #1
   262d2:	b2db      	uxtb	r3, r3
   262d4:	70a3      	strb	r3, [r4, #2]
   262d6:	b93b      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   262d8:	7863      	ldrb	r3, [r4, #1]
   262da:	3301      	adds	r3, #1
   262dc:	b2db      	uxtb	r3, r3
   262de:	7063      	strb	r3, [r4, #1]
   262e0:	b913      	cbnz	r3, 262e8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   262e2:	7823      	ldrb	r3, [r4, #0]
   262e4:	3301      	adds	r3, #1
   262e6:	7023      	strb	r3, [r4, #0]
   262e8:	463b      	mov	r3, r7
   262ea:	4622      	mov	r2, r4
   262ec:	2101      	movs	r1, #1
   262ee:	4640      	mov	r0, r8
   262f0:	f000 fb5e 	bl	269b0 <cc_mbedtls_aes_crypt_ecb>
   262f4:	4683      	mov	fp, r0
   262f6:	2800      	cmp	r0, #0
   262f8:	d093      	beq.n	26222 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   262fa:	f8da 3000 	ldr.w	r3, [sl]
   262fe:	4648      	mov	r0, r9
   26300:	4798      	blx	r3
   26302:	2120      	movs	r1, #32
   26304:	4603      	mov	r3, r0
   26306:	a804      	add	r0, sp, #16
   26308:	2b00      	cmp	r3, #0
   2630a:	bf18      	it	ne
   2630c:	469b      	movne	fp, r3
   2630e:	f7ff fb13 	bl	25938 <mbedtls_platform_zeroize>
   26312:	4638      	mov	r0, r7
   26314:	2110      	movs	r1, #16
   26316:	f7ff fb0f 	bl	25938 <mbedtls_platform_zeroize>
   2631a:	4658      	mov	r0, fp
   2631c:	b00d      	add	sp, #52	; 0x34
   2631e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26322:	4642      	mov	r2, r8
   26324:	4639      	mov	r1, r7
   26326:	2300      	movs	r3, #0
   26328:	4620      	mov	r0, r4
   2632a:	f7ff fe7f 	bl	2602c <mbedtls_ctr_drbg_reseed_internal>
   2632e:	f8df a068 	ldr.w	sl, [pc, #104]	; 26398 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   26332:	2800      	cmp	r0, #0
   26334:	f43f af6d 	beq.w	26212 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   26338:	f8da 3000 	ldr.w	r3, [sl]
   2633c:	4648      	mov	r0, r9
   2633e:	4798      	blx	r3
   26340:	4683      	mov	fp, r0
   26342:	2800      	cmp	r0, #0
   26344:	f43f af65 	beq.w	26212 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   26348:	e7e7      	b.n	2631a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   2634a:	a904      	add	r1, sp, #16
   2634c:	4620      	mov	r0, r4
   2634e:	f7ff fdc7 	bl	25ee0 <ctr_drbg_update_internal>
   26352:	4683      	mov	fp, r0
   26354:	2800      	cmp	r0, #0
   26356:	d1d0      	bne.n	262fa <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   26358:	6923      	ldr	r3, [r4, #16]
   2635a:	3301      	adds	r3, #1
   2635c:	6123      	str	r3, [r4, #16]
   2635e:	e7cc      	b.n	262fa <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   26360:	4642      	mov	r2, r8
   26362:	4639      	mov	r1, r7
   26364:	a804      	add	r0, sp, #16
   26366:	f7ff fc7b 	bl	25c60 <block_cipher_df>
   2636a:	4683      	mov	fp, r0
   2636c:	b118      	cbz	r0, 26376 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   2636e:	f8df a028 	ldr.w	sl, [pc, #40]	; 26398 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   26372:	466f      	mov	r7, sp
   26374:	e7c1      	b.n	262fa <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   26376:	a904      	add	r1, sp, #16
   26378:	4620      	mov	r0, r4
   2637a:	f7ff fdb1 	bl	25ee0 <ctr_drbg_update_internal>
   2637e:	4683      	mov	fp, r0
   26380:	2800      	cmp	r0, #0
   26382:	f43f af44 	beq.w	2620e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   26386:	e7f2      	b.n	2636e <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   26388:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   2638c:	e7c5      	b.n	2631a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   2638e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   26392:	e7c2      	b.n	2631a <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   26394:	20000634 	.word	0x20000634
   26398:	20000638 	.word	0x20000638

0002639c <cc_mbedtls_sha256_ret>:
   2639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2639e:	461c      	mov	r4, r3
   263a0:	4605      	mov	r5, r0
   263a2:	4811      	ldr	r0, [pc, #68]	; (263e8 <cc_mbedtls_sha256_ret+0x4c>)
   263a4:	460e      	mov	r6, r1
   263a6:	4617      	mov	r7, r2
   263a8:	f7ff fb4e 	bl	25a48 <cc_mbedtls_sha256_init>
   263ac:	4621      	mov	r1, r4
   263ae:	480e      	ldr	r0, [pc, #56]	; (263e8 <cc_mbedtls_sha256_ret+0x4c>)
   263b0:	f7ff fb64 	bl	25a7c <cc_mbedtls_sha256_starts_ret>
   263b4:	4604      	mov	r4, r0
   263b6:	b120      	cbz	r0, 263c2 <cc_mbedtls_sha256_ret+0x26>
   263b8:	480b      	ldr	r0, [pc, #44]	; (263e8 <cc_mbedtls_sha256_ret+0x4c>)
   263ba:	f7ff fb59 	bl	25a70 <cc_mbedtls_sha256_free>
   263be:	4620      	mov	r0, r4
   263c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   263c2:	4809      	ldr	r0, [pc, #36]	; (263e8 <cc_mbedtls_sha256_ret+0x4c>)
   263c4:	4632      	mov	r2, r6
   263c6:	4629      	mov	r1, r5
   263c8:	f7ff fb6c 	bl	25aa4 <cc_mbedtls_sha256_update_ret>
   263cc:	4604      	mov	r4, r0
   263ce:	2800      	cmp	r0, #0
   263d0:	d1f2      	bne.n	263b8 <cc_mbedtls_sha256_ret+0x1c>
   263d2:	4639      	mov	r1, r7
   263d4:	4804      	ldr	r0, [pc, #16]	; (263e8 <cc_mbedtls_sha256_ret+0x4c>)
   263d6:	f7ff fb6d 	bl	25ab4 <cc_mbedtls_sha256_finish_ret>
   263da:	4604      	mov	r4, r0
   263dc:	4802      	ldr	r0, [pc, #8]	; (263e8 <cc_mbedtls_sha256_ret+0x4c>)
   263de:	f7ff fb47 	bl	25a70 <cc_mbedtls_sha256_free>
   263e2:	4620      	mov	r0, r4
   263e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   263e6:	bf00      	nop
   263e8:	20003c4c 	.word	0x20003c4c

000263ec <RNG_PLAT_SetUserRngParameters>:
   263ec:	b530      	push	{r4, r5, lr}
   263ee:	b083      	sub	sp, #12
   263f0:	231c      	movs	r3, #28
   263f2:	a901      	add	r1, sp, #4
   263f4:	4604      	mov	r4, r0
   263f6:	9301      	str	r3, [sp, #4]
   263f8:	f000 f83c 	bl	26474 <CC_PalTrngParamGet>
   263fc:	4605      	mov	r5, r0
   263fe:	b938      	cbnz	r0, 26410 <RNG_PLAT_SetUserRngParameters+0x24>
   26400:	9b01      	ldr	r3, [sp, #4]
   26402:	2b1c      	cmp	r3, #28
   26404:	d007      	beq.n	26416 <RNG_PLAT_SetUserRngParameters+0x2a>
   26406:	4d15      	ldr	r5, [pc, #84]	; (2645c <RNG_PLAT_SetUserRngParameters+0x70>)
   26408:	4620      	mov	r0, r4
   2640a:	211c      	movs	r1, #28
   2640c:	f000 f82e 	bl	2646c <CC_PalMemSetZeroPlat>
   26410:	4628      	mov	r0, r5
   26412:	b003      	add	sp, #12
   26414:	bd30      	pop	{r4, r5, pc}
   26416:	e9d4 3200 	ldrd	r3, r2, [r4]
   2641a:	2101      	movs	r1, #1
   2641c:	3b00      	subs	r3, #0
   2641e:	bf18      	it	ne
   26420:	2301      	movne	r3, #1
   26422:	61e1      	str	r1, [r4, #28]
   26424:	b10a      	cbz	r2, 2642a <RNG_PLAT_SetUserRngParameters+0x3e>
   26426:	f043 0302 	orr.w	r3, r3, #2
   2642a:	68a2      	ldr	r2, [r4, #8]
   2642c:	b932      	cbnz	r2, 2643c <RNG_PLAT_SetUserRngParameters+0x50>
   2642e:	68e2      	ldr	r2, [r4, #12]
   26430:	b942      	cbnz	r2, 26444 <RNG_PLAT_SetUserRngParameters+0x58>
   26432:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26436:	b97b      	cbnz	r3, 26458 <RNG_PLAT_SetUserRngParameters+0x6c>
   26438:	4d09      	ldr	r5, [pc, #36]	; (26460 <RNG_PLAT_SetUserRngParameters+0x74>)
   2643a:	e7e5      	b.n	26408 <RNG_PLAT_SetUserRngParameters+0x1c>
   2643c:	68e2      	ldr	r2, [r4, #12]
   2643e:	f043 0304 	orr.w	r3, r3, #4
   26442:	b13a      	cbz	r2, 26454 <RNG_PLAT_SetUserRngParameters+0x68>
   26444:	f043 0308 	orr.w	r3, r3, #8
   26448:	2200      	movs	r2, #0
   2644a:	4628      	mov	r0, r5
   2644c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26450:	b003      	add	sp, #12
   26452:	bd30      	pop	{r4, r5, pc}
   26454:	e9c4 3208 	strd	r3, r2, [r4, #32]
   26458:	4615      	mov	r5, r2
   2645a:	e7d9      	b.n	26410 <RNG_PLAT_SetUserRngParameters+0x24>
   2645c:	00f00c37 	.word	0x00f00c37
   26460:	00f00c0e 	.word	0x00f00c0e

00026464 <CC_PalMemCopyPlat>:
   26464:	f003 bae2 	b.w	29a2c <memmove>

00026468 <CC_PalMemSetPlat>:
   26468:	f003 bb02 	b.w	29a70 <memset>

0002646c <CC_PalMemSetZeroPlat>:
   2646c:	460a      	mov	r2, r1
   2646e:	2100      	movs	r1, #0
   26470:	f003 bafe 	b.w	29a70 <memset>

00026474 <CC_PalTrngParamGet>:
   26474:	b118      	cbz	r0, 2647e <CC_PalTrngParamGet+0xa>
   26476:	b111      	cbz	r1, 2647e <CC_PalTrngParamGet+0xa>
   26478:	680b      	ldr	r3, [r1, #0]
   2647a:	2b1c      	cmp	r3, #28
   2647c:	d001      	beq.n	26482 <CC_PalTrngParamGet+0xe>
   2647e:	2001      	movs	r0, #1
   26480:	4770      	bx	lr
   26482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26486:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   2648a:	3201      	adds	r2, #1
   2648c:	bf14      	ite	ne
   2648e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   26492:	f241 225c 	movweq	r2, #4700	; 0x125c
   26496:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2649a:	6002      	str	r2, [r0, #0]
   2649c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   264a0:	3201      	adds	r2, #1
   264a2:	bf14      	ite	ne
   264a4:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   264a8:	f641 1264 	movweq	r2, #6500	; 0x1964
   264ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   264b0:	6042      	str	r2, [r0, #4]
   264b2:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   264b6:	3201      	adds	r2, #1
   264b8:	bf14      	ite	ne
   264ba:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   264be:	f640 62d8 	movweq	r2, #3800	; 0xed8
   264c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   264c6:	6082      	str	r2, [r0, #8]
   264c8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   264cc:	3201      	adds	r2, #1
   264ce:	bf14      	ite	ne
   264d0:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   264d4:	f241 3288 	movweq	r2, #5000	; 0x1388
   264d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   264dc:	60c2      	str	r2, [r0, #12]
   264de:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   264e2:	3201      	adds	r2, #1
   264e4:	bf14      	ite	ne
   264e6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   264ea:	2290      	moveq	r2, #144	; 0x90
   264ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   264f0:	6102      	str	r2, [r0, #16]
   264f2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   264f6:	3201      	adds	r2, #1
   264f8:	bf14      	ite	ne
   264fa:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   264fe:	2251      	moveq	r2, #81	; 0x51
   26500:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26504:	6142      	str	r2, [r0, #20]
   26506:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2650a:	3201      	adds	r2, #1
   2650c:	bf14      	ite	ne
   2650e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   26512:	f240 3337 	movweq	r3, #823	; 0x337
   26516:	6183      	str	r3, [r0, #24]
   26518:	2000      	movs	r0, #0
   2651a:	4770      	bx	lr

0002651c <LLF_RND_WaitRngInterrupt>:
   2651c:	b508      	push	{r3, lr}
   2651e:	4601      	mov	r1, r0
   26520:	f44f 6080 	mov.w	r0, #1024	; 0x400
   26524:	f7fe fe32 	bl	2518c <CC_HalWaitInterruptRND>
   26528:	4902      	ldr	r1, [pc, #8]	; (26534 <LLF_RND_WaitRngInterrupt+0x18>)
   2652a:	4a03      	ldr	r2, [pc, #12]	; (26538 <LLF_RND_WaitRngInterrupt+0x1c>)
   2652c:	2300      	movs	r3, #0
   2652e:	600b      	str	r3, [r1, #0]
   26530:	6013      	str	r3, [r2, #0]
   26532:	bd08      	pop	{r3, pc}
   26534:	5002b1c8 	.word	0x5002b1c8
   26538:	5002b12c 	.word	0x5002b12c

0002653c <LLF_RND_GetRoscSampleCnt>:
   2653c:	3801      	subs	r0, #1
   2653e:	2807      	cmp	r0, #7
   26540:	d805      	bhi.n	2654e <LLF_RND_GetRoscSampleCnt+0x12>
   26542:	e8df f000 	tbb	[pc, r0]
   26546:	0e0a      	.short	0x0e0a
   26548:	04041204 	.word	0x04041204
   2654c:	0604      	.short	0x0604
   2654e:	4809      	ldr	r0, [pc, #36]	; (26574 <LLF_RND_GetRoscSampleCnt+0x38>)
   26550:	4770      	bx	lr
   26552:	68cb      	ldr	r3, [r1, #12]
   26554:	624b      	str	r3, [r1, #36]	; 0x24
   26556:	2000      	movs	r0, #0
   26558:	4770      	bx	lr
   2655a:	680b      	ldr	r3, [r1, #0]
   2655c:	624b      	str	r3, [r1, #36]	; 0x24
   2655e:	2000      	movs	r0, #0
   26560:	4770      	bx	lr
   26562:	684b      	ldr	r3, [r1, #4]
   26564:	624b      	str	r3, [r1, #36]	; 0x24
   26566:	2000      	movs	r0, #0
   26568:	4770      	bx	lr
   2656a:	688b      	ldr	r3, [r1, #8]
   2656c:	624b      	str	r3, [r1, #36]	; 0x24
   2656e:	2000      	movs	r0, #0
   26570:	4770      	bx	lr
   26572:	bf00      	nop
   26574:	00f10c31 	.word	0x00f10c31

00026578 <LLF_RND_GetFastestRosc>:
   26578:	680b      	ldr	r3, [r1, #0]
   2657a:	e002      	b.n	26582 <LLF_RND_GetFastestRosc+0xa>
   2657c:	2b08      	cmp	r3, #8
   2657e:	600b      	str	r3, [r1, #0]
   26580:	d806      	bhi.n	26590 <LLF_RND_GetFastestRosc+0x18>
   26582:	6a02      	ldr	r2, [r0, #32]
   26584:	4213      	tst	r3, r2
   26586:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2658a:	d0f7      	beq.n	2657c <LLF_RND_GetFastestRosc+0x4>
   2658c:	2000      	movs	r0, #0
   2658e:	4770      	bx	lr
   26590:	4800      	ldr	r0, [pc, #0]	; (26594 <LLF_RND_GetFastestRosc+0x1c>)
   26592:	4770      	bx	lr
   26594:	00f10c31 	.word	0x00f10c31

00026598 <LLF_RND_TurnOffTrng>:
   26598:	4904      	ldr	r1, [pc, #16]	; (265ac <LLF_RND_TurnOffTrng+0x14>)
   2659a:	4a05      	ldr	r2, [pc, #20]	; (265b0 <LLF_RND_TurnOffTrng+0x18>)
   2659c:	2300      	movs	r3, #0
   2659e:	600b      	str	r3, [r1, #0]
   265a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   265a4:	6013      	str	r3, [r2, #0]
   265a6:	f7fe bdd7 	b.w	25158 <CC_HalClearInterruptBit>
   265aa:	bf00      	nop
   265ac:	5002b12c 	.word	0x5002b12c
   265b0:	5002b1c4 	.word	0x5002b1c4

000265b4 <SetDataBuffersInfo>:
   265b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   265b6:	b083      	sub	sp, #12
   265b8:	2400      	movs	r4, #0
   265ba:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   265be:	f88d 4007 	strb.w	r4, [sp, #7]
   265c2:	d325      	bcc.n	26610 <SetDataBuffersInfo+0x5c>
   265c4:	460c      	mov	r4, r1
   265c6:	4404      	add	r4, r0
   265c8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   265cc:	4605      	mov	r5, r0
   265ce:	d81f      	bhi.n	26610 <SetDataBuffersInfo+0x5c>
   265d0:	4617      	mov	r7, r2
   265d2:	461e      	mov	r6, r3
   265d4:	2201      	movs	r2, #1
   265d6:	f10d 0307 	add.w	r3, sp, #7
   265da:	f000 fa13 	bl	26a04 <CC_PalDataBufferAttrGet>
   265de:	4604      	mov	r4, r0
   265e0:	b9b0      	cbnz	r0, 26610 <SetDataBuffersInfo+0x5c>
   265e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   265e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   265e8:	603d      	str	r5, [r7, #0]
   265ea:	713b      	strb	r3, [r7, #4]
   265ec:	b192      	cbz	r2, 26614 <SetDataBuffersInfo+0x60>
   265ee:	b14e      	cbz	r6, 26604 <SetDataBuffersInfo+0x50>
   265f0:	4602      	mov	r2, r0
   265f2:	9908      	ldr	r1, [sp, #32]
   265f4:	f10d 0307 	add.w	r3, sp, #7
   265f8:	4630      	mov	r0, r6
   265fa:	f000 fa03 	bl	26a04 <CC_PalDataBufferAttrGet>
   265fe:	b938      	cbnz	r0, 26610 <SetDataBuffersInfo+0x5c>
   26600:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26604:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26606:	4620      	mov	r0, r4
   26608:	6016      	str	r6, [r2, #0]
   2660a:	7113      	strb	r3, [r2, #4]
   2660c:	b003      	add	sp, #12
   2660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26610:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   26614:	4620      	mov	r0, r4
   26616:	b003      	add	sp, #12
   26618:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2661a:	bf00      	nop

0002661c <InitHashDrv>:
   2661c:	b1e8      	cbz	r0, 2665a <InitHashDrv+0x3e>
   2661e:	b510      	push	{r4, lr}
   26620:	6804      	ldr	r4, [r0, #0]
   26622:	2c01      	cmp	r4, #1
   26624:	d004      	beq.n	26630 <InitHashDrv+0x14>
   26626:	2c02      	cmp	r4, #2
   26628:	d010      	beq.n	2664c <InitHashDrv+0x30>
   2662a:	b144      	cbz	r4, 2663e <InitHashDrv+0x22>
   2662c:	480c      	ldr	r0, [pc, #48]	; (26660 <InitHashDrv+0x44>)
   2662e:	bd10      	pop	{r4, pc}
   26630:	490c      	ldr	r1, [pc, #48]	; (26664 <InitHashDrv+0x48>)
   26632:	2220      	movs	r2, #32
   26634:	3008      	adds	r0, #8
   26636:	f7ff ff15 	bl	26464 <CC_PalMemCopyPlat>
   2663a:	2000      	movs	r0, #0
   2663c:	bd10      	pop	{r4, pc}
   2663e:	490a      	ldr	r1, [pc, #40]	; (26668 <InitHashDrv+0x4c>)
   26640:	2214      	movs	r2, #20
   26642:	3008      	adds	r0, #8
   26644:	f7ff ff0e 	bl	26464 <CC_PalMemCopyPlat>
   26648:	4620      	mov	r0, r4
   2664a:	bd10      	pop	{r4, pc}
   2664c:	4907      	ldr	r1, [pc, #28]	; (2666c <InitHashDrv+0x50>)
   2664e:	2220      	movs	r2, #32
   26650:	3008      	adds	r0, #8
   26652:	f7ff ff07 	bl	26464 <CC_PalMemCopyPlat>
   26656:	2000      	movs	r0, #0
   26658:	bd10      	pop	{r4, pc}
   2665a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2665e:	4770      	bx	lr
   26660:	00f30001 	.word	0x00f30001
   26664:	0002d8a8 	.word	0x0002d8a8
   26668:	0002d874 	.word	0x0002d874
   2666c:	0002d888 	.word	0x0002d888

00026670 <ProcessHashDrv>:
   26670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26674:	2900      	cmp	r1, #0
   26676:	f000 80ef 	beq.w	26858 <ProcessHashDrv+0x1e8>
   2667a:	4604      	mov	r4, r0
   2667c:	2800      	cmp	r0, #0
   2667e:	f000 80ef 	beq.w	26860 <ProcessHashDrv+0x1f0>
   26682:	6803      	ldr	r3, [r0, #0]
   26684:	4617      	mov	r7, r2
   26686:	460e      	mov	r6, r1
   26688:	2b00      	cmp	r3, #0
   2668a:	f000 80b9 	beq.w	26800 <ProcessHashDrv+0x190>
   2668e:	3b01      	subs	r3, #1
   26690:	2b01      	cmp	r3, #1
   26692:	f200 80cd 	bhi.w	26830 <ProcessHashDrv+0x1c0>
   26696:	4874      	ldr	r0, [pc, #464]	; (26868 <ProcessHashDrv+0x1f8>)
   26698:	f04f 31ff 	mov.w	r1, #4294967295
   2669c:	f04f 0802 	mov.w	r8, #2
   266a0:	f7fe fe02 	bl	252a8 <CC_PalMutexLock>
   266a4:	2800      	cmp	r0, #0
   266a6:	f040 80b5 	bne.w	26814 <ProcessHashDrv+0x1a4>
   266aa:	2000      	movs	r0, #0
   266ac:	f7fe fe2c 	bl	25308 <CC_PalPowerSaveModeSelect>
   266b0:	4605      	mov	r5, r0
   266b2:	2800      	cmp	r0, #0
   266b4:	f040 80b8 	bne.w	26828 <ProcessHashDrv+0x1b8>
   266b8:	4a6c      	ldr	r2, [pc, #432]	; (2686c <ProcessHashDrv+0x1fc>)
   266ba:	6813      	ldr	r3, [r2, #0]
   266bc:	2b00      	cmp	r3, #0
   266be:	d1fc      	bne.n	266ba <ProcessHashDrv+0x4a>
   266c0:	486b      	ldr	r0, [pc, #428]	; (26870 <ProcessHashDrv+0x200>)
   266c2:	6803      	ldr	r3, [r0, #0]
   266c4:	2b00      	cmp	r3, #0
   266c6:	d1fc      	bne.n	266c2 <ProcessHashDrv+0x52>
   266c8:	f04f 30ff 	mov.w	r0, #4294967295
   266cc:	f7fe fd44 	bl	25158 <CC_HalClearInterruptBit>
   266d0:	4b68      	ldr	r3, [pc, #416]	; (26874 <ProcessHashDrv+0x204>)
   266d2:	6818      	ldr	r0, [r3, #0]
   266d4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   266d8:	f7fe fd4c 	bl	25174 <CC_HalMaskInterrupt>
   266dc:	4866      	ldr	r0, [pc, #408]	; (26878 <ProcessHashDrv+0x208>)
   266de:	4a67      	ldr	r2, [pc, #412]	; (2687c <ProcessHashDrv+0x20c>)
   266e0:	4967      	ldr	r1, [pc, #412]	; (26880 <ProcessHashDrv+0x210>)
   266e2:	2301      	movs	r3, #1
   266e4:	6003      	str	r3, [r0, #0]
   266e6:	2007      	movs	r0, #7
   266e8:	6010      	str	r0, [r2, #0]
   266ea:	600b      	str	r3, [r1, #0]
   266ec:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   266f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   266f2:	6013      	str	r3, [r2, #0]
   266f4:	4b63      	ldr	r3, [pc, #396]	; (26884 <ProcessHashDrv+0x214>)
   266f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   266f8:	6051      	str	r1, [r2, #4]
   266fa:	f8c3 8000 	str.w	r8, [r3]
   266fe:	6823      	ldr	r3, [r4, #0]
   26700:	b15b      	cbz	r3, 2671a <ProcessHashDrv+0xaa>
   26702:	3b01      	subs	r3, #1
   26704:	2b01      	cmp	r3, #1
   26706:	d817      	bhi.n	26738 <ProcessHashDrv+0xc8>
   26708:	4b5f      	ldr	r3, [pc, #380]	; (26888 <ProcessHashDrv+0x218>)
   2670a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2670c:	601a      	str	r2, [r3, #0]
   2670e:	6a22      	ldr	r2, [r4, #32]
   26710:	f843 2c04 	str.w	r2, [r3, #-4]
   26714:	69e2      	ldr	r2, [r4, #28]
   26716:	f843 2c08 	str.w	r2, [r3, #-8]
   2671a:	4b5c      	ldr	r3, [pc, #368]	; (2688c <ProcessHashDrv+0x21c>)
   2671c:	69a2      	ldr	r2, [r4, #24]
   2671e:	601a      	str	r2, [r3, #0]
   26720:	6962      	ldr	r2, [r4, #20]
   26722:	f843 2c04 	str.w	r2, [r3, #-4]
   26726:	6922      	ldr	r2, [r4, #16]
   26728:	f843 2c08 	str.w	r2, [r3, #-8]
   2672c:	68e2      	ldr	r2, [r4, #12]
   2672e:	f843 2c0c 	str.w	r2, [r3, #-12]
   26732:	68a2      	ldr	r2, [r4, #8]
   26734:	f843 2c10 	str.w	r2, [r3, #-16]
   26738:	4a55      	ldr	r2, [pc, #340]	; (26890 <ProcessHashDrv+0x220>)
   2673a:	6813      	ldr	r3, [r2, #0]
   2673c:	2b00      	cmp	r3, #0
   2673e:	d1fc      	bne.n	2673a <ProcessHashDrv+0xca>
   26740:	2f00      	cmp	r7, #0
   26742:	d059      	beq.n	267f8 <ProcessHashDrv+0x188>
   26744:	6863      	ldr	r3, [r4, #4]
   26746:	2b01      	cmp	r3, #1
   26748:	bf04      	itt	eq
   2674a:	4a52      	ldreq	r2, [pc, #328]	; (26894 <ProcessHashDrv+0x224>)
   2674c:	6013      	streq	r3, [r2, #0]
   2674e:	4a52      	ldr	r2, [pc, #328]	; (26898 <ProcessHashDrv+0x228>)
   26750:	4b52      	ldr	r3, [pc, #328]	; (2689c <ProcessHashDrv+0x22c>)
   26752:	6831      	ldr	r1, [r6, #0]
   26754:	6011      	str	r1, [r2, #0]
   26756:	2040      	movs	r0, #64	; 0x40
   26758:	601f      	str	r7, [r3, #0]
   2675a:	f7fe fd11 	bl	25180 <CC_HalWaitInterrupt>
   2675e:	4605      	mov	r5, r0
   26760:	4a4b      	ldr	r2, [pc, #300]	; (26890 <ProcessHashDrv+0x220>)
   26762:	6813      	ldr	r3, [r2, #0]
   26764:	2b00      	cmp	r3, #0
   26766:	d1fc      	bne.n	26762 <ProcessHashDrv+0xf2>
   26768:	4a41      	ldr	r2, [pc, #260]	; (26870 <ProcessHashDrv+0x200>)
   2676a:	6813      	ldr	r3, [r2, #0]
   2676c:	2b00      	cmp	r3, #0
   2676e:	d1fc      	bne.n	2676a <ProcessHashDrv+0xfa>
   26770:	6823      	ldr	r3, [r4, #0]
   26772:	b15b      	cbz	r3, 2678c <ProcessHashDrv+0x11c>
   26774:	3b01      	subs	r3, #1
   26776:	2b01      	cmp	r3, #1
   26778:	d817      	bhi.n	267aa <ProcessHashDrv+0x13a>
   2677a:	4a43      	ldr	r2, [pc, #268]	; (26888 <ProcessHashDrv+0x218>)
   2677c:	4b48      	ldr	r3, [pc, #288]	; (268a0 <ProcessHashDrv+0x230>)
   2677e:	6812      	ldr	r2, [r2, #0]
   26780:	6262      	str	r2, [r4, #36]	; 0x24
   26782:	681a      	ldr	r2, [r3, #0]
   26784:	6222      	str	r2, [r4, #32]
   26786:	3b04      	subs	r3, #4
   26788:	681b      	ldr	r3, [r3, #0]
   2678a:	61e3      	str	r3, [r4, #28]
   2678c:	4a3f      	ldr	r2, [pc, #252]	; (2688c <ProcessHashDrv+0x21c>)
   2678e:	4b45      	ldr	r3, [pc, #276]	; (268a4 <ProcessHashDrv+0x234>)
   26790:	6812      	ldr	r2, [r2, #0]
   26792:	61a2      	str	r2, [r4, #24]
   26794:	681a      	ldr	r2, [r3, #0]
   26796:	6162      	str	r2, [r4, #20]
   26798:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2679c:	6122      	str	r2, [r4, #16]
   2679e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   267a2:	60e2      	str	r2, [r4, #12]
   267a4:	3b0c      	subs	r3, #12
   267a6:	681b      	ldr	r3, [r3, #0]
   267a8:	60a3      	str	r3, [r4, #8]
   267aa:	4b3f      	ldr	r3, [pc, #252]	; (268a8 <ProcessHashDrv+0x238>)
   267ac:	4a3f      	ldr	r2, [pc, #252]	; (268ac <ProcessHashDrv+0x23c>)
   267ae:	681b      	ldr	r3, [r3, #0]
   267b0:	64a3      	str	r3, [r4, #72]	; 0x48
   267b2:	6812      	ldr	r2, [r2, #0]
   267b4:	4b32      	ldr	r3, [pc, #200]	; (26880 <ProcessHashDrv+0x210>)
   267b6:	64e2      	str	r2, [r4, #76]	; 0x4c
   267b8:	4836      	ldr	r0, [pc, #216]	; (26894 <ProcessHashDrv+0x224>)
   267ba:	493d      	ldr	r1, [pc, #244]	; (268b0 <ProcessHashDrv+0x240>)
   267bc:	2201      	movs	r2, #1
   267be:	601a      	str	r2, [r3, #0]
   267c0:	2300      	movs	r3, #0
   267c2:	4a33      	ldr	r2, [pc, #204]	; (26890 <ProcessHashDrv+0x220>)
   267c4:	6003      	str	r3, [r0, #0]
   267c6:	600b      	str	r3, [r1, #0]
   267c8:	6813      	ldr	r3, [r2, #0]
   267ca:	2b00      	cmp	r3, #0
   267cc:	d1fc      	bne.n	267c8 <ProcessHashDrv+0x158>
   267ce:	4a2a      	ldr	r2, [pc, #168]	; (26878 <ProcessHashDrv+0x208>)
   267d0:	6013      	str	r3, [r2, #0]
   267d2:	2d00      	cmp	r5, #0
   267d4:	d13a      	bne.n	2684c <ProcessHashDrv+0x1dc>
   267d6:	4b27      	ldr	r3, [pc, #156]	; (26874 <ProcessHashDrv+0x204>)
   267d8:	6818      	ldr	r0, [r3, #0]
   267da:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   267de:	f7fe fcc9 	bl	25174 <CC_HalMaskInterrupt>
   267e2:	2001      	movs	r0, #1
   267e4:	f7fe fd90 	bl	25308 <CC_PalPowerSaveModeSelect>
   267e8:	bb60      	cbnz	r0, 26844 <ProcessHashDrv+0x1d4>
   267ea:	481f      	ldr	r0, [pc, #124]	; (26868 <ProcessHashDrv+0x1f8>)
   267ec:	f7fe fd64 	bl	252b8 <CC_PalMutexUnlock>
   267f0:	bb10      	cbnz	r0, 26838 <ProcessHashDrv+0x1c8>
   267f2:	4628      	mov	r0, r5
   267f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   267f8:	4b2d      	ldr	r3, [pc, #180]	; (268b0 <ProcessHashDrv+0x240>)
   267fa:	2204      	movs	r2, #4
   267fc:	601a      	str	r2, [r3, #0]
   267fe:	e7af      	b.n	26760 <ProcessHashDrv+0xf0>
   26800:	4819      	ldr	r0, [pc, #100]	; (26868 <ProcessHashDrv+0x1f8>)
   26802:	f04f 31ff 	mov.w	r1, #4294967295
   26806:	f04f 0801 	mov.w	r8, #1
   2680a:	f7fe fd4d 	bl	252a8 <CC_PalMutexLock>
   2680e:	2800      	cmp	r0, #0
   26810:	f43f af4b 	beq.w	266aa <ProcessHashDrv+0x3a>
   26814:	4827      	ldr	r0, [pc, #156]	; (268b4 <ProcessHashDrv+0x244>)
   26816:	f7fe f9b1 	bl	24b7c <CC_PalAbort>
   2681a:	2000      	movs	r0, #0
   2681c:	f7fe fd74 	bl	25308 <CC_PalPowerSaveModeSelect>
   26820:	4605      	mov	r5, r0
   26822:	2800      	cmp	r0, #0
   26824:	f43f af48 	beq.w	266b8 <ProcessHashDrv+0x48>
   26828:	4823      	ldr	r0, [pc, #140]	; (268b8 <ProcessHashDrv+0x248>)
   2682a:	f7fe f9a7 	bl	24b7c <CC_PalAbort>
   2682e:	e743      	b.n	266b8 <ProcessHashDrv+0x48>
   26830:	4d22      	ldr	r5, [pc, #136]	; (268bc <ProcessHashDrv+0x24c>)
   26832:	4628      	mov	r0, r5
   26834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26838:	4821      	ldr	r0, [pc, #132]	; (268c0 <ProcessHashDrv+0x250>)
   2683a:	f7fe f99f 	bl	24b7c <CC_PalAbort>
   2683e:	4628      	mov	r0, r5
   26840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26844:	481f      	ldr	r0, [pc, #124]	; (268c4 <ProcessHashDrv+0x254>)
   26846:	f7fe f999 	bl	24b7c <CC_PalAbort>
   2684a:	e7ce      	b.n	267ea <ProcessHashDrv+0x17a>
   2684c:	f104 0008 	add.w	r0, r4, #8
   26850:	2110      	movs	r1, #16
   26852:	f7ff fe0b 	bl	2646c <CC_PalMemSetZeroPlat>
   26856:	e7be      	b.n	267d6 <ProcessHashDrv+0x166>
   26858:	4d1b      	ldr	r5, [pc, #108]	; (268c8 <ProcessHashDrv+0x258>)
   2685a:	4628      	mov	r0, r5
   2685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26860:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   26864:	e7c5      	b.n	267f2 <ProcessHashDrv+0x182>
   26866:	bf00      	nop
   26868:	20000628 	.word	0x20000628
   2686c:	5002b91c 	.word	0x5002b91c
   26870:	5002bc20 	.word	0x5002bc20
   26874:	5002ba04 	.word	0x5002ba04
   26878:	5002b818 	.word	0x5002b818
   2687c:	5002b900 	.word	0x5002b900
   26880:	5002b7c4 	.word	0x5002b7c4
   26884:	5002b7c0 	.word	0x5002b7c0
   26888:	5002b65c 	.word	0x5002b65c
   2688c:	5002b650 	.word	0x5002b650
   26890:	5002b910 	.word	0x5002b910
   26894:	5002b684 	.word	0x5002b684
   26898:	5002bc28 	.word	0x5002bc28
   2689c:	5002bc2c 	.word	0x5002bc2c
   268a0:	5002b658 	.word	0x5002b658
   268a4:	5002b64c 	.word	0x5002b64c
   268a8:	5002b7cc 	.word	0x5002b7cc
   268ac:	5002b7d0 	.word	0x5002b7d0
   268b0:	5002b7c8 	.word	0x5002b7c8
   268b4:	0002d7bc 	.word	0x0002d7bc
   268b8:	0002d7d4 	.word	0x0002d7d4
   268bc:	00f30001 	.word	0x00f30001
   268c0:	0002d814 	.word	0x0002d814
   268c4:	0002d7f4 	.word	0x0002d7f4
   268c8:	00f30003 	.word	0x00f30003

000268cc <FinishHashDrv>:
   268cc:	2800      	cmp	r0, #0
   268ce:	d03b      	beq.n	26948 <FinishHashDrv+0x7c>
   268d0:	b4f0      	push	{r4, r5, r6, r7}
   268d2:	b082      	sub	sp, #8
   268d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   268d6:	9301      	str	r3, [sp, #4]
   268d8:	6883      	ldr	r3, [r0, #8]
   268da:	fa93 fc83 	rev.w	ip, r3
   268de:	9b01      	ldr	r3, [sp, #4]
   268e0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   268e4:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   268e8:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   268ec:	ba1b      	rev	r3, r3
   268ee:	6243      	str	r3, [r0, #36]	; 0x24
   268f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   268f2:	9301      	str	r3, [sp, #4]
   268f4:	ba09      	rev	r1, r1
   268f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   268f8:	61c1      	str	r1, [r0, #28]
   268fa:	ba12      	rev	r2, r2
   268fc:	6202      	str	r2, [r0, #32]
   268fe:	ba3f      	rev	r7, r7
   26900:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   26904:	ba36      	rev	r6, r6
   26906:	ba2d      	rev	r5, r5
   26908:	ba24      	rev	r4, r4
   2690a:	e9c0 c702 	strd	ip, r7, [r0, #8]
   2690e:	e9c0 6504 	strd	r6, r5, [r0, #16]
   26912:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   26914:	6b06      	ldr	r6, [r0, #48]	; 0x30
   26916:	6b45      	ldr	r5, [r0, #52]	; 0x34
   26918:	6184      	str	r4, [r0, #24]
   2691a:	fa93 fc83 	rev.w	ip, r3
   2691e:	6b84      	ldr	r4, [r0, #56]	; 0x38
   26920:	9b01      	ldr	r3, [sp, #4]
   26922:	ba3f      	rev	r7, r7
   26924:	ba36      	rev	r6, r6
   26926:	ba2d      	rev	r5, r5
   26928:	ba24      	rev	r4, r4
   2692a:	ba09      	rev	r1, r1
   2692c:	ba12      	rev	r2, r2
   2692e:	ba1b      	rev	r3, r3
   26930:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   26934:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   26938:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2693c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   26940:	2000      	movs	r0, #0
   26942:	b002      	add	sp, #8
   26944:	bcf0      	pop	{r4, r5, r6, r7}
   26946:	4770      	bx	lr
   26948:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2694c:	4770      	bx	lr
   2694e:	bf00      	nop

00026950 <cc_mbedtls_aes_init>:
   26950:	b510      	push	{r4, lr}
   26952:	4604      	mov	r4, r0
   26954:	b130      	cbz	r0, 26964 <cc_mbedtls_aes_init+0x14>
   26956:	2200      	movs	r2, #0
   26958:	2301      	movs	r3, #1
   2695a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2695e:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   26962:	bd10      	pop	{r4, pc}
   26964:	4801      	ldr	r0, [pc, #4]	; (2696c <cc_mbedtls_aes_init+0x1c>)
   26966:	f7fe f909 	bl	24b7c <CC_PalAbort>
   2696a:	e7f4      	b.n	26956 <cc_mbedtls_aes_init+0x6>
   2696c:	0002d8c8 	.word	0x0002d8c8

00026970 <cc_mbedtls_aes_free>:
   26970:	b118      	cbz	r0, 2697a <cc_mbedtls_aes_free+0xa>
   26972:	2274      	movs	r2, #116	; 0x74
   26974:	2100      	movs	r1, #0
   26976:	f7ff bd77 	b.w	26468 <CC_PalMemSetPlat>
   2697a:	4770      	bx	lr

0002697c <cc_mbedtls_aes_setkey_enc>:
   2697c:	b190      	cbz	r0, 269a4 <cc_mbedtls_aes_setkey_enc+0x28>
   2697e:	b1a1      	cbz	r1, 269aa <cc_mbedtls_aes_setkey_enc+0x2e>
   26980:	b510      	push	{r4, lr}
   26982:	2a80      	cmp	r2, #128	; 0x80
   26984:	f04f 0400 	mov.w	r4, #0
   26988:	6384      	str	r4, [r0, #56]	; 0x38
   2698a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   2698e:	d106      	bne.n	2699e <cc_mbedtls_aes_setkey_enc+0x22>
   26990:	6304      	str	r4, [r0, #48]	; 0x30
   26992:	2210      	movs	r2, #16
   26994:	3010      	adds	r0, #16
   26996:	f7ff fd65 	bl	26464 <CC_PalMemCopyPlat>
   2699a:	4620      	mov	r0, r4
   2699c:	bd10      	pop	{r4, pc}
   2699e:	f06f 001f 	mvn.w	r0, #31
   269a2:	bd10      	pop	{r4, pc}
   269a4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   269a8:	4770      	bx	lr
   269aa:	f06f 001f 	mvn.w	r0, #31
   269ae:	4770      	bx	lr

000269b0 <cc_mbedtls_aes_crypt_ecb>:
   269b0:	b320      	cbz	r0, 269fc <cc_mbedtls_aes_crypt_ecb+0x4c>
   269b2:	b31a      	cbz	r2, 269fc <cc_mbedtls_aes_crypt_ecb+0x4c>
   269b4:	b313      	cbz	r3, 269fc <cc_mbedtls_aes_crypt_ecb+0x4c>
   269b6:	2901      	cmp	r1, #1
   269b8:	d820      	bhi.n	269fc <cc_mbedtls_aes_crypt_ecb+0x4c>
   269ba:	b570      	push	{r4, r5, r6, lr}
   269bc:	4604      	mov	r4, r0
   269be:	6b81      	ldr	r1, [r0, #56]	; 0x38
   269c0:	b086      	sub	sp, #24
   269c2:	d016      	beq.n	269f2 <cc_mbedtls_aes_crypt_ecb+0x42>
   269c4:	2901      	cmp	r1, #1
   269c6:	d116      	bne.n	269f6 <cc_mbedtls_aes_crypt_ecb+0x46>
   269c8:	2100      	movs	r1, #0
   269ca:	2510      	movs	r5, #16
   269cc:	ae04      	add	r6, sp, #16
   269ce:	6361      	str	r1, [r4, #52]	; 0x34
   269d0:	4610      	mov	r0, r2
   269d2:	e9cd 5600 	strd	r5, r6, [sp]
   269d6:	aa02      	add	r2, sp, #8
   269d8:	4629      	mov	r1, r5
   269da:	f7ff fdeb 	bl	265b4 <SetDataBuffersInfo>
   269de:	b950      	cbnz	r0, 269f6 <cc_mbedtls_aes_crypt_ecb+0x46>
   269e0:	462b      	mov	r3, r5
   269e2:	4632      	mov	r2, r6
   269e4:	a902      	add	r1, sp, #8
   269e6:	4620      	mov	r0, r4
   269e8:	f000 f8d6 	bl	26b98 <ProcessAesDrv>
   269ec:	b918      	cbnz	r0, 269f6 <cc_mbedtls_aes_crypt_ecb+0x46>
   269ee:	b006      	add	sp, #24
   269f0:	bd70      	pop	{r4, r5, r6, pc}
   269f2:	2900      	cmp	r1, #0
   269f4:	d0e8      	beq.n	269c8 <cc_mbedtls_aes_crypt_ecb+0x18>
   269f6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   269fa:	e7f8      	b.n	269ee <cc_mbedtls_aes_crypt_ecb+0x3e>
   269fc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   26a00:	4770      	bx	lr
   26a02:	bf00      	nop

00026a04 <CC_PalDataBufferAttrGet>:
   26a04:	2000      	movs	r0, #0
   26a06:	7018      	strb	r0, [r3, #0]
   26a08:	4770      	bx	lr
   26a0a:	bf00      	nop

00026a0c <LoadAesKey>:
   26a0c:	2800      	cmp	r0, #0
   26a0e:	d03b      	beq.n	26a88 <LoadAesKey+0x7c>
   26a10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   26a14:	2b00      	cmp	r3, #0
   26a16:	d02c      	beq.n	26a72 <LoadAesKey+0x66>
   26a18:	2b03      	cmp	r3, #3
   26a1a:	b510      	push	{r4, lr}
   26a1c:	d00f      	beq.n	26a3e <LoadAesKey+0x32>
   26a1e:	481c      	ldr	r0, [pc, #112]	; (26a90 <LoadAesKey+0x84>)
   26a20:	4c1c      	ldr	r4, [pc, #112]	; (26a94 <LoadAesKey+0x88>)
   26a22:	6822      	ldr	r2, [r4, #0]
   26a24:	4b1c      	ldr	r3, [pc, #112]	; (26a98 <LoadAesKey+0x8c>)
   26a26:	6812      	ldr	r2, [r2, #0]
   26a28:	601a      	str	r2, [r3, #0]
   26a2a:	6822      	ldr	r2, [r4, #0]
   26a2c:	6852      	ldr	r2, [r2, #4]
   26a2e:	605a      	str	r2, [r3, #4]
   26a30:	6822      	ldr	r2, [r4, #0]
   26a32:	6892      	ldr	r2, [r2, #8]
   26a34:	609a      	str	r2, [r3, #8]
   26a36:	6822      	ldr	r2, [r4, #0]
   26a38:	68d2      	ldr	r2, [r2, #12]
   26a3a:	60da      	str	r2, [r3, #12]
   26a3c:	bd10      	pop	{r4, pc}
   26a3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   26a40:	6c00      	ldr	r0, [r0, #64]	; 0x40
   26a42:	4c14      	ldr	r4, [pc, #80]	; (26a94 <LoadAesKey+0x88>)
   26a44:	f000 fba4 	bl	27190 <kmu_validate_kdr_slot_and_size>
   26a48:	2800      	cmp	r0, #0
   26a4a:	d1ea      	bne.n	26a22 <LoadAesKey+0x16>
   26a4c:	6821      	ldr	r1, [r4, #0]
   26a4e:	4a12      	ldr	r2, [pc, #72]	; (26a98 <LoadAesKey+0x8c>)
   26a50:	6809      	ldr	r1, [r1, #0]
   26a52:	6011      	str	r1, [r2, #0]
   26a54:	6821      	ldr	r1, [r4, #0]
   26a56:	4b11      	ldr	r3, [pc, #68]	; (26a9c <LoadAesKey+0x90>)
   26a58:	6849      	ldr	r1, [r1, #4]
   26a5a:	6019      	str	r1, [r3, #0]
   26a5c:	6821      	ldr	r1, [r4, #0]
   26a5e:	6889      	ldr	r1, [r1, #8]
   26a60:	6091      	str	r1, [r2, #8]
   26a62:	6822      	ldr	r2, [r4, #0]
   26a64:	68d2      	ldr	r2, [r2, #12]
   26a66:	609a      	str	r2, [r3, #8]
   26a68:	f000 fb9e 	bl	271a8 <kmu_use_kdr_key>
   26a6c:	2800      	cmp	r0, #0
   26a6e:	d1d8      	bne.n	26a22 <LoadAesKey+0x16>
   26a70:	bd10      	pop	{r4, pc}
   26a72:	4a09      	ldr	r2, [pc, #36]	; (26a98 <LoadAesKey+0x8c>)
   26a74:	6901      	ldr	r1, [r0, #16]
   26a76:	6011      	str	r1, [r2, #0]
   26a78:	6941      	ldr	r1, [r0, #20]
   26a7a:	6051      	str	r1, [r2, #4]
   26a7c:	6981      	ldr	r1, [r0, #24]
   26a7e:	6091      	str	r1, [r2, #8]
   26a80:	69c1      	ldr	r1, [r0, #28]
   26a82:	60d1      	str	r1, [r2, #12]
   26a84:	4618      	mov	r0, r3
   26a86:	4770      	bx	lr
   26a88:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   26a8c:	4770      	bx	lr
   26a8e:	bf00      	nop
   26a90:	00f10009 	.word	0x00f10009
   26a94:	20000618 	.word	0x20000618
   26a98:	5002b400 	.word	0x5002b400
   26a9c:	5002b404 	.word	0x5002b404

00026aa0 <InitAes.part.0>:
   26aa0:	4a32      	ldr	r2, [pc, #200]	; (26b6c <InitAes.part.0+0xcc>)
   26aa2:	b510      	push	{r4, lr}
   26aa4:	4604      	mov	r4, r0
   26aa6:	6813      	ldr	r3, [r2, #0]
   26aa8:	2b00      	cmp	r3, #0
   26aaa:	d1fc      	bne.n	26aa6 <InitAes.part.0+0x6>
   26aac:	4a30      	ldr	r2, [pc, #192]	; (26b70 <InitAes.part.0+0xd0>)
   26aae:	6813      	ldr	r3, [r2, #0]
   26ab0:	2b00      	cmp	r3, #0
   26ab2:	d1fc      	bne.n	26aae <InitAes.part.0+0xe>
   26ab4:	4a2f      	ldr	r2, [pc, #188]	; (26b74 <InitAes.part.0+0xd4>)
   26ab6:	6813      	ldr	r3, [r2, #0]
   26ab8:	2b00      	cmp	r3, #0
   26aba:	d1fc      	bne.n	26ab6 <InitAes.part.0+0x16>
   26abc:	4a2e      	ldr	r2, [pc, #184]	; (26b78 <InitAes.part.0+0xd8>)
   26abe:	6813      	ldr	r3, [r2, #0]
   26ac0:	2b00      	cmp	r3, #0
   26ac2:	d1fc      	bne.n	26abe <InitAes.part.0+0x1e>
   26ac4:	4a2d      	ldr	r2, [pc, #180]	; (26b7c <InitAes.part.0+0xdc>)
   26ac6:	6813      	ldr	r3, [r2, #0]
   26ac8:	2b00      	cmp	r3, #0
   26aca:	d1fc      	bne.n	26ac6 <InitAes.part.0+0x26>
   26acc:	4a2c      	ldr	r2, [pc, #176]	; (26b80 <InitAes.part.0+0xe0>)
   26ace:	6813      	ldr	r3, [r2, #0]
   26ad0:	2b00      	cmp	r3, #0
   26ad2:	d1fc      	bne.n	26ace <InitAes.part.0+0x2e>
   26ad4:	f04f 30ff 	mov.w	r0, #4294967295
   26ad8:	f7fe fb3e 	bl	25158 <CC_HalClearInterruptBit>
   26adc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26ade:	f023 0304 	bic.w	r3, r3, #4
   26ae2:	2b03      	cmp	r3, #3
   26ae4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26ae6:	d036      	beq.n	26b56 <InitAes.part.0+0xb6>
   26ae8:	2b01      	cmp	r3, #1
   26aea:	4b26      	ldr	r3, [pc, #152]	; (26b84 <InitAes.part.0+0xe4>)
   26aec:	6818      	ldr	r0, [r3, #0]
   26aee:	bf0c      	ite	eq
   26af0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   26af4:	f020 0020 	bicne.w	r0, r0, #32
   26af8:	f7fe fb3c 	bl	25174 <CC_HalMaskInterrupt>
   26afc:	4b22      	ldr	r3, [pc, #136]	; (26b88 <InitAes.part.0+0xe8>)
   26afe:	4a1b      	ldr	r2, [pc, #108]	; (26b6c <InitAes.part.0+0xcc>)
   26b00:	2101      	movs	r1, #1
   26b02:	6019      	str	r1, [r3, #0]
   26b04:	6813      	ldr	r3, [r2, #0]
   26b06:	2b00      	cmp	r3, #0
   26b08:	d1fc      	bne.n	26b04 <InitAes.part.0+0x64>
   26b0a:	4a19      	ldr	r2, [pc, #100]	; (26b70 <InitAes.part.0+0xd0>)
   26b0c:	6813      	ldr	r3, [r2, #0]
   26b0e:	2b00      	cmp	r3, #0
   26b10:	d1fc      	bne.n	26b0c <InitAes.part.0+0x6c>
   26b12:	491e      	ldr	r1, [pc, #120]	; (26b8c <InitAes.part.0+0xec>)
   26b14:	4a15      	ldr	r2, [pc, #84]	; (26b6c <InitAes.part.0+0xcc>)
   26b16:	600b      	str	r3, [r1, #0]
   26b18:	6813      	ldr	r3, [r2, #0]
   26b1a:	2b00      	cmp	r3, #0
   26b1c:	d1fc      	bne.n	26b18 <InitAes.part.0+0x78>
   26b1e:	4a14      	ldr	r2, [pc, #80]	; (26b70 <InitAes.part.0+0xd0>)
   26b20:	6813      	ldr	r3, [r2, #0]
   26b22:	2b00      	cmp	r3, #0
   26b24:	d1fc      	bne.n	26b20 <InitAes.part.0+0x80>
   26b26:	6b62      	ldr	r2, [r4, #52]	; 0x34
   26b28:	f022 0104 	bic.w	r1, r2, #4
   26b2c:	2903      	cmp	r1, #3
   26b2e:	bf18      	it	ne
   26b30:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   26b32:	4917      	ldr	r1, [pc, #92]	; (26b90 <InitAes.part.0+0xf0>)
   26b34:	ea4f 0282 	mov.w	r2, r2, lsl #2
   26b38:	bf18      	it	ne
   26b3a:	f003 0301 	andne.w	r3, r3, #1
   26b3e:	f002 021c 	and.w	r2, r2, #28
   26b42:	4313      	orrs	r3, r2
   26b44:	600b      	str	r3, [r1, #0]
   26b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26b48:	2b07      	cmp	r3, #7
   26b4a:	d102      	bne.n	26b52 <InitAes.part.0+0xb2>
   26b4c:	4b11      	ldr	r3, [pc, #68]	; (26b94 <InitAes.part.0+0xf4>)
   26b4e:	2201      	movs	r2, #1
   26b50:	601a      	str	r2, [r3, #0]
   26b52:	2000      	movs	r0, #0
   26b54:	bd10      	pop	{r4, pc}
   26b56:	2b01      	cmp	r3, #1
   26b58:	4b0a      	ldr	r3, [pc, #40]	; (26b84 <InitAes.part.0+0xe4>)
   26b5a:	6818      	ldr	r0, [r3, #0]
   26b5c:	bf0c      	ite	eq
   26b5e:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   26b62:	f020 0010 	bicne.w	r0, r0, #16
   26b66:	f7fe fb05 	bl	25174 <CC_HalMaskInterrupt>
   26b6a:	e7c7      	b.n	26afc <InitAes.part.0+0x5c>
   26b6c:	5002b910 	.word	0x5002b910
   26b70:	5002b470 	.word	0x5002b470
   26b74:	5002bd20 	.word	0x5002bd20
   26b78:	5002bc20 	.word	0x5002bc20
   26b7c:	5002bd38 	.word	0x5002bd38
   26b80:	5002bc38 	.word	0x5002bc38
   26b84:	5002ba04 	.word	0x5002ba04
   26b88:	5002b900 	.word	0x5002b900
   26b8c:	5002b4bc 	.word	0x5002b4bc
   26b90:	5002b4c0 	.word	0x5002b4c0
   26b94:	5002b47c 	.word	0x5002b47c

00026b98 <ProcessAesDrv>:
   26b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b9c:	b087      	sub	sp, #28
   26b9e:	2900      	cmp	r1, #0
   26ba0:	f000 80a5 	beq.w	26cee <ProcessAesDrv+0x156>
   26ba4:	4616      	mov	r6, r2
   26ba6:	2a00      	cmp	r2, #0
   26ba8:	f000 80a1 	beq.w	26cee <ProcessAesDrv+0x156>
   26bac:	4604      	mov	r4, r0
   26bae:	2800      	cmp	r0, #0
   26bb0:	f000 813f 	beq.w	26e32 <ProcessAesDrv+0x29a>
   26bb4:	461f      	mov	r7, r3
   26bb6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26bb8:	460d      	mov	r5, r1
   26bba:	2b00      	cmp	r3, #0
   26bbc:	d150      	bne.n	26c60 <ProcessAesDrv+0xc8>
   26bbe:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   26bc2:	d252      	bcs.n	26c6a <ProcessAesDrv+0xd2>
   26bc4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   26bc8:	2b04      	cmp	r3, #4
   26bca:	f000 8109 	beq.w	26de0 <ProcessAesDrv+0x248>
   26bce:	f04f 0800 	mov.w	r8, #0
   26bd2:	48aa      	ldr	r0, [pc, #680]	; (26e7c <ProcessAesDrv+0x2e4>)
   26bd4:	f04f 31ff 	mov.w	r1, #4294967295
   26bd8:	f7fe fb66 	bl	252a8 <CC_PalMutexLock>
   26bdc:	2800      	cmp	r0, #0
   26bde:	f040 80de 	bne.w	26d9e <ProcessAesDrv+0x206>
   26be2:	2000      	movs	r0, #0
   26be4:	f7fe fb90 	bl	25308 <CC_PalPowerSaveModeSelect>
   26be8:	2800      	cmp	r0, #0
   26bea:	f040 80e1 	bne.w	26db0 <ProcessAesDrv+0x218>
   26bee:	4ba4      	ldr	r3, [pc, #656]	; (26e80 <ProcessAesDrv+0x2e8>)
   26bf0:	4aa4      	ldr	r2, [pc, #656]	; (26e84 <ProcessAesDrv+0x2ec>)
   26bf2:	2101      	movs	r1, #1
   26bf4:	6019      	str	r1, [r3, #0]
   26bf6:	6813      	ldr	r3, [r2, #0]
   26bf8:	2b00      	cmp	r3, #0
   26bfa:	d1fc      	bne.n	26bf6 <ProcessAesDrv+0x5e>
   26bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26bfe:	2b03      	cmp	r3, #3
   26c00:	dc39      	bgt.n	26c76 <ProcessAesDrv+0xde>
   26c02:	2b00      	cmp	r3, #0
   26c04:	da3a      	bge.n	26c7c <ProcessAesDrv+0xe4>
   26c06:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 26ed0 <ProcessAesDrv+0x338>
   26c0a:	4a9e      	ldr	r2, [pc, #632]	; (26e84 <ProcessAesDrv+0x2ec>)
   26c0c:	6813      	ldr	r3, [r2, #0]
   26c0e:	2b00      	cmp	r3, #0
   26c10:	d1fc      	bne.n	26c0c <ProcessAesDrv+0x74>
   26c12:	f1b8 0f00 	cmp.w	r8, #0
   26c16:	f040 80da 	bne.w	26dce <ProcessAesDrv+0x236>
   26c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26c1c:	f023 0304 	bic.w	r3, r3, #4
   26c20:	2b03      	cmp	r3, #3
   26c22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26c24:	d058      	beq.n	26cd8 <ProcessAesDrv+0x140>
   26c26:	2b01      	cmp	r3, #1
   26c28:	4b97      	ldr	r3, [pc, #604]	; (26e88 <ProcessAesDrv+0x2f0>)
   26c2a:	6818      	ldr	r0, [r3, #0]
   26c2c:	bf0c      	ite	eq
   26c2e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   26c32:	f040 0020 	orrne.w	r0, r0, #32
   26c36:	f7fe fa9d 	bl	25174 <CC_HalMaskInterrupt>
   26c3a:	4b91      	ldr	r3, [pc, #580]	; (26e80 <ProcessAesDrv+0x2e8>)
   26c3c:	2200      	movs	r2, #0
   26c3e:	601a      	str	r2, [r3, #0]
   26c40:	2001      	movs	r0, #1
   26c42:	f7fe fb61 	bl	25308 <CC_PalPowerSaveModeSelect>
   26c46:	2800      	cmp	r0, #0
   26c48:	f040 80bd 	bne.w	26dc6 <ProcessAesDrv+0x22e>
   26c4c:	488b      	ldr	r0, [pc, #556]	; (26e7c <ProcessAesDrv+0x2e4>)
   26c4e:	f7fe fb33 	bl	252b8 <CC_PalMutexUnlock>
   26c52:	2800      	cmp	r0, #0
   26c54:	f040 80b0 	bne.w	26db8 <ProcessAesDrv+0x220>
   26c58:	4648      	mov	r0, r9
   26c5a:	b007      	add	sp, #28
   26c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c60:	2b01      	cmp	r3, #1
   26c62:	d1af      	bne.n	26bc4 <ProcessAesDrv+0x2c>
   26c64:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   26c68:	d3ac      	bcc.n	26bc4 <ProcessAesDrv+0x2c>
   26c6a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 26ed4 <ProcessAesDrv+0x33c>
   26c6e:	4648      	mov	r0, r9
   26c70:	b007      	add	sp, #28
   26c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c76:	3b06      	subs	r3, #6
   26c78:	2b01      	cmp	r3, #1
   26c7a:	d8c4      	bhi.n	26c06 <ProcessAesDrv+0x6e>
   26c7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26c7e:	2b01      	cmp	r3, #1
   26c80:	f200 80d4 	bhi.w	26e2c <ProcessAesDrv+0x294>
   26c84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26c86:	2b01      	cmp	r3, #1
   26c88:	d837      	bhi.n	26cfa <ProcessAesDrv+0x162>
   26c8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   26c8c:	2b01      	cmp	r3, #1
   26c8e:	f200 8131 	bhi.w	26ef4 <ProcessAesDrv+0x35c>
   26c92:	4620      	mov	r0, r4
   26c94:	f7ff ff04 	bl	26aa0 <InitAes.part.0>
   26c98:	4681      	mov	r9, r0
   26c9a:	2800      	cmp	r0, #0
   26c9c:	d1b5      	bne.n	26c0a <ProcessAesDrv+0x72>
   26c9e:	4620      	mov	r0, r4
   26ca0:	f7ff feb4 	bl	26a0c <LoadAesKey>
   26ca4:	4681      	mov	r9, r0
   26ca6:	2800      	cmp	r0, #0
   26ca8:	d1af      	bne.n	26c0a <ProcessAesDrv+0x72>
   26caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26cac:	2b07      	cmp	r3, #7
   26cae:	d8aa      	bhi.n	26c06 <ProcessAesDrv+0x6e>
   26cb0:	a201      	add	r2, pc, #4	; (adr r2, 26cb8 <ProcessAesDrv+0x120>)
   26cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   26cb6:	bf00      	nop
   26cb8:	00026d15 	.word	0x00026d15
   26cbc:	00026d01 	.word	0x00026d01
   26cc0:	00026e71 	.word	0x00026e71
   26cc4:	00026d01 	.word	0x00026d01
   26cc8:	00026c07 	.word	0x00026c07
   26ccc:	00026c07 	.word	0x00026c07
   26cd0:	00026e71 	.word	0x00026e71
   26cd4:	00026d01 	.word	0x00026d01
   26cd8:	2b01      	cmp	r3, #1
   26cda:	4b6b      	ldr	r3, [pc, #428]	; (26e88 <ProcessAesDrv+0x2f0>)
   26cdc:	6818      	ldr	r0, [r3, #0]
   26cde:	bf0c      	ite	eq
   26ce0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   26ce4:	f040 0010 	orrne.w	r0, r0, #16
   26ce8:	f7fe fa44 	bl	25174 <CC_HalMaskInterrupt>
   26cec:	e7a5      	b.n	26c3a <ProcessAesDrv+0xa2>
   26cee:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 26ed8 <ProcessAesDrv+0x340>
   26cf2:	4648      	mov	r0, r9
   26cf4:	b007      	add	sp, #28
   26cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cfa:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 26edc <ProcessAesDrv+0x344>
   26cfe:	e784      	b.n	26c0a <ProcessAesDrv+0x72>
   26d00:	4b62      	ldr	r3, [pc, #392]	; (26e8c <ProcessAesDrv+0x2f4>)
   26d02:	6822      	ldr	r2, [r4, #0]
   26d04:	601a      	str	r2, [r3, #0]
   26d06:	6862      	ldr	r2, [r4, #4]
   26d08:	605a      	str	r2, [r3, #4]
   26d0a:	68a2      	ldr	r2, [r4, #8]
   26d0c:	609a      	str	r2, [r3, #8]
   26d0e:	68e2      	ldr	r2, [r4, #12]
   26d10:	60da      	str	r2, [r3, #12]
   26d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26d14:	682a      	ldr	r2, [r5, #0]
   26d16:	f023 0304 	bic.w	r3, r3, #4
   26d1a:	2b03      	cmp	r3, #3
   26d1c:	d009      	beq.n	26d32 <ProcessAesDrv+0x19a>
   26d1e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   26d20:	6833      	ldr	r3, [r6, #0]
   26d22:	2901      	cmp	r1, #1
   26d24:	bf07      	ittee	eq
   26d26:	485a      	ldreq	r0, [pc, #360]	; (26e90 <ProcessAesDrv+0x2f8>)
   26d28:	495a      	ldreq	r1, [pc, #360]	; (26e94 <ProcessAesDrv+0x2fc>)
   26d2a:	485b      	ldrne	r0, [pc, #364]	; (26e98 <ProcessAesDrv+0x300>)
   26d2c:	495b      	ldrne	r1, [pc, #364]	; (26e9c <ProcessAesDrv+0x304>)
   26d2e:	6003      	str	r3, [r0, #0]
   26d30:	600f      	str	r7, [r1, #0]
   26d32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26d34:	2b01      	cmp	r3, #1
   26d36:	bf0b      	itete	eq
   26d38:	4b59      	ldreq	r3, [pc, #356]	; (26ea0 <ProcessAesDrv+0x308>)
   26d3a:	4b5a      	ldrne	r3, [pc, #360]	; (26ea4 <ProcessAesDrv+0x30c>)
   26d3c:	495a      	ldreq	r1, [pc, #360]	; (26ea8 <ProcessAesDrv+0x310>)
   26d3e:	495b      	ldrne	r1, [pc, #364]	; (26eac <ProcessAesDrv+0x314>)
   26d40:	600a      	str	r2, [r1, #0]
   26d42:	601f      	str	r7, [r3, #0]
   26d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26d46:	f023 0304 	bic.w	r3, r3, #4
   26d4a:	2b03      	cmp	r3, #3
   26d4c:	d074      	beq.n	26e38 <ProcessAesDrv+0x2a0>
   26d4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   26d50:	2b01      	cmp	r3, #1
   26d52:	bf0c      	ite	eq
   26d54:	2080      	moveq	r0, #128	; 0x80
   26d56:	2020      	movne	r0, #32
   26d58:	f7fe fa12 	bl	25180 <CC_HalWaitInterrupt>
   26d5c:	4681      	mov	r9, r0
   26d5e:	2800      	cmp	r0, #0
   26d60:	f47f af53 	bne.w	26c0a <ProcessAesDrv+0x72>
   26d64:	4b47      	ldr	r3, [pc, #284]	; (26e84 <ProcessAesDrv+0x2ec>)
   26d66:	681a      	ldr	r2, [r3, #0]
   26d68:	2a00      	cmp	r2, #0
   26d6a:	d1fc      	bne.n	26d66 <ProcessAesDrv+0x1ce>
   26d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26d6e:	3b01      	subs	r3, #1
   26d70:	4691      	mov	r9, r2
   26d72:	2b06      	cmp	r3, #6
   26d74:	d810      	bhi.n	26d98 <ProcessAesDrv+0x200>
   26d76:	e8df f003 	tbb	[pc, r3]
   26d7a:	7d04      	.short	0x7d04
   26d7c:	7d0f0f04 	.word	0x7d0f0f04
   26d80:	04          	.byte	0x04
   26d81:	00          	.byte	0x00
   26d82:	4a42      	ldr	r2, [pc, #264]	; (26e8c <ProcessAesDrv+0x2f4>)
   26d84:	4b4a      	ldr	r3, [pc, #296]	; (26eb0 <ProcessAesDrv+0x318>)
   26d86:	6812      	ldr	r2, [r2, #0]
   26d88:	6022      	str	r2, [r4, #0]
   26d8a:	681a      	ldr	r2, [r3, #0]
   26d8c:	6062      	str	r2, [r4, #4]
   26d8e:	685a      	ldr	r2, [r3, #4]
   26d90:	60a2      	str	r2, [r4, #8]
   26d92:	3308      	adds	r3, #8
   26d94:	681b      	ldr	r3, [r3, #0]
   26d96:	60e3      	str	r3, [r4, #12]
   26d98:	2301      	movs	r3, #1
   26d9a:	65a3      	str	r3, [r4, #88]	; 0x58
   26d9c:	e735      	b.n	26c0a <ProcessAesDrv+0x72>
   26d9e:	4845      	ldr	r0, [pc, #276]	; (26eb4 <ProcessAesDrv+0x31c>)
   26da0:	f7fd feec 	bl	24b7c <CC_PalAbort>
   26da4:	2000      	movs	r0, #0
   26da6:	f7fe faaf 	bl	25308 <CC_PalPowerSaveModeSelect>
   26daa:	2800      	cmp	r0, #0
   26dac:	f43f af1f 	beq.w	26bee <ProcessAesDrv+0x56>
   26db0:	4841      	ldr	r0, [pc, #260]	; (26eb8 <ProcessAesDrv+0x320>)
   26db2:	f7fd fee3 	bl	24b7c <CC_PalAbort>
   26db6:	e71a      	b.n	26bee <ProcessAesDrv+0x56>
   26db8:	4840      	ldr	r0, [pc, #256]	; (26ebc <ProcessAesDrv+0x324>)
   26dba:	f7fd fedf 	bl	24b7c <CC_PalAbort>
   26dbe:	4648      	mov	r0, r9
   26dc0:	b007      	add	sp, #28
   26dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26dc6:	483e      	ldr	r0, [pc, #248]	; (26ec0 <ProcessAesDrv+0x328>)
   26dc8:	f7fd fed8 	bl	24b7c <CC_PalAbort>
   26dcc:	e73e      	b.n	26c4c <ProcessAesDrv+0xb4>
   26dce:	2304      	movs	r3, #4
   26dd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   26dd4:	2120      	movs	r1, #32
   26dd6:	f104 0010 	add.w	r0, r4, #16
   26dda:	f7ff fb47 	bl	2646c <CC_PalMemSetZeroPlat>
   26dde:	e71c      	b.n	26c1a <ProcessAesDrv+0x82>
   26de0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   26de2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   26de4:	f000 f9c8 	bl	27178 <kmu_validate_slot_and_size>
   26de8:	b9e8      	cbnz	r0, 26e26 <ProcessAesDrv+0x28e>
   26dea:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 26ee0 <ProcessAesDrv+0x348>
   26dee:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 26ee4 <ProcessAesDrv+0x34c>
   26df2:	f8d8 3000 	ldr.w	r3, [r8]
   26df6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 26ee8 <ProcessAesDrv+0x350>
   26dfa:	681b      	ldr	r3, [r3, #0]
   26dfc:	f8cb 3000 	str.w	r3, [fp]
   26e00:	f8d8 3000 	ldr.w	r3, [r8]
   26e04:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 26eec <ProcessAesDrv+0x354>
   26e08:	685b      	ldr	r3, [r3, #4]
   26e0a:	f8ca 3000 	str.w	r3, [sl]
   26e0e:	f8d8 3000 	ldr.w	r3, [r8]
   26e12:	4a2c      	ldr	r2, [pc, #176]	; (26ec4 <ProcessAesDrv+0x32c>)
   26e14:	689b      	ldr	r3, [r3, #8]
   26e16:	f8c9 3000 	str.w	r3, [r9]
   26e1a:	f8d8 3000 	ldr.w	r3, [r8]
   26e1e:	68db      	ldr	r3, [r3, #12]
   26e20:	6013      	str	r3, [r2, #0]
   26e22:	6b21      	ldr	r1, [r4, #48]	; 0x30
   26e24:	b171      	cbz	r1, 26e44 <ProcessAesDrv+0x2ac>
   26e26:	f04f 0801 	mov.w	r8, #1
   26e2a:	e6d2      	b.n	26bd2 <ProcessAesDrv+0x3a>
   26e2c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 26ef0 <ProcessAesDrv+0x358>
   26e30:	e6eb      	b.n	26c0a <ProcessAesDrv+0x72>
   26e32:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   26e36:	e70f      	b.n	26c58 <ProcessAesDrv+0xc0>
   26e38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26e3a:	2b01      	cmp	r3, #1
   26e3c:	bf0c      	ite	eq
   26e3e:	2040      	moveq	r0, #64	; 0x40
   26e40:	2010      	movne	r0, #16
   26e42:	e789      	b.n	26d58 <ProcessAesDrv+0x1c0>
   26e44:	f104 0310 	add.w	r3, r4, #16
   26e48:	4618      	mov	r0, r3
   26e4a:	9305      	str	r3, [sp, #20]
   26e4c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   26e50:	e9cd 3200 	strd	r3, r2, [sp]
   26e54:	9002      	str	r0, [sp, #8]
   26e56:	2010      	movs	r0, #16
   26e58:	9003      	str	r0, [sp, #12]
   26e5a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   26e5e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   26e60:	f000 f9ae 	bl	271c0 <kmu_derive_cmac>
   26e64:	2800      	cmp	r0, #0
   26e66:	d148      	bne.n	26efa <ProcessAesDrv+0x362>
   26e68:	2300      	movs	r3, #0
   26e6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   26e6e:	e7da      	b.n	26e26 <ProcessAesDrv+0x28e>
   26e70:	4b15      	ldr	r3, [pc, #84]	; (26ec8 <ProcessAesDrv+0x330>)
   26e72:	e746      	b.n	26d02 <ProcessAesDrv+0x16a>
   26e74:	4a14      	ldr	r2, [pc, #80]	; (26ec8 <ProcessAesDrv+0x330>)
   26e76:	4b15      	ldr	r3, [pc, #84]	; (26ecc <ProcessAesDrv+0x334>)
   26e78:	e785      	b.n	26d86 <ProcessAesDrv+0x1ee>
   26e7a:	bf00      	nop
   26e7c:	20000628 	.word	0x20000628
   26e80:	5002b810 	.word	0x5002b810
   26e84:	5002b910 	.word	0x5002b910
   26e88:	5002ba04 	.word	0x5002ba04
   26e8c:	5002b440 	.word	0x5002b440
   26e90:	5002bd28 	.word	0x5002bd28
   26e94:	5002bd2c 	.word	0x5002bd2c
   26e98:	5002bd30 	.word	0x5002bd30
   26e9c:	5002bd34 	.word	0x5002bd34
   26ea0:	5002bc2c 	.word	0x5002bc2c
   26ea4:	5002bc34 	.word	0x5002bc34
   26ea8:	5002bc28 	.word	0x5002bc28
   26eac:	5002bc30 	.word	0x5002bc30
   26eb0:	5002b444 	.word	0x5002b444
   26eb4:	0002d7bc 	.word	0x0002d7bc
   26eb8:	0002d7d4 	.word	0x0002d7d4
   26ebc:	0002d814 	.word	0x0002d814
   26ec0:	0002d7f4 	.word	0x0002d7f4
   26ec4:	5002b40c 	.word	0x5002b40c
   26ec8:	5002b460 	.word	0x5002b460
   26ecc:	5002b464 	.word	0x5002b464
   26ed0:	00f10001 	.word	0x00f10001
   26ed4:	00f10005 	.word	0x00f10005
   26ed8:	00f1000b 	.word	0x00f1000b
   26edc:	00f10003 	.word	0x00f10003
   26ee0:	20000618 	.word	0x20000618
   26ee4:	5002b400 	.word	0x5002b400
   26ee8:	5002b404 	.word	0x5002b404
   26eec:	5002b408 	.word	0x5002b408
   26ef0:	00f10002 	.word	0x00f10002
   26ef4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 26f30 <ProcessAesDrv+0x398>
   26ef8:	e687      	b.n	26c0a <ProcessAesDrv+0x72>
   26efa:	f8d8 3000 	ldr.w	r3, [r8]
   26efe:	4a0b      	ldr	r2, [pc, #44]	; (26f2c <ProcessAesDrv+0x394>)
   26f00:	681b      	ldr	r3, [r3, #0]
   26f02:	f8cb 3000 	str.w	r3, [fp]
   26f06:	f8d8 3000 	ldr.w	r3, [r8]
   26f0a:	685b      	ldr	r3, [r3, #4]
   26f0c:	f8ca 3000 	str.w	r3, [sl]
   26f10:	f8d8 3000 	ldr.w	r3, [r8]
   26f14:	689b      	ldr	r3, [r3, #8]
   26f16:	f8c9 3000 	str.w	r3, [r9]
   26f1a:	f8d8 3000 	ldr.w	r3, [r8]
   26f1e:	68db      	ldr	r3, [r3, #12]
   26f20:	6013      	str	r3, [r2, #0]
   26f22:	9805      	ldr	r0, [sp, #20]
   26f24:	2110      	movs	r1, #16
   26f26:	f7ff faa1 	bl	2646c <CC_PalMemSetZeroPlat>
   26f2a:	e79d      	b.n	26e68 <ProcessAesDrv+0x2d0>
   26f2c:	5002b40c 	.word	0x5002b40c
   26f30:	00f10004 	.word	0x00f10004

00026f34 <FinishAesDrv>:
   26f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f38:	b301      	cbz	r1, 26f7c <FinishAesDrv+0x48>
   26f3a:	b1fa      	cbz	r2, 26f7c <FinishAesDrv+0x48>
   26f3c:	4604      	mov	r4, r0
   26f3e:	2800      	cmp	r0, #0
   26f40:	d07a      	beq.n	27038 <FinishAesDrv+0x104>
   26f42:	461d      	mov	r5, r3
   26f44:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26f46:	2b07      	cmp	r3, #7
   26f48:	460e      	mov	r6, r1
   26f4a:	d01b      	beq.n	26f84 <FinishAesDrv+0x50>
   26f4c:	b95d      	cbnz	r5, 26f66 <FinishAesDrv+0x32>
   26f4e:	2b03      	cmp	r3, #3
   26f50:	d110      	bne.n	26f74 <FinishAesDrv+0x40>
   26f52:	6d83      	ldr	r3, [r0, #88]	; 0x58
   26f54:	b973      	cbnz	r3, 26f74 <FinishAesDrv+0x40>
   26f56:	f100 0364 	add.w	r3, r0, #100	; 0x64
   26f5a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   26f5e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   26f62:	600b      	str	r3, [r1, #0]
   26f64:	2510      	movs	r5, #16
   26f66:	462b      	mov	r3, r5
   26f68:	4631      	mov	r1, r6
   26f6a:	4620      	mov	r0, r4
   26f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26f70:	f7ff be12 	b.w	26b98 <ProcessAesDrv>
   26f74:	462f      	mov	r7, r5
   26f76:	4638      	mov	r0, r7
   26f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f7c:	4f66      	ldr	r7, [pc, #408]	; (27118 <FinishAesDrv+0x1e4>)
   26f7e:	4638      	mov	r0, r7
   26f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f84:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26f86:	2b00      	cmp	r3, #0
   26f88:	d159      	bne.n	2703e <FinishAesDrv+0x10a>
   26f8a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   26f8e:	d25b      	bcs.n	27048 <FinishAesDrv+0x114>
   26f90:	b915      	cbnz	r5, 26f98 <FinishAesDrv+0x64>
   26f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
   26f94:	2b00      	cmp	r3, #0
   26f96:	d157      	bne.n	27048 <FinishAesDrv+0x114>
   26f98:	4860      	ldr	r0, [pc, #384]	; (2711c <FinishAesDrv+0x1e8>)
   26f9a:	f04f 31ff 	mov.w	r1, #4294967295
   26f9e:	f7fe f983 	bl	252a8 <CC_PalMutexLock>
   26fa2:	2800      	cmp	r0, #0
   26fa4:	f040 8097 	bne.w	270d6 <FinishAesDrv+0x1a2>
   26fa8:	2000      	movs	r0, #0
   26faa:	f7fe f9ad 	bl	25308 <CC_PalPowerSaveModeSelect>
   26fae:	2800      	cmp	r0, #0
   26fb0:	f040 808d 	bne.w	270ce <FinishAesDrv+0x19a>
   26fb4:	4b5a      	ldr	r3, [pc, #360]	; (27120 <FinishAesDrv+0x1ec>)
   26fb6:	4a5b      	ldr	r2, [pc, #364]	; (27124 <FinishAesDrv+0x1f0>)
   26fb8:	2101      	movs	r1, #1
   26fba:	6019      	str	r1, [r3, #0]
   26fbc:	6813      	ldr	r3, [r2, #0]
   26fbe:	2b00      	cmp	r3, #0
   26fc0:	d1fc      	bne.n	26fbc <FinishAesDrv+0x88>
   26fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26fc4:	2b03      	cmp	r3, #3
   26fc6:	dd20      	ble.n	2700a <FinishAesDrv+0xd6>
   26fc8:	3b06      	subs	r3, #6
   26fca:	2b01      	cmp	r3, #1
   26fcc:	d81f      	bhi.n	2700e <FinishAesDrv+0xda>
   26fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26fd0:	2b01      	cmp	r3, #1
   26fd2:	d83b      	bhi.n	2704c <FinishAesDrv+0x118>
   26fd4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   26fd6:	2b01      	cmp	r3, #1
   26fd8:	f200 8085 	bhi.w	270e6 <FinishAesDrv+0x1b2>
   26fdc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   26fde:	2b01      	cmp	r3, #1
   26fe0:	f200 8083 	bhi.w	270ea <FinishAesDrv+0x1b6>
   26fe4:	4620      	mov	r0, r4
   26fe6:	f7ff fd5b 	bl	26aa0 <InitAes.part.0>
   26fea:	4607      	mov	r7, r0
   26fec:	b980      	cbnz	r0, 27010 <FinishAesDrv+0xdc>
   26fee:	4620      	mov	r0, r4
   26ff0:	f7ff fd0c 	bl	26a0c <LoadAesKey>
   26ff4:	4607      	mov	r7, r0
   26ff6:	b958      	cbnz	r0, 27010 <FinishAesDrv+0xdc>
   26ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26ffa:	2b07      	cmp	r3, #7
   26ffc:	d807      	bhi.n	2700e <FinishAesDrv+0xda>
   26ffe:	e8df f003 	tbb	[pc, r3]
   27002:	2730      	.short	0x2730
   27004:	06062755 	.word	0x06062755
   27008:	2755      	.short	0x2755
   2700a:	2b00      	cmp	r3, #0
   2700c:	dadf      	bge.n	26fce <FinishAesDrv+0x9a>
   2700e:	4f46      	ldr	r7, [pc, #280]	; (27128 <FinishAesDrv+0x1f4>)
   27010:	4a44      	ldr	r2, [pc, #272]	; (27124 <FinishAesDrv+0x1f0>)
   27012:	6813      	ldr	r3, [r2, #0]
   27014:	2b00      	cmp	r3, #0
   27016:	d1fc      	bne.n	27012 <FinishAesDrv+0xde>
   27018:	4a41      	ldr	r2, [pc, #260]	; (27120 <FinishAesDrv+0x1ec>)
   2701a:	2001      	movs	r0, #1
   2701c:	6013      	str	r3, [r2, #0]
   2701e:	f7fe f973 	bl	25308 <CC_PalPowerSaveModeSelect>
   27022:	2800      	cmp	r0, #0
   27024:	d15b      	bne.n	270de <FinishAesDrv+0x1aa>
   27026:	483d      	ldr	r0, [pc, #244]	; (2711c <FinishAesDrv+0x1e8>)
   27028:	f7fe f946 	bl	252b8 <CC_PalMutexUnlock>
   2702c:	2800      	cmp	r0, #0
   2702e:	d0a2      	beq.n	26f76 <FinishAesDrv+0x42>
   27030:	483e      	ldr	r0, [pc, #248]	; (2712c <FinishAesDrv+0x1f8>)
   27032:	f7fd fda3 	bl	24b7c <CC_PalAbort>
   27036:	e79e      	b.n	26f76 <FinishAesDrv+0x42>
   27038:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2703c:	e79b      	b.n	26f76 <FinishAesDrv+0x42>
   2703e:	2b01      	cmp	r3, #1
   27040:	d1a6      	bne.n	26f90 <FinishAesDrv+0x5c>
   27042:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27046:	d3a3      	bcc.n	26f90 <FinishAesDrv+0x5c>
   27048:	4f39      	ldr	r7, [pc, #228]	; (27130 <FinishAesDrv+0x1fc>)
   2704a:	e794      	b.n	26f76 <FinishAesDrv+0x42>
   2704c:	4f39      	ldr	r7, [pc, #228]	; (27134 <FinishAesDrv+0x200>)
   2704e:	e7df      	b.n	27010 <FinishAesDrv+0xdc>
   27050:	4b39      	ldr	r3, [pc, #228]	; (27138 <FinishAesDrv+0x204>)
   27052:	6822      	ldr	r2, [r4, #0]
   27054:	601a      	str	r2, [r3, #0]
   27056:	6862      	ldr	r2, [r4, #4]
   27058:	605a      	str	r2, [r3, #4]
   2705a:	68a2      	ldr	r2, [r4, #8]
   2705c:	609a      	str	r2, [r3, #8]
   2705e:	68e2      	ldr	r2, [r4, #12]
   27060:	60da      	str	r2, [r3, #12]
   27062:	4936      	ldr	r1, [pc, #216]	; (2713c <FinishAesDrv+0x208>)
   27064:	4a36      	ldr	r2, [pc, #216]	; (27140 <FinishAesDrv+0x20c>)
   27066:	2301      	movs	r3, #1
   27068:	600b      	str	r3, [r1, #0]
   2706a:	6015      	str	r5, [r2, #0]
   2706c:	2d00      	cmp	r5, #0
   2706e:	d13e      	bne.n	270ee <FinishAesDrv+0x1ba>
   27070:	6da2      	ldr	r2, [r4, #88]	; 0x58
   27072:	b90a      	cbnz	r2, 27078 <FinishAesDrv+0x144>
   27074:	4a33      	ldr	r2, [pc, #204]	; (27144 <FinishAesDrv+0x210>)
   27076:	6013      	str	r3, [r2, #0]
   27078:	4b2a      	ldr	r3, [pc, #168]	; (27124 <FinishAesDrv+0x1f0>)
   2707a:	681f      	ldr	r7, [r3, #0]
   2707c:	2f00      	cmp	r7, #0
   2707e:	d1fc      	bne.n	2707a <FinishAesDrv+0x146>
   27080:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27082:	3b01      	subs	r3, #1
   27084:	2b06      	cmp	r3, #6
   27086:	d8c3      	bhi.n	27010 <FinishAesDrv+0xdc>
   27088:	a201      	add	r2, pc, #4	; (adr r2, 27090 <FinishAesDrv+0x15c>)
   2708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2708e:	bf00      	nop
   27090:	000270b1 	.word	0x000270b1
   27094:	000270c9 	.word	0x000270c9
   27098:	000270b1 	.word	0x000270b1
   2709c:	00027011 	.word	0x00027011
   270a0:	00027011 	.word	0x00027011
   270a4:	000270c9 	.word	0x000270c9
   270a8:	000270b1 	.word	0x000270b1
   270ac:	4b26      	ldr	r3, [pc, #152]	; (27148 <FinishAesDrv+0x214>)
   270ae:	e7d0      	b.n	27052 <FinishAesDrv+0x11e>
   270b0:	4a21      	ldr	r2, [pc, #132]	; (27138 <FinishAesDrv+0x204>)
   270b2:	4b26      	ldr	r3, [pc, #152]	; (2714c <FinishAesDrv+0x218>)
   270b4:	6812      	ldr	r2, [r2, #0]
   270b6:	6022      	str	r2, [r4, #0]
   270b8:	681a      	ldr	r2, [r3, #0]
   270ba:	6062      	str	r2, [r4, #4]
   270bc:	685a      	ldr	r2, [r3, #4]
   270be:	60a2      	str	r2, [r4, #8]
   270c0:	3308      	adds	r3, #8
   270c2:	681b      	ldr	r3, [r3, #0]
   270c4:	60e3      	str	r3, [r4, #12]
   270c6:	e7a3      	b.n	27010 <FinishAesDrv+0xdc>
   270c8:	4a1f      	ldr	r2, [pc, #124]	; (27148 <FinishAesDrv+0x214>)
   270ca:	4b21      	ldr	r3, [pc, #132]	; (27150 <FinishAesDrv+0x21c>)
   270cc:	e7f2      	b.n	270b4 <FinishAesDrv+0x180>
   270ce:	4821      	ldr	r0, [pc, #132]	; (27154 <FinishAesDrv+0x220>)
   270d0:	f7fd fd54 	bl	24b7c <CC_PalAbort>
   270d4:	e76e      	b.n	26fb4 <FinishAesDrv+0x80>
   270d6:	4820      	ldr	r0, [pc, #128]	; (27158 <FinishAesDrv+0x224>)
   270d8:	f7fd fd50 	bl	24b7c <CC_PalAbort>
   270dc:	e764      	b.n	26fa8 <FinishAesDrv+0x74>
   270de:	481f      	ldr	r0, [pc, #124]	; (2715c <FinishAesDrv+0x228>)
   270e0:	f7fd fd4c 	bl	24b7c <CC_PalAbort>
   270e4:	e79f      	b.n	27026 <FinishAesDrv+0xf2>
   270e6:	4f1e      	ldr	r7, [pc, #120]	; (27160 <FinishAesDrv+0x22c>)
   270e8:	e792      	b.n	27010 <FinishAesDrv+0xdc>
   270ea:	4f1e      	ldr	r7, [pc, #120]	; (27164 <FinishAesDrv+0x230>)
   270ec:	e790      	b.n	27010 <FinishAesDrv+0xdc>
   270ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   270f0:	6833      	ldr	r3, [r6, #0]
   270f2:	2a01      	cmp	r2, #1
   270f4:	d00a      	beq.n	2710c <FinishAesDrv+0x1d8>
   270f6:	491c      	ldr	r1, [pc, #112]	; (27168 <FinishAesDrv+0x234>)
   270f8:	4a1c      	ldr	r2, [pc, #112]	; (2716c <FinishAesDrv+0x238>)
   270fa:	600b      	str	r3, [r1, #0]
   270fc:	2010      	movs	r0, #16
   270fe:	6015      	str	r5, [r2, #0]
   27100:	f7fe f83e 	bl	25180 <CC_HalWaitInterrupt>
   27104:	4607      	mov	r7, r0
   27106:	2800      	cmp	r0, #0
   27108:	d0b6      	beq.n	27078 <FinishAesDrv+0x144>
   2710a:	e781      	b.n	27010 <FinishAesDrv+0xdc>
   2710c:	4918      	ldr	r1, [pc, #96]	; (27170 <FinishAesDrv+0x23c>)
   2710e:	4a19      	ldr	r2, [pc, #100]	; (27174 <FinishAesDrv+0x240>)
   27110:	600b      	str	r3, [r1, #0]
   27112:	2040      	movs	r0, #64	; 0x40
   27114:	6015      	str	r5, [r2, #0]
   27116:	e7f3      	b.n	27100 <FinishAesDrv+0x1cc>
   27118:	00f1000b 	.word	0x00f1000b
   2711c:	20000628 	.word	0x20000628
   27120:	5002b810 	.word	0x5002b810
   27124:	5002b910 	.word	0x5002b910
   27128:	00f10001 	.word	0x00f10001
   2712c:	0002d814 	.word	0x0002d814
   27130:	00f10005 	.word	0x00f10005
   27134:	00f10002 	.word	0x00f10002
   27138:	5002b440 	.word	0x5002b440
   2713c:	5002b47c 	.word	0x5002b47c
   27140:	5002b4bc 	.word	0x5002b4bc
   27144:	5002b524 	.word	0x5002b524
   27148:	5002b460 	.word	0x5002b460
   2714c:	5002b444 	.word	0x5002b444
   27150:	5002b464 	.word	0x5002b464
   27154:	0002d7d4 	.word	0x0002d7d4
   27158:	0002d7bc 	.word	0x0002d7bc
   2715c:	0002d7f4 	.word	0x0002d7f4
   27160:	00f10003 	.word	0x00f10003
   27164:	00f10004 	.word	0x00f10004
   27168:	5002bc30 	.word	0x5002bc30
   2716c:	5002bc34 	.word	0x5002bc34
   27170:	5002bc28 	.word	0x5002bc28
   27174:	5002bc2c 	.word	0x5002bc2c

00027178 <kmu_validate_slot_and_size>:
   27178:	b921      	cbnz	r1, 27184 <kmu_validate_slot_and_size+0xc>
   2717a:	4b03      	ldr	r3, [pc, #12]	; (27188 <kmu_validate_slot_and_size+0x10>)
   2717c:	2800      	cmp	r0, #0
   2717e:	bf18      	it	ne
   27180:	4618      	movne	r0, r3
   27182:	4770      	bx	lr
   27184:	4801      	ldr	r0, [pc, #4]	; (2718c <kmu_validate_slot_and_size+0x14>)
   27186:	4770      	bx	lr
   27188:	00f70001 	.word	0x00f70001
   2718c:	00f70003 	.word	0x00f70003

00027190 <kmu_validate_kdr_slot_and_size>:
   27190:	b921      	cbnz	r1, 2719c <kmu_validate_kdr_slot_and_size+0xc>
   27192:	4b03      	ldr	r3, [pc, #12]	; (271a0 <kmu_validate_kdr_slot_and_size+0x10>)
   27194:	2800      	cmp	r0, #0
   27196:	bf18      	it	ne
   27198:	4618      	movne	r0, r3
   2719a:	4770      	bx	lr
   2719c:	4801      	ldr	r0, [pc, #4]	; (271a4 <kmu_validate_kdr_slot_and_size+0x14>)
   2719e:	4770      	bx	lr
   271a0:	00f70001 	.word	0x00f70001
   271a4:	00f70003 	.word	0x00f70003

000271a8 <kmu_use_kdr_key>:
   271a8:	4903      	ldr	r1, [pc, #12]	; (271b8 <kmu_use_kdr_key+0x10>)
   271aa:	4b04      	ldr	r3, [pc, #16]	; (271bc <kmu_use_kdr_key+0x14>)
   271ac:	2000      	movs	r0, #0
   271ae:	2201      	movs	r2, #1
   271b0:	6008      	str	r0, [r1, #0]
   271b2:	601a      	str	r2, [r3, #0]
   271b4:	4770      	bx	lr
   271b6:	bf00      	nop
   271b8:	5002ba38 	.word	0x5002ba38
   271bc:	5002b478 	.word	0x5002b478

000271c0 <kmu_derive_cmac>:
   271c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271c4:	b0cd      	sub	sp, #308	; 0x134
   271c6:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   271ca:	460f      	mov	r7, r1
   271cc:	2100      	movs	r1, #0
   271ce:	460c      	mov	r4, r1
   271d0:	4681      	mov	r9, r0
   271d2:	4616      	mov	r6, r2
   271d4:	a80e      	add	r0, sp, #56	; 0x38
   271d6:	2274      	movs	r2, #116	; 0x74
   271d8:	469b      	mov	fp, r3
   271da:	f002 fc49 	bl	29a70 <memset>
   271de:	4621      	mov	r1, r4
   271e0:	2280      	movs	r2, #128	; 0x80
   271e2:	a82c      	add	r0, sp, #176	; 0xb0
   271e4:	942b      	str	r4, [sp, #172]	; 0xac
   271e6:	f002 fc43 	bl	29a70 <memset>
   271ea:	2384      	movs	r3, #132	; 0x84
   271ec:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   271f0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   271f4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   271f8:	9305      	str	r3, [sp, #20]
   271fa:	d860      	bhi.n	272be <kmu_derive_cmac+0xfe>
   271fc:	ab05      	add	r3, sp, #20
   271fe:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   27202:	9301      	str	r3, [sp, #4]
   27204:	9502      	str	r5, [sp, #8]
   27206:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   2720a:	4659      	mov	r1, fp
   2720c:	4630      	mov	r0, r6
   2720e:	f8cd a000 	str.w	sl, [sp]
   27212:	f000 f865 	bl	272e0 <UtilCmacBuildDataForDerivation>
   27216:	2800      	cmp	r0, #0
   27218:	d14c      	bne.n	272b4 <kmu_derive_cmac+0xf4>
   2721a:	2303      	movs	r3, #3
   2721c:	f88d 3013 	strb.w	r3, [sp, #19]
   27220:	f89d 3013 	ldrb.w	r3, [sp, #19]
   27224:	901c      	str	r0, [sp, #112]	; 0x70
   27226:	2200      	movs	r2, #0
   27228:	2110      	movs	r1, #16
   2722a:	a80e      	add	r0, sp, #56	; 0x38
   2722c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   27230:	2607      	movs	r6, #7
   27232:	2301      	movs	r3, #1
   27234:	2401      	movs	r4, #1
   27236:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2723a:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   2723e:	971a      	str	r7, [sp, #104]	; 0x68
   27240:	961b      	str	r6, [sp, #108]	; 0x6c
   27242:	9426      	str	r4, [sp, #152]	; 0x98
   27244:	f10d 0920 	add.w	r9, sp, #32
   27248:	f7ff f910 	bl	2646c <CC_PalMemSetZeroPlat>
   2724c:	2110      	movs	r1, #16
   2724e:	e9cd 1900 	strd	r1, r9, [sp]
   27252:	ab0a      	add	r3, sp, #40	; 0x28
   27254:	9905      	ldr	r1, [sp, #20]
   27256:	4650      	mov	r0, sl
   27258:	aa06      	add	r2, sp, #24
   2725a:	f7ff f9ab 	bl	265b4 <SetDataBuffersInfo>
   2725e:	4607      	mov	r7, r0
   27260:	b150      	cbz	r0, 27278 <kmu_derive_cmac+0xb8>
   27262:	e01e      	b.n	272a2 <kmu_derive_cmac+0xe2>
   27264:	f7ff f8fe 	bl	26464 <CC_PalMemCopyPlat>
   27268:	2110      	movs	r1, #16
   2726a:	a80e      	add	r0, sp, #56	; 0x38
   2726c:	f7ff f8fe 	bl	2646c <CC_PalMemSetZeroPlat>
   27270:	3401      	adds	r4, #1
   27272:	1bad      	subs	r5, r5, r6
   27274:	b2e4      	uxtb	r4, r4
   27276:	d027      	beq.n	272c8 <kmu_derive_cmac+0x108>
   27278:	9b05      	ldr	r3, [sp, #20]
   2727a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2727e:	2d10      	cmp	r5, #16
   27280:	464a      	mov	r2, r9
   27282:	a906      	add	r1, sp, #24
   27284:	a80e      	add	r0, sp, #56	; 0x38
   27286:	462e      	mov	r6, r5
   27288:	bf28      	it	cs
   2728a:	2610      	movcs	r6, #16
   2728c:	f7ff fe52 	bl	26f34 <FinishAesDrv>
   27290:	4603      	mov	r3, r0
   27292:	4632      	mov	r2, r6
   27294:	eb08 0007 	add.w	r0, r8, r7
   27298:	a90e      	add	r1, sp, #56	; 0x38
   2729a:	4437      	add	r7, r6
   2729c:	2b00      	cmp	r3, #0
   2729e:	d0e1      	beq.n	27264 <kmu_derive_cmac+0xa4>
   272a0:	461f      	mov	r7, r3
   272a2:	a80e      	add	r0, sp, #56	; 0x38
   272a4:	2274      	movs	r2, #116	; 0x74
   272a6:	2100      	movs	r1, #0
   272a8:	f7ff f8de 	bl	26468 <CC_PalMemSetPlat>
   272ac:	4638      	mov	r0, r7
   272ae:	b04d      	add	sp, #308	; 0x134
   272b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272b4:	4f08      	ldr	r7, [pc, #32]	; (272d8 <kmu_derive_cmac+0x118>)
   272b6:	4638      	mov	r0, r7
   272b8:	b04d      	add	sp, #308	; 0x134
   272ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272be:	4f07      	ldr	r7, [pc, #28]	; (272dc <kmu_derive_cmac+0x11c>)
   272c0:	4638      	mov	r0, r7
   272c2:	b04d      	add	sp, #308	; 0x134
   272c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272c8:	a80e      	add	r0, sp, #56	; 0x38
   272ca:	2274      	movs	r2, #116	; 0x74
   272cc:	2100      	movs	r1, #0
   272ce:	462f      	mov	r7, r5
   272d0:	f7ff f8ca 	bl	26468 <CC_PalMemSetPlat>
   272d4:	e7ea      	b.n	272ac <kmu_derive_cmac+0xec>
   272d6:	bf00      	nop
   272d8:	00f1000e 	.word	0x00f1000e
   272dc:	00f1000f 	.word	0x00f1000f

000272e0 <UtilCmacBuildDataForDerivation>:
   272e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   272e4:	b082      	sub	sp, #8
   272e6:	2600      	movs	r6, #0
   272e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   272ea:	9601      	str	r6, [sp, #4]
   272ec:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   272f0:	d83c      	bhi.n	2736c <UtilCmacBuildDataForDerivation+0x8c>
   272f2:	00ee      	lsls	r6, r5, #3
   272f4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   272f8:	f101 35ff 	add.w	r5, r1, #4294967295
   272fc:	461f      	mov	r7, r3
   272fe:	bf34      	ite	cc
   27300:	2303      	movcc	r3, #3
   27302:	2304      	movcs	r3, #4
   27304:	2d3f      	cmp	r5, #63	; 0x3f
   27306:	460c      	mov	r4, r1
   27308:	9300      	str	r3, [sp, #0]
   2730a:	d82f      	bhi.n	2736c <UtilCmacBuildDataForDerivation+0x8c>
   2730c:	b370      	cbz	r0, 2736c <UtilCmacBuildDataForDerivation+0x8c>
   2730e:	4690      	mov	r8, r2
   27310:	b117      	cbz	r7, 27318 <UtilCmacBuildDataForDerivation+0x38>
   27312:	b35a      	cbz	r2, 2736c <UtilCmacBuildDataForDerivation+0x8c>
   27314:	2f40      	cmp	r7, #64	; 0x40
   27316:	d829      	bhi.n	2736c <UtilCmacBuildDataForDerivation+0x8c>
   27318:	9a08      	ldr	r2, [sp, #32]
   2731a:	b33a      	cbz	r2, 2736c <UtilCmacBuildDataForDerivation+0x8c>
   2731c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2731e:	6811      	ldr	r1, [r2, #0]
   27320:	b321      	cbz	r1, 2736c <UtilCmacBuildDataForDerivation+0x8c>
   27322:	19e2      	adds	r2, r4, r7
   27324:	4413      	add	r3, r2
   27326:	4299      	cmp	r1, r3
   27328:	d320      	bcc.n	2736c <UtilCmacBuildDataForDerivation+0x8c>
   2732a:	9b08      	ldr	r3, [sp, #32]
   2732c:	4622      	mov	r2, r4
   2732e:	4601      	mov	r1, r0
   27330:	1c58      	adds	r0, r3, #1
   27332:	f7ff f897 	bl	26464 <CC_PalMemCopyPlat>
   27336:	9b08      	ldr	r3, [sp, #32]
   27338:	4423      	add	r3, r4
   2733a:	2200      	movs	r2, #0
   2733c:	3402      	adds	r4, #2
   2733e:	705a      	strb	r2, [r3, #1]
   27340:	bb07      	cbnz	r7, 27384 <UtilCmacBuildDataForDerivation+0xa4>
   27342:	2eff      	cmp	r6, #255	; 0xff
   27344:	9600      	str	r6, [sp, #0]
   27346:	d915      	bls.n	27374 <UtilCmacBuildDataForDerivation+0x94>
   27348:	9b08      	ldr	r3, [sp, #32]
   2734a:	0235      	lsls	r5, r6, #8
   2734c:	b2ad      	uxth	r5, r5
   2734e:	1918      	adds	r0, r3, r4
   27350:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   27354:	2202      	movs	r2, #2
   27356:	a901      	add	r1, sp, #4
   27358:	9501      	str	r5, [sp, #4]
   2735a:	f7ff f883 	bl	26464 <CC_PalMemCopyPlat>
   2735e:	3402      	adds	r4, #2
   27360:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27362:	2000      	movs	r0, #0
   27364:	601c      	str	r4, [r3, #0]
   27366:	b002      	add	sp, #8
   27368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2736c:	4809      	ldr	r0, [pc, #36]	; (27394 <UtilCmacBuildDataForDerivation+0xb4>)
   2736e:	b002      	add	sp, #8
   27370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27374:	9b08      	ldr	r3, [sp, #32]
   27376:	2201      	movs	r2, #1
   27378:	1918      	adds	r0, r3, r4
   2737a:	4669      	mov	r1, sp
   2737c:	f7ff f872 	bl	26464 <CC_PalMemCopyPlat>
   27380:	3401      	adds	r4, #1
   27382:	e7ed      	b.n	27360 <UtilCmacBuildDataForDerivation+0x80>
   27384:	9b08      	ldr	r3, [sp, #32]
   27386:	4641      	mov	r1, r8
   27388:	1918      	adds	r0, r3, r4
   2738a:	463a      	mov	r2, r7
   2738c:	f7ff f86a 	bl	26464 <CC_PalMemCopyPlat>
   27390:	443c      	add	r4, r7
   27392:	e7d6      	b.n	27342 <UtilCmacBuildDataForDerivation+0x62>
   27394:	80000006 	.word	0x80000006

00027398 <uart_tx.constprop.0>:
#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout);
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   27398:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   2739a:	6883      	ldr	r3, [r0, #8]
   2739c:	685c      	ldr	r4, [r3, #4]
   2739e:	f04f 33ff 	mov.w	r3, #4294967295
   273a2:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
}
   273a4:	bc10      	pop	{r4}
   273a6:	4760      	bx	ip

000273a8 <error>:
{
   273a8:	b508      	push	{r3, lr}
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   273aa:	2100      	movs	r1, #0
   273ac:	200f      	movs	r0, #15
   273ae:	f004 fffc 	bl	2c3aa <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   273b2:	2100      	movs	r1, #0
   273b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   273b8:	f7fc f9c6 	bl	23748 <z_impl_k_sleep>
	while (true) {
   273bc:	e7f9      	b.n	273b2 <error+0xa>

000273be <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   273be:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   273c0:	f04f 0c0a 	mov.w	ip, #10
{
   273c4:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   273c6:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   273c8:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   273ca:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   273cc:	b111      	cbz	r1, 273d4 <u8_to_dec+0x16>
   273ce:	3e01      	subs	r6, #1
   273d0:	d101      	bne.n	273d6 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   273d2:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   273d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   273d6:	42a2      	cmp	r2, r4
		digit = value / divisor;
   273d8:	fbb2 f7f4 	udiv	r7, r2, r4
   273dc:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   273de:	d202      	bcs.n	273e6 <u8_to_dec+0x28>
   273e0:	2c01      	cmp	r4, #1
   273e2:	d000      	beq.n	273e6 <u8_to_dec+0x28>
   273e4:	b130      	cbz	r0, 273f4 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   273e6:	3330      	adds	r3, #48	; 0x30
   273e8:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   273ec:	3901      	subs	r1, #1
			num_digits++;
   273ee:	1c43      	adds	r3, r0, #1
			buflen--;
   273f0:	b2c9      	uxtb	r1, r1
			num_digits++;
   273f2:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   273f4:	fb04 2217 	mls	r2, r4, r7, r2
   273f8:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   273fa:	fbb4 f4fc 	udiv	r4, r4, ip
   273fe:	e7e5      	b.n	273cc <u8_to_dec+0xe>

00027400 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   27400:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   27404:	b2db      	uxtb	r3, r3
   27406:	2b09      	cmp	r3, #9
   27408:	d802      	bhi.n	27410 <char2hex+0x10>
		*x = c - '0';
   2740a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2740c:	2000      	movs	r0, #0
   2740e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   27410:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   27414:	2b05      	cmp	r3, #5
   27416:	d802      	bhi.n	2741e <char2hex+0x1e>
		*x = c - 'a' + 10;
   27418:	3857      	subs	r0, #87	; 0x57
   2741a:	7008      	strb	r0, [r1, #0]
   2741c:	e7f6      	b.n	2740c <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2741e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   27422:	2b05      	cmp	r3, #5
   27424:	d801      	bhi.n	2742a <char2hex+0x2a>
		*x = c - 'A' + 10;
   27426:	3837      	subs	r0, #55	; 0x37
   27428:	e7f7      	b.n	2741a <char2hex+0x1a>
		return -EINVAL;
   2742a:	f06f 0015 	mvn.w	r0, #21
}
   2742e:	4770      	bx	lr

00027430 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   27430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27432:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   27434:	f001 0001 	and.w	r0, r1, #1
   27438:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2743c:	429d      	cmp	r5, r3
   2743e:	ea4f 0651 	mov.w	r6, r1, lsr #1
   27442:	d903      	bls.n	2744c <hex2bin+0x1c>
		return 0;
   27444:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   27446:	4628      	mov	r0, r5
   27448:	b003      	add	sp, #12
   2744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2744c:	b158      	cbz	r0, 27466 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2744e:	7820      	ldrb	r0, [r4, #0]
   27450:	f10d 0107 	add.w	r1, sp, #7
   27454:	f7ff ffd4 	bl	27400 <char2hex>
   27458:	2800      	cmp	r0, #0
   2745a:	dbf3      	blt.n	27444 <hex2bin+0x14>
		buf[0] = dec;
   2745c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27460:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   27464:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   27466:	3401      	adds	r4, #1
   27468:	4416      	add	r6, r2
   2746a:	42b2      	cmp	r2, r6
   2746c:	d0eb      	beq.n	27446 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2746e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   27472:	f10d 0107 	add.w	r1, sp, #7
   27476:	f7ff ffc3 	bl	27400 <char2hex>
   2747a:	2800      	cmp	r0, #0
   2747c:	dbe2      	blt.n	27444 <hex2bin+0x14>
		buf[i] = dec << 4;
   2747e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27482:	011b      	lsls	r3, r3, #4
   27484:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   27486:	f814 0b02 	ldrb.w	r0, [r4], #2
   2748a:	f10d 0107 	add.w	r1, sp, #7
   2748e:	f7ff ffb7 	bl	27400 <char2hex>
   27492:	2800      	cmp	r0, #0
   27494:	dbd6      	blt.n	27444 <hex2bin+0x14>
		buf[i] += dec;
   27496:	7813      	ldrb	r3, [r2, #0]
   27498:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2749c:	440b      	add	r3, r1
   2749e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   274a2:	e7e2      	b.n	2746a <hex2bin+0x3a>

000274a4 <sys_notify_validate>:
	if (notify == NULL) {
   274a4:	4603      	mov	r3, r0
   274a6:	b140      	cbz	r0, 274ba <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   274a8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   274aa:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   274ae:	2a02      	cmp	r2, #2
   274b0:	d006      	beq.n	274c0 <sys_notify_validate+0x1c>
   274b2:	2a03      	cmp	r2, #3
   274b4:	d004      	beq.n	274c0 <sys_notify_validate+0x1c>
   274b6:	2a01      	cmp	r2, #1
   274b8:	d005      	beq.n	274c6 <sys_notify_validate+0x22>
		return -EINVAL;
   274ba:	f06f 0015 	mvn.w	r0, #21
}
   274be:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   274c0:	681a      	ldr	r2, [r3, #0]
   274c2:	2a00      	cmp	r2, #0
   274c4:	d0f9      	beq.n	274ba <sys_notify_validate+0x16>
		notify->result = 0;
   274c6:	2000      	movs	r0, #0
   274c8:	6098      	str	r0, [r3, #8]
   274ca:	4770      	bx	lr

000274cc <arch_printk_char_out>:
}
   274cc:	2000      	movs	r0, #0
   274ce:	4770      	bx	lr

000274d0 <str_out>:
{
   274d0:	b530      	push	{r4, r5, lr}
   274d2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   274d4:	680c      	ldr	r4, [r1, #0]
   274d6:	1c55      	adds	r5, r2, #1
   274d8:	b114      	cbz	r4, 274e0 <str_out+0x10>
   274da:	684b      	ldr	r3, [r1, #4]
   274dc:	4293      	cmp	r3, r2
   274de:	dc01      	bgt.n	274e4 <str_out+0x14>
		ctx->count++;
   274e0:	608d      	str	r5, [r1, #8]
}
   274e2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   274e4:	3b01      	subs	r3, #1
   274e6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   274e8:	bf08      	it	eq
   274ea:	2200      	moveq	r2, #0
   274ec:	608d      	str	r5, [r1, #8]
   274ee:	bf0c      	ite	eq
   274f0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   274f2:	54a0      	strbne	r0, [r4, r2]
   274f4:	e7f5      	b.n	274e2 <str_out+0x12>

000274f6 <printk>:
{
   274f6:	b40f      	push	{r0, r1, r2, r3}
   274f8:	b507      	push	{r0, r1, r2, lr}
   274fa:	a904      	add	r1, sp, #16
   274fc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   27500:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   27502:	f000 fb37 	bl	27b74 <z_log_printk>
}
   27506:	b003      	add	sp, #12
   27508:	f85d eb04 	ldr.w	lr, [sp], #4
   2750c:	b004      	add	sp, #16
   2750e:	4770      	bx	lr

00027510 <snprintk>:
{
   27510:	b40c      	push	{r2, r3}
   27512:	b507      	push	{r0, r1, r2, lr}
   27514:	ab04      	add	r3, sp, #16
   27516:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2751a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2751c:	f7e9 f8ea 	bl	106f4 <vsnprintk>
}
   27520:	b003      	add	sp, #12
   27522:	f85d eb04 	ldr.w	lr, [sp], #4
   27526:	b002      	add	sp, #8
   27528:	4770      	bx	lr

0002752a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2752a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2752c:	f013 0307 	ands.w	r3, r3, #7
   27530:	d105      	bne.n	2753e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   27532:	6803      	ldr	r3, [r0, #0]
   27534:	2b00      	cmp	r3, #0
		evt = EVT_START;
   27536:	bf0c      	ite	eq
   27538:	2000      	moveq	r0, #0
   2753a:	2003      	movne	r0, #3
   2753c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2753e:	2b02      	cmp	r3, #2
   27540:	d105      	bne.n	2754e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   27542:	8bc3      	ldrh	r3, [r0, #30]
   27544:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   27546:	bf14      	ite	ne
   27548:	2000      	movne	r0, #0
   2754a:	2004      	moveq	r0, #4
   2754c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2754e:	2b01      	cmp	r3, #1
   27550:	d105      	bne.n	2755e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   27552:	6803      	ldr	r3, [r0, #0]
   27554:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   27556:	bf0c      	ite	eq
   27558:	2000      	moveq	r0, #0
   2755a:	2005      	movne	r0, #5
   2755c:	4770      	bx	lr
	int evt = EVT_NOP;
   2755e:	2000      	movs	r0, #0
}
   27560:	4770      	bx	lr

00027562 <notify_one>:
{
   27562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27566:	460d      	mov	r5, r1
   27568:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2756a:	4619      	mov	r1, r3
   2756c:	1d28      	adds	r0, r5, #4
{
   2756e:	4690      	mov	r8, r2
   27570:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27572:	f7e9 f889 	bl	10688 <sys_notify_finalize>
	if (cb) {
   27576:	4604      	mov	r4, r0
   27578:	b138      	cbz	r0, 2758a <notify_one+0x28>
		cb(mgr, cli, state, res);
   2757a:	4633      	mov	r3, r6
   2757c:	4642      	mov	r2, r8
   2757e:	4629      	mov	r1, r5
   27580:	4638      	mov	r0, r7
   27582:	46a4      	mov	ip, r4
}
   27584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   27588:	4760      	bx	ip
}
   2758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002758e <validate_args>:
{
   2758e:	b510      	push	{r4, lr}
   27590:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   27592:	b140      	cbz	r0, 275a6 <validate_args+0x18>
   27594:	b139      	cbz	r1, 275a6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   27596:	1d08      	adds	r0, r1, #4
   27598:	f7ff ff84 	bl	274a4 <sys_notify_validate>
	if ((rv == 0)
   2759c:	b928      	cbnz	r0, 275aa <validate_args+0x1c>
	    && ((cli->notify.flags
   2759e:	68a3      	ldr	r3, [r4, #8]
   275a0:	f033 0303 	bics.w	r3, r3, #3
   275a4:	d001      	beq.n	275aa <validate_args+0x1c>
		rv = -EINVAL;
   275a6:	f06f 0015 	mvn.w	r0, #21
}
   275aa:	bd10      	pop	{r4, pc}

000275ac <onoff_manager_init>:
{
   275ac:	b538      	push	{r3, r4, r5, lr}
   275ae:	460c      	mov	r4, r1
	if ((mgr == NULL)
   275b0:	4605      	mov	r5, r0
   275b2:	b158      	cbz	r0, 275cc <onoff_manager_init+0x20>
	    || (transitions == NULL)
   275b4:	b151      	cbz	r1, 275cc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   275b6:	680b      	ldr	r3, [r1, #0]
   275b8:	b143      	cbz	r3, 275cc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   275ba:	684b      	ldr	r3, [r1, #4]
   275bc:	b133      	cbz	r3, 275cc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   275be:	2220      	movs	r2, #32
   275c0:	2100      	movs	r1, #0
   275c2:	f002 fa55 	bl	29a70 <memset>
   275c6:	612c      	str	r4, [r5, #16]
	return 0;
   275c8:	2000      	movs	r0, #0
}
   275ca:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   275cc:	f06f 0015 	mvn.w	r0, #21
   275d0:	e7fb      	b.n	275ca <onoff_manager_init+0x1e>

000275d2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   275d2:	4604      	mov	r4, r0
   275d4:	b508      	push	{r3, lr}
   275d6:	4608      	mov	r0, r1
   275d8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   275da:	461a      	mov	r2, r3
   275dc:	47a0      	blx	r4
	return z_impl_k_current_get();
   275de:	f7fc f8eb 	bl	237b8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   275e2:	f7ed fa65 	bl	14ab0 <z_impl_k_thread_abort>

000275e6 <chunk_field>:
	if (big_heap(h)) {
   275e6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   275e8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   275ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   275f0:	bf2c      	ite	cs
   275f2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   275f6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   275fa:	4770      	bx	lr

000275fc <chunk_set>:
	void *cmem = &buf[c];
   275fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   27600:	6880      	ldr	r0, [r0, #8]
   27602:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   27606:	bf2c      	ite	cs
   27608:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2760c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   27610:	4770      	bx	lr

00027612 <chunk_size>:
{
   27612:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   27614:	2201      	movs	r2, #1
   27616:	f7ff ffe6 	bl	275e6 <chunk_field>
}
   2761a:	0840      	lsrs	r0, r0, #1
   2761c:	bd08      	pop	{r3, pc}

0002761e <set_chunk_used>:
	if (big_heap(h)) {
   2761e:	6883      	ldr	r3, [r0, #8]
   27620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   27624:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   27628:	d308      	bcc.n	2763c <set_chunk_used+0x1e>
		if (used) {
   2762a:	684b      	ldr	r3, [r1, #4]
   2762c:	b11a      	cbz	r2, 27636 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2762e:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27632:	604b      	str	r3, [r1, #4]
   27634:	4770      	bx	lr
   27636:	f023 0301 	bic.w	r3, r3, #1
   2763a:	e7fa      	b.n	27632 <set_chunk_used+0x14>
		if (used) {
   2763c:	884b      	ldrh	r3, [r1, #2]
   2763e:	b11a      	cbz	r2, 27648 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27640:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27644:	804b      	strh	r3, [r1, #2]
}
   27646:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27648:	f023 0301 	bic.w	r3, r3, #1
   2764c:	e7fa      	b.n	27644 <set_chunk_used+0x26>

0002764e <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2764e:	0053      	lsls	r3, r2, #1
   27650:	2201      	movs	r2, #1
   27652:	f7ff bfd3 	b.w	275fc <chunk_set>

00027656 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   27656:	6883      	ldr	r3, [r0, #8]
   27658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2765c:	bf2c      	ite	cs
   2765e:	2008      	movcs	r0, #8
   27660:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27662:	3107      	adds	r1, #7
   27664:	4408      	add	r0, r1
}
   27666:	08c0      	lsrs	r0, r0, #3
   27668:	4770      	bx	lr

0002766a <bucket_idx>:
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   2766a:	460a      	mov	r2, r1
   2766c:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2766e:	2101      	movs	r1, #1
   27670:	f7ff fff1 	bl	27656 <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   27674:	3201      	adds	r2, #1
   27676:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   27678:	fab2 f082 	clz	r0, r2
}
   2767c:	f1c0 001f 	rsb	r0, r0, #31
   27680:	bd08      	pop	{r3, pc}

00027682 <merge_chunks>:
{
   27682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27686:	4616      	mov	r6, r2
   27688:	4604      	mov	r4, r0
   2768a:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2768c:	f7ff ffc1 	bl	27612 <chunk_size>
   27690:	4631      	mov	r1, r6
   27692:	4605      	mov	r5, r0
   27694:	4620      	mov	r0, r4
   27696:	f7ff ffbc 	bl	27612 <chunk_size>
   2769a:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   2769c:	462a      	mov	r2, r5
   2769e:	4639      	mov	r1, r7
   276a0:	4620      	mov	r0, r4
   276a2:	f7ff ffd4 	bl	2764e <set_chunk_size>
	return c + chunk_size(h, c);
   276a6:	4631      	mov	r1, r6
   276a8:	4620      	mov	r0, r4
   276aa:	f7ff ffb2 	bl	27612 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   276ae:	462b      	mov	r3, r5
   276b0:	1831      	adds	r1, r6, r0
   276b2:	2200      	movs	r2, #0
   276b4:	4620      	mov	r0, r4
}
   276b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   276ba:	f7ff bf9f 	b.w	275fc <chunk_set>

000276be <split_chunks>:
{
   276be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   276c2:	4614      	mov	r4, r2
   276c4:	4605      	mov	r5, r0
   276c6:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   276c8:	f7ff ffa3 	bl	27612 <chunk_size>
	chunksz_t lsz = rc - lc;
   276cc:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   276d0:	1b37      	subs	r7, r6, r4
   276d2:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   276d4:	4642      	mov	r2, r8
   276d6:	4631      	mov	r1, r6
   276d8:	4628      	mov	r0, r5
   276da:	f7ff ffb8 	bl	2764e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   276de:	463a      	mov	r2, r7
   276e0:	4621      	mov	r1, r4
   276e2:	4628      	mov	r0, r5
   276e4:	f7ff ffb3 	bl	2764e <set_chunk_size>
   276e8:	4643      	mov	r3, r8
   276ea:	2200      	movs	r2, #0
   276ec:	4621      	mov	r1, r4
   276ee:	4628      	mov	r0, r5
   276f0:	f7ff ff84 	bl	275fc <chunk_set>
	return c + chunk_size(h, c);
   276f4:	4621      	mov	r1, r4
   276f6:	4628      	mov	r0, r5
   276f8:	f7ff ff8b 	bl	27612 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   276fc:	463b      	mov	r3, r7
   276fe:	1821      	adds	r1, r4, r0
   27700:	2200      	movs	r2, #0
   27702:	4628      	mov	r0, r5
}
   27704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27708:	f7ff bf78 	b.w	275fc <chunk_set>

0002770c <free_list_remove_bidx>:
{
   2770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27710:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   27712:	2203      	movs	r2, #3
   27714:	460e      	mov	r6, r1
   27716:	4604      	mov	r4, r0
   27718:	f7ff ff65 	bl	275e6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2771c:	4286      	cmp	r6, r0
   2771e:	4605      	mov	r5, r0
   27720:	f107 0804 	add.w	r8, r7, #4
   27724:	d10b      	bne.n	2773e <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   27726:	2301      	movs	r3, #1
   27728:	fa03 f707 	lsl.w	r7, r3, r7
   2772c:	68e3      	ldr	r3, [r4, #12]
   2772e:	ea23 0307 	bic.w	r3, r3, r7
   27732:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   27734:	2300      	movs	r3, #0
   27736:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2773a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2773e:	4631      	mov	r1, r6
   27740:	2202      	movs	r2, #2
   27742:	4620      	mov	r0, r4
   27744:	f7ff ff4f 	bl	275e6 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   27748:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   2774a:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2774c:	4601      	mov	r1, r0
		b->next = second;
   2774e:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   27752:	4620      	mov	r0, r4
   27754:	2203      	movs	r2, #3
   27756:	f7ff ff51 	bl	275fc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2775a:	4633      	mov	r3, r6
   2775c:	4629      	mov	r1, r5
   2775e:	4620      	mov	r0, r4
   27760:	2202      	movs	r2, #2
}
   27762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27766:	f7ff bf49 	b.w	275fc <chunk_set>

0002776a <alloc_chunk>:
{
   2776a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2776e:	4605      	mov	r5, r0
   27770:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   27772:	f7ff ff7a 	bl	2766a <bucket_idx>
   27776:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   2777a:	4606      	mov	r6, r0
	if (b->next) {
   2777c:	f8da 9010 	ldr.w	r9, [sl, #16]
   27780:	f1b9 0f00 	cmp.w	r9, #0
   27784:	d01b      	beq.n	277be <alloc_chunk+0x54>
   27786:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   27788:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   2778c:	4628      	mov	r0, r5
   2778e:	4621      	mov	r1, r4
   27790:	f7ff ff3f 	bl	27612 <chunk_size>
   27794:	4540      	cmp	r0, r8
   27796:	d307      	bcc.n	277a8 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   27798:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   2779a:	4621      	mov	r1, r4
   2779c:	4628      	mov	r0, r5
   2779e:	f7ff ffb5 	bl	2770c <free_list_remove_bidx>
}
   277a2:	4620      	mov	r0, r4
   277a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   277a8:	2203      	movs	r2, #3
   277aa:	4621      	mov	r1, r4
   277ac:	4628      	mov	r0, r5
   277ae:	f7ff ff1a 	bl	275e6 <chunk_field>
		} while (--i && b->next != first);
   277b2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   277b4:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   277b8:	d001      	beq.n	277be <alloc_chunk+0x54>
   277ba:	4581      	cmp	r9, r0
   277bc:	d1e4      	bne.n	27788 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   277be:	68e9      	ldr	r1, [r5, #12]
   277c0:	3601      	adds	r6, #1
   277c2:	f04f 34ff 	mov.w	r4, #4294967295
   277c6:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   277c8:	400c      	ands	r4, r1
   277ca:	d0ea      	beq.n	277a2 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   277cc:	fa94 f2a4 	rbit	r2, r4
   277d0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   277d4:	1d13      	adds	r3, r2, #4
   277d6:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   277da:	e7de      	b.n	2779a <alloc_chunk+0x30>

000277dc <free_list_add>:
{
   277dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   277e0:	4604      	mov	r4, r0
   277e2:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   277e4:	f7ff ff15 	bl	27612 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   277e8:	68a3      	ldr	r3, [r4, #8]
   277ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   277ee:	4601      	mov	r1, r0
   277f0:	d301      	bcc.n	277f6 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   277f2:	2801      	cmp	r0, #1
   277f4:	d035      	beq.n	27862 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   277f6:	4620      	mov	r0, r4
   277f8:	f7ff ff37 	bl	2766a <bucket_idx>
	if (b->next == 0U) {
   277fc:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   27800:	6916      	ldr	r6, [r2, #16]
   27802:	b99e      	cbnz	r6, 2782c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   27804:	2301      	movs	r3, #1
   27806:	fa03 f000 	lsl.w	r0, r3, r0
   2780a:	68e3      	ldr	r3, [r4, #12]
   2780c:	4303      	orrs	r3, r0
   2780e:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   27810:	4629      	mov	r1, r5
		b->next = c;
   27812:	6115      	str	r5, [r2, #16]
   27814:	462b      	mov	r3, r5
   27816:	2202      	movs	r2, #2
   27818:	4620      	mov	r0, r4
   2781a:	f7ff feef 	bl	275fc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2781e:	2203      	movs	r2, #3
   27820:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   27822:	4620      	mov	r0, r4
}
   27824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27828:	f7ff bee8 	b.w	275fc <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2782c:	2202      	movs	r2, #2
   2782e:	4631      	mov	r1, r6
   27830:	4620      	mov	r0, r4
   27832:	f7ff fed8 	bl	275e6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   27836:	2202      	movs	r2, #2
   27838:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   2783a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2783c:	4629      	mov	r1, r5
   2783e:	4620      	mov	r0, r4
   27840:	f7ff fedc 	bl	275fc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   27844:	4633      	mov	r3, r6
   27846:	2203      	movs	r2, #3
   27848:	4629      	mov	r1, r5
   2784a:	4620      	mov	r0, r4
   2784c:	f7ff fed6 	bl	275fc <chunk_set>
   27850:	2203      	movs	r2, #3
   27852:	4639      	mov	r1, r7
   27854:	462b      	mov	r3, r5
   27856:	4620      	mov	r0, r4
   27858:	f7ff fed0 	bl	275fc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2785c:	2202      	movs	r2, #2
   2785e:	4631      	mov	r1, r6
   27860:	e7df      	b.n	27822 <free_list_add+0x46>
   27862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027866 <free_list_remove>:
{
   27866:	b538      	push	{r3, r4, r5, lr}
   27868:	4604      	mov	r4, r0
   2786a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2786c:	f7ff fed1 	bl	27612 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   27870:	68a3      	ldr	r3, [r4, #8]
   27872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27876:	4601      	mov	r1, r0
   27878:	d301      	bcc.n	2787e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2787a:	2801      	cmp	r0, #1
   2787c:	d009      	beq.n	27892 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2787e:	4620      	mov	r0, r4
   27880:	f7ff fef3 	bl	2766a <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   27884:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   27886:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   27888:	4620      	mov	r0, r4
}
   2788a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2788e:	f7ff bf3d 	b.w	2770c <free_list_remove_bidx>
}
   27892:	bd38      	pop	{r3, r4, r5, pc}

00027894 <free_chunk>:
{
   27894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27896:	460c      	mov	r4, r1
   27898:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2789a:	f7ff feba 	bl	27612 <chunk_size>
   2789e:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   278a0:	2201      	movs	r2, #1
   278a2:	4631      	mov	r1, r6
   278a4:	4628      	mov	r0, r5
   278a6:	f7ff fe9e 	bl	275e6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   278aa:	07c3      	lsls	r3, r0, #31
   278ac:	d40c      	bmi.n	278c8 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   278ae:	4631      	mov	r1, r6
   278b0:	4628      	mov	r0, r5
   278b2:	f7ff ffd8 	bl	27866 <free_list_remove>
	return c + chunk_size(h, c);
   278b6:	4621      	mov	r1, r4
   278b8:	4628      	mov	r0, r5
   278ba:	f7ff feaa 	bl	27612 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   278be:	4621      	mov	r1, r4
   278c0:	1822      	adds	r2, r4, r0
   278c2:	4628      	mov	r0, r5
   278c4:	f7ff fedd 	bl	27682 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   278c8:	2200      	movs	r2, #0
   278ca:	4621      	mov	r1, r4
   278cc:	4628      	mov	r0, r5
   278ce:	f7ff fe8a 	bl	275e6 <chunk_field>
   278d2:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   278d4:	2201      	movs	r2, #1
   278d6:	4639      	mov	r1, r7
   278d8:	4628      	mov	r0, r5
   278da:	f7ff fe84 	bl	275e6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   278de:	f010 0601 	ands.w	r6, r0, #1
   278e2:	d113      	bne.n	2790c <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   278e4:	4639      	mov	r1, r7
   278e6:	4628      	mov	r0, r5
   278e8:	f7ff ffbd 	bl	27866 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   278ec:	4621      	mov	r1, r4
   278ee:	4632      	mov	r2, r6
   278f0:	4628      	mov	r0, r5
   278f2:	f7ff fe78 	bl	275e6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   278f6:	4622      	mov	r2, r4
   278f8:	1a21      	subs	r1, r4, r0
   278fa:	4628      	mov	r0, r5
   278fc:	f7ff fec1 	bl	27682 <merge_chunks>
   27900:	4621      	mov	r1, r4
   27902:	4632      	mov	r2, r6
   27904:	4628      	mov	r0, r5
   27906:	f7ff fe6e 	bl	275e6 <chunk_field>
   2790a:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   2790c:	4621      	mov	r1, r4
   2790e:	4628      	mov	r0, r5
}
   27910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   27914:	f7ff bf62 	b.w	277dc <free_list_add>

00027918 <sys_heap_alloc>:
{
   27918:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2791a:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2791c:	b909      	cbnz	r1, 27922 <sys_heap_alloc+0xa>
		return NULL;
   2791e:	2000      	movs	r0, #0
}
   27920:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   27922:	68a2      	ldr	r2, [r4, #8]
   27924:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   27928:	d9f9      	bls.n	2791e <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   2792a:	4620      	mov	r0, r4
   2792c:	f7ff fe93 	bl	27656 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   27930:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   27932:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   27934:	4620      	mov	r0, r4
   27936:	f7ff ff18 	bl	2776a <alloc_chunk>
	if (c == 0U) {
   2793a:	4605      	mov	r5, r0
   2793c:	2800      	cmp	r0, #0
   2793e:	d0ee      	beq.n	2791e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   27940:	4601      	mov	r1, r0
   27942:	4620      	mov	r0, r4
   27944:	f7ff fe65 	bl	27612 <chunk_size>
   27948:	42b0      	cmp	r0, r6
   2794a:	d909      	bls.n	27960 <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   2794c:	442e      	add	r6, r5
   2794e:	4629      	mov	r1, r5
   27950:	4620      	mov	r0, r4
   27952:	4632      	mov	r2, r6
   27954:	f7ff feb3 	bl	276be <split_chunks>
		free_list_add(h, c + chunk_sz);
   27958:	4631      	mov	r1, r6
   2795a:	4620      	mov	r0, r4
   2795c:	f7ff ff3e 	bl	277dc <free_list_add>
	set_chunk_used(h, c, true);
   27960:	4620      	mov	r0, r4
   27962:	2201      	movs	r2, #1
   27964:	4629      	mov	r1, r5
   27966:	f7ff fe5a 	bl	2761e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2796a:	68a3      	ldr	r3, [r4, #8]
   2796c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27970:	bf2c      	ite	cs
   27972:	2008      	movcs	r0, #8
   27974:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   27976:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   2797a:	4420      	add	r0, r4
	return chunk_mem(h, c);
   2797c:	e7d0      	b.n	27920 <sys_heap_alloc+0x8>

0002797e <encode_uint>:
{
   2797e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27982:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   27984:	78d3      	ldrb	r3, [r2, #3]
{
   27986:	4614      	mov	r4, r2
	switch (specifier) {
   27988:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2798a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   2798e:	4606      	mov	r6, r0
   27990:	460f      	mov	r7, r1
   27992:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   27994:	d02d      	beq.n	279f2 <encode_uint+0x74>
   27996:	d828      	bhi.n	279ea <encode_uint+0x6c>
		return 16;
   27998:	2b58      	cmp	r3, #88	; 0x58
   2799a:	bf14      	ite	ne
   2799c:	250a      	movne	r5, #10
   2799e:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   279a0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   279a4:	46aa      	mov	sl, r5
   279a6:	f04f 0b00 	mov.w	fp, #0
   279aa:	4652      	mov	r2, sl
   279ac:	465b      	mov	r3, fp
   279ae:	4630      	mov	r0, r6
   279b0:	4639      	mov	r1, r7
   279b2:	f7d8 fba5 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   279b6:	2a09      	cmp	r2, #9
   279b8:	b2d3      	uxtb	r3, r2
   279ba:	d81f      	bhi.n	279fc <encode_uint+0x7e>
   279bc:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   279be:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   279c0:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   279c2:	bf08      	it	eq
   279c4:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   279c6:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   279ca:	d301      	bcc.n	279d0 <encode_uint+0x52>
   279cc:	45c8      	cmp	r8, r9
   279ce:	d812      	bhi.n	279f6 <encode_uint+0x78>
	if (conv->flag_hash) {
   279d0:	7823      	ldrb	r3, [r4, #0]
   279d2:	069b      	lsls	r3, r3, #26
   279d4:	d505      	bpl.n	279e2 <encode_uint+0x64>
		if (radix == 8) {
   279d6:	2d08      	cmp	r5, #8
   279d8:	d116      	bne.n	27a08 <encode_uint+0x8a>
			conv->altform_0 = true;
   279da:	78a3      	ldrb	r3, [r4, #2]
   279dc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   279e0:	70a3      	strb	r3, [r4, #2]
}
   279e2:	4640      	mov	r0, r8
   279e4:	b003      	add	sp, #12
   279e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   279ea:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   279ee:	2b70      	cmp	r3, #112	; 0x70
   279f0:	e7d3      	b.n	2799a <encode_uint+0x1c>
	switch (specifier) {
   279f2:	2508      	movs	r5, #8
   279f4:	e7d4      	b.n	279a0 <encode_uint+0x22>
		value /= radix;
   279f6:	4606      	mov	r6, r0
   279f8:	460f      	mov	r7, r1
   279fa:	e7d6      	b.n	279aa <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   279fc:	9a01      	ldr	r2, [sp, #4]
   279fe:	2a19      	cmp	r2, #25
   27a00:	bf94      	ite	ls
   27a02:	3337      	addls	r3, #55	; 0x37
   27a04:	3357      	addhi	r3, #87	; 0x57
   27a06:	e7da      	b.n	279be <encode_uint+0x40>
		} else if (radix == 16) {
   27a08:	2d10      	cmp	r5, #16
   27a0a:	d1ea      	bne.n	279e2 <encode_uint+0x64>
			conv->altform_0c = true;
   27a0c:	78a3      	ldrb	r3, [r4, #2]
   27a0e:	f043 0310 	orr.w	r3, r3, #16
   27a12:	e7e5      	b.n	279e0 <encode_uint+0x62>

00027a14 <outs>:
{
   27a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a18:	4607      	mov	r7, r0
   27a1a:	4688      	mov	r8, r1
   27a1c:	4615      	mov	r5, r2
   27a1e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27a20:	4614      	mov	r4, r2
   27a22:	42b4      	cmp	r4, r6
   27a24:	eba4 0005 	sub.w	r0, r4, r5
   27a28:	d302      	bcc.n	27a30 <outs+0x1c>
   27a2a:	b93e      	cbnz	r6, 27a3c <outs+0x28>
   27a2c:	7823      	ldrb	r3, [r4, #0]
   27a2e:	b12b      	cbz	r3, 27a3c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   27a30:	f814 0b01 	ldrb.w	r0, [r4], #1
   27a34:	4641      	mov	r1, r8
   27a36:	47b8      	blx	r7
		if (rc < 0) {
   27a38:	2800      	cmp	r0, #0
   27a3a:	daf2      	bge.n	27a22 <outs+0xe>
}
   27a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027a40 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   27a40:	4040      	eors	r0, r0
   27a42:	f380 8811 	msr	BASEPRI, r0
   27a46:	f04f 0004 	mov.w	r0, #4
   27a4a:	df02      	svc	2
}
   27a4c:	4770      	bx	lr

00027a4e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_DEV, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   27a4e:	4770      	bx	lr

00027a50 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   27a50:	2300      	movs	r3, #0
	list->head = NULL;
   27a52:	e9c0 3300 	strd	r3, r3, [r0]
}
   27a56:	4770      	bx	lr

00027a58 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   27a58:	6803      	ldr	r3, [r0, #0]
   27a5a:	b923      	cbnz	r3, 27a66 <log_list_add_tail+0xe>
		list->head = msg;
   27a5c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   27a5e:	2300      	movs	r3, #0
	list->tail = msg;
   27a60:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   27a62:	600b      	str	r3, [r1, #0]
}
   27a64:	4770      	bx	lr
		list->tail->next = msg;
   27a66:	6843      	ldr	r3, [r0, #4]
   27a68:	6019      	str	r1, [r3, #0]
   27a6a:	e7f8      	b.n	27a5e <log_list_add_tail+0x6>

00027a6c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   27a6c:	6800      	ldr	r0, [r0, #0]
   27a6e:	4770      	bx	lr

00027a70 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   27a70:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   27a72:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   27a74:	b108      	cbz	r0, 27a7a <log_list_head_get+0xa>
		list->head = list->head->next;
   27a76:	6802      	ldr	r2, [r0, #0]
   27a78:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   27a7a:	4770      	bx	lr

00027a7c <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   27a7c:	6843      	ldr	r3, [r0, #4]
}
   27a7e:	7958      	ldrb	r0, [r3, #5]
   27a80:	4770      	bx	lr

00027a82 <z_log_msg_std_alloc>:
{
   27a82:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   27a84:	f7ea f9c0 	bl	11e08 <log_msg_chunk_alloc>
	if (msg != NULL) {
   27a88:	b118      	cbz	r0, 27a92 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   27a8a:	2301      	movs	r3, #1
   27a8c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   27a8e:	2300      	movs	r3, #0
   27a90:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   27a92:	bd08      	pop	{r3, pc}

00027a94 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   27a94:	f7ec b87a 	b.w	13b8c <sys_clock_cycle_get_32>

00027a98 <dummy_timestamp>:
   27a98:	2000      	movs	r0, #0
   27a9a:	4770      	bx	lr

00027a9c <log_0>:
{
   27a9c:	b538      	push	{r3, r4, r5, lr}
   27a9e:	4605      	mov	r5, r0
   27aa0:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   27aa2:	f7ff ffee 	bl	27a82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   27aa6:	b128      	cbz	r0, 27ab4 <log_0+0x18>
		msg->str = str;
   27aa8:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   27aaa:	4621      	mov	r1, r4
}
   27aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   27ab0:	f7ea b8a8 	b.w	11c04 <msg_finalize>
}
   27ab4:	bd38      	pop	{r3, r4, r5, pc}

00027ab6 <log_1>:
{
   27ab6:	b570      	push	{r4, r5, r6, lr}
   27ab8:	4606      	mov	r6, r0
   27aba:	460d      	mov	r5, r1
   27abc:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   27abe:	f7ff ffe0 	bl	27a82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   27ac2:	b158      	cbz	r0, 27adc <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   27ac4:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   27ac6:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   27ac8:	2101      	movs	r1, #1
   27aca:	f361 1207 	bfi	r2, r1, #4, #4
   27ace:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   27ad0:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   27ad2:	4621      	mov	r1, r4
}
   27ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   27ad8:	f7ea b894 	b.w	11c04 <msg_finalize>
}
   27adc:	bd70      	pop	{r4, r5, r6, pc}

00027ade <log_2>:
{
   27ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ae2:	4680      	mov	r8, r0
   27ae4:	460f      	mov	r7, r1
   27ae6:	4616      	mov	r6, r2
   27ae8:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   27aea:	f7ff ffca 	bl	27a82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   27aee:	b168      	cbz	r0, 27b0c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   27af0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   27af2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   27af6:	2202      	movs	r2, #2
   27af8:	f362 1307 	bfi	r3, r2, #4, #4
   27afc:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   27afe:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   27b02:	4629      	mov	r1, r5
}
   27b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   27b08:	f7ea b87c 	b.w	11c04 <msg_finalize>
}
   27b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027b10 <log_3>:
{
   27b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27b14:	4680      	mov	r8, r0
   27b16:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   27b1a:	460f      	mov	r7, r1
   27b1c:	4616      	mov	r6, r2
   27b1e:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   27b20:	f7ff ffaf 	bl	27a82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   27b24:	b170      	cbz	r0, 27b44 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   27b26:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   27b28:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   27b2c:	2203      	movs	r2, #3
   27b2e:	f362 1307 	bfi	r3, r2, #4, #4
   27b32:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   27b34:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   27b38:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   27b3a:	4649      	mov	r1, r9
}
   27b3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   27b40:	f7ea b860 	b.w	11c04 <msg_finalize>
}
   27b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027b48 <log_n>:
{
   27b48:	b510      	push	{r4, lr}
   27b4a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   27b4c:	f7ea f9ae 	bl	11eac <log_msg_create_n>
		if (msg == NULL) {
   27b50:	b120      	cbz	r0, 27b5c <log_n+0x14>
		msg_finalize(msg, src_level);
   27b52:	4621      	mov	r1, r4
}
   27b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   27b58:	f7ea b854 	b.w	11c04 <msg_finalize>
}
   27b5c:	bd10      	pop	{r4, pc}

00027b5e <log_hexdump>:
{
   27b5e:	b510      	push	{r4, lr}
   27b60:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   27b62:	f000 f8b9 	bl	27cd8 <log_msg_hexdump_create>
		if (msg == NULL) {
   27b66:	b120      	cbz	r0, 27b72 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   27b68:	4621      	mov	r1, r4
}
   27b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   27b6e:	f7ea b849 	b.w	11c04 <msg_finalize>
}
   27b72:	bd10      	pop	{r4, pc}

00027b74 <z_log_printk>:
{
   27b74:	b500      	push	{lr}
   27b76:	b0a3      	sub	sp, #140	; 0x8c
   27b78:	4602      	mov	r2, r0
   27b7a:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   27b7c:	a801      	add	r0, sp, #4
   27b7e:	2181      	movs	r1, #129	; 0x81
   27b80:	f7e8 fdb8 	bl	106f4 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   27b84:	2881      	cmp	r0, #129	; 0x81
   27b86:	4602      	mov	r2, r0
   27b88:	a901      	add	r1, sp, #4
   27b8a:	bf28      	it	cs
   27b8c:	2281      	movcs	r2, #129	; 0x81
   27b8e:	2000      	movs	r0, #0
   27b90:	f000 f8a2 	bl	27cd8 <log_msg_hexdump_create>
			if (msg == NULL) {
   27b94:	b118      	cbz	r0, 27b9e <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   27b96:	f04f 0100 	mov.w	r1, #0
   27b9a:	f7ea f833 	bl	11c04 <msg_finalize>
}
   27b9e:	b023      	add	sp, #140	; 0x8c
   27ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00027ba4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   27ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27ba8:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   27baa:	8903      	ldrh	r3, [r0, #8]
{
   27bac:	f89d 7020 	ldrb.w	r7, [sp, #32]
   27bb0:	460e      	mov	r6, r1
   27bb2:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   27bb4:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   27bb8:	42a2      	cmp	r2, r4
   27bba:	d803      	bhi.n	27bc4 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   27bbc:	2300      	movs	r3, #0
   27bbe:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   27bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   27bc4:	680b      	ldr	r3, [r1, #0]
   27bc6:	4423      	add	r3, r4
   27bc8:	4293      	cmp	r3, r2
		*length = available_len - offset;
   27bca:	bf84      	itt	hi
   27bcc:	1b13      	subhi	r3, r2, r4
   27bce:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   27bd0:	2a0c      	cmp	r2, #12
	req_len = *length;
   27bd2:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   27bd6:	d92a      	bls.n	27c2e <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   27bd8:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   27bda:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   27bde:	d82d      	bhi.n	27c3c <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   27be0:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   27be2:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   27be4:	454a      	cmp	r2, r9
   27be6:	bf28      	it	cs
   27be8:	464a      	movcs	r2, r9
   27bea:	4615      	mov	r5, r2
		if (put_op) {
   27bec:	4420      	add	r0, r4
   27bee:	b317      	cbz	r7, 27c36 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   27bf0:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   27bf2:	f001 ff32 	bl	29a5a <memcpy>
		req_len -= cpy_len;
   27bf6:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   27bfa:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   27bfc:	f1b9 0f00 	cmp.w	r9, #0
   27c00:	d0de      	beq.n	27bc0 <log_msg_hexdump_data_op+0x1c>
   27c02:	f1b8 0f00 	cmp.w	r8, #0
   27c06:	d0db      	beq.n	27bc0 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   27c08:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   27c0c:	454d      	cmp	r5, r9
   27c0e:	bf28      	it	cs
   27c10:	464d      	movcs	r5, r9
		if (put_op) {
   27c12:	1d20      	adds	r0, r4, #4
   27c14:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   27c16:	462a      	mov	r2, r5
		if (put_op) {
   27c18:	b1bf      	cbz	r7, 27c4a <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   27c1a:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   27c1c:	f001 ff1d 	bl	29a5a <memcpy>
		req_len -= cpy_len;
   27c20:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   27c24:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   27c28:	442e      	add	r6, r5
		offset = 0;
   27c2a:	2400      	movs	r4, #0
   27c2c:	e7e6      	b.n	27bfc <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   27c2e:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   27c30:	f04f 0800 	mov.w	r8, #0
   27c34:	e7d6      	b.n	27be4 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   27c36:	4601      	mov	r1, r0
   27c38:	4630      	mov	r0, r6
   27c3a:	e7da      	b.n	27bf2 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   27c3c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   27c3e:	2c1b      	cmp	r4, #27
   27c40:	d9dc      	bls.n	27bfc <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   27c42:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   27c46:	3c1c      	subs	r4, #28
   27c48:	e7f9      	b.n	27c3e <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   27c4a:	4601      	mov	r1, r0
   27c4c:	4630      	mov	r0, r6
   27c4e:	e7e5      	b.n	27c1c <log_msg_hexdump_data_op+0x78>

00027c50 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   27c50:	3004      	adds	r0, #4
   27c52:	f3bf 8f5b 	dmb	ish
   27c56:	e850 3f00 	ldrex	r3, [r0]
   27c5a:	3301      	adds	r3, #1
   27c5c:	e840 3200 	strex	r2, r3, [r0]
   27c60:	2a00      	cmp	r2, #0
   27c62:	d1f8      	bne.n	27c56 <log_msg_get+0x6>
   27c64:	f3bf 8f5b 	dmb	ish
}
   27c68:	4770      	bx	lr

00027c6a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   27c6a:	7a40      	ldrb	r0, [r0, #9]
}
   27c6c:	0900      	lsrs	r0, r0, #4
   27c6e:	4770      	bx	lr

00027c70 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   27c70:	7a43      	ldrb	r3, [r0, #9]
   27c72:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   27c76:	ea4f 1213 	mov.w	r2, r3, lsr #4
   27c7a:	d216      	bcs.n	27caa <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   27c7c:	2a03      	cmp	r2, #3
   27c7e:	d803      	bhi.n	27c88 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   27c80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   27c84:	6948      	ldr	r0, [r1, #20]
   27c86:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   27c88:	2901      	cmp	r1, #1
   27c8a:	d803      	bhi.n	27c94 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   27c8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   27c90:	6988      	ldr	r0, [r1, #24]
   27c92:	4770      	bx	lr
	cont = msg->payload.ext.next;
   27c94:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   27c96:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   27c98:	2906      	cmp	r1, #6
   27c9a:	d803      	bhi.n	27ca4 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   27c9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   27ca0:	6848      	ldr	r0, [r1, #4]
   27ca2:	4770      	bx	lr
		cont = cont->next;
   27ca4:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   27ca6:	3907      	subs	r1, #7
		cont = cont->next;
   27ca8:	e7f6      	b.n	27c98 <log_msg_arg_get+0x28>
		return 0;
   27caa:	2000      	movs	r0, #0
}
   27cac:	4770      	bx	lr

00027cae <log_msg_put>:
{
   27cae:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27cb0:	1d02      	adds	r2, r0, #4
   27cb2:	f3bf 8f5b 	dmb	ish
   27cb6:	e852 1f00 	ldrex	r1, [r2]
   27cba:	3901      	subs	r1, #1
   27cbc:	e842 1c00 	strex	ip, r1, [r2]
   27cc0:	f1bc 0f00 	cmp.w	ip, #0
   27cc4:	d1f7      	bne.n	27cb6 <log_msg_put+0x8>
   27cc6:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   27cca:	685b      	ldr	r3, [r3, #4]
   27ccc:	b90b      	cbnz	r3, 27cd2 <log_msg_put+0x24>
		msg_free(msg);
   27cce:	f7ea b8af 	b.w	11e30 <msg_free>
}
   27cd2:	4770      	bx	lr

00027cd4 <log_msg_str_get>:
}
   27cd4:	6900      	ldr	r0, [r0, #16]
   27cd6:	4770      	bx	lr

00027cd8 <log_msg_hexdump_create>:
{
   27cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   27cdc:	f643 75ff 	movw	r5, #16383	; 0x3fff
   27ce0:	4295      	cmp	r5, r2
{
   27ce2:	4680      	mov	r8, r0
   27ce4:	460e      	mov	r6, r1
   27ce6:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   27ce8:	bf28      	it	cs
   27cea:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   27cec:	f7ea f88c 	bl	11e08 <log_msg_chunk_alloc>
	if (msg == NULL) {
   27cf0:	4604      	mov	r4, r0
   27cf2:	b380      	cbz	r0, 27d56 <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   27cf4:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   27cf6:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   27cfa:	2301      	movs	r3, #1
   27cfc:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   27cfe:	00ab      	lsls	r3, r5, #2
   27d00:	f043 0301 	orr.w	r3, r3, #1
   27d04:	f002 0202 	and.w	r2, r2, #2
   27d08:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   27d0a:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   27d0c:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   27d0e:	f100 0814 	add.w	r8, r0, #20
   27d12:	d917      	bls.n	27d44 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   27d14:	2208      	movs	r2, #8
   27d16:	4631      	mov	r1, r6
   27d18:	3018      	adds	r0, #24
   27d1a:	f001 fe9e 	bl	29a5a <memcpy>
		msg->hdr.params.generic.ext = 1;
   27d1e:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   27d20:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   27d22:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   27d26:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   27d28:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   27d2a:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   27d2c:	3d08      	subs	r5, #8
	while (length > 0) {
   27d2e:	4699      	mov	r9, r3
   27d30:	b18d      	cbz	r5, 27d56 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   27d32:	f7ea f869 	bl	11e08 <log_msg_chunk_alloc>
		if (cont == NULL) {
   27d36:	4607      	mov	r7, r0
   27d38:	b980      	cbnz	r0, 27d5c <log_msg_hexdump_create+0x84>
			msg_free(msg);
   27d3a:	4620      	mov	r0, r4
   27d3c:	f7ea f878 	bl	11e30 <msg_free>
			return NULL;
   27d40:	463c      	mov	r4, r7
   27d42:	e008      	b.n	27d56 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   27d44:	462a      	mov	r2, r5
   27d46:	4631      	mov	r1, r6
   27d48:	4640      	mov	r0, r8
   27d4a:	f001 fe86 	bl	29a5a <memcpy>
		msg->hdr.params.generic.ext = 0;
   27d4e:	7a23      	ldrb	r3, [r4, #8]
   27d50:	f36f 0341 	bfc	r3, #1, #1
   27d54:	7223      	strb	r3, [r4, #8]
}
   27d56:	4620      	mov	r0, r4
   27d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   27d5c:	2d1c      	cmp	r5, #28
   27d5e:	462f      	mov	r7, r5
   27d60:	bf28      	it	cs
   27d62:	271c      	movcs	r7, #28
		*prev_cont = cont;
   27d64:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   27d68:	4631      	mov	r1, r6
		cont->next = NULL;
   27d6a:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   27d6e:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   27d70:	463a      	mov	r2, r7
   27d72:	3004      	adds	r0, #4
   27d74:	f001 fe71 	bl	29a5a <memcpy>
		data += chunk_length;
   27d78:	443e      	add	r6, r7
		length -= chunk_length;
   27d7a:	1bed      	subs	r5, r5, r7
   27d7c:	e7d8      	b.n	27d30 <log_msg_hexdump_create+0x58>

00027d7e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   27d7e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   27d80:	2400      	movs	r4, #0
   27d82:	9400      	str	r4, [sp, #0]
   27d84:	f7ff ff0e 	bl	27ba4 <log_msg_hexdump_data_op>
}
   27d88:	b002      	add	sp, #8
   27d8a:	bd10      	pop	{r4, pc}

00027d8c <buffer_write>:
{
   27d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d8e:	4606      	mov	r6, r0
   27d90:	460d      	mov	r5, r1
   27d92:	4614      	mov	r4, r2
   27d94:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   27d96:	4621      	mov	r1, r4
   27d98:	4628      	mov	r0, r5
   27d9a:	463a      	mov	r2, r7
   27d9c:	47b0      	blx	r6
	} while (len != 0);
   27d9e:	1a24      	subs	r4, r4, r0
		buf += processed;
   27da0:	4405      	add	r5, r0
	} while (len != 0);
   27da2:	d1f8      	bne.n	27d96 <buffer_write+0xa>
}
   27da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027da6 <std_print>:
{
   27da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27daa:	b08e      	sub	sp, #56	; 0x38
   27dac:	af0e      	add	r7, sp, #56	; 0x38
   27dae:	4680      	mov	r8, r0
   27db0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   27db2:	f7ff ff8f 	bl	27cd4 <log_msg_str_get>
   27db6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   27db8:	4640      	mov	r0, r8
   27dba:	f7ff ff56 	bl	27c6a <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   27dbe:	0083      	lsls	r3, r0, #2
   27dc0:	3307      	adds	r3, #7
   27dc2:	f023 0307 	bic.w	r3, r3, #7
   27dc6:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   27dca:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   27dcc:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   27dce:	f04f 0900 	mov.w	r9, #0
   27dd2:	45d1      	cmp	r9, sl
   27dd4:	d116      	bne.n	27e04 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   27dd6:	4640      	mov	r0, r8
   27dd8:	f7ff ff47 	bl	27c6a <log_msg_nargs_get>
   27ddc:	280f      	cmp	r0, #15
   27dde:	d81e      	bhi.n	27e1e <std_print+0x78>
   27de0:	e8df f010 	tbh	[pc, r0, lsl #1]
   27de4:	00200019 	.word	0x00200019
   27de8:	002d0026 	.word	0x002d0026
   27dec:	00410036 	.word	0x00410036
   27df0:	005d004e 	.word	0x005d004e
   27df4:	0081006e 	.word	0x0081006e
   27df8:	00ad0096 	.word	0x00ad0096
   27dfc:	00e100c6 	.word	0x00e100c6
   27e00:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   27e04:	4649      	mov	r1, r9
   27e06:	4640      	mov	r0, r8
   27e08:	f7ff ff32 	bl	27c70 <log_msg_arg_get>
   27e0c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   27e10:	f109 0901 	add.w	r9, r9, #1
   27e14:	e7dd      	b.n	27dd2 <std_print+0x2c>
		print_formatted(output, str);
   27e16:	4631      	mov	r1, r6
   27e18:	4628      	mov	r0, r5
   27e1a:	f7ea f8af 	bl	11f7c <print_formatted>
}
   27e1e:	46bd      	mov	sp, r7
   27e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   27e24:	6822      	ldr	r2, [r4, #0]
   27e26:	4631      	mov	r1, r6
   27e28:	4628      	mov	r0, r5
   27e2a:	f7ea f8a7 	bl	11f7c <print_formatted>
		break;
   27e2e:	e7f6      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   27e30:	e9d4 2300 	ldrd	r2, r3, [r4]
   27e34:	4631      	mov	r1, r6
   27e36:	4628      	mov	r0, r5
   27e38:	f7ea f8a0 	bl	11f7c <print_formatted>
		break;
   27e3c:	e7ef      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   27e3e:	68a3      	ldr	r3, [r4, #8]
   27e40:	9300      	str	r3, [sp, #0]
   27e42:	e9d4 2300 	ldrd	r2, r3, [r4]
   27e46:	4631      	mov	r1, r6
   27e48:	4628      	mov	r0, r5
   27e4a:	f7ea f897 	bl	11f7c <print_formatted>
		break;
   27e4e:	e7e6      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27e50:	68e3      	ldr	r3, [r4, #12]
   27e52:	9301      	str	r3, [sp, #4]
   27e54:	68a3      	ldr	r3, [r4, #8]
   27e56:	9300      	str	r3, [sp, #0]
   27e58:	e9d4 2300 	ldrd	r2, r3, [r4]
   27e5c:	4631      	mov	r1, r6
   27e5e:	4628      	mov	r0, r5
   27e60:	f7ea f88c 	bl	11f7c <print_formatted>
		break;
   27e64:	e7db      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27e66:	6923      	ldr	r3, [r4, #16]
   27e68:	9302      	str	r3, [sp, #8]
   27e6a:	68e3      	ldr	r3, [r4, #12]
   27e6c:	9301      	str	r3, [sp, #4]
   27e6e:	68a3      	ldr	r3, [r4, #8]
   27e70:	9300      	str	r3, [sp, #0]
   27e72:	e9d4 2300 	ldrd	r2, r3, [r4]
   27e76:	4631      	mov	r1, r6
   27e78:	4628      	mov	r0, r5
   27e7a:	f7ea f87f 	bl	11f7c <print_formatted>
		break;
   27e7e:	e7ce      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27e80:	6963      	ldr	r3, [r4, #20]
   27e82:	9303      	str	r3, [sp, #12]
   27e84:	6923      	ldr	r3, [r4, #16]
   27e86:	9302      	str	r3, [sp, #8]
   27e88:	68e3      	ldr	r3, [r4, #12]
   27e8a:	9301      	str	r3, [sp, #4]
   27e8c:	68a3      	ldr	r3, [r4, #8]
   27e8e:	9300      	str	r3, [sp, #0]
   27e90:	e9d4 2300 	ldrd	r2, r3, [r4]
   27e94:	4631      	mov	r1, r6
   27e96:	4628      	mov	r0, r5
   27e98:	f7ea f870 	bl	11f7c <print_formatted>
		break;
   27e9c:	e7bf      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27e9e:	69a3      	ldr	r3, [r4, #24]
   27ea0:	9304      	str	r3, [sp, #16]
   27ea2:	6963      	ldr	r3, [r4, #20]
   27ea4:	9303      	str	r3, [sp, #12]
   27ea6:	6923      	ldr	r3, [r4, #16]
   27ea8:	9302      	str	r3, [sp, #8]
   27eaa:	68e3      	ldr	r3, [r4, #12]
   27eac:	9301      	str	r3, [sp, #4]
   27eae:	68a3      	ldr	r3, [r4, #8]
   27eb0:	9300      	str	r3, [sp, #0]
   27eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
   27eb6:	4631      	mov	r1, r6
   27eb8:	4628      	mov	r0, r5
   27eba:	f7ea f85f 	bl	11f7c <print_formatted>
		break;
   27ebe:	e7ae      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27ec0:	69e3      	ldr	r3, [r4, #28]
   27ec2:	9305      	str	r3, [sp, #20]
   27ec4:	69a3      	ldr	r3, [r4, #24]
   27ec6:	9304      	str	r3, [sp, #16]
   27ec8:	6963      	ldr	r3, [r4, #20]
   27eca:	9303      	str	r3, [sp, #12]
   27ecc:	6923      	ldr	r3, [r4, #16]
   27ece:	9302      	str	r3, [sp, #8]
   27ed0:	68e3      	ldr	r3, [r4, #12]
   27ed2:	9301      	str	r3, [sp, #4]
   27ed4:	68a3      	ldr	r3, [r4, #8]
   27ed6:	9300      	str	r3, [sp, #0]
   27ed8:	e9d4 2300 	ldrd	r2, r3, [r4]
   27edc:	4631      	mov	r1, r6
   27ede:	4628      	mov	r0, r5
   27ee0:	f7ea f84c 	bl	11f7c <print_formatted>
		break;
   27ee4:	e79b      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27ee6:	6a23      	ldr	r3, [r4, #32]
   27ee8:	9306      	str	r3, [sp, #24]
   27eea:	69e3      	ldr	r3, [r4, #28]
   27eec:	9305      	str	r3, [sp, #20]
   27eee:	69a3      	ldr	r3, [r4, #24]
   27ef0:	9304      	str	r3, [sp, #16]
   27ef2:	6963      	ldr	r3, [r4, #20]
   27ef4:	9303      	str	r3, [sp, #12]
   27ef6:	6923      	ldr	r3, [r4, #16]
   27ef8:	9302      	str	r3, [sp, #8]
   27efa:	68e3      	ldr	r3, [r4, #12]
   27efc:	9301      	str	r3, [sp, #4]
   27efe:	68a3      	ldr	r3, [r4, #8]
   27f00:	9300      	str	r3, [sp, #0]
   27f02:	e9d4 2300 	ldrd	r2, r3, [r4]
   27f06:	4631      	mov	r1, r6
   27f08:	4628      	mov	r0, r5
   27f0a:	f7ea f837 	bl	11f7c <print_formatted>
		break;
   27f0e:	e786      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27f12:	9307      	str	r3, [sp, #28]
   27f14:	6a23      	ldr	r3, [r4, #32]
   27f16:	9306      	str	r3, [sp, #24]
   27f18:	69e3      	ldr	r3, [r4, #28]
   27f1a:	9305      	str	r3, [sp, #20]
   27f1c:	69a3      	ldr	r3, [r4, #24]
   27f1e:	9304      	str	r3, [sp, #16]
   27f20:	6963      	ldr	r3, [r4, #20]
   27f22:	9303      	str	r3, [sp, #12]
   27f24:	6923      	ldr	r3, [r4, #16]
   27f26:	9302      	str	r3, [sp, #8]
   27f28:	68e3      	ldr	r3, [r4, #12]
   27f2a:	9301      	str	r3, [sp, #4]
   27f2c:	68a3      	ldr	r3, [r4, #8]
   27f2e:	9300      	str	r3, [sp, #0]
   27f30:	e9d4 2300 	ldrd	r2, r3, [r4]
   27f34:	4631      	mov	r1, r6
   27f36:	4628      	mov	r0, r5
   27f38:	f7ea f820 	bl	11f7c <print_formatted>
		break;
   27f3c:	e76f      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27f3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27f40:	9308      	str	r3, [sp, #32]
   27f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27f44:	9307      	str	r3, [sp, #28]
   27f46:	6a23      	ldr	r3, [r4, #32]
   27f48:	9306      	str	r3, [sp, #24]
   27f4a:	69e3      	ldr	r3, [r4, #28]
   27f4c:	9305      	str	r3, [sp, #20]
   27f4e:	69a3      	ldr	r3, [r4, #24]
   27f50:	9304      	str	r3, [sp, #16]
   27f52:	6963      	ldr	r3, [r4, #20]
   27f54:	9303      	str	r3, [sp, #12]
   27f56:	6923      	ldr	r3, [r4, #16]
   27f58:	9302      	str	r3, [sp, #8]
   27f5a:	68e3      	ldr	r3, [r4, #12]
   27f5c:	9301      	str	r3, [sp, #4]
   27f5e:	68a3      	ldr	r3, [r4, #8]
   27f60:	9300      	str	r3, [sp, #0]
   27f62:	e9d4 2300 	ldrd	r2, r3, [r4]
   27f66:	4631      	mov	r1, r6
   27f68:	4628      	mov	r0, r5
   27f6a:	f7ea f807 	bl	11f7c <print_formatted>
		break;
   27f6e:	e756      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27f70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27f72:	9309      	str	r3, [sp, #36]	; 0x24
   27f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27f76:	9308      	str	r3, [sp, #32]
   27f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27f7a:	9307      	str	r3, [sp, #28]
   27f7c:	6a23      	ldr	r3, [r4, #32]
   27f7e:	9306      	str	r3, [sp, #24]
   27f80:	69e3      	ldr	r3, [r4, #28]
   27f82:	9305      	str	r3, [sp, #20]
   27f84:	69a3      	ldr	r3, [r4, #24]
   27f86:	9304      	str	r3, [sp, #16]
   27f88:	6963      	ldr	r3, [r4, #20]
   27f8a:	9303      	str	r3, [sp, #12]
   27f8c:	6923      	ldr	r3, [r4, #16]
   27f8e:	9302      	str	r3, [sp, #8]
   27f90:	68e3      	ldr	r3, [r4, #12]
   27f92:	9301      	str	r3, [sp, #4]
   27f94:	68a3      	ldr	r3, [r4, #8]
   27f96:	9300      	str	r3, [sp, #0]
   27f98:	e9d4 2300 	ldrd	r2, r3, [r4]
   27f9c:	4631      	mov	r1, r6
   27f9e:	4628      	mov	r0, r5
   27fa0:	f7e9 ffec 	bl	11f7c <print_formatted>
		break;
   27fa4:	e73b      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27fa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27fa8:	930a      	str	r3, [sp, #40]	; 0x28
   27faa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27fac:	9309      	str	r3, [sp, #36]	; 0x24
   27fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27fb0:	9308      	str	r3, [sp, #32]
   27fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27fb4:	9307      	str	r3, [sp, #28]
   27fb6:	6a23      	ldr	r3, [r4, #32]
   27fb8:	9306      	str	r3, [sp, #24]
   27fba:	69e3      	ldr	r3, [r4, #28]
   27fbc:	9305      	str	r3, [sp, #20]
   27fbe:	69a3      	ldr	r3, [r4, #24]
   27fc0:	9304      	str	r3, [sp, #16]
   27fc2:	6963      	ldr	r3, [r4, #20]
   27fc4:	9303      	str	r3, [sp, #12]
   27fc6:	6923      	ldr	r3, [r4, #16]
   27fc8:	9302      	str	r3, [sp, #8]
   27fca:	68e3      	ldr	r3, [r4, #12]
   27fcc:	9301      	str	r3, [sp, #4]
   27fce:	68a3      	ldr	r3, [r4, #8]
   27fd0:	9300      	str	r3, [sp, #0]
   27fd2:	e9d4 2300 	ldrd	r2, r3, [r4]
   27fd6:	4631      	mov	r1, r6
   27fd8:	4628      	mov	r0, r5
   27fda:	f7e9 ffcf 	bl	11f7c <print_formatted>
		break;
   27fde:	e71e      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27fe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27fe2:	930b      	str	r3, [sp, #44]	; 0x2c
   27fe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27fe6:	930a      	str	r3, [sp, #40]	; 0x28
   27fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27fea:	9309      	str	r3, [sp, #36]	; 0x24
   27fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27fee:	9308      	str	r3, [sp, #32]
   27ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27ff2:	9307      	str	r3, [sp, #28]
   27ff4:	6a23      	ldr	r3, [r4, #32]
   27ff6:	9306      	str	r3, [sp, #24]
   27ff8:	69e3      	ldr	r3, [r4, #28]
   27ffa:	9305      	str	r3, [sp, #20]
   27ffc:	69a3      	ldr	r3, [r4, #24]
   27ffe:	9304      	str	r3, [sp, #16]
   28000:	6963      	ldr	r3, [r4, #20]
   28002:	9303      	str	r3, [sp, #12]
   28004:	6923      	ldr	r3, [r4, #16]
   28006:	9302      	str	r3, [sp, #8]
   28008:	68e3      	ldr	r3, [r4, #12]
   2800a:	9301      	str	r3, [sp, #4]
   2800c:	68a3      	ldr	r3, [r4, #8]
   2800e:	9300      	str	r3, [sp, #0]
   28010:	e9d4 2300 	ldrd	r2, r3, [r4]
   28014:	4631      	mov	r1, r6
   28016:	4628      	mov	r0, r5
   28018:	f7e9 ffb0 	bl	11f7c <print_formatted>
		break;
   2801c:	e6ff      	b.n	27e1e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2801e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   28020:	930c      	str	r3, [sp, #48]	; 0x30
   28022:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28024:	930b      	str	r3, [sp, #44]	; 0x2c
   28026:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28028:	930a      	str	r3, [sp, #40]	; 0x28
   2802a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2802c:	9309      	str	r3, [sp, #36]	; 0x24
   2802e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28030:	9308      	str	r3, [sp, #32]
   28032:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28034:	9307      	str	r3, [sp, #28]
   28036:	6a23      	ldr	r3, [r4, #32]
   28038:	9306      	str	r3, [sp, #24]
   2803a:	69e3      	ldr	r3, [r4, #28]
   2803c:	9305      	str	r3, [sp, #20]
   2803e:	69a3      	ldr	r3, [r4, #24]
   28040:	9304      	str	r3, [sp, #16]
   28042:	6963      	ldr	r3, [r4, #20]
   28044:	9303      	str	r3, [sp, #12]
   28046:	6923      	ldr	r3, [r4, #16]
   28048:	9302      	str	r3, [sp, #8]
   2804a:	68e3      	ldr	r3, [r4, #12]
   2804c:	9301      	str	r3, [sp, #4]
   2804e:	68a3      	ldr	r3, [r4, #8]
   28050:	9300      	str	r3, [sp, #0]
   28052:	e9d4 2300 	ldrd	r2, r3, [r4]
   28056:	4631      	mov	r1, r6
   28058:	4628      	mov	r0, r5
   2805a:	f7e9 ff8f 	bl	11f7c <print_formatted>
}
   2805e:	e6de      	b.n	27e1e <std_print+0x78>

00028060 <log_output_flush>:
		     output->control_block->offset,
   28060:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   28062:	6881      	ldr	r1, [r0, #8]
{
   28064:	b510      	push	{r4, lr}
   28066:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   28068:	e9d2 2300 	ldrd	r2, r3, [r2]
   2806c:	6800      	ldr	r0, [r0, #0]
   2806e:	f7ff fe8d 	bl	27d8c <buffer_write>
	output->control_block->offset = 0;
   28072:	6863      	ldr	r3, [r4, #4]
   28074:	2200      	movs	r2, #0
   28076:	601a      	str	r2, [r3, #0]
}
   28078:	bd10      	pop	{r4, pc}

0002807a <z_impl_flash_write>:
{
   2807a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   2807e:	6886      	ldr	r6, [r0, #8]
{
   28080:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   28082:	68f3      	ldr	r3, [r6, #12]
{
   28084:	4605      	mov	r5, r0
   28086:	460f      	mov	r7, r1
   28088:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   2808a:	b95b      	cbnz	r3, 280a4 <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   2808c:	6874      	ldr	r4, [r6, #4]
   2808e:	464b      	mov	r3, r9
   28090:	4642      	mov	r2, r8
   28092:	4639      	mov	r1, r7
   28094:	4628      	mov	r0, r5
   28096:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   28098:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   2809a:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   2809c:	b943      	cbnz	r3, 280b0 <z_impl_flash_write+0x36>
}
   2809e:	4620      	mov	r0, r4
   280a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   280a4:	2100      	movs	r1, #0
   280a6:	4798      	blx	r3
		if (rc) {
   280a8:	4604      	mov	r4, r0
   280aa:	2800      	cmp	r0, #0
   280ac:	d0ee      	beq.n	2808c <z_impl_flash_write+0x12>
   280ae:	e7f6      	b.n	2809e <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   280b0:	2101      	movs	r1, #1
   280b2:	4628      	mov	r0, r5
   280b4:	4798      	blx	r3
   280b6:	e7f2      	b.n	2809e <z_impl_flash_write+0x24>

000280b8 <nvs_flash_rd>:
{
   280b8:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   280ba:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   280bc:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   280be:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   280c0:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   280c2:	fa16 f181 	uxtah	r1, r6, r1
   280c6:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   280ca:	6884      	ldr	r4, [r0, #8]
   280cc:	6824      	ldr	r4, [r4, #0]
   280ce:	46a4      	mov	ip, r4
}
   280d0:	bc70      	pop	{r4, r5, r6}
   280d2:	4760      	bx	ip

000280d4 <nvs_flash_block_cmp>:
{
   280d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   280d8:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   280da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   280dc:	681d      	ldr	r5, [r3, #0]
   280de:	426d      	negs	r5, r5
{
   280e0:	b089      	sub	sp, #36	; 0x24
   280e2:	4681      	mov	r9, r0
   280e4:	460e      	mov	r6, r1
   280e6:	4617      	mov	r7, r2
	block_size =
   280e8:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   280ec:	b91c      	cbnz	r4, 280f6 <nvs_flash_block_cmp+0x22>
	return 0;
   280ee:	4620      	mov	r0, r4
}
   280f0:	b009      	add	sp, #36	; 0x24
   280f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   280f6:	42ac      	cmp	r4, r5
   280f8:	46a0      	mov	r8, r4
   280fa:	bf28      	it	cs
   280fc:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   280fe:	4643      	mov	r3, r8
   28100:	466a      	mov	r2, sp
   28102:	4631      	mov	r1, r6
   28104:	4648      	mov	r0, r9
   28106:	f7ff ffd7 	bl	280b8 <nvs_flash_rd>
		if (rc) {
   2810a:	2800      	cmp	r0, #0
   2810c:	d1f0      	bne.n	280f0 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2810e:	4642      	mov	r2, r8
   28110:	4669      	mov	r1, sp
   28112:	4638      	mov	r0, r7
   28114:	f001 fc7a 	bl	29a0c <memcmp>
		if (rc) {
   28118:	b920      	cbnz	r0, 28124 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2811a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2811e:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   28120:	4447      	add	r7, r8
   28122:	e7e3      	b.n	280ec <nvs_flash_block_cmp+0x18>
			return 1;
   28124:	2001      	movs	r0, #1
   28126:	e7e3      	b.n	280f0 <nvs_flash_block_cmp+0x1c>

00028128 <nvs_flash_cmp_const>:
{
   28128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2812c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2812e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28130:	681d      	ldr	r5, [r3, #0]
   28132:	426d      	negs	r5, r5
{
   28134:	b088      	sub	sp, #32
	block_size =
   28136:	f005 0520 	and.w	r5, r5, #32
{
   2813a:	4607      	mov	r7, r0
   2813c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2813e:	4668      	mov	r0, sp
{
   28140:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   28142:	462a      	mov	r2, r5
   28144:	f001 fc94 	bl	29a70 <memset>
	while (len) {
   28148:	b91c      	cbnz	r4, 28152 <nvs_flash_cmp_const+0x2a>
	return 0;
   2814a:	4620      	mov	r0, r4
}
   2814c:	b008      	add	sp, #32
   2814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   28152:	42ac      	cmp	r4, r5
   28154:	46a0      	mov	r8, r4
   28156:	bf28      	it	cs
   28158:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2815a:	4643      	mov	r3, r8
   2815c:	466a      	mov	r2, sp
   2815e:	4631      	mov	r1, r6
   28160:	4638      	mov	r0, r7
   28162:	f7ff ffb7 	bl	280d4 <nvs_flash_block_cmp>
		if (rc) {
   28166:	2800      	cmp	r0, #0
   28168:	d1f0      	bne.n	2814c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2816a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2816e:	4446      	add	r6, r8
   28170:	e7ea      	b.n	28148 <nvs_flash_cmp_const+0x20>

00028172 <nvs_flash_erase_sector>:
{
   28172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28176:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   2817a:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2817c:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   2817e:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28182:	0c09      	lsrs	r1, r1, #16
{
   28184:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   28186:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2818a:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   2818e:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   28192:	f8d9 300c 	ldr.w	r3, [r9, #12]
   28196:	b9b3      	cbnz	r3, 281c6 <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   28198:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2819c:	4652      	mov	r2, sl
   2819e:	4631      	mov	r1, r6
   281a0:	4638      	mov	r0, r7
   281a2:	4798      	blx	r3
	if (api->write_protection != NULL) {
   281a4:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   281a8:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   281aa:	b9ab      	cbnz	r3, 281d8 <nvs_flash_erase_sector+0x66>
	if (rc) {
   281ac:	b98c      	cbnz	r4, 281d2 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   281ae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   281b0:	89ab      	ldrh	r3, [r5, #12]
   281b2:	7912      	ldrb	r2, [r2, #4]
   281b4:	4641      	mov	r1, r8
   281b6:	4628      	mov	r0, r5
   281b8:	f7ff ffb6 	bl	28128 <nvs_flash_cmp_const>
		rc = -ENXIO;
   281bc:	1e04      	subs	r4, r0, #0
   281be:	bf18      	it	ne
   281c0:	f06f 0405 	mvnne.w	r4, #5
   281c4:	e005      	b.n	281d2 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   281c6:	2100      	movs	r1, #0
   281c8:	4638      	mov	r0, r7
   281ca:	4798      	blx	r3
		if (rc) {
   281cc:	4604      	mov	r4, r0
   281ce:	2800      	cmp	r0, #0
   281d0:	d0e2      	beq.n	28198 <nvs_flash_erase_sector+0x26>
}
   281d2:	4620      	mov	r0, r4
   281d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   281d8:	2101      	movs	r1, #1
   281da:	4638      	mov	r0, r7
   281dc:	4798      	blx	r3
   281de:	e7e5      	b.n	281ac <nvs_flash_erase_sector+0x3a>

000281e0 <nvs_ate_crc8_update>:
{
   281e0:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   281e2:	4601      	mov	r1, r0
{
   281e4:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   281e6:	2207      	movs	r2, #7
   281e8:	20ff      	movs	r0, #255	; 0xff
   281ea:	f7e8 fa35 	bl	10658 <crc8_ccitt>
	entry->crc8 = crc8;
   281ee:	71e0      	strb	r0, [r4, #7]
}
   281f0:	bd10      	pop	{r4, pc}

000281f2 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   281f2:	7800      	ldrb	r0, [r0, #0]
   281f4:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   281f6:	bf81      	itttt	hi
   281f8:	1809      	addhi	r1, r1, r0
   281fa:	f101 31ff 	addhi.w	r1, r1, #4294967295
   281fe:	4240      	neghi	r0, r0
   28200:	4001      	andhi	r1, r0
}
   28202:	4608      	mov	r0, r1
   28204:	4770      	bx	lr

00028206 <nvs_ate_valid>:
{
   28206:	b570      	push	{r4, r5, r6, lr}
   28208:	460c      	mov	r4, r1
   2820a:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2820c:	2108      	movs	r1, #8
   2820e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   28210:	f7ff ffef 	bl	281f2 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   28214:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28216:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   28218:	4621      	mov	r1, r4
   2821a:	20ff      	movs	r0, #255	; 0xff
   2821c:	f7e8 fa1c 	bl	10658 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   28220:	79e3      	ldrb	r3, [r4, #7]
   28222:	4283      	cmp	r3, r0
   28224:	d107      	bne.n	28236 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   28226:	89a8      	ldrh	r0, [r5, #12]
   28228:	8863      	ldrh	r3, [r4, #2]
   2822a:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2822c:	4283      	cmp	r3, r0
   2822e:	bf2c      	ite	cs
   28230:	2000      	movcs	r0, #0
   28232:	2001      	movcc	r0, #1
}
   28234:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   28236:	2000      	movs	r0, #0
   28238:	e7fc      	b.n	28234 <nvs_ate_valid+0x2e>

0002823a <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2823a:	680b      	ldr	r3, [r1, #0]
   2823c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   28240:	0c1a      	lsrs	r2, r3, #16
   28242:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   28246:	bf08      	it	eq
   28248:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2824c:	600b      	str	r3, [r1, #0]
}
   2824e:	4770      	bx	lr

00028250 <nvs_close_ate_valid>:
{
   28250:	b538      	push	{r3, r4, r5, lr}
   28252:	4605      	mov	r5, r0
   28254:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   28256:	f7ff ffd6 	bl	28206 <nvs_ate_valid>
   2825a:	b1a0      	cbz	r0, 28286 <nvs_close_ate_valid+0x36>
   2825c:	88a0      	ldrh	r0, [r4, #4]
   2825e:	b998      	cbnz	r0, 28288 <nvs_close_ate_valid+0x38>
   28260:	8822      	ldrh	r2, [r4, #0]
   28262:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28266:	429a      	cmp	r2, r3
   28268:	d10d      	bne.n	28286 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2826a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2826c:	2108      	movs	r1, #8
   2826e:	f7ff ffc0 	bl	281f2 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   28272:	8862      	ldrh	r2, [r4, #2]
   28274:	89ab      	ldrh	r3, [r5, #12]
   28276:	1a9b      	subs	r3, r3, r2
   28278:	fbb3 f2f0 	udiv	r2, r3, r0
   2827c:	fb02 3010 	mls	r0, r2, r0, r3
   28280:	fab0 f080 	clz	r0, r0
   28284:	0940      	lsrs	r0, r0, #5
}
   28286:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   28288:	2000      	movs	r0, #0
   2828a:	e7fc      	b.n	28286 <nvs_close_ate_valid+0x36>

0002828c <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28290:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   28292:	4605      	mov	r5, r0
	offset += addr & ADDR_OFFS_MASK;
   28294:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   28296:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28298:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2829a:	fa10 f181 	uxtah	r1, r0, r1
   2829e:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   282a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   282a4:	681e      	ldr	r6, [r3, #0]
   282a6:	4276      	negs	r6, r6
	if (blen > 0) {
   282a8:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   282aa:	b088      	sub	sp, #32
   282ac:	4690      	mov	r8, r2
	if (blen > 0) {
   282ae:	d008      	beq.n	282c2 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   282b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   282b2:	4633      	mov	r3, r6
   282b4:	4639      	mov	r1, r7
   282b6:	f7ff fee0 	bl	2807a <z_impl_flash_write>
		if (rc) {
   282ba:	b9b8      	cbnz	r0, 282ec <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   282bc:	1ba4      	subs	r4, r4, r6
		offset += blen;
   282be:	4437      	add	r7, r6
		data8 += blen;
   282c0:	44b0      	add	r8, r6
	if (len) {
   282c2:	b1b4      	cbz	r4, 282f2 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   282c4:	4622      	mov	r2, r4
   282c6:	4641      	mov	r1, r8
   282c8:	4668      	mov	r0, sp
   282ca:	f001 fbc6 	bl	29a5a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   282ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   282d0:	681a      	ldr	r2, [r3, #0]
   282d2:	7919      	ldrb	r1, [r3, #4]
   282d4:	1b12      	subs	r2, r2, r4
   282d6:	eb0d 0004 	add.w	r0, sp, r4
   282da:	f001 fbc9 	bl	29a70 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   282de:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   282e2:	681b      	ldr	r3, [r3, #0]
   282e4:	466a      	mov	r2, sp
   282e6:	4639      	mov	r1, r7
   282e8:	f7ff fec7 	bl	2807a <z_impl_flash_write>
}
   282ec:	b008      	add	sp, #32
   282ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   282f2:	4620      	mov	r0, r4
   282f4:	e7fa      	b.n	282ec <nvs_flash_al_wrt.part.0+0x60>

000282f6 <nvs_flash_ate_wrt>:
{
   282f6:	b510      	push	{r4, lr}
   282f8:	460a      	mov	r2, r1
	if (!len) {
   282fa:	2308      	movs	r3, #8
   282fc:	6841      	ldr	r1, [r0, #4]
{
   282fe:	4604      	mov	r4, r0
   28300:	f7ff ffc4 	bl	2828c <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   28304:	2108      	movs	r1, #8
   28306:	4603      	mov	r3, r0
   28308:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2830a:	f7ff ff72 	bl	281f2 <nvs_al_size.isra.0>
   2830e:	6862      	ldr	r2, [r4, #4]
   28310:	1a12      	subs	r2, r2, r0
   28312:	6062      	str	r2, [r4, #4]
}
   28314:	4618      	mov	r0, r3
   28316:	bd10      	pop	{r4, pc}

00028318 <nvs_add_gc_done_ate>:
{
   28318:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2831a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2831e:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   28322:	2300      	movs	r3, #0
{
   28324:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   28326:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2832a:	6883      	ldr	r3, [r0, #8]
   2832c:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   28330:	4668      	mov	r0, sp
   28332:	f7ff ff55 	bl	281e0 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   28336:	4669      	mov	r1, sp
   28338:	4620      	mov	r0, r4
   2833a:	f7ff ffdc 	bl	282f6 <nvs_flash_ate_wrt>
}
   2833e:	b002      	add	sp, #8
   28340:	bd10      	pop	{r4, pc}

00028342 <nvs_prev_ate>:
{
   28342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28344:	4605      	mov	r5, r0
   28346:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28348:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2834a:	2108      	movs	r1, #8
   2834c:	f7ff ff51 	bl	281f2 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28350:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28352:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28354:	2308      	movs	r3, #8
   28356:	4628      	mov	r0, r5
   28358:	f7ff feae 	bl	280b8 <nvs_flash_rd>
	if (rc) {
   2835c:	4604      	mov	r4, r0
   2835e:	2800      	cmp	r0, #0
   28360:	d138      	bne.n	283d4 <nvs_prev_ate+0x92>
	*addr += ate_size;
   28362:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28364:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   28366:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28368:	b29a      	uxth	r2, r3
   2836a:	1bc7      	subs	r7, r0, r7
   2836c:	42ba      	cmp	r2, r7
	*addr += ate_size;
   2836e:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28370:	d130      	bne.n	283d4 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   28372:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   28374:	bf03      	ittte	eq
   28376:	89e9      	ldrheq	r1, [r5, #14]
   28378:	f101 31ff 	addeq.w	r1, r1, #4294967295
   2837c:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   28380:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   28384:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28386:	2308      	movs	r3, #8
   28388:	466a      	mov	r2, sp
   2838a:	4628      	mov	r0, r5
   2838c:	f7ff fe94 	bl	280b8 <nvs_flash_rd>
	if (rc) {
   28390:	4604      	mov	r4, r0
   28392:	b9f8      	cbnz	r0, 283d4 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   28394:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   28396:	466a      	mov	r2, sp
   28398:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2839a:	4603      	mov	r3, r0
		if (data8[i] != value) {
   2839c:	f812 0b01 	ldrb.w	r0, [r2], #1
   283a0:	4281      	cmp	r1, r0
   283a2:	d10c      	bne.n	283be <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   283a4:	3301      	adds	r3, #1
   283a6:	2b08      	cmp	r3, #8
   283a8:	d1f8      	bne.n	2839c <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   283aa:	686b      	ldr	r3, [r5, #4]
   283ac:	e005      	b.n	283ba <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   283ae:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   283b0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   283b4:	0c1b      	lsrs	r3, r3, #16
   283b6:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   283b8:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   283ba:	6033      	str	r3, [r6, #0]
		return 0;
   283bc:	e00a      	b.n	283d4 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   283be:	4669      	mov	r1, sp
   283c0:	4628      	mov	r0, r5
   283c2:	f7ff ff45 	bl	28250 <nvs_close_ate_valid>
   283c6:	2800      	cmp	r0, #0
   283c8:	d1f1      	bne.n	283ae <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   283ca:	4631      	mov	r1, r6
   283cc:	4628      	mov	r0, r5
   283ce:	f7ea f891 	bl	124f4 <nvs_recover_last_ate>
   283d2:	4604      	mov	r4, r0
}
   283d4:	4620      	mov	r0, r4
   283d6:	b003      	add	sp, #12
   283d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000283da <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   283da:	2300      	movs	r3, #0
   283dc:	461a      	mov	r2, r3
   283de:	f7ea bb69 	b.w	12ab4 <nvs_write>

000283e2 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   283e2:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   283e4:	2400      	movs	r4, #0
   283e6:	9400      	str	r4, [sp, #0]
   283e8:	f7ea fc46 	bl	12c78 <nvs_read_hist>
	return rc;
}
   283ec:	b002      	add	sp, #8
   283ee:	bd10      	pop	{r4, pc}

000283f0 <device_get_binding>:
   283f0:	f7f8 ba54 	b.w	2089c <z_impl_device_get_binding>

000283f4 <get_sectors_cb>:
{
   283f4:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   283f6:	6802      	ldr	r2, [r0, #0]
   283f8:	684c      	ldr	r4, [r1, #4]
   283fa:	42a2      	cmp	r2, r4
   283fc:	d316      	bcc.n	2842c <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   283fe:	688b      	ldr	r3, [r1, #8]
   28400:	4423      	add	r3, r4
   28402:	429a      	cmp	r2, r3
   28404:	d206      	bcs.n	28414 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   28406:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   2840a:	42ab      	cmp	r3, r5
   2840c:	d304      	bcc.n	28418 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   2840e:	f06f 030b 	mvn.w	r3, #11
   28412:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   28414:	2000      	movs	r0, #0
   28416:	e00a      	b.n	2842e <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   28418:	68cd      	ldr	r5, [r1, #12]
   2841a:	1b12      	subs	r2, r2, r4
   2841c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   28420:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   28424:	6842      	ldr	r2, [r0, #4]
   28426:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   28428:	3301      	adds	r3, #1
   2842a:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   2842c:	2001      	movs	r0, #1
}
   2842e:	bd70      	pop	{r4, r5, r6, pc}

00028430 <settings_load>:
	return settings_load_subtree(NULL);
   28430:	2000      	movs	r0, #0
   28432:	f7ea bd17 	b.w	12e64 <settings_load_subtree>

00028436 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   28436:	2200      	movs	r2, #0
   28438:	4611      	mov	r1, r2
   2843a:	f7ea bcd9 	b.w	12df0 <settings_save_one>

0002843e <settings_name_steq>:
{
   2843e:	4603      	mov	r3, r0
   28440:	b530      	push	{r4, r5, lr}
   28442:	4608      	mov	r0, r1
	if (next) {
   28444:	b10a      	cbz	r2, 2844a <settings_name_steq+0xc>
		*next = NULL;
   28446:	2100      	movs	r1, #0
   28448:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2844a:	b163      	cbz	r3, 28466 <settings_name_steq+0x28>
   2844c:	b190      	cbz	r0, 28474 <settings_name_steq+0x36>
   2844e:	1e41      	subs	r1, r0, #1
   28450:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   28452:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   28456:	4604      	mov	r4, r0
   28458:	f810 3b01 	ldrb.w	r3, [r0], #1
   2845c:	b15d      	cbz	r5, 28476 <settings_name_steq+0x38>
   2845e:	429d      	cmp	r5, r3
   28460:	d101      	bne.n	28466 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   28462:	2d3d      	cmp	r5, #61	; 0x3d
   28464:	d1f5      	bne.n	28452 <settings_name_steq+0x14>
	return 0;
   28466:	2000      	movs	r0, #0
   28468:	e004      	b.n	28474 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2846a:	2b3d      	cmp	r3, #61	; 0x3d
   2846c:	d008      	beq.n	28480 <settings_name_steq+0x42>
   2846e:	fab3 f083 	clz	r0, r3
   28472:	0940      	lsrs	r0, r0, #5
}
   28474:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   28476:	2b2f      	cmp	r3, #47	; 0x2f
   28478:	d1f7      	bne.n	2846a <settings_name_steq+0x2c>
		if (next) {
   2847a:	b10a      	cbz	r2, 28480 <settings_name_steq+0x42>
			*next = name + 1;
   2847c:	3401      	adds	r4, #1
   2847e:	6014      	str	r4, [r2, #0]
		return 1;
   28480:	2001      	movs	r0, #1
   28482:	e7f7      	b.n	28474 <settings_name_steq+0x36>

00028484 <settings_name_next>:
{
   28484:	b530      	push	{r4, r5, lr}
   28486:	4603      	mov	r3, r0
	if (next) {
   28488:	b109      	cbz	r1, 2848e <settings_name_next+0xa>
		*next = NULL;
   2848a:	2200      	movs	r2, #0
   2848c:	600a      	str	r2, [r1, #0]
	if (!name) {
   2848e:	b16b      	cbz	r3, 284ac <settings_name_next+0x28>
   28490:	461a      	mov	r2, r3
   28492:	4614      	mov	r4, r2
   28494:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   28496:	f812 5b01 	ldrb.w	r5, [r2], #1
   2849a:	b135      	cbz	r5, 284aa <settings_name_next+0x26>
   2849c:	2d3d      	cmp	r5, #61	; 0x3d
   2849e:	d004      	beq.n	284aa <settings_name_next+0x26>
   284a0:	2d2f      	cmp	r5, #47	; 0x2f
   284a2:	d1f6      	bne.n	28492 <settings_name_next+0xe>
		if (next) {
   284a4:	b109      	cbz	r1, 284aa <settings_name_next+0x26>
			*next = name + 1;
   284a6:	3401      	adds	r4, #1
   284a8:	600c      	str	r4, [r1, #0]
}
   284aa:	bd30      	pop	{r4, r5, pc}
		return 0;
   284ac:	4618      	mov	r0, r3
   284ae:	e7fc      	b.n	284aa <settings_name_next+0x26>

000284b0 <settings_nvs_read_fn>:
{
   284b0:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   284b2:	4613      	mov	r3, r2
{
   284b4:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   284b6:	460a      	mov	r2, r1
   284b8:	8881      	ldrh	r1, [r0, #4]
   284ba:	6800      	ldr	r0, [r0, #0]
   284bc:	f7ff ff91 	bl	283e2 <nvs_read>
}
   284c0:	42a0      	cmp	r0, r4
   284c2:	bfa8      	it	ge
   284c4:	4620      	movge	r0, r4
   284c6:	bd10      	pop	{r4, pc}

000284c8 <settings_nvs_save>:
{
   284c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284cc:	b097      	sub	sp, #92	; 0x5c
   284ce:	4604      	mov	r4, r0
   284d0:	9201      	str	r2, [sp, #4]
   284d2:	469b      	mov	fp, r3
	if (!name) {
   284d4:	4689      	mov	r9, r1
   284d6:	2900      	cmp	r1, #0
   284d8:	d069      	beq.n	285ae <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   284da:	b1da      	cbz	r2, 28514 <settings_nvs_save+0x4c>
   284dc:	fabb f78b 	clz	r7, fp
   284e0:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   284e2:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   284e4:	3501      	adds	r5, #1
   284e6:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   284e8:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   284ea:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   284ee:	1e6e      	subs	r6, r5, #1
   284f0:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   284f2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   284f6:	d02e      	beq.n	28556 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   284f8:	234a      	movs	r3, #74	; 0x4a
   284fa:	aa03      	add	r2, sp, #12
   284fc:	4631      	mov	r1, r6
   284fe:	4650      	mov	r0, sl
   28500:	f7ff ff6f 	bl	283e2 <nvs_read>
		if (rc < 0) {
   28504:	2800      	cmp	r0, #0
   28506:	da07      	bge.n	28518 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   28508:	f110 0f02 	cmn.w	r0, #2
   2850c:	bf08      	it	eq
   2850e:	46b0      	moveq	r8, r6
   28510:	4635      	mov	r5, r6
   28512:	e7ec      	b.n	284ee <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   28514:	2701      	movs	r7, #1
   28516:	e7e4      	b.n	284e2 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   28518:	ab16      	add	r3, sp, #88	; 0x58
   2851a:	4418      	add	r0, r3
   2851c:	2300      	movs	r3, #0
   2851e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   28522:	a903      	add	r1, sp, #12
   28524:	4648      	mov	r0, r9
   28526:	f001 fa56 	bl	299d6 <strcmp>
   2852a:	2800      	cmp	r0, #0
   2852c:	d1f0      	bne.n	28510 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   2852e:	2f00      	cmp	r7, #0
   28530:	d03b      	beq.n	285aa <settings_nvs_save+0xe2>
   28532:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28534:	42b3      	cmp	r3, r6
   28536:	d142      	bne.n	285be <settings_nvs_save+0xf6>
			cf->last_name_id--;
   28538:	4622      	mov	r2, r4
   2853a:	1e73      	subs	r3, r6, #1
   2853c:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   28540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28544:	2302      	movs	r3, #2
   28546:	4650      	mov	r0, sl
   28548:	f7ea fab4 	bl	12ab4 <nvs_write>
			if (rc < 0) {
   2854c:	2800      	cmp	r0, #0
   2854e:	da36      	bge.n	285be <settings_nvs_save+0xf6>
}
   28550:	b017      	add	sp, #92	; 0x5c
   28552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   28556:	bb6f      	cbnz	r7, 285b4 <settings_nvs_save+0xec>
	write_name = true;
   28558:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2855a:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2855e:	d02b      	beq.n	285b8 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   28560:	f104 0508 	add.w	r5, r4, #8
   28564:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   28568:	9a01      	ldr	r2, [sp, #4]
   2856a:	465b      	mov	r3, fp
   2856c:	b289      	uxth	r1, r1
   2856e:	4628      	mov	r0, r5
   28570:	f7ea faa0 	bl	12ab4 <nvs_write>
	if (rc < 0) {
   28574:	2800      	cmp	r0, #0
   28576:	dbeb      	blt.n	28550 <settings_nvs_save+0x88>
	if (write_name) {
   28578:	b157      	cbz	r7, 28590 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2857a:	4648      	mov	r0, r9
   2857c:	f001 fa1b 	bl	299b6 <strlen>
   28580:	464a      	mov	r2, r9
   28582:	4603      	mov	r3, r0
   28584:	4641      	mov	r1, r8
   28586:	4628      	mov	r0, r5
   28588:	f7ea fa94 	bl	12ab4 <nvs_write>
		if (rc < 0) {
   2858c:	2800      	cmp	r0, #0
   2858e:	dbdf      	blt.n	28550 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   28590:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28592:	4543      	cmp	r3, r8
   28594:	d220      	bcs.n	285d8 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   28596:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   28598:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2859a:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2859e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   285a2:	4628      	mov	r0, r5
   285a4:	f7ea fa86 	bl	12ab4 <nvs_write>
   285a8:	e016      	b.n	285d8 <settings_nvs_save+0x110>
   285aa:	46b0      	mov	r8, r6
   285ac:	e7d5      	b.n	2855a <settings_nvs_save+0x92>
		return -EINVAL;
   285ae:	f06f 0015 	mvn.w	r0, #21
   285b2:	e7cd      	b.n	28550 <settings_nvs_save+0x88>
		return 0;
   285b4:	2000      	movs	r0, #0
   285b6:	e7cb      	b.n	28550 <settings_nvs_save+0x88>
		return -ENOMEM;
   285b8:	f06f 000b 	mvn.w	r0, #11
   285bc:	e7c8      	b.n	28550 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   285be:	4631      	mov	r1, r6
   285c0:	4650      	mov	r0, sl
   285c2:	f7ff ff0a 	bl	283da <nvs_delete>
			if (rc >= 0) {
   285c6:	2800      	cmp	r0, #0
   285c8:	dbc2      	blt.n	28550 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   285ca:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   285ce:	313f      	adds	r1, #63	; 0x3f
   285d0:	b289      	uxth	r1, r1
   285d2:	4650      	mov	r0, sl
   285d4:	f7ff ff01 	bl	283da <nvs_delete>
	if (rc < 0) {
   285d8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   285dc:	e7b8      	b.n	28550 <settings_nvs_save+0x88>

000285de <settings_nvs_backend_init>:
{
   285de:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   285e0:	f100 0608 	add.w	r6, r0, #8
   285e4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   285e6:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   285e8:	4630      	mov	r0, r6
   285ea:	f7ea f885 	bl	126f8 <nvs_init>
	if (rc) {
   285ee:	4605      	mov	r5, r0
   285f0:	b970      	cbnz	r0, 28610 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   285f2:	2302      	movs	r3, #2
   285f4:	f10d 0206 	add.w	r2, sp, #6
   285f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   285fc:	4630      	mov	r0, r6
   285fe:	f7ff fef0 	bl	283e2 <nvs_read>
	if (rc < 0) {
   28602:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   28604:	bfac      	ite	ge
   28606:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   2860a:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   2860e:	8723      	strh	r3, [r4, #56]	; 0x38
}
   28610:	4628      	mov	r0, r5
   28612:	b002      	add	sp, #8
   28614:	bd70      	pop	{r4, r5, r6, pc}

00028616 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   28616:	2200      	movs	r2, #0
   28618:	e9c0 2200 	strd	r2, r2, [r0]
   2861c:	6082      	str	r2, [r0, #8]
}
   2861e:	4770      	bx	lr

00028620 <set_starting_state>:
{
   28620:	b510      	push	{r4, lr}
	__asm__ volatile(
   28622:	f04f 0340 	mov.w	r3, #64	; 0x40
   28626:	f3ef 8211 	mrs	r2, BASEPRI
   2862a:	f383 8811 	msr	BASEPRI, r3
   2862e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28632:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   28634:	f003 0407 	and.w	r4, r3, #7
   28638:	2c01      	cmp	r4, #1
   2863a:	d106      	bne.n	2864a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2863c:	6001      	str	r1, [r0, #0]
	int err = 0;
   2863e:	2000      	movs	r0, #0
	__asm__ volatile(
   28640:	f382 8811 	msr	BASEPRI, r2
   28644:	f3bf 8f6f 	isb	sy
}
   28648:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2864a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2864e:	428b      	cmp	r3, r1
		err = -EALREADY;
   28650:	bf14      	ite	ne
   28652:	f04f 30ff 	movne.w	r0, #4294967295
   28656:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2865a:	e7f1      	b.n	28640 <set_starting_state+0x20>

0002865c <set_on_state>:
	__asm__ volatile(
   2865c:	f04f 0340 	mov.w	r3, #64	; 0x40
   28660:	f3ef 8211 	mrs	r2, BASEPRI
   28664:	f383 8811 	msr	BASEPRI, r3
   28668:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2866c:	6803      	ldr	r3, [r0, #0]
   2866e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28672:	f043 0302 	orr.w	r3, r3, #2
   28676:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28678:	f382 8811 	msr	BASEPRI, r2
   2867c:	f3bf 8f6f 	isb	sy
}
   28680:	4770      	bx	lr

00028682 <onoff_started_callback>:
	return &data->mgr[type];
   28682:	6900      	ldr	r0, [r0, #16]
   28684:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   28686:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2868a:	2100      	movs	r1, #0
   2868c:	4710      	bx	r2

0002868e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2868e:	2000      	movs	r0, #0
   28690:	f7f7 bc48 	b.w	1ff24 <nrfx_clock_start>

00028694 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28694:	2000      	movs	r0, #0
   28696:	f7f7 bc6f 	b.w	1ff78 <nrfx_clock_stop>

0002869a <api_stop>:
	return stop(dev, subsys, CTX_API);
   2869a:	2280      	movs	r2, #128	; 0x80
   2869c:	f7ea bf8e 	b.w	135bc <stop>

000286a0 <blocking_start_callback>:
{
   286a0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   286a2:	f7f9 b94b 	b.w	2193c <z_impl_k_sem_give>

000286a6 <api_start>:
{
   286a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   286aa:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   286ac:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   286ae:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   286b0:	434c      	muls	r4, r1
{
   286b2:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   286b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   286b8:	2180      	movs	r1, #128	; 0x80
   286ba:	4428      	add	r0, r5
{
   286bc:	4690      	mov	r8, r2
   286be:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   286c0:	f7ff ffae 	bl	28620 <set_starting_state>
	if (err < 0) {
   286c4:	2800      	cmp	r0, #0
   286c6:	db06      	blt.n	286d6 <api_start+0x30>
	subdata->cb = cb;
   286c8:	4425      	add	r5, r4
	subdata->user_data = user_data;
   286ca:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   286ce:	6873      	ldr	r3, [r6, #4]
   286d0:	591b      	ldr	r3, [r3, r4]
   286d2:	4798      	blx	r3
	return 0;
   286d4:	2000      	movs	r0, #0
}
   286d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000286da <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   286da:	4770      	bx	lr

000286dc <sys_clock_disable>:
   286dc:	4770      	bx	lr

000286de <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   286de:	b538      	push	{r3, r4, r5, lr}
   286e0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   286e2:	42ab      	cmp	r3, r5
{
   286e4:	4611      	mov	r1, r2
   286e6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   286e8:	d804      	bhi.n	286f4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   286ea:	461a      	mov	r2, r3
   286ec:	f001 f9b5 	bl	29a5a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   286f0:	4620      	mov	r0, r4
   286f2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   286f4:	2400      	movs	r4, #0
   286f6:	e7fb      	b.n	286f0 <_copy+0x12>

000286f8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   286f8:	f001 b9ba 	b.w	29a70 <memset>

000286fc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   286fc:	09c3      	lsrs	r3, r0, #7
   286fe:	005a      	lsls	r2, r3, #1
   28700:	4413      	add	r3, r2
   28702:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28706:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2870a:	b2c0      	uxtb	r0, r0
   2870c:	4770      	bx	lr

0002870e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   2870e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28712:	4606      	mov	r6, r0
   28714:	b0a9      	sub	sp, #164	; 0xa4
   28716:	4688      	mov	r8, r1
   28718:	4614      	mov	r4, r2
   2871a:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2871c:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   28720:	f7eb fad6 	bl	13cd0 <uECC_get_rng>
		if (!rng_function ||
   28724:	4603      	mov	r3, r0
   28726:	2800      	cmp	r0, #0
   28728:	d03e      	beq.n	287a8 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2872a:	2140      	movs	r1, #64	; 0x40
   2872c:	a808      	add	r0, sp, #32
   2872e:	4798      	blx	r3
		if (!rng_function ||
   28730:	b3d0      	cbz	r0, 287a8 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   28732:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   28736:	f112 031f 	adds.w	r3, r2, #31
   2873a:	bf48      	it	mi
   2873c:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   28740:	466d      	mov	r5, sp
   28742:	464a      	mov	r2, r9
   28744:	a908      	add	r1, sp, #32
   28746:	4628      	mov	r0, r5
   28748:	f343 1347 	sbfx	r3, r3, #5, #8
   2874c:	f000 fa03 	bl	28b56 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   28750:	4622      	mov	r2, r4
   28752:	4629      	mov	r1, r5
   28754:	a818      	add	r0, sp, #96	; 0x60
   28756:	f000 fe19 	bl	2938c <EccPoint_compute_public_key>
   2875a:	b318      	cbz	r0, 287a4 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   2875c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   28760:	1dd9      	adds	r1, r3, #7
   28762:	bf48      	it	mi
   28764:	f103 010e 	addmi.w	r1, r3, #14
   28768:	462a      	mov	r2, r5
   2876a:	4640      	mov	r0, r8
   2876c:	10c9      	asrs	r1, r1, #3
   2876e:	f000 fe35 	bl	293dc <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   28772:	f994 1001 	ldrsb.w	r1, [r4, #1]
   28776:	aa18      	add	r2, sp, #96	; 0x60
   28778:	4630      	mov	r0, r6
   2877a:	f000 fe2f 	bl	293dc <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2877e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   28782:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   28786:	ab18      	add	r3, sp, #96	; 0x60
   28788:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2878c:	1870      	adds	r0, r6, r1
   2878e:	f000 fe25 	bl	293dc <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   28792:	2220      	movs	r2, #32
   28794:	2100      	movs	r1, #0
   28796:	4628      	mov	r0, r5
   28798:	f001 f96a 	bl	29a70 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   2879c:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2879e:	b029      	add	sp, #164	; 0xa4
   287a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   287a4:	3f01      	subs	r7, #1
   287a6:	d1bb      	bne.n	28720 <uECC_make_key+0x12>
        		return 0;
   287a8:	2000      	movs	r0, #0
   287aa:	e7f8      	b.n	2879e <uECC_make_key+0x90>

000287ac <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   287ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   287b0:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   287b2:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   287b6:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   287ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   287be:	b0a4      	sub	sp, #144	; 0x90
   287c0:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   287c2:	1dda      	adds	r2, r3, #7
   287c4:	bf48      	it	mi
   287c6:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   287ca:	ad04      	add	r5, sp, #16
{
   287cc:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   287ce:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   287d0:	4628      	mov	r0, r5
   287d2:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   287d4:	9502      	str	r5, [sp, #8]
   287d6:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   287d8:	f000 fe14 	bl	29404 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   287dc:	463a      	mov	r2, r7
   287de:	4649      	mov	r1, r9
   287e0:	a814      	add	r0, sp, #80	; 0x50
   287e2:	f000 fe0f 	bl	29404 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   287e6:	ab14      	add	r3, sp, #80	; 0x50
   287e8:	eb09 0107 	add.w	r1, r9, r7
   287ec:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   287f0:	463a      	mov	r2, r7
   287f2:	f000 fe07 	bl	29404 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   287f6:	4623      	mov	r3, r4
   287f8:	4632      	mov	r2, r6
   287fa:	4629      	mov	r1, r5
   287fc:	4628      	mov	r0, r5
   287fe:	f000 fd99 	bl	29334 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   28802:	fab0 f080 	clz	r0, r0
   28806:	9401      	str	r4, [sp, #4]
   28808:	ab24      	add	r3, sp, #144	; 0x90
   2880a:	0940      	lsrs	r0, r0, #5
   2880c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   28810:	8863      	ldrh	r3, [r4, #2]
   28812:	3301      	adds	r3, #1
   28814:	b21b      	sxth	r3, r3
   28816:	9300      	str	r3, [sp, #0]
   28818:	a914      	add	r1, sp, #80	; 0x50
   2881a:	2300      	movs	r3, #0
   2881c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   28820:	4608      	mov	r0, r1
   28822:	f000 fcb8 	bl	29196 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   28826:	aa14      	add	r2, sp, #80	; 0x50
   28828:	4639      	mov	r1, r7
   2882a:	4640      	mov	r0, r8
   2882c:	f000 fdd6 	bl	293dc <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   28830:	4621      	mov	r1, r4
   28832:	a814      	add	r0, sp, #80	; 0x50
   28834:	f000 fc24 	bl	29080 <EccPoint_isZero>
   28838:	af02      	add	r7, sp, #8
   2883a:	4604      	mov	r4, r0
   2883c:	2208      	movs	r2, #8
   2883e:	2100      	movs	r1, #0
   28840:	4638      	mov	r0, r7
   28842:	f001 f915 	bl	29a70 <memset>
   28846:	2220      	movs	r2, #32
   28848:	2100      	movs	r1, #0
   2884a:	4630      	mov	r0, r6
   2884c:	f001 f910 	bl	29a70 <memset>
   28850:	2220      	movs	r2, #32
   28852:	2100      	movs	r1, #0
   28854:	4628      	mov	r0, r5
   28856:	f001 f90b 	bl	29a70 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   2885a:	fab4 f084 	clz	r0, r4
   2885e:	0940      	lsrs	r0, r0, #5
   28860:	b024      	add	sp, #144	; 0x90
   28862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028866 <uECC_vli_add>:
{
   28866:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28868:	2400      	movs	r4, #0
{
   2886a:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   2886c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2886e:	b265      	sxtb	r5, r4
   28870:	42ab      	cmp	r3, r5
   28872:	dc00      	bgt.n	28876 <uECC_vli_add+0x10>
}
   28874:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   28876:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2887a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2887e:	443d      	add	r5, r7
   28880:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   28882:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   28884:	bf8c      	ite	hi
   28886:	2701      	movhi	r7, #1
   28888:	2700      	movls	r7, #0
		result[i] = sum;
   2888a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2888e:	bf18      	it	ne
   28890:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   28892:	3401      	adds	r4, #1
   28894:	e7eb      	b.n	2886e <uECC_vli_add+0x8>

00028896 <uECC_vli_rshift1>:
	vli += num_words;
   28896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2889a:	2300      	movs	r3, #0
	while (vli-- > end) {
   2889c:	4288      	cmp	r0, r1
   2889e:	d300      	bcc.n	288a2 <uECC_vli_rshift1+0xc>
}
   288a0:	4770      	bx	lr
		uECC_word_t temp = *vli;
   288a2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   288a6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   288aa:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   288ac:	07d3      	lsls	r3, r2, #31
   288ae:	e7f5      	b.n	2889c <uECC_vli_rshift1+0x6>

000288b0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   288b0:	6803      	ldr	r3, [r0, #0]
{
   288b2:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   288b4:	f013 0601 	ands.w	r6, r3, #1
{
   288b8:	4605      	mov	r5, r0
   288ba:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   288bc:	d005      	beq.n	288ca <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   288be:	4613      	mov	r3, r2
   288c0:	460a      	mov	r2, r1
   288c2:	4601      	mov	r1, r0
   288c4:	f7ff ffcf 	bl	28866 <uECC_vli_add>
   288c8:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   288ca:	4621      	mov	r1, r4
   288cc:	4628      	mov	r0, r5
   288ce:	f7ff ffe2 	bl	28896 <uECC_vli_rshift1>
	if (carry) {
   288d2:	b146      	cbz	r6, 288e6 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   288d4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   288d8:	3a01      	subs	r2, #1
   288da:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   288de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   288e2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   288e6:	bd70      	pop	{r4, r5, r6, pc}

000288e8 <uECC_vli_mult>:
{
   288e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   288ec:	2500      	movs	r5, #0
{
   288ee:	b087      	sub	sp, #28
   288f0:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   288f4:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   288f6:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   288f8:	fa4f f885 	sxtb.w	r8, r5
   288fc:	4543      	cmp	r3, r8
   288fe:	dc16      	bgt.n	2892e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   28900:	f04f 35ff 	mov.w	r5, #4294967295
   28904:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   28908:	9502      	str	r5, [sp, #8]
   2890a:	f04f 0a00 	mov.w	sl, #0
   2890e:	9e02      	ldr	r6, [sp, #8]
   28910:	fa53 fe8a 	uxtab	lr, r3, sl
   28914:	fa4f fe8e 	sxtb.w	lr, lr
   28918:	45b6      	cmp	lr, r6
   2891a:	fa5f f58a 	uxtb.w	r5, sl
   2891e:	db2d      	blt.n	2897c <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   28920:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   28924:	f840 2c04 	str.w	r2, [r0, #-4]
}
   28928:	b007      	add	sp, #28
   2892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2892e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   28930:	f04f 0c00 	mov.w	ip, #0
   28934:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   28938:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2893a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2893e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   28940:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   28944:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   28948:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2894c:	fba7 ab06 	umull	sl, fp, r7, r6
   28950:	eb1a 0601 	adds.w	r6, sl, r1
   28954:	f10c 0c01 	add.w	ip, ip, #1
   28958:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   2895c:	fa4f fa8c 	sxtb.w	sl, ip
   28960:	bf2c      	ite	cs
   28962:	2201      	movcs	r2, #1
   28964:	2200      	movcc	r2, #0
   28966:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   28968:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2896a:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   2896c:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   2896e:	dde4      	ble.n	2893a <uECC_vli_mult+0x52>
		result[k] = r0;
   28970:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   28974:	463a      	mov	r2, r7
   28976:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   28978:	4674      	mov	r4, lr
   2897a:	e7bd      	b.n	288f8 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2897c:	3501      	adds	r5, #1
   2897e:	9900      	ldr	r1, [sp, #0]
   28980:	9e01      	ldr	r6, [sp, #4]
   28982:	fa4f fc85 	sxtb.w	ip, r5
   28986:	ebae 0b0c 	sub.w	fp, lr, ip
   2898a:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   2898e:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   28992:	4621      	mov	r1, r4
   28994:	2400      	movs	r4, #0
   28996:	459c      	cmp	ip, r3
   28998:	db05      	blt.n	289a6 <uECC_vli_mult+0xbe>
		result[k] = r0;
   2899a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2899e:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   289a2:	460a      	mov	r2, r1
   289a4:	e7b3      	b.n	2890e <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   289a6:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   289aa:	f855 7b04 	ldr.w	r7, [r5], #4
   289ae:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   289b2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   289b6:	fba7 6706 	umull	r6, r7, r7, r6
   289ba:	eb16 0801 	adds.w	r8, r6, r1
   289be:	eb57 0902 	adcs.w	r9, r7, r2
   289c2:	bf2c      	ite	cs
   289c4:	2201      	movcs	r2, #1
   289c6:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   289c8:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   289cc:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   289ce:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   289d0:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   289d2:	fa4f fc8c 	sxtb.w	ip, ip
   289d6:	e7de      	b.n	28996 <uECC_vli_mult+0xae>

000289d8 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   289d8:	2300      	movs	r3, #0
{
   289da:	b510      	push	{r4, lr}
		 vli[i] = 0;
   289dc:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   289de:	b25a      	sxtb	r2, r3
   289e0:	4291      	cmp	r1, r2
   289e2:	dc00      	bgt.n	289e6 <uECC_vli_clear+0xe>
}
   289e4:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   289e6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   289ea:	3301      	adds	r3, #1
   289ec:	e7f7      	b.n	289de <uECC_vli_clear+0x6>

000289ee <uECC_vli_isZero>:
{
   289ee:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   289f0:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   289f2:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   289f4:	b25c      	sxtb	r4, r3
   289f6:	42a1      	cmp	r1, r4
   289f8:	dc03      	bgt.n	28a02 <uECC_vli_isZero+0x14>
}
   289fa:	fab2 f082 	clz	r0, r2
   289fe:	0940      	lsrs	r0, r0, #5
   28a00:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   28a02:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   28a06:	3301      	adds	r3, #1
   28a08:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   28a0a:	e7f3      	b.n	289f4 <uECC_vli_isZero+0x6>

00028a0c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28a0c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   28a0e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28a10:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   28a14:	f001 011f 	and.w	r1, r1, #31
   28a18:	fa03 f101 	lsl.w	r1, r3, r1
}
   28a1c:	4008      	ands	r0, r1
   28a1e:	4770      	bx	lr

00028a20 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   28a20:	3901      	subs	r1, #1
   28a22:	b24b      	sxtb	r3, r1
{
   28a24:	4602      	mov	r2, r0
   28a26:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   28a2a:	2b00      	cmp	r3, #0
   28a2c:	da03      	bge.n	28a36 <uECC_vli_numBits+0x16>
	return (i + 1);
   28a2e:	3301      	adds	r3, #1
   28a30:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   28a32:	b938      	cbnz	r0, 28a44 <uECC_vli_numBits+0x24>
   28a34:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   28a36:	f851 0904 	ldr.w	r0, [r1], #-4
   28a3a:	2800      	cmp	r0, #0
   28a3c:	d1f7      	bne.n	28a2e <uECC_vli_numBits+0xe>
   28a3e:	3b01      	subs	r3, #1
   28a40:	b25b      	sxtb	r3, r3
   28a42:	e7f2      	b.n	28a2a <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   28a44:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   28a48:	3b01      	subs	r3, #1
   28a4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   28a4e:	2300      	movs	r3, #0
   28a50:	b922      	cbnz	r2, 28a5c <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   28a52:	3801      	subs	r0, #1
   28a54:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   28a58:	b200      	sxth	r0, r0
}
   28a5a:	4770      	bx	lr
		digit >>= 1;
   28a5c:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   28a5e:	3301      	adds	r3, #1
   28a60:	e7f6      	b.n	28a50 <uECC_vli_numBits+0x30>

00028a62 <uECC_vli_set>:
{
   28a62:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   28a64:	2300      	movs	r3, #0
   28a66:	b25c      	sxtb	r4, r3
   28a68:	42a2      	cmp	r2, r4
   28a6a:	dc00      	bgt.n	28a6e <uECC_vli_set+0xc>
}
   28a6c:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   28a6e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   28a72:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   28a76:	3301      	adds	r3, #1
   28a78:	e7f5      	b.n	28a66 <uECC_vli_set+0x4>

00028a7a <uECC_vli_cmp_unsafe>:
{
   28a7a:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   28a7c:	3a01      	subs	r2, #1
   28a7e:	b253      	sxtb	r3, r2
   28a80:	009a      	lsls	r2, r3, #2
   28a82:	2b00      	cmp	r3, #0
   28a84:	da01      	bge.n	28a8a <uECC_vli_cmp_unsafe+0x10>
	return 0;
   28a86:	2000      	movs	r0, #0
}
   28a88:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   28a8a:	5885      	ldr	r5, [r0, r2]
   28a8c:	588c      	ldr	r4, [r1, r2]
   28a8e:	42a5      	cmp	r5, r4
   28a90:	d805      	bhi.n	28a9e <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   28a92:	f1a2 0204 	sub.w	r2, r2, #4
   28a96:	d304      	bcc.n	28aa2 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   28a98:	3b01      	subs	r3, #1
   28a9a:	b25b      	sxtb	r3, r3
   28a9c:	e7f1      	b.n	28a82 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   28a9e:	2001      	movs	r0, #1
   28aa0:	e7f2      	b.n	28a88 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   28aa2:	f04f 30ff 	mov.w	r0, #4294967295
   28aa6:	e7ef      	b.n	28a88 <uECC_vli_cmp_unsafe+0xe>

00028aa8 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   28aa8:	3a01      	subs	r2, #1
   28aaa:	b253      	sxtb	r3, r2
{
   28aac:	b570      	push	{r4, r5, r6, lr}
   28aae:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   28ab0:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   28ab2:	2b00      	cmp	r3, #0
   28ab4:	da03      	bge.n	28abe <uECC_vli_equal+0x16>
}
   28ab6:	1e20      	subs	r0, r4, #0
   28ab8:	bf18      	it	ne
   28aba:	2001      	movne	r0, #1
   28abc:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   28abe:	5885      	ldr	r5, [r0, r2]
   28ac0:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   28ac2:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   28ac4:	4075      	eors	r5, r6
   28ac6:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   28ac8:	b25b      	sxtb	r3, r3
   28aca:	3a04      	subs	r2, #4
   28acc:	e7f1      	b.n	28ab2 <uECC_vli_equal+0xa>

00028ace <uECC_vli_sub>:
{
   28ace:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28ad0:	2400      	movs	r4, #0
{
   28ad2:	4606      	mov	r6, r0
   28ad4:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   28ad6:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   28ad8:	b265      	sxtb	r5, r4
   28ada:	45ac      	cmp	ip, r5
   28adc:	dc00      	bgt.n	28ae0 <uECC_vli_sub+0x12>
}
   28ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   28ae0:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   28ae4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   28ae8:	1a3d      	subs	r5, r7, r0
   28aea:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   28aec:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   28aee:	bf34      	ite	cc
   28af0:	2701      	movcc	r7, #1
   28af2:	2700      	movcs	r7, #0
		result[i] = diff;
   28af4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   28af8:	bf18      	it	ne
   28afa:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   28afc:	3401      	adds	r4, #1
   28afe:	e7eb      	b.n	28ad8 <uECC_vli_sub+0xa>

00028b00 <uECC_vli_modAdd>:
{
   28b00:	b570      	push	{r4, r5, r6, lr}
   28b02:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   28b06:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   28b08:	4633      	mov	r3, r6
{
   28b0a:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   28b0c:	f7ff feab 	bl	28866 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   28b10:	b930      	cbnz	r0, 28b20 <uECC_vli_modAdd+0x20>
   28b12:	4632      	mov	r2, r6
   28b14:	4621      	mov	r1, r4
   28b16:	4628      	mov	r0, r5
   28b18:	f7ff ffaf 	bl	28a7a <uECC_vli_cmp_unsafe>
   28b1c:	2801      	cmp	r0, #1
   28b1e:	d007      	beq.n	28b30 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   28b20:	4633      	mov	r3, r6
   28b22:	462a      	mov	r2, r5
   28b24:	4621      	mov	r1, r4
   28b26:	4620      	mov	r0, r4
}
   28b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   28b2c:	f7ff bfcf 	b.w	28ace <uECC_vli_sub>
}
   28b30:	bd70      	pop	{r4, r5, r6, pc}

00028b32 <uECC_vli_modSub>:
{
   28b32:	b570      	push	{r4, r5, r6, lr}
   28b34:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   28b38:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   28b3a:	4633      	mov	r3, r6
{
   28b3c:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   28b3e:	f7ff ffc6 	bl	28ace <uECC_vli_sub>
	if (l_borrow) {
   28b42:	b138      	cbz	r0, 28b54 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   28b44:	4633      	mov	r3, r6
   28b46:	462a      	mov	r2, r5
   28b48:	4621      	mov	r1, r4
   28b4a:	4620      	mov	r0, r4
}
   28b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   28b50:	f7ff be89 	b.w	28866 <uECC_vli_add>
}
   28b54:	bd70      	pop	{r4, r5, r6, pc}

00028b56 <uECC_vli_mmod>:
{
   28b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b5a:	b0a5      	sub	sp, #148	; 0x94
   28b5c:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   28b5e:	ab14      	add	r3, sp, #80	; 0x50
   28b60:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   28b64:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   28b66:	4629      	mov	r1, r5
   28b68:	4610      	mov	r0, r2
{
   28b6a:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   28b6c:	f7ff ff58 	bl	28a20 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   28b70:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   28b74:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   28b76:	2c00      	cmp	r4, #0
   28b78:	4621      	mov	r1, r4
   28b7a:	bfb8      	it	lt
   28b7c:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   28b80:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   28b82:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   28b86:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   28b8a:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   28b8c:	f004 071f 	and.w	r7, r4, #31
   28b90:	bf58      	it	pl
   28b92:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   28b94:	f7ff ff20 	bl	289d8 <uECC_vli_clear>
	if (bit_shift > 0) {
   28b98:	2f00      	cmp	r7, #0
   28b9a:	b208      	sxth	r0, r1
   28b9c:	dd2b      	ble.n	28bf6 <uECC_vli_mmod+0xa0>
   28b9e:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   28ba0:	2200      	movs	r2, #0
   28ba2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   28ba6:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   28baa:	4613      	mov	r3, r2
   28bac:	429d      	cmp	r5, r3
   28bae:	d817      	bhi.n	28be0 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   28bb0:	006b      	lsls	r3, r5, #1
   28bb2:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28bb4:	ab04      	add	r3, sp, #16
   28bb6:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28bba:	1e6f      	subs	r7, r5, #1
   28bbc:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28bbe:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28bc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   28bc4:	2c00      	cmp	r4, #0
   28bc6:	da54      	bge.n	28c72 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   28bc8:	ab24      	add	r3, sp, #144	; 0x90
   28bca:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   28bce:	462a      	mov	r2, r5
   28bd0:	f856 1c88 	ldr.w	r1, [r6, #-136]
   28bd4:	4640      	mov	r0, r8
   28bd6:	f7ff ff44 	bl	28a62 <uECC_vli_set>
}
   28bda:	b025      	add	sp, #148	; 0x94
   28bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   28be0:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   28be4:	fa0c f007 	lsl.w	r0, ip, r7
   28be8:	4302      	orrs	r2, r0
   28bea:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   28bee:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   28bf0:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   28bf4:	e7da      	b.n	28bac <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   28bf6:	ab04      	add	r3, sp, #16
   28bf8:	462a      	mov	r2, r5
   28bfa:	4631      	mov	r1, r6
   28bfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   28c00:	f7ff ff2f 	bl	28a62 <uECC_vli_set>
   28c04:	e7d4      	b.n	28bb0 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28c06:	fa0f fe82 	sxth.w	lr, r2
   28c0a:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   28c0e:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   28c12:	ab24      	add	r3, sp, #144	; 0x90
   28c14:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   28c18:	3001      	adds	r0, #1
   28c1a:	f852 3c80 	ldr.w	r3, [r2, #-128]
   28c1e:	440b      	add	r3, r1
   28c20:	ebbb 0303 	subs.w	r3, fp, r3
   28c24:	bf34      	ite	cc
   28c26:	2201      	movcc	r2, #1
   28c28:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   28c2a:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   28c2c:	bf18      	it	ne
   28c2e:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   28c30:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   28c34:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   28c38:	9b01      	ldr	r3, [sp, #4]
   28c3a:	b242      	sxtb	r2, r0
   28c3c:	429a      	cmp	r2, r3
   28c3e:	dbe2      	blt.n	28c06 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   28c40:	1a73      	subs	r3, r6, r1
   28c42:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   28c44:	4629      	mov	r1, r5
   28c46:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   28c48:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   28c4a:	f7ff fe24 	bl	28896 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28c4e:	ab24      	add	r3, sp, #144	; 0x90
   28c50:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28c54:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28c56:	f853 2c80 	ldr.w	r2, [r3, #-128]
   28c5a:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28c5e:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28c60:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   28c64:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28c66:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   28c6a:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28c6c:	f7ff fe13 	bl	28896 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   28c70:	e7a8      	b.n	28bc4 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28c72:	ab24      	add	r3, sp, #144	; 0x90
   28c74:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   28c76:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   28c7a:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28c7c:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   28c80:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   28c84:	e7d8      	b.n	28c38 <uECC_vli_mmod+0xe2>

00028c86 <uECC_vli_modMult_fast>:
{
   28c86:	b530      	push	{r4, r5, lr}
   28c88:	461c      	mov	r4, r3
   28c8a:	b091      	sub	sp, #68	; 0x44
   28c8c:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   28c8e:	f993 3000 	ldrsb.w	r3, [r3]
   28c92:	4668      	mov	r0, sp
   28c94:	f7ff fe28 	bl	288e8 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   28c98:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   28c9c:	4669      	mov	r1, sp
   28c9e:	4628      	mov	r0, r5
   28ca0:	4798      	blx	r3
}
   28ca2:	b011      	add	sp, #68	; 0x44
   28ca4:	bd30      	pop	{r4, r5, pc}

00028ca6 <uECC_vli_modSquare_fast>:
{
   28ca6:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   28ca8:	460a      	mov	r2, r1
   28caa:	f7ff bfec 	b.w	28c86 <uECC_vli_modMult_fast>

00028cae <double_jacobian_default>:
{
   28cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   28cb2:	f993 6000 	ldrsb.w	r6, [r3]
{
   28cb6:	b092      	sub	sp, #72	; 0x48
   28cb8:	4604      	mov	r4, r0
   28cba:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   28cbc:	4610      	mov	r0, r2
   28cbe:	4631      	mov	r1, r6
{
   28cc0:	4615      	mov	r5, r2
   28cc2:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   28cc4:	f7ff fe93 	bl	289ee <uECC_vli_isZero>
   28cc8:	2800      	cmp	r0, #0
   28cca:	f040 8091 	bne.w	28df0 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   28cce:	463a      	mov	r2, r7
   28cd0:	4649      	mov	r1, r9
   28cd2:	a802      	add	r0, sp, #8
   28cd4:	f7ff ffe7 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   28cd8:	463b      	mov	r3, r7
   28cda:	aa02      	add	r2, sp, #8
   28cdc:	4621      	mov	r1, r4
   28cde:	a80a      	add	r0, sp, #40	; 0x28
   28ce0:	f7ff ffd1 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   28ce4:	a902      	add	r1, sp, #8
   28ce6:	4608      	mov	r0, r1
   28ce8:	463a      	mov	r2, r7
   28cea:	f7ff ffdc 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   28cee:	463b      	mov	r3, r7
   28cf0:	462a      	mov	r2, r5
   28cf2:	4649      	mov	r1, r9
   28cf4:	4648      	mov	r0, r9
   28cf6:	f7ff ffc6 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   28cfa:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   28cfe:	463a      	mov	r2, r7
   28d00:	4629      	mov	r1, r5
   28d02:	4628      	mov	r0, r5
   28d04:	f7ff ffcf 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   28d08:	4643      	mov	r3, r8
   28d0a:	462a      	mov	r2, r5
   28d0c:	4621      	mov	r1, r4
   28d0e:	4620      	mov	r0, r4
   28d10:	9600      	str	r6, [sp, #0]
   28d12:	f7ff fef5 	bl	28b00 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   28d16:	4643      	mov	r3, r8
   28d18:	462a      	mov	r2, r5
   28d1a:	4629      	mov	r1, r5
   28d1c:	4628      	mov	r0, r5
   28d1e:	9600      	str	r6, [sp, #0]
   28d20:	f7ff feee 	bl	28b00 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   28d24:	4643      	mov	r3, r8
   28d26:	462a      	mov	r2, r5
   28d28:	4621      	mov	r1, r4
   28d2a:	4628      	mov	r0, r5
   28d2c:	9600      	str	r6, [sp, #0]
   28d2e:	f7ff ff00 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   28d32:	463b      	mov	r3, r7
   28d34:	462a      	mov	r2, r5
   28d36:	4621      	mov	r1, r4
   28d38:	4620      	mov	r0, r4
   28d3a:	f7ff ffa4 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   28d3e:	4643      	mov	r3, r8
   28d40:	4622      	mov	r2, r4
   28d42:	4621      	mov	r1, r4
   28d44:	4628      	mov	r0, r5
   28d46:	9600      	str	r6, [sp, #0]
   28d48:	f7ff feda 	bl	28b00 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   28d4c:	4643      	mov	r3, r8
   28d4e:	9600      	str	r6, [sp, #0]
   28d50:	462a      	mov	r2, r5
   28d52:	4621      	mov	r1, r4
   28d54:	4620      	mov	r0, r4
   28d56:	f7ff fed3 	bl	28b00 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28d5a:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   28d5c:	07db      	lsls	r3, r3, #31
   28d5e:	d54a      	bpl.n	28df6 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   28d60:	4633      	mov	r3, r6
   28d62:	4642      	mov	r2, r8
   28d64:	4621      	mov	r1, r4
   28d66:	4620      	mov	r0, r4
   28d68:	f7ff fd7d 	bl	28866 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   28d6c:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   28d6e:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   28d70:	4620      	mov	r0, r4
   28d72:	f7ff fd90 	bl	28896 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   28d76:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   28d7a:	3b01      	subs	r3, #1
   28d7c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   28d80:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   28d84:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   28d88:	463a      	mov	r2, r7
   28d8a:	4621      	mov	r1, r4
   28d8c:	4628      	mov	r0, r5
   28d8e:	f7ff ff8a 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   28d92:	4643      	mov	r3, r8
   28d94:	aa0a      	add	r2, sp, #40	; 0x28
   28d96:	4629      	mov	r1, r5
   28d98:	4628      	mov	r0, r5
   28d9a:	9600      	str	r6, [sp, #0]
   28d9c:	f7ff fec9 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   28da0:	4643      	mov	r3, r8
   28da2:	aa0a      	add	r2, sp, #40	; 0x28
   28da4:	4629      	mov	r1, r5
   28da6:	4628      	mov	r0, r5
   28da8:	9600      	str	r6, [sp, #0]
   28daa:	f7ff fec2 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   28dae:	a90a      	add	r1, sp, #40	; 0x28
   28db0:	4608      	mov	r0, r1
   28db2:	4643      	mov	r3, r8
   28db4:	462a      	mov	r2, r5
   28db6:	9600      	str	r6, [sp, #0]
   28db8:	f7ff febb 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   28dbc:	463b      	mov	r3, r7
   28dbe:	aa0a      	add	r2, sp, #40	; 0x28
   28dc0:	4621      	mov	r1, r4
   28dc2:	4620      	mov	r0, r4
   28dc4:	f7ff ff5f 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   28dc8:	aa02      	add	r2, sp, #8
   28dca:	4643      	mov	r3, r8
   28dcc:	4610      	mov	r0, r2
   28dce:	4621      	mov	r1, r4
   28dd0:	9600      	str	r6, [sp, #0]
   28dd2:	f7ff feae 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   28dd6:	4632      	mov	r2, r6
   28dd8:	4629      	mov	r1, r5
   28dda:	4620      	mov	r0, r4
   28ddc:	f7ff fe41 	bl	28a62 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   28de0:	4649      	mov	r1, r9
   28de2:	4628      	mov	r0, r5
   28de4:	f7ff fe3d 	bl	28a62 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   28de8:	a902      	add	r1, sp, #8
   28dea:	4648      	mov	r0, r9
   28dec:	f7ff fe39 	bl	28a62 <uECC_vli_set>
}
   28df0:	b012      	add	sp, #72	; 0x48
   28df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   28df6:	4631      	mov	r1, r6
   28df8:	4620      	mov	r0, r4
   28dfa:	f7ff fd4c 	bl	28896 <uECC_vli_rshift1>
   28dfe:	e7c3      	b.n	28d88 <double_jacobian_default+0xda>

00028e00 <x_side_default>:
{
   28e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28e04:	4615      	mov	r5, r2
   28e06:	b08a      	sub	sp, #40	; 0x28
   28e08:	4604      	mov	r4, r0
   28e0a:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   28e0c:	221c      	movs	r2, #28
   28e0e:	2100      	movs	r1, #0
   28e10:	a803      	add	r0, sp, #12
   28e12:	f000 fe2d 	bl	29a70 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   28e16:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   28e18:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   28e1c:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   28e1e:	462a      	mov	r2, r5
   28e20:	4631      	mov	r1, r6
   28e22:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   28e24:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   28e26:	f7ff ff3e 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   28e2a:	463b      	mov	r3, r7
   28e2c:	aa02      	add	r2, sp, #8
   28e2e:	4621      	mov	r1, r4
   28e30:	4620      	mov	r0, r4
   28e32:	f8cd 8000 	str.w	r8, [sp]
   28e36:	f7ff fe7c 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   28e3a:	462b      	mov	r3, r5
   28e3c:	4632      	mov	r2, r6
   28e3e:	4621      	mov	r1, r4
   28e40:	4620      	mov	r0, r4
   28e42:	f7ff ff20 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   28e46:	f8cd 8000 	str.w	r8, [sp]
   28e4a:	463b      	mov	r3, r7
   28e4c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   28e50:	4621      	mov	r1, r4
   28e52:	4620      	mov	r0, r4
   28e54:	f7ff fe54 	bl	28b00 <uECC_vli_modAdd>
}
   28e58:	b00a      	add	sp, #40	; 0x28
   28e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028e5e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   28e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28e62:	b09a      	sub	sp, #104	; 0x68
   28e64:	4616      	mov	r6, r2
   28e66:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   28e6a:	4644      	mov	r4, r8
{
   28e6c:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   28e6e:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28e72:	9500      	str	r5, [sp, #0]
{
   28e74:	4607      	mov	r7, r0
   28e76:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28e78:	4623      	mov	r3, r4
   28e7a:	4602      	mov	r2, r0
   28e7c:	4631      	mov	r1, r6
   28e7e:	a802      	add	r0, sp, #8
   28e80:	f7ff fe57 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   28e84:	a902      	add	r1, sp, #8
   28e86:	4642      	mov	r2, r8
   28e88:	4608      	mov	r0, r1
   28e8a:	f7ff ff0c 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   28e8e:	4643      	mov	r3, r8
   28e90:	aa02      	add	r2, sp, #8
   28e92:	4639      	mov	r1, r7
   28e94:	4638      	mov	r0, r7
   28e96:	f7ff fef6 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   28e9a:	4643      	mov	r3, r8
   28e9c:	aa02      	add	r2, sp, #8
   28e9e:	4631      	mov	r1, r6
   28ea0:	4630      	mov	r0, r6
   28ea2:	f7ff fef0 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   28ea6:	4623      	mov	r3, r4
   28ea8:	4652      	mov	r2, sl
   28eaa:	4649      	mov	r1, r9
   28eac:	a802      	add	r0, sp, #8
   28eae:	9500      	str	r5, [sp, #0]
   28eb0:	f7ff fe26 	bl	28b00 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   28eb4:	4623      	mov	r3, r4
   28eb6:	4652      	mov	r2, sl
   28eb8:	4649      	mov	r1, r9
   28eba:	4648      	mov	r0, r9
   28ebc:	9500      	str	r5, [sp, #0]
   28ebe:	f7ff fe38 	bl	28b32 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   28ec2:	4623      	mov	r3, r4
   28ec4:	463a      	mov	r2, r7
   28ec6:	4631      	mov	r1, r6
   28ec8:	a80a      	add	r0, sp, #40	; 0x28
   28eca:	9500      	str	r5, [sp, #0]
   28ecc:	f7ff fe31 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   28ed0:	4643      	mov	r3, r8
   28ed2:	aa0a      	add	r2, sp, #40	; 0x28
   28ed4:	4651      	mov	r1, sl
   28ed6:	4650      	mov	r0, sl
   28ed8:	f7ff fed5 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   28edc:	4623      	mov	r3, r4
   28ede:	4632      	mov	r2, r6
   28ee0:	4639      	mov	r1, r7
   28ee2:	a80a      	add	r0, sp, #40	; 0x28
   28ee4:	9500      	str	r5, [sp, #0]
   28ee6:	f7ff fe0b 	bl	28b00 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   28eea:	4642      	mov	r2, r8
   28eec:	4649      	mov	r1, r9
   28eee:	4630      	mov	r0, r6
   28ef0:	f7ff fed9 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   28ef4:	4623      	mov	r3, r4
   28ef6:	aa0a      	add	r2, sp, #40	; 0x28
   28ef8:	4631      	mov	r1, r6
   28efa:	4630      	mov	r0, r6
   28efc:	9500      	str	r5, [sp, #0]
   28efe:	f7ff fe18 	bl	28b32 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   28f02:	4623      	mov	r3, r4
   28f04:	4632      	mov	r2, r6
   28f06:	4639      	mov	r1, r7
   28f08:	a812      	add	r0, sp, #72	; 0x48
   28f0a:	9500      	str	r5, [sp, #0]
   28f0c:	f7ff fe11 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   28f10:	4643      	mov	r3, r8
   28f12:	aa12      	add	r2, sp, #72	; 0x48
   28f14:	4649      	mov	r1, r9
   28f16:	4648      	mov	r0, r9
   28f18:	f7ff feb5 	bl	28c86 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   28f1c:	4623      	mov	r3, r4
   28f1e:	4652      	mov	r2, sl
   28f20:	4649      	mov	r1, r9
   28f22:	4648      	mov	r0, r9
   28f24:	9500      	str	r5, [sp, #0]
   28f26:	f7ff fe04 	bl	28b32 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   28f2a:	4642      	mov	r2, r8
   28f2c:	a902      	add	r1, sp, #8
   28f2e:	a812      	add	r0, sp, #72	; 0x48
   28f30:	f7ff feb9 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   28f34:	a912      	add	r1, sp, #72	; 0x48
   28f36:	4623      	mov	r3, r4
   28f38:	aa0a      	add	r2, sp, #40	; 0x28
   28f3a:	4608      	mov	r0, r1
   28f3c:	9500      	str	r5, [sp, #0]
   28f3e:	f7ff fdf8 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   28f42:	4623      	mov	r3, r4
   28f44:	463a      	mov	r2, r7
   28f46:	a912      	add	r1, sp, #72	; 0x48
   28f48:	a80a      	add	r0, sp, #40	; 0x28
   28f4a:	9500      	str	r5, [sp, #0]
   28f4c:	f7ff fdf1 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   28f50:	a90a      	add	r1, sp, #40	; 0x28
   28f52:	4643      	mov	r3, r8
   28f54:	aa02      	add	r2, sp, #8
   28f56:	4608      	mov	r0, r1
   28f58:	f7ff fe95 	bl	28c86 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   28f5c:	4623      	mov	r3, r4
   28f5e:	4652      	mov	r2, sl
   28f60:	a90a      	add	r1, sp, #40	; 0x28
   28f62:	4650      	mov	r0, sl
   28f64:	9500      	str	r5, [sp, #0]
   28f66:	f7ff fde4 	bl	28b32 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   28f6a:	462a      	mov	r2, r5
   28f6c:	a912      	add	r1, sp, #72	; 0x48
   28f6e:	4638      	mov	r0, r7
   28f70:	f7ff fd77 	bl	28a62 <uECC_vli_set>
}
   28f74:	b01a      	add	sp, #104	; 0x68
   28f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028f7a <uECC_vli_modInv>:
{
   28f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f7c:	460f      	mov	r7, r1
   28f7e:	b0a1      	sub	sp, #132	; 0x84
   28f80:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   28f82:	4619      	mov	r1, r3
   28f84:	4638      	mov	r0, r7
{
   28f86:	4615      	mov	r5, r2
   28f88:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   28f8a:	f7ff fd30 	bl	289ee <uECC_vli_isZero>
   28f8e:	b120      	cbz	r0, 28f9a <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   28f90:	4630      	mov	r0, r6
   28f92:	f7ff fd21 	bl	289d8 <uECC_vli_clear>
}
   28f96:	b021      	add	sp, #132	; 0x84
   28f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   28f9a:	4622      	mov	r2, r4
   28f9c:	4639      	mov	r1, r7
   28f9e:	4668      	mov	r0, sp
   28fa0:	f7ff fd5f 	bl	28a62 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   28fa4:	4629      	mov	r1, r5
   28fa6:	a808      	add	r0, sp, #32
   28fa8:	f7ff fd5b 	bl	28a62 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   28fac:	a810      	add	r0, sp, #64	; 0x40
   28fae:	4621      	mov	r1, r4
   28fb0:	f7ff fd12 	bl	289d8 <uECC_vli_clear>
	u[0] = 1;
   28fb4:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   28fb6:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   28fb8:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   28fba:	f7ff fd0d 	bl	289d8 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   28fbe:	4622      	mov	r2, r4
   28fc0:	a908      	add	r1, sp, #32
   28fc2:	4668      	mov	r0, sp
   28fc4:	f7ff fd59 	bl	28a7a <uECC_vli_cmp_unsafe>
   28fc8:	b928      	cbnz	r0, 28fd6 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   28fca:	4622      	mov	r2, r4
   28fcc:	a910      	add	r1, sp, #64	; 0x40
   28fce:	4630      	mov	r0, r6
   28fd0:	f7ff fd47 	bl	28a62 <uECC_vli_set>
   28fd4:	e7df      	b.n	28f96 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   28fd6:	9b00      	ldr	r3, [sp, #0]
   28fd8:	07da      	lsls	r2, r3, #31
   28fda:	d409      	bmi.n	28ff0 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   28fdc:	4621      	mov	r1, r4
   28fde:	4668      	mov	r0, sp
   28fe0:	f7ff fc59 	bl	28896 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   28fe4:	4622      	mov	r2, r4
   28fe6:	4629      	mov	r1, r5
   28fe8:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   28fea:	f7ff fc61 	bl	288b0 <vli_modInv_update>
   28fee:	e7e6      	b.n	28fbe <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   28ff0:	9b08      	ldr	r3, [sp, #32]
   28ff2:	07db      	lsls	r3, r3, #31
   28ff4:	d407      	bmi.n	29006 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   28ff6:	4621      	mov	r1, r4
   28ff8:	a808      	add	r0, sp, #32
   28ffa:	f7ff fc4c 	bl	28896 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   28ffe:	4622      	mov	r2, r4
   29000:	4629      	mov	r1, r5
   29002:	a818      	add	r0, sp, #96	; 0x60
   29004:	e7f1      	b.n	28fea <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   29006:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   29008:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2900a:	dd1c      	ble.n	29046 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   2900c:	aa08      	add	r2, sp, #32
   2900e:	4669      	mov	r1, sp
   29010:	4668      	mov	r0, sp
   29012:	f7ff fd5c 	bl	28ace <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   29016:	4621      	mov	r1, r4
   29018:	4668      	mov	r0, sp
   2901a:	f7ff fc3c 	bl	28896 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2901e:	4622      	mov	r2, r4
   29020:	a918      	add	r1, sp, #96	; 0x60
   29022:	a810      	add	r0, sp, #64	; 0x40
   29024:	f7ff fd29 	bl	28a7a <uECC_vli_cmp_unsafe>
   29028:	2800      	cmp	r0, #0
   2902a:	da05      	bge.n	29038 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   2902c:	a910      	add	r1, sp, #64	; 0x40
   2902e:	4623      	mov	r3, r4
   29030:	462a      	mov	r2, r5
   29032:	4608      	mov	r0, r1
   29034:	f7ff fc17 	bl	28866 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   29038:	a910      	add	r1, sp, #64	; 0x40
   2903a:	4623      	mov	r3, r4
   2903c:	aa18      	add	r2, sp, #96	; 0x60
   2903e:	4608      	mov	r0, r1
   29040:	f7ff fd45 	bl	28ace <uECC_vli_sub>
   29044:	e7ce      	b.n	28fe4 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   29046:	a908      	add	r1, sp, #32
   29048:	466a      	mov	r2, sp
   2904a:	4608      	mov	r0, r1
   2904c:	f7ff fd3f 	bl	28ace <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   29050:	4621      	mov	r1, r4
   29052:	a808      	add	r0, sp, #32
   29054:	f7ff fc1f 	bl	28896 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   29058:	4622      	mov	r2, r4
   2905a:	a910      	add	r1, sp, #64	; 0x40
   2905c:	a818      	add	r0, sp, #96	; 0x60
   2905e:	f7ff fd0c 	bl	28a7a <uECC_vli_cmp_unsafe>
   29062:	2800      	cmp	r0, #0
   29064:	da05      	bge.n	29072 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   29066:	a918      	add	r1, sp, #96	; 0x60
   29068:	4623      	mov	r3, r4
   2906a:	462a      	mov	r2, r5
   2906c:	4608      	mov	r0, r1
   2906e:	f7ff fbfa 	bl	28866 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   29072:	a918      	add	r1, sp, #96	; 0x60
   29074:	4623      	mov	r3, r4
   29076:	aa10      	add	r2, sp, #64	; 0x40
   29078:	4608      	mov	r0, r1
   2907a:	f7ff fd28 	bl	28ace <uECC_vli_sub>
   2907e:	e7be      	b.n	28ffe <uECC_vli_modInv+0x84>

00029080 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   29080:	7809      	ldrb	r1, [r1, #0]
   29082:	0049      	lsls	r1, r1, #1
   29084:	b249      	sxtb	r1, r1
   29086:	f7ff bcb2 	b.w	289ee <uECC_vli_isZero>

0002908a <apply_z>:
{
   2908a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2908c:	4615      	mov	r5, r2
   2908e:	b089      	sub	sp, #36	; 0x24
   29090:	461c      	mov	r4, r3
   29092:	4607      	mov	r7, r0
   29094:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   29096:	461a      	mov	r2, r3
   29098:	4629      	mov	r1, r5
   2909a:	4668      	mov	r0, sp
   2909c:	f7ff fe03 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   290a0:	4623      	mov	r3, r4
   290a2:	466a      	mov	r2, sp
   290a4:	4639      	mov	r1, r7
   290a6:	4638      	mov	r0, r7
   290a8:	f7ff fded 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   290ac:	4623      	mov	r3, r4
   290ae:	462a      	mov	r2, r5
   290b0:	4669      	mov	r1, sp
   290b2:	4668      	mov	r0, sp
   290b4:	f7ff fde7 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   290b8:	4623      	mov	r3, r4
   290ba:	466a      	mov	r2, sp
   290bc:	4631      	mov	r1, r6
   290be:	4630      	mov	r0, r6
   290c0:	f7ff fde1 	bl	28c86 <uECC_vli_modMult_fast>
}
   290c4:	b009      	add	sp, #36	; 0x24
   290c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000290c8 <XYcZ_add>:
{
   290c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   290cc:	b08a      	sub	sp, #40	; 0x28
   290ce:	4614      	mov	r4, r2
   290d0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   290d4:	4655      	mov	r5, sl
{
   290d6:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   290d8:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   290dc:	9600      	str	r6, [sp, #0]
{
   290de:	4680      	mov	r8, r0
   290e0:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   290e2:	462b      	mov	r3, r5
   290e4:	4602      	mov	r2, r0
   290e6:	4621      	mov	r1, r4
   290e8:	a802      	add	r0, sp, #8
   290ea:	f7ff fd22 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   290ee:	a902      	add	r1, sp, #8
   290f0:	4652      	mov	r2, sl
   290f2:	4608      	mov	r0, r1
   290f4:	f7ff fdd7 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   290f8:	4653      	mov	r3, sl
   290fa:	aa02      	add	r2, sp, #8
   290fc:	4641      	mov	r1, r8
   290fe:	4640      	mov	r0, r8
   29100:	f7ff fdc1 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   29104:	4653      	mov	r3, sl
   29106:	aa02      	add	r2, sp, #8
   29108:	4621      	mov	r1, r4
   2910a:	4620      	mov	r0, r4
   2910c:	f7ff fdbb 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   29110:	462b      	mov	r3, r5
   29112:	464a      	mov	r2, r9
   29114:	4639      	mov	r1, r7
   29116:	4638      	mov	r0, r7
   29118:	9600      	str	r6, [sp, #0]
   2911a:	f7ff fd0a 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2911e:	4652      	mov	r2, sl
   29120:	4639      	mov	r1, r7
   29122:	a802      	add	r0, sp, #8
   29124:	f7ff fdbf 	bl	28ca6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   29128:	a902      	add	r1, sp, #8
   2912a:	462b      	mov	r3, r5
   2912c:	4642      	mov	r2, r8
   2912e:	4608      	mov	r0, r1
   29130:	9600      	str	r6, [sp, #0]
   29132:	f7ff fcfe 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   29136:	a902      	add	r1, sp, #8
   29138:	462b      	mov	r3, r5
   2913a:	4622      	mov	r2, r4
   2913c:	4608      	mov	r0, r1
   2913e:	9600      	str	r6, [sp, #0]
   29140:	f7ff fcf7 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   29144:	462b      	mov	r3, r5
   29146:	4642      	mov	r2, r8
   29148:	4621      	mov	r1, r4
   2914a:	4620      	mov	r0, r4
   2914c:	9600      	str	r6, [sp, #0]
   2914e:	f7ff fcf0 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   29152:	4653      	mov	r3, sl
   29154:	4622      	mov	r2, r4
   29156:	4649      	mov	r1, r9
   29158:	4648      	mov	r0, r9
   2915a:	f7ff fd94 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2915e:	462b      	mov	r3, r5
   29160:	aa02      	add	r2, sp, #8
   29162:	4641      	mov	r1, r8
   29164:	4620      	mov	r0, r4
   29166:	9600      	str	r6, [sp, #0]
   29168:	f7ff fce3 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2916c:	4653      	mov	r3, sl
   2916e:	4622      	mov	r2, r4
   29170:	4639      	mov	r1, r7
   29172:	4638      	mov	r0, r7
   29174:	f7ff fd87 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   29178:	462b      	mov	r3, r5
   2917a:	464a      	mov	r2, r9
   2917c:	4639      	mov	r1, r7
   2917e:	4638      	mov	r0, r7
   29180:	9600      	str	r6, [sp, #0]
   29182:	f7ff fcd6 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   29186:	4632      	mov	r2, r6
   29188:	a902      	add	r1, sp, #8
   2918a:	4620      	mov	r0, r4
   2918c:	f7ff fc69 	bl	28a62 <uECC_vli_set>
}
   29190:	b00a      	add	sp, #40	; 0x28
   29192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029196 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   29196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2919a:	b0b1      	sub	sp, #196	; 0xc4
   2919c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   291a0:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   291a2:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   291a6:	a818      	add	r0, sp, #96	; 0x60
{
   291a8:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   291aa:	463a      	mov	r2, r7
{
   291ac:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   291ae:	f7ff fc58 	bl	28a62 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   291b2:	00bb      	lsls	r3, r7, #2
   291b4:	9305      	str	r3, [sp, #20]
   291b6:	9b04      	ldr	r3, [sp, #16]
   291b8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   291bc:	4619      	mov	r1, r3
   291be:	a828      	add	r0, sp, #160	; 0xa0
   291c0:	9302      	str	r3, [sp, #8]
   291c2:	f7ff fc4e 	bl	28a62 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   291c6:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   291ca:	2e00      	cmp	r6, #0
   291cc:	f000 8088 	beq.w	292e0 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   291d0:	462a      	mov	r2, r5
   291d2:	4631      	mov	r1, r6
   291d4:	a808      	add	r0, sp, #32
   291d6:	f7ff fc44 	bl	28a62 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   291da:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   291de:	462a      	mov	r2, r5
   291e0:	a918      	add	r1, sp, #96	; 0x60
   291e2:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   291e4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   291e8:	f7ff fc3b 	bl	28a62 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   291ec:	a928      	add	r1, sp, #160	; 0xa0
   291ee:	4648      	mov	r0, r9
   291f0:	f7ff fc37 	bl	28a62 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   291f4:	4623      	mov	r3, r4
   291f6:	aa08      	add	r2, sp, #32
   291f8:	a928      	add	r1, sp, #160	; 0xa0
   291fa:	a818      	add	r0, sp, #96	; 0x60
   291fc:	f7ff ff45 	bl	2908a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   29200:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   29204:	4623      	mov	r3, r4
   29206:	aa08      	add	r2, sp, #32
   29208:	a928      	add	r1, sp, #160	; 0xa0
   2920a:	a818      	add	r0, sp, #96	; 0x60
   2920c:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2920e:	4623      	mov	r3, r4
   29210:	aa08      	add	r2, sp, #32
   29212:	4649      	mov	r1, r9
   29214:	4640      	mov	r0, r8
   29216:	f7ff ff38 	bl	2908a <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2921a:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2921e:	3d02      	subs	r5, #2
   29220:	b22d      	sxth	r5, r5
   29222:	2d00      	cmp	r5, #0
   29224:	dc63      	bgt.n	292ee <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   29226:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2922a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2922c:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   29230:	ab10      	add	r3, sp, #64	; 0x40
   29232:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   29236:	43ed      	mvns	r5, r5
   29238:	ab20      	add	r3, sp, #128	; 0x80
   2923a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2923e:	f005 0501 	and.w	r5, r5, #1
   29242:	ab10      	add	r3, sp, #64	; 0x40
   29244:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   29248:	ab20      	add	r3, sp, #128	; 0x80
   2924a:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2924e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   29252:	462b      	mov	r3, r5
   29254:	464a      	mov	r2, r9
   29256:	4631      	mov	r1, r6
   29258:	4640      	mov	r0, r8
   2925a:	f7ff fe00 	bl	28e5e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2925e:	4653      	mov	r3, sl
   29260:	aa10      	add	r2, sp, #64	; 0x40
   29262:	a918      	add	r1, sp, #96	; 0x60
   29264:	a808      	add	r0, sp, #32
   29266:	9700      	str	r7, [sp, #0]
   29268:	f7ff fc63 	bl	28b32 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2926c:	a908      	add	r1, sp, #32
   2926e:	4623      	mov	r3, r4
   29270:	4632      	mov	r2, r6
   29272:	4608      	mov	r0, r1
   29274:	f7ff fd07 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   29278:	a908      	add	r1, sp, #32
   2927a:	9a04      	ldr	r2, [sp, #16]
   2927c:	4623      	mov	r3, r4
   2927e:	4608      	mov	r0, r1
   29280:	f7ff fd01 	bl	28c86 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   29284:	a908      	add	r1, sp, #32
   29286:	463b      	mov	r3, r7
   29288:	4652      	mov	r2, sl
   2928a:	4608      	mov	r0, r1
   2928c:	f7ff fe75 	bl	28f7a <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   29290:	a908      	add	r1, sp, #32
   29292:	9a02      	ldr	r2, [sp, #8]
   29294:	4623      	mov	r3, r4
   29296:	4608      	mov	r0, r1
   29298:	f7ff fcf5 	bl	28c86 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2929c:	a908      	add	r1, sp, #32
   2929e:	4623      	mov	r3, r4
   292a0:	4642      	mov	r2, r8
   292a2:	4608      	mov	r0, r1
   292a4:	f7ff fcef 	bl	28c86 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   292a8:	9400      	str	r4, [sp, #0]
   292aa:	4633      	mov	r3, r6
   292ac:	4642      	mov	r2, r8
   292ae:	4629      	mov	r1, r5
   292b0:	4648      	mov	r0, r9
   292b2:	f7ff ff09 	bl	290c8 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   292b6:	4623      	mov	r3, r4
   292b8:	aa08      	add	r2, sp, #32
   292ba:	a920      	add	r1, sp, #128	; 0x80
   292bc:	a810      	add	r0, sp, #64	; 0x40
   292be:	f7ff fee4 	bl	2908a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   292c2:	9803      	ldr	r0, [sp, #12]
   292c4:	463a      	mov	r2, r7
   292c6:	a910      	add	r1, sp, #64	; 0x40
   292c8:	f7ff fbcb 	bl	28a62 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   292cc:	9b03      	ldr	r3, [sp, #12]
   292ce:	9c05      	ldr	r4, [sp, #20]
   292d0:	4423      	add	r3, r4
   292d2:	a920      	add	r1, sp, #128	; 0x80
   292d4:	4618      	mov	r0, r3
   292d6:	f7ff fbc4 	bl	28a62 <uECC_vli_set>
}
   292da:	b031      	add	sp, #196	; 0xc4
   292dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   292e0:	4629      	mov	r1, r5
   292e2:	a808      	add	r0, sp, #32
   292e4:	f7ff fb78 	bl	289d8 <uECC_vli_clear>
		z[0] = 1;
   292e8:	2301      	movs	r3, #1
   292ea:	9308      	str	r3, [sp, #32]
   292ec:	e775      	b.n	291da <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   292ee:	4629      	mov	r1, r5
   292f0:	4650      	mov	r0, sl
   292f2:	f7ff fb8b 	bl	28a0c <uECC_vli_testBit>
   292f6:	fab0 f680 	clz	r6, r0
   292fa:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   292fc:	f1c6 0101 	rsb	r1, r6, #1
   29300:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   29304:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   29308:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   2930c:	4633      	mov	r3, r6
   2930e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   29312:	465a      	mov	r2, fp
   29314:	9400      	str	r4, [sp, #0]
   29316:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2931a:	f7ff fda0 	bl	28e5e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2931e:	9907      	ldr	r1, [sp, #28]
   29320:	9806      	ldr	r0, [sp, #24]
   29322:	9400      	str	r4, [sp, #0]
   29324:	460b      	mov	r3, r1
   29326:	4602      	mov	r2, r0
   29328:	4631      	mov	r1, r6
   2932a:	4658      	mov	r0, fp
   2932c:	f7ff fecc 	bl	290c8 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   29330:	3d01      	subs	r5, #1
   29332:	e775      	b.n	29220 <EccPoint_mult+0x8a>

00029334 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   29334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   29338:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   2933c:	f119 081f 	adds.w	r8, r9, #31
{
   29340:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   29342:	bf48      	it	mi
   29344:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   29348:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2934a:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2934e:	3524      	adds	r5, #36	; 0x24
   29350:	4601      	mov	r1, r0
{
   29352:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   29354:	4643      	mov	r3, r8
   29356:	462a      	mov	r2, r5
   29358:	4630      	mov	r0, r6
   2935a:	f7ff fa84 	bl	28866 <uECC_vli_add>
   2935e:	4604      	mov	r4, r0
   29360:	b990      	cbnz	r0, 29388 <regularize_k+0x54>
   29362:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   29366:	da06      	bge.n	29376 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   29368:	4649      	mov	r1, r9
   2936a:	4630      	mov	r0, r6
   2936c:	f7ff fb4e 	bl	28a0c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   29370:	1e04      	subs	r4, r0, #0
   29372:	bf18      	it	ne
   29374:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   29376:	4643      	mov	r3, r8
   29378:	462a      	mov	r2, r5
   2937a:	4631      	mov	r1, r6
   2937c:	4638      	mov	r0, r7
   2937e:	f7ff fa72 	bl	28866 <uECC_vli_add>

	return carry;
}
   29382:	4620      	mov	r0, r4
   29384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   29388:	2401      	movs	r4, #1
   2938a:	e7f4      	b.n	29376 <regularize_k+0x42>

0002938c <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2938c:	b530      	push	{r4, r5, lr}
   2938e:	4614      	mov	r4, r2
   29390:	b095      	sub	sp, #84	; 0x54
   29392:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   29394:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   29396:	4623      	mov	r3, r4
{
   29398:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2939a:	a904      	add	r1, sp, #16
   2939c:	9102      	str	r1, [sp, #8]
   2939e:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   293a0:	f7ff ffc8 	bl	29334 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   293a4:	fab0 f380 	clz	r3, r0
   293a8:	095b      	lsrs	r3, r3, #5
   293aa:	aa14      	add	r2, sp, #80	; 0x50
   293ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   293b0:	8863      	ldrh	r3, [r4, #2]
   293b2:	9401      	str	r4, [sp, #4]
   293b4:	3301      	adds	r3, #1
   293b6:	b21b      	sxth	r3, r3
   293b8:	9300      	str	r3, [sp, #0]
   293ba:	f852 2c48 	ldr.w	r2, [r2, #-72]
   293be:	2300      	movs	r3, #0
   293c0:	f104 0144 	add.w	r1, r4, #68	; 0x44
   293c4:	4628      	mov	r0, r5
   293c6:	f7ff fee6 	bl	29196 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   293ca:	4621      	mov	r1, r4
   293cc:	4628      	mov	r0, r5
   293ce:	f7ff fe57 	bl	29080 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   293d2:	fab0 f080 	clz	r0, r0
   293d6:	0940      	lsrs	r0, r0, #5
   293d8:	b015      	add	sp, #84	; 0x54
   293da:	bd30      	pop	{r4, r5, pc}

000293dc <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   293dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   293de:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   293e0:	1e4f      	subs	r7, r1, #1
   293e2:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   293e4:	428c      	cmp	r4, r1
   293e6:	f105 0501 	add.w	r5, r5, #1
   293ea:	db00      	blt.n	293ee <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   293ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   293ee:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   293f0:	f023 0603 	bic.w	r6, r3, #3
   293f4:	f003 0303 	and.w	r3, r3, #3
   293f8:	5996      	ldr	r6, [r2, r6]
   293fa:	00db      	lsls	r3, r3, #3
   293fc:	fa26 f303 	lsr.w	r3, r6, r3
   29400:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   29402:	e7ee      	b.n	293e2 <uECC_vli_nativeToBytes+0x6>

00029404 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   29404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29406:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   29408:	1cd1      	adds	r1, r2, #3
   2940a:	bf48      	it	mi
   2940c:	1d91      	addmi	r1, r2, #6
   2940e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   29412:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   29414:	f7ff fae0 	bl	289d8 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   29418:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2941a:	1e67      	subs	r7, r4, #1
   2941c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2941e:	42a2      	cmp	r2, r4
   29420:	f105 0501 	add.w	r5, r5, #1
   29424:	db00      	blt.n	29428 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   29426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   29428:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2942a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2942e:	5cb2      	ldrb	r2, [r6, r2]
   29430:	f003 0303 	and.w	r3, r3, #3
   29434:	00db      	lsls	r3, r3, #3
   29436:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2943a:	5842      	ldr	r2, [r0, r1]
   2943c:	431a      	orrs	r2, r3
   2943e:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   29440:	e7ec      	b.n	2941c <uECC_vli_bytesToNative+0x18>

00029442 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   29442:	b5f0      	push	{r4, r5, r6, r7, lr}
   29444:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   29446:	f991 6000 	ldrsb.w	r6, [r1]
{
   2944a:	4605      	mov	r5, r0
   2944c:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2944e:	f7ff fe17 	bl	29080 <EccPoint_isZero>
   29452:	bb28      	cbnz	r0, 294a0 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   29454:	1d27      	adds	r7, r4, #4
   29456:	4632      	mov	r2, r6
   29458:	4629      	mov	r1, r5
   2945a:	4638      	mov	r0, r7
   2945c:	f7ff fb0d 	bl	28a7a <uECC_vli_cmp_unsafe>
   29460:	2801      	cmp	r0, #1
   29462:	d120      	bne.n	294a6 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   29464:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   29468:	4632      	mov	r2, r6
   2946a:	4638      	mov	r0, r7
   2946c:	f7ff fb05 	bl	28a7a <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   29470:	2801      	cmp	r0, #1
   29472:	d118      	bne.n	294a6 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   29474:	4622      	mov	r2, r4
   29476:	4668      	mov	r0, sp
   29478:	f7ff fc15 	bl	28ca6 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2947c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   29480:	4622      	mov	r2, r4
   29482:	4629      	mov	r1, r5
   29484:	a808      	add	r0, sp, #32
   29486:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   29488:	4632      	mov	r2, r6
   2948a:	a908      	add	r1, sp, #32
   2948c:	4668      	mov	r0, sp
   2948e:	f7ff fb0b 	bl	28aa8 <uECC_vli_equal>
   29492:	2800      	cmp	r0, #0
		return -3;
   29494:	bf0c      	ite	eq
   29496:	2000      	moveq	r0, #0
   29498:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   2949c:	b011      	add	sp, #68	; 0x44
   2949e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   294a0:	f04f 30ff 	mov.w	r0, #4294967295
   294a4:	e7fa      	b.n	2949c <uECC_valid_point+0x5a>
		return -2;
   294a6:	f06f 0001 	mvn.w	r0, #1
   294aa:	e7f7      	b.n	2949c <uECC_valid_point+0x5a>

000294ac <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   294ac:	b570      	push	{r4, r5, r6, lr}
   294ae:	460c      	mov	r4, r1
   294b0:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   294b2:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   294b4:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   294b8:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   294ba:	4601      	mov	r1, r0
   294bc:	4668      	mov	r0, sp
   294be:	f7ff ffa1 	bl	29404 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   294c2:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   294c6:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   294ca:	18a9      	adds	r1, r5, r2
   294cc:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   294d0:	f7ff ff98 	bl	29404 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   294d4:	2210      	movs	r2, #16
   294d6:	4631      	mov	r1, r6
   294d8:	4668      	mov	r0, sp
   294da:	f7ff face 	bl	28a7a <uECC_vli_cmp_unsafe>
   294de:	b128      	cbz	r0, 294ec <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   294e0:	4621      	mov	r1, r4
   294e2:	4668      	mov	r0, sp
   294e4:	f7ff ffad 	bl	29442 <uECC_valid_point>
}
   294e8:	b010      	add	sp, #64	; 0x40
   294ea:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   294ec:	f06f 0003 	mvn.w	r0, #3
   294f0:	e7fa      	b.n	294e8 <uECC_valid_public_key+0x3c>

000294f2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   294f2:	78cb      	ldrb	r3, [r1, #3]
   294f4:	7802      	ldrb	r2, [r0, #0]
   294f6:	4053      	eors	r3, r2
   294f8:	7003      	strb	r3, [r0, #0]
   294fa:	884b      	ldrh	r3, [r1, #2]
   294fc:	7842      	ldrb	r2, [r0, #1]
   294fe:	4053      	eors	r3, r2
   29500:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   29502:	680a      	ldr	r2, [r1, #0]
   29504:	7883      	ldrb	r3, [r0, #2]
   29506:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2950a:	7083      	strb	r3, [r0, #2]
   2950c:	680a      	ldr	r2, [r1, #0]
   2950e:	78c3      	ldrb	r3, [r0, #3]
   29510:	4053      	eors	r3, r2
   29512:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   29514:	79cb      	ldrb	r3, [r1, #7]
   29516:	7902      	ldrb	r2, [r0, #4]
   29518:	4053      	eors	r3, r2
   2951a:	7103      	strb	r3, [r0, #4]
   2951c:	88cb      	ldrh	r3, [r1, #6]
   2951e:	7942      	ldrb	r2, [r0, #5]
   29520:	4053      	eors	r3, r2
   29522:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   29524:	684a      	ldr	r2, [r1, #4]
   29526:	7983      	ldrb	r3, [r0, #6]
   29528:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2952c:	7183      	strb	r3, [r0, #6]
   2952e:	684a      	ldr	r2, [r1, #4]
   29530:	79c3      	ldrb	r3, [r0, #7]
   29532:	4053      	eors	r3, r2
   29534:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   29536:	7acb      	ldrb	r3, [r1, #11]
   29538:	7a02      	ldrb	r2, [r0, #8]
   2953a:	4053      	eors	r3, r2
   2953c:	7203      	strb	r3, [r0, #8]
   2953e:	7a42      	ldrb	r2, [r0, #9]
   29540:	894b      	ldrh	r3, [r1, #10]
   29542:	4053      	eors	r3, r2
   29544:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   29546:	688a      	ldr	r2, [r1, #8]
   29548:	7a83      	ldrb	r3, [r0, #10]
   2954a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2954e:	7283      	strb	r3, [r0, #10]
   29550:	688a      	ldr	r2, [r1, #8]
   29552:	7ac3      	ldrb	r3, [r0, #11]
   29554:	4053      	eors	r3, r2
   29556:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   29558:	7bcb      	ldrb	r3, [r1, #15]
   2955a:	7b02      	ldrb	r2, [r0, #12]
   2955c:	4053      	eors	r3, r2
   2955e:	7303      	strb	r3, [r0, #12]
   29560:	89cb      	ldrh	r3, [r1, #14]
   29562:	7b42      	ldrb	r2, [r0, #13]
   29564:	4053      	eors	r3, r2
   29566:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   29568:	68ca      	ldr	r2, [r1, #12]
   2956a:	7b83      	ldrb	r3, [r0, #14]
   2956c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   29570:	7383      	strb	r3, [r0, #14]
   29572:	68ca      	ldr	r2, [r1, #12]
   29574:	7bc3      	ldrb	r3, [r0, #15]
   29576:	4053      	eors	r3, r2
   29578:	73c3      	strb	r3, [r0, #15]
}
   2957a:	4770      	bx	lr

0002957c <shift_rows>:
{
   2957c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2957e:	7802      	ldrb	r2, [r0, #0]
   29580:	f88d 2000 	strb.w	r2, [sp]
   29584:	7942      	ldrb	r2, [r0, #5]
   29586:	f88d 2001 	strb.w	r2, [sp, #1]
   2958a:	7a82      	ldrb	r2, [r0, #10]
   2958c:	f88d 2002 	strb.w	r2, [sp, #2]
   29590:	7bc2      	ldrb	r2, [r0, #15]
   29592:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   29596:	7902      	ldrb	r2, [r0, #4]
   29598:	f88d 2004 	strb.w	r2, [sp, #4]
   2959c:	7a42      	ldrb	r2, [r0, #9]
   2959e:	f88d 2005 	strb.w	r2, [sp, #5]
   295a2:	7b82      	ldrb	r2, [r0, #14]
   295a4:	f88d 2006 	strb.w	r2, [sp, #6]
   295a8:	78c2      	ldrb	r2, [r0, #3]
   295aa:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   295ae:	7a02      	ldrb	r2, [r0, #8]
   295b0:	f88d 2008 	strb.w	r2, [sp, #8]
   295b4:	7b42      	ldrb	r2, [r0, #13]
   295b6:	f88d 2009 	strb.w	r2, [sp, #9]
   295ba:	7882      	ldrb	r2, [r0, #2]
   295bc:	f88d 200a 	strb.w	r2, [sp, #10]
   295c0:	79c2      	ldrb	r2, [r0, #7]
   295c2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   295c6:	7b02      	ldrb	r2, [r0, #12]
   295c8:	f88d 200c 	strb.w	r2, [sp, #12]
   295cc:	7842      	ldrb	r2, [r0, #1]
   295ce:	7ac3      	ldrb	r3, [r0, #11]
   295d0:	f88d 200d 	strb.w	r2, [sp, #13]
   295d4:	7982      	ldrb	r2, [r0, #6]
   295d6:	f88d 200e 	strb.w	r2, [sp, #14]
   295da:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   295de:	2310      	movs	r3, #16
   295e0:	466a      	mov	r2, sp
   295e2:	4619      	mov	r1, r3
   295e4:	f7ff f87b 	bl	286de <_copy>
}
   295e8:	b005      	add	sp, #20
   295ea:	f85d fb04 	ldr.w	pc, [sp], #4

000295ee <mult_row_column>:
{
   295ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   295f0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   295f2:	7808      	ldrb	r0, [r1, #0]
{
   295f4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   295f6:	f7ff f881 	bl	286fc <_double_byte>
   295fa:	4605      	mov	r5, r0
   295fc:	7860      	ldrb	r0, [r4, #1]
   295fe:	f7ff f87d 	bl	286fc <_double_byte>
   29602:	78a2      	ldrb	r2, [r4, #2]
   29604:	7863      	ldrb	r3, [r4, #1]
   29606:	4053      	eors	r3, r2
   29608:	78e2      	ldrb	r2, [r4, #3]
   2960a:	4053      	eors	r3, r2
   2960c:	405d      	eors	r5, r3
   2960e:	4045      	eors	r5, r0
   29610:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   29612:	7860      	ldrb	r0, [r4, #1]
   29614:	7827      	ldrb	r7, [r4, #0]
   29616:	f7ff f871 	bl	286fc <_double_byte>
   2961a:	4605      	mov	r5, r0
   2961c:	78a0      	ldrb	r0, [r4, #2]
   2961e:	f7ff f86d 	bl	286fc <_double_byte>
   29622:	78a3      	ldrb	r3, [r4, #2]
   29624:	405f      	eors	r7, r3
   29626:	78e3      	ldrb	r3, [r4, #3]
   29628:	405f      	eors	r7, r3
   2962a:	407d      	eors	r5, r7
   2962c:	4045      	eors	r5, r0
   2962e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   29630:	78a0      	ldrb	r0, [r4, #2]
   29632:	7865      	ldrb	r5, [r4, #1]
   29634:	7827      	ldrb	r7, [r4, #0]
   29636:	f7ff f861 	bl	286fc <_double_byte>
   2963a:	406f      	eors	r7, r5
   2963c:	4605      	mov	r5, r0
   2963e:	78e0      	ldrb	r0, [r4, #3]
   29640:	f7ff f85c 	bl	286fc <_double_byte>
   29644:	78e3      	ldrb	r3, [r4, #3]
   29646:	405f      	eors	r7, r3
   29648:	407d      	eors	r5, r7
   2964a:	4045      	eors	r5, r0
   2964c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2964e:	7820      	ldrb	r0, [r4, #0]
   29650:	f7ff f854 	bl	286fc <_double_byte>
   29654:	7863      	ldrb	r3, [r4, #1]
   29656:	7825      	ldrb	r5, [r4, #0]
   29658:	405d      	eors	r5, r3
   2965a:	78a3      	ldrb	r3, [r4, #2]
   2965c:	405d      	eors	r5, r3
   2965e:	4045      	eors	r5, r0
   29660:	78e0      	ldrb	r0, [r4, #3]
   29662:	f7ff f84b 	bl	286fc <_double_byte>
   29666:	b2ed      	uxtb	r5, r5
   29668:	4045      	eors	r5, r0
   2966a:	70f5      	strb	r5, [r6, #3]
}
   2966c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002966e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2966e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29670:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   29672:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29674:	f912 3b10 	ldrsb.w	r3, [r2], #16
   29678:	2b00      	cmp	r3, #0
   2967a:	bfb4      	ite	lt
   2967c:	2387      	movlt	r3, #135	; 0x87
   2967e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   29680:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   29684:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   29688:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2968a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2968e:	d002      	beq.n	29696 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   29690:	7813      	ldrb	r3, [r2, #0]
   29692:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   29694:	e7f4      	b.n	29680 <gf_double+0x12>
	}
}
   29696:	bd10      	pop	{r4, pc}

00029698 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   29698:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2969a:	b120      	cbz	r0, 296a6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2969c:	2258      	movs	r2, #88	; 0x58
   2969e:	2100      	movs	r1, #0
   296a0:	f7ff f82a 	bl	286f8 <_set>
   296a4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   296a6:	bd08      	pop	{r3, pc}

000296a8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   296a8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   296aa:	4604      	mov	r4, r0
   296ac:	b188      	cbz	r0, 296d2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   296ae:	2210      	movs	r2, #16
   296b0:	2100      	movs	r1, #0
   296b2:	f7ff f821 	bl	286f8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   296b6:	2210      	movs	r2, #16
   296b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   296bc:	2100      	movs	r1, #0
   296be:	f7ff f81b 	bl	286f8 <_set>
	s->leftover_offset = 0;
   296c2:	2300      	movs	r3, #0
   296c4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   296c6:	2200      	movs	r2, #0
   296c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   296cc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   296d0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   296d2:	bd10      	pop	{r4, pc}

000296d4 <tc_cmac_setup>:
{
   296d4:	b570      	push	{r4, r5, r6, lr}
   296d6:	460d      	mov	r5, r1
   296d8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   296da:	4604      	mov	r4, r0
   296dc:	b310      	cbz	r0, 29724 <tc_cmac_setup+0x50>
   296de:	b311      	cbz	r1, 29726 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   296e0:	2258      	movs	r2, #88	; 0x58
   296e2:	2100      	movs	r1, #0
   296e4:	f7ff f808 	bl	286f8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   296e8:	4629      	mov	r1, r5
	s->sched = sched;
   296ea:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   296ec:	4630      	mov	r0, r6
   296ee:	f7ea fbc5 	bl	13e7c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   296f2:	2210      	movs	r2, #16
   296f4:	2100      	movs	r1, #0
   296f6:	4620      	mov	r0, r4
   296f8:	f7fe fffe 	bl	286f8 <_set>
	gf_double (s->K1, s->iv);
   296fc:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29700:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29702:	4621      	mov	r1, r4
   29704:	4620      	mov	r0, r4
   29706:	f7ea fc0b 	bl	13f20 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2970a:	4621      	mov	r1, r4
   2970c:	4628      	mov	r0, r5
   2970e:	f7ff ffae 	bl	2966e <gf_double>
	gf_double (s->K2, s->K1);
   29712:	4629      	mov	r1, r5
   29714:	f104 0020 	add.w	r0, r4, #32
   29718:	f7ff ffa9 	bl	2966e <gf_double>
	tc_cmac_init(s);
   2971c:	4620      	mov	r0, r4
   2971e:	f7ff ffc3 	bl	296a8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   29722:	2001      	movs	r0, #1
}
   29724:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29726:	4608      	mov	r0, r1
   29728:	e7fc      	b.n	29724 <tc_cmac_setup+0x50>

0002972a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2972a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2972e:	460d      	mov	r5, r1
   29730:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29732:	4604      	mov	r4, r0
   29734:	2800      	cmp	r0, #0
   29736:	d062      	beq.n	297fe <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   29738:	b912      	cbnz	r2, 29740 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2973a:	2001      	movs	r0, #1
}
   2973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   29740:	2900      	cmp	r1, #0
   29742:	d05c      	beq.n	297fe <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   29744:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   29748:	ea50 0301 	orrs.w	r3, r0, r1
   2974c:	d057      	beq.n	297fe <tc_cmac_update+0xd4>
	s->countdown--;
   2974e:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   29752:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   29756:	f141 33ff 	adc.w	r3, r1, #4294967295
   2975a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2975e:	f1b8 0f00 	cmp.w	r8, #0
   29762:	d02a      	beq.n	297ba <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   29764:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   29768:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2976c:	42be      	cmp	r6, r7
   2976e:	4420      	add	r0, r4
   29770:	d208      	bcs.n	29784 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29772:	462a      	mov	r2, r5
   29774:	4633      	mov	r3, r6
   29776:	4631      	mov	r1, r6
   29778:	f7fe ffb1 	bl	286de <_copy>
			s->leftover_offset += data_length;
   2977c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2977e:	4432      	add	r2, r6
   29780:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   29782:	e7da      	b.n	2973a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   29784:	463b      	mov	r3, r7
   29786:	462a      	mov	r2, r5
   29788:	4639      	mov	r1, r7
   2978a:	f7fe ffa8 	bl	286de <_copy>
		data_length -= remaining_space;
   2978e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   29790:	2300      	movs	r3, #0
   29792:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   29794:	4446      	add	r6, r8
		data += remaining_space;
   29796:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29798:	1e63      	subs	r3, r4, #1
   2979a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2979e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   297a2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   297a6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   297a8:	ea82 0200 	eor.w	r2, r2, r0
   297ac:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   297ae:	d1f6      	bne.n	2979e <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   297b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   297b2:	4621      	mov	r1, r4
   297b4:	4620      	mov	r0, r4
   297b6:	f7ea fbb3 	bl	13f20 <tc_aes_encrypt>
   297ba:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   297be:	2e10      	cmp	r6, #16
   297c0:	d80a      	bhi.n	297d8 <tc_cmac_update+0xae>
	if (data_length > 0) {
   297c2:	2e00      	cmp	r6, #0
   297c4:	d0b9      	beq.n	2973a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   297c6:	4633      	mov	r3, r6
   297c8:	462a      	mov	r2, r5
   297ca:	4631      	mov	r1, r6
   297cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   297d0:	f7fe ff85 	bl	286de <_copy>
		s->leftover_offset = data_length;
   297d4:	6466      	str	r6, [r4, #68]	; 0x44
   297d6:	e7b0      	b.n	2973a <tc_cmac_update+0x10>
   297d8:	1e63      	subs	r3, r4, #1
   297da:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   297dc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   297e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   297e4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   297e6:	ea82 0200 	eor.w	r2, r2, r0
   297ea:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   297ec:	d1f6      	bne.n	297dc <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   297ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   297f0:	4621      	mov	r1, r4
   297f2:	4620      	mov	r0, r4
   297f4:	f7ea fb94 	bl	13f20 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   297f8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   297fa:	3e10      	subs	r6, #16
   297fc:	e7df      	b.n	297be <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   297fe:	2000      	movs	r0, #0
   29800:	e79c      	b.n	2973c <tc_cmac_update+0x12>

00029802 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   29802:	b570      	push	{r4, r5, r6, lr}
   29804:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29806:	4605      	mov	r5, r0
   29808:	b1e8      	cbz	r0, 29846 <tc_cmac_final+0x44>
   2980a:	b369      	cbz	r1, 29868 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2980c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2980e:	2a10      	cmp	r2, #16
   29810:	d11a      	bne.n	29848 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29812:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29814:	1e63      	subs	r3, r4, #1
   29816:	3901      	subs	r1, #1
   29818:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2981c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29820:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   29824:	4072      	eors	r2, r6
   29826:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2982a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2982c:	ea82 0206 	eor.w	r2, r2, r6
   29830:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29832:	d1f3      	bne.n	2981c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   29834:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29836:	4621      	mov	r1, r4
   29838:	4628      	mov	r0, r5
   2983a:	f7ea fb71 	bl	13f20 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2983e:	4620      	mov	r0, r4
   29840:	f7ff ff2a 	bl	29698 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   29844:	2001      	movs	r0, #1
}
   29846:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   29848:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2984c:	2100      	movs	r1, #0
   2984e:	f1c2 0210 	rsb	r2, r2, #16
   29852:	4420      	add	r0, r4
   29854:	f7fe ff50 	bl	286f8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   29858:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2985a:	4423      	add	r3, r4
   2985c:	2280      	movs	r2, #128	; 0x80
   2985e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   29862:	f104 0120 	add.w	r1, r4, #32
   29866:	e7d5      	b.n	29814 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   29868:	4608      	mov	r0, r1
   2986a:	e7ec      	b.n	29846 <tc_cmac_final+0x44>

0002986c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   2986c:	2000      	movs	r0, #0
   2986e:	f7e7 bf5d 	b.w	1172c <sys_reboot>

00029872 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   29872:	2100      	movs	r1, #0
   29874:	2001      	movs	r0, #1
   29876:	f7ea bdbd 	b.w	143f4 <z_arm_fatal_error>

0002987a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2987a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2987c:	6800      	ldr	r0, [r0, #0]
   2987e:	f7ea bdb9 	b.w	143f4 <z_arm_fatal_error>

00029882 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   29882:	b508      	push	{r3, lr}
	handler();
   29884:	f7ea fdee 	bl	14464 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   29888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2988c:	f7eb b8b4 	b.w	149f8 <z_arm_exc_exit>

00029890 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   29890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29894:	4684      	mov	ip, r0
   29896:	4688      	mov	r8, r1
	register const char *s = nptr;
   29898:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2989a:	460c      	mov	r4, r1
   2989c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   298a0:	2b20      	cmp	r3, #32
   298a2:	d033      	beq.n	2990c <strtol+0x7c>
   298a4:	f1a3 0009 	sub.w	r0, r3, #9
   298a8:	2804      	cmp	r0, #4
   298aa:	d92f      	bls.n	2990c <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   298ac:	2b2d      	cmp	r3, #45	; 0x2d
   298ae:	d12f      	bne.n	29910 <strtol+0x80>
		neg = 1;
		c = *s++;
   298b0:	784b      	ldrb	r3, [r1, #1]
   298b2:	1c8c      	adds	r4, r1, #2
		neg = 1;
   298b4:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   298b6:	2a00      	cmp	r2, #0
   298b8:	d05c      	beq.n	29974 <strtol+0xe4>
   298ba:	2a10      	cmp	r2, #16
   298bc:	d109      	bne.n	298d2 <strtol+0x42>
   298be:	2b30      	cmp	r3, #48	; 0x30
   298c0:	d107      	bne.n	298d2 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   298c2:	7823      	ldrb	r3, [r4, #0]
   298c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   298c8:	2b58      	cmp	r3, #88	; 0x58
   298ca:	d14e      	bne.n	2996a <strtol+0xda>
		c = s[1];
   298cc:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   298ce:	2210      	movs	r2, #16
		s += 2;
   298d0:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   298d2:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   298d6:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   298d8:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   298da:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   298de:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   298e0:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   298e4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   298e8:	2d09      	cmp	r5, #9
   298ea:	d817      	bhi.n	2991c <strtol+0x8c>
			c -= '0';
   298ec:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   298ee:	429a      	cmp	r2, r3
   298f0:	dd24      	ble.n	2993c <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   298f2:	1c75      	adds	r5, r6, #1
   298f4:	d007      	beq.n	29906 <strtol+0x76>
   298f6:	4570      	cmp	r0, lr
   298f8:	d81d      	bhi.n	29936 <strtol+0xa6>
   298fa:	d101      	bne.n	29900 <strtol+0x70>
   298fc:	454b      	cmp	r3, r9
   298fe:	dc1a      	bgt.n	29936 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   29900:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   29904:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   29906:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2990a:	e7eb      	b.n	298e4 <strtol+0x54>
{
   2990c:	4621      	mov	r1, r4
   2990e:	e7c4      	b.n	2989a <strtol+0xa>
	} else if (c == '+') {
   29910:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   29912:	bf04      	itt	eq
   29914:	784b      	ldrbeq	r3, [r1, #1]
   29916:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   29918:	2100      	movs	r1, #0
   2991a:	e7cc      	b.n	298b6 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2991c:	f043 0520 	orr.w	r5, r3, #32
   29920:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   29922:	2d19      	cmp	r5, #25
   29924:	d80a      	bhi.n	2993c <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   29926:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2992a:	2d1a      	cmp	r5, #26
   2992c:	bf34      	ite	cc
   2992e:	2537      	movcc	r5, #55	; 0x37
   29930:	2557      	movcs	r5, #87	; 0x57
   29932:	1b5b      	subs	r3, r3, r5
   29934:	e7db      	b.n	298ee <strtol+0x5e>
			any = -1;
   29936:	f04f 36ff 	mov.w	r6, #4294967295
   2993a:	e7e4      	b.n	29906 <strtol+0x76>
		}
	}

	if (any < 0) {
   2993c:	1c73      	adds	r3, r6, #1
   2993e:	d109      	bne.n	29954 <strtol+0xc4>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   29940:	f7f6 ffd8 	bl	208f4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   29944:	2322      	movs	r3, #34	; 0x22
   29946:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   29948:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   2994a:	f1b8 0f00 	cmp.w	r8, #0
   2994e:	d107      	bne.n	29960 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   29950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   29954:	b101      	cbz	r1, 29958 <strtol+0xc8>
		acc = -acc;
   29956:	4240      	negs	r0, r0
	if (endptr != NULL) {
   29958:	f1b8 0f00 	cmp.w	r8, #0
   2995c:	d0f8      	beq.n	29950 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   2995e:	b10e      	cbz	r6, 29964 <strtol+0xd4>
   29960:	f104 3cff 	add.w	ip, r4, #4294967295
   29964:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   29968:	e7f2      	b.n	29950 <strtol+0xc0>
	if (base == 0) {
   2996a:	2330      	movs	r3, #48	; 0x30
   2996c:	2a00      	cmp	r2, #0
   2996e:	d1b0      	bne.n	298d2 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   29970:	2208      	movs	r2, #8
   29972:	e7ae      	b.n	298d2 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   29974:	2b30      	cmp	r3, #48	; 0x30
   29976:	d0a4      	beq.n	298c2 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   29978:	220a      	movs	r2, #10
   2997a:	e7aa      	b.n	298d2 <strtol+0x42>

0002997c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2997c:	3901      	subs	r1, #1
   2997e:	4603      	mov	r3, r0
   29980:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   29984:	b90a      	cbnz	r2, 2998a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   29986:	701a      	strb	r2, [r3, #0]

	return dest;
}
   29988:	4770      	bx	lr
		*d = *s;
   2998a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2998e:	e7f7      	b.n	29980 <strcpy+0x4>

00029990 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   29990:	b570      	push	{r4, r5, r6, lr}
   29992:	3901      	subs	r1, #1
   29994:	4605      	mov	r5, r0
   29996:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   29998:	b142      	cbz	r2, 299ac <strncpy+0x1c>
   2999a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2999e:	1e56      	subs	r6, r2, #1
   299a0:	b92b      	cbnz	r3, 299ae <strncpy+0x1e>
   299a2:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   299a4:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   299a8:	42a2      	cmp	r2, r4
   299aa:	d1fb      	bne.n	299a4 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   299ac:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   299ae:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   299b2:	4632      	mov	r2, r6
   299b4:	e7ef      	b.n	29996 <strncpy+0x6>

000299b6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   299b6:	4603      	mov	r3, r0
	size_t n = 0;
   299b8:	2000      	movs	r0, #0

	while (*s != '\0') {
   299ba:	5c1a      	ldrb	r2, [r3, r0]
   299bc:	b902      	cbnz	r2, 299c0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   299be:	4770      	bx	lr
		n++;
   299c0:	3001      	adds	r0, #1
   299c2:	e7fa      	b.n	299ba <strlen+0x4>

000299c4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   299c4:	4603      	mov	r3, r0
	size_t n = 0;
   299c6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   299c8:	5c1a      	ldrb	r2, [r3, r0]
   299ca:	b10a      	cbz	r2, 299d0 <strnlen+0xc>
   299cc:	4288      	cmp	r0, r1
   299ce:	d100      	bne.n	299d2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   299d0:	4770      	bx	lr
		n++;
   299d2:	3001      	adds	r0, #1
   299d4:	e7f8      	b.n	299c8 <strnlen+0x4>

000299d6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   299d6:	1e43      	subs	r3, r0, #1
   299d8:	3901      	subs	r1, #1
   299da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   299de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   299e2:	4282      	cmp	r2, r0
   299e4:	d101      	bne.n	299ea <strcmp+0x14>
   299e6:	2a00      	cmp	r2, #0
   299e8:	d1f7      	bne.n	299da <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   299ea:	1a10      	subs	r0, r2, r0
   299ec:	4770      	bx	lr

000299ee <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   299ee:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   299f0:	2400      	movs	r4, #0
   299f2:	42a2      	cmp	r2, r4
   299f4:	d008      	beq.n	29a08 <strncmp+0x1a>
   299f6:	5d03      	ldrb	r3, [r0, r4]
   299f8:	5d0d      	ldrb	r5, [r1, r4]
   299fa:	42ab      	cmp	r3, r5
   299fc:	d102      	bne.n	29a04 <strncmp+0x16>
   299fe:	3401      	adds	r4, #1
   29a00:	2b00      	cmp	r3, #0
   29a02:	d1f6      	bne.n	299f2 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   29a04:	1b58      	subs	r0, r3, r5
   29a06:	e000      	b.n	29a0a <strncmp+0x1c>
   29a08:	2000      	movs	r0, #0
}
   29a0a:	bd30      	pop	{r4, r5, pc}

00029a0c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   29a0c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   29a0e:	b15a      	cbz	r2, 29a28 <memcmp+0x1c>
   29a10:	3901      	subs	r1, #1
   29a12:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   29a14:	f810 2b01 	ldrb.w	r2, [r0], #1
   29a18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   29a1c:	42a0      	cmp	r0, r4
   29a1e:	d001      	beq.n	29a24 <memcmp+0x18>
   29a20:	429a      	cmp	r2, r3
   29a22:	d0f7      	beq.n	29a14 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   29a24:	1ad0      	subs	r0, r2, r3
}
   29a26:	bd10      	pop	{r4, pc}
		return 0;
   29a28:	4610      	mov	r0, r2
   29a2a:	e7fc      	b.n	29a26 <memcmp+0x1a>

00029a2c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   29a2c:	1a43      	subs	r3, r0, r1
   29a2e:	4293      	cmp	r3, r2
{
   29a30:	b510      	push	{r4, lr}
   29a32:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   29a36:	d308      	bcc.n	29a4a <memmove+0x1e>
   29a38:	3901      	subs	r1, #1
	char *dest = d;
   29a3a:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   29a3c:	429a      	cmp	r2, r3
   29a3e:	d00b      	beq.n	29a58 <memmove+0x2c>
			*dest = *src;
   29a40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29a44:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   29a48:	e7f8      	b.n	29a3c <memmove+0x10>
   29a4a:	440a      	add	r2, r1
			dest[n] = src[n];
   29a4c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   29a50:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   29a54:	428a      	cmp	r2, r1
   29a56:	d1f9      	bne.n	29a4c <memmove+0x20>
		}
	}

	return d;
}
   29a58:	bd10      	pop	{r4, pc}

00029a5a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   29a5a:	b510      	push	{r4, lr}
   29a5c:	1e43      	subs	r3, r0, #1
   29a5e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   29a60:	4291      	cmp	r1, r2
   29a62:	d100      	bne.n	29a66 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   29a64:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   29a66:	f811 4b01 	ldrb.w	r4, [r1], #1
   29a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   29a6e:	e7f7      	b.n	29a60 <memcpy+0x6>

00029a70 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   29a70:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   29a72:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   29a74:	4603      	mov	r3, r0
	while (n > 0) {
   29a76:	4293      	cmp	r3, r2
   29a78:	d100      	bne.n	29a7c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   29a7a:	4770      	bx	lr
		*(d_byte++) = c_byte;
   29a7c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   29a80:	e7f9      	b.n	29a76 <memset+0x6>

00029a82 <_stdout_hook_default>:
}
   29a82:	f04f 30ff 	mov.w	r0, #4294967295
   29a86:	4770      	bx	lr

00029a88 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   29a88:	684b      	ldr	r3, [r1, #4]
   29a8a:	2b01      	cmp	r3, #1
   29a8c:	dd07      	ble.n	29a9e <sprintf_out+0x16>
		*(p->ptr) = c;
   29a8e:	680b      	ldr	r3, [r1, #0]
   29a90:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   29a92:	680b      	ldr	r3, [r1, #0]
   29a94:	3301      	adds	r3, #1
   29a96:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   29a98:	684b      	ldr	r3, [r1, #4]
   29a9a:	3b01      	subs	r3, #1
   29a9c:	604b      	str	r3, [r1, #4]
}
   29a9e:	2000      	movs	r0, #0
   29aa0:	4770      	bx	lr

00029aa2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   29aa2:	b084      	sub	sp, #16
   29aa4:	ab04      	add	r3, sp, #16
   29aa6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   29aaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   29aae:	2b06      	cmp	r3, #6
   29ab0:	d108      	bne.n	29ac4 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   29ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29ab6:	2201      	movs	r2, #1
   29ab8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   29abc:	f3bf 8f4f 	dsb	sy
        __WFE();
   29ac0:	bf20      	wfe
    while (true)
   29ac2:	e7fd      	b.n	29ac0 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   29ac4:	b004      	add	sp, #16
   29ac6:	4770      	bx	lr

00029ac8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   29ac8:	b084      	sub	sp, #16
   29aca:	ab04      	add	r3, sp, #16
   29acc:	e903 0007 	stmdb	r3, {r0, r1, r2}
   29ad0:	2300      	movs	r3, #0
   29ad2:	f383 8811 	msr	BASEPRI, r3
   29ad6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   29ada:	b004      	add	sp, #16
   29adc:	4770      	bx	lr

00029ade <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   29ade:	b530      	push	{r4, r5, lr}
   29ae0:	b085      	sub	sp, #20
   29ae2:	4604      	mov	r4, r0
   29ae4:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   29ae6:	4668      	mov	r0, sp
   29ae8:	2203      	movs	r2, #3
   29aea:	f7ff ffb6 	bl	29a5a <memcpy>
	(void)memset(res + 3, 0, 13);
   29aee:	220d      	movs	r2, #13
   29af0:	2100      	movs	r1, #0
   29af2:	f10d 0003 	add.w	r0, sp, #3
   29af6:	f7ff ffbb 	bl	29a70 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   29afa:	4620      	mov	r0, r4
   29afc:	466a      	mov	r2, sp
   29afe:	4669      	mov	r1, sp
   29b00:	f002 fc63 	bl	2c3ca <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   29b04:	4604      	mov	r4, r0
   29b06:	b920      	cbnz	r0, 29b12 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   29b08:	2203      	movs	r2, #3
   29b0a:	4669      	mov	r1, sp
   29b0c:	4628      	mov	r0, r5
   29b0e:	f7ff ffa4 	bl	29a5a <memcpy>

	return 0;
}
   29b12:	4620      	mov	r0, r4
   29b14:	b005      	add	sp, #20
   29b16:	bd30      	pop	{r4, r5, pc}

00029b18 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   29b18:	b513      	push	{r0, r1, r4, lr}
   29b1a:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   29b1c:	aa01      	add	r2, sp, #4
   29b1e:	3103      	adds	r1, #3
   29b20:	f7ff ffdd 	bl	29ade <ah>
	if (err) {
   29b24:	b948      	cbnz	r0, 29b3a <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   29b26:	2203      	movs	r2, #3
   29b28:	a901      	add	r1, sp, #4
   29b2a:	4620      	mov	r0, r4
   29b2c:	f7ff ff6e 	bl	29a0c <memcmp>
   29b30:	fab0 f080 	clz	r0, r0
   29b34:	0940      	lsrs	r0, r0, #5
}
   29b36:	b002      	add	sp, #8
   29b38:	bd10      	pop	{r4, pc}
		return false;
   29b3a:	2000      	movs	r0, #0
   29b3c:	e7fb      	b.n	29b36 <bt_rpa_irk_matches+0x1e>

00029b3e <send_cmd_status>:
{
   29b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   29b42:	f04f 32ff 	mov.w	r2, #4294967295
{
   29b46:	4606      	mov	r6, r0
   29b48:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   29b4a:	f04f 33ff 	mov.w	r3, #4294967295
   29b4e:	2100      	movs	r1, #0
   29b50:	200f      	movs	r0, #15
   29b52:	f7eb fd6b 	bl	1562c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   29b56:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   29b58:	f100 0808 	add.w	r8, r0, #8
   29b5c:	4604      	mov	r4, r0
   29b5e:	7507      	strb	r7, [r0, #20]
   29b60:	2102      	movs	r1, #2
   29b62:	4640      	mov	r0, r8
   29b64:	f7f3 fd9e 	bl	1d6a4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   29b68:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   29b6a:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   29b6c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   29b6e:	7041      	strb	r1, [r0, #1]
   29b70:	4640      	mov	r0, r8
   29b72:	f7f3 fd97 	bl	1d6a4 <net_buf_simple_add>
	evt->ncmd = 1U;
   29b76:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   29b78:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   29b7a:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   29b7c:	4620      	mov	r0, r4
}
   29b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   29b82:	f7ec bebf 	b.w	16904 <bt_recv>

00029b86 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   29b86:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   29b8a:	f043 0306 	orr.w	r3, r3, #6
   29b8e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   29b92:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   29b96:	f043 0304 	orr.w	r3, r3, #4
   29b9a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   29b9e:	4770      	bx	lr

00029ba0 <default_CSPRNG>:
{
   29ba0:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   29ba2:	f7f6 f8db 	bl	1fd5c <bt_rand>
}
   29ba6:	fab0 f080 	clz	r0, r0
   29baa:	0940      	lsrs	r0, r0, #5
   29bac:	bd08      	pop	{r3, pc}

00029bae <bt_settings_decode_key>:
{
   29bae:	b570      	push	{r4, r5, r6, lr}
   29bb0:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   29bb2:	2100      	movs	r1, #0
{
   29bb4:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   29bb6:	f7fe fc65 	bl	28484 <settings_name_next>
   29bba:	280d      	cmp	r0, #13
   29bbc:	d118      	bne.n	29bf0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   29bbe:	7b23      	ldrb	r3, [r4, #12]
   29bc0:	2b30      	cmp	r3, #48	; 0x30
   29bc2:	d111      	bne.n	29be8 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   29bc4:	2300      	movs	r3, #0
   29bc6:	702b      	strb	r3, [r5, #0]
   29bc8:	f104 060c 	add.w	r6, r4, #12
   29bcc:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   29bce:	462a      	mov	r2, r5
   29bd0:	4620      	mov	r0, r4
   29bd2:	2301      	movs	r3, #1
   29bd4:	2102      	movs	r1, #2
   29bd6:	3402      	adds	r4, #2
   29bd8:	f7fd fc2a 	bl	27430 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   29bdc:	42b4      	cmp	r4, r6
   29bde:	f105 35ff 	add.w	r5, r5, #4294967295
   29be2:	d1f4      	bne.n	29bce <bt_settings_decode_key+0x20>
	return 0;
   29be4:	2000      	movs	r0, #0
}
   29be6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   29be8:	2b31      	cmp	r3, #49	; 0x31
   29bea:	d101      	bne.n	29bf0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   29bec:	2301      	movs	r3, #1
   29bee:	e7ea      	b.n	29bc6 <bt_settings_decode_key+0x18>
		return -EINVAL;
   29bf0:	f06f 0015 	mvn.w	r0, #21
   29bf4:	e7f7      	b.n	29be6 <bt_settings_decode_key+0x38>

00029bf6 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29bf6:	b510      	push	{r4, lr}
   29bf8:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   29bfa:	7801      	ldrb	r1, [r0, #0]
   29bfc:	7822      	ldrb	r2, [r4, #0]
   29bfe:	428a      	cmp	r2, r1
{
   29c00:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   29c02:	d00e      	beq.n	29c22 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   29c04:	4669      	mov	r1, sp
   29c06:	f7eb fc7d 	bl	15504 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   29c0a:	a905      	add	r1, sp, #20
   29c0c:	4620      	mov	r0, r4
   29c0e:	f7eb fc79 	bl	15504 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   29c12:	2210      	movs	r2, #16
   29c14:	f10d 0115 	add.w	r1, sp, #21
   29c18:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29c1c:	f7ff fef6 	bl	29a0c <memcmp>
   29c20:	e007      	b.n	29c32 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   29c22:	2a01      	cmp	r2, #1
   29c24:	d007      	beq.n	29c36 <bt_uuid_cmp+0x40>
   29c26:	2a02      	cmp	r2, #2
   29c28:	d008      	beq.n	29c3c <bt_uuid_cmp+0x46>
   29c2a:	b95a      	cbnz	r2, 29c44 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   29c2c:	8840      	ldrh	r0, [r0, #2]
   29c2e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29c30:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   29c32:	b00a      	add	sp, #40	; 0x28
   29c34:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29c36:	6840      	ldr	r0, [r0, #4]
   29c38:	6863      	ldr	r3, [r4, #4]
   29c3a:	e7f9      	b.n	29c30 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29c3c:	2210      	movs	r2, #16
   29c3e:	1c61      	adds	r1, r4, #1
   29c40:	3001      	adds	r0, #1
   29c42:	e7eb      	b.n	29c1c <bt_uuid_cmp+0x26>
	switch (u1->type) {
   29c44:	f06f 0015 	mvn.w	r0, #21
   29c48:	e7f3      	b.n	29c32 <bt_uuid_cmp+0x3c>

00029c4a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   29c4a:	2a04      	cmp	r2, #4
{
   29c4c:	b538      	push	{r3, r4, r5, lr}
   29c4e:	460c      	mov	r4, r1
	switch (data_len) {
   29c50:	d00d      	beq.n	29c6e <bt_uuid_create+0x24>
   29c52:	2a10      	cmp	r2, #16
   29c54:	d019      	beq.n	29c8a <bt_uuid_create+0x40>
   29c56:	2a02      	cmp	r2, #2
   29c58:	f04f 0300 	mov.w	r3, #0
   29c5c:	d11b      	bne.n	29c96 <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   29c5e:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29c60:	784a      	ldrb	r2, [r1, #1]
   29c62:	780b      	ldrb	r3, [r1, #0]
   29c64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   29c68:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   29c6a:	2001      	movs	r0, #1
}
   29c6c:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   29c6e:	2301      	movs	r3, #1
   29c70:	7003      	strb	r3, [r0, #0]
   29c72:	78a2      	ldrb	r2, [r4, #2]
   29c74:	78c9      	ldrb	r1, [r1, #3]
   29c76:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29c78:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   29c7c:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29c7e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   29c82:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   29c86:	6042      	str	r2, [r0, #4]
		break;
   29c88:	e7ef      	b.n	29c6a <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   29c8a:	2302      	movs	r3, #2
   29c8c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   29c90:	f7ff fee3 	bl	29a5a <memcpy>
		break;
   29c94:	e7e9      	b.n	29c6a <bt_uuid_create+0x20>
	switch (data_len) {
   29c96:	4618      	mov	r0, r3
   29c98:	e7e8      	b.n	29c6c <bt_uuid_create+0x22>

00029c9a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   29c9a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   29c9c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   29c9e:	2106      	movs	r1, #6
{
   29ca0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   29ca2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   29ca6:	f7f6 f859 	bl	1fd5c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   29caa:	b918      	cbnz	r0, 29cb4 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   29cac:	79a3      	ldrb	r3, [r4, #6]
   29cae:	f063 033f 	orn	r3, r3, #63	; 0x3f
   29cb2:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   29cb4:	bd10      	pop	{r4, pc}

00029cb6 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   29cb6:	280f      	cmp	r0, #15
   29cb8:	d806      	bhi.n	29cc8 <bt_hci_evt_get_flags+0x12>
   29cba:	280d      	cmp	r0, #13
   29cbc:	d80b      	bhi.n	29cd6 <bt_hci_evt_get_flags+0x20>
   29cbe:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   29cc0:	bf14      	ite	ne
   29cc2:	2002      	movne	r0, #2
   29cc4:	2003      	moveq	r0, #3
   29cc6:	4770      	bx	lr
	switch (evt) {
   29cc8:	2813      	cmp	r0, #19
   29cca:	d004      	beq.n	29cd6 <bt_hci_evt_get_flags+0x20>
   29ccc:	281a      	cmp	r0, #26
   29cce:	bf14      	ite	ne
   29cd0:	2002      	movne	r0, #2
   29cd2:	2001      	moveq	r0, #1
   29cd4:	4770      	bx	lr
   29cd6:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   29cd8:	4770      	bx	lr

00029cda <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   29cda:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   29cde:	b193      	cbz	r3, 29d06 <update_sec_level+0x2c>
   29ce0:	7b5a      	ldrb	r2, [r3, #13]
   29ce2:	07d1      	lsls	r1, r2, #31
   29ce4:	d50f      	bpl.n	29d06 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   29ce6:	06d2      	lsls	r2, r2, #27
   29ce8:	d50b      	bpl.n	29d02 <update_sec_level+0x28>
   29cea:	7b1b      	ldrb	r3, [r3, #12]
   29cec:	2b10      	cmp	r3, #16
   29cee:	d108      	bne.n	29d02 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   29cf0:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   29cf2:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   29cf4:	7a82      	ldrb	r2, [r0, #10]
   29cf6:	7a40      	ldrb	r0, [r0, #9]
}
   29cf8:	4282      	cmp	r2, r0
   29cfa:	bf8c      	ite	hi
   29cfc:	2000      	movhi	r0, #0
   29cfe:	2001      	movls	r0, #1
   29d00:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   29d02:	2303      	movs	r3, #3
   29d04:	e7f5      	b.n	29cf2 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   29d06:	2302      	movs	r3, #2
   29d08:	e7f3      	b.n	29cf2 <update_sec_level+0x18>

00029d0a <atomic_or>:
{
   29d0a:	4603      	mov	r3, r0
}
   29d0c:	f3bf 8f5b 	dmb	ish
   29d10:	e853 0f00 	ldrex	r0, [r3]
   29d14:	ea40 0201 	orr.w	r2, r0, r1
   29d18:	e843 2c00 	strex	ip, r2, [r3]
   29d1c:	f1bc 0f00 	cmp.w	ip, #0
   29d20:	d1f6      	bne.n	29d10 <atomic_or+0x6>
   29d22:	f3bf 8f5b 	dmb	ish
   29d26:	4770      	bx	lr

00029d28 <sys_put_le64>:
	dst[1] = val >> 8;
   29d28:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   29d2c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   29d2e:	0e00      	lsrs	r0, r0, #24
   29d30:	7053      	strb	r3, [r2, #1]
   29d32:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   29d34:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   29d36:	f3c1 2007 	ubfx	r0, r1, #8, #8
   29d3a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   29d3c:	7093      	strb	r3, [r2, #2]
   29d3e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   29d40:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   29d42:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   29d44:	71d1      	strb	r1, [r2, #7]
}
   29d46:	4770      	bx	lr

00029d48 <bt_hci_disconnect>:
{
   29d48:	b570      	push	{r4, r5, r6, lr}
   29d4a:	4606      	mov	r6, r0
   29d4c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   29d4e:	f240 4006 	movw	r0, #1030	; 0x406
   29d52:	2103      	movs	r1, #3
   29d54:	f7ec f97c 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   29d58:	4604      	mov	r4, r0
   29d5a:	b168      	cbz	r0, 29d78 <bt_hci_disconnect+0x30>
   29d5c:	2103      	movs	r1, #3
   29d5e:	3008      	adds	r0, #8
   29d60:	f7f3 fca0 	bl	1d6a4 <net_buf_simple_add>
	disconn->reason = reason;
   29d64:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   29d66:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29d68:	4621      	mov	r1, r4
   29d6a:	2200      	movs	r2, #0
}
   29d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29d70:	f240 4006 	movw	r0, #1030	; 0x406
   29d74:	f7ec bad8 	b.w	16328 <bt_hci_cmd_send_sync>
}
   29d78:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29d7c:	bd70      	pop	{r4, r5, r6, pc}

00029d7e <bt_le_set_data_len>:
{
   29d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d80:	4607      	mov	r7, r0
   29d82:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   29d84:	f242 0022 	movw	r0, #8226	; 0x2022
   29d88:	2106      	movs	r1, #6
{
   29d8a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   29d8c:	f7ec f960 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   29d90:	4604      	mov	r4, r0
   29d92:	b170      	cbz	r0, 29db2 <bt_le_set_data_len+0x34>
   29d94:	2106      	movs	r1, #6
   29d96:	3008      	adds	r0, #8
   29d98:	f7f3 fc84 	bl	1d6a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29d9c:	883b      	ldrh	r3, [r7, #0]
   29d9e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   29da0:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   29da2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   29da4:	4621      	mov	r1, r4
   29da6:	f242 0022 	movw	r0, #8226	; 0x2022
}
   29daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   29dae:	f7ec b997 	b.w	160e0 <bt_hci_cmd_send>
}
   29db2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029db8 <bt_le_set_phy>:
{
   29db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29dbc:	4680      	mov	r8, r0
   29dbe:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   29dc0:	f242 0032 	movw	r0, #8242	; 0x2032
   29dc4:	2107      	movs	r1, #7
{
   29dc6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   29dca:	4616      	mov	r6, r2
   29dcc:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   29dce:	f7ec f93f 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   29dd2:	4604      	mov	r4, r0
   29dd4:	b190      	cbz	r0, 29dfc <bt_le_set_phy+0x44>
   29dd6:	2107      	movs	r1, #7
   29dd8:	3008      	adds	r0, #8
   29dda:	f7f3 fc63 	bl	1d6a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29dde:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   29de2:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   29de4:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   29de6:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   29de8:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   29dea:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   29dee:	4621      	mov	r1, r4
   29df0:	f242 0032 	movw	r0, #8242	; 0x2032
}
   29df4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   29df8:	f7ec b972 	b.w	160e0 <bt_hci_cmd_send>
}
   29dfc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029e04 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   29e04:	6880      	ldr	r0, [r0, #8]
   29e06:	f7ec bc17 	b.w	16638 <bt_hci_le_enh_conn_complete>

00029e0a <le_legacy_conn_complete>:
{
   29e0a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   29e0c:	6881      	ldr	r1, [r0, #8]
{
   29e0e:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   29e10:	780b      	ldrb	r3, [r1, #0]
   29e12:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   29e16:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   29e1a:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   29e1e:	78cb      	ldrb	r3, [r1, #3]
   29e20:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   29e24:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   29e28:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   29e2c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   29e30:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   29e34:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   29e38:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   29e3c:	7c4b      	ldrb	r3, [r1, #17]
   29e3e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   29e42:	2207      	movs	r2, #7
   29e44:	3104      	adds	r1, #4
   29e46:	a803      	add	r0, sp, #12
   29e48:	f7ff fe07 	bl	29a5a <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   29e4c:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   29e4e:	4669      	mov	r1, sp
   29e50:	2206      	movs	r2, #6
   29e52:	f10d 0013 	add.w	r0, sp, #19
   29e56:	9400      	str	r4, [sp, #0]
   29e58:	f8ad 4004 	strh.w	r4, [sp, #4]
   29e5c:	f7ff fdfd 	bl	29a5a <memcpy>
   29e60:	2206      	movs	r2, #6
   29e62:	4669      	mov	r1, sp
   29e64:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   29e68:	9400      	str	r4, [sp, #0]
   29e6a:	f8ad 4004 	strh.w	r4, [sp, #4]
   29e6e:	f7ff fdf4 	bl	29a5a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   29e72:	a802      	add	r0, sp, #8
   29e74:	f7ec fbe0 	bl	16638 <bt_hci_le_enh_conn_complete>
}
   29e78:	b00a      	add	sp, #40	; 0x28
   29e7a:	bd10      	pop	{r4, pc}

00029e7c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   29e7c:	8802      	ldrh	r2, [r0, #0]
   29e7e:	8843      	ldrh	r3, [r0, #2]
   29e80:	429a      	cmp	r2, r3
{
   29e82:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   29e84:	d818      	bhi.n	29eb8 <bt_le_conn_params_valid+0x3c>
   29e86:	2a05      	cmp	r2, #5
   29e88:	d916      	bls.n	29eb8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   29e8a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   29e8e:	d813      	bhi.n	29eb8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   29e90:	8884      	ldrh	r4, [r0, #4]
   29e92:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   29e96:	d20f      	bcs.n	29eb8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   29e98:	88c1      	ldrh	r1, [r0, #6]
   29e9a:	f1a1 020a 	sub.w	r2, r1, #10
   29e9e:	b292      	uxth	r2, r2
   29ea0:	f640 4076 	movw	r0, #3190	; 0xc76
   29ea4:	4282      	cmp	r2, r0
   29ea6:	d807      	bhi.n	29eb8 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   29ea8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   29eac:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   29eb0:	bf34      	ite	cc
   29eb2:	2001      	movcc	r0, #1
   29eb4:	2000      	movcs	r0, #0
}
   29eb6:	bd10      	pop	{r4, pc}
		return false;
   29eb8:	2000      	movs	r0, #0
   29eba:	e7fc      	b.n	29eb6 <bt_le_conn_params_valid+0x3a>

00029ebc <bt_send>:
		return bt_hci_ecc_send(buf);
   29ebc:	f7eb b97c 	b.w	151b8 <bt_hci_ecc_send>

00029ec0 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   29ec0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   29ec2:	f7f3 f813 	bl	1ceec <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   29ec6:	b118      	cbz	r0, 29ed0 <bt_addr_le_is_bonded+0x10>
   29ec8:	89c0      	ldrh	r0, [r0, #14]
   29eca:	3800      	subs	r0, #0
   29ecc:	bf18      	it	ne
   29ece:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   29ed0:	bd08      	pop	{r3, pc}

00029ed2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   29ed2:	2207      	movs	r2, #7
   29ed4:	f7ff bdc1 	b.w	29a5a <memcpy>

00029ed8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29ed8:	f3bf 8f5b 	dmb	ish
   29edc:	6800      	ldr	r0, [r0, #0]
   29ede:	f3bf 8f5b 	dmb	ish
}
   29ee2:	4770      	bx	lr

00029ee4 <addr_res_enable>:
{
   29ee4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   29ee6:	2101      	movs	r1, #1
{
   29ee8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   29eea:	f242 002d 	movw	r0, #8237	; 0x202d
   29eee:	f7ec f8af 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   29ef2:	4604      	mov	r4, r0
   29ef4:	b158      	cbz	r0, 29f0e <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   29ef6:	4629      	mov	r1, r5
   29ef8:	3008      	adds	r0, #8
   29efa:	f001 fd73 	bl	2b9e4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   29efe:	4621      	mov	r1, r4
   29f00:	2200      	movs	r2, #0
}
   29f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   29f06:	f242 002d 	movw	r0, #8237	; 0x202d
   29f0a:	f7ec ba0d 	b.w	16328 <bt_hci_cmd_send_sync>
}
   29f0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29f12:	bd38      	pop	{r3, r4, r5, pc}

00029f14 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   29f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f16:	4607      	mov	r7, r0
   29f18:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   29f1a:	f242 0027 	movw	r0, #8231	; 0x2027
   29f1e:	2127      	movs	r1, #39	; 0x27
   29f20:	f7ec f896 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   29f24:	4604      	mov	r4, r0
   29f26:	b1d0      	cbz	r0, 29f5e <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   29f28:	2127      	movs	r1, #39	; 0x27
   29f2a:	3008      	adds	r0, #8
   29f2c:	f7f3 fbba 	bl	1d6a4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   29f30:	4639      	mov	r1, r7
   29f32:	4605      	mov	r5, r0
   29f34:	f7ff ffcd 	bl	29ed2 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   29f38:	4631      	mov	r1, r6
   29f3a:	2210      	movs	r2, #16
   29f3c:	1de8      	adds	r0, r5, #7
   29f3e:	f7ff fd8c 	bl	29a5a <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   29f42:	2210      	movs	r2, #16
   29f44:	2100      	movs	r1, #0
   29f46:	f105 0017 	add.w	r0, r5, #23
   29f4a:	f7ff fd91 	bl	29a70 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   29f4e:	4621      	mov	r1, r4
   29f50:	2200      	movs	r2, #0
}
   29f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   29f56:	f242 0027 	movw	r0, #8231	; 0x2027
   29f5a:	f7ec b9e5 	b.w	16328 <bt_hci_cmd_send_sync>
}
   29f5e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029f64 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   29f64:	7a03      	ldrb	r3, [r0, #8]
   29f66:	075b      	lsls	r3, r3, #29
   29f68:	d504      	bpl.n	29f74 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   29f6a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   29f6e:	3001      	adds	r0, #1
   29f70:	f7ff bfd0 	b.w	29f14 <hci_id_add.isra.0>
}
   29f74:	4770      	bx	lr

00029f76 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29f76:	f100 0310 	add.w	r3, r0, #16
   29f7a:	f3bf 8f5b 	dmb	ish
   29f7e:	e853 2f00 	ldrex	r2, [r3]
   29f82:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   29f86:	e843 1c00 	strex	ip, r1, [r3]
   29f8a:	f1bc 0f00 	cmp.w	ip, #0
   29f8e:	d1f6      	bne.n	29f7e <adv_unpause_enabled+0x8>
   29f90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   29f94:	0493      	lsls	r3, r2, #18
   29f96:	d502      	bpl.n	29f9e <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   29f98:	2101      	movs	r1, #1
   29f9a:	f000 b92c 	b.w	2a1f6 <bt_le_adv_set_enable>
}
   29f9e:	4770      	bx	lr

00029fa0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29fa0:	f100 0210 	add.w	r2, r0, #16
{
   29fa4:	b508      	push	{r3, lr}
   29fa6:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29fa8:	4610      	mov	r0, r2
   29faa:	f7ff ff95 	bl	29ed8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29fae:	0641      	lsls	r1, r0, #25
   29fb0:	d511      	bpl.n	29fd6 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29fb2:	f3bf 8f5b 	dmb	ish
   29fb6:	e852 1f00 	ldrex	r1, [r2]
   29fba:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   29fbe:	e842 1000 	strex	r0, r1, [r2]
   29fc2:	2800      	cmp	r0, #0
   29fc4:	d1f7      	bne.n	29fb6 <adv_pause_enabled+0x16>
   29fc6:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   29fca:	4618      	mov	r0, r3
   29fcc:	2100      	movs	r1, #0
}
   29fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   29fd2:	f000 b910 	b.w	2a1f6 <bt_le_adv_set_enable>
}
   29fd6:	bd08      	pop	{r3, pc}

00029fd8 <bt_lookup_id_addr>:
{
   29fd8:	b510      	push	{r4, lr}
   29fda:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   29fdc:	f7f2 ff4c 	bl	1ce78 <bt_keys_find_irk>
		if (keys) {
   29fe0:	b100      	cbz	r0, 29fe4 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   29fe2:	1c44      	adds	r4, r0, #1
}
   29fe4:	4620      	mov	r0, r4
   29fe6:	bd10      	pop	{r4, pc}

00029fe8 <bt_id_set_adv_private_addr>:
{
   29fe8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   29fea:	2106      	movs	r1, #6
   29fec:	4668      	mov	r0, sp
   29fee:	f7f5 feb5 	bl	1fd5c <bt_rand>
	if (err) {
   29ff2:	b940      	cbnz	r0, 2a006 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   29ff4:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   29ff8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   29ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   29ffe:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2a002:	f7ec fded 	bl	16be0 <set_random_address>
}
   2a006:	b003      	add	sp, #12
   2a008:	f85d fb04 	ldr.w	pc, [sp], #4

0002a00c <bt_id_adv_random_addr_check>:
}
   2a00c:	2001      	movs	r0, #1
   2a00e:	4770      	bx	lr

0002a010 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2a010:	7a03      	ldrb	r3, [r0, #8]
   2a012:	07d9      	lsls	r1, r3, #31
   2a014:	d504      	bpl.n	2a020 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2a016:	f023 0301 	bic.w	r3, r3, #1
   2a01a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2a01c:	f7ec be5c 	b.w	16cd8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2a020:	0799      	lsls	r1, r3, #30
   2a022:	d504      	bpl.n	2a02e <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2a024:	f023 0302 	bic.w	r3, r3, #2
   2a028:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2a02a:	f7ec bf29 	b.w	16e80 <bt_id_del>
}
   2a02e:	4770      	bx	lr

0002a030 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2a030:	2000      	movs	r0, #0
   2a032:	4770      	bx	lr

0002a034 <get_adv_channel_map>:
{
   2a034:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2a036:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2a03a:	bf0c      	ite	eq
   2a03c:	2007      	moveq	r0, #7
   2a03e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2a040:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2a042:	bf48      	it	mi
   2a044:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2a048:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2a04a:	bf48      	it	mi
   2a04c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2a050:	4770      	bx	lr

0002a052 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a052:	f3bf 8f5b 	dmb	ish
   2a056:	6800      	ldr	r0, [r0, #0]
   2a058:	f3bf 8f5b 	dmb	ish
}
   2a05c:	4770      	bx	lr

0002a05e <atomic_and>:
{
   2a05e:	4603      	mov	r3, r0
}
   2a060:	f3bf 8f5b 	dmb	ish
   2a064:	e853 0f00 	ldrex	r0, [r3]
   2a068:	ea00 0201 	and.w	r2, r0, r1
   2a06c:	e843 2c00 	strex	ip, r2, [r3]
   2a070:	f1bc 0f00 	cmp.w	ip, #0
   2a074:	d1f6      	bne.n	2a064 <atomic_and+0x6>
   2a076:	f3bf 8f5b 	dmb	ish
   2a07a:	4770      	bx	lr

0002a07c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a07c:	2301      	movs	r3, #1
{
   2a07e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a080:	fa03 f101 	lsl.w	r1, r3, r1
{
   2a084:	4604      	mov	r4, r0
	if (val) {
   2a086:	b162      	cbz	r2, 2a0a2 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a088:	f3bf 8f5b 	dmb	ish
   2a08c:	e854 3f00 	ldrex	r3, [r4]
   2a090:	430b      	orrs	r3, r1
   2a092:	e844 3200 	strex	r2, r3, [r4]
   2a096:	2a00      	cmp	r2, #0
   2a098:	d1f8      	bne.n	2a08c <atomic_set_bit_to+0x10>
   2a09a:	f3bf 8f5b 	dmb	ish
	}
}
   2a09e:	bc10      	pop	{r4}
   2a0a0:	4770      	bx	lr
   2a0a2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a0a4:	43c9      	mvns	r1, r1
   2a0a6:	f7ff bfda 	b.w	2a05e <atomic_and>

0002a0aa <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2a0aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a0ae:	b087      	sub	sp, #28
   2a0b0:	4605      	mov	r5, r0
   2a0b2:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   2a0b6:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2a0ba:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   2a0be:	460c      	mov	r4, r1
   2a0c0:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   2a0c2:	2100      	movs	r1, #0
   2a0c4:	2210      	movs	r2, #16
   2a0c6:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2a0c8:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   2a0ca:	f7ff fcd1 	bl	29a70 <memset>
	if (use_name) {
   2a0ce:	b187      	cbz	r7, 2a0f2 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2a0d0:	f7ec fd68 	bl	16ba4 <bt_get_name>
   2a0d4:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2a0d6:	2c00      	cmp	r4, #0
   2a0d8:	d13e      	bne.n	2a158 <le_adv_update.constprop.0+0xae>
   2a0da:	2e00      	cmp	r6, #0
   2a0dc:	d148      	bne.n	2a170 <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   2a0de:	4648      	mov	r0, r9
   2a0e0:	f7ff fc69 	bl	299b6 <strlen>
   2a0e4:	2209      	movs	r2, #9
   2a0e6:	f88d 2000 	strb.w	r2, [sp]
   2a0ea:	f88d 0001 	strb.w	r0, [sp, #1]
   2a0ee:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   2a0f2:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   2a0f6:	2f00      	cmp	r7, #0
   2a0f8:	d03c      	beq.n	2a174 <le_adv_update.constprop.0+0xca>
   2a0fa:	f1ba 0f00 	cmp.w	sl, #0
   2a0fe:	d002      	beq.n	2a106 <le_adv_update.constprop.0+0x5c>
   2a100:	f1b8 0f00 	cmp.w	r8, #0
   2a104:	d036      	beq.n	2a174 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   2a106:	2301      	movs	r3, #1
			d[1].data = &data;
   2a108:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2a10c:	9305      	str	r3, [sp, #20]
			d_len = 2;
   2a10e:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2a110:	a902      	add	r1, sp, #8
   2a112:	f242 0008 	movw	r0, #8200	; 0x2008
   2a116:	f7ed f91d 	bl	17354 <hci_set_ad>
		if (err) {
   2a11a:	4604      	mov	r4, r0
   2a11c:	b978      	cbnz	r0, 2a13e <le_adv_update.constprop.0+0x94>
	if (scannable) {
   2a11e:	f1ba 0f00 	cmp.w	sl, #0
   2a122:	d129      	bne.n	2a178 <le_adv_update.constprop.0+0xce>
   2a124:	3510      	adds	r5, #16
   2a126:	f3bf 8f5b 	dmb	ish
   2a12a:	e855 3f00 	ldrex	r3, [r5]
   2a12e:	f043 0304 	orr.w	r3, r3, #4
   2a132:	e845 3200 	strex	r2, r3, [r5]
   2a136:	2a00      	cmp	r2, #0
   2a138:	d1f7      	bne.n	2a12a <le_adv_update.constprop.0+0x80>
   2a13a:	f3bf 8f5b 	dmb	ish
}
   2a13e:	4620      	mov	r0, r4
   2a140:	b007      	add	sp, #28
   2a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2a146:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   2a14a:	3908      	subs	r1, #8
   2a14c:	2901      	cmp	r1, #1
   2a14e:	d92a      	bls.n	2a1a6 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   2a150:	3201      	adds	r2, #1
   2a152:	4593      	cmp	fp, r2
   2a154:	d1f7      	bne.n	2a146 <le_adv_update.constprop.0+0x9c>
   2a156:	e7c0      	b.n	2a0da <le_adv_update.constprop.0+0x30>
   2a158:	2200      	movs	r2, #0
   2a15a:	e7fa      	b.n	2a152 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2a15c:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   2a160:	3908      	subs	r1, #8
   2a162:	2901      	cmp	r1, #1
   2a164:	d91f      	bls.n	2a1a6 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   2a166:	3201      	adds	r2, #1
   2a168:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a16a:	4293      	cmp	r3, r2
   2a16c:	d1f6      	bne.n	2a15c <le_adv_update.constprop.0+0xb2>
   2a16e:	e7b6      	b.n	2a0de <le_adv_update.constprop.0+0x34>
   2a170:	2200      	movs	r2, #0
   2a172:	e7f9      	b.n	2a168 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   2a174:	2201      	movs	r2, #1
   2a176:	e7cb      	b.n	2a110 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   2a178:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   2a17a:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   2a17c:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   2a17e:	b187      	cbz	r7, 2a1a2 <le_adv_update.constprop.0+0xf8>
   2a180:	f1b8 0f00 	cmp.w	r8, #0
   2a184:	d10d      	bne.n	2a1a2 <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   2a186:	2301      	movs	r3, #1
			d[1].data = &data;
   2a188:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2a18c:	9305      	str	r3, [sp, #20]
			d_len = 2;
   2a18e:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a190:	a902      	add	r1, sp, #8
   2a192:	f242 0009 	movw	r0, #8201	; 0x2009
   2a196:	f7ed f8dd 	bl	17354 <hci_set_ad>
		if (err) {
   2a19a:	2800      	cmp	r0, #0
   2a19c:	d0c2      	beq.n	2a124 <le_adv_update.constprop.0+0x7a>
   2a19e:	4604      	mov	r4, r0
   2a1a0:	e7cd      	b.n	2a13e <le_adv_update.constprop.0+0x94>
		d_len = 1;
   2a1a2:	2201      	movs	r2, #1
   2a1a4:	e7f4      	b.n	2a190 <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   2a1a6:	f06f 0415 	mvn.w	r4, #21
   2a1aa:	e7c8      	b.n	2a13e <le_adv_update.constprop.0+0x94>

0002a1ac <bt_le_adv_set_enable_legacy>:
{
   2a1ac:	b570      	push	{r4, r5, r6, lr}
   2a1ae:	4606      	mov	r6, r0
   2a1b0:	b086      	sub	sp, #24
   2a1b2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2a1b4:	f242 000a 	movw	r0, #8202	; 0x200a
   2a1b8:	2101      	movs	r1, #1
   2a1ba:	f7eb ff49 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   2a1be:	4604      	mov	r4, r0
   2a1c0:	b1b0      	cbz	r0, 2a1f0 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   2a1c2:	3008      	adds	r0, #8
   2a1c4:	b195      	cbz	r5, 2a1ec <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2a1c6:	2101      	movs	r1, #1
   2a1c8:	f001 fc0c 	bl	2b9e4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2a1cc:	f106 0210 	add.w	r2, r6, #16
   2a1d0:	a903      	add	r1, sp, #12
   2a1d2:	4620      	mov	r0, r4
   2a1d4:	9500      	str	r5, [sp, #0]
   2a1d6:	2306      	movs	r3, #6
   2a1d8:	f7eb ff28 	bl	1602c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2a1dc:	2200      	movs	r2, #0
   2a1de:	4621      	mov	r1, r4
   2a1e0:	f242 000a 	movw	r0, #8202	; 0x200a
   2a1e4:	f7ec f8a0 	bl	16328 <bt_hci_cmd_send_sync>
}
   2a1e8:	b006      	add	sp, #24
   2a1ea:	bd70      	pop	{r4, r5, r6, pc}
   2a1ec:	4629      	mov	r1, r5
   2a1ee:	e7eb      	b.n	2a1c8 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2a1f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a1f4:	e7f8      	b.n	2a1e8 <bt_le_adv_set_enable_legacy+0x3c>

0002a1f6 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2a1f6:	f7ff bfd9 	b.w	2a1ac <bt_le_adv_set_enable_legacy>

0002a1fa <tx_notify>:
{
   2a1fa:	b570      	push	{r4, r5, r6, lr}
   2a1fc:	4604      	mov	r4, r0
	__asm__ volatile(
   2a1fe:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a202:	f3ef 8311 	mrs	r3, BASEPRI
   2a206:	f382 8811 	msr	BASEPRI, r2
   2a20a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2a20e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2a210:	b920      	cbnz	r0, 2a21c <tx_notify+0x22>
	__asm__ volatile(
   2a212:	f383 8811 	msr	BASEPRI, r3
   2a216:	f3bf 8f6f 	isb	sy
}
   2a21a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a21c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a21e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a220:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a222:	4288      	cmp	r0, r1
	list->tail = node;
   2a224:	bf08      	it	eq
   2a226:	6262      	streq	r2, [r4, #36]	; 0x24
   2a228:	f383 8811 	msr	BASEPRI, r3
   2a22c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2a230:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2a234:	f7ed fc2a 	bl	17a8c <tx_free>
		cb(conn, user_data);
   2a238:	4631      	mov	r1, r6
   2a23a:	4620      	mov	r0, r4
   2a23c:	47a8      	blx	r5
	while (1) {
   2a23e:	e7de      	b.n	2a1fe <tx_notify+0x4>

0002a240 <tx_complete_work>:
	tx_notify(conn);
   2a240:	3828      	subs	r0, #40	; 0x28
   2a242:	f7ff bfda 	b.w	2a1fa <tx_notify>

0002a246 <bt_conn_reset_rx_state>:
{
   2a246:	b510      	push	{r4, lr}
   2a248:	4604      	mov	r4, r0
	if (!conn->rx) {
   2a24a:	6900      	ldr	r0, [r0, #16]
   2a24c:	b118      	cbz	r0, 2a256 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2a24e:	f7f3 f8f9 	bl	1d444 <net_buf_unref>
	conn->rx = NULL;
   2a252:	2300      	movs	r3, #0
   2a254:	6123      	str	r3, [r4, #16]
}
   2a256:	bd10      	pop	{r4, pc}

0002a258 <bt_conn_ref>:
{
   2a258:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2a25a:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a25e:	f3bf 8f5b 	dmb	ish
   2a262:	6813      	ldr	r3, [r2, #0]
   2a264:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2a268:	b17b      	cbz	r3, 2a28a <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a26a:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2a26e:	1c59      	adds	r1, r3, #1
   2a270:	e852 4f00 	ldrex	r4, [r2]
   2a274:	429c      	cmp	r4, r3
   2a276:	d104      	bne.n	2a282 <bt_conn_ref+0x2a>
   2a278:	e842 1c00 	strex	ip, r1, [r2]
   2a27c:	f1bc 0f00 	cmp.w	ip, #0
   2a280:	d1f6      	bne.n	2a270 <bt_conn_ref+0x18>
   2a282:	f3bf 8f5b 	dmb	ish
   2a286:	d1ea      	bne.n	2a25e <bt_conn_ref+0x6>
}
   2a288:	bd10      	pop	{r4, pc}
			return NULL;
   2a28a:	4618      	mov	r0, r3
   2a28c:	e7fc      	b.n	2a288 <bt_conn_ref+0x30>

0002a28e <conn_lookup_handle>:
{
   2a28e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a292:	4607      	mov	r7, r0
   2a294:	460e      	mov	r6, r1
   2a296:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2a298:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a29a:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2a29e:	42b4      	cmp	r4, r6
   2a2a0:	d103      	bne.n	2a2aa <conn_lookup_handle+0x1c>
	return NULL;
   2a2a2:	2300      	movs	r3, #0
}
   2a2a4:	4618      	mov	r0, r3
   2a2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a2aa:	fb09 7004 	mla	r0, r9, r4, r7
   2a2ae:	f7ff ffd3 	bl	2a258 <bt_conn_ref>
   2a2b2:	4603      	mov	r3, r0
		if (!conn) {
   2a2b4:	b158      	cbz	r0, 2a2ce <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2a2b6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2a2b8:	2d01      	cmp	r5, #1
   2a2ba:	d002      	beq.n	2a2c2 <conn_lookup_handle+0x34>
   2a2bc:	3d07      	subs	r5, #7
   2a2be:	2d01      	cmp	r5, #1
   2a2c0:	d803      	bhi.n	2a2ca <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2a2c2:	881a      	ldrh	r2, [r3, #0]
   2a2c4:	4542      	cmp	r2, r8
   2a2c6:	d0ed      	beq.n	2a2a4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2a2c8:	4618      	mov	r0, r3
   2a2ca:	f7ed fe5b 	bl	17f84 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2a2ce:	3401      	adds	r4, #1
   2a2d0:	e7e5      	b.n	2a29e <conn_lookup_handle+0x10>

0002a2d2 <bt_conn_connected>:
{
   2a2d2:	b510      	push	{r4, lr}
   2a2d4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2a2d6:	f7ee fae9 	bl	188ac <bt_l2cap_connected>
	notify_connected(conn);
   2a2da:	4620      	mov	r0, r4
}
   2a2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2a2e0:	f7ed bbde 	b.w	17aa0 <notify_connected>

0002a2e4 <bt_conn_disconnect>:
{
   2a2e4:	b538      	push	{r3, r4, r5, lr}
   2a2e6:	7b43      	ldrb	r3, [r0, #13]
   2a2e8:	3b02      	subs	r3, #2
   2a2ea:	4604      	mov	r4, r0
   2a2ec:	2b06      	cmp	r3, #6
   2a2ee:	d805      	bhi.n	2a2fc <bt_conn_disconnect+0x18>
   2a2f0:	e8df f003 	tbb	[pc, r3]
   2a2f4:	04040408 	.word	0x04040408
   2a2f8:	0e0c      	.short	0x0e0c
   2a2fa:	0c          	.byte	0x0c
   2a2fb:	00          	.byte	0x00
	switch (conn->state) {
   2a2fc:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2a300:	4628      	mov	r0, r5
   2a302:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   2a304:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2a306:	2100      	movs	r1, #0
   2a308:	f7ed fe80 	bl	1800c <bt_conn_set_state>
		return 0;
   2a30c:	2500      	movs	r5, #0
   2a30e:	e7f7      	b.n	2a300 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   2a310:	8800      	ldrh	r0, [r0, #0]
   2a312:	f7ff fd19 	bl	29d48 <bt_hci_disconnect>
	if (err) {
   2a316:	4605      	mov	r5, r0
   2a318:	2800      	cmp	r0, #0
   2a31a:	d1f1      	bne.n	2a300 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2a31c:	7b63      	ldrb	r3, [r4, #13]
   2a31e:	2b07      	cmp	r3, #7
   2a320:	d1ee      	bne.n	2a300 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2a322:	2108      	movs	r1, #8
   2a324:	4620      	mov	r0, r4
   2a326:	f7ed fe71 	bl	1800c <bt_conn_set_state>
   2a32a:	e7e9      	b.n	2a300 <bt_conn_disconnect+0x1c>

0002a32c <bt_conn_set_security>:
{
   2a32c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2a32e:	7b43      	ldrb	r3, [r0, #13]
   2a330:	2b07      	cmp	r3, #7
{
   2a332:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2a334:	d128      	bne.n	2a388 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2a336:	7a43      	ldrb	r3, [r0, #9]
   2a338:	428b      	cmp	r3, r1
   2a33a:	d228      	bcs.n	2a38e <bt_conn_set_security+0x62>
   2a33c:	7a83      	ldrb	r3, [r0, #10]
   2a33e:	428b      	cmp	r3, r1
   2a340:	d225      	bcs.n	2a38e <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a342:	f3bf 8f5b 	dmb	ish
	if (val) {
   2a346:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2a348:	f100 0304 	add.w	r3, r0, #4
   2a34c:	d513      	bpl.n	2a376 <bt_conn_set_security+0x4a>
   2a34e:	e853 2f00 	ldrex	r2, [r3]
   2a352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2a356:	e843 2000 	strex	r0, r2, [r3]
   2a35a:	2800      	cmp	r0, #0
   2a35c:	d1f7      	bne.n	2a34e <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a35e:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2a362:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2a366:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   2a368:	4620      	mov	r0, r4
   2a36a:	f7f1 ffe1 	bl	1c330 <bt_smp_start_security>
	if (err) {
   2a36e:	b108      	cbz	r0, 2a374 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   2a370:	7a63      	ldrb	r3, [r4, #9]
   2a372:	72a3      	strb	r3, [r4, #10]
}
   2a374:	bd10      	pop	{r4, pc}
   2a376:	e853 2f00 	ldrex	r2, [r3]
   2a37a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2a37e:	e843 2000 	strex	r0, r2, [r3]
   2a382:	2800      	cmp	r0, #0
   2a384:	d0eb      	beq.n	2a35e <bt_conn_set_security+0x32>
   2a386:	e7f6      	b.n	2a376 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   2a388:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a38c:	e7f2      	b.n	2a374 <bt_conn_set_security+0x48>
		return 0;
   2a38e:	2000      	movs	r0, #0
   2a390:	e7f0      	b.n	2a374 <bt_conn_set_security+0x48>

0002a392 <bt_conn_get_security>:
}
   2a392:	7a40      	ldrb	r0, [r0, #9]
   2a394:	4770      	bx	lr

0002a396 <bt_conn_is_peer_addr_le>:
{
   2a396:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2a398:	7a03      	ldrb	r3, [r0, #8]
   2a39a:	428b      	cmp	r3, r1
{
   2a39c:	4604      	mov	r4, r0
   2a39e:	4615      	mov	r5, r2
	if (id != conn->id) {
   2a3a0:	d115      	bne.n	2a3ce <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2a3a2:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2a3a6:	2207      	movs	r2, #7
   2a3a8:	4628      	mov	r0, r5
   2a3aa:	f7ff fb2f 	bl	29a0c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2a3ae:	b180      	cbz	r0, 2a3d2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2a3b0:	78e3      	ldrb	r3, [r4, #3]
   2a3b2:	2207      	movs	r2, #7
   2a3b4:	b943      	cbnz	r3, 2a3c8 <bt_conn_is_peer_addr_le+0x32>
   2a3b6:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2a3ba:	4628      	mov	r0, r5
   2a3bc:	f7ff fb26 	bl	29a0c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2a3c0:	fab0 f080 	clz	r0, r0
   2a3c4:	0940      	lsrs	r0, r0, #5
}
   2a3c6:	bd38      	pop	{r3, r4, r5, pc}
   2a3c8:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2a3cc:	e7f5      	b.n	2a3ba <bt_conn_is_peer_addr_le+0x24>
		return false;
   2a3ce:	2000      	movs	r0, #0
   2a3d0:	e7f9      	b.n	2a3c6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2a3d2:	2001      	movs	r0, #1
   2a3d4:	e7f7      	b.n	2a3c6 <bt_conn_is_peer_addr_le+0x30>

0002a3d6 <bt_conn_get_dst>:
}
   2a3d6:	3090      	adds	r0, #144	; 0x90
   2a3d8:	4770      	bx	lr

0002a3da <bt_conn_le_conn_update>:
{
   2a3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a3dc:	4607      	mov	r7, r0
   2a3de:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2a3e0:	f242 0013 	movw	r0, #8211	; 0x2013
   2a3e4:	210e      	movs	r1, #14
   2a3e6:	f7eb fe33 	bl	16050 <bt_hci_cmd_create>
	if (!buf) {
   2a3ea:	4606      	mov	r6, r0
   2a3ec:	b1d0      	cbz	r0, 2a424 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2a3ee:	210e      	movs	r1, #14
   2a3f0:	3008      	adds	r0, #8
   2a3f2:	f7f3 f957 	bl	1d6a4 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2a3f6:	220e      	movs	r2, #14
   2a3f8:	4604      	mov	r4, r0
   2a3fa:	2100      	movs	r1, #0
   2a3fc:	f7ff fb38 	bl	29a70 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2a400:	883b      	ldrh	r3, [r7, #0]
   2a402:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2a404:	882b      	ldrh	r3, [r5, #0]
   2a406:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2a408:	886b      	ldrh	r3, [r5, #2]
   2a40a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2a40c:	88ab      	ldrh	r3, [r5, #4]
   2a40e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2a410:	88eb      	ldrh	r3, [r5, #6]
   2a412:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a414:	4631      	mov	r1, r6
   2a416:	2200      	movs	r2, #0
}
   2a418:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2a41c:	f242 0013 	movw	r0, #8211	; 0x2013
   2a420:	f7eb bf82 	b.w	16328 <bt_hci_cmd_send_sync>
}
   2a424:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a42a <l2cap_connected>:
}
   2a42a:	4770      	bx	lr

0002a42c <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2a42c:	3010      	adds	r0, #16
   2a42e:	f7f7 bfc7 	b.w	223c0 <k_work_cancel_delayable>

0002a432 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a432:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2a434:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a436:	b17b      	cbz	r3, 2a458 <bt_l2cap_chan_remove+0x26>
   2a438:	3b08      	subs	r3, #8
   2a43a:	2200      	movs	r2, #0
   2a43c:	b163      	cbz	r3, 2a458 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2a43e:	428b      	cmp	r3, r1
   2a440:	f103 0408 	add.w	r4, r3, #8
   2a444:	d10f      	bne.n	2a466 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2a446:	688b      	ldr	r3, [r1, #8]
   2a448:	b93a      	cbnz	r2, 2a45a <bt_l2cap_chan_remove+0x28>
   2a44a:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   2a44c:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2a44e:	4294      	cmp	r4, r2
   2a450:	d100      	bne.n	2a454 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2a452:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   2a454:	2300      	movs	r3, #0
   2a456:	608b      	str	r3, [r1, #8]
}
   2a458:	bd10      	pop	{r4, pc}
   2a45a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a45c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2a45e:	429c      	cmp	r4, r3
	list->tail = node;
   2a460:	bf08      	it	eq
   2a462:	6582      	streq	r2, [r0, #88]	; 0x58
}
   2a464:	e7f6      	b.n	2a454 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a466:	2c00      	cmp	r4, #0
   2a468:	d0f6      	beq.n	2a458 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a46a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a46c:	2b00      	cmp	r3, #0
   2a46e:	d0f3      	beq.n	2a458 <bt_l2cap_chan_remove+0x26>
   2a470:	3b08      	subs	r3, #8
   2a472:	4622      	mov	r2, r4
   2a474:	e7e2      	b.n	2a43c <bt_l2cap_chan_remove+0xa>

0002a476 <bt_l2cap_chan_del>:
{
   2a476:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2a478:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2a47c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2a47e:	b123      	cbz	r3, 2a48a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2a480:	686b      	ldr	r3, [r5, #4]
   2a482:	b103      	cbz	r3, 2a486 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2a484:	4798      	blx	r3
	chan->conn = NULL;
   2a486:	2300      	movs	r3, #0
   2a488:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2a48a:	68e3      	ldr	r3, [r4, #12]
   2a48c:	b10b      	cbz	r3, 2a492 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2a48e:	4620      	mov	r0, r4
   2a490:	4798      	blx	r3
	if (ops->released) {
   2a492:	69eb      	ldr	r3, [r5, #28]
   2a494:	b11b      	cbz	r3, 2a49e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2a496:	4620      	mov	r0, r4
}
   2a498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2a49c:	4718      	bx	r3
}
   2a49e:	bd70      	pop	{r4, r5, r6, pc}

0002a4a0 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2a4a2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4a4:	b18b      	cbz	r3, 2a4ca <bt_l2cap_disconnected+0x2a>
   2a4a6:	f1b3 0008 	subs.w	r0, r3, #8
   2a4aa:	d00e      	beq.n	2a4ca <bt_l2cap_disconnected+0x2a>
   2a4ac:	681c      	ldr	r4, [r3, #0]
   2a4ae:	b104      	cbz	r4, 2a4b2 <bt_l2cap_disconnected+0x12>
   2a4b0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2a4b2:	f7ff ffe0 	bl	2a476 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4b6:	b144      	cbz	r4, 2a4ca <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a4b8:	f114 0308 	adds.w	r3, r4, #8
   2a4bc:	d002      	beq.n	2a4c4 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a4be:	68a3      	ldr	r3, [r4, #8]
   2a4c0:	b103      	cbz	r3, 2a4c4 <bt_l2cap_disconnected+0x24>
   2a4c2:	3b08      	subs	r3, #8
{
   2a4c4:	4620      	mov	r0, r4
   2a4c6:	461c      	mov	r4, r3
   2a4c8:	e7f3      	b.n	2a4b2 <bt_l2cap_disconnected+0x12>
}
   2a4ca:	bd10      	pop	{r4, pc}

0002a4cc <bt_l2cap_security_changed>:
{
   2a4cc:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2a4d0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4d2:	b1a3      	cbz	r3, 2a4fe <bt_l2cap_security_changed+0x32>
   2a4d4:	f1b3 0008 	subs.w	r0, r3, #8
   2a4d8:	d011      	beq.n	2a4fe <bt_l2cap_security_changed+0x32>
   2a4da:	681c      	ldr	r4, [r3, #0]
   2a4dc:	b104      	cbz	r4, 2a4e0 <bt_l2cap_security_changed+0x14>
   2a4de:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2a4e0:	6843      	ldr	r3, [r0, #4]
   2a4e2:	689b      	ldr	r3, [r3, #8]
   2a4e4:	b10b      	cbz	r3, 2a4ea <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2a4e6:	4629      	mov	r1, r5
   2a4e8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2a4ea:	b144      	cbz	r4, 2a4fe <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a4ec:	f114 0308 	adds.w	r3, r4, #8
   2a4f0:	d002      	beq.n	2a4f8 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a4f2:	68a3      	ldr	r3, [r4, #8]
   2a4f4:	b103      	cbz	r3, 2a4f8 <bt_l2cap_security_changed+0x2c>
   2a4f6:	3b08      	subs	r3, #8
{
   2a4f8:	4620      	mov	r0, r4
   2a4fa:	461c      	mov	r4, r3
   2a4fc:	e7f0      	b.n	2a4e0 <bt_l2cap_security_changed+0x14>
}
   2a4fe:	bd38      	pop	{r3, r4, r5, pc}

0002a500 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2a500:	3104      	adds	r1, #4
   2a502:	f7ee b823 	b.w	1854c <bt_conn_create_pdu_timeout>

0002a506 <bt_l2cap_send_cb>:
{
   2a506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a50a:	4614      	mov	r4, r2
   2a50c:	4605      	mov	r5, r0
   2a50e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2a510:	f102 0008 	add.w	r0, r2, #8
   2a514:	2104      	movs	r1, #4
   2a516:	461e      	mov	r6, r3
   2a518:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2a51c:	f7f3 f85e 	bl	1d5dc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a520:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2a522:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a524:	3a04      	subs	r2, #4
   2a526:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a528:	4643      	mov	r3, r8
   2a52a:	4632      	mov	r2, r6
   2a52c:	4621      	mov	r1, r4
   2a52e:	4628      	mov	r0, r5
}
   2a530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2a534:	f7ed bc84 	b.w	17e40 <bt_conn_send_cb>

0002a538 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a538:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2a53a:	b160      	cbz	r0, 2a556 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2a53c:	3808      	subs	r0, #8
   2a53e:	b900      	cbnz	r0, 2a542 <bt_l2cap_le_lookup_tx_cid+0xa>
   2a540:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2a542:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   2a546:	428b      	cmp	r3, r1
   2a548:	d005      	beq.n	2a556 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a54a:	f110 0308 	adds.w	r3, r0, #8
   2a54e:	d001      	beq.n	2a554 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a550:	6880      	ldr	r0, [r0, #8]
   2a552:	e7f2      	b.n	2a53a <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2a554:	4618      	mov	r0, r3
}
   2a556:	4770      	bx	lr

0002a558 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2a558:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2a55a:	b160      	cbz	r0, 2a576 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2a55c:	3808      	subs	r0, #8
   2a55e:	b900      	cbnz	r0, 2a562 <bt_l2cap_le_lookup_rx_cid+0xa>
   2a560:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2a562:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2a566:	428b      	cmp	r3, r1
   2a568:	d005      	beq.n	2a576 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a56a:	f110 0308 	adds.w	r3, r0, #8
   2a56e:	d001      	beq.n	2a574 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a570:	6880      	ldr	r0, [r0, #8]
   2a572:	e7f2      	b.n	2a55a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2a574:	4618      	mov	r0, r3
}
   2a576:	4770      	bx	lr

0002a578 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2a578:	4770      	bx	lr

0002a57a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2a57a:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2a57c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2a57e:	b128      	cbz	r0, 2a58c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a580:	6859      	ldr	r1, [r3, #4]
   2a582:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a584:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a586:	4288      	cmp	r0, r1
	list->tail = node;
   2a588:	bf08      	it	eq
   2a58a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2a58c:	4770      	bx	lr

0002a58e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a58e:	4603      	mov	r3, r0
   2a590:	6800      	ldr	r0, [r0, #0]
   2a592:	2200      	movs	r2, #0
   2a594:	b900      	cbnz	r0, 2a598 <sys_slist_find_and_remove+0xa>
   2a596:	4770      	bx	lr
   2a598:	4288      	cmp	r0, r1
   2a59a:	d110      	bne.n	2a5be <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2a59c:	6808      	ldr	r0, [r1, #0]
   2a59e:	b942      	cbnz	r2, 2a5b2 <sys_slist_find_and_remove+0x24>
   2a5a0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2a5a2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a5a4:	4291      	cmp	r1, r2
   2a5a6:	d100      	bne.n	2a5aa <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2a5a8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2a5aa:	2300      	movs	r3, #0
   2a5ac:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a5ae:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2a5b0:	4770      	bx	lr
	parent->next = child;
   2a5b2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a5b4:	6858      	ldr	r0, [r3, #4]
   2a5b6:	4281      	cmp	r1, r0
	list->tail = node;
   2a5b8:	bf08      	it	eq
   2a5ba:	605a      	streq	r2, [r3, #4]
}
   2a5bc:	e7f5      	b.n	2a5aa <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a5be:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a5c0:	6800      	ldr	r0, [r0, #0]
   2a5c2:	e7e7      	b.n	2a594 <sys_slist_find_and_remove+0x6>

0002a5c4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2a5c4:	4603      	mov	r3, r0
	size_t bytes = 0;
   2a5c6:	2000      	movs	r0, #0

	while (buf) {
   2a5c8:	b903      	cbnz	r3, 2a5cc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2a5ca:	4770      	bx	lr
		bytes += buf->len;
   2a5cc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2a5ce:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2a5d0:	4410      	add	r0, r2
		buf = buf->frags;
   2a5d2:	e7f9      	b.n	2a5c8 <net_buf_frags_len+0x4>

0002a5d4 <att_sent>:
	if (chan->ops->sent) {
   2a5d4:	684b      	ldr	r3, [r1, #4]
   2a5d6:	695b      	ldr	r3, [r3, #20]
{
   2a5d8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2a5da:	b103      	cbz	r3, 2a5de <att_sent+0xa>
		chan->ops->sent(chan);
   2a5dc:	4718      	bx	r3
}
   2a5de:	4770      	bx	lr

0002a5e0 <attr_read_type_cb>:
{
   2a5e0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2a5e2:	68d4      	ldr	r4, [r2, #12]
   2a5e4:	7823      	ldrb	r3, [r4, #0]
   2a5e6:	3102      	adds	r1, #2
   2a5e8:	b913      	cbnz	r3, 2a5f0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2a5ea:	7021      	strb	r1, [r4, #0]
	return true;
   2a5ec:	2001      	movs	r0, #1
   2a5ee:	e006      	b.n	2a5fe <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2a5f0:	428b      	cmp	r3, r1
   2a5f2:	d0fb      	beq.n	2a5ec <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2a5f4:	8983      	ldrh	r3, [r0, #12]
   2a5f6:	3b02      	subs	r3, #2
   2a5f8:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2a5fa:	2000      	movs	r0, #0
   2a5fc:	6110      	str	r0, [r2, #16]
}
   2a5fe:	bd10      	pop	{r4, pc}

0002a600 <att_prepare_write_req>:
}
   2a600:	2006      	movs	r0, #6
   2a602:	4770      	bx	lr

0002a604 <att_op_get_type>:
	switch (op) {
   2a604:	281e      	cmp	r0, #30
   2a606:	d816      	bhi.n	2a636 <att_op_get_type+0x32>
   2a608:	b308      	cbz	r0, 2a64e <att_op_get_type+0x4a>
   2a60a:	1e43      	subs	r3, r0, #1
   2a60c:	2b1d      	cmp	r3, #29
   2a60e:	d81e      	bhi.n	2a64e <att_op_get_type+0x4a>
   2a610:	e8df f003 	tbb	[pc, r3]
   2a614:	23172317 	.word	0x23172317
   2a618:	23172317 	.word	0x23172317
   2a61c:	23172317 	.word	0x23172317
   2a620:	23172317 	.word	0x23172317
   2a624:	1d172317 	.word	0x1d172317
   2a628:	2317231d 	.word	0x2317231d
   2a62c:	1d191d17 	.word	0x1d191d17
   2a630:	0f1b      	.short	0x0f1b
   2a632:	2004      	movs	r0, #4
   2a634:	4770      	bx	lr
   2a636:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2a63a:	2b52      	cmp	r3, #82	; 0x52
   2a63c:	d107      	bne.n	2a64e <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2a63e:	2000      	movs	r0, #0
}
   2a640:	4770      	bx	lr
		return ATT_RESPONSE;
   2a642:	2002      	movs	r0, #2
   2a644:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2a646:	2003      	movs	r0, #3
   2a648:	4770      	bx	lr
		return ATT_INDICATION;
   2a64a:	2005      	movs	r0, #5
   2a64c:	4770      	bx	lr
		return ATT_COMMAND;
   2a64e:	f010 0f40 	tst.w	r0, #64	; 0x40
   2a652:	bf0c      	ite	eq
   2a654:	2006      	moveq	r0, #6
   2a656:	2000      	movne	r0, #0
   2a658:	4770      	bx	lr
		return ATT_REQUEST;
   2a65a:	2001      	movs	r0, #1
   2a65c:	4770      	bx	lr

0002a65e <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2a65e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2a660:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2a664:	2300      	movs	r3, #0
   2a666:	9300      	str	r3, [sp, #0]
   2a668:	461a      	mov	r2, r3
   2a66a:	f7f0 f843 	bl	1a6f4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2a66e:	b005      	add	sp, #20
   2a670:	f85d fb04 	ldr.w	pc, [sp], #4

0002a674 <att_chan_read>:
{
   2a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a678:	4680      	mov	r8, r0
   2a67a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2a67c:	4610      	mov	r0, r2
{
   2a67e:	4699      	mov	r9, r3
   2a680:	468b      	mov	fp, r1
   2a682:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2a684:	f7ff ff9e 	bl	2a5c4 <net_buf_frags_len>
   2a688:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   2a68c:	4283      	cmp	r3, r0
   2a68e:	d97a      	bls.n	2a786 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2a690:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2a694:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2a696:	4630      	mov	r0, r6
   2a698:	f7f2 ff34 	bl	1d504 <net_buf_frag_last>
	size_t len, total = 0;
   2a69c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2a6a0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2a6a2:	4630      	mov	r0, r6
   2a6a4:	f7ff ff8e 	bl	2a5c4 <net_buf_frags_len>
   2a6a8:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   2a6ac:	f105 0708 	add.w	r7, r5, #8
   2a6b0:	1a24      	subs	r4, r4, r0
   2a6b2:	4638      	mov	r0, r7
   2a6b4:	f001 f982 	bl	2b9bc <net_buf_simple_tailroom>
   2a6b8:	4284      	cmp	r4, r0
   2a6ba:	d211      	bcs.n	2a6e0 <att_chan_read+0x6c>
   2a6bc:	4630      	mov	r0, r6
   2a6be:	f7ff ff81 	bl	2a5c4 <net_buf_frags_len>
   2a6c2:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   2a6c6:	1a24      	subs	r4, r4, r0
		if (!len) {
   2a6c8:	bb34      	cbnz	r4, 2a718 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2a6ca:	79b0      	ldrb	r0, [r6, #6]
   2a6cc:	f7f2 fd1a 	bl	1d104 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2a6d0:	2200      	movs	r2, #0
   2a6d2:	2300      	movs	r3, #0
   2a6d4:	f001 f961 	bl	2b99a <net_buf_alloc_fixed>
			if (!frag) {
   2a6d8:	4605      	mov	r5, r0
   2a6da:	b930      	cbnz	r0, 2a6ea <att_chan_read+0x76>
	return total;
   2a6dc:	4657      	mov	r7, sl
   2a6de:	e02c      	b.n	2a73a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2a6e0:	4638      	mov	r0, r7
   2a6e2:	f001 f96b 	bl	2b9bc <net_buf_simple_tailroom>
   2a6e6:	4604      	mov	r4, r0
   2a6e8:	e7ee      	b.n	2a6c8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2a6ea:	4601      	mov	r1, r0
   2a6ec:	4630      	mov	r0, r6
   2a6ee:	f7f2 ff51 	bl	1d594 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2a6f2:	4630      	mov	r0, r6
   2a6f4:	f7ff ff66 	bl	2a5c4 <net_buf_frags_len>
   2a6f8:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   2a6fc:	f105 0708 	add.w	r7, r5, #8
   2a700:	1a24      	subs	r4, r4, r0
   2a702:	4638      	mov	r0, r7
   2a704:	f001 f95a 	bl	2b9bc <net_buf_simple_tailroom>
   2a708:	4284      	cmp	r4, r0
   2a70a:	d21a      	bcs.n	2a742 <att_chan_read+0xce>
   2a70c:	4630      	mov	r0, r6
   2a70e:	f7ff ff59 	bl	2a5c4 <net_buf_frags_len>
   2a712:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   2a716:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2a718:	68a9      	ldr	r1, [r5, #8]
   2a71a:	89aa      	ldrh	r2, [r5, #12]
   2a71c:	f8db 7004 	ldr.w	r7, [fp, #4]
   2a720:	9803      	ldr	r0, [sp, #12]
   2a722:	f8cd 9000 	str.w	r9, [sp]
   2a726:	440a      	add	r2, r1
   2a728:	b2a3      	uxth	r3, r4
   2a72a:	4659      	mov	r1, fp
   2a72c:	47b8      	blx	r7
		if (read < 0) {
   2a72e:	1e07      	subs	r7, r0, #0
   2a730:	da0c      	bge.n	2a74c <att_chan_read+0xd8>
				return total;
   2a732:	f1ba 0f00 	cmp.w	sl, #0
   2a736:	bf18      	it	ne
   2a738:	4657      	movne	r7, sl
}
   2a73a:	4638      	mov	r0, r7
   2a73c:	b005      	add	sp, #20
   2a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a742:	4638      	mov	r0, r7
   2a744:	f001 f93a 	bl	2b9bc <net_buf_simple_tailroom>
   2a748:	4604      	mov	r4, r0
   2a74a:	e7e5      	b.n	2a718 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2a74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a74e:	b993      	cbnz	r3, 2a776 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2a750:	4639      	mov	r1, r7
   2a752:	f105 0008 	add.w	r0, r5, #8
   2a756:	f7f2 ffa5 	bl	1d6a4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a75a:	4630      	mov	r0, r6
   2a75c:	f7ff ff32 	bl	2a5c4 <net_buf_frags_len>
   2a760:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   2a764:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a766:	4283      	cmp	r3, r0
		total += read;
   2a768:	44ba      	add	sl, r7
		offset += read;
   2a76a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a76e:	d9b5      	bls.n	2a6dc <att_chan_read+0x68>
   2a770:	42a7      	cmp	r7, r4
   2a772:	d096      	beq.n	2a6a2 <att_chan_read+0x2e>
   2a774:	e7b2      	b.n	2a6dc <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2a776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a77a:	4639      	mov	r1, r7
   2a77c:	4628      	mov	r0, r5
   2a77e:	4798      	blx	r3
   2a780:	2800      	cmp	r0, #0
   2a782:	d1e5      	bne.n	2a750 <att_chan_read+0xdc>
   2a784:	e7aa      	b.n	2a6dc <att_chan_read+0x68>
		return 0;
   2a786:	2700      	movs	r7, #0
   2a788:	e7d7      	b.n	2a73a <att_chan_read+0xc6>

0002a78a <find_info_cb>:
{
   2a78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2a78c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2a78e:	6817      	ldr	r7, [r2, #0]
{
   2a790:	4605      	mov	r5, r0
   2a792:	460e      	mov	r6, r1
   2a794:	4614      	mov	r4, r2
	if (!data->rsp) {
   2a796:	b963      	cbnz	r3, 2a7b2 <find_info_cb+0x28>
   2a798:	6850      	ldr	r0, [r2, #4]
   2a79a:	2101      	movs	r1, #1
   2a79c:	3008      	adds	r0, #8
   2a79e:	f7f2 ff81 	bl	1d6a4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2a7a2:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2a7a4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2a7a6:	781b      	ldrb	r3, [r3, #0]
   2a7a8:	2b00      	cmp	r3, #0
   2a7aa:	bf0c      	ite	eq
   2a7ac:	2301      	moveq	r3, #1
   2a7ae:	2302      	movne	r3, #2
   2a7b0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2a7b2:	68a3      	ldr	r3, [r4, #8]
   2a7b4:	781b      	ldrb	r3, [r3, #0]
   2a7b6:	2b01      	cmp	r3, #1
   2a7b8:	d003      	beq.n	2a7c2 <find_info_cb+0x38>
   2a7ba:	2b02      	cmp	r3, #2
   2a7bc:	d019      	beq.n	2a7f2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2a7be:	2000      	movs	r0, #0
   2a7c0:	e016      	b.n	2a7f0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2a7c2:	682b      	ldr	r3, [r5, #0]
   2a7c4:	781b      	ldrb	r3, [r3, #0]
   2a7c6:	2b00      	cmp	r3, #0
   2a7c8:	d1f9      	bne.n	2a7be <find_info_cb+0x34>
   2a7ca:	6860      	ldr	r0, [r4, #4]
   2a7cc:	2104      	movs	r1, #4
   2a7ce:	3008      	adds	r0, #8
   2a7d0:	f7f2 ff68 	bl	1d6a4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2a7d4:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2a7d6:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2a7d8:	885b      	ldrh	r3, [r3, #2]
   2a7da:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2a7dc:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2a7de:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2a7e0:	899b      	ldrh	r3, [r3, #12]
   2a7e2:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   2a7e6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2a7e8:	2804      	cmp	r0, #4
   2a7ea:	bf94      	ite	ls
   2a7ec:	2000      	movls	r0, #0
   2a7ee:	2001      	movhi	r0, #1
}
   2a7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2a7f2:	682b      	ldr	r3, [r5, #0]
   2a7f4:	781b      	ldrb	r3, [r3, #0]
   2a7f6:	2b02      	cmp	r3, #2
   2a7f8:	d1e1      	bne.n	2a7be <find_info_cb+0x34>
   2a7fa:	6860      	ldr	r0, [r4, #4]
   2a7fc:	2112      	movs	r1, #18
   2a7fe:	3008      	adds	r0, #8
   2a800:	f7f2 ff50 	bl	1d6a4 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2a804:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2a806:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2a808:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2a80a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2a80e:	3101      	adds	r1, #1
   2a810:	f7ff f923 	bl	29a5a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2a814:	6863      	ldr	r3, [r4, #4]
   2a816:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   2a81a:	899b      	ldrh	r3, [r3, #12]
   2a81c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2a81e:	2812      	cmp	r0, #18
   2a820:	e7e3      	b.n	2a7ea <find_info_cb+0x60>

0002a822 <att_chan_mtu_updated>:
{
   2a822:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2a824:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a826:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   2a828:	b30a      	cbz	r2, 2a86e <att_chan_mtu_updated+0x4c>
   2a82a:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   2a82e:	d01d      	beq.n	2a86c <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a830:	6813      	ldr	r3, [r2, #0]
   2a832:	b10b      	cbz	r3, 2a838 <att_chan_mtu_updated+0x16>
   2a834:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2a838:	2200      	movs	r2, #0
   2a83a:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2a83c:	42a0      	cmp	r0, r4
   2a83e:	d009      	beq.n	2a854 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2a840:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2a844:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2a848:	42a9      	cmp	r1, r5
   2a84a:	bf38      	it	cc
   2a84c:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2a84e:	42a2      	cmp	r2, r4
   2a850:	bf38      	it	cc
   2a852:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a854:	b163      	cbz	r3, 2a870 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a856:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   2a85a:	d004      	beq.n	2a866 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a85c:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   2a860:	b10d      	cbz	r5, 2a866 <att_chan_mtu_updated+0x44>
   2a862:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   2a866:	461c      	mov	r4, r3
   2a868:	462b      	mov	r3, r5
   2a86a:	e7e7      	b.n	2a83c <att_chan_mtu_updated+0x1a>
   2a86c:	4622      	mov	r2, r4
   2a86e:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2a870:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   2a874:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   2a878:	428b      	cmp	r3, r1
   2a87a:	d801      	bhi.n	2a880 <att_chan_mtu_updated+0x5e>
   2a87c:	4290      	cmp	r0, r2
   2a87e:	d909      	bls.n	2a894 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2a880:	4282      	cmp	r2, r0
   2a882:	bf38      	it	cc
   2a884:	4602      	movcc	r2, r0
   2a886:	4299      	cmp	r1, r3
   2a888:	6830      	ldr	r0, [r6, #0]
   2a88a:	bf38      	it	cc
   2a88c:	4619      	movcc	r1, r3
}
   2a88e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2a890:	f7f0 bd10 	b.w	1b2b4 <bt_gatt_att_max_mtu_changed>
}
   2a894:	bc70      	pop	{r4, r5, r6}
   2a896:	4770      	bx	lr

0002a898 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2a898:	68d0      	ldr	r0, [r2, #12]
   2a89a:	7803      	ldrb	r3, [r0, #0]
   2a89c:	3104      	adds	r1, #4
   2a89e:	b913      	cbnz	r3, 2a8a6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2a8a0:	7001      	strb	r1, [r0, #0]
	return true;
   2a8a2:	2001      	movs	r0, #1
}
   2a8a4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2a8a6:	428b      	cmp	r3, r1
   2a8a8:	d0fb      	beq.n	2a8a2 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2a8aa:	6891      	ldr	r1, [r2, #8]
   2a8ac:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2a8ae:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2a8b0:	3b04      	subs	r3, #4
   2a8b2:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2a8b4:	6110      	str	r0, [r2, #16]
		return false;
   2a8b6:	4770      	bx	lr

0002a8b8 <chan_req_send>:
{
   2a8b8:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a8ba:	688e      	ldr	r6, [r1, #8]
{
   2a8bc:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a8be:	4630      	mov	r0, r6
{
   2a8c0:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a8c2:	f7ff fe7f 	bl	2a5c4 <net_buf_frags_len>
   2a8c6:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   2a8ca:	4283      	cmp	r3, r0
   2a8cc:	d30a      	bcc.n	2a8e4 <chan_req_send+0x2c>
	req->buf = NULL;
   2a8ce:	2200      	movs	r2, #0
	chan->req = req;
   2a8d0:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   2a8d4:	4628      	mov	r0, r5
	req->buf = NULL;
   2a8d6:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2a8d8:	4631      	mov	r1, r6
   2a8da:	f7ee fabf 	bl	18e5c <chan_send>
	if (err) {
   2a8de:	b100      	cbz	r0, 2a8e2 <chan_req_send+0x2a>
		req->buf = buf;
   2a8e0:	60a6      	str	r6, [r4, #8]
}
   2a8e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2a8e4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2a8e8:	e7fb      	b.n	2a8e2 <chan_req_send+0x2a>

0002a8ea <process_queue>:
{
   2a8ea:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2a8ec:	2200      	movs	r2, #0
{
   2a8ee:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2a8f0:	2300      	movs	r3, #0
   2a8f2:	4608      	mov	r0, r1
{
   2a8f4:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2a8f6:	f7f2 fd13 	bl	1d320 <net_buf_get>
	if (buf) {
   2a8fa:	4605      	mov	r5, r0
   2a8fc:	b160      	cbz	r0, 2a918 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2a8fe:	4601      	mov	r1, r0
   2a900:	2200      	movs	r2, #0
   2a902:	4620      	mov	r0, r4
   2a904:	f7ee faaa 	bl	18e5c <chan_send>
		if (err) {
   2a908:	4604      	mov	r4, r0
   2a90a:	b118      	cbz	r0, 2a914 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2a90c:	4629      	mov	r1, r5
   2a90e:	4630      	mov	r0, r6
   2a910:	f001 fea9 	bl	2c666 <k_queue_prepend>
}
   2a914:	4620      	mov	r0, r4
   2a916:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2a918:	f06f 0401 	mvn.w	r4, #1
   2a91c:	e7fa      	b.n	2a914 <process_queue+0x2a>

0002a91e <chan_req_sent>:
	if (chan->req) {
   2a91e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2a922:	b133      	cbz	r3, 2a932 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2a924:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a928:	2300      	movs	r3, #0
   2a92a:	f500 7090 	add.w	r0, r0, #288	; 0x120
   2a92e:	f7f7 bd41 	b.w	223b4 <k_work_reschedule>
}
   2a932:	4770      	bx	lr

0002a934 <att_exec_write_req>:
   2a934:	2006      	movs	r0, #6
   2a936:	4770      	bx	lr

0002a938 <chan_rsp_sent>:
   2a938:	30f8      	adds	r0, #248	; 0xf8
   2a93a:	f3bf 8f5b 	dmb	ish
   2a93e:	e850 3f00 	ldrex	r3, [r0]
   2a942:	f023 0301 	bic.w	r3, r3, #1
   2a946:	e840 3200 	strex	r2, r3, [r0]
   2a94a:	2a00      	cmp	r2, #0
   2a94c:	d1f7      	bne.n	2a93e <chan_rsp_sent+0x6>
   2a94e:	f3bf 8f5b 	dmb	ish
}
   2a952:	4770      	bx	lr

0002a954 <chan_cfm_sent>:
   2a954:	30f8      	adds	r0, #248	; 0xf8
   2a956:	f3bf 8f5b 	dmb	ish
   2a95a:	e850 3f00 	ldrex	r3, [r0]
   2a95e:	f023 0302 	bic.w	r3, r3, #2
   2a962:	e840 3200 	strex	r2, r3, [r0]
   2a966:	2a00      	cmp	r2, #0
   2a968:	d1f7      	bne.n	2a95a <chan_cfm_sent+0x6>
   2a96a:	f3bf 8f5b 	dmb	ish
}
   2a96e:	4770      	bx	lr

0002a970 <bt_att_status>:
{
   2a970:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a972:	f3bf 8f5b 	dmb	ish
   2a976:	680b      	ldr	r3, [r1, #0]
   2a978:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2a97c:	07db      	lsls	r3, r3, #31
{
   2a97e:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2a980:	d519      	bpl.n	2a9b6 <bt_att_status+0x46>
	if (!chan->att) {
   2a982:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2a986:	b1b0      	cbz	r0, 2a9b6 <bt_att_status+0x46>
	if (chan->req) {
   2a988:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2a98c:	b99b      	cbnz	r3, 2a9b6 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2a98e:	3004      	adds	r0, #4
   2a990:	f7ff fdf3 	bl	2a57a <sys_slist_get>
	if (!node) {
   2a994:	4604      	mov	r4, r0
   2a996:	b170      	cbz	r0, 2a9b6 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a998:	4601      	mov	r1, r0
   2a99a:	f1a5 0008 	sub.w	r0, r5, #8
   2a99e:	f7ee facb 	bl	18f38 <bt_att_chan_req_send>
   2a9a2:	2800      	cmp	r0, #0
   2a9a4:	da07      	bge.n	2a9b6 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2a9a6:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2a9aa:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2a9ac:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a9ae:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2a9b0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a9b2:	b902      	cbnz	r2, 2a9b6 <bt_att_status+0x46>
	list->tail = node;
   2a9b4:	609c      	str	r4, [r3, #8]
}
   2a9b6:	bd38      	pop	{r3, r4, r5, pc}

0002a9b8 <att_req_send_process>:
{
   2a9b8:	b570      	push	{r4, r5, r6, lr}
   2a9ba:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2a9bc:	3004      	adds	r0, #4
   2a9be:	f7ff fddc 	bl	2a57a <sys_slist_get>
	if (!node) {
   2a9c2:	4606      	mov	r6, r0
   2a9c4:	b1c0      	cbz	r0, 2a9f8 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a9c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2a9c8:	b153      	cbz	r3, 2a9e0 <att_req_send_process+0x28>
   2a9ca:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   2a9ce:	d007      	beq.n	2a9e0 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a9d0:	681c      	ldr	r4, [r3, #0]
   2a9d2:	b10c      	cbz	r4, 2a9d8 <att_req_send_process+0x20>
   2a9d4:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   2a9d8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2a9dc:	b13b      	cbz	r3, 2a9ee <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a9de:	b964      	cbnz	r4, 2a9fa <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   2a9e0:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2a9e2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a9e4:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2a9e6:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a9e8:	b933      	cbnz	r3, 2a9f8 <att_req_send_process+0x40>
	list->tail = node;
   2a9ea:	60ae      	str	r6, [r5, #8]
}
   2a9ec:	e004      	b.n	2a9f8 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a9ee:	4631      	mov	r1, r6
   2a9f0:	f7ee faa2 	bl	18f38 <bt_att_chan_req_send>
   2a9f4:	2800      	cmp	r0, #0
   2a9f6:	dbf2      	blt.n	2a9de <att_req_send_process+0x26>
}
   2a9f8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a9fa:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2a9fe:	d004      	beq.n	2aa0a <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2aa00:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2aa04:	b10b      	cbz	r3, 2aa0a <att_req_send_process+0x52>
   2aa06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2aa0a:	4620      	mov	r0, r4
   2aa0c:	461c      	mov	r4, r3
   2aa0e:	e7e3      	b.n	2a9d8 <att_req_send_process+0x20>

0002aa10 <write_cb>:
{
   2aa10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2aa12:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2aa14:	4601      	mov	r1, r0
{
   2aa16:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2aa18:	222a      	movs	r2, #42	; 0x2a
   2aa1a:	6820      	ldr	r0, [r4, #0]
   2aa1c:	f000 fb53 	bl	2b0c6 <bt_gatt_check_perm>
   2aa20:	4605      	mov	r5, r0
   2aa22:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2aa24:	bb00      	cbnz	r0, 2aa68 <write_cb+0x58>
	if (!data->req) {
   2aa26:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   2aa28:	68b7      	ldr	r7, [r6, #8]
   2aa2a:	68e2      	ldr	r2, [r4, #12]
   2aa2c:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   2aa2e:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2aa30:	bf14      	ite	ne
   2aa32:	2300      	movne	r3, #0
   2aa34:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2aa36:	9301      	str	r3, [sp, #4]
   2aa38:	8a63      	ldrh	r3, [r4, #18]
   2aa3a:	9300      	str	r3, [sp, #0]
   2aa3c:	4631      	mov	r1, r6
   2aa3e:	8a23      	ldrh	r3, [r4, #16]
   2aa40:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2aa42:	1e03      	subs	r3, r0, #0
   2aa44:	db05      	blt.n	2aa52 <write_cb+0x42>
   2aa46:	8a22      	ldrh	r2, [r4, #16]
   2aa48:	4293      	cmp	r3, r2
   2aa4a:	d10b      	bne.n	2aa64 <write_cb+0x54>
	data->err = 0U;
   2aa4c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2aa4e:	2501      	movs	r5, #1
   2aa50:	e005      	b.n	2aa5e <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2aa52:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2aa56:	d305      	bcc.n	2aa64 <write_cb+0x54>
		return -err;
   2aa58:	425b      	negs	r3, r3
   2aa5a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2aa5c:	7523      	strb	r3, [r4, #20]
}
   2aa5e:	4628      	mov	r0, r5
   2aa60:	b003      	add	sp, #12
   2aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2aa64:	230e      	movs	r3, #14
   2aa66:	e7f9      	b.n	2aa5c <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   2aa68:	2500      	movs	r5, #0
   2aa6a:	e7f8      	b.n	2aa5e <write_cb+0x4e>

0002aa6c <bt_att_sent>:
{
   2aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2aa6e:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   2aa72:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2aa76:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2aa78:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2aa7c:	b10b      	cbz	r3, 2aa82 <bt_att_sent+0x16>
		chan->sent(chan);
   2aa7e:	4638      	mov	r0, r7
   2aa80:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2aa82:	f3bf 8f5b 	dmb	ish
   2aa86:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   2aa8a:	e853 2f00 	ldrex	r2, [r3]
   2aa8e:	f022 0210 	bic.w	r2, r2, #16
   2aa92:	e843 2100 	strex	r1, r2, [r3]
   2aa96:	2900      	cmp	r1, #0
   2aa98:	d1f7      	bne.n	2aa8a <bt_att_sent+0x1e>
   2aa9a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2aa9e:	b30c      	cbz	r4, 2aae4 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2aaa0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2aaa4:	b98b      	cbnz	r3, 2aaca <bt_att_sent+0x5e>
   2aaa6:	6863      	ldr	r3, [r4, #4]
   2aaa8:	b17b      	cbz	r3, 2aaca <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2aaaa:	1d20      	adds	r0, r4, #4
   2aaac:	f7ff fd65 	bl	2a57a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2aab0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2aab2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2aab4:	4638      	mov	r0, r7
   2aab6:	f7ff feff 	bl	2a8b8 <chan_req_send>
   2aaba:	2800      	cmp	r0, #0
   2aabc:	da12      	bge.n	2aae4 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   2aabe:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2aac0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2aac2:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2aac4:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2aac6:	b903      	cbnz	r3, 2aaca <bt_att_sent+0x5e>
	list->tail = node;
   2aac8:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2aaca:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   2aace:	4638      	mov	r0, r7
   2aad0:	f7ff ff0b 	bl	2a8ea <process_queue>
	if (!err) {
   2aad4:	b130      	cbz	r0, 2aae4 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2aad6:	f104 010c 	add.w	r1, r4, #12
   2aada:	4638      	mov	r0, r7
}
   2aadc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2aae0:	f7ff bf03 	b.w	2a8ea <process_queue>
}
   2aae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002aae6 <read_cb>:
{
   2aae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2aaea:	f8d2 8000 	ldr.w	r8, [r2]
{
   2aaee:	4606      	mov	r6, r0
	data->err = 0x00;
   2aaf0:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2aaf2:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2aaf6:	7317      	strb	r7, [r2, #12]
{
   2aaf8:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2aafa:	4631      	mov	r1, r6
   2aafc:	2215      	movs	r2, #21
   2aafe:	f000 fae2 	bl	2b0c6 <bt_gatt_check_perm>
   2ab02:	4604      	mov	r4, r0
   2ab04:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2ab06:	b9a0      	cbnz	r0, 2ab32 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ab08:	e9cd 0000 	strd	r0, r0, [sp]
   2ab0c:	88ab      	ldrh	r3, [r5, #4]
   2ab0e:	68aa      	ldr	r2, [r5, #8]
   2ab10:	4631      	mov	r1, r6
   2ab12:	4640      	mov	r0, r8
   2ab14:	f7ff fdae 	bl	2a674 <att_chan_read>
	if (ret < 0) {
   2ab18:	1e03      	subs	r3, r0, #0
   2ab1a:	da0c      	bge.n	2ab36 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2ab1c:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2ab20:	bf26      	itte	cs
   2ab22:	425b      	negcs	r3, r3
   2ab24:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2ab26:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2ab28:	732b      	strb	r3, [r5, #12]
}
   2ab2a:	4620      	mov	r0, r4
   2ab2c:	b002      	add	sp, #8
   2ab2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2ab32:	463c      	mov	r4, r7
   2ab34:	e7f9      	b.n	2ab2a <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2ab36:	2401      	movs	r4, #1
   2ab38:	e7f7      	b.n	2ab2a <read_cb+0x44>

0002ab3a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2ab3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab3e:	4688      	mov	r8, r1
   2ab40:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2ab42:	2101      	movs	r1, #1
   2ab44:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2ab46:	4605      	mov	r5, r0
   2ab48:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2ab4a:	f7ee fb81 	bl	19250 <bt_att_chan_create_pdu>
	if (!buf) {
   2ab4e:	4604      	mov	r4, r0
   2ab50:	b170      	cbz	r0, 2ab70 <send_err_rsp.part.0+0x36>
   2ab52:	2104      	movs	r1, #4
   2ab54:	3008      	adds	r0, #8
   2ab56:	f7f2 fda5 	bl	1d6a4 <net_buf_simple_add>
	rsp->request = req;
   2ab5a:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2ab5e:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2ab60:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2ab64:	4621      	mov	r1, r4
   2ab66:	4628      	mov	r0, r5
}
   2ab68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2ab6c:	f7ee ba70 	b.w	19050 <bt_att_chan_send_rsp.constprop.0>
}
   2ab70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ab74 <att_read_blob_req>:
{
   2ab74:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2ab76:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2ab78:	8813      	ldrh	r3, [r2, #0]
   2ab7a:	8852      	ldrh	r2, [r2, #2]
   2ab7c:	9200      	str	r2, [sp, #0]
   2ab7e:	210c      	movs	r1, #12
   2ab80:	220d      	movs	r2, #13
   2ab82:	f7ee fdb7 	bl	196f4 <att_read_rsp>
}
   2ab86:	b003      	add	sp, #12
   2ab88:	f85d fb04 	ldr.w	pc, [sp], #4

0002ab8c <att_read_req>:
{
   2ab8c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2ab8e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2ab90:	2200      	movs	r2, #0
   2ab92:	881b      	ldrh	r3, [r3, #0]
   2ab94:	9200      	str	r2, [sp, #0]
   2ab96:	210a      	movs	r1, #10
   2ab98:	220b      	movs	r2, #11
   2ab9a:	f7ee fdab 	bl	196f4 <att_read_rsp>
}
   2ab9e:	b003      	add	sp, #12
   2aba0:	f85d fb04 	ldr.w	pc, [sp], #4

0002aba4 <att_mtu_req>:
{
   2aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2aba6:	6803      	ldr	r3, [r0, #0]
{
   2aba8:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2abaa:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2abac:	f3bf 8f5b 	dmb	ish
   2abb0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2abb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2abb8:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2abbc:	071b      	lsls	r3, r3, #28
   2abbe:	d420      	bmi.n	2ac02 <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2abc0:	688b      	ldr	r3, [r1, #8]
   2abc2:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2abc4:	2e16      	cmp	r6, #22
   2abc6:	d91e      	bls.n	2ac06 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2abc8:	2202      	movs	r2, #2
   2abca:	2103      	movs	r1, #3
   2abcc:	f7ee fc8e 	bl	194ec <bt_att_create_pdu>
	if (!pdu) {
   2abd0:	4607      	mov	r7, r0
   2abd2:	b1d0      	cbz	r0, 2ac0a <att_mtu_req+0x66>
   2abd4:	2102      	movs	r1, #2
   2abd6:	3008      	adds	r0, #8
   2abd8:	f7f2 fd64 	bl	1d6a4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2abdc:	2341      	movs	r3, #65	; 0x41
   2abde:	7003      	strb	r3, [r0, #0]
   2abe0:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2abe2:	4639      	mov	r1, r7
   2abe4:	4620      	mov	r0, r4
   2abe6:	f7ee fa33 	bl	19050 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2abea:	2e41      	cmp	r6, #65	; 0x41
   2abec:	bf28      	it	cs
   2abee:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2abf0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2abf2:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2abf6:	f8a4 6086 	strh.w	r6, [r4, #134]	; 0x86
	att_chan_mtu_updated(chan);
   2abfa:	f7ff fe12 	bl	2a822 <att_chan_mtu_updated>
	return 0;
   2abfe:	4628      	mov	r0, r5
}
   2ac00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2ac02:	2006      	movs	r0, #6
   2ac04:	e7fc      	b.n	2ac00 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   2ac06:	2004      	movs	r0, #4
   2ac08:	e7fa      	b.n	2ac00 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   2ac0a:	200e      	movs	r0, #14
   2ac0c:	e7f8      	b.n	2ac00 <att_mtu_req+0x5c>

0002ac0e <bt_att_init>:
	bt_gatt_init();
   2ac0e:	f7ef bcb1 	b.w	1a574 <bt_gatt_init>

0002ac12 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2ac12:	898a      	ldrh	r2, [r1, #12]
   2ac14:	6889      	ldr	r1, [r1, #8]
   2ac16:	2300      	movs	r3, #0
   2ac18:	f7ee bede 	b.w	199d8 <att_handle_rsp>

0002ac1c <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2ac1c:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   2ac20:	b570      	push	{r4, r5, r6, lr}
   2ac22:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2ac24:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2ac28:	2b00      	cmp	r3, #0
   2ac2a:	d037      	beq.n	2ac9c <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2ac2c:	b171      	cbz	r1, 2ac4c <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2ac2e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2ac32:	2b00      	cmp	r3, #0
   2ac34:	d032      	beq.n	2ac9c <bt_att_encrypt_change+0x80>
   2ac36:	7c1b      	ldrb	r3, [r3, #16]
   2ac38:	07da      	lsls	r2, r3, #31
   2ac3a:	d52f      	bpl.n	2ac9c <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2ac3c:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2ac3e:	2200      	movs	r2, #0
   2ac40:	4630      	mov	r0, r6
   2ac42:	4611      	mov	r1, r2
}
   2ac44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2ac48:	f7ee bec6 	b.w	199d8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2ac4c:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2ac4e:	4628      	mov	r0, r5
   2ac50:	f7f0 fb46 	bl	1b2e0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2ac54:	7a6b      	ldrb	r3, [r5, #9]
   2ac56:	2b01      	cmp	r3, #1
   2ac58:	d020      	beq.n	2ac9c <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2ac5a:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
   2ac5e:	b1ec      	cbz	r4, 2ac9c <bt_att_encrypt_change+0x80>
   2ac60:	7c23      	ldrb	r3, [r4, #16]
   2ac62:	07db      	lsls	r3, r3, #31
   2ac64:	d51a      	bpl.n	2ac9c <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2ac66:	68e3      	ldr	r3, [r4, #12]
   2ac68:	2b00      	cmp	r3, #0
   2ac6a:	d0e7      	beq.n	2ac3c <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2ac6c:	6962      	ldr	r2, [r4, #20]
   2ac6e:	7c61      	ldrb	r1, [r4, #17]
   2ac70:	4630      	mov	r0, r6
   2ac72:	f7ee faed 	bl	19250 <bt_att_chan_create_pdu>
	if (!buf) {
   2ac76:	4605      	mov	r5, r0
   2ac78:	b140      	cbz	r0, 2ac8c <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2ac7a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2ac7e:	68e3      	ldr	r3, [r4, #12]
   2ac80:	4798      	blx	r3
   2ac82:	4602      	mov	r2, r0
   2ac84:	b120      	cbz	r0, 2ac90 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2ac86:	4628      	mov	r0, r5
   2ac88:	f7f2 fbdc 	bl	1d444 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2ac8c:	230e      	movs	r3, #14
   2ac8e:	e7d6      	b.n	2ac3e <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2ac90:	4629      	mov	r1, r5
   2ac92:	4630      	mov	r0, r6
   2ac94:	f7ee f8e2 	bl	18e5c <chan_send>
   2ac98:	2800      	cmp	r0, #0
   2ac9a:	d1f4      	bne.n	2ac86 <bt_att_encrypt_change+0x6a>
}
   2ac9c:	bd70      	pop	{r4, r5, r6, pc}

0002ac9e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2ac9e:	6010      	str	r0, [r2, #0]
}
   2aca0:	2000      	movs	r0, #0
   2aca2:	4770      	bx	lr

0002aca4 <gatt_ccc_changed>:
{
   2aca4:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2aca6:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2aca8:	895a      	ldrh	r2, [r3, #10]
   2acaa:	428a      	cmp	r2, r1
   2acac:	d003      	beq.n	2acb6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2acae:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2acb0:	68db      	ldr	r3, [r3, #12]
   2acb2:	b103      	cbz	r3, 2acb6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2acb4:	4718      	bx	r3
}
   2acb6:	4770      	bx	lr

0002acb8 <gatt_indicate_rsp>:
{
   2acb8:	b510      	push	{r4, lr}
   2acba:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2acbc:	68a3      	ldr	r3, [r4, #8]
{
   2acbe:	460a      	mov	r2, r1
	if (params->func) {
   2acc0:	b10b      	cbz	r3, 2acc6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2acc2:	4621      	mov	r1, r4
   2acc4:	4798      	blx	r3
	params->_ref--;
   2acc6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2acc8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2acca:	3b01      	subs	r3, #1
   2accc:	b2db      	uxtb	r3, r3
   2acce:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2acd0:	b122      	cbz	r2, 2acdc <gatt_indicate_rsp+0x24>
   2acd2:	b91b      	cbnz	r3, 2acdc <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2acd4:	4620      	mov	r0, r4
}
   2acd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2acda:	4710      	bx	r2
}
   2acdc:	bd10      	pop	{r4, pc}

0002acde <match_uuid>:
	data->attr = attr;
   2acde:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2ace0:	8091      	strh	r1, [r2, #4]
}
   2ace2:	2000      	movs	r0, #0
   2ace4:	4770      	bx	lr

0002ace6 <ccc_set_cb>:
}
   2ace6:	2000      	movs	r0, #0
   2ace8:	4770      	bx	lr

0002acea <atomic_get>:
   2acea:	f3bf 8f5b 	dmb	ish
   2acee:	6800      	ldr	r0, [r0, #0]
   2acf0:	f3bf 8f5b 	dmb	ish
}
   2acf4:	4770      	bx	lr

0002acf6 <gen_hash_m>:
{
   2acf6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2acf8:	6807      	ldr	r7, [r0, #0]
   2acfa:	783d      	ldrb	r5, [r7, #0]
{
   2acfc:	b089      	sub	sp, #36	; 0x24
   2acfe:	4606      	mov	r6, r0
   2ad00:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2ad02:	b10d      	cbz	r5, 2ad08 <gen_hash_m+0x12>
	switch (u16->val) {
   2ad04:	2501      	movs	r5, #1
   2ad06:	e014      	b.n	2ad32 <gen_hash_m+0x3c>
   2ad08:	887b      	ldrh	r3, [r7, #2]
   2ad0a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2ad0e:	d004      	beq.n	2ad1a <gen_hash_m+0x24>
   2ad10:	d812      	bhi.n	2ad38 <gen_hash_m+0x42>
   2ad12:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2ad16:	2b03      	cmp	r3, #3
   2ad18:	d8f4      	bhi.n	2ad04 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2ad1a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ad1e:	2202      	movs	r2, #2
   2ad20:	f10d 010e 	add.w	r1, sp, #14
   2ad24:	4620      	mov	r0, r4
   2ad26:	f7fe fd00 	bl	2972a <tc_cmac_update>
   2ad2a:	b9e0      	cbnz	r0, 2ad66 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2ad2c:	f06f 0315 	mvn.w	r3, #21
   2ad30:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2ad32:	4628      	mov	r0, r5
   2ad34:	b009      	add	sp, #36	; 0x24
   2ad36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2ad38:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2ad3c:	33ff      	adds	r3, #255	; 0xff
   2ad3e:	b29b      	uxth	r3, r3
   2ad40:	2b04      	cmp	r3, #4
   2ad42:	d8df      	bhi.n	2ad04 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2ad44:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ad48:	2202      	movs	r2, #2
   2ad4a:	f10d 010e 	add.w	r1, sp, #14
   2ad4e:	4620      	mov	r0, r4
   2ad50:	f7fe fceb 	bl	2972a <tc_cmac_update>
   2ad54:	2800      	cmp	r0, #0
   2ad56:	d0e9      	beq.n	2ad2c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2ad58:	887b      	ldrh	r3, [r7, #2]
   2ad5a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ad5e:	2202      	movs	r2, #2
   2ad60:	f10d 010e 	add.w	r1, sp, #14
   2ad64:	e017      	b.n	2ad96 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2ad66:	887b      	ldrh	r3, [r7, #2]
   2ad68:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ad6c:	2202      	movs	r2, #2
   2ad6e:	f10d 010e 	add.w	r1, sp, #14
   2ad72:	4620      	mov	r0, r4
   2ad74:	f7fe fcd9 	bl	2972a <tc_cmac_update>
   2ad78:	2800      	cmp	r0, #0
   2ad7a:	d0d7      	beq.n	2ad2c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2ad7c:	2000      	movs	r0, #0
   2ad7e:	2310      	movs	r3, #16
   2ad80:	eb0d 0203 	add.w	r2, sp, r3
   2ad84:	6877      	ldr	r7, [r6, #4]
   2ad86:	9000      	str	r0, [sp, #0]
   2ad88:	4631      	mov	r1, r6
   2ad8a:	47b8      	blx	r7
		if (len < 0) {
   2ad8c:	1e02      	subs	r2, r0, #0
   2ad8e:	da01      	bge.n	2ad94 <gen_hash_m+0x9e>
			state->err = len;
   2ad90:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2ad92:	e7ce      	b.n	2ad32 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2ad94:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ad96:	4620      	mov	r0, r4
   2ad98:	f7fe fcc7 	bl	2972a <tc_cmac_update>
   2ad9c:	2800      	cmp	r0, #0
   2ad9e:	d1b1      	bne.n	2ad04 <gen_hash_m+0xe>
   2ada0:	e7c4      	b.n	2ad2c <gen_hash_m+0x36>

0002ada2 <atomic_or>:
{
   2ada2:	4603      	mov	r3, r0
}
   2ada4:	f3bf 8f5b 	dmb	ish
   2ada8:	e853 0f00 	ldrex	r0, [r3]
   2adac:	ea40 0201 	orr.w	r2, r0, r1
   2adb0:	e843 2c00 	strex	ip, r2, [r3]
   2adb4:	f1bc 0f00 	cmp.w	ip, #0
   2adb8:	d1f6      	bne.n	2ada8 <atomic_or+0x6>
   2adba:	f3bf 8f5b 	dmb	ish
   2adbe:	4770      	bx	lr

0002adc0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2adc0:	2207      	movs	r2, #7
   2adc2:	f7fe be4a 	b.w	29a5a <memcpy>

0002adc6 <clear_ccc_cfg>:
{
   2adc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2adc8:	2500      	movs	r5, #0
{
   2adca:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2adcc:	4669      	mov	r1, sp
   2adce:	3001      	adds	r0, #1
   2add0:	9500      	str	r5, [sp, #0]
   2add2:	f8cd 5003 	str.w	r5, [sp, #3]
   2add6:	f7ff fff3 	bl	2adc0 <bt_addr_le_copy>
	cfg->id = 0U;
   2adda:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2addc:	8125      	strh	r5, [r4, #8]
}
   2adde:	b003      	add	sp, #12
   2ade0:	bd30      	pop	{r4, r5, pc}

0002ade2 <atomic_and>:
{
   2ade2:	4603      	mov	r3, r0
}
   2ade4:	f3bf 8f5b 	dmb	ish
   2ade8:	e853 0f00 	ldrex	r0, [r3]
   2adec:	ea00 0201 	and.w	r2, r0, r1
   2adf0:	e843 2c00 	strex	ip, r2, [r3]
   2adf4:	f1bc 0f00 	cmp.w	ip, #0
   2adf8:	d1f6      	bne.n	2ade8 <atomic_and+0x6>
   2adfa:	f3bf 8f5b 	dmb	ish
   2adfe:	4770      	bx	lr

0002ae00 <clear_cf_cfg>:
{
   2ae00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ae02:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2ae04:	2500      	movs	r5, #0
   2ae06:	4669      	mov	r1, sp
   2ae08:	3001      	adds	r0, #1
   2ae0a:	9500      	str	r5, [sp, #0]
   2ae0c:	f8cd 5003 	str.w	r5, [sp, #3]
   2ae10:	f7ff ffd6 	bl	2adc0 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2ae14:	f104 0008 	add.w	r0, r4, #8
   2ae18:	2201      	movs	r2, #1
   2ae1a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ae1c:	340c      	adds	r4, #12
   2ae1e:	f7fe fe27 	bl	29a70 <memset>
   2ae22:	f3bf 8f5b 	dmb	ish
   2ae26:	e854 3f00 	ldrex	r3, [r4]
   2ae2a:	e844 5200 	strex	r2, r5, [r4]
   2ae2e:	2a00      	cmp	r2, #0
   2ae30:	d1f9      	bne.n	2ae26 <clear_cf_cfg+0x26>
   2ae32:	f3bf 8f5b 	dmb	ish
}
   2ae36:	b003      	add	sp, #12
   2ae38:	bd30      	pop	{r4, r5, pc}

0002ae3a <ccc_find_cfg>:
{
   2ae3a:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2ae3c:	7803      	ldrb	r3, [r0, #0]
   2ae3e:	4293      	cmp	r3, r2
{
   2ae40:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2ae42:	d001      	beq.n	2ae48 <ccc_find_cfg+0xe>
	return NULL;
   2ae44:	2000      	movs	r0, #0
}
   2ae46:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2ae48:	2207      	movs	r2, #7
   2ae4a:	3001      	adds	r0, #1
   2ae4c:	f7fe fdde 	bl	29a0c <memcmp>
		if (id == ccc->cfg[i].id &&
   2ae50:	2800      	cmp	r0, #0
   2ae52:	d1f7      	bne.n	2ae44 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2ae54:	4620      	mov	r0, r4
   2ae56:	e7f6      	b.n	2ae46 <ccc_find_cfg+0xc>

0002ae58 <find_ccc_cfg>:
{
   2ae58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ae5a:	460c      	mov	r4, r1
   2ae5c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2ae5e:	b148      	cbz	r0, 2ae74 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2ae60:	7809      	ldrb	r1, [r1, #0]
   2ae62:	462a      	mov	r2, r5
   2ae64:	f7ff fa97 	bl	2a396 <bt_conn_is_peer_addr_le>
   2ae68:	2800      	cmp	r0, #0
	return NULL;
   2ae6a:	bf08      	it	eq
   2ae6c:	2400      	moveq	r4, #0
}
   2ae6e:	4620      	mov	r0, r4
   2ae70:	b003      	add	sp, #12
   2ae72:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2ae74:	9000      	str	r0, [sp, #0]
   2ae76:	2207      	movs	r2, #7
   2ae78:	f8cd 0003 	str.w	r0, [sp, #3]
   2ae7c:	4669      	mov	r1, sp
   2ae7e:	4628      	mov	r0, r5
   2ae80:	f7fe fdc4 	bl	29a0c <memcmp>
   2ae84:	2800      	cmp	r0, #0
	return NULL;
   2ae86:	bf18      	it	ne
   2ae88:	2400      	movne	r4, #0
   2ae8a:	e7f0      	b.n	2ae6e <find_ccc_cfg+0x16>

0002ae8c <sc_restore_rsp>:
{
   2ae8c:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2ae8e:	f7ef f983 	bl	1a198 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2ae92:	b140      	cbz	r0, 2aea6 <sc_restore_rsp+0x1a>
   2ae94:	7a03      	ldrb	r3, [r0, #8]
   2ae96:	07db      	lsls	r3, r3, #31
   2ae98:	d505      	bpl.n	2aea6 <sc_restore_rsp+0x1a>
}
   2ae9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ae9e:	2101      	movs	r1, #1
   2aea0:	300c      	adds	r0, #12
   2aea2:	f7ff bf7e 	b.w	2ada2 <atomic_or>
   2aea6:	bd08      	pop	{r3, pc}

0002aea8 <read_appearance>:
{
   2aea8:	b513      	push	{r0, r1, r4, lr}
   2aeaa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2aeae:	4610      	mov	r0, r2
	if (offset > value_len) {
   2aeb0:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2aeb2:	f240 3241 	movw	r2, #833	; 0x341
   2aeb6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2aeba:	d80d      	bhi.n	2aed8 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2aebc:	f1c1 0402 	rsb	r4, r1, #2
   2aec0:	429c      	cmp	r4, r3
   2aec2:	bfa8      	it	ge
   2aec4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2aec6:	f10d 0306 	add.w	r3, sp, #6
   2aeca:	4622      	mov	r2, r4
   2aecc:	4419      	add	r1, r3
   2aece:	f7fe fdc4 	bl	29a5a <memcpy>
}
   2aed2:	4620      	mov	r0, r4
   2aed4:	b002      	add	sp, #8
   2aed6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2aed8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2aedc:	e7f9      	b.n	2aed2 <read_appearance+0x2a>

0002aede <read_name>:
{
   2aede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aee2:	4698      	mov	r8, r3
   2aee4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2aee8:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2aeea:	f7eb fe5b 	bl	16ba4 <bt_get_name>
   2aeee:	4607      	mov	r7, r0
				 strlen(name));
   2aef0:	f7fe fd61 	bl	299b6 <strlen>
	if (offset > value_len) {
   2aef4:	b283      	uxth	r3, r0
   2aef6:	42b3      	cmp	r3, r6
   2aef8:	d30c      	bcc.n	2af14 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2aefa:	1b9c      	subs	r4, r3, r6
   2aefc:	4544      	cmp	r4, r8
   2aefe:	bfa8      	it	ge
   2af00:	4644      	movge	r4, r8
   2af02:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2af04:	4622      	mov	r2, r4
   2af06:	19b9      	adds	r1, r7, r6
   2af08:	4628      	mov	r0, r5
   2af0a:	f7fe fda6 	bl	29a5a <memcpy>
}
   2af0e:	4620      	mov	r0, r4
   2af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2af14:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2af18:	e7f9      	b.n	2af0e <read_name+0x30>

0002af1a <cf_read>:
{
   2af1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2af1c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2af1e:	2300      	movs	r3, #0
{
   2af20:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2af24:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2af28:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2af2a:	f7ef f935 	bl	1a198 <find_cf_cfg>
	if (cfg) {
   2af2e:	b128      	cbz	r0, 2af3c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2af30:	f100 0108 	add.w	r1, r0, #8
   2af34:	2201      	movs	r2, #1
   2af36:	a801      	add	r0, sp, #4
   2af38:	f7fe fd8f 	bl	29a5a <memcpy>
	if (offset > value_len) {
   2af3c:	2e01      	cmp	r6, #1
   2af3e:	d80d      	bhi.n	2af5c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2af40:	f1c6 0401 	rsb	r4, r6, #1
   2af44:	42bc      	cmp	r4, r7
   2af46:	bfa8      	it	ge
   2af48:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2af4a:	ab01      	add	r3, sp, #4
   2af4c:	4622      	mov	r2, r4
   2af4e:	1999      	adds	r1, r3, r6
   2af50:	4628      	mov	r0, r5
   2af52:	f7fe fd82 	bl	29a5a <memcpy>
}
   2af56:	4620      	mov	r0, r4
   2af58:	b003      	add	sp, #12
   2af5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2af5c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2af60:	e7f9      	b.n	2af56 <cf_read+0x3c>

0002af62 <bt_gatt_attr_read_ccc>:
{
   2af62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2af64:	68c9      	ldr	r1, [r1, #12]
{
   2af66:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2af6a:	4615      	mov	r5, r2
   2af6c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2af6e:	f7ff ff73 	bl	2ae58 <find_ccc_cfg>
	if (cfg) {
   2af72:	b100      	cbz	r0, 2af76 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2af74:	8900      	ldrh	r0, [r0, #8]
   2af76:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2af7a:	2e02      	cmp	r6, #2
   2af7c:	d80e      	bhi.n	2af9c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2af7e:	f1c6 0402 	rsb	r4, r6, #2
   2af82:	42bc      	cmp	r4, r7
   2af84:	bfa8      	it	ge
   2af86:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2af88:	f10d 0306 	add.w	r3, sp, #6
   2af8c:	4622      	mov	r2, r4
   2af8e:	1999      	adds	r1, r3, r6
   2af90:	4628      	mov	r0, r5
   2af92:	f7fe fd62 	bl	29a5a <memcpy>
}
   2af96:	4620      	mov	r0, r4
   2af98:	b003      	add	sp, #12
   2af9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2af9c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2afa0:	e7f9      	b.n	2af96 <bt_gatt_attr_read_ccc+0x34>

0002afa2 <bt_gatt_attr_read_service>:
{
   2afa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2afa4:	68c9      	ldr	r1, [r1, #12]
{
   2afa6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2afaa:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2afac:	780b      	ldrb	r3, [r1, #0]
{
   2afae:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2afb0:	b993      	cbnz	r3, 2afd8 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2afb2:	884b      	ldrh	r3, [r1, #2]
   2afb4:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2afb8:	2d02      	cmp	r5, #2
   2afba:	d819      	bhi.n	2aff0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2afbc:	f1c5 0202 	rsb	r2, r5, #2
   2afc0:	4294      	cmp	r4, r2
   2afc2:	bfa8      	it	ge
   2afc4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2afc6:	f10d 0306 	add.w	r3, sp, #6
   2afca:	4622      	mov	r2, r4
   2afcc:	1959      	adds	r1, r3, r5
   2afce:	f7fe fd44 	bl	29a5a <memcpy>
}
   2afd2:	4620      	mov	r0, r4
   2afd4:	b003      	add	sp, #12
   2afd6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2afd8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2afda:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2afde:	d807      	bhi.n	2aff0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2afe0:	f1c5 0210 	rsb	r2, r5, #16
   2afe4:	4294      	cmp	r4, r2
   2afe6:	bfa8      	it	ge
   2afe8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2afea:	4622      	mov	r2, r4
   2afec:	4429      	add	r1, r5
   2afee:	e7ee      	b.n	2afce <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2aff0:	f06f 0406 	mvn.w	r4, #6
   2aff4:	e7ed      	b.n	2afd2 <bt_gatt_attr_read_service+0x30>

0002aff6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2aff6:	2a02      	cmp	r2, #2
{
   2aff8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2affa:	d108      	bne.n	2b00e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2affc:	2300      	movs	r3, #0
   2affe:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2b002:	461a      	mov	r2, r3
   2b004:	7a00      	ldrb	r0, [r0, #8]
   2b006:	f7ee ffdd 	bl	19fc4 <sc_save>
}
   2b00a:	2002      	movs	r0, #2
   2b00c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2b00e:	f7ef fa3f 	bl	1a490 <sc_clear>
   2b012:	e7fa      	b.n	2b00a <sc_ccc_cfg_write+0x14>

0002b014 <bt_gatt_attr_value_handle>:
{
   2b014:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2b016:	4604      	mov	r4, r0
   2b018:	b910      	cbnz	r0, 2b020 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2b01a:	2000      	movs	r0, #0
}
   2b01c:	b002      	add	sp, #8
   2b01e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2b020:	2300      	movs	r3, #0
   2b022:	f88d 3004 	strb.w	r3, [sp, #4]
   2b026:	6800      	ldr	r0, [r0, #0]
   2b028:	f642 0303 	movw	r3, #10243	; 0x2803
   2b02c:	a901      	add	r1, sp, #4
   2b02e:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b032:	f7fe fde0 	bl	29bf6 <bt_uuid_cmp>
   2b036:	2800      	cmp	r0, #0
   2b038:	d1ef      	bne.n	2b01a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2b03a:	68e3      	ldr	r3, [r4, #12]
   2b03c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2b03e:	2800      	cmp	r0, #0
   2b040:	d1ec      	bne.n	2b01c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2b042:	4620      	mov	r0, r4
   2b044:	f7ef fb0a 	bl	1a65c <bt_gatt_attr_get_handle>
   2b048:	3001      	adds	r0, #1
   2b04a:	b280      	uxth	r0, r0
	return handle;
   2b04c:	e7e6      	b.n	2b01c <bt_gatt_attr_value_handle+0x8>

0002b04e <bt_gatt_attr_read_chrc>:
{
   2b04e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2b050:	68cf      	ldr	r7, [r1, #12]
{
   2b052:	b087      	sub	sp, #28
   2b054:	4608      	mov	r0, r1
   2b056:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2b058:	79bb      	ldrb	r3, [r7, #6]
   2b05a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2b05e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2b062:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2b064:	f7ff ffd6 	bl	2b014 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2b068:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2b06a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2b06e:	780b      	ldrb	r3, [r1, #0]
   2b070:	b99b      	cbnz	r3, 2b09a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2b072:	884b      	ldrh	r3, [r1, #2]
   2b074:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2b078:	2105      	movs	r1, #5
	if (offset > value_len) {
   2b07a:	42b1      	cmp	r1, r6
   2b07c:	d315      	bcc.n	2b0aa <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2b07e:	1b89      	subs	r1, r1, r6
   2b080:	42a1      	cmp	r1, r4
   2b082:	bfa8      	it	ge
   2b084:	4621      	movge	r1, r4
   2b086:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2b088:	ab01      	add	r3, sp, #4
   2b08a:	4622      	mov	r2, r4
   2b08c:	1999      	adds	r1, r3, r6
   2b08e:	4628      	mov	r0, r5
   2b090:	f7fe fce3 	bl	29a5a <memcpy>
}
   2b094:	4620      	mov	r0, r4
   2b096:	b007      	add	sp, #28
   2b098:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2b09a:	3101      	adds	r1, #1
   2b09c:	2210      	movs	r2, #16
   2b09e:	f10d 0007 	add.w	r0, sp, #7
   2b0a2:	f7fe fcda 	bl	29a5a <memcpy>
		value_len += 16U;
   2b0a6:	2113      	movs	r1, #19
   2b0a8:	e7e7      	b.n	2b07a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b0aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2b0ae:	e7f1      	b.n	2b094 <bt_gatt_attr_read_chrc+0x46>

0002b0b0 <bt_gatt_foreach_attr>:
{
   2b0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2b0b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2b0b6:	2300      	movs	r3, #0
   2b0b8:	9300      	str	r3, [sp, #0]
   2b0ba:	461a      	mov	r2, r3
   2b0bc:	f7ef fb1a 	bl	1a6f4 <bt_gatt_foreach_attr_type>
}
   2b0c0:	b005      	add	sp, #20
   2b0c2:	f85d fb04 	ldr.w	pc, [sp], #4

0002b0c6 <bt_gatt_check_perm>:
{
   2b0c6:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2b0c8:	07d4      	lsls	r4, r2, #31
{
   2b0ca:	4605      	mov	r5, r0
   2b0cc:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2b0ce:	d504      	bpl.n	2b0da <bt_gatt_check_perm+0x14>
   2b0d0:	f010 0f15 	tst.w	r0, #21
   2b0d4:	d01e      	beq.n	2b114 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2b0d6:	684b      	ldr	r3, [r1, #4]
   2b0d8:	b1e3      	cbz	r3, 2b114 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2b0da:	0793      	lsls	r3, r2, #30
   2b0dc:	d504      	bpl.n	2b0e8 <bt_gatt_check_perm+0x22>
   2b0de:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2b0e2:	d019      	beq.n	2b118 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2b0e4:	688b      	ldr	r3, [r1, #8]
   2b0e6:	b1bb      	cbz	r3, 2b118 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2b0e8:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2b0ec:	f014 0f30 	tst.w	r4, #48	; 0x30
   2b0f0:	d103      	bne.n	2b0fa <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2b0f2:	f014 000c 	ands.w	r0, r4, #12
   2b0f6:	d107      	bne.n	2b108 <bt_gatt_check_perm+0x42>
}
   2b0f8:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2b0fa:	4628      	mov	r0, r5
   2b0fc:	f7ff f949 	bl	2a392 <bt_conn_get_security>
   2b100:	2802      	cmp	r0, #2
   2b102:	d8f6      	bhi.n	2b0f2 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   2b104:	2005      	movs	r0, #5
   2b106:	e7f7      	b.n	2b0f8 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2b108:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2b10a:	2b00      	cmp	r3, #0
   2b10c:	bf14      	ite	ne
   2b10e:	2000      	movne	r0, #0
   2b110:	200f      	moveq	r0, #15
   2b112:	e7f1      	b.n	2b0f8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2b114:	2002      	movs	r0, #2
   2b116:	e7ef      	b.n	2b0f8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2b118:	2003      	movs	r0, #3
   2b11a:	e7ed      	b.n	2b0f8 <bt_gatt_check_perm+0x32>

0002b11c <bt_gatt_change_aware>:
{
   2b11c:	b538      	push	{r3, r4, r5, lr}
   2b11e:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2b120:	f7ef f83a 	bl	1a198 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2b124:	b910      	cbnz	r0, 2b12c <bt_gatt_change_aware+0x10>
		return true;
   2b126:	2501      	movs	r5, #1
}
   2b128:	4628      	mov	r0, r5
   2b12a:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2b12c:	7a03      	ldrb	r3, [r0, #8]
   2b12e:	07d9      	lsls	r1, r3, #31
   2b130:	d5f9      	bpl.n	2b126 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2b132:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b136:	4620      	mov	r0, r4
   2b138:	f7ff fdd7 	bl	2acea <atomic_get>
   2b13c:	07c2      	lsls	r2, r0, #31
   2b13e:	d4f2      	bmi.n	2b126 <bt_gatt_change_aware+0xa>
	if (!req) {
   2b140:	2d00      	cmp	r5, #0
   2b142:	d0f1      	beq.n	2b128 <bt_gatt_change_aware+0xc>
   2b144:	4620      	mov	r0, r4
   2b146:	f7ff fdd0 	bl	2acea <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2b14a:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b14c:	f3c0 0540 	ubfx	r5, r0, #1, #1
   2b150:	d509      	bpl.n	2b166 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b152:	f06f 0102 	mvn.w	r1, #2
   2b156:	4620      	mov	r0, r4
   2b158:	f7ff fe43 	bl	2ade2 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b15c:	2101      	movs	r1, #1
   2b15e:	4620      	mov	r0, r4
   2b160:	f7ff fe1f 	bl	2ada2 <atomic_or>
}
   2b164:	e7e0      	b.n	2b128 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b166:	2102      	movs	r1, #2
   2b168:	e7f9      	b.n	2b15e <bt_gatt_change_aware+0x42>

0002b16a <smp_pairing_rsp>:
}
   2b16a:	2007      	movs	r0, #7
   2b16c:	4770      	bx	lr

0002b16e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b16e:	2301      	movs	r3, #1
   2b170:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b172:	f3bf 8f5b 	dmb	ish
   2b176:	e850 2f00 	ldrex	r2, [r0]
   2b17a:	431a      	orrs	r2, r3
   2b17c:	e840 2100 	strex	r1, r2, [r0]
   2b180:	2900      	cmp	r1, #0
   2b182:	d1f8      	bne.n	2b176 <atomic_set_bit+0x8>
   2b184:	f3bf 8f5b 	dmb	ish
}
   2b188:	4770      	bx	lr

0002b18a <smp_keypress_notif>:
{
   2b18a:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2b18c:	210e      	movs	r1, #14
   2b18e:	f7ff ffee 	bl	2b16e <atomic_set_bit>
}
   2b192:	2000      	movs	r0, #0
   2b194:	bd08      	pop	{r3, pc}

0002b196 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b196:	2301      	movs	r3, #1
   2b198:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b19a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b19c:	f3bf 8f5b 	dmb	ish
   2b1a0:	e850 2f00 	ldrex	r2, [r0]
   2b1a4:	401a      	ands	r2, r3
   2b1a6:	e840 2100 	strex	r1, r2, [r0]
   2b1aa:	2900      	cmp	r1, #0
   2b1ac:	d1f8      	bne.n	2b1a0 <atomic_clear_bit+0xa>
   2b1ae:	f3bf 8f5b 	dmb	ish
}
   2b1b2:	4770      	bx	lr

0002b1b4 <bt_smp_aes_cmac>:
{
   2b1b4:	b570      	push	{r4, r5, r6, lr}
   2b1b6:	b0c2      	sub	sp, #264	; 0x108
   2b1b8:	460d      	mov	r5, r1
   2b1ba:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2b1bc:	4601      	mov	r1, r0
   2b1be:	aa16      	add	r2, sp, #88	; 0x58
   2b1c0:	4668      	mov	r0, sp
{
   2b1c2:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2b1c4:	f7fe fa86 	bl	296d4 <tc_cmac_setup>
   2b1c8:	b150      	cbz	r0, 2b1e0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2b1ca:	4632      	mov	r2, r6
   2b1cc:	4629      	mov	r1, r5
   2b1ce:	4668      	mov	r0, sp
   2b1d0:	f7fe faab 	bl	2972a <tc_cmac_update>
   2b1d4:	b120      	cbz	r0, 2b1e0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2b1d6:	4669      	mov	r1, sp
   2b1d8:	4620      	mov	r0, r4
   2b1da:	f7fe fb12 	bl	29802 <tc_cmac_final>
   2b1de:	b918      	cbnz	r0, 2b1e8 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2b1e0:	f06f 0004 	mvn.w	r0, #4
}
   2b1e4:	b042      	add	sp, #264	; 0x108
   2b1e6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2b1e8:	2000      	movs	r0, #0
   2b1ea:	e7fb      	b.n	2b1e4 <bt_smp_aes_cmac+0x30>

0002b1ec <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2b1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b1ee:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2b1f0:	2200      	movs	r2, #0
   2b1f2:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2b1f4:	4604      	mov	r4, r0
   2b1f6:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2b1f8:	460a      	mov	r2, r1
   2b1fa:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2b1fe:	2106      	movs	r1, #6
   2b200:	f7ff f981 	bl	2a506 <bt_l2cap_send_cb>
   2b204:	b128      	cbz	r0, 2b212 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   2b206:	4628      	mov	r0, r5
}
   2b208:	b003      	add	sp, #12
   2b20a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2b20e:	f7f2 b919 	b.w	1d444 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2b212:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b216:	2300      	movs	r3, #0
   2b218:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
}
   2b21c:	b003      	add	sp, #12
   2b21e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2b222:	f7f7 b8c7 	b.w	223b4 <k_work_reschedule>

0002b226 <smp_security_request>:
   2b226:	2007      	movs	r0, #7
   2b228:	4770      	bx	lr

0002b22a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2b22a:	b510      	push	{r4, lr}
   2b22c:	1e43      	subs	r3, r0, #1
   2b22e:	f100 0210 	add.w	r2, r0, #16
   2b232:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2b234:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2b238:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b23c:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2b23e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2b240:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2b242:	d1f7      	bne.n	2b234 <sys_mem_swap.constprop.0+0xa>
	}
}
   2b244:	bd10      	pop	{r4, pc}

0002b246 <smp_f6>:
{
   2b246:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b248:	b097      	sub	sp, #92	; 0x5c
   2b24a:	4605      	mov	r5, r0
   2b24c:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2b24e:	a805      	add	r0, sp, #20
   2b250:	2210      	movs	r2, #16
{
   2b252:	461c      	mov	r4, r3
   2b254:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2b256:	f7f0 f96f 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2b25a:	2210      	movs	r2, #16
   2b25c:	4631      	mov	r1, r6
   2b25e:	a809      	add	r0, sp, #36	; 0x24
   2b260:	f7f0 f96a 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2b264:	4621      	mov	r1, r4
   2b266:	2210      	movs	r2, #16
   2b268:	a80d      	add	r0, sp, #52	; 0x34
   2b26a:	f7f0 f965 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2b26e:	991c      	ldr	r1, [sp, #112]	; 0x70
   2b270:	2203      	movs	r2, #3
   2b272:	a811      	add	r0, sp, #68	; 0x44
   2b274:	f7f0 f960 	bl	1b538 <sys_memcpy_swap>
	m[51] = a1->type;
   2b278:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2b27a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b27e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2b282:	4621      	mov	r1, r4
   2b284:	2206      	movs	r2, #6
   2b286:	a812      	add	r0, sp, #72	; 0x48
   2b288:	f7fe fbe7 	bl	29a5a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2b28c:	4621      	mov	r1, r4
   2b28e:	2206      	movs	r2, #6
   2b290:	a812      	add	r0, sp, #72	; 0x48
   2b292:	f7f0 f951 	bl	1b538 <sys_memcpy_swap>
	m[58] = a2->type;
   2b296:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2b298:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b29c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2b2a0:	4621      	mov	r1, r4
   2b2a2:	2206      	movs	r2, #6
   2b2a4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2b2a8:	f7fe fbd7 	bl	29a5a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2b2ac:	4621      	mov	r1, r4
   2b2ae:	2206      	movs	r2, #6
   2b2b0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2b2b4:	f7f0 f940 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2b2b8:	2210      	movs	r2, #16
   2b2ba:	4629      	mov	r1, r5
   2b2bc:	a801      	add	r0, sp, #4
   2b2be:	f7f0 f93b 	bl	1b538 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2b2c2:	463b      	mov	r3, r7
   2b2c4:	2241      	movs	r2, #65	; 0x41
   2b2c6:	a905      	add	r1, sp, #20
   2b2c8:	a801      	add	r0, sp, #4
   2b2ca:	f7ff ff73 	bl	2b1b4 <bt_smp_aes_cmac>
	if (err) {
   2b2ce:	4604      	mov	r4, r0
   2b2d0:	b910      	cbnz	r0, 2b2d8 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   2b2d2:	4638      	mov	r0, r7
   2b2d4:	f7ff ffa9 	bl	2b22a <sys_mem_swap.constprop.0>
}
   2b2d8:	4620      	mov	r0, r4
   2b2da:	b017      	add	sp, #92	; 0x5c
   2b2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b2de <smp_f4>:
{
   2b2de:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b2e0:	b097      	sub	sp, #92	; 0x5c
   2b2e2:	4614      	mov	r4, r2
   2b2e4:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2b2e6:	2220      	movs	r2, #32
   2b2e8:	4601      	mov	r1, r0
   2b2ea:	a805      	add	r0, sp, #20
{
   2b2ec:	461d      	mov	r5, r3
   2b2ee:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2b2f0:	f7f0 f922 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2b2f4:	2220      	movs	r2, #32
   2b2f6:	4631      	mov	r1, r6
   2b2f8:	a80d      	add	r0, sp, #52	; 0x34
   2b2fa:	f7f0 f91d 	bl	1b538 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2b2fe:	4621      	mov	r1, r4
   2b300:	2210      	movs	r2, #16
   2b302:	a801      	add	r0, sp, #4
	m[64] = z;
   2b304:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2b308:	f7f0 f916 	bl	1b538 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2b30c:	463b      	mov	r3, r7
   2b30e:	2241      	movs	r2, #65	; 0x41
   2b310:	a905      	add	r1, sp, #20
   2b312:	a801      	add	r0, sp, #4
   2b314:	f7ff ff4e 	bl	2b1b4 <bt_smp_aes_cmac>
	if (err) {
   2b318:	4604      	mov	r4, r0
   2b31a:	b910      	cbnz	r0, 2b322 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   2b31c:	4638      	mov	r0, r7
   2b31e:	f7ff ff84 	bl	2b22a <sys_mem_swap.constprop.0>
}
   2b322:	4620      	mov	r0, r4
   2b324:	b017      	add	sp, #92	; 0x5c
   2b326:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b328 <smp_signing_info>:
   2b328:	2007      	movs	r0, #7
   2b32a:	4770      	bx	lr

0002b32c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b32c:	f3bf 8f5b 	dmb	ish
   2b330:	6800      	ldr	r0, [r0, #0]
   2b332:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b336:	4108      	asrs	r0, r1
}
   2b338:	f000 0001 	and.w	r0, r0, #1
   2b33c:	4770      	bx	lr

0002b33e <update_keys_check>:
{
   2b33e:	b510      	push	{r4, lr}
   2b340:	4603      	mov	r3, r0
	if (!keys ||
   2b342:	b1d9      	cbz	r1, 2b37c <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2b344:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2b346:	f010 0f24 	tst.w	r0, #36	; 0x24
   2b34a:	d017      	beq.n	2b37c <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2b34c:	7d1a      	ldrb	r2, [r3, #20]
   2b34e:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2b350:	7b09      	ldrb	r1, [r1, #12]
   2b352:	42a2      	cmp	r2, r4
   2b354:	bf28      	it	cs
   2b356:	4622      	movcs	r2, r4
   2b358:	4291      	cmp	r1, r2
   2b35a:	d901      	bls.n	2b360 <update_keys_check+0x22>
		return false;
   2b35c:	2000      	movs	r0, #0
}
   2b35e:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2b360:	0682      	lsls	r2, r0, #26
   2b362:	d404      	bmi.n	2b36e <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2b364:	7a18      	ldrb	r0, [r3, #8]
   2b366:	3800      	subs	r0, #0
   2b368:	bf18      	it	ne
   2b36a:	2001      	movne	r0, #1
   2b36c:	e7f7      	b.n	2b35e <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2b36e:	2105      	movs	r1, #5
   2b370:	1d18      	adds	r0, r3, #4
   2b372:	f7ff ffdb 	bl	2b32c <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2b376:	2800      	cmp	r0, #0
   2b378:	d1f4      	bne.n	2b364 <update_keys_check+0x26>
   2b37a:	e7ef      	b.n	2b35c <update_keys_check+0x1e>
		return true;
   2b37c:	2001      	movs	r0, #1
   2b37e:	e7ee      	b.n	2b35e <update_keys_check+0x20>

0002b380 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2b380:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2b382:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2b384:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2b386:	4628      	mov	r0, r5
   2b388:	2104      	movs	r1, #4
   2b38a:	f7ff ffcf 	bl	2b32c <atomic_test_bit>
   2b38e:	b168      	cbz	r0, 2b3ac <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   2b390:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2b392:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2b394:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2b396:	4608      	mov	r0, r1
   2b398:	f7ff f8b2 	bl	2a500 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2b39c:	4604      	mov	r4, r0
   2b39e:	b940      	cbnz	r0, 2b3b2 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2b3a0:	2104      	movs	r1, #4
   2b3a2:	4628      	mov	r0, r5
   2b3a4:	f7ff fee3 	bl	2b16e <atomic_set_bit>
}
   2b3a8:	4620      	mov	r0, r4
   2b3aa:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2b3ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b3b0:	e7ef      	b.n	2b392 <smp_create_pdu.isra.0+0x12>
   2b3b2:	2101      	movs	r1, #1
   2b3b4:	3008      	adds	r0, #8
   2b3b6:	f7f2 f975 	bl	1d6a4 <net_buf_simple_add>
	hdr->code = op;
   2b3ba:	7006      	strb	r6, [r0, #0]
	return buf;
   2b3bc:	e7f4      	b.n	2b3a8 <smp_create_pdu.isra.0+0x28>

0002b3be <smp_send_pairing_random>:
{
   2b3be:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2b3c0:	2104      	movs	r1, #4
{
   2b3c2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2b3c4:	f7ff ffdc 	bl	2b380 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2b3c8:	4604      	mov	r4, r0
   2b3ca:	b178      	cbz	r0, 2b3ec <smp_send_pairing_random+0x2e>
   2b3cc:	2110      	movs	r1, #16
   2b3ce:	3008      	adds	r0, #8
   2b3d0:	f7f2 f968 	bl	1d6a4 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2b3d4:	2210      	movs	r2, #16
   2b3d6:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2b3da:	f7fe fb3e 	bl	29a5a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2b3de:	4628      	mov	r0, r5
   2b3e0:	2200      	movs	r2, #0
   2b3e2:	4621      	mov	r1, r4
   2b3e4:	f7ff ff02 	bl	2b1ec <smp_send.isra.0>
	return 0;
   2b3e8:	2000      	movs	r0, #0
}
   2b3ea:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2b3ec:	2008      	movs	r0, #8
   2b3ee:	e7fc      	b.n	2b3ea <smp_send_pairing_random+0x2c>

0002b3f0 <send_pairing_rsp>:
{
   2b3f0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2b3f2:	2102      	movs	r1, #2
{
   2b3f4:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2b3f6:	f7ff ffc3 	bl	2b380 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2b3fa:	4604      	mov	r4, r0
   2b3fc:	b178      	cbz	r0, 2b41e <send_pairing_rsp+0x2e>
   2b3fe:	2106      	movs	r1, #6
   2b400:	3008      	adds	r0, #8
   2b402:	f7f2 f94f 	bl	1d6a4 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2b406:	2206      	movs	r2, #6
   2b408:	f105 0111 	add.w	r1, r5, #17
   2b40c:	f7fe fb25 	bl	29a5a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2b410:	4628      	mov	r0, r5
   2b412:	2200      	movs	r2, #0
   2b414:	4621      	mov	r1, r4
   2b416:	f7ff fee9 	bl	2b1ec <smp_send.isra.0>
	return 0;
   2b41a:	2000      	movs	r0, #0
}
   2b41c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2b41e:	2008      	movs	r0, #8
   2b420:	e7fc      	b.n	2b41c <send_pairing_rsp+0x2c>

0002b422 <smp_dhkey_check>:
{
   2b422:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   2b424:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2b428:	78db      	ldrb	r3, [r3, #3]
   2b42a:	2b01      	cmp	r3, #1
{
   2b42c:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   2b42e:	d114      	bne.n	2b45a <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2b430:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2b432:	1d05      	adds	r5, r0, #4
   2b434:	2110      	movs	r1, #16
   2b436:	4628      	mov	r0, r5
   2b438:	f7ff fead 	bl	2b196 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   2b43c:	4631      	mov	r1, r6
   2b43e:	2210      	movs	r2, #16
   2b440:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2b444:	f7fe fb09 	bl	29a5a <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2b448:	2107      	movs	r1, #7
   2b44a:	4628      	mov	r0, r5
   2b44c:	f7ff ff6e 	bl	2b32c <atomic_test_bit>
   2b450:	b128      	cbz	r0, 2b45e <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b452:	2109      	movs	r1, #9
   2b454:	4628      	mov	r0, r5
   2b456:	f7ff fe8a 	bl	2b16e <atomic_set_bit>
}
   2b45a:	2000      	movs	r0, #0
   2b45c:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b45e:	210a      	movs	r1, #10
   2b460:	4628      	mov	r0, r5
   2b462:	f7ff ff63 	bl	2b32c <atomic_test_bit>
   2b466:	2800      	cmp	r0, #0
   2b468:	d1f3      	bne.n	2b452 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   2b46a:	4620      	mov	r0, r4
}
   2b46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   2b470:	f7f0 b93e 	b.w	1b6f0 <compute_and_check_and_send_slave_dhcheck>

0002b474 <atomic_test_and_clear_bit>:
{
   2b474:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b476:	2301      	movs	r3, #1
   2b478:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b47c:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b47e:	f3bf 8f5b 	dmb	ish
   2b482:	e850 3f00 	ldrex	r3, [r0]
   2b486:	ea03 0c02 	and.w	ip, r3, r2
   2b48a:	e840 ce00 	strex	lr, ip, [r0]
   2b48e:	f1be 0f00 	cmp.w	lr, #0
   2b492:	d1f6      	bne.n	2b482 <atomic_test_and_clear_bit+0xe>
   2b494:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2b498:	420b      	tst	r3, r1
}
   2b49a:	bf14      	ite	ne
   2b49c:	2001      	movne	r0, #1
   2b49e:	2000      	moveq	r0, #0
   2b4a0:	f85d fb04 	ldr.w	pc, [sp], #4

0002b4a4 <smp_reset>:
{
   2b4a4:	b538      	push	{r3, r4, r5, lr}
   2b4a6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b4a8:	1d03      	adds	r3, r0, #4
   2b4aa:	2500      	movs	r5, #0
   2b4ac:	f3bf 8f5b 	dmb	ish
   2b4b0:	e853 2f00 	ldrex	r2, [r3]
   2b4b4:	e843 5100 	strex	r1, r5, [r3]
   2b4b8:	2900      	cmp	r1, #0
   2b4ba:	d1f9      	bne.n	2b4b0 <smp_reset+0xc>
   2b4bc:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2b4c0:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   2b4c4:	f7f6 ff7c 	bl	223c0 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2b4c8:	7225      	strb	r5, [r4, #8]
   2b4ca:	f3bf 8f5b 	dmb	ish
   2b4ce:	e854 3f00 	ldrex	r3, [r4]
   2b4d2:	e844 5200 	strex	r2, r5, [r4]
   2b4d6:	2a00      	cmp	r2, #0
   2b4d8:	d1f9      	bne.n	2b4ce <smp_reset+0x2a>
   2b4da:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2b4de:	4620      	mov	r0, r4
   2b4e0:	2101      	movs	r1, #1
}
   2b4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2b4e6:	f7ff be42 	b.w	2b16e <atomic_set_bit>

0002b4ea <smp_c1>:
{
   2b4ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b4ee:	b089      	sub	sp, #36	; 0x24
   2b4f0:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2b4f4:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2b4f6:	783b      	ldrb	r3, [r7, #0]
{
   2b4f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2b4fa:	f88d 3000 	strb.w	r3, [sp]
{
   2b4fe:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2b500:	f898 3000 	ldrb.w	r3, [r8]
   2b504:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2b508:	4611      	mov	r1, r2
   2b50a:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2b50c:	2207      	movs	r2, #7
   2b50e:	f10d 0002 	add.w	r0, sp, #2
   2b512:	f7fe faa2 	bl	29a5a <memcpy>
	memcpy(p1 + 9, pres, 7);
   2b516:	2207      	movs	r2, #7
   2b518:	4649      	mov	r1, r9
   2b51a:	f10d 0009 	add.w	r0, sp, #9
   2b51e:	f7fe fa9c 	bl	29a5a <memcpy>
	while (len--) {
   2b522:	f104 0010 	add.w	r0, r4, #16
   2b526:	4629      	mov	r1, r5
   2b528:	466a      	mov	r2, sp
   2b52a:	4284      	cmp	r4, r0
   2b52c:	d127      	bne.n	2b57e <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2b52e:	462a      	mov	r2, r5
   2b530:	4629      	mov	r1, r5
   2b532:	4630      	mov	r0, r6
   2b534:	f000 ff49 	bl	2c3ca <bt_encrypt_le>
	if (err) {
   2b538:	4604      	mov	r4, r0
   2b53a:	b9e0      	cbnz	r0, 2b576 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2b53c:	2206      	movs	r2, #6
   2b53e:	f108 0101 	add.w	r1, r8, #1
   2b542:	a804      	add	r0, sp, #16
   2b544:	f7fe fa89 	bl	29a5a <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2b548:	2206      	movs	r2, #6
   2b54a:	1c79      	adds	r1, r7, #1
   2b54c:	f10d 0016 	add.w	r0, sp, #22
   2b550:	f7fe fa83 	bl	29a5a <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2b554:	2204      	movs	r2, #4
   2b556:	4621      	mov	r1, r4
   2b558:	a807      	add	r0, sp, #28
   2b55a:	f7fe fa89 	bl	29a70 <memset>
	while (len--) {
   2b55e:	f105 0010 	add.w	r0, r5, #16
   2b562:	462a      	mov	r2, r5
   2b564:	ab04      	add	r3, sp, #16
   2b566:	4282      	cmp	r2, r0
   2b568:	d112      	bne.n	2b590 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2b56a:	462a      	mov	r2, r5
   2b56c:	4629      	mov	r1, r5
   2b56e:	4630      	mov	r0, r6
   2b570:	f000 ff2b 	bl	2c3ca <bt_encrypt_le>
   2b574:	4604      	mov	r4, r0
}
   2b576:	4620      	mov	r0, r4
   2b578:	b009      	add	sp, #36	; 0x24
   2b57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2b57e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b582:	f812 cb01 	ldrb.w	ip, [r2], #1
   2b586:	ea83 030c 	eor.w	r3, r3, ip
   2b58a:	f801 3b01 	strb.w	r3, [r1], #1
   2b58e:	e7cc      	b.n	2b52a <smp_c1+0x40>
   2b590:	f812 1b01 	ldrb.w	r1, [r2], #1
   2b594:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b598:	4061      	eors	r1, r4
   2b59a:	f802 1c01 	strb.w	r1, [r2, #-1]
   2b59e:	e7e2      	b.n	2b566 <smp_c1+0x7c>

0002b5a0 <legacy_pairing_confirm>:
{
   2b5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b5a2:	1d07      	adds	r7, r0, #4
{
   2b5a4:	b085      	sub	sp, #20
   2b5a6:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b5a8:	210a      	movs	r1, #10
   2b5aa:	4638      	mov	r0, r7
   2b5ac:	f7ff febe 	bl	2b32c <atomic_test_bit>
   2b5b0:	bb88      	cbnz	r0, 2b616 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2b5b2:	2104      	movs	r1, #4
   2b5b4:	4628      	mov	r0, r5
   2b5b6:	f7ff fdda 	bl	2b16e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2b5ba:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2b5bc:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2b5c0:	f7ff fede 	bl	2b380 <smp_create_pdu.isra.0>
	if (!buf) {
   2b5c4:	4606      	mov	r6, r0
   2b5c6:	b1c0      	cbz	r0, 2b5fa <legacy_pairing_confirm+0x5a>
   2b5c8:	2110      	movs	r1, #16
   2b5ca:	3008      	adds	r0, #8
   2b5cc:	f7f2 f86a 	bl	1d6a4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2b5d0:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   2b5d4:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2b5d6:	9002      	str	r0, [sp, #8]
   2b5d8:	9301      	str	r3, [sp, #4]
   2b5da:	9400      	str	r4, [sp, #0]
   2b5dc:	f105 0310 	add.w	r3, r5, #16
   2b5e0:	f105 0209 	add.w	r2, r5, #9
   2b5e4:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2b5e8:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2b5ec:	f7ff ff7d 	bl	2b4ea <smp_c1>
   2b5f0:	4604      	mov	r4, r0
   2b5f2:	b120      	cbz	r0, 2b5fe <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2b5f4:	4630      	mov	r0, r6
   2b5f6:	f7f1 ff25 	bl	1d444 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2b5fa:	2008      	movs	r0, #8
   2b5fc:	e009      	b.n	2b612 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   2b5fe:	4602      	mov	r2, r0
   2b600:	4631      	mov	r1, r6
   2b602:	4628      	mov	r0, r5
   2b604:	f7ff fdf2 	bl	2b1ec <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2b608:	4621      	mov	r1, r4
   2b60a:	4638      	mov	r0, r7
   2b60c:	f7ff fdc3 	bl	2b196 <atomic_clear_bit>
	return 0;
   2b610:	2000      	movs	r0, #0
}
   2b612:	b005      	add	sp, #20
   2b614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2b616:	2100      	movs	r1, #0
   2b618:	4638      	mov	r0, r7
   2b61a:	f7ff fda8 	bl	2b16e <atomic_set_bit>
   2b61e:	e7f7      	b.n	2b610 <legacy_pairing_confirm+0x70>

0002b620 <bt_smp_request_ltk>:
{
   2b620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b624:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2b628:	e9cd 2300 	strd	r2, r3, [sp]
   2b62c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2b62e:	f7ef fff5 	bl	1b61c <smp_chan_get>
	if (!smp) {
   2b632:	4605      	mov	r5, r0
   2b634:	2800      	cmp	r0, #0
   2b636:	f000 8090 	beq.w	2b75a <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2b63a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   2b63e:	1d07      	adds	r7, r0, #4
   2b640:	f1b9 0f00 	cmp.w	r9, #0
   2b644:	d12a      	bne.n	2b69c <bt_smp_request_ltk+0x7c>
   2b646:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b64a:	4313      	orrs	r3, r2
   2b64c:	d126      	bne.n	2b69c <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2b64e:	2103      	movs	r1, #3
   2b650:	4638      	mov	r0, r7
   2b652:	f7ff fe6b 	bl	2b32c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2b656:	b308      	cbz	r0, 2b69c <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2b658:	2101      	movs	r1, #1
   2b65a:	4638      	mov	r0, r7
   2b65c:	f7ff fe66 	bl	2b32c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2b660:	4606      	mov	r6, r0
   2b662:	b1d8      	cbz	r0, 2b69c <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2b664:	7d2c      	ldrb	r4, [r5, #20]
   2b666:	7b6b      	ldrb	r3, [r5, #13]
   2b668:	429c      	cmp	r4, r3
   2b66a:	bf28      	it	cs
   2b66c:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2b66e:	4622      	mov	r2, r4
   2b670:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2b674:	4640      	mov	r0, r8
   2b676:	f7fe f9f0 	bl	29a5a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2b67a:	2c0f      	cmp	r4, #15
   2b67c:	d806      	bhi.n	2b68c <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2b67e:	f1c4 0210 	rsb	r2, r4, #16
   2b682:	4649      	mov	r1, r9
   2b684:	eb08 0004 	add.w	r0, r8, r4
   2b688:	f7fe f9f2 	bl	29a70 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2b68c:	2101      	movs	r1, #1
   2b68e:	4638      	mov	r0, r7
   2b690:	f7ff fd6d 	bl	2b16e <atomic_set_bit>
}
   2b694:	4630      	mov	r0, r6
   2b696:	b003      	add	sp, #12
   2b698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2b69c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2b6a0:	b983      	cbnz	r3, 2b6c4 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2b6a2:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2b6a6:	7a21      	ldrb	r1, [r4, #8]
   2b6a8:	4632      	mov	r2, r6
   2b6aa:	2020      	movs	r0, #32
   2b6ac:	f7f1 fbce 	bl	1ce4c <bt_keys_find>
   2b6b0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2b6b4:	b930      	cbnz	r0, 2b6c4 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   2b6b6:	7a21      	ldrb	r1, [r4, #8]
   2b6b8:	4632      	mov	r2, r6
   2b6ba:	2001      	movs	r0, #1
   2b6bc:	f7f1 fbc6 	bl	1ce4c <bt_keys_find>
   2b6c0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2b6c4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   2b6c8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2b6cc:	b9ee      	cbnz	r6, 2b70a <bt_smp_request_ltk+0xea>
   2b6ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b6d2:	4313      	orrs	r3, r2
   2b6d4:	d119      	bne.n	2b70a <bt_smp_request_ltk+0xea>
   2b6d6:	b388      	cbz	r0, 2b73c <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2b6d8:	89c3      	ldrh	r3, [r0, #14]
   2b6da:	069a      	lsls	r2, r3, #26
   2b6dc:	d516      	bpl.n	2b70c <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2b6de:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2b6e0:	f100 011a 	add.w	r1, r0, #26
   2b6e4:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2b6e6:	4640      	mov	r0, r8
   2b6e8:	f7fe f9b7 	bl	29a5a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2b6ec:	2c0f      	cmp	r4, #15
   2b6ee:	d806      	bhi.n	2b6fe <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   2b6f0:	f1c4 0210 	rsb	r2, r4, #16
   2b6f4:	4631      	mov	r1, r6
   2b6f6:	eb08 0004 	add.w	r0, r8, r4
   2b6fa:	f7fe f9b9 	bl	29a70 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2b6fe:	2101      	movs	r1, #1
   2b700:	4638      	mov	r0, r7
   2b702:	f7ff fd34 	bl	2b16e <atomic_set_bit>
		return true;
   2b706:	2601      	movs	r6, #1
   2b708:	e7c4      	b.n	2b694 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2b70a:	b1b8      	cbz	r0, 2b73c <bt_smp_request_ltk+0x11c>
   2b70c:	89c3      	ldrh	r3, [r0, #14]
   2b70e:	07db      	lsls	r3, r3, #31
   2b710:	d514      	bpl.n	2b73c <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2b712:	2208      	movs	r2, #8
   2b714:	4669      	mov	r1, sp
   2b716:	3040      	adds	r0, #64	; 0x40
   2b718:	f7fe f978 	bl	29a0c <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2b71c:	b970      	cbnz	r0, 2b73c <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   2b71e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2b722:	2202      	movs	r2, #2
   2b724:	a90a      	add	r1, sp, #40	; 0x28
   2b726:	3048      	adds	r0, #72	; 0x48
   2b728:	f7fe f970 	bl	29a0c <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2b72c:	4606      	mov	r6, r0
   2b72e:	b928      	cbnz	r0, 2b73c <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2b730:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2b734:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2b736:	314a      	adds	r1, #74	; 0x4a
   2b738:	4622      	mov	r2, r4
   2b73a:	e7d4      	b.n	2b6e6 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2b73c:	210f      	movs	r1, #15
   2b73e:	4638      	mov	r0, r7
   2b740:	f7ff fdf4 	bl	2b32c <atomic_test_bit>
   2b744:	b120      	cbz	r0, 2b750 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2b746:	2202      	movs	r2, #2
   2b748:	2106      	movs	r1, #6
   2b74a:	4620      	mov	r0, r4
   2b74c:	f7ec fde0 	bl	18310 <bt_conn_security_changed>
	smp_reset(smp);
   2b750:	4628      	mov	r0, r5
   2b752:	f7ff fea7 	bl	2b4a4 <smp_reset>
	return false;
   2b756:	2600      	movs	r6, #0
   2b758:	e79c      	b.n	2b694 <bt_smp_request_ltk+0x74>
		return false;
   2b75a:	4606      	mov	r6, r0
   2b75c:	e79a      	b.n	2b694 <bt_smp_request_ltk+0x74>

0002b75e <bt_smp_sign>:
   2b75e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b762:	4770      	bx	lr

0002b764 <bt_smp_auth_pairing_confirm>:
{
   2b764:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   2b766:	f7ef ff59 	bl	1b61c <smp_chan_get>
	if (!smp) {
   2b76a:	4604      	mov	r4, r0
   2b76c:	b910      	cbnz	r0, 2b774 <bt_smp_auth_pairing_confirm+0x10>
		return -EINVAL;
   2b76e:	f06f 0015 	mvn.w	r0, #21
}
   2b772:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   2b774:	1d05      	adds	r5, r0, #4
   2b776:	210a      	movs	r1, #10
   2b778:	4628      	mov	r0, r5
   2b77a:	f7ff fe7b 	bl	2b474 <atomic_test_and_clear_bit>
   2b77e:	2800      	cmp	r0, #0
   2b780:	d0f5      	beq.n	2b76e <bt_smp_auth_pairing_confirm+0xa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2b782:	2105      	movs	r1, #5
   2b784:	4628      	mov	r0, r5
   2b786:	f7ff fdd1 	bl	2b32c <atomic_test_bit>
   2b78a:	b930      	cbnz	r0, 2b79a <bt_smp_auth_pairing_confirm+0x36>
		atomic_set_bit(smp->allowed_cmds,
   2b78c:	2103      	movs	r1, #3
   2b78e:	4620      	mov	r0, r4
   2b790:	f7ff fced 	bl	2b16e <atomic_set_bit>
		return send_pairing_rsp(smp);
   2b794:	f7ff fe2c 	bl	2b3f0 <send_pairing_rsp>
   2b798:	e7eb      	b.n	2b772 <bt_smp_auth_pairing_confirm+0xe>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   2b79a:	210c      	movs	r1, #12
   2b79c:	4620      	mov	r0, r4
   2b79e:	f7ff fce6 	bl	2b16e <atomic_set_bit>
	if (send_pairing_rsp(smp)) {
   2b7a2:	f7ff fe25 	bl	2b3f0 <send_pairing_rsp>
		return -EIO;
   2b7a6:	2800      	cmp	r0, #0
   2b7a8:	bf0c      	ite	eq
   2b7aa:	2000      	moveq	r0, #0
   2b7ac:	f06f 0004 	mvnne.w	r0, #4
   2b7b0:	e7df      	b.n	2b772 <bt_smp_auth_pairing_confirm+0xe>

0002b7b2 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b7b2:	1d03      	adds	r3, r0, #4
{
   2b7b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b7b6:	4605      	mov	r5, r0
   2b7b8:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b7ba:	4618      	mov	r0, r3
   2b7bc:	2103      	movs	r1, #3
   2b7be:	f7ff fdb5 	bl	2b32c <atomic_test_bit>
   2b7c2:	b1f0      	cbz	r0, 2b802 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2b7c4:	4631      	mov	r1, r6
   2b7c6:	4628      	mov	r0, r5
   2b7c8:	f7f0 fe74 	bl	1c4b4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2b7cc:	2105      	movs	r1, #5
   2b7ce:	4628      	mov	r0, r5
   2b7d0:	f7ff fdd6 	bl	2b380 <smp_create_pdu.isra.0>
	if (!buf) {
   2b7d4:	4604      	mov	r4, r0
   2b7d6:	b308      	cbz	r0, 2b81c <smp_error+0x6a>
   2b7d8:	2101      	movs	r1, #1
   2b7da:	3008      	adds	r0, #8
   2b7dc:	f7f1 ff62 	bl	1d6a4 <net_buf_simple_add>
	rsp->reason = reason;
   2b7e0:	7006      	strb	r6, [r0, #0]
   2b7e2:	2600      	movs	r6, #0
   2b7e4:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2b7e8:	9600      	str	r6, [sp, #0]
   2b7ea:	4633      	mov	r3, r6
   2b7ec:	4622      	mov	r2, r4
   2b7ee:	2106      	movs	r1, #6
   2b7f0:	f7fe fe89 	bl	2a506 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2b7f4:	b118      	cbz	r0, 2b7fe <smp_error+0x4c>
		net_buf_unref(buf);
   2b7f6:	4620      	mov	r0, r4
   2b7f8:	f7f1 fe24 	bl	1d444 <net_buf_unref>
	return 0;
   2b7fc:	4630      	mov	r0, r6
}
   2b7fe:	b002      	add	sp, #8
   2b800:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b802:	2101      	movs	r1, #1
   2b804:	4618      	mov	r0, r3
   2b806:	f7ff fd91 	bl	2b32c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b80a:	2800      	cmp	r0, #0
   2b80c:	d1da      	bne.n	2b7c4 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2b80e:	210f      	movs	r1, #15
   2b810:	4618      	mov	r0, r3
   2b812:	f7ff fd8b 	bl	2b32c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b816:	2800      	cmp	r0, #0
   2b818:	d1d4      	bne.n	2b7c4 <smp_error+0x12>
   2b81a:	e7d7      	b.n	2b7cc <smp_error+0x1a>
		return -ENOBUFS;
   2b81c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b820:	e7ed      	b.n	2b7fe <smp_error+0x4c>

0002b822 <bt_smp_auth_passkey_confirm>:
{
   2b822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	smp = smp_chan_get(conn);
   2b824:	f7ef fefa 	bl	1b61c <smp_chan_get>
	if (!smp) {
   2b828:	4605      	mov	r5, r0
   2b82a:	b910      	cbnz	r0, 2b832 <bt_smp_auth_passkey_confirm+0x10>
		return -EINVAL;
   2b82c:	f06f 0015 	mvn.w	r0, #21
}
   2b830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   2b832:	1d06      	adds	r6, r0, #4
   2b834:	210a      	movs	r1, #10
   2b836:	4630      	mov	r0, r6
   2b838:	f7ff fe1c 	bl	2b474 <atomic_test_and_clear_bit>
   2b83c:	2800      	cmp	r0, #0
   2b83e:	d0f5      	beq.n	2b82c <bt_smp_auth_passkey_confirm+0xa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2b840:	2107      	movs	r1, #7
   2b842:	4630      	mov	r0, r6
   2b844:	f7ff fd72 	bl	2b32c <atomic_test_bit>
   2b848:	b128      	cbz	r0, 2b856 <bt_smp_auth_passkey_confirm+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b84a:	2109      	movs	r1, #9
   2b84c:	4630      	mov	r0, r6
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b84e:	f7ff fc8e 	bl	2b16e <atomic_set_bit>
	return 0;
   2b852:	2000      	movs	r0, #0
   2b854:	e7ec      	b.n	2b830 <bt_smp_auth_passkey_confirm+0xe>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b856:	2110      	movs	r1, #16
   2b858:	4630      	mov	r0, r6
   2b85a:	f7ff fd67 	bl	2b32c <atomic_test_bit>
   2b85e:	4604      	mov	r4, r0
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b860:	2109      	movs	r1, #9
   2b862:	4630      	mov	r0, r6
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b864:	2c00      	cmp	r4, #0
   2b866:	d1f2      	bne.n	2b84e <bt_smp_auth_passkey_confirm+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2b868:	f7ff fd60 	bl	2b32c <atomic_test_bit>
   2b86c:	2800      	cmp	r0, #0
   2b86e:	d0f0      	beq.n	2b852 <bt_smp_auth_passkey_confirm+0x30>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   2b870:	4628      	mov	r0, r5
   2b872:	f7ef ff3d 	bl	1b6f0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   2b876:	4601      	mov	r1, r0
   2b878:	2800      	cmp	r0, #0
   2b87a:	d0ea      	beq.n	2b852 <bt_smp_auth_passkey_confirm+0x30>
			smp_error(smp, err);
   2b87c:	4628      	mov	r0, r5
   2b87e:	f7ff ff98 	bl	2b7b2 <smp_error>
	return 0;
   2b882:	4620      	mov	r0, r4
   2b884:	e7d4      	b.n	2b830 <bt_smp_auth_passkey_confirm+0xe>

0002b886 <bt_smp_dhkey_ready>:
{
   2b886:	b570      	push	{r4, r5, r6, lr}
   2b888:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2b88a:	2008      	movs	r0, #8
   2b88c:	f7ef ff22 	bl	1b6d4 <smp_find>
	if (smp) {
   2b890:	4604      	mov	r4, r0
   2b892:	b1b8      	cbz	r0, 2b8c4 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2b894:	1d05      	adds	r5, r0, #4
   2b896:	2108      	movs	r1, #8
   2b898:	4628      	mov	r0, r5
   2b89a:	f7ff fc7c 	bl	2b196 <atomic_clear_bit>
	if (!dhkey) {
   2b89e:	b38e      	cbz	r6, 2b904 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2b8a0:	2107      	movs	r1, #7
   2b8a2:	f7ff fc78 	bl	2b196 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2b8a6:	4631      	mov	r1, r6
   2b8a8:	2220      	movs	r2, #32
   2b8aa:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2b8ae:	f7fe f8d4 	bl	29a5a <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b8b2:	210a      	movs	r1, #10
   2b8b4:	4628      	mov	r0, r5
   2b8b6:	f7ff fd39 	bl	2b32c <atomic_test_bit>
   2b8ba:	b168      	cbz	r0, 2b8d8 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b8bc:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b8be:	4628      	mov	r0, r5
   2b8c0:	f7ff fc55 	bl	2b16e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2b8c4:	2007      	movs	r0, #7
   2b8c6:	f7ef ff05 	bl	1b6d4 <smp_find>
		if (smp) {
   2b8ca:	4604      	mov	r4, r0
   2b8cc:	b118      	cbz	r0, 2b8d6 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2b8ce:	f7ef fe61 	bl	1b594 <smp_dhkey_generate>
			if (err) {
   2b8d2:	4601      	mov	r1, r0
   2b8d4:	b990      	cbnz	r0, 2b8fc <bt_smp_dhkey_ready+0x76>
}
   2b8d6:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b8d8:	2110      	movs	r1, #16
   2b8da:	4628      	mov	r0, r5
   2b8dc:	f7ff fd26 	bl	2b32c <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b8e0:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b8e2:	2800      	cmp	r0, #0
   2b8e4:	d1eb      	bne.n	2b8be <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2b8e6:	4628      	mov	r0, r5
   2b8e8:	f7ff fd20 	bl	2b32c <atomic_test_bit>
   2b8ec:	2800      	cmp	r0, #0
   2b8ee:	d0e9      	beq.n	2b8c4 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   2b8f0:	4620      	mov	r0, r4
   2b8f2:	f7ef fefd 	bl	1b6f0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   2b8f6:	4601      	mov	r1, r0
   2b8f8:	2800      	cmp	r0, #0
   2b8fa:	d0e3      	beq.n	2b8c4 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2b8fc:	4620      	mov	r0, r4
   2b8fe:	f7ff ff58 	bl	2b7b2 <smp_error>
   2b902:	e7df      	b.n	2b8c4 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2b904:	210b      	movs	r1, #11
   2b906:	e7f9      	b.n	2b8fc <bt_smp_dhkey_ready+0x76>

0002b908 <bt_smp_disconnected>:
{
   2b908:	b570      	push	{r4, r5, r6, lr}
   2b90a:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2b90c:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2b910:	f850 3bf0 	ldr.w	r3, [r0], #240
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b914:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2b916:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2b91a:	f7f6 fd51 	bl	223c0 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b91e:	2103      	movs	r1, #3
   2b920:	4620      	mov	r0, r4
   2b922:	f7ff fd03 	bl	2b32c <atomic_test_bit>
   2b926:	b1a0      	cbz	r0, 2b952 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2b928:	2108      	movs	r1, #8
   2b92a:	4630      	mov	r0, r6
   2b92c:	f7f0 fdc2 	bl	1c4b4 <smp_pairing_complete>
	if (keys) {
   2b930:	b13d      	cbz	r5, 2b942 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2b932:	89eb      	ldrh	r3, [r5, #14]
   2b934:	b113      	cbz	r3, 2b93c <bt_smp_disconnected+0x34>
   2b936:	7b6b      	ldrb	r3, [r5, #13]
   2b938:	079b      	lsls	r3, r3, #30
   2b93a:	d502      	bpl.n	2b942 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2b93c:	4628      	mov	r0, r5
   2b93e:	f7f1 fae5 	bl	1cf0c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2b942:	4630      	mov	r0, r6
   2b944:	f44f 7204 	mov.w	r2, #528	; 0x210
}
   2b948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2b94c:	2100      	movs	r1, #0
   2b94e:	f7fe b88f 	b.w	29a70 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b952:	2101      	movs	r1, #1
   2b954:	4620      	mov	r0, r4
   2b956:	f7ff fce9 	bl	2b32c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b95a:	2800      	cmp	r0, #0
   2b95c:	d1e4      	bne.n	2b928 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2b95e:	210f      	movs	r1, #15
   2b960:	4620      	mov	r0, r4
   2b962:	f7ff fce3 	bl	2b32c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b966:	2800      	cmp	r0, #0
   2b968:	d1de      	bne.n	2b928 <bt_smp_disconnected+0x20>
   2b96a:	e7e1      	b.n	2b930 <bt_smp_disconnected+0x28>

0002b96c <id_add>:
	bt_id_add(keys);
   2b96c:	f7eb b9b4 	b.w	16cd8 <bt_id_add>

0002b970 <bt_keys_get_type>:
{
   2b970:	b570      	push	{r4, r5, r6, lr}
   2b972:	4604      	mov	r4, r0
   2b974:	460d      	mov	r5, r1
   2b976:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2b978:	f7f1 fa68 	bl	1ce4c <bt_keys_find>
	if (keys) {
   2b97c:	b938      	cbnz	r0, 2b98e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2b97e:	4631      	mov	r1, r6
   2b980:	4628      	mov	r0, r5
   2b982:	f7f1 fa23 	bl	1cdcc <bt_keys_get_addr>
	if (!keys) {
   2b986:	b110      	cbz	r0, 2b98e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2b988:	89c3      	ldrh	r3, [r0, #14]
   2b98a:	431c      	orrs	r4, r3
   2b98c:	81c4      	strh	r4, [r0, #14]
}
   2b98e:	bd70      	pop	{r4, r5, r6, pc}

0002b990 <bt_keys_add_type>:
	keys->keys |= type;
   2b990:	89c3      	ldrh	r3, [r0, #14]
   2b992:	4319      	orrs	r1, r3
   2b994:	81c1      	strh	r1, [r0, #14]
}
   2b996:	4770      	bx	lr

0002b998 <fixed_data_unref>:
}
   2b998:	4770      	bx	lr

0002b99a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2b99a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2b99c:	6849      	ldr	r1, [r1, #4]
   2b99e:	6809      	ldr	r1, [r1, #0]
   2b9a0:	f7f1 bc08 	b.w	1d1b4 <net_buf_alloc_len>

0002b9a4 <net_buf_simple_pull_le16>:
{
   2b9a4:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2b9a6:	6803      	ldr	r3, [r0, #0]
   2b9a8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2b9aa:	2102      	movs	r1, #2
   2b9ac:	f7f1 fe38 	bl	1d620 <net_buf_simple_pull>
}
   2b9b0:	4620      	mov	r0, r4
   2b9b2:	bd10      	pop	{r4, pc}

0002b9b4 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2b9b4:	6802      	ldr	r2, [r0, #0]
   2b9b6:	6880      	ldr	r0, [r0, #8]
}
   2b9b8:	1a10      	subs	r0, r2, r0
   2b9ba:	4770      	bx	lr

0002b9bc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2b9bc:	8883      	ldrh	r3, [r0, #4]
   2b9be:	88c2      	ldrh	r2, [r0, #6]
   2b9c0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2b9c2:	6803      	ldr	r3, [r0, #0]
   2b9c4:	6880      	ldr	r0, [r0, #8]
   2b9c6:	1a18      	subs	r0, r3, r0
}
   2b9c8:	1a10      	subs	r0, r2, r0
   2b9ca:	4770      	bx	lr

0002b9cc <net_buf_simple_add_mem>:
{
   2b9cc:	b538      	push	{r3, r4, r5, lr}
   2b9ce:	460d      	mov	r5, r1
   2b9d0:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2b9d2:	4611      	mov	r1, r2
   2b9d4:	f7f1 fe66 	bl	1d6a4 <net_buf_simple_add>
   2b9d8:	4622      	mov	r2, r4
   2b9da:	4629      	mov	r1, r5
}
   2b9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2b9e0:	f7fe b83b 	b.w	29a5a <memcpy>

0002b9e4 <net_buf_simple_add_u8>:
{
   2b9e4:	b510      	push	{r4, lr}
   2b9e6:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2b9e8:	2101      	movs	r1, #1
   2b9ea:	f7f1 fe5b 	bl	1d6a4 <net_buf_simple_add>
	*u8 = val;
   2b9ee:	7004      	strb	r4, [r0, #0]
}
   2b9f0:	bd10      	pop	{r4, pc}

0002b9f2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b9f2:	6843      	ldr	r3, [r0, #4]
   2b9f4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2b9f6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2b9fa:	600b      	str	r3, [r1, #0]
}
   2b9fc:	2000      	movs	r0, #0
   2b9fe:	4770      	bx	lr

0002ba00 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ba00:	6843      	ldr	r3, [r0, #4]
   2ba02:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2ba04:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2ba08:	4042      	eors	r2, r0
   2ba0a:	400a      	ands	r2, r1
   2ba0c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2ba0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2ba12:	2000      	movs	r0, #0
   2ba14:	4770      	bx	lr

0002ba16 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ba16:	6843      	ldr	r3, [r0, #4]
   2ba18:	685b      	ldr	r3, [r3, #4]
}
   2ba1a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2ba1c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2ba20:	4770      	bx	lr

0002ba22 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ba22:	6843      	ldr	r3, [r0, #4]
   2ba24:	685b      	ldr	r3, [r3, #4]
}
   2ba26:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2ba28:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2ba2c:	4770      	bx	lr

0002ba2e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ba2e:	6843      	ldr	r3, [r0, #4]
   2ba30:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2ba32:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2ba36:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2ba38:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2ba3c:	2000      	movs	r0, #0
   2ba3e:	4770      	bx	lr

0002ba40 <nrf_gpio_cfg_sense_set>:
{
   2ba40:	b513      	push	{r0, r1, r4, lr}
   2ba42:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ba44:	a801      	add	r0, sp, #4
{
   2ba46:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ba48:	f7f1 fede 	bl	1d808 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2ba4c:	9b01      	ldr	r3, [sp, #4]
   2ba4e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2ba52:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   2ba56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2ba5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2ba5e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   2ba62:	b002      	add	sp, #8
   2ba64:	bd10      	pop	{r4, pc}

0002ba66 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2ba66:	6903      	ldr	r3, [r0, #16]
{
   2ba68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba6c:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   2ba6e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   2ba72:	68de      	ldr	r6, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2ba74:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2ba78:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   2ba7a:	430a      	orrs	r2, r1
   2ba7c:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2ba80:	f8db 2004 	ldr.w	r2, [fp, #4]
    return p_reg->IN;
   2ba84:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2ba88:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   2ba8a:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   2ba8e:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   2ba90:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   2ba92:	f04f 0a00 	mov.w	sl, #0
	while (check_pins) {
   2ba96:	b91f      	cbnz	r7, 2baa0 <check_level_trigger_pins+0x3a>
}
   2ba98:	4628      	mov	r0, r5
   2ba9a:	b003      	add	sp, #12
   2ba9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   2baa0:	423c      	tst	r4, r7
   2baa2:	d020      	beq.n	2bae6 <check_level_trigger_pins+0x80>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2baa4:	f89b 3008 	ldrb.w	r3, [fp, #8]
   2baa8:	f00a 091f 	and.w	r9, sl, #31
			if (!(level_pins & bit)) {
   2baac:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2baae:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
			if (!(level_pins & bit)) {
   2bab2:	d112      	bne.n	2bada <check_level_trigger_pins+0x74>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bab4:	a801      	add	r0, sp, #4
   2bab6:	f8cd 9004 	str.w	r9, [sp, #4]
   2baba:	f7f1 fea5 	bl	1d808 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2babe:	9b01      	ldr	r3, [sp, #4]
   2bac0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2bac4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2bac8:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   2bacc:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   2bace:	bf02      	ittt	eq
   2bad0:	f8d8 3000 	ldreq.w	r3, [r8]
   2bad4:	4323      	orreq	r3, r4
   2bad6:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2bada:	2100      	movs	r1, #0
   2badc:	4648      	mov	r0, r9
   2bade:	f7ff ffaf 	bl	2ba40 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   2bae2:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   2bae6:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   2baea:	0064      	lsls	r4, r4, #1
   2baec:	e7d3      	b.n	2ba96 <check_level_trigger_pins+0x30>

0002baee <cfg_level_pins>:
{
   2baee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   2baf2:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2baf4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   2baf8:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2bafa:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2bafe:	4313      	orrs	r3, r2
   2bb00:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2bb04:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2bb06:	2500      	movs	r5, #0
	while (level_pins) {
   2bb08:	b90c      	cbnz	r4, 2bb0e <cfg_level_pins+0x20>
}
   2bb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2bb0e:	4226      	tst	r6, r4
   2bb10:	d010      	beq.n	2bb34 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2bb12:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2bb14:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2bb18:	40e9      	lsrs	r1, r5
   2bb1a:	f001 0101 	and.w	r1, r1, #1
   2bb1e:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2bb22:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2bb26:	b2c9      	uxtb	r1, r1
   2bb28:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2bb2c:	f7ff ff88 	bl	2ba40 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2bb30:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2bb34:	3501      	adds	r5, #1
		bit <<= 1;
   2bb36:	0076      	lsls	r6, r6, #1
   2bb38:	e7e6      	b.n	2bb08 <cfg_level_pins+0x1a>

0002bb3a <is_regular_addr_valid>:
{
   2bb3a:	b538      	push	{r3, r4, r5, lr}
   2bb3c:	4604      	mov	r4, r0
   2bb3e:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2bb40:	f000 fcbb 	bl	2c4ba <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2bb44:	4284      	cmp	r4, r0
   2bb46:	d209      	bcs.n	2bb5c <is_regular_addr_valid+0x22>
   2bb48:	2c00      	cmp	r4, #0
   2bb4a:	db07      	blt.n	2bb5c <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2bb4c:	42a8      	cmp	r0, r5
   2bb4e:	d305      	bcc.n	2bb5c <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2bb50:	442c      	add	r4, r5
	    len > flash_size ||
   2bb52:	4284      	cmp	r4, r0
   2bb54:	bf8c      	ite	hi
   2bb56:	2000      	movhi	r0, #0
   2bb58:	2001      	movls	r0, #1
}
   2bb5a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2bb5c:	2000      	movs	r0, #0
   2bb5e:	e7fc      	b.n	2bb5a <is_regular_addr_valid+0x20>

0002bb60 <nrf_power_pofcon_set.constprop.0>:
    uint32_t pofcon = p_reg->POFCON;
   2bb60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2bb64:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2bb68:	f023 031f 	bic.w	r3, r3, #31
   2bb6c:	4303      	orrs	r3, r0
    pofcon |=
   2bb6e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    p_reg->POFCON = pofcon;
   2bb72:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   2bb76:	4770      	bx	lr

0002bb78 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2bb78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bb7c:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2bb7e:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2bb80:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   2bb82:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   2bb84:	6025      	str	r5, [r4, #0]
{
   2bb86:	460e      	mov	r6, r1
   2bb88:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   2bb8a:	4669      	mov	r1, sp
	info->index = 0U;
   2bb8c:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   2bb8e:	aa01      	add	r2, sp, #4
   2bb90:	4798      	blx	r3

	while (layout_size--) {
   2bb92:	e9dd 1c00 	ldrd	r1, ip, [sp]
   2bb96:	4628      	mov	r0, r5
		info->size = layout->pages_size;
   2bb98:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
   2bb9c:	4560      	cmp	r0, ip
   2bb9e:	d104      	bne.n	2bbaa <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2bba0:	f06f 0015 	mvn.w	r0, #21
}
   2bba4:	b003      	add	sp, #12
   2bba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   2bbaa:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
   2bbae:	68a2      	ldr	r2, [r4, #8]
   2bbb0:	f8d4 9000 	ldr.w	r9, [r4]
   2bbb4:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
   2bbb6:	b986      	cbnz	r6, 2bbda <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   2bbb8:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2bbba:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
   2bbbe:	4543      	cmp	r3, r8
   2bbc0:	bf28      	it	cs
   2bbc2:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   2bbc4:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
   2bbc8:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
   2bbca:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   2bbcc:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
   2bbce:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2bbd0:	f100 0001 	add.w	r0, r0, #1
   2bbd4:	d9e2      	bls.n	2bb9c <flash_get_page_info+0x24>
			return 0;
   2bbd6:	2000      	movs	r0, #0
   2bbd8:	e7e4      	b.n	2bba4 <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   2bbda:	eba6 0309 	sub.w	r3, r6, r9
   2bbde:	fbb3 f3f5 	udiv	r3, r3, r5
   2bbe2:	e7ea      	b.n	2bbba <flash_get_page_info+0x42>

0002bbe4 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2bbe4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2bbe6:	2200      	movs	r2, #0
   2bbe8:	f7ff bfc6 	b.w	2bb78 <flash_get_page_info>

0002bbec <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2bbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2bbf0:	6883      	ldr	r3, [r0, #8]
{
   2bbf2:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2bbf4:	695b      	ldr	r3, [r3, #20]
{
   2bbf6:	4688      	mov	r8, r1
   2bbf8:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2bbfa:	a901      	add	r1, sp, #4
   2bbfc:	aa02      	add	r2, sp, #8
   2bbfe:	4798      	blx	r3
	off_t off = 0;
   2bc00:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2bc02:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2bc04:	4625      	mov	r5, r4
   2bc06:	9b02      	ldr	r3, [sp, #8]
   2bc08:	42ab      	cmp	r3, r5
   2bc0a:	d802      	bhi.n	2bc12 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2bc0c:	b006      	add	sp, #24
   2bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2bc12:	9f01      	ldr	r7, [sp, #4]
   2bc14:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2bc18:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2bc1a:	687b      	ldr	r3, [r7, #4]
   2bc1c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2bc1e:	683a      	ldr	r2, [r7, #0]
   2bc20:	42b2      	cmp	r2, r6
   2bc22:	eb0a 0306 	add.w	r3, sl, r6
   2bc26:	d802      	bhi.n	2bc2e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2bc28:	3501      	adds	r5, #1
   2bc2a:	469a      	mov	sl, r3
   2bc2c:	e7eb      	b.n	2bc06 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2bc2e:	4649      	mov	r1, r9
   2bc30:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2bc32:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2bc34:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2bc36:	47c0      	blx	r8
   2bc38:	2800      	cmp	r0, #0
   2bc3a:	d0e7      	beq.n	2bc0c <flash_page_foreach+0x20>
			off += page_info.size;
   2bc3c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2bc3e:	3601      	adds	r6, #1
			off += page_info.size;
   2bc40:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2bc42:	e7ec      	b.n	2bc1e <flash_page_foreach+0x32>

0002bc44 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2bc44:	6902      	ldr	r2, [r0, #16]
{
   2bc46:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2bc48:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2bc4c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2bc50:	2000      	movs	r0, #0
   2bc52:	4770      	bx	lr

0002bc54 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2bc54:	6843      	ldr	r3, [r0, #4]
   2bc56:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2bc58:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2bc5c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2bc60:	4770      	bx	lr

0002bc62 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2bc62:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2bc64:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bc66:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2bc6a:	b940      	cbnz	r0, 2bc7e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2bc6c:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2bc6e:	0712      	lsls	r2, r2, #28
   2bc70:	d406      	bmi.n	2bc80 <is_tx_ready+0x1e>
   2bc72:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2bc76:	3800      	subs	r0, #0
   2bc78:	bf18      	it	ne
   2bc7a:	2001      	movne	r0, #1
   2bc7c:	4770      	bx	lr
   2bc7e:	2001      	movs	r0, #1
}
   2bc80:	4770      	bx	lr

0002bc82 <user_callback>:
	if (data->async->user_callback) {
   2bc82:	6903      	ldr	r3, [r0, #16]
   2bc84:	68da      	ldr	r2, [r3, #12]
   2bc86:	6813      	ldr	r3, [r2, #0]
   2bc88:	b10b      	cbz	r3, 2bc8e <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2bc8a:	6852      	ldr	r2, [r2, #4]
   2bc8c:	4718      	bx	r3
}
   2bc8e:	4770      	bx	lr

0002bc90 <notify_uart_rx_rdy>:
{
   2bc90:	b570      	push	{r4, r5, r6, lr}
   2bc92:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2bc94:	6906      	ldr	r6, [r0, #16]
{
   2bc96:	4604      	mov	r4, r0
   2bc98:	460d      	mov	r5, r1
	struct uart_event evt = {
   2bc9a:	2214      	movs	r2, #20
   2bc9c:	2100      	movs	r1, #0
   2bc9e:	a801      	add	r0, sp, #4
   2bca0:	f7fd fee6 	bl	29a70 <memset>
   2bca4:	2302      	movs	r3, #2
   2bca6:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2bcaa:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2bcac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2bcae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   2bcb0:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2bcb2:	a901      	add	r1, sp, #4
   2bcb4:	4620      	mov	r0, r4
	struct uart_event evt = {
   2bcb6:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   2bcba:	f7ff ffe2 	bl	2bc82 <user_callback>
}
   2bcbe:	b006      	add	sp, #24
   2bcc0:	bd70      	pop	{r4, r5, r6, pc}

0002bcc2 <notify_rx_buf_release>:
{
   2bcc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   2bcc4:	680f      	ldr	r7, [r1, #0]
{
   2bcc6:	b087      	sub	sp, #28
   2bcc8:	4606      	mov	r6, r0
   2bcca:	460c      	mov	r4, r1
   2bccc:	4615      	mov	r5, r2
	if (*buf) {
   2bcce:	b187      	cbz	r7, 2bcf2 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   2bcd0:	2100      	movs	r1, #0
   2bcd2:	2214      	movs	r2, #20
   2bcd4:	a801      	add	r0, sp, #4
   2bcd6:	f7fd fecb 	bl	29a70 <memset>
   2bcda:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2bcdc:	eb0d 0103 	add.w	r1, sp, r3
   2bce0:	4630      	mov	r0, r6
		struct uart_event evt = {
   2bce2:	f88d 3004 	strb.w	r3, [sp, #4]
   2bce6:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   2bce8:	f7ff ffcb 	bl	2bc82 <user_callback>
		if (clear) {
   2bcec:	b10d      	cbz	r5, 2bcf2 <notify_rx_buf_release+0x30>
			*buf = NULL;
   2bcee:	2300      	movs	r3, #0
   2bcf0:	6023      	str	r3, [r4, #0]
}
   2bcf2:	b007      	add	sp, #28
   2bcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bcf6 <notify_rx_disable>:
{
   2bcf6:	b510      	push	{r4, lr}
   2bcf8:	b086      	sub	sp, #24
   2bcfa:	4604      	mov	r4, r0
	struct uart_event evt = {
   2bcfc:	2214      	movs	r2, #20
   2bcfe:	2100      	movs	r1, #0
   2bd00:	a801      	add	r0, sp, #4
   2bd02:	f7fd feb5 	bl	29a70 <memset>
   2bd06:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2bd08:	a901      	add	r1, sp, #4
   2bd0a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2bd0c:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2bd10:	f7ff ffb7 	bl	2bc82 <user_callback>
}
   2bd14:	b006      	add	sp, #24
   2bd16:	bd10      	pop	{r4, pc}

0002bd18 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   2bd18:	6843      	ldr	r3, [r0, #4]
{
   2bd1a:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   2bd1c:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2bd1e:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   2bd20:	f04f 0040 	mov.w	r0, #64	; 0x40
   2bd24:	f3ef 8511 	mrs	r5, BASEPRI
   2bd28:	f380 8811 	msr	BASEPRI, r0
   2bd2c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2bd30:	68e4      	ldr	r4, [r4, #12]
   2bd32:	6d20      	ldr	r0, [r4, #80]	; 0x50
   2bd34:	b190      	cbz	r0, 2bd5c <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   2bd36:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   2bd38:	b998      	cbnz	r0, 2bd62 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   2bd3a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2bd3e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2bd42:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2bd46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2bd4a:	f042 0220 	orr.w	r2, r2, #32
   2bd4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2bd52:	f385 8811 	msr	BASEPRI, r5
   2bd56:	f3bf 8f6f 	isb	sy
}
   2bd5a:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   2bd5c:	f06f 000c 	mvn.w	r0, #12
   2bd60:	e7f7      	b.n	2bd52 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   2bd62:	f06f 000f 	mvn.w	r0, #15
   2bd66:	e7f4      	b.n	2bd52 <uarte_nrfx_rx_buf_rsp+0x3a>

0002bd68 <uarte_nrfx_callback_set>:
	if (!data->async) {
   2bd68:	6903      	ldr	r3, [r0, #16]
   2bd6a:	68db      	ldr	r3, [r3, #12]
   2bd6c:	b11b      	cbz	r3, 2bd76 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   2bd6e:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   2bd72:	2000      	movs	r0, #0
   2bd74:	4770      	bx	lr
		return -ENOTSUP;
   2bd76:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2bd7a:	4770      	bx	lr

0002bd7c <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2bd7c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2bd7e:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2bd80:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2bd82:	681b      	ldr	r3, [r3, #0]
{
   2bd84:	b510      	push	{r4, lr}
	if (data->async) {
   2bd86:	b958      	cbnz	r0, 2bda0 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bd88:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2bd8c:	b15c      	cbz	r4, 2bda6 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   2bd8e:	7d52      	ldrb	r2, [r2, #21]
   2bd90:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2bd92:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2bd96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2bd9a:	2201      	movs	r2, #1
   2bd9c:	601a      	str	r2, [r3, #0]
}
   2bd9e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2bda0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bda4:	e7fb      	b.n	2bd9e <uarte_nrfx_poll_in+0x22>
		return -1;
   2bda6:	f04f 30ff 	mov.w	r0, #4294967295
   2bdaa:	e7f8      	b.n	2bd9e <uarte_nrfx_poll_in+0x22>

0002bdac <rx_timeout>:
{
   2bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   2bdae:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2bdb0:	68f3      	ldr	r3, [r6, #12]
   2bdb2:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   2bdb6:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   2bdba:	bb32      	cbnz	r2, 2be0a <rx_timeout+0x5e>
	const struct device *dev = data->dev;
   2bdbc:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   2bdbe:	686a      	ldr	r2, [r5, #4]
   2bdc0:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
   2bdc2:	2110      	movs	r1, #16
   2bdc4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2bdc8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	if (read != data->async->rx_total_byte_cnt) {
   2bdcc:	6e59      	ldr	r1, [r3, #100]	; 0x64
   2bdce:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2bdd0:	bf1e      	ittt	ne
   2bdd2:	665a      	strne	r2, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   2bdd4:	6eda      	ldrne	r2, [r3, #108]	; 0x6c
   2bdd6:	675a      	strne	r2, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
   2bdd8:	e9d3 4219 	ldrd	r4, r2, [r3, #100]	; 0x64
	if (!hw_rx_counting_enabled(data) &&
   2bddc:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2bdde:	bf48      	it	mi
   2bde0:	f8c3 20b0 	strmi.w	r2, [r3, #176]	; 0xb0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2bde4:	e9d3 1215 	ldrd	r1, r2, [r3, #84]	; 0x54
		len = 0;
   2bde8:	bf48      	it	mi
   2bdea:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2bdec:	18a0      	adds	r0, r4, r2
   2bdee:	4288      	cmp	r0, r1
   2bdf0:	d90c      	bls.n	2be0c <rx_timeout+0x60>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2bdf2:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   2bdf4:	2c00      	cmp	r4, #0
   2bdf6:	dd03      	ble.n	2be00 <rx_timeout+0x54>
		clipped = true;
   2bdf8:	2701      	movs	r7, #1
   2bdfa:	e00d      	b.n	2be18 <rx_timeout+0x6c>
			data->async->rx_timeout_left -=
   2bdfc:	1a52      	subs	r2, r2, r1
   2bdfe:	675a      	str	r2, [r3, #116]	; 0x74
	return config->uarte_regs;
   2be00:	686b      	ldr	r3, [r5, #4]
   2be02:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2be04:	2210      	movs	r2, #16
   2be06:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2be0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   2be0c:	2c00      	cmp	r4, #0
   2be0e:	d0f7      	beq.n	2be00 <rx_timeout+0x54>
				< data->async->rx_timeout_slab)) {
   2be10:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
		if (clipped ||
   2be14:	428a      	cmp	r2, r1
   2be16:	daf1      	bge.n	2bdfc <rx_timeout+0x50>
			notify_uart_rx_rdy(dev, len);
   2be18:	4621      	mov	r1, r4
   2be1a:	4628      	mov	r0, r5
   2be1c:	f7ff ff38 	bl	2bc90 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2be20:	68f0      	ldr	r0, [r6, #12]
   2be22:	6d83      	ldr	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   2be24:	6e81      	ldr	r1, [r0, #104]	; 0x68
			data->async->rx_offset += len;
   2be26:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   2be28:	4421      	add	r1, r4
			data->async->rx_offset += len;
   2be2a:	6583      	str	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   2be2c:	6681      	str	r1, [r0, #104]	; 0x68
		if (clipped) {
   2be2e:	2f00      	cmp	r7, #0
   2be30:	d0e6      	beq.n	2be00 <rx_timeout+0x54>
	z_impl_k_timer_stop(timer);
   2be32:	3078      	adds	r0, #120	; 0x78
   2be34:	f000 fcef 	bl	2c816 <z_impl_k_timer_stop>
}
   2be38:	e7e2      	b.n	2be00 <rx_timeout+0x54>

0002be3a <rx_flush>:
	return config->uarte_regs;
   2be3a:	6843      	ldr	r3, [r0, #4]
{
   2be3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   2be3e:	681d      	ldr	r5, [r3, #0]
{
   2be40:	4616      	mov	r6, r2
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   2be42:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   2be46:	460c      	mov	r4, r1
   2be48:	bb31      	cbnz	r1, 2be98 <rx_flush+0x5e>
   2be4a:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
   2be4c:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2be4e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2be52:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   2be54:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2be58:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2be5c:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2be60:	2201      	movs	r2, #1
   2be62:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2be64:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2be68:	2a00      	cmp	r2, #0
   2be6a:	d0fb      	beq.n	2be64 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2be6c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2be70:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2be74:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
   2be78:	b914      	cbnz	r4, 2be80 <rx_flush+0x46>
			return rx_amount;
   2be7a:	b2c0      	uxtb	r0, r0
}
   2be7c:	b003      	add	sp, #12
   2be7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
   2be80:	4287      	cmp	r7, r0
   2be82:	d1fa      	bne.n	2be7a <rx_flush+0x40>
   2be84:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
   2be86:	42b4      	cmp	r4, r6
   2be88:	d101      	bne.n	2be8e <rx_flush+0x54>
	return 0;
   2be8a:	2000      	movs	r0, #0
   2be8c:	e7f6      	b.n	2be7c <rx_flush+0x42>
		if (buf[i] != dirty) {
   2be8e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2be92:	2b00      	cmp	r3, #0
   2be94:	d0f7      	beq.n	2be86 <rx_flush+0x4c>
   2be96:	e7f0      	b.n	2be7a <rx_flush+0x40>
		memset(buf, dirty, len);
   2be98:	2100      	movs	r1, #0
   2be9a:	4620      	mov	r0, r4
   2be9c:	f7fd fde8 	bl	29a70 <memset>
		flush_len = len;
   2bea0:	4623      	mov	r3, r4
   2bea2:	e7d4      	b.n	2be4e <rx_flush+0x14>

0002bea4 <async_uart_release>:
{
   2bea4:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2bea6:	6903      	ldr	r3, [r0, #16]
{
   2bea8:	4604      	mov	r4, r0
	__asm__ volatile(
   2beaa:	f04f 0240 	mov.w	r2, #64	; 0x40
   2beae:	f3ef 8611 	mrs	r6, BASEPRI
   2beb2:	f382 8811 	msr	BASEPRI, r2
   2beb6:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2beba:	68dd      	ldr	r5, [r3, #12]
   2bebc:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   2bec0:	ea23 0301 	bic.w	r3, r3, r1
   2bec4:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	if (!data->async->low_power_mask) {
   2bec8:	b96b      	cbnz	r3, 2bee6 <async_uart_release+0x42>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2beca:	2902      	cmp	r1, #2
   2becc:	d106      	bne.n	2bedc <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   2bece:	2205      	movs	r2, #5
   2bed0:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
   2bed4:	f7ff ffb1 	bl	2be3a <rx_flush>
			data->async->rx_flush_cnt =
   2bed8:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
	return config->uarte_regs;
   2bedc:	6863      	ldr	r3, [r4, #4]
   2bede:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2bee0:	2200      	movs	r2, #0
   2bee2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2bee6:	f386 8811 	msr	BASEPRI, r6
   2beea:	f3bf 8f6f 	isb	sy
}
   2beee:	bd70      	pop	{r4, r5, r6, pc}

0002bef0 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   2bef0:	6843      	ldr	r3, [r0, #4]
{
   2bef2:	b510      	push	{r4, lr}
	return config->uarte_regs;
   2bef4:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   2bef6:	6903      	ldr	r3, [r0, #16]
   2bef8:	68d8      	ldr	r0, [r3, #12]
   2befa:	6883      	ldr	r3, [r0, #8]
   2befc:	b133      	cbz	r3, 2bf0c <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   2befe:	3018      	adds	r0, #24
   2bf00:	f000 fc89 	bl	2c816 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2bf04:	2301      	movs	r3, #1
   2bf06:	60e3      	str	r3, [r4, #12]
	return 0;
   2bf08:	2000      	movs	r0, #0
}
   2bf0a:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2bf0c:	f06f 000d 	mvn.w	r0, #13
   2bf10:	e7fb      	b.n	2bf0a <uarte_nrfx_tx_abort+0x1a>

0002bf12 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2bf12:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2bf14:	6818      	ldr	r0, [r3, #0]
   2bf16:	f7ff bfeb 	b.w	2bef0 <uarte_nrfx_tx_abort>

0002bf1a <uarte_nrfx_rx_disable>:
{
   2bf1a:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2bf1c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2bf1e:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   2bf20:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   2bf22:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2bf24:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2bf26:	b1b3      	cbz	r3, 2bf56 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   2bf28:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2bf2a:	b153      	cbz	r3, 2bf42 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2bf2c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2bf30:	f023 0320 	bic.w	r3, r3, #32
   2bf34:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2bf38:	2300      	movs	r3, #0
   2bf3a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2bf3e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   2bf42:	3078      	adds	r0, #120	; 0x78
   2bf44:	f000 fc67 	bl	2c816 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2bf48:	68eb      	ldr	r3, [r5, #12]
   2bf4a:	2000      	movs	r0, #0
   2bf4c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2bf50:	2301      	movs	r3, #1
   2bf52:	6063      	str	r3, [r4, #4]
}
   2bf54:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2bf56:	f06f 000d 	mvn.w	r0, #13
   2bf5a:	e7fb      	b.n	2bf54 <uarte_nrfx_rx_disable+0x3a>

0002bf5c <tx_start>:
{
   2bf5c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2bf5e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2bf60:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2bf62:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2bf66:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2bf6a:	2200      	movs	r2, #0
   2bf6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2bf70:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2bf74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2bf78:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2bf7c:	6862      	ldr	r2, [r4, #4]
   2bf7e:	06d2      	lsls	r2, r2, #27
   2bf80:	d50f      	bpl.n	2bfa2 <tx_start+0x46>
	if (data->async) {
   2bf82:	6902      	ldr	r2, [r0, #16]
   2bf84:	68d2      	ldr	r2, [r2, #12]
   2bf86:	b12a      	cbz	r2, 2bf94 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2bf88:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   2bf8c:	f041 0101 	orr.w	r1, r1, #1
   2bf90:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2bf94:	2208      	movs	r2, #8
   2bf96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2bf9a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2bf9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2bfa2:	2201      	movs	r2, #1
   2bfa4:	609a      	str	r2, [r3, #8]
}
   2bfa6:	bd10      	pop	{r4, pc}

0002bfa8 <uarte_nrfx_tx>:
{
   2bfa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2bfac:	461c      	mov	r4, r3
	return config->uarte_regs;
   2bfae:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2bfb0:	6906      	ldr	r6, [r0, #16]
{
   2bfb2:	4617      	mov	r7, r2
	return config->uarte_regs;
   2bfb4:	681a      	ldr	r2, [r3, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2bfb6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   2bfba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   2bfbe:	4605      	mov	r5, r0
	if (!nrfx_is_in_ram(buf)) {
   2bfc0:	d14e      	bne.n	2c060 <uarte_nrfx_tx+0xb8>
	__asm__ volatile(
   2bfc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bfc6:	f3ef 8811 	mrs	r8, BASEPRI
   2bfca:	f383 8811 	msr	BASEPRI, r3
   2bfce:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   2bfd2:	68f3      	ldr	r3, [r6, #12]
   2bfd4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2bfd8:	f1bc 0f00 	cmp.w	ip, #0
   2bfdc:	d008      	beq.n	2bff0 <uarte_nrfx_tx+0x48>
	__asm__ volatile(
   2bfde:	f388 8811 	msr	BASEPRI, r8
   2bfe2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   2bfe6:	f06f 000f 	mvn.w	r0, #15
}
   2bfea:	b002      	add	sp, #8
   2bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->async->tx_size = len;
   2bff0:	60df      	str	r7, [r3, #12]
    p_reg->INTENSET = mask;
   2bff2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2bff6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   2bffa:	f7ff fe32 	bl	2bc62 <is_tx_ready>
   2bffe:	68f3      	ldr	r3, [r6, #12]
   2c000:	bb20      	cbnz	r0, 2c04c <uarte_nrfx_tx+0xa4>
		data->async->pend_tx_buf = (uint8_t *)buf;
   2c002:	6119      	str	r1, [r3, #16]
   2c004:	f388 8811 	msr	BASEPRI, r8
   2c008:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   2c00c:	7af3      	ldrb	r3, [r6, #11]
   2c00e:	2b01      	cmp	r3, #1
   2c010:	d11a      	bne.n	2c048 <uarte_nrfx_tx+0xa0>
	    && timeout != SYS_FOREVER_MS) {
   2c012:	1c63      	adds	r3, r4, #1
   2c014:	d018      	beq.n	2c048 <uarte_nrfx_tx+0xa0>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   2c016:	68f5      	ldr	r5, [r6, #12]
   2c018:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2c01c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c020:	f240 30e7 	movw	r0, #999	; 0x3e7
   2c024:	2100      	movs	r1, #0
   2c026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c02a:	2300      	movs	r3, #0
   2c02c:	fbc6 0104 	smlal	r0, r1, r6, r4
   2c030:	f7d4 f866 	bl	100 <__aeabi_uldivmod>
   2c034:	3518      	adds	r5, #24
   2c036:	4602      	mov	r2, r0
   2c038:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2c03a:	2000      	movs	r0, #0
   2c03c:	2100      	movs	r1, #0
   2c03e:	e9cd 0100 	strd	r0, r1, [sp]
   2c042:	4628      	mov	r0, r5
   2c044:	f7f8 f854 	bl	240f0 <z_impl_k_timer_start>
	return 0;
   2c048:	2000      	movs	r0, #0
   2c04a:	e7ce      	b.n	2bfea <uarte_nrfx_tx+0x42>
		data->async->tx_amount = -1;
   2c04c:	f04f 32ff 	mov.w	r2, #4294967295
   2c050:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		data->async->tx_buf = buf;
   2c054:	6099      	str	r1, [r3, #8]
		tx_start(dev, buf, len);
   2c056:	463a      	mov	r2, r7
   2c058:	4628      	mov	r0, r5
   2c05a:	f7ff ff7f 	bl	2bf5c <tx_start>
   2c05e:	e7d1      	b.n	2c004 <uarte_nrfx_tx+0x5c>
		return -ENOTSUP;
   2c060:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c064:	e7c1      	b.n	2bfea <uarte_nrfx_tx+0x42>

0002c066 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   2c066:	6843      	ldr	r3, [r0, #4]
{
   2c068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   2c06c:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c06e:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   2c072:	b089      	sub	sp, #36	; 0x24
   2c074:	4604      	mov	r4, r0
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   2c076:	b171      	cbz	r1, 2c096 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c078:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c07a:	2200      	movs	r2, #0
   2c07c:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   2c080:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   2c084:	68da      	ldr	r2, [r3, #12]
   2c086:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   2c08a:	3301      	adds	r3, #1
   2c08c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
   2c090:	b009      	add	sp, #36	; 0x24
   2c092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c096:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2c09a:	b313      	cbz	r3, 2c0e2 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c09c:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   2c0a0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2c0a4:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2c0a8:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   2c0ac:	2214      	movs	r2, #20
   2c0ae:	a803      	add	r0, sp, #12
   2c0b0:	f7fd fcde 	bl	29a70 <memset>
   2c0b4:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2c0b6:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   2c0b8:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2c0bc:	f100 80f6 	bmi.w	2c2ac <uarte_nrfx_isr_async+0x246>
   2c0c0:	07b1      	lsls	r1, r6, #30
   2c0c2:	f100 80f5 	bmi.w	2c2b0 <uarte_nrfx_isr_async+0x24a>
   2c0c6:	0772      	lsls	r2, r6, #29
   2c0c8:	f100 80f4 	bmi.w	2c2b4 <uarte_nrfx_isr_async+0x24e>
   2c0cc:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   2c0d0:	4620      	mov	r0, r4
   2c0d2:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2c0d4:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   2c0d8:	f7ff fdd3 	bl	2bc82 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   2c0dc:	4620      	mov	r0, r4
   2c0de:	f7ff ff1c 	bl	2bf1a <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c0e2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   2c0e6:	b37b      	cbz	r3, 2c148 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
   2c0e8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   2c0ec:	06db      	lsls	r3, r3, #27
   2c0ee:	d52b      	bpl.n	2c148 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c0f0:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c0f4:	6927      	ldr	r7, [r4, #16]
   2c0f6:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   2c0fa:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   2c0fe:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
   2c100:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   2c102:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   2c104:	2301      	movs	r3, #1
   2c106:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
	z_impl_k_timer_stop(timer);
   2c10a:	3078      	adds	r0, #120	; 0x78
   2c10c:	f000 fb83 	bl	2c816 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   2c110:	68fa      	ldr	r2, [r7, #12]
    return p_reg->RXD.AMOUNT;
   2c112:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   2c116:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   2c11a:	6d90      	ldr	r0, [r2, #88]	; 0x58
	data->async->rx_flush_cnt = 0;
   2c11c:	f882 80c1 	strb.w	r8, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   2c120:	1a1b      	subs	r3, r3, r0
   2c122:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   2c124:	6e90      	ldr	r0, [r2, #104]	; 0x68
   2c126:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2c12a:	4408      	add	r0, r1
	if (rx_len > 0) {
   2c12c:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   2c12e:	6690      	str	r0, [r2, #104]	; 0x68
	if (rx_len > 0) {
   2c130:	dd02      	ble.n	2c138 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
   2c132:	4620      	mov	r0, r4
   2c134:	f7ff fdac 	bl	2bc90 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   2c138:	68f9      	ldr	r1, [r7, #12]
   2c13a:	f891 30c2 	ldrb.w	r3, [r1, #194]	; 0xc2
   2c13e:	2b00      	cmp	r3, #0
   2c140:	f040 80ba 	bne.w	2c2b8 <uarte_nrfx_isr_async+0x252>
		data->async->is_in_irq = false;
   2c144:	f881 30c4 	strb.w	r3, [r1, #196]	; 0xc4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c148:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   2c14c:	b38b      	cbz	r3, 2c1b2 <uarte_nrfx_isr_async+0x14c>
   2c14e:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
   2c152:	bb71      	cbnz	r1, 2c1b2 <uarte_nrfx_isr_async+0x14c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c154:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c158:	6926      	ldr	r6, [r4, #16]
   2c15a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   2c15e:	2214      	movs	r2, #20
   2c160:	a803      	add	r0, sp, #12
   2c162:	f7fd fc85 	bl	29a70 <memset>
   2c166:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   2c168:	a903      	add	r1, sp, #12
   2c16a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2c16c:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   2c170:	f7ff fd87 	bl	2bc82 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   2c174:	68f6      	ldr	r6, [r6, #12]
   2c176:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   2c178:	1c5f      	adds	r7, r3, #1
   2c17a:	d01a      	beq.n	2c1b2 <uarte_nrfx_isr_async+0x14c>
		data->async->rx_timeout_left = data->async->rx_timeout;
   2c17c:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   2c17e:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2c180:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2c184:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2c188:	f240 38e7 	movw	r8, #999	; 0x3e7
   2c18c:	f04f 0900 	mov.w	r9, #0
   2c190:	fbc0 8901 	smlal	r8, r9, r0, r1
   2c194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c198:	2300      	movs	r3, #0
   2c19a:	4640      	mov	r0, r8
   2c19c:	4649      	mov	r1, r9
   2c19e:	f7d3 ffaf 	bl	100 <__aeabi_uldivmod>
   2c1a2:	4602      	mov	r2, r0
   2c1a4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2c1a6:	e9cd 0100 	strd	r0, r1, [sp]
   2c1aa:	f106 0078 	add.w	r0, r6, #120	; 0x78
   2c1ae:	f7f7 ff9f 	bl	240f0 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c1b2:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2c1b6:	b333      	cbz	r3, 2c206 <uarte_nrfx_isr_async+0x1a0>
   2c1b8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   2c1bc:	bb1b      	cbnz	r3, 2c206 <uarte_nrfx_isr_async+0x1a0>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c1be:	6926      	ldr	r6, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c1c0:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   2c1c4:	68f1      	ldr	r1, [r6, #12]
   2c1c6:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   2c1ca:	2201      	movs	r2, #1
   2c1cc:	3150      	adds	r1, #80	; 0x50
   2c1ce:	4620      	mov	r0, r4
   2c1d0:	f7ff fd77 	bl	2bcc2 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   2c1d4:	68f1      	ldr	r1, [r6, #12]
   2c1d6:	2201      	movs	r2, #1
   2c1d8:	315c      	adds	r1, #92	; 0x5c
   2c1da:	4620      	mov	r0, r4
   2c1dc:	f7ff fd71 	bl	2bcc2 <notify_rx_buf_release>
	if (!data->async->rx_enabled) {
   2c1e0:	68f3      	ldr	r3, [r6, #12]
   2c1e2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   2c1e6:	b91a      	cbnz	r2, 2c1f0 <uarte_nrfx_isr_async+0x18a>
		(void)rx_flush(dev, NULL, 0);
   2c1e8:	4611      	mov	r1, r2
   2c1ea:	4620      	mov	r0, r4
   2c1ec:	f7ff fe25 	bl	2be3a <rx_flush>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2c1f0:	6863      	ldr	r3, [r4, #4]
   2c1f2:	685b      	ldr	r3, [r3, #4]
   2c1f4:	06d8      	lsls	r0, r3, #27
   2c1f6:	d503      	bpl.n	2c200 <uarte_nrfx_isr_async+0x19a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   2c1f8:	2102      	movs	r1, #2
   2c1fa:	4620      	mov	r0, r4
   2c1fc:	f7ff fe52 	bl	2bea4 <async_uart_release>
	notify_rx_disable(dev);
   2c200:	4620      	mov	r0, r4
   2c202:	f7ff fd78 	bl	2bcf6 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c206:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   2c20a:	b1db      	cbz	r3, 2c244 <uarte_nrfx_isr_async+0x1de>
    return p_reg->INTENSET & mask;
   2c20c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   2c210:	05d9      	lsls	r1, r3, #23
   2c212:	d517      	bpl.n	2c244 <uarte_nrfx_isr_async+0x1de>
	return config->uarte_regs;
   2c214:	6863      	ldr	r3, [r4, #4]
   2c216:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2c218:	f04f 0140 	mov.w	r1, #64	; 0x40
   2c21c:	f3ef 8211 	mrs	r2, BASEPRI
   2c220:	f381 8811 	msr	BASEPRI, r1
   2c224:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c228:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2c22c:	b131      	cbz	r1, 2c23c <uarte_nrfx_isr_async+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c22e:	2100      	movs	r1, #0
   2c230:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2c234:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c238:	2101      	movs	r1, #1
   2c23a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2c23c:	f382 8811 	msr	BASEPRI, r2
   2c240:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c244:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   2c248:	2b00      	cmp	r3, #0
   2c24a:	f43f af21 	beq.w	2c090 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   2c24e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   2c252:	025a      	lsls	r2, r3, #9
   2c254:	f57f af1c 	bpl.w	2c090 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2c258:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c25a:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2c25c:	e9d3 7300 	ldrd	r7, r3, [r3]
   2c260:	06db      	lsls	r3, r3, #27
   2c262:	d457      	bmi.n	2c314 <uarte_nrfx_isr_async+0x2ae>
	if (!data->async->tx_buf) {
   2c264:	68f0      	ldr	r0, [r6, #12]
   2c266:	6882      	ldr	r2, [r0, #8]
   2c268:	2a00      	cmp	r2, #0
   2c26a:	d160      	bne.n	2c32e <uarte_nrfx_isr_async+0x2c8>
		if (data->async->pend_tx_buf) {
   2c26c:	6903      	ldr	r3, [r0, #16]
   2c26e:	2b00      	cmp	r3, #0
   2c270:	f43f af0e 	beq.w	2c090 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   2c274:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c278:	f3ef 8511 	mrs	r5, BASEPRI
   2c27c:	f383 8811 	msr	BASEPRI, r3
   2c280:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c284:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   2c288:	b15b      	cbz	r3, 2c2a2 <uarte_nrfx_isr_async+0x23c>
				data->async->tx_buf = data->async->pend_tx_buf;
   2c28a:	68f3      	ldr	r3, [r6, #12]
   2c28c:	6919      	ldr	r1, [r3, #16]
				data->async->pend_tx_buf = NULL;
   2c28e:	611a      	str	r2, [r3, #16]
				data->async->tx_amount = -1;
   2c290:	f04f 32ff 	mov.w	r2, #4294967295
   2c294:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				tx_start(dev, data->async->tx_buf,
   2c298:	68da      	ldr	r2, [r3, #12]
				data->async->tx_buf = data->async->pend_tx_buf;
   2c29a:	6099      	str	r1, [r3, #8]
				tx_start(dev, data->async->tx_buf,
   2c29c:	4620      	mov	r0, r4
   2c29e:	f7ff fe5d 	bl	2bf5c <tx_start>
	__asm__ volatile(
   2c2a2:	f385 8811 	msr	BASEPRI, r5
   2c2a6:	f3bf 8f6f 	isb	sy
}
   2c2aa:	e6f1      	b.n	2c090 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2c2ac:	2601      	movs	r6, #1
   2c2ae:	e70f      	b.n	2c0d0 <uarte_nrfx_isr_async+0x6a>
   2c2b0:	2602      	movs	r6, #2
   2c2b2:	e70d      	b.n	2c0d0 <uarte_nrfx_isr_async+0x6a>
   2c2b4:	2604      	movs	r6, #4
   2c2b6:	e70b      	b.n	2c0d0 <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   2c2b8:	2200      	movs	r2, #0
   2c2ba:	3150      	adds	r1, #80	; 0x50
   2c2bc:	4620      	mov	r0, r4
   2c2be:	f7ff fd00 	bl	2bcc2 <notify_rx_buf_release>
	__asm__ volatile(
   2c2c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c2c6:	f3ef 8111 	mrs	r1, BASEPRI
   2c2ca:	f383 8811 	msr	BASEPRI, r3
   2c2ce:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   2c2d2:	68fb      	ldr	r3, [r7, #12]
   2c2d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2c2d6:	b1d2      	cbz	r2, 2c30e <uarte_nrfx_isr_async+0x2a8>
		data->async->rx_buf = data->async->rx_next_buf;
   2c2d8:	651a      	str	r2, [r3, #80]	; 0x50
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   2c2da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2c2dc:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   2c2de:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   2c2e0:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   2c2e4:	659a      	str	r2, [r3, #88]	; 0x58
   2c2e6:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2c2ea:	b90b      	cbnz	r3, 2c2f0 <uarte_nrfx_isr_async+0x28a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c2ec:	2301      	movs	r3, #1
   2c2ee:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   2c2f0:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   2c2f4:	f023 0320 	bic.w	r3, r3, #32
   2c2f8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   2c2fc:	f381 8811 	msr	BASEPRI, r1
   2c300:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   2c304:	68fb      	ldr	r3, [r7, #12]
   2c306:	2200      	movs	r2, #0
   2c308:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
   2c30c:	e71c      	b.n	2c148 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c30e:	2301      	movs	r3, #1
   2c310:	6073      	str	r3, [r6, #4]
}
   2c312:	e7f3      	b.n	2c2fc <uarte_nrfx_isr_async+0x296>
    p_reg->INTENCLR = mask;
   2c314:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2c318:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   2c31c:	2101      	movs	r1, #1
   2c31e:	4620      	mov	r0, r4
   2c320:	f7ff fdc0 	bl	2bea4 <async_uart_release>
		if (!data->async->tx_size) {
   2c324:	68f3      	ldr	r3, [r6, #12]
   2c326:	68db      	ldr	r3, [r3, #12]
   2c328:	2b00      	cmp	r3, #0
   2c32a:	d19b      	bne.n	2c264 <uarte_nrfx_isr_async+0x1fe>
   2c32c:	e6b0      	b.n	2c090 <uarte_nrfx_isr_async+0x2a>
	z_impl_k_timer_stop(timer);
   2c32e:	3018      	adds	r0, #24
   2c330:	f000 fa71 	bl	2c816 <z_impl_k_timer_stop>
	__asm__ volatile(
   2c334:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c338:	f3ef 8211 	mrs	r2, BASEPRI
   2c33c:	f383 8811 	msr	BASEPRI, r3
   2c340:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   2c344:	68f3      	ldr	r3, [r6, #12]
   2c346:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2c34a:	2900      	cmp	r1, #0
   2c34c:	bfac      	ite	ge
   2c34e:	f8d3 50b4 	ldrge.w	r5, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   2c352:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   2c356:	f382 8811 	msr	BASEPRI, r2
   2c35a:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   2c35e:	2214      	movs	r2, #20
   2c360:	2100      	movs	r1, #0
   2c362:	a803      	add	r0, sp, #12
   2c364:	f7fd fb84 	bl	29a70 <memset>
		.data.tx.buf = data->async->tx_buf,
   2c368:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2c36a:	689a      	ldr	r2, [r3, #8]
   2c36c:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   2c370:	68da      	ldr	r2, [r3, #12]
   2c372:	1aad      	subs	r5, r5, r2
   2c374:	bf18      	it	ne
   2c376:	2501      	movne	r5, #1
    p_reg->INTENCLR = mask;
   2c378:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2c37c:	f88d 500c 	strb.w	r5, [sp, #12]
   2c380:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   2c384:	2200      	movs	r2, #0
   2c386:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   2c388:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   2c38a:	a903      	add	r1, sp, #12
   2c38c:	4620      	mov	r0, r4
   2c38e:	f7ff fc78 	bl	2bc82 <user_callback>
   2c392:	e67d      	b.n	2c090 <uarte_nrfx_isr_async+0x2a>

0002c394 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2c394:	2200      	movs	r2, #0
{
   2c396:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2c398:	4611      	mov	r1, r2
   2c39a:	4610      	mov	r0, r2
   2c39c:	f7f8 fc16 	bl	24bcc <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2c3a0:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   2c3a2:	bf18      	it	ne
   2c3a4:	f06f 0015 	mvnne.w	r0, #21
   2c3a8:	bd08      	pop	{r3, pc}

0002c3aa <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2c3aa:	ea40 0301 	orr.w	r3, r0, r1
   2c3ae:	f033 030f 	bics.w	r3, r3, #15
   2c3b2:	d101      	bne.n	2c3b8 <dk_set_leds_state+0xe>
   2c3b4:	f7f2 bc18 	b.w	1ebe8 <dk_set_leds_state.part.0>
}
   2c3b8:	f06f 0015 	mvn.w	r0, #21
   2c3bc:	4770      	bx	lr

0002c3be <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   2c3be:	2101      	movs	r1, #1
   2c3c0:	f7f2 beb8 	b.w	1f134 <dk_set_led>

0002c3c4 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   2c3c4:	2100      	movs	r1, #0
   2c3c6:	f7f2 beb5 	b.w	1f134 <dk_set_led>

0002c3ca <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2c3ca:	b530      	push	{r4, r5, lr}
   2c3cc:	b08d      	sub	sp, #52	; 0x34
   2c3ce:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2c3d0:	4601      	mov	r1, r0
   2c3d2:	4668      	mov	r0, sp
{
   2c3d4:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2c3d6:	f7f3 fc93 	bl	1fd00 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2c3da:	4621      	mov	r1, r4
   2c3dc:	a804      	add	r0, sp, #16
   2c3de:	f7f3 fc8f 	bl	1fd00 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2c3e2:	f04f 30ff 	mov.w	r0, #4294967295
   2c3e6:	f04f 31ff 	mov.w	r1, #4294967295
   2c3ea:	f7f2 fedb 	bl	1f1a4 <multithreading_lock_acquire>

	if (!errcode) {
   2c3ee:	4604      	mov	r4, r0
   2c3f0:	b960      	cbnz	r0, 2c40c <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2c3f2:	aa08      	add	r2, sp, #32
   2c3f4:	a904      	add	r1, sp, #16
   2c3f6:	4668      	mov	r0, sp
   2c3f8:	f7df fe13 	bl	c022 <sdc_soc_ecb_block_encrypt>
   2c3fc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2c3fe:	f7f2 fed9 	bl	1f1b4 <multithreading_lock_release>
	}

	if (!errcode) {
   2c402:	b91c      	cbnz	r4, 2c40c <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2c404:	a908      	add	r1, sp, #32
   2c406:	4628      	mov	r0, r5
   2c408:	f7f3 fc7a 	bl	1fd00 <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2c40c:	4620      	mov	r0, r4
   2c40e:	b00d      	add	sp, #52	; 0x34
   2c410:	bd30      	pop	{r4, r5, pc}

0002c412 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2c412:	4668      	mov	r0, sp
   2c414:	f020 0107 	bic.w	r1, r0, #7
   2c418:	468d      	mov	sp, r1
   2c41a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2c41c:	f7d6 fa4a 	bl	28b4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2c420:	f7e7 ff70 	bl	14304 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2c424:	f7e8 fae8 	bl	149f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2c428:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c42c:	4685      	mov	sp, r0
   2c42e:	4770      	bx	lr

0002c430 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2c430:	4668      	mov	r0, sp
   2c432:	f020 0107 	bic.w	r1, r0, #7
   2c436:	468d      	mov	sp, r1
   2c438:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2c43a:	f7d6 f9bd 	bl	27b8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2c43e:	f7e7 ff61 	bl	14304 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2c442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c446:	4685      	mov	sp, r0
   2c448:	4770      	bx	lr

0002c44a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2c44a:	4668      	mov	r0, sp
   2c44c:	f020 0107 	bic.w	r1, r0, #7
   2c450:	468d      	mov	sp, r1
   2c452:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2c454:	f7df fb33 	bl	babe <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2c458:	f7e7 ff54 	bl	14304 <_arch_isr_direct_pm>
   2c45c:	f7e8 facc 	bl	149f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2c460:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c464:	4685      	mov	sp, r0
   2c466:	4770      	bx	lr

0002c468 <nrfx_clock_enable>:
}
   2c468:	4770      	bx	lr

0002c46a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2c46a:	f7d6 be51 	b.w	3110 <MPSL_IRQ_CLOCK_Handler>

0002c46e <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2c46e:	f7d7 ba13 	b.w	3898 <mpsl_is_initialized>

0002c472 <nrf_flash_sync_get_timestamp_begin>:
}
   2c472:	4770      	bx	lr

0002c474 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2c474:	f7f8 bb4e 	b.w	24b14 <nrf_cc3xx_platform_init>

0002c478 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2c478:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2c47a:	f7e7 fdbb 	bl	13ff4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2c47e:	f7e7 fe6d 	bl	1415c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2c482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2c486:	f7f8 bb45 	b.w	24b14 <nrf_cc3xx_platform_init>

0002c48a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2c48a:	4700      	bx	r0

0002c48c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2c48c:	f000 b98a 	b.w	2c7a4 <z_impl_k_busy_wait>

0002c490 <is_valid_address>:
{
   2c490:	4603      	mov	r3, r0
   2c492:	4608      	mov	r0, r1
   2c494:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2c498:	b510      	push	{r4, lr}
   2c49a:	690c      	ldr	r4, [r1, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2c49c:	694a      	ldr	r2, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   2c49e:	4362      	muls	r2, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2c4a0:	4293      	cmp	r3, r2
   2c4a2:	d308      	bcc.n	2c4b6 <is_valid_address+0x26>
    if (uicr_allowed &&
   2c4a4:	b130      	cbz	r0, 2c4b4 <is_valid_address+0x24>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2c4a6:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   2c4aa:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
   2c4ae:	bf2c      	ite	cs
   2c4b0:	2000      	movcs	r0, #0
   2c4b2:	2001      	movcc	r0, #1
}
   2c4b4:	bd10      	pop	{r4, pc}
        return true;
   2c4b6:	2001      	movs	r0, #1
   2c4b8:	e7fc      	b.n	2c4b4 <is_valid_address+0x24>

0002c4ba <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2c4ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c4be:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2c4c0:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2c4c2:	4350      	muls	r0, r2
   2c4c4:	4770      	bx	lr

0002c4c6 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2c4c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c4ca:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2c4cc:	4770      	bx	lr

0002c4ce <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2c4ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c4d2:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2c4d4:	4770      	bx	lr

0002c4d6 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2c4d6:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2c4d8:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   2c4da:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2c4dc:	bf9d      	ittte	ls
   2c4de:	6882      	ldrls	r2, [r0, #8]
   2c4e0:	18d2      	addls	r2, r2, r3
   2c4e2:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
   2c4e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2c4ea:	bf94      	ite	ls
   2c4ec:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   2c4ee:	1a58      	subhi	r0, r3, r1
}
   2c4f0:	4770      	bx	lr

0002c4f2 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2c4f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   2c4f6:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2c4fa:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2c4fc:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
   2c500:	6840      	ldr	r0, [r0, #4]
   2c502:	4590      	cmp	r8, r2
   2c504:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2c506:	460f      	mov	r7, r1
   2c508:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   2c50a:	d904      	bls.n	2c516 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   2c50c:	f7fd faa5 	bl	29a5a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2c510:	60ec      	str	r4, [r5, #12]
}
   2c512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2c516:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   2c518:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2c51c:	f7fd fa9d 	bl	29a5a <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   2c520:	6868      	ldr	r0, [r5, #4]
   2c522:	4622      	mov	r2, r4
   2c524:	eb07 0108 	add.w	r1, r7, r8
   2c528:	e7f0      	b.n	2c50c <_WriteNoCheck+0x1a>

0002c52a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2c52a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   2c52e:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2c530:	4606      	mov	r6, r0
   2c532:	4689      	mov	r9, r1
   2c534:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2c536:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2c53a:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   2c53c:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2c53e:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   2c540:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2c542:	bf28      	it	cs
   2c544:	18e4      	addcs	r4, r4, r3
   2c546:	3c01      	subs	r4, #1
   2c548:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2c54a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2c54c:	42bc      	cmp	r4, r7
   2c54e:	bf28      	it	cs
   2c550:	463c      	movcs	r4, r7
   2c552:	4294      	cmp	r4, r2
   2c554:	bf28      	it	cs
   2c556:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   2c558:	4649      	mov	r1, r9
   2c55a:	4428      	add	r0, r5
   2c55c:	4622      	mov	r2, r4
   2c55e:	f7fd fa7c 	bl	29a5a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2c562:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2c564:	4425      	add	r5, r4
      WrOff = 0u;
   2c566:	42ab      	cmp	r3, r5
   2c568:	bf08      	it	eq
   2c56a:	2500      	moveq	r5, #0
  } while (NumBytes);
   2c56c:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2c56e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2c570:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   2c572:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2c574:	d1e1      	bne.n	2c53a <_WriteBlocking+0x10>
}
   2c576:	4640      	mov	r0, r8
   2c578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c57c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2c57c:	f7f4 b8b4 	b.w	206e8 <_DoInit>

0002c580 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2c580:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2c582:	f7ff fffb 	bl	2c57c <SEGGER_RTT_Init>

	return 0;
}
   2c586:	2000      	movs	r0, #0
   2c588:	bd08      	pop	{r3, pc}

0002c58a <z_device_state_init>:
}
   2c58a:	4770      	bx	lr

0002c58c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2c58c:	b138      	cbz	r0, 2c59e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2c58e:	68c3      	ldr	r3, [r0, #12]
   2c590:	8818      	ldrh	r0, [r3, #0]
   2c592:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2c596:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2c59a:	4258      	negs	r0, r3
   2c59c:	4158      	adcs	r0, r3
}
   2c59e:	4770      	bx	lr

0002c5a0 <k_heap_init>:
{
   2c5a0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2c5a2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2c5a6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2c5aa:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2c5ac:	f7e4 bc60 	b.w	10e70 <sys_heap_init>

0002c5b0 <k_mem_slab_init>:
{
   2c5b0:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2c5b2:	2400      	movs	r4, #0
   2c5b4:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2c5b6:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2c5b8:	ea41 0402 	orr.w	r4, r1, r2
   2c5bc:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2c5c0:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   2c5c4:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2c5c6:	d10c      	bne.n	2c5e2 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   2c5c8:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2c5ca:	42a3      	cmp	r3, r4
   2c5cc:	d103      	bne.n	2c5d6 <k_mem_slab_init+0x26>
   2c5ce:	e9c0 0000 	strd	r0, r0, [r0]
}
   2c5d2:	2000      	movs	r0, #0
}
   2c5d4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2c5d6:	6985      	ldr	r5, [r0, #24]
   2c5d8:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2c5da:	3401      	adds	r4, #1
		slab->free_list = p;
   2c5dc:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   2c5de:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2c5e0:	e7f3      	b.n	2c5ca <k_mem_slab_init+0x1a>
		return -EINVAL;
   2c5e2:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2c5e6:	e7f5      	b.n	2c5d4 <k_mem_slab_init+0x24>

0002c5e8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2c5e8:	f3ef 8005 	mrs	r0, IPSR
}
   2c5ec:	3800      	subs	r0, #0
   2c5ee:	bf18      	it	ne
   2c5f0:	2001      	movne	r0, #1
   2c5f2:	4770      	bx	lr

0002c5f4 <z_impl_k_thread_name_set>:
}
   2c5f4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2c5f8:	4770      	bx	lr

0002c5fa <k_thread_name_get>:
}
   2c5fa:	2000      	movs	r0, #0
   2c5fc:	4770      	bx	lr

0002c5fe <z_impl_k_thread_start>:
	z_sched_start(thread);
   2c5fe:	f7f6 bd5b 	b.w	230b8 <z_sched_start>

0002c602 <z_pm_save_idle_exit>:
{
   2c602:	b508      	push	{r3, lr}
	pm_system_resume();
   2c604:	f7e6 fea8 	bl	13358 <pm_system_resume>
}
   2c608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2c60c:	f7fc b865 	b.w	286da <sys_clock_idle_exit>

0002c610 <z_impl_k_mutex_init>:
{
   2c610:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2c612:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2c614:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2c618:	e9c3 3300 	strd	r3, r3, [r3]
}
   2c61c:	4770      	bx	lr

0002c61e <z_queue_node_peek>:
{
   2c61e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2c620:	4604      	mov	r4, r0
   2c622:	b130      	cbz	r0, 2c632 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2c624:	6802      	ldr	r2, [r0, #0]
   2c626:	0793      	lsls	r3, r2, #30
   2c628:	d003      	beq.n	2c632 <z_queue_node_peek+0x14>
		ret = anode->data;
   2c62a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2c62c:	b109      	cbz	r1, 2c632 <z_queue_node_peek+0x14>
			k_free(anode);
   2c62e:	f000 f952 	bl	2c8d6 <k_free>
}
   2c632:	4620      	mov	r0, r4
   2c634:	bd10      	pop	{r4, pc}

0002c636 <z_impl_k_queue_init>:
	list->head = NULL;
   2c636:	2300      	movs	r3, #0
	list->tail = NULL;
   2c638:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2c63c:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2c63e:	f100 030c 	add.w	r3, r0, #12
   2c642:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2c646:	f100 0314 	add.w	r3, r0, #20
   2c64a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2c64e:	4770      	bx	lr

0002c650 <k_queue_append>:
{
   2c650:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2c652:	2301      	movs	r3, #1
   2c654:	9300      	str	r3, [sp, #0]
   2c656:	2300      	movs	r3, #0
{
   2c658:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2c65a:	4619      	mov	r1, r3
   2c65c:	f7f5 f80a 	bl	21674 <queue_insert>
}
   2c660:	b003      	add	sp, #12
   2c662:	f85d fb04 	ldr.w	pc, [sp], #4

0002c666 <k_queue_prepend>:
{
   2c666:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2c668:	2300      	movs	r3, #0
{
   2c66a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2c66c:	9300      	str	r3, [sp, #0]
   2c66e:	4619      	mov	r1, r3
   2c670:	f7f5 f800 	bl	21674 <queue_insert>
}
   2c674:	b003      	add	sp, #12
   2c676:	f85d fb04 	ldr.w	pc, [sp], #4

0002c67a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2c67a:	b15a      	cbz	r2, 2c694 <z_impl_k_sem_init+0x1a>
   2c67c:	428a      	cmp	r2, r1
   2c67e:	d309      	bcc.n	2c694 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2c680:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2c684:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2c688:	e9c0 0000 	strd	r0, r0, [r0]
   2c68c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2c690:	2000      	movs	r0, #0
   2c692:	4770      	bx	lr
		return -EINVAL;
   2c694:	f06f 0015 	mvn.w	r0, #21
}
   2c698:	4770      	bx	lr

0002c69a <notify_queue_locked>:
	if (queue != NULL) {
   2c69a:	b120      	cbz	r0, 2c6a6 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2c69c:	2200      	movs	r2, #0
   2c69e:	4611      	mov	r1, r2
   2c6a0:	3088      	adds	r0, #136	; 0x88
   2c6a2:	f7f7 b953 	b.w	2394c <z_sched_wake>
}
   2c6a6:	4770      	bx	lr

0002c6a8 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   2c6a8:	68c3      	ldr	r3, [r0, #12]
{
   2c6aa:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   2c6ac:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   2c6b0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2c6b4:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2c6b6:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2c6b8:	d502      	bpl.n	2c6c0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2c6ba:	3010      	adds	r0, #16
   2c6bc:	f7f7 faee 	bl	23c9c <z_abort_timeout>
}
   2c6c0:	4620      	mov	r0, r4
   2c6c2:	bd10      	pop	{r4, pc}

0002c6c4 <cancel_async_locked>:
{
   2c6c4:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c6c6:	68c0      	ldr	r0, [r0, #12]
{
   2c6c8:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c6ca:	0784      	lsls	r4, r0, #30
   2c6cc:	f3c0 0140 	ubfx	r1, r0, #1, #1
   2c6d0:	d416      	bmi.n	2c700 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   2c6d2:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2c6d6:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   2c6d8:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   2c6da:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2c6dc:	d510      	bpl.n	2c700 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c6de:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   2c6e2:	b168      	cbz	r0, 2c700 <cancel_async_locked+0x3c>
   2c6e4:	4283      	cmp	r3, r0
   2c6e6:	d11d      	bne.n	2c724 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   2c6e8:	6818      	ldr	r0, [r3, #0]
   2c6ea:	b999      	cbnz	r1, 2c714 <cancel_async_locked+0x50>
   2c6ec:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   2c6f0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2c6f4:	428b      	cmp	r3, r1
   2c6f6:	d101      	bne.n	2c6fc <cancel_async_locked+0x38>
	list->tail = node;
   2c6f8:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   2c6fc:	2200      	movs	r2, #0
   2c6fe:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   2c700:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2c702:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   2c706:	bf1e      	ittt	ne
   2c708:	f042 0202 	orrne.w	r2, r2, #2
   2c70c:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2c70e:	f002 000f 	andne.w	r0, r2, #15
}
   2c712:	bd10      	pop	{r4, pc}
   2c714:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c716:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   2c71a:	4283      	cmp	r3, r0
	list->tail = node;
   2c71c:	bf08      	it	eq
   2c71e:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   2c722:	e7eb      	b.n	2c6fc <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c724:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c726:	6800      	ldr	r0, [r0, #0]
   2c728:	e7db      	b.n	2c6e2 <cancel_async_locked+0x1e>

0002c72a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2c72a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2c72e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2c732:	4283      	cmp	r3, r0
		return b2 - b1;
   2c734:	bf14      	ite	ne
   2c736:	1ac0      	subne	r0, r0, r3
	return 0;
   2c738:	2000      	moveq	r0, #0
}
   2c73a:	4770      	bx	lr

0002c73c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2c73c:	4603      	mov	r3, r0
   2c73e:	b920      	cbnz	r0, 2c74a <z_reschedule_irqlock+0xe>
   2c740:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2c744:	b90a      	cbnz	r2, 2c74a <z_reschedule_irqlock+0xe>
   2c746:	f7e7 bd1f 	b.w	14188 <arch_swap>
   2c74a:	f383 8811 	msr	BASEPRI, r3
   2c74e:	f3bf 8f6f 	isb	sy
}
   2c752:	4770      	bx	lr

0002c754 <z_reschedule_unlocked>:
	__asm__ volatile(
   2c754:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c758:	f3ef 8011 	mrs	r0, BASEPRI
   2c75c:	f383 8811 	msr	BASEPRI, r3
   2c760:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2c764:	f7ff bfea 	b.w	2c73c <z_reschedule_irqlock>

0002c768 <z_priq_dumb_best>:
{
   2c768:	4603      	mov	r3, r0
	return list->head == list;
   2c76a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c76c:	4283      	cmp	r3, r0
   2c76e:	d003      	beq.n	2c778 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2c770:	2800      	cmp	r0, #0
   2c772:	bf38      	it	cc
   2c774:	2000      	movcc	r0, #0
   2c776:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2c778:	2000      	movs	r0, #0
}
   2c77a:	4770      	bx	lr

0002c77c <z_unpend_all>:
{
   2c77c:	b538      	push	{r3, r4, r5, lr}
   2c77e:	4605      	mov	r5, r0
	int need_sched = 0;
   2c780:	2000      	movs	r0, #0
	return list->head == list;
   2c782:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c784:	42a5      	cmp	r5, r4
   2c786:	d000      	beq.n	2c78a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2c788:	b904      	cbnz	r4, 2c78c <z_unpend_all+0x10>
}
   2c78a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2c78c:	4620      	mov	r0, r4
   2c78e:	f7f6 f8cf 	bl	22930 <z_unpend_thread>
		z_ready_thread(thread);
   2c792:	4620      	mov	r0, r4
   2c794:	f7f6 fc48 	bl	23028 <z_ready_thread>
		need_sched = 1;
   2c798:	2001      	movs	r0, #1
   2c79a:	e7f2      	b.n	2c782 <z_unpend_all+0x6>

0002c79c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2c79c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2c79e:	f7f7 fc2f 	bl	24000 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2c7a2:	bd08      	pop	{r3, pc}

0002c7a4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2c7a4:	b108      	cbz	r0, 2c7aa <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2c7a6:	f7e8 bb23 	b.w	14df0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2c7aa:	4770      	bx	lr

0002c7ac <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2c7ac:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2c7ae:	1c4b      	adds	r3, r1, #1
   2c7b0:	bf08      	it	eq
   2c7b2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2c7b6:	4604      	mov	r4, r0
   2c7b8:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2c7ba:	d013      	beq.n	2c7e4 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c7bc:	ea54 0105 	orrs.w	r1, r4, r5
   2c7c0:	d103      	bne.n	2c7ca <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2c7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2c7c6:	f7f7 bc1b 	b.w	24000 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2c7ca:	f06f 0101 	mvn.w	r1, #1
   2c7ce:	1a0a      	subs	r2, r1, r0
   2c7d0:	f04f 31ff 	mov.w	r1, #4294967295
   2c7d4:	eb61 0305 	sbc.w	r3, r1, r5
   2c7d8:	2a00      	cmp	r2, #0
   2c7da:	f173 0100 	sbcs.w	r1, r3, #0
   2c7de:	db02      	blt.n	2c7e6 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2c7e0:	4610      	mov	r0, r2
   2c7e2:	4619      	mov	r1, r3
}
   2c7e4:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2c7e6:	f7f7 fc0b 	bl	24000 <sys_clock_tick_get>
   2c7ea:	2c01      	cmp	r4, #1
   2c7ec:	f175 0300 	sbcs.w	r3, r5, #0
   2c7f0:	bfbc      	itt	lt
   2c7f2:	2401      	movlt	r4, #1
   2c7f4:	2500      	movlt	r5, #0
   2c7f6:	1820      	adds	r0, r4, r0
   2c7f8:	eb45 0101 	adc.w	r1, r5, r1
   2c7fc:	e7f2      	b.n	2c7e4 <sys_clock_timeout_end_calc+0x38>

0002c7fe <k_timer_init>:
	timer->status = 0U;
   2c7fe:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2c800:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2c804:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2c808:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2c80c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2c810:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2c812:	6343      	str	r3, [r0, #52]	; 0x34
}
   2c814:	4770      	bx	lr

0002c816 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2c816:	b510      	push	{r4, lr}
   2c818:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2c81a:	f7f7 fa3f 	bl	23c9c <z_abort_timeout>

	if (inactive) {
   2c81e:	b9b0      	cbnz	r0, 2c84e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2c820:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c822:	b10b      	cbz	r3, 2c828 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2c824:	4620      	mov	r0, r4
   2c826:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2c828:	f104 0018 	add.w	r0, r4, #24
   2c82c:	f7f6 fd90 	bl	23350 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2c830:	b168      	cbz	r0, 2c84e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2c832:	f7f6 fbf9 	bl	23028 <z_ready_thread>
   2c836:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c83a:	f3ef 8011 	mrs	r0, BASEPRI
   2c83e:	f383 8811 	msr	BASEPRI, r3
   2c842:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2c846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c84a:	f7ff bf77 	b.w	2c73c <z_reschedule_irqlock>
   2c84e:	bd10      	pop	{r4, pc}

0002c850 <add_event>:
{
   2c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c852:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2c854:	e9d0 2300 	ldrd	r2, r3, [r0]
   2c858:	4290      	cmp	r0, r2
   2c85a:	4604      	mov	r4, r0
   2c85c:	460d      	mov	r5, r1
   2c85e:	d105      	bne.n	2c86c <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2c860:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2c862:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2c866:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2c868:	6065      	str	r5, [r4, #4]
}
   2c86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2c86c:	2b00      	cmp	r3, #0
   2c86e:	d0f7      	beq.n	2c860 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2c870:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c872:	b100      	cbz	r0, 2c876 <add_event+0x26>
   2c874:	3860      	subs	r0, #96	; 0x60
   2c876:	b107      	cbz	r7, 2c87a <add_event+0x2a>
   2c878:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2c87a:	4639      	mov	r1, r7
   2c87c:	f7ff ff55 	bl	2c72a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2c880:	2800      	cmp	r0, #0
   2c882:	dced      	bgt.n	2c860 <add_event+0x10>
	return list->head == list;
   2c884:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c886:	42b4      	cmp	r4, r6
   2c888:	d0ea      	beq.n	2c860 <add_event+0x10>
   2c88a:	2e00      	cmp	r6, #0
   2c88c:	bf38      	it	cc
   2c88e:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2c890:	2e00      	cmp	r6, #0
   2c892:	d0e5      	beq.n	2c860 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2c894:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c896:	b101      	cbz	r1, 2c89a <add_event+0x4a>
   2c898:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2c89a:	4638      	mov	r0, r7
   2c89c:	f7ff ff45 	bl	2c72a <z_sched_prio_cmp>
   2c8a0:	2800      	cmp	r0, #0
   2c8a2:	dd05      	ble.n	2c8b0 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2c8a4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2c8a6:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2c8aa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2c8ac:	6075      	str	r5, [r6, #4]
			return;
   2c8ae:	e7dc      	b.n	2c86a <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2c8b0:	6863      	ldr	r3, [r4, #4]
   2c8b2:	42b3      	cmp	r3, r6
   2c8b4:	d0d4      	beq.n	2c860 <add_event+0x10>
   2c8b6:	6836      	ldr	r6, [r6, #0]
   2c8b8:	e7ea      	b.n	2c890 <add_event+0x40>

0002c8ba <z_handle_obj_poll_events>:
{
   2c8ba:	4603      	mov	r3, r0
	return list->head == list;
   2c8bc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2c8be:	4283      	cmp	r3, r0
   2c8c0:	d008      	beq.n	2c8d4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2c8c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2c8c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c8c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c8ca:	2300      	movs	r3, #0
	node->prev = NULL;
   2c8cc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2c8d0:	f7f7 be5e 	b.w	24590 <signal_poll_event>
}
   2c8d4:	4770      	bx	lr

0002c8d6 <k_free>:
	if (ptr != NULL) {
   2c8d6:	b120      	cbz	r0, 2c8e2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2c8d8:	1f01      	subs	r1, r0, #4
   2c8da:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2c8de:	f7f4 ba0d 	b.w	20cfc <k_heap_free>
}
   2c8e2:	4770      	bx	lr

0002c8e4 <k_malloc>:
{
   2c8e4:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2c8e6:	2004      	movs	r0, #4
   2c8e8:	f7f8 b8b6 	b.w	24a58 <k_aligned_alloc>

0002c8ec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2c8ec:	4770      	bx	lr
	...

0002c8f0 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2c8f0:	f7f3 bd0c 	b.w	2030c <SystemInit>
